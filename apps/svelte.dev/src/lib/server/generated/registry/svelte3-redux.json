{
	"name": "svelte3-redux",
	"description": "Integrate Redux store with Svelte 3 applications.",
	"repo_url": "https://github.com/dai-shi/svelte3-redux",
	"authors": ["daishi"],
	"homepage": "https://github.com/dai-shi/svelte3-redux#readme",
	"downloads": 21,
	"updated": "2020-07-02T08:24:15.662Z",
	"tags": ["miscellaneous"],
	"github_stars": 30,
	"typescript": true,
	"version": "0.4.0",
	"svelte_range": ">=3.0.0",
	"last_rune_check_version": "0.4.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte3-redux",
				"version": "0.4.0",
				"size": 18720
			},
			{
				"name": "proxy-compare",
				"version": "1.1.6",
				"size": 48082
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# svelte3-redux\n\n[![CI](https://img.shields.io/github/workflow/status/dai-shi/svelte3-redux/CI)](https://github.com/dai-shi/svelte3-redux/actions?query=workflow%3ACI)\n[![npm](https://img.shields.io/npm/v/svelte3-redux)](https://www.npmjs.com/package/svelte3-redux)\n[![size](https://img.shields.io/bundlephobia/minzip/svelte3-redux)](https://bundlephobia.com/result?p=svelte3-redux)\n\nRedux for Svelte 3\n\n## Introduction\n\nThis is an experimental project to combine Redux and Svelte3.\nIt provides the same state usage tracking support\nin [reactive-react-redux](https://github.com/dai-shi/reactive-react-redux).\n\n## Install\n\n```bash\nnpm install svelte3-redux\n```\n\n## Usage (bind)\n\nThis is simple usage.\nReactivity works for all components.\n\n```html\n<script>\nimport { createStore } from 'redux';\nimport { bind } from 'svelte3-redux';\n\nconst initialState = {\n  count: 0,\n  text: 'hello',\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'increment': return { ...state, count: state.count + 1 };\n    case 'decrement': return { ...state, count: state.count - 1 };\n    case 'setText': return { ...state, text: action.text };\n    default: return state;\n  }\n};\n\nconst store = createStore(reducer);\nconst state = bind(store);\n</script>\n\n<h1>Counter</h1>\n<div>\n  <div>\n    <span>Count: {$state.count}</span>\n    <button on:click={() => state.dispatch({ type: 'increment' })}>+1</button>\n    <button on:click={() => state.dispatch({ type: 'decrement' })}>-1</button>\n  </div>\n</div>\n \n<h1>TextBox</h1>\n<div>\n  <div>\n    <span>Text: {$state.text}</span>\n    <input value={$state.text} on:input={event => state.dispatch({ type: 'setText', text: event.target.value })} />\n  </div>\n</div>\n```\n\n## Usage (bindTracked)\n\nThis is recommended usage.\nReactivity works based on state usage tracking.\n\n### store.js\n\n```javascript\nimport { createStore } from 'redux';\nimport { bindTracked } from 'svelte3-redux';\n\nconst initialState = {\n  count: 0,\n  text: 'hello',\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'increment': return { ...state, count: state.count + 1 };\n    case 'decrement': return { ...state, count: state.count - 1 };\n    case 'setText': return { ...state, text: action.text };\n    default: return state;\n  }\n};\n\nconst store = createStore(reducer);\nexport default () => bindTracked(store);\n```\n\n### Counter.svelte\n\n```html\n<script>\n  import getTrackedState from './store';\n\n  const state = getTrackedState();\n</script>\n\n<h1>Counter</h1>\n<div>\n  <div>\n    <span>Count: {$state.count}</span>\n    <button on:click={() => state.dispatch({ type: 'increment' })}>+1</button>\n    <button on:click={() => state.dispatch({ type: 'decrement' })}>-1</button>\n  </div>\n</div>\n```\n\n### TextBox.svelte\n\n```html\n<script>\n  import getTrackedState from './store';\n\n  const state = getTrackedState();\n</script>\n\n<h1>TextBox</h1>\n<div>\n  <div>\n    <span>Text: {$state.text}</span>\n    <input value={$state.text} on:input={event => state.dispatch({ type: 'setText', text: event.target.value })} />\n  </div>\n</div>\n```\n\n## API\n\n<!-- Generated by documentation.js. Update this documentation by updating the source code. -->\n\n### bind\n\nTake Redux store and return a global state for Svelte.\n\n#### Parameters\n\n-   `store` **Store&lt;State, Action>** \n\n#### Examples\n\n```javascript\nimport { createStore } from 'redux';\nimport { bind } from 'svelte3-redux';\n\nconst store = createStore(reducer);\nexport default bind(store);\n```\n\n### bindTracked\n\nTake Redux store and return a global state for Svelte.\nWith state usage tracking.\n\n#### Parameters\n\n-   `store` **Store&lt;State, Action>** \n\n#### Examples\n\n```javascript\nimport { createStore } from 'redux';\nimport { bindTracked } from 'svelte3-redux';\n\nconst store = createStore(reducer);\nexport default () => bindTracked(store);\n```\n\n## Examples\n\nThe [examples](examples) folder contains working examples.\nYou can run one of them with\n\n```bash\nPORT=8080 npm run examples:01_minimal\n```\n\nand open <http://localhost:8080> in your web browser.\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 10],
		[3603, 10],
		[3610, 9],
		[3631, 1],
		[3645, 1],
		[3652, 3],
		[3659, 1],
		[3666, 9],
		[3680, 2],
		[3687, 4],
		[3694, 3],
		[3708, 2],
		[3715, 1],
		[3729, 9],
		[3757, 4],
		[3764, 4],
		[3771, 5],
		[3778, 3],
		[3785, 6],
		[3792, 2],
		[3799, 1],
		[3806, 2],
		[3834, 3],
		[3841, 1],
		[3848, 2],
		[3855, 1],
		[3862, 42],
		[3876, 9],
		[3883, 3],
		[3890, 10],
		[3904, 10],
		[3911, 1],
		[3932, 1],
		[3939, 3],
		[3946, 1],
		[3960, 3],
		[3974, 1],
		[3981, 1],
		[3995, 2],
		[4009, 7],
		[4016, 1],
		[4023, 1],
		[4030, 8],
		[4037, 21],
		[4044, 8],
		[4051, 1],
		[4058, 1],
		[4065, 3],
		[4072, 2],
		[4093, 11],
		[4100, 10],
		[4107, 2],
		[4114, 21],
		[4121, 25],
		[4128, 9],
		[4135, 18]
	],
	"esm": false,
	"cjs": true
}
