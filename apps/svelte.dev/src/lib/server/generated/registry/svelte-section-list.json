{
	"name": "svelte-section-list",
	"description": "Create headless, draggable section lists for Svelte.",
	"repo_url": "https://github.com/TIKramer/svelte-section-list",
	"authors": ["tikramer"],
	"homepage": "https://github.com/TIKramer/svelte-section-list",
	"downloads": 16,
	"updated": "2023-06-06T08:31:14.884Z",
	"tags": ["ui"],
	"github_stars": 17,
	"typescript": true,
	"version": "1.0.9",
	"svelte_range": "^3.54.0",
	"kit_range": "^1.0.0-next.587",
	"last_rune_check_version": "1.0.9",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-section-list",
				"version": "1.0.9",
				"size": 24412
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-section-list\n\nThis is a headless Svelte npm package that provides drag-and-drop functionality for managing items and sections. It offers a flexible and customizable solution for implementing drag-and-drop interactions in your Svelte applications.\n\n## Update\n\nNow much faster for IOS - by using ontouch over draggable\n\n## Demo\n\nHave a play with it here: https://main--transcendent-begonia-7a3d6f.netlify.app/\n\nBeing headless means you have 100% control over the styles:\n\n<div style=\"display: flex; justify-content: space-between;\">\n    <img src=\"https://github.com/TIKramer/svelte-section-list/blob/main/screenshots/default.gif\" width=\"350\" height=\"400\"/> \n    <img src=\"https://github.com/TIKramer/svelte-section-list/blob/main/screenshots/custom.gif\" width=\"350\" height=\"400\"/> \n</div>\n\n## Getting started üë®‚Äçüè´\n\nTo install the library, you can use either npm or yarn:\n\n```shell\n\nnpm install svelte-section-list\n```\n\nor\n\n```shell\n\nyarn add @ svelte-section-list\n```\n\n## Import\n\n```javascript\nimport { DraggableSections } from 'svelte-section-list';\n```\n\n### types\n\nYou can also import some types to help you with the data structure.\n\n```javascript\nimport type { ItemType, SectionType } from 'svelte-section-list';\n```\n\n#### ItemType\n\nThe ItemType interface represents the structure of an item in the section list.\n\n```javascript\ninterface ItemType {\n\tid: number;\n\tname: string;\n}\n```\n\n#### SectionType\n\nThe SectionType interface represents the structure of a section in the section list.\n\n```javascript\ninterface SectionType {\n\ttitle: string;\n\titems: ItemType[];\n}\n```\n\n## Props\n\n### items (required)\n\nAn array of ItemType objects representing the initial items within the item list to be displayed.\n\n#### example\n\n```javascript\nconst items: ItemType[] = [\n\t{ id: 1, name: 'Item 1' },\n\t{ id: 2, name: 'Item 2' },\n\t{ id: 3, name: 'Item 3' }\n];\n```\n\n### sections (required)\n\nAn array of SectionType objects representing the sections to be displayed.\n\n#### example\n\n```javascript\nconst sections: SectionType[] = [\n\t{ title: 'Section 1', items: [item1, item2] },\n\t{ title: 'Section 2', items: [] }\n];\n```\n\n### ItemComponent (optional)\n\nAn optional prop to provide a custom component used to render individual items. The component should accept an item prop of type ItemType. For example the default is:\n\n```svelte\n<script lang=\"ts\">\n\texport let item: ItemType;\n</script>\n\n<div class={'item'}>\n\t{item && item.name}\n</div>\n\n<style>\n\t.item {\n\t\tborder: 1px solid black;\n\t\tpadding: 10px;\n\t\tmargin: 10px;\n\t\tcursor: move;\n\t}\n</style>\n```\n\n### SectionComponent (optional)\n\nAn optional prop to provide a custom component used to render individual sections. The component should accept a section prop of type SectionType. For example the default is:\n\n```svelte\n<script lang=\"ts\">\n\texport let section: SectionType;\n</script>\n\n<div class=\"section\">\n\t<h2>{section && section.title}</h2>\n\t<slot />\n</div>\n\n<style>\n\t.section {\n\t\tdisplay: inline-block;\n\t\tborder: 1px solid black;\n\t\tpadding: 10px;\n\t\tmargin: 10px;\n\t\tmin-width: 200px;\n\t\tmin-height: 100px;\n\t}\n</style>\n```\n\n### ItemContainerComponent (Optional)\n\nAn optional prop to provide a custom container component for organizing and displaying items. The component should include a <slot/> element to allow the rendering of individual items. For example:\n\n```svelte\n<div class=\"container\">\n\t<h2>Items</h2>\n\t<slot />\n</div>\n\n<style>\n\t.container {\n\t\tmin-height: 100px;\n\t}\n</style>\n```\n\n### SectionContainerComponent (Optional)\n\nAn optional prop to provide a custom container component for organizing and displaying sections. The component should include a <slot /> element to allow the rendering of individual sections. For example:\n\n```svelte\n<div>\n\t<h2>Sections</h2>\n\t<slot />\n</div>\n```\n\n## Usage\n\n### Basic usage\n\n```svelte\n<script lang=\"ts\">\n\timport { DraggableSections } from 'svelte-section-list';\n\timport type { ItemType } from 'svelte-section-list';\n\n\tlet items: ItemType[] = [\n\t\t{ id: 1, name: 'Wash sink' },\n\t\t{ id: 2, name: 'Brush teeth' },\n\t\t{ id: 3, name: 'Flush toilet' }\n\t];\n\n\tlet sections = [\n\t\t{ title: 'Todo', items: [] },\n\t\t{ title: 'Done', items: [] }\n\t];\n</script>\n\n<div class=\"container\">\n\t<DraggableSections {items} bind:sections />\n</div>\n```\n\n### Custom usage\n\n```svelte\n<script>\n\timport { DraggableSections } from 'svelte-section-list';\n\timport CustomItemComponent from './CustomItemComponent.svelte';\n\timport CustomSectionComponent from './CustomSectionComponent.svelte';\n\timport CustomItemContainer from './CustomItemContainer.svelte';\n\timport CustomSectionContainer from './CustomSectionContainer.svelte';\n\n\tconst items = [\n\t\t{ id: 1, name: 'Item 1' },\n\t\t{ id: 2, name: 'Item 2' },\n\t\t{ id: 3, name: 'Item 3' }\n\t];\n\n\tconst sections = [\n\t\t{\n\t\t\ttitle: 'Section 1',\n\t\t\titems: [\n\t\t\t\t{ id: 4, name: 'Item 4' },\n\t\t\t\t{ id: 5, name: 'Item 5' }\n\t\t\t]\n\t\t},\n\t\t{ title: 'Section 2', items: [] }\n\t];\n</script>\n\n<DraggableSections\n\t{items}\n\t{sections}\n\tItemComponent={CustomItemComponent}\n\tSectionComponent={CustomSectionComponent}\n\tItemContainerComponent={CustomItemContainer}\n\tSectionContainerComponent={CustomSectionContainer}\n/>\n```\n\n## Retrieving Values\n\nTo retrieve the current state of the items and sections after drag-and-drop interactions, you can bind to the necessary values using the bind:items and/or bind:sections syntax. For example:\n\n```svelte\n<DraggableSections {items} bind:sections />\n```\n\n## Examples\n\nAn example usage can be seen in the route directory: https://github.com/TIKramer/svelte-section-list/tree/main/src/routes\n\nA live example can be found here: https://main--transcendent-begonia-7a3d6f.netlify.app/\n\n## Contributions\n\nContributions to the svelte-section-list library are welcome! If you would like to contribute, please follow these guidelines:\n\n-Fork the repository and clone it to your local machine.\n-Install the dependencies by running npm install.\n-Create a new branch for your feature or bug fix: git checkout -b my-feature.\n-Make your changes and ensure that the code follows the project's coding conventions.\n-Commit your changes and push them to your forked repository.\n-Submit a pull request with a clear description of your changes and the problem they solve.\n\nIf it all works and looks good, I'll merge it in :)\n\nThank you for your interest in contributing to svelte-section-list! Your contributions are greatly appreciated.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 18],
		[3603, 16],
		[3610, 20],
		[3617, 3],
		[3624, 6],
		[3631, 18],
		[3638, 11],
		[3645, 14],
		[3652, 6],
		[3659, 14],
		[3666, 22],
		[3673, 12],
		[3680, 10],
		[3687, 5],
		[3694, 3],
		[3701, 2],
		[3708, 4],
		[3715, 22],
		[3722, 10],
		[3729, 19],
		[3736, 11],
		[3743, 6],
		[3750, 13],
		[3757, 11],
		[3764, 12],
		[3771, 4],
		[3778, 9],
		[3792, 2],
		[3799, 1],
		[3806, 3],
		[3813, 13],
		[3820, 8],
		[3834, 21],
		[3841, 71],
		[3848, 4],
		[3855, 3],
		[3862, 3],
		[3869, 12],
		[3876, 21],
		[3883, 14],
		[3890, 44],
		[3897, 7],
		[3904, 4],
		[3911, 10],
		[3918, 5],
		[3925, 20],
		[3932, 13],
		[3939, 13],
		[3946, 3],
		[3953, 2],
		[3960, 5],
		[3967, 4],
		[3974, 22],
		[3981, 3],
		[3995, 2],
		[4002, 11],
		[4009, 8],
		[4016, 9],
		[4023, 19],
		[4030, 10],
		[4037, 20],
		[4044, 26],
		[4051, 5],
		[4058, 19],
		[4065, 3],
		[4072, 6],
		[4079, 18],
		[4086, 1],
		[4093, 2],
		[4100, 31],
		[4107, 13],
		[4114, 16],
		[4121, 12],
		[4128, 7],
		[4135, 9]
	]
}
