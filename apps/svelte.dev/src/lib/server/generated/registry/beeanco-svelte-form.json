{
	"name": "@beeanco/svelte-form",
	"description": "Build forms with validation using Yup schema in Svelte.",
	"repo_url": "https://github.com/LukasHechenberger/opensource",
	"authors": ["lhechenberger"],
	"homepage": "https://lukashechenberger.github.io/beeanco-opensource/docs/svelte-form/",
	"downloads": 4,
	"updated": "2022-02-04T11:07:30.478Z",
	"tags": ["miscellaneous"],
	"typescript": true,
	"version": "0.4.1",
	"svelte_range": "3.43.0",
	"last_rune_check_version": "0.4.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@beeanco/svelte-form",
				"version": "0.4.1",
				"size": 69405
			}
		],
		"dependencies": [],
		"circular": []
	},
	"legacy_svelte": true,
	"readme": "<!-- BEGIN header -->\n<!-- This section is generated, do not edit it! -->\n\n# @beeanco/svelte-form\n\n> Easy forms in svelte\n\n## Installation\n\nWith [node.js](https://nodejs.org/en/) installed, use npm to install this package and its peer dependencies:\n\n```sh\nnpm install @beeanco/svelte-form yup\n```\n\n<!-- END header -->\n\n## Usage\n\nBasically you only need to use the _createForm_ function to create a form using a _[yup](https://www.npmjs.com/package/yup) schema_ and an action in your svelte component, and use it with the `<Form />` component:\n\n```svelte\n<script>\n  import { createForm, Form } from '@beeanco/svelte-form';\n  import { object, string } from 'yup';\n\n  // Create a yup schema for your form\n  const schema = object().shape({\n    username: string().required(),\n    password: string().required(),\n  });\n\n  // The action to run\n  async function action(values) {\n    console.info(values);\n  }\n\n  // Create the form object\n  const form = createForm({ schema, action });\n</script>\n\n<Form {form}>\n  <!-- Your inputs... -->\n</Form>\n```\n\nThe easiest way to add inputs and buttons to this form is to use [`@beeanco/svelte-bulma`](https://www.npmjs.com/package/@beeanco/svelte-bulma), which contains svelte components for the [bulma](https://bulma.io) CSS framework. Don't forget to `npm install @beeanco/svelte-bulma`!\n\n```svelte\n<!-- LoginForm.svelte -->\n<script>\n  import { createForm, Form, FieldContext } from '@beeanco/svelte-form';\n  import { FormField, ErrorMessage, SubmitField } from '@beeanco/svelte-bulma';\n  import { object, string } from 'yup';\n\n  // Create a yup schema for your form\n  // (https://www.npmjs.com/package/yup)\n  const schema = object().shape({\n    username: string().label('Username').required(),\n    password: string().label('Password').required(),\n  });\n\n  // The function to call with the resulting object\n  async function action(values) {\n    console.info('A user wants to log in with these credentials:', values);\n\n    // You can call your API here...\n    await new Promise((resolve) => setTimeout(resolve, 200));\n\n    // ...and errors thrown here are reported.\n    if (Math.random() > 0.5) {\n      throw new Error('nope...');\n    }\n  }\n\n  // Create the form object\n  const form = createForm({ schema, action });\n\n  // Get the field stores\n  const { value: nameValue, error: nameError } = form.fields.get('username');\n  const { value: passwordValue, error: passwordError } = form.fields.get('password');\n</script>\n\n<h1>Login to continue</h1>\n\n<Form {form}>\n  <FormField name=\"username\" placeholder=\"Your Username\" />\n  <FormField name=\"password\" placeholder=\"Your Password\" />\n\n  <ErrorMessage />\n\n  <SubmitField label=\"Submit\" />\n</Form>\n```\n\nOf course you can use this package with other CSS frameworks as well. Just use the stores returned by the `createForm` function.\n\nComplete example **without bulma**:\n\n```svelte\n<!-- LoginForm.svelte -->\n<script>\n  import { createForm, Form } from '@beeanco/svelte-form';\n  import { object, string } from 'yup';\n\n  // Create a yup schema for your form\n  // (https://www.npmjs.com/package/yup)\n  const schema = object().shape({\n    username: string().required(),\n    password: string().required(),\n  });\n\n  // The function to call with the resulting object\n  async function action(values) {\n    console.info('A user wants to log in with these credentials:', values);\n\n    // You can call your API here...\n    await new Promise((resolve) => setTimeout(resolve, 200));\n\n    // ...and errors thrown here are reported.\n    if (Math.random() > 0.5) {\n      throw new Error('nope...');\n    }\n  }\n\n  // Create the form object\n  const form = createForm({ schema, action });\n\n  // Get the field stores\n  const { value: nameValue, error: nameError } = form.fields.get('username');\n  const { value: passwordValue, error: passwordError } = form.fields.get('password');\n</script>\n\n<h1>Login to continue</h1>\n\n<!-- The <Form /> component sets up the svelte contexts -->\n<Form {form} let:error let:submitting>\n  <!-- let:values is also available -->\n\n  <label>\n    Username\n    <input type=\"text\" bind:value={$nameValue} />\n\n    {#if $nameError}\n      <strong>{$nameError.message}</strong>\n    {/if}\n  </label>\n\n  <label>\n    Password\n    <input type=\"password\" bind:value={$passwordValue} />\n\n    {#if $passwordError}\n      <strong>{$passwordError.message}</strong>\n    {/if}\n  </label>\n\n  <label>\n    {#if error}\n      <strong>Oops! {error.message}</strong>\n    {/if}\n\n    {#if submitting}\n      <i>Submitting...</i>\n    {:else}\n      <button type=\"submit\">log in</button>\n    {/if}\n  </label>\n</Form>\n\n<style>\n  /* Minimal styling */\n  label {\n    display: block;\n  }\n</style>\n```\n",
	"downloads_history": [
		[3589, 1],
		[3596, 6],
		[3603, 2],
		[3610, 9],
		[3617, 13],
		[3624, 8],
		[3631, 2],
		[3638, 1],
		[3645, 4],
		[3652, 4],
		[3659, 4],
		[3666, 5],
		[3673, 2],
		[3687, 6],
		[3701, 3],
		[3708, 3],
		[3715, 2],
		[3722, 1],
		[3736, 3],
		[3757, 30],
		[3764, 6],
		[3771, 5],
		[3778, 1],
		[3785, 2],
		[3799, 2],
		[3806, 2],
		[3813, 2],
		[3820, 1],
		[3834, 2],
		[3841, 1],
		[3855, 10],
		[3862, 27],
		[3869, 1],
		[3876, 8],
		[3883, 4],
		[3890, 1],
		[3904, 10],
		[3911, 2],
		[3932, 2],
		[3939, 2],
		[3960, 2],
		[3974, 1],
		[3981, 5],
		[3988, 3],
		[3995, 5],
		[4002, 5],
		[4009, 1],
		[4016, 1],
		[4023, 1],
		[4030, 2],
		[4037, 9],
		[4044, 6],
		[4051, 7],
		[4058, 1],
		[4072, 14],
		[4079, 14],
		[4086, 16],
		[4093, 41],
		[4100, 7],
		[4107, 1],
		[4114, 4],
		[4121, 7],
		[4128, 4]
	]
}
