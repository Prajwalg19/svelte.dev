{
	"name": "@konkat/svelte-spy",
	"description": "Create Svelte actions to listen for HTML attribute updates.",
	"repo_url": "https://github.com/KonkatHub/svelte-spy",
	"authors": ["gabrielgaron", "benocxx"],
	"homepage": "https://github.com/KonkatHub/svelte-spy.git",
	"downloads": 5,
	"updated": "2023-07-16T20:21:44.889Z",
	"tags": ["miscellaneous"],
	"github_stars": 1,
	"typescript": true,
	"version": "0.0.2",
	"svelte_range": "^4.0.0",
	"kit_range": "^1.20.4",
	"last_rune_check_version": "0.0.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@konkat/svelte-spy",
				"version": "0.0.2",
				"size": 10664
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Svelte Spy\n\nSpy (listen) on intel (HTML attributes) with this simple to use Svelte Action.\n\n## Goal\n\nThe goal of this project is to provide a simple way to spy on HTML attributes updates\nwith a Svelte Action. It should be easy to use and easy to understand via its \"spy-themed\" API.\n\n## Table of content\n\n- [Svelte Spy](#svelte-spy)\n  - [Goal](#goal)\n  - [Table of content](#table-of-content)\n  - [Installation](#installation)\n  - [Getting started](#getting-started)\n    - [Lexicon](#lexicon)\n  - [Examples](#examples)\n    - [Spying on multiple intel](#spying-on-multiple-intel)\n    - [Selecting a specific target](#selecting-a-specific-target)\n  - [API Reference](#api-reference)\n    - [Spy action](#spy-action)\n    - [SignalEvent](#signalevent)\n\n## Installation\n\nTo install this package:\n\n```bash\nnpm i @konkat/svelte-spy\nyarn add @konkat/svelte-spy\npnpm add @konkat/svelte-spy\n```\n\n## Getting started\n\nFirst of all, you will need an HTML element with an attribute you want to spy on.\n\nFor example:\n\n```html\n<script lang=\"ts\">\n  let isClicked = false\n</script>\n\n<button data-clicked={isClicked} on:click={() => (isClicked = !isClicked)}>\n  Click me\n</button>\n```\n\n> Note: You can use any attribute you want, but it must be a valid HTML attribute.\n\nThen, you will need an HTML element that will \"spy\" (listen) to the attribute updates. Also add\na `on:signal` event handler to the element to receive the updates.\n\nFor example:\n\n```html\n<script lang=\"ts\">\n  import { spy, type SignalEvent } from '@konkat/svelte-spy'\n\n  function onSignal(e: SignalEvent) {\n    const { intel, targetElement, value } = e.detail;\n    console.log(`{intel} on {targetElement} was updated to {value}`)\n  }\n</script>\n\n<div\n  use:spy={{\n    target: 'button',\n    intel: ['data-clicked'],\n  }}\n  on:signal={onSignal}\n>\n  Spying...\n</div>\n```\n\n### Lexicon\n\n- **Spy**: The HTML element that will listen to the attribute updates.\n- **Target**: The HTML element you want to spy on.\n- **Intel**: The HTML attribute you want to spy on.\n- **Signal**: The event that is fired when the attribute is updated.\n\n## Examples\n\nWe'll go over some examples to see how to use this package at its full potential.\n\n> For simplicity purposes, we'll colocate the spy and the target in the same file. But you can\n> separate them in different files if you want. Matter of fact, they can be as far from each other as you want and they don't need to be children/parent of each other.\n\n### Spying on multiple intel\n\nIn the following examples, we will spy on multiple attributes at the same time, one of the\nattributes being a stardard HTML button attribute (`disabled`):\n\n```html\n<script lang=\"ts\">\n  import { spy, type SignalEvent } from '@konkat/svelte-spy'\n\n  let isClicked = false\n  let clickCount = 0;\n  let disabled = false;\n\n  function onClick() {\n    isClicked = !isClicked\n    clickCount++\n    if (clickCount >= 5) {\n      isDisabled = true\n    }\n  }\n\n  function onSignal(e: SignalEvent) {\n    console.log(e.detail)\n  }\n</script>\n\n<button data-clicked={isClicked} {disabled} on:click={onClick}>\n  Click me\n</button>\n\n<div\n  use:spy={{\n    target: 'button',\n    intel: ['data-clicked', 'disabled'],\n  }}\n  on:signal={onSignal}\n>\n  Spying...\n</div>\n```\n\n### Selecting a specific target\n\nTo spy on a target, you can use any valid CSS selector. For example, you can spy on a specific\nelement with an `id` attribute:\n\n> Under the hood, we simply use `document.querySelector(target)` to find the target element.\n\n```html\n<script lang=\"ts\">\n  import { spy, type SignalEvent } from '@konkat/svelte-spy'\n\n  let isClicked = false\n\n  function onClick() {\n    isClicked = !isClicked\n  }\n\n  function onSignal(e: SignalEvent) {\n    console.log(e.detail)\n  }\n</script>\n\n<button id=\"MyButton\" data-clicked={isClicked} on:click={onClick}>\n  Click me\n</button>\n\n<div\n  use:spy={{\n    target: '#MyButton',\n    intel: ['data-clicked'],\n  }}\n  on:signal={onSignal}\n>\n  Spying...\n</div>\n```\n\n## API Reference\n\nWhile using this package, you can hover any functions/types/properties to see their\ndocumentation.\n\n### Spy action\n\nThe `spy` action is the main way to spy on a target. It is used to spy on\nHTML attributes updates.\n\nHere's the signature of the `spy` action:\n\n```ts\nconst spy: Action<HTMLElement, SpyOptions, SpyEvents>;\n```\n\nWhen using the `spy` action, you must provide a SpyOptions object as a parameter:\n\n```ts\ntype SpyOptions = {\n  target: string;\n  intel: string[];\n};\n```\n\n### SignalEvent\n\nThe `SignalEvent` is fired when an **intel** being spied on is updated. It's\na `CustomEvent` with the type of `signal`. It contains a `detail` property\nthat is of type `SignalEventDetail`:\n\n```ts\ntype SignalEventDetail = {\n  spy: HTMLElement;\n  intel: string;\n  value: string | null;\n  target: string;\n  targetElement: HTMLElement;\n};\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 1],
		[3596, 6],
		[3603, 3],
		[3624, 1],
		[3631, 4],
		[3638, 1],
		[3652, 1],
		[3659, 1],
		[3666, 2],
		[3680, 1],
		[3708, 1],
		[3729, 1],
		[3743, 1],
		[3750, 1],
		[3757, 1],
		[3764, 2],
		[3771, 1],
		[3778, 2],
		[3799, 2],
		[3806, 2],
		[3827, 1],
		[3834, 1],
		[3841, 10],
		[3848, 2],
		[3855, 1],
		[3862, 6],
		[3869, 3],
		[3883, 5],
		[3890, 1],
		[3897, 2],
		[3904, 3],
		[3918, 1],
		[3925, 7],
		[3932, 6],
		[3939, 5],
		[3946, 2],
		[3953, 4],
		[3960, 3],
		[3967, 3],
		[3974, 2],
		[3981, 1],
		[3988, 2],
		[4016, 3],
		[4023, 2],
		[4030, 2],
		[4037, 5],
		[4044, 8],
		[4051, 3],
		[4058, 2],
		[4072, 1],
		[4086, 1],
		[4093, 2],
		[4100, 5],
		[4107, 2],
		[4114, 5],
		[4121, 9],
		[4128, 2]
	],
	"esm": true,
	"cjs": false
}
