{
	"name": "svelte-mask-input",
	"description": "Apply input masks for credit cards, phone numbers, and dates.",
	"repo_url": "",
	"authors": ["xnimorz"],
	"downloads": 14,
	"updated": "2019-10-13T14:53:13.130Z",
	"tags": ["ui"],
	"typescript": false,
	"version": "0.0.1",
	"svelte_range": "3.x",
	"last_rune_check_version": "0.0.1",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-mask-input",
				"version": "0.0.1",
				"size": 12368
			},
			{
				"name": "input-core",
				"version": "2.0.1",
				"size": 39667
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "## Mask input with simple API and rich customization.\n\nIf you need to create an input for:\n\n- credit card\n- phone number\n- date\n- birthday\n- numbers\n- Or other custom mask\n\nThis project could help you in all this situations!\n\nTake a look at our demos: https://codesandbox.io/s/svelte-mask-input-demo-xurgr\n\n### How to use it:\n\nInstall it:\n\n```\nnpm install --save svelte-mask-input\n```\n\nor if you're using yarn:\n\n```\nyarn add svelte-mask-input\n```\n\nImport `MaskInput` component:\n\n```js\nimport MaskInput from 'svelte-mask-input/MaskInput.svelte';\n```\n\nUse it (for example for CreditCard):\n\n```js\n<MaskInput alwaysShowMask maskChar=\"_\" mask=\"0000-000000-00000\" />\n```\n\nAdd event listeners:\n\n```js\n<script>\n  import MaskInput from 'svelte-mask-input/MaskInput.svelte';\n\n  let mask = '0000-0000-0000-0000';\n\n  const handleChange = ({ detail }) => {\n    console.log(detail.inputState.maskedValue); // stores the value of input\n\n    if (detail.inputState.maskedValue.indexOf('34') === 0 || detail.inputState.maskedValue.indexOf('37') === 0) {\n      mask = '0000-000000-00000';\n      return;\n    }\n\n    mask = '0000-0000-0000-0000';\n  };\n</script>\n\n<MaskInput alwaysShowMask maskChar=\"_\" {mask} on:change={handleChange} />\n```\n\nCongrats! You made the first masked input :)\n\nCheckout more usecases here: https://codesandbox.io/s/romantic-franklin-xurgr\n\n### Where to use?\n\nCredit cards:\n\n```js\n<MaskInput alwaysShowMask maskChar=\"_\" mask=\"0000-000000-00000\" />\n```\n\nPhones (you still can change prefixes, country code like in credit card example):\n\n```js\n<MaskInput alwaysShowMask mask=\"+1 (000) 000 - 0000\" size={20} showMask maskChar=\"_\" />\n```\n\nDates:\n\n```js\n<script>\n  import MaskInput from 'svelte-mask-input/MaskInput.svelte';\n\n  let maskString = 'DD.MM.YYYY';\n  let mask = '00.00.0000';\n\n  const handleChange = ({ detail }) => {\n    const value = detail.inputState.maskedValue;\n    if (parseInt(value[6], 10) > 2) {\n      maskString = 'DD.MM.YY';\n      mask = '00.00.00';\n    } else {\n      maskString = 'DD.MM.YYYY';\n      mask = '00.00.0000';\n    }\n  };\n</script>\n\n<MaskInput alwaysShowMask {maskString} {mask} on:change={handleChange}/>\n```\n\nNumbers:\n\n```js\n<script>\n  import NumberInput from 'svelte-mask-input/NumberInput.svelte';\n</script>\n\n<NumberInput />\n```\n\n### Which props it has?\n\nMask input has next props:\n\n| Prop           | Default value | Description                                                                                                                                                                                            |\n| -------------- | ------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| value          | -             | The value of the input. Will be processed to masked one. In this case you can control the value of the component                                                                                       |\n| defaultValue   | -             | The default value of the input. Will be applied only during the first render                                                                                                                           |\n| maskString     | -             | The mask string to show if there are no filled chars. It's length should be the same as `mask`. Example: `'DD.MM.YYYY'`                                                                                |\n| maskChar       | ''            | In case you don't need a custom string you can define only a definite char for mask. Example: `maskChar = '_'` and `mask = '0000-0000-0000-0000'` will give: `____-____-____-____`                     |\n| mask           | -             | The mask of the input. Could be a credit card: `'0000-0000-0000-0000'`, date: `00.00.0000` or whatever you want :) Doesn't work if `reformat` prop is setted                                           |\n| maskFormat     | regexp        | The regexp for custom formatting. You may use it if you want to define a specific mask. See example here: https://github.com/xnimorz/masked-input/blob/master/packages/input-core/src/index.ts#L16-L28 |\n| alwaysShowMask | false         | Flag to show the mask                                                                                                                                                                                  |\n| showMask       | false         | Show mask if there is any data in input                                                                                                                                                                |\n| reformat       | -             | The function, which defines a custom formatting rules. In case if you can't describe the format only with mask (e.g. numbers). If you use this prop `mask` prop will be ignored                        |\n\nSvelte mask input pass all props that it doesn't handle right to `input` html element.\n\n### Quick start examples at local machine\n\n```\ngit clone git@github.com:xnimorz/svelte-mask-input.git\ncd svelte-mask-input/example\nyarn install\nyarn dev\n```\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 4],
		[3596, 5],
		[3603, 2],
		[3610, 4],
		[3617, 8],
		[3624, 8],
		[3631, 3],
		[3638, 3],
		[3645, 3],
		[3652, 1],
		[3659, 6],
		[3666, 2],
		[3673, 12],
		[3680, 3],
		[3687, 7],
		[3694, 3],
		[3701, 3],
		[3708, 9],
		[3715, 23],
		[3722, 16],
		[3729, 8],
		[3736, 1],
		[3743, 3],
		[3750, 2],
		[3757, 5],
		[3764, 1],
		[3771, 3],
		[3778, 6],
		[3785, 3],
		[3792, 3],
		[3799, 2],
		[3806, 7],
		[3813, 4],
		[3820, 2],
		[3827, 2],
		[3834, 1],
		[3841, 3],
		[3848, 10],
		[3855, 5],
		[3862, 7],
		[3869, 4],
		[3876, 9],
		[3883, 1],
		[3890, 7],
		[3897, 3],
		[3904, 4],
		[3918, 4],
		[3932, 6],
		[3939, 4],
		[3946, 3],
		[3953, 3],
		[3960, 6],
		[3967, 3],
		[3974, 3],
		[3981, 4],
		[3995, 3],
		[4002, 2],
		[4009, 3],
		[4016, 1],
		[4023, 2],
		[4030, 5],
		[4037, 3],
		[4044, 10],
		[4051, 2],
		[4065, 3],
		[4072, 4],
		[4079, 1],
		[4086, 3],
		[4093, 12],
		[4100, 4],
		[4107, 6],
		[4114, 14],
		[4121, 6],
		[4128, 3]
	],
	"esm": false,
	"cjs": true
}
