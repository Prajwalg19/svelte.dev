{
	"name": "svelte-tel-input",
	"description": "Provides a lightweight tel/phone input standardizer for Svelte.",
	"repo_url": "https://github.com/gyurielf/svelte-tel-input",
	"authors": ["gyurielf"],
	"homepage": "https://github.com/gyurielf/svelte-tel-input#readme",
	"downloads": 6905,
	"updated": "2025-02-18T13:23:56.457Z",
	"tags": ["ui"],
	"github_stars": 110,
	"typescript": true,
	"version": "3.6.0",
	"svelte_range": "^3.58.0 || ^4.0.0 || ^5.0.0",
	"kit_range": "^2.5.17",
	"last_rune_check_version": "3.6.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-tel-input",
				"version": "3.6.0",
				"size": 140945
			},
			{
				"name": "libphonenumber-js",
				"version": "1.10.43",
				"size": 8243762
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "<a name=\"readme-top\"></a>\n\n[![npm version](https://badge.fury.io/js/svelte-tel-input.svg)](https://badge.fury.io/js/svelte-tel-input)\n\n# Svelte Tel Input\n\n> Lightweight svelte tel/phone input standardizer.\n\n<img src=\"https://raw.githubusercontent.com/gyurielf/svelte-tel-input/main/static/demo.gif\" width=\"600px\" align=\"center\">\n\nðŸ”¥ Check it out live [here](https://svelte-tel-input.vercel.app/)\n\n## Installation\n\nSvelte Tel Input is distributed via [npm](https://www.npmjs.com/package/svelte-tel-input).\n\n```bash\nnpm install svelte-tel-input\n```\n\n## Features\n\n- Support SSR/SSG.\n- Parse and validate phone number.You can store one exact format (`E164`), no matter how users type their phone numbers.\n- Format (specified to its country), to make it more readable.\n- Prevent non-digits typing into the input, except the leading `+` sign (and `space` optionally).\n- Handle copy-pasted phone numbers, it's sanitize non-digit characters except the leading `+` sign (and `space` optionally).\n- Automatic placeholder generation for the selected country.\n- International or National formatted phone numbers.\n\n## Usage\n\n### Advanced\n\n_Snippet would be too long_ - [Example](https://github.com/gyurielf/svelte-tel-input/blob/main/apps/site/src/lib/components/examples/AdvancedPhoneInput.svelte) - [REPL](https://stackblitz.com/edit/svelte-tel-input-repl-1jfaar?file=README.md) (StackBlitz)\n\n### Basic\n\n[Example](https://github.com/gyurielf/svelte-tel-input/blob/main/apps/site/src/lib/components/examples/BasicPhoneInput.svelte) - [REPL](https://stackblitz.com/edit/svelte-tel-input-repl?file=README.md) (StackBlitz)\n\n```svelte\n<script lang=\"ts\">\n  import { TelInput, normalizedCountries } from 'svelte-tel-input';\n  import type { DetailedValue, CountryCode, E164Number } from 'svelte-tel-input/types';\n\n  // Any Country Code Alpha-2 (ISO 3166)\n  let selectedCountry: CountryCode | null = 'HU';\n\n  // You must use E164 number format. It's guarantee the parsing and storing consistency.\n  let value: E164Number | null = '+36301234567';\n\n  // Validity\n  let valid = true;\n\n  // Optional - Extended details about the parsed phone number\n  let detailedValue: DetailedValue | null = null;\n</script>\n\n<div class=\"wrapper\">\n  <select\n    class=\"country-select {!valid ? 'invalid' : ''}\"\n    aria-label=\"Default select example\"\n    name=\"Country\"\n    bind:value={selectedCountry}\n  >\n    <option value={null} hidden={selectedCountry !== null}>Please select</option>\n    {#each normalizedCountries as currentCountry (currentCountry.id)}\n      <option\n        value={currentCountry.iso2}\n        selected={currentCountry.iso2 === selectedCountry}\n        aria-selected={currentCountry.iso2 === selectedCountry}\n      >\n        {currentCountry.iso2} (+{currentCountry.dialCode})\n      </option>\n    {/each}\n  </select>\n  <TelInput\n    bind:country={selectedCountry}\n    bind:value\n    bind:valid\n    bind:detailedValue\n    class=\"basic-tel-input {!valid ? 'invalid' : ''}\"\n  />\n</div>\n\n<style>\n  .wrapper :global(.basic-tel-input) {\n    height: 32px;\n    padding-left: 12px;\n    padding-right: 12px;\n    border-radius: 6px;\n    border: 1px solid;\n    outline: none;\n  }\n\n  .wrapper :global(.country-select) {\n    height: 36px;\n    padding-left: 12px;\n    padding-right: 12px;\n    border-radius: 6px;\n    border: 1px solid;\n    outline: none;\n  }\n\n  .wrapper :global(.invalid) {\n    border-color: red;\n  }\n</style>\n```\n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n\n## Props\n\nThe default export of the library is the main TelInput component. It has the following props:\n\n| Property name | Type                   | Default Value | Usage                                                                                                                                                                                                                                                                                                                |\n| ------------- | ---------------------- | ------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| value         | `E164Number \\| null`   | `null`        | [E164](https://en.wikipedia.org/wiki/E.164) is the international format of phone.numbers. This is the main entry point to store and/or load an existent phone number.                                                                                                                                                |\n| country       | `CountryCode \\| null`  | `null`        | It's accept any Country Code Alpha-2 (ISO 3166). You can set manually (e.g: by the user via a select). The parser will inspect the entered phone number and if it detect a valid country calling code, then it's automatically set the country to according to the detected country calling code. E.g: `+36` -> `HU` |\n| disabled      | `boolean`              | `false`       | It's block the parser and prevent entering input. You must handle its styling on your own.                                                                                                                                                                                                                           |\n| valid         | `boolean`              | `true`        | Indicates whether the entered tel number validity.                                                                                                                                                                                                                                                                   |\n| detailedValue | `DetailedValue \\|null` | `null`        | All of the formatted results of the tel input.                                                                                                                                                                                                                                                                       |\n| class         | `string`               | ``            | You can pass down any classname to the component                                                                                                                                                                                                                                                                     |\n| required      | `boolean \\| null`      | `null`        | Set the required attribute on the input element                                                                                                                                                                                                                                                                      |\n| options       | `TelInputOptions`      | check below   | Allow or disallow spaces in the input field                                                                                                                                                                                                                                                                          |\n| id            | `string \\| null`       | uid           | HTMLInputElement's attribute                                                                                                                                                                                                                                                                                         |\n| name          | `string \\| null`       | `null`        | HTMLInputElement's attribute                                                                                                                                                                                                                                                                                         |\n| readonly      | `boolean \\| null`      | `null`        | HTMLInputElement's attribute                                                                                                                                                                                                                                                                                         |\n| size          | `number \\| null`       | `null`        | HTMLInputElement's attribute                                                                                                                                                                                                                                                                                         |\n| autocomplete  | `string \\| null`       | `null`        | HTMLInputElement's attribute                                                                                                                                                                                                                                                                                         |\n|               |\n\nConfig options:\n\n```javascript\n{\n    // Generates country specific placeholder for the selected country.\n    autoPlaceholder: true,\n    // Allow or disallow spaces in the input field\n    spaces: true,\n    // If you have a parsed phone number and you change country manually from outside, then it's set the `valid` prop to false.\n    invalidateOnCountryChange: false,\n    // Formatted output `national` | `international`\n    format: 'national'\n}\n```\n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n\n## Dispatched Events\n\nThe default export of the library is the main TelInput component. It has the following props:\n\n| Event name          | Type                   |\n| ------------------- | ---------------------- |\n| updateValue         | `E164Number \\| null`   |\n| updateDetailedValue | `DetailedValue \\|null` |\n| updateCountry       | `CountryCode \\| null`  |\n| updateValid         | `boolean`              |\n| parseError          | `string`               |\n\n## Use case of the event driven behavior\n\n```typescript\n<script lang=\"ts\">\n\t// Imports, etc....\n\tlet value: E164Number | null = null;\n\tconst yourHandler = (e: CustomEvent<E164Number | null>) => {\n        value = e.detail //\n        // do stuff...\n\t};\n</script>\n\n<TelInput value={cachedValue ?? value} on:updateValue={yourHandler} ... />\n```\n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n\n## Caveats\n\n- In order to reset `value` and/or `country` from outside (you must pass (or set if you binded) `null` for the property) have some side-effects:\n\n  - Reseting the `value` will set (keep the `country` as is):\n    - `detailedValue` to `null`\n    - dispatch `updateDetailedValue` event\n  - Reseting the `country` will set:\n    - `value` to `null`\n    - `detailedValue` to `null`\n    - `valid` to `true` if `invalidateOnCountryChange` config option is false (_@default false_). Otherwise it will be `false`.\n    - and dispatch `updateValid`, `updateValue` `updateDetailedValue` events\n  - Reseting both `value` and `country` will set:\n    - `valid` to `true`\n    - `detailedValue` to `null`;\n\n- Let's assume you pass a `US` `E164` number, which can be a partial `E164`, but long enough to determine the country and you pass `DE` country directly. The country will be updated to `US`, which is determined from the `E164` in this example. If the `E164` is not long enough to determine its country, then the country will stay what you passed to the component (`DE`).\n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n\n## Goals\n\n- Solve the problem that a users can enter the same phone number in different formats.\n- Storing a phone number in a standard format, that can be indexable and searchable in any database.\n- Should be accessible for the the browser. Eg. for a `<a href=\"tel+36201234567 />`.\n- The stored phone number format can be useable for any SMS gateway(e.g for 2FA) and if somebody can call the number from anywhere, it should work.\n\n## Dependencies\n\n[libphonenumber-js](https://gitlab.com/catamphetamine/libphonenumber-js)\n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n\n## Changelog\n\n| Package                                                                                                        | Changelog                                                                                                  |\n| -------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------- |\n| [@gyurielf/svelte-tel-input](https://github.com/gyurielf/svelte-tel-input/tree/main/packages/svelte-tel-input) | [Changelog](https://github.com/gyurielf/svelte-tel-input/blob/main/packages/svelte-tel-input/CHANGELOG.md) |\n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n\n## Roadmap\n\n- [x] Add Changelog\n- [x] Add CI/CD\n- [x] Integrate libphonenumber\n- [x] Implement parser\n- [x] Add basics docs and examples\n- [x] Add advanced examples\n- [x] Generate placeholders autimatically\n- [x] Move to monorepo\n- [ ] Improve A11Y\n\nSee the [open issues](https://github.com/gyurielf/svelte-tel-input/issues) for a list of proposed features (and known issues).\n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n\n## Support\n\n<a href=\"https://www.buymeacoffee.com/gyurielf\" target=\"_blank\"><img src=\"https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png\" alt=\"Buy Me A Coffee\" style=\"height: 60px !important;width: 217px !important;\" ></a>\n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n\n## License\n\nDistributed under the MIT License. See `LICENSE.md` for more information.\n\n<p align=\"right\">(<a href=\"#readme-top\">back to top</a>)</p>\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 2219],
		[3603, 2111],
		[3610, 2032],
		[3617, 1771],
		[3624, 2024],
		[3631, 2613],
		[3638, 2899],
		[3645, 1695],
		[3652, 2205],
		[3659, 2805],
		[3666, 2530],
		[3673, 2838],
		[3680, 2883],
		[3687, 3500],
		[3694, 3259],
		[3701, 2903],
		[3708, 3058],
		[3715, 2996],
		[3722, 2650],
		[3729, 3296],
		[3736, 2461],
		[3743, 2790],
		[3750, 2504],
		[3757, 2925],
		[3764, 2821],
		[3771, 3055],
		[3778, 3041],
		[3785, 3286],
		[3792, 3102],
		[3799, 3094],
		[3806, 3481],
		[3813, 3272],
		[3820, 2978],
		[3827, 3368],
		[3834, 3911],
		[3841, 4534],
		[3848, 4140],
		[3855, 4212],
		[3862, 3372],
		[3869, 3360],
		[3876, 3381],
		[3883, 4112],
		[3890, 4281],
		[3897, 3798],
		[3904, 4468],
		[3911, 4131],
		[3918, 4892],
		[3925, 4403],
		[3932, 4505],
		[3939, 4402],
		[3946, 4651],
		[3953, 4182],
		[3960, 4816],
		[3967, 3979],
		[3974, 4720],
		[3981, 4678],
		[3988, 4704],
		[3995, 5239],
		[4002, 4681],
		[4009, 2662],
		[4016, 2843],
		[4023, 5112],
		[4030, 5375],
		[4037, 4705],
		[4044, 5185],
		[4051, 6083],
		[4058, 6166],
		[4065, 7156],
		[4072, 6740],
		[4079, 6787],
		[4086, 8093],
		[4093, 7851],
		[4100, 7929],
		[4107, 7075],
		[4114, 6905],
		[4121, 5321],
		[4128, 5381],
		[4135, 5196]
	]
}
