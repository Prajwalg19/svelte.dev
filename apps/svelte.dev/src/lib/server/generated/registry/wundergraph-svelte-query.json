{
	"name": "@wundergraph/svelte-query",
	"description": "Integrates WunderGraph with Svelte Query for data fetching.",
	"repo_url": "https://github.com/wundergraph/wundergraph",
	"authors": ["jens-wundergraph", "starptech", "csechristwunder"],
	"homepage": "https://wundergraph.com",
	"downloads": 190,
	"updated": "2024-05-15T10:33:34.396Z",
	"tags": ["server"],
	"github_stars": 2340,
	"typescript": true,
	"version": "0.3.33",
	"svelte_range": ">=3 <5",
	"last_rune_check_version": "0.3.33",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@wundergraph/svelte-query",
				"version": "0.3.33",
				"size": 36743
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# WunderGraph Svelte Query Integration\n\n![wunderctl](https://img.shields.io/npm/v/@wundergraph/svelte-query.svg)\n\nThis package provides a type-safe integration of [@tanstack/svelte-query](https://tanstack.com/query/latest/docs/svelte/overview) with WunderGraph.\nSvelte Query is a data fetching library for Svelte apps. With simple utilities, you can significantly simplify the data fetching logic in your project. And it also covered in all aspects of speed, correctness, and stability to help you build better experiences.\n\n> **Warning**: Only works with WunderGraph.\n\n## Getting Started\n\n```shell\nnpm install @wundergraph/svelte-query @tanstack/svelte-query\n```\n\nBefore you can use the utilities, you need to modify your code generation to include the base typescript client.\n\n```typescript\n// wundergraph.config.ts\nconfigureWunderGraphApplication({\n  // ... omitted for brevity\n  codeGenerators: [\n    {\n      templates: [templates.typescript.client],\n      // the location where you want to generate the client\n      path: '../src/components/generated',\n    },\n  ],\n});\n```\n\nSecond, run `wunderctl generate` to generate the code.\n\nNow you can use the utility functions.\n\n```ts\nimport { createSvelteClient } from '@wundergraph/svelte-query';\nimport { createClient } from '../generated/client';\nimport type { Operations } from '../generated/client';\n\nconst client = createClient(); // Typesafe WunderGraph client\n\n// These utility functions needs to be imported into your app\nexport const { createQuery, createFileUpload, createMutation, createSubscription, getAuth, getUser, queryKey } =\n  createSvelteClient<Operations>(client);\n```\n\nNow, in your svelte layout setup Svelte Query Provider such that it is always wrapping above the rest of the app.\n\n```svelte\n<script>\n\timport Header from './Header.svelte';\n\timport { browser } from '$app/environment'\n\timport './styles.css';\n\timport { QueryClient, QueryClientProvider } from '@tanstack/svelte-query'\n\n\tconst queryClient = new QueryClient({\n\t\tdefaultOptions: {\n\t\t\tqueries: {\n\t\t\t\tenabled: browser,\n\t\t\t},\n\t\t},\n\t})\n</script>\n\n<div class=\"app\">\n  <QueryClientProvider client={queryClient}>\n    <slot />\n  </QueryClientProvider>\n</div>\n```\n\nNow you can use svelte-query to call your wundergraph operations!\n\n```svelte\n<script lang=\"ts\">\n\timport { createQuery } from '../lib/wundergraph';\n\n\tconst query = createQuery({\n\t\toperationName: \"Starwars\",\n\t})\n</script>\n\n<div class=\"counter\">\n\t<h1>Simple Query</h1>\n\t<div>\n\t\t{#if $query.isLoading}\n\t\t\tLoading...\n\t\t{/if}\n\t\t{#if $query.error}\n\t\t\tAn error has occurred:\n\t\t\t{$query.error.message}\n\t\t{/if}\n\t\t{#if $query.isSuccess}\n      <div>\n        <pre>{JSON.stringify($query.data.starwars_allPeople)}</pre>\n      </div>\n    {/if}\n\t</div>\n</div>\n```\n\n### createQuery\n\n```ts\ncreateQuery({\n  operationName: 'Weather',\n  input: { forCity: city },\n});\n```\n\n### createQuery (Live query)\n\n```ts\ncreateQuery({\n  operationName: 'Weather',\n  input: { forCity: city },\n  liveQuery: true,\n});\n```\n\n### createSubscription\n\n```ts\ncreateSubscription({\n  operationName: 'Weather',\n  input: {\n    forCity: 'Berlin',\n  },\n});\n```\n\n### createMutation\n\n```ts\nconst mutation = createMutation({\n  operationName: 'SetName',\n});\n\n$mutation.mutate({ name: 'WunderGraph' });\n\nawait $mutation.mutateAsync({ name: 'WunderGraph' });\n```\n\n### createFileUpload\n\n```ts\nconst fileUploader = createFileUpload();\n\n$fileUploader.upload({\n  provider: 'minio',\n  files: new FileList(),\n});\n\nawait $fileUploader.upload({\n  provider: 'minio',\n  files: new FileList(),\n});\n\n$fileUploader.fileKeys; // files that have been uploaded\n```\n\n### getAuth\n\n```ts\nconst auth = getAuth();\n\n$auth.login('github');\n\n$auth.logout({ logoutOpenidConnectProvider: true });\n```\n\n### getUser\n\n```ts\nconst userQuery = getUser();\n```\n\n### queryKey\n\nYou can use the `queryKey` helper function to create a unique key for the query in a typesafe way. This is useful if you want to invalidate the query after mutating.\n\n```ts\nconst queryClient = useQueryClient();\n\nconst mutation = createMutation({\n  operationName: 'SetName',\n  onSuccess() {\n    queryClient.invalidateQueries(queryKey({ operationName: 'Profile' }));\n  },\n});\n\n$mutation.mutate({ name: 'WunderGraph' });\n```\n\n## SSR\n\nIf you are working with SvelteKit, this package provides `prefetchQuery` utility to help with SSR\n\n```ts\nexport const load: PageLoad = async ({ parent }) => {\n  const { queryClient } = await parent();\n\n  await prefetchQuery(\n    {\n      operationName: 'Dragons',\n    },\n    queryClient\n  );\n};\n```\n\nThis implementation is based on TanStack Svelte Query's [prefetchQuery](https://tanstack.com/query/v4/docs/svelte/ssr#using-prefetchquery) approach\n\n## Options\n\nYou can use all available options from [Svelte Query](https://tanstack.com/query/latest/docs/svelte/overview) with the generated functions.\nDue to the fact that we use the operationName + variables as **key**, you can't use the `key` option as usual.\nIn order to use conditional-fetching you can use the `enabled` option.\n\n## Global Configuration\n\nYou can configure the utilities globally by using the Svelte Query's [QueryClient](https://tanstack.com/query/v4/docs/react/reference/QueryClient) config.\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 301],
		[3603, 118],
		[3610, 239],
		[3617, 205],
		[3624, 252],
		[3631, 135],
		[3638, 62],
		[3645, 61],
		[3652, 60],
		[3659, 254],
		[3666, 125],
		[3673, 34],
		[3680, 14],
		[3687, 95],
		[3694, 18],
		[3701, 8],
		[3708, 66],
		[3715, 87],
		[3722, 23],
		[3729, 6],
		[3736, 98],
		[3743, 14],
		[3750, 9],
		[3757, 154],
		[3764, 23],
		[3771, 39],
		[3778, 61],
		[3785, 214],
		[3792, 81],
		[3799, 41],
		[3806, 23],
		[3813, 25],
		[3820, 17],
		[3827, 36],
		[3834, 72],
		[3841, 401],
		[3848, 31],
		[3855, 8],
		[3862, 251],
		[3869, 94],
		[3876, 94],
		[3883, 15],
		[3890, 49],
		[3897, 88],
		[3904, 42],
		[3911, 20],
		[3918, 99],
		[3925, 31],
		[3932, 68],
		[3939, 46],
		[3946, 28],
		[3953, 18],
		[3960, 21],
		[3967, 22],
		[3974, 91],
		[3981, 26],
		[3988, 5],
		[3995, 124],
		[4002, 7],
		[4009, 26],
		[4016, 100],
		[4023, 28],
		[4030, 13],
		[4037, 33],
		[4044, 63],
		[4051, 36],
		[4058, 82],
		[4065, 97],
		[4072, 87],
		[4079, 129],
		[4086, 73],
		[4093, 247],
		[4100, 337],
		[4107, 72],
		[4114, 190],
		[4121, 120],
		[4128, 71],
		[4135, 50]
	],
	"esm": false,
	"cjs": true
}
