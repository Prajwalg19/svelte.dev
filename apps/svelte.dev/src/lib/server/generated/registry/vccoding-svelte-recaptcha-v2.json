{
	"name": "@vccoding/svelte-recaptcha-v2",
	"description": "Integrate Google reCAPTCHA v2 in Svelte and SvelteKit apps.",
	"repo_url": "https://github.com/vccoding/svelte-recaptcha-v2",
	"authors": ["vccoding"],
	"homepage": "https://github.com/vccoding/svelte-recaptcha-v2#readme",
	"downloads": 3,
	"updated": "2024-04-04T23:00:22.813Z",
	"tags": ["integration"],
	"github_stars": 0,
	"typescript": false,
	"version": "0.0.7",
	"svelte_range": "^3.44.0",
	"last_rune_check_version": "0.0.7",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@vccoding/svelte-recaptcha-v2",
				"version": "0.0.7",
				"size": 32199
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "![svelte-recaptcha-v2](https://user-images.githubusercontent.com/30809170/138197082-b92887d5-a875-41ee-9939-cbb8aba9ab6b.png)\r\n\r\n# svelte-recaptcha-v2\r\n\r\n[Google reCAPTCHA v2](https://developers.google.com/recaptcha/docs/display)  implementation for Svelte SPA, SSR and  sveltekit static sites.\r\n\r\n## Features\r\n\r\n - [x] svelte server side rendering (SSR) friendly.\r\n - [x] works with sveltekit SPA, SSR and static site adapters.\r\n - [x] easy integration with third party form validation libraries.\r\n - [x] fail-safe loader to inject recaptcha.\r\n - [x] invisible recaptcha or checkbox recaptcha support.\r\n - [x] event model for intercepting various recaptcha states.\r\n - [x] handle all your form logic in a single submit handler.\r\n - [x] proper DOM cleanup (deletes recaptcha completely)\r\n - [x] documented, debug.js friendly source code.\r\n - [x] typescript definitions are included for LSP.\r\n\r\n## Demonstration\r\n[svelte-recaptcha-v2 demo](https://basaran.github.io/svelte-recaptcha-v2/)\r\n\r\n## Getting Started\r\n```bash\r\n# install as a development dependency\r\npnpm install -D svelte-recaptcha-v2\r\n```\r\n\r\n## Basic Usage\r\n\r\nImport the library onto your template and update your google key:\r\n\r\n```js\r\nimport { Recaptcha, recaptcha, observer } from \"svelte-recaptcha-v2\";\r\n/*\r\n │Recaptcha: svelte <Recaptcha> component.\r\n │recaptcha: google method, gives you recaptcha.execute().\r\n │observer: allows you to track captcha state across components.\r\n */\r\n\r\nconst googleRecaptchaSiteKey=\"replace_with_yours\";\r\n```\r\n\r\nIn your form, add the component:\r\n\r\n```svelte\r\n<Recaptcha\r\n    sitekey={googleRecaptchaSiteKey}\r\n    badge={\"top\"}\r\n    size={\"invisible\"}\r\n    theme={\"light\"}\r\n    on:success={onCaptchaSuccess}\r\n    on:error={onCaptchaError}\r\n    on:expired={onCaptchaExpire}\r\n    on:close={onCaptchaClose}\r\n    on:ready={onCaptchaReady} />\r\n```\r\n\r\nSetup your event handlers:\r\n\r\n```js\r\nconst onCaptchaReady = (event) => {\r\n    console.log(\"recaptcha init has completed.\")\r\n    /*\r\n     │You can enable your form button here.\r\n     */\r\n};\r\n\r\nconst onCaptchaSuccess = (event) => {\r\n    console.log(\"token received: \" + event.detail.token);\r\n    /*\r\n     │If using checkbox method, you can attach your\r\n     │form logic here, or dispatch your custom event.\r\n     */\r\n};\r\n\r\nconst onCaptchaError = (event) => {\r\n    console.log(\"recaptcha init has failed.\");\r\n    /*\r\n     │Usually due to incorrect siteKey.\r\n     |Make sure you have the correct siteKey..\r\n     */\r\n};\r\n\r\nconst onCaptchaExpire = (event) => {\r\n    console.log(\"recaptcha api has expired\");\r\n    /*\r\n     │Normally, you wouldn't need to do anything.\r\n     │Recaptcha should reinit itself automatically.\r\n     */\r\n};\r\n\r\nconst onCaptchaOpen = (event) => {\r\n    console.log(\"google decided to challange the user\");\r\n    /*\r\n     │This fires when the puzzle frame pops.\r\n     */\r\n};\r\n\r\nconst onCaptchaClose = (event) => {\r\n    console.log(\"google decided to challange the user\");\r\n    /*\r\n     │This fires when the puzzle frame closes.\r\n     │Usually happens when the user clicks outside\r\n     |the modal frame.\r\n     */\r\n};\r\n```\r\n\r\nUpdate your form handler:\r\n\r\n```js\r\nconst submitHandler = async () => {\r\n    console.log(\"launching recaptcha\");\r\n    recaptcha.execute();\r\n\r\n    console.log(\"pending for google response\");\r\n    const event = await Promise.resolve(observer);\r\n\r\n    const recaptchaToken = event.detail?.token ? event.detail.token : false;\r\n\r\n    if (!recaptchaToken) {\r\n        console.log(\"recaptcha is NOT OK\");\r\n        return false;\r\n    }\r\n\r\n    console.log(\"token retrieved\", recaptchaToken);\r\n};\r\n```\r\n\r\n## Debugging\r\n\r\nIf you would like to enable client side debugging, add `{Recaptcha}` value to your localStorage `DEBUG` key.\r\n\r\n## Issues\r\n\r\nIf any trouble, please create an issue. PRs are most welcome.\r\n\r\n## Todo\r\n\r\n- [] add recipes for validation libraries (felte, stock etc)\r\n- [] look into mutation observers\r\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3743, 100],
		[3750, 25],
		[3757, 14],
		[3771, 4],
		[3778, 1],
		[3785, 2],
		[3792, 4],
		[3806, 3],
		[3820, 1],
		[3834, 13],
		[3841, 1],
		[3848, 3],
		[3862, 4],
		[3869, 4],
		[3883, 1],
		[3890, 4],
		[3918, 4],
		[3939, 1],
		[3946, 2],
		[3960, 5],
		[3967, 1],
		[3995, 1],
		[4016, 6],
		[4023, 1],
		[4030, 2],
		[4037, 5],
		[4044, 8],
		[4051, 2],
		[4058, 4],
		[4072, 1],
		[4093, 2],
		[4100, 11],
		[4114, 3],
		[4121, 22],
		[4128, 5],
		[4135, 5]
	]
}
