{
	"name": "@felte/validator-zod",
	"description": "Integrates Zod validation with Felte forms.",
	"repo_url": "https://github.com/pablo-abc/felte",
	"authors": ["pberganza"],
	"homepage": "https://github.com/pablo-abc/felte/tree/main/packages/validator-zod",
	"downloads": 6228,
	"updated": "2024-10-29T22:05:33.472Z",
	"tags": ["miscellaneous"],
	"github_stars": 1050,
	"typescript": true,
	"version": "1.0.18",
	"svelte_range": "^3.46.4",
	"last_rune_check_version": "1.0.18",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@felte/validator-zod",
				"version": "1.0.18",
				"size": 14230
			},
			{
				"name": "@felte/common",
				"version": "1.1.9",
				"size": 285201
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# @felte/validator-zod\n\n[![Tests](https://github.com/pablo-abc/felte/workflows/Tests/badge.svg)](https://github.com/pablo-abc/felte/actions/workflows/test.yml)\n[![Bundle size](https://img.shields.io/bundlephobia/min/@felte/validator-zod)](https://bundlephobia.com/result?p=@felte/validator-zod)\n[![NPM Version](https://img.shields.io/npm/v/@felte/validator-zod)](https://www.npmjs.com/package/@felte/validator-zod)\n[![codecov](https://codecov.io/gh/pablo-abc/felte/branch/main/graph/badge.svg?token=T73OJZ50LC)](https://codecov.io/gh/pablo-abc/felte)\n\nA package to help you handle validation with Zod in Felte.\n\n## Installation\n\n```sh\nnpm install --save @felte/validator-zod zod\n\n# Or, if you use yarn\n\nyarn add @felte/validator-zod zod\n```\n\n## Usage\n\nCall `validator` with an object containing your Zod schema in the `schema` property. The result of the call can be passed as an extender to Felte:\n\n```javascript\nimport { validator } from '@felte/validator-zod';\nimport { z } from 'zod';\n\nconst schema = z.object({\n  email: z.string().email().nonempty(),\n  password: z.string().nonempty(),\n});\n\nconst { form } = createForm({\n  // ...\n  extend: validator({ schema }), // or `extend: [validator({ schema })],`\n  // ...\n});\n```\n\nOR use the `validateSchema` function directly in the `validate` option of `createForm`. (No need to extend Felte).\n\n```javascript\nimport { validateSchema } from '@felte/validator-zod';\nimport { z } from 'zod';\n\nconst schema = z.object({\n  email: z.string().email().nonempty(),\n  password: z.string().nonempty(),\n});\n\nconst { form } = createForm({\n  // ...\n  validate: validateSchema(schema),\n  // ...\n});\n```\n\n## Warnings\n\nOptionally, you can tell this package to assign the results of your validations to your `warnings` store by setting the `level` property of the validator function to `warning`. It's `error` by default:\n\n```javascript\nimport { validator } from '@felte/validator-zod';\nimport { z } from 'zod';\n\nconst schema = z.object({\n  email: z.string().email().nonempty(),\n  password: z.string().nonempty(),\n});\n\n// We only warn if the user has started typing a value\nconst warnSchema = zod.object({\n  password: zod\n    .string()\n    .refine((value) => (value ? value.length > 8 : true), {\n      message: 'Password is not secure',\n    }),\n});\n\nconst { form } = createForm({\n  // ...\n  extend: [\n    validator({ schema }),\n    validator({ schema: warnSchema, level: 'warning' }),\n  ],\n  // ...\n});\n```\n\n## Typescript\n\nZod allows you to infer the type of your schema using `z.infer`. This can be used so you don't need to create a type for your form's data:\n\n```typescript\nimport { z } from 'zod';\n\nconst schema = z.object({\n  email: z.string().email().nonempty(),\n  password: z.string().nonempty(),\n});\n\nconst { form } = createForm<z.infer<typeof schema>>(/* ... */);\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 8123],
		[3596, 11558],
		[3603, 11527],
		[3610, 11248],
		[3617, 11628],
		[3624, 12135],
		[3631, 12272],
		[3638, 11250],
		[3645, 10162],
		[3652, 11336],
		[3659, 15579],
		[3666, 16608],
		[3673, 17223],
		[3680, 17297],
		[3687, 16505],
		[3694, 16504],
		[3701, 16182],
		[3708, 16843],
		[3715, 15898],
		[3722, 7008],
		[3729, 17715],
		[3736, 15510],
		[3743, 16090],
		[3750, 11094],
		[3757, 16561],
		[3764, 15764],
		[3771, 13143],
		[3778, 15897],
		[3785, 15915],
		[3792, 3447],
		[3799, 8188],
		[3806, 16047],
		[3813, 16246],
		[3820, 15622],
		[3827, 15052],
		[3834, 9880],
		[3841, 9930],
		[3848, 7598],
		[3855, 8192],
		[3862, 7409],
		[3869, 7041],
		[3876, 9309],
		[3883, 8102],
		[3890, 8996],
		[3897, 9598],
		[3904, 9949],
		[3911, 7932],
		[3918, 8954],
		[3925, 6988],
		[3932, 7892],
		[3939, 5964],
		[3946, 6637],
		[3953, 4723],
		[3960, 6270],
		[3967, 7875],
		[3974, 11171],
		[3981, 6956],
		[3988, 7423],
		[3995, 7840],
		[4002, 9090],
		[4009, 7275],
		[4016, 8394],
		[4023, 7618],
		[4030, 7769],
		[4037, 6798],
		[4044, 6392],
		[4051, 5377],
		[4058, 5878],
		[4065, 6014],
		[4072, 6308],
		[4079, 7467],
		[4086, 6477],
		[4093, 6082],
		[4100, 7262],
		[4107, 8013],
		[4114, 6228],
		[4121, 6180],
		[4128, 6056]
	]
}
