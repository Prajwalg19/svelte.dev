{
	"name": "svelte-form-validation",
	"description": "Validate Svelte forms using Yup schema validation.",
	"repo_url": "https://github.com/DhyeyMoliya/svelte-form-validation",
	"authors": ["dhyeymoliya"],
	"homepage": "https://github.com/DhyeyMoliya/svelte-form-validation#readme",
	"downloads": 16,
	"updated": "2021-11-06T18:03:27.150Z",
	"tags": ["miscellaneous"],
	"github_stars": 2,
	"typescript": true,
	"version": "1.0.5",
	"svelte_range": "^3.44.1",
	"kit_range": "next",
	"last_rune_check_version": "1.0.5",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-form-validation",
				"version": "1.0.5",
				"size": 24365
			},
			{
				"name": "yup",
				"version": "0.32.11",
				"size": 319578
			},
			{
				"name": "lodash",
				"version": "4.17.21",
				"size": 1412415
			},
			{
				"name": "toposort",
				"version": "2.0.2",
				"size": 16683
			},
			{
				"name": "lodash-es",
				"version": "4.17.21",
				"size": 636080
			},
			{
				"name": "nanoclone",
				"version": "0.2.1",
				"size": 6122
			},
			{
				"name": "@types/lodash",
				"version": "4.17.16",
				"size": 867997
			},
			{
				"name": "property-expr",
				"version": "2.0.6",
				"size": 10306
			},
			{
				"name": "@babel/runtime",
				"version": "7.27.1",
				"size": 246647
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[1, 3],
			[1, 4],
			[1, 5],
			[1, 6],
			[1, 7],
			[1, 8]
		],
		"circular": []
	},
	"readme": "# Welcome to svelte-form-validation 👋\n\n[![NPM Version](https://img.shields.io/npm/v/svelte-form-validation.svg?orange=blue)](https://npmjs.org/package/svelte-form-validation)\n\n> Svelte Form Validation Library\n\n### 🏠 [Homepage](https://github.com/DhyeyMoliya/svelte-form-validation#readme)\n\n## Install\n\n```sh\nnpm install svelte-form-validation\n```\n\n> This package uses a popular Schema Validation library **[Yup](https://github.com/jquense/yup)**. For documentation on how to create Validation Schema, checkout Yup's official Github Repo https://github.com/jquense/yup.\n\n## Basic Usage Example\n\n_[src/routes/basic.svelte](https://github.com/DhyeyMoliya/svelte-form-validation/blob/master/src/routes/basic.svelte)_ :\n\n```html\n<script>\n\timport { createForm } from 'svelte-form-validation';\n\timport * as yup from 'yup';\n\n\t// Create Form Instance\n\tconst { values, highlight, isValid } = createForm({\n\t\t// Initial Form Data\n\t\tvalues: {\n\t\t\temail: '',\n\t\t\tpassword: ''\n\t\t},\n\t\t// Form Validation using Yup\n\t\tvalidationSchema: yup.object().shape({\n\t\t\temail: yup.string().email().required(),\n\t\t\tpassword: yup.string().min(6).required()\n\t\t})\n\t});\n\n\tconst onSubmit = () => {\n\t\t// \"$values\" contains current Form Data\n\t\tconsole.log($values);\n\t};\n</script>\n\n<form on:submit|preventDefault=\"{onSubmit}\">\n\t<input type=\"text\" name=\"email\" bind:value=\"{$values.email}\" use:highlight />\n\t<input type=\"password\" name=\"password\" bind:value=\"{$values.password}\" use:highlight />\n\n\t<button type=\"submit\" disabled=\"{!$isValid}\">Submit</button>\n</form>\n```\n\n## Full Usage Example\n\n_[demo/Full.svelte](https://github.com/DhyeyMoliya/svelte-form-validation/blob/master/demo/Full.svelte)_ :\n\n```html\n<script lang=\"ts\">\n  import { createForm } from \"svelte-form-validation\";\n  import * as yup from 'yup';\n  import UserAddressForm from \"./UserAddressForm.svelte\"; // Components\n\n  // (Optional) Form's Data type will be automatically inferred from \"values\" in \"createForm\" if type of Data is not specified\n  type FormData = {\n    title: string,\n    description: string,\n    coverImage: FileList,\n    users: {\n      name: string,\n      email: string,\n      address: {\n        state: string,\n        city: string,\n      },\n    }[],\n  };\n\n  // Create Form Instance\n  const {\n    values, // Svelte Store<FormData> containing Form Data\n    state, // Svelte Store<FormState> containing Form State - { [every_property]: { _touched: boolean, _errors: string[] }}\n    isValid, // Svelte Store<boolean> containing entire Form's validation status\n    isTouched, // Svelte Store<boolean> containing entire Form's touched status\n    validateForm, // Function(highlight: 'none' | 'errors' | 'all' = 'none') for manually validting entire form\n    handleChange, // Function(event: Event) to manually updating individual form control's state - can be used in place of \"highlight\" Action\n    setTouched, // Function() for manually setting Form state as \"touched\"\n    updateForm, // Function() for updating Form's Structure after Form Controls are Added or Removed in cases like Form Arrays\n    highlight, // Svelte Action to be used with <input>, <select>, <textarea> or similar HTML input elements\n    resetForm, // Reset the Form with optional new value and clear validation\n  } = createForm<FormData>({\n    // Initial Values of Form\n    values: {\n      title: \"\", // Simple String\n      description: \"\", // Simple String\n      coverImage: \"\", // File Input\n      users: [], // Complex Form Array\n    },\n    // Validation Schema (Yup - https://github.com/jquense/yup)\n    validationSchema: yup.object().shape({\n      title: yup.string().min(8).required(),\n      description: yup.string(),\n      coverImage: yup.mixed().test(value => value?.length > 0), // Custom validation because yup does not suport file objects\n      users: yup.array().of(\n        yup.object().shape({\n          name: yup.string().required(),\n          email: yup.string().email().required(),\n          address: yup.object().shape({\n            state: yup.string().required(),\n            city: yup.string(),\n          }),\n        }),\n      )\n    }),\n    // CSS class validations, these options are also available in \"highlight\" action\n    css: {\n      enabled: true, // use CSS classes or not\n      validClass: \"is-valid\", // CSS class added to valid form controls\n      invalidClass: \"is-invalid\", // CSS class added to invalid form controls\n      useValid: true, // Add CSS classes to valid form controls\n      useInvalid: true, // Add CSS classes to invalid form controls\n    },\n    validateOnChange: true, // Whether to validate on \"change\" event of element and form value change\n    validateOnBlur: true, // Whether to validate on \"blur\" event of element\n  });\n\n  // Add new user to Users Form Array\n  const addUser = () => {\n    // Update Form Data\n    $values.users = [\n      ...$values.users,\n      {\n        name: \"\",\n        email: \"\",\n        address: {\n          state: \"\",\n          city: \"\",\n        },\n      },\n    ];\n    updateForm(); // Manually trigger Form Update - Required\n  };\n\n  // Remove user from Users Form Array\n  const removeUser = (index) => () => {\n    $values.users = $values.users.filter((_, i) => i !== index); // Update Form Data\n    $state.users = $state.users.filter((_, i) => i !== index); // Updating State is required after removing Form Controls\n    updateForm(); // Manually trigger Form Update - Required\n  };\n\n  // Submit Form\n  const onSubmit = () => {\n    console.log($values); // Get Form Data\n    // Reset form after submit\n    resetForm({\n      title: \"\",\n      description: \"\",\n      coverImage: \"\",\n      users: [],\n    });\n  };\n\n  $: console.log($values, $state); // Log Form Data and Form State on every Change\n</script>\n\n<form on:submit|preventDefault={onSubmit}>\n\n    <input\n        placeholder=\"Title\"\n        name=\"title\"\n        bind:value={$values.title}\n        use:highlight={{ useValid: false }}\n    />\n    {#if $state.title._errors?.length}\n        {#each $state.title._errors as error}\n            <span class=\"error\">{error}</span>\n        {/each}\n    {/if}\n\n    <input\n        placeholder=\"Description\"\n        name=\"description\"\n        bind:value={$values.description}\n    />\n    {#if $state.description._errors?.length}\n        {#each $state.description._errors as error}\n            <span class=\"error\">{error}</span>\n        {/each}\n    {/if}\n\n    <input\n        name=\"coverImage\"\n        accept=\"image/*\"\n        bind:files={$values.coverImage}\n        use:highlight\n        type=\"file\"\n    />\n    {#if $state.coverImage._errors?.length}\n        {#each $state.coverImage._errors as error}\n        <span class=\"error\">{error}</span>\n        {/each}\n    {/if}\n\n    {#if $values.coverImage?.length}\n        <div class=\"image-preview\">\n            <img\n            src={URL.createObjectURL($values.coverImage[0])}\n            alt=\"Cover\"\n            height=\"150\" />\n        </div>\n    {/if}\n\n    {#each $values.users as user, index}\n        <h2>\n            User {user.name}\n            <button type=\"button\" on:click={removeUser(index)}>\n                Remove User\n            </button>\n        </h2>\n\n        <input\n            placeholder=\"name\"\n            name=\"users[{index}].name\"\n            bind:value={user.name}\n            use:highlight\n        />\n        {#if $state.users[index].name._errors?.length}\n            {#each $state.users[index].name._errors as error}\n                <span class=\"error\">{error}</span>\n            {/each}\n        {/if}\n\n        <input\n            placeholder=\"email\"\n            name=\"users[{index}].email\"\n            bind:value={user.email}\n            use:highlight\n        />\n        {#if $state.users[index].email._errors?.length}\n            {#each $state.users[index].email._errors as error}\n                <span class=\"error\">{error}</span>\n            {/each}\n        {/if}\n\n        <!-- Using with Components -->\n        <UserAddressForm {values} {state} {highlight} {index} />\n\n    {/each}\n\n    <button type=\"button\" on:click={addUser}>\n        Add User\n    </button>\n\n    <button type=\"button\" on:click={() => validateForm('errors')}>\n        Validate Form\n    </button>\n\n    <button type=\"submit\" disabled={!$isValid}>\n        Submit\n    </button>\n\n</form>\n\n<style>\n    .valid {\n        border: 1px solid green;\n    }\n\n    .invalid {\n        border: 1px solid red;\n    }\n\n    .error {\n        color: red;\n    }\n</style>\n```\n\n_[demo/UserAddressForm.svelte](https://github.com/DhyeyMoliya/svelte-form-validation/blob/master/demo/UserAddressForm.svelte)_ :\n\n```html\n<script lang=\"ts\">\n\texport let values: any;\n\texport let state: any;\n\texport let highlight;\n\texport let index: number;\n</script>\n\n<div>\n\t<input\n\t\ttype=\"text\"\n\t\tplaceholder=\"State\"\n\t\tbind:value=\"{$values.users[index].address.state}\"\n\t\tname=\"users[{index}].address.state\"\n\t\tuse:highlight\n\t/>\n\t{#if $state.users[index].address.state._errors?.length}\n\t<div>\n\t\t{#each $state.users[index].address.state._errors as error}\n\t\t<span class=\"error\">{error}</span>\n\t\t{/each}\n\t</div>\n\t{/if}\n\n\t<input\n\t\ttype=\"text\"\n\t\tplaceholder=\"City\"\n\t\tbind:value=\"{$values.users[index].address.city}\"\n\t\tname=\"users[{index}].address.city\"\n\t\tuse:highlight\n\t/>\n\t{#if $state.users[index].address.city._errors?.length}\n\t<div>\n\t\t{#each $state.users[index].address.city._errors as error}\n\t\t<span class=\"error\">{error}</span>\n\t\t{/each}\n\t</div>\n\t{/if}\n</div>\n```\n\n## 🤝 Contributing\n\nContributions, issues and feature requests are welcome!\n\nFeel free to check [issues page](https://github.com/DhyeyMoliya/svelte-form-validation/issues).\n\n## Show your support\n\nGive a ⭐️ if this project helped you!\n\n## 📝 License\n\nThis project is [MIT](https://github.com/DhyeyMoliya/svelte-form-validation/blob/master/LICENSE.md) licensed.\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 2],
		[3596, 37],
		[3603, 9],
		[3610, 8],
		[3617, 3],
		[3631, 3],
		[3638, 21],
		[3645, 12],
		[3652, 6],
		[3659, 5],
		[3666, 11],
		[3673, 4],
		[3680, 5],
		[3687, 3],
		[3694, 2],
		[3701, 6],
		[3708, 2],
		[3715, 4],
		[3722, 4],
		[3729, 13],
		[3736, 1],
		[3743, 1],
		[3750, 2],
		[3757, 5],
		[3764, 3],
		[3771, 10],
		[3778, 2],
		[3785, 5],
		[3792, 8],
		[3799, 3],
		[3806, 8],
		[3813, 1],
		[3820, 4],
		[3827, 1],
		[3834, 6],
		[3841, 1],
		[3848, 2],
		[3855, 32],
		[3862, 3],
		[3869, 9],
		[3876, 1],
		[3883, 3],
		[3890, 15],
		[3897, 2],
		[3904, 7],
		[3911, 2],
		[3918, 2],
		[3925, 1],
		[3932, 2],
		[3939, 2],
		[3946, 2],
		[3953, 2],
		[3960, 4],
		[3967, 2],
		[3974, 1],
		[3981, 4],
		[3988, 38],
		[3995, 3],
		[4002, 3],
		[4009, 4],
		[4016, 10],
		[4023, 3],
		[4030, 11],
		[4037, 13],
		[4044, 6],
		[4051, 3],
		[4058, 4],
		[4065, 4],
		[4072, 2],
		[4079, 1],
		[4086, 1],
		[4093, 12],
		[4100, 10],
		[4107, 6],
		[4114, 16],
		[4121, 6],
		[4128, 6]
	]
}
