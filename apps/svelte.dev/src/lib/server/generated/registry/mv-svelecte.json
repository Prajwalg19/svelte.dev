{
	"name": "mv-svelecte",
	"description": "Create flexible autocomplete/select component for Svelte.",
	"repo_url": "https://github.com/mverzilli/svelecte",
	"authors": ["martinverzilli"],
	"homepage": "https://github.com/mverzilli/svelecte#readme",
	"downloads": 12,
	"updated": "2023-03-31T10:44:51.585Z",
	"tags": ["ui"],
	"github_stars": 0,
	"typescript": false,
	"version": "3.16.1",
	"svelte_range": "^3.50.1",
	"last_rune_check_version": "3.16.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "mv-svelecte",
				"version": "3.16.1",
				"size": 367343
			},
			{
				"name": "svelte-tiny-virtual-list",
				"version": "2.1.2",
				"size": 139716
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# Svelecte [![NPM version](http://img.shields.io/npm/v/svelecte.svg?style=flat)](https://www.npmjs.org/package/svelecte)\n\n![svelecte](https://mskocik.github.io/svelecte/static/svelecte.png)\n\nFlexible autocomplete/select component written in Svelte. Massively inspired by Selectize.js. Also usable as [custom element](https://github.com/mskocik/svelecte-element) (CE). Usable in forms, behaves very similar to standard `<select>` element.\n\nSee the latest changes on the [Releases](https://github.com/mskocik/svelecte/releases) page.\n\n## 📃 Features \n\n- searchable\n- multiselect with limit of max selected items\n- allow simple array or complex objects as items\n- custom item renderer (formatter)\n- allow creating new items (and possibly edit them)\n- remote data fetch\n- virtual list support\n- i18n support\n- SSR support\n- lazy dropdown rendering\n- usable as custom element\n- stylable\n- reordable multi selection  with addition of `svelte-dnd-action` ([example](https://svelte.dev/repl/da2de4b9ed13465d892b678eba07ed99?version=3.44.0)) \n- usable with `svelte-use-form`  ([example](https://svelte.dev/repl/de3cd8e47feb4d078b6bace8d4cf7b90?version=3.44.1))\n\n\n## 🔧 Installation\n\n```\nnpm install svelecte --save\n```\n\n## Minimalistic example\n\n```html\n<script>\nimport Svelecte from 'svelecte';\n\nconst list = [{ id: 1, name: 'Item 1' }, { id: 2, name: 'Item 2'}, ...];\nlet myValue = null;\n</script>\n\n<Svelecte options={list} bind:value={myValue}></Svelecte>\n```\n\n<details>\n<summary><strong>💭 Note about <code>value</code> and <code>readSelection</strong></code> property</summary>\n<div>\nSince v3.0 inner logic behind these properties has changed. Now `value` property reflects inner selection. By default it\nreturns `valueField` property (if not defined, Svelecte tries to guess which property is representing value). This also means\nthat if you want to set new value, you need to assign to it correct value. Let's take the example above:\n\n```\nmyValue = 2;\n```\nThis would select item with `id` property `2`.\n\nSometimes you want to work strictly with objects, like `myValue = {id: 2, name: 'Item 2'}`. You can set property `valueAsObject` which tells Svelecte to handle `value` property as object or array of object (if `multiple` is also set).\n\nProperty `readSelection` _always_ returns selected object or object array no matter if `valueAsObject` is set or not.\n</div>\n</details>\n\n---\n\n## 👀 Examples\n\n👉 Examples with more detailed documentation can be found at [https://mskocik.github.io/svelecte/](https://mskocik.github.io/svelecte/).\n\n## 🛠 Configuration & API\n\n### Exposed properties:\n\n\nProperty          | Type             | Default    | Description\n------------------|------------------|------------|------------\nname              | string           | `null`     | create internal `<select>` element which you can use `validatorAction` on. Without `name` defined, no `<select>` is created\noptions           | array            | `[]`       | Data array\nvalueAsObject     | bool             | `false`    | Switch whether Svelecte should expects from and return to `bind:value` objects or primitive value (usually string, number)\nvalueField        | string           | `null`     | Property to be used as value (if not specified, will be selected automatically)\nlabelField        | string           | `null`     | Property shown in dropdown (if not specified, will be selected automatically)\ngroupLabelField   | string           | `label`    | Property to be used as optgroup label\ngroupItemsField   | string           | `options`  | Property holding optgroup option list\ndisabledField     | string           | `$disabled`| Property to check, whether given options should be disabled and unselectable\nrequired          | bool             | `false`    | make sense only when `name` is defined\nplaceholder       | string           | `Select`   | Input placeholder\nsearchable        | bool             | `true`     | Allow search among items by typing\ndisabled          | bool             | `false`    | Disable component\nrenderer          | string\\|function | `null`     | dropdown and selection renderer function. More info in item rendering section\ncontrolItem       | Component        | `Item`     | Item component when item is selected. See [Custom Items](#custom-items) section for more details.\ndropdownItem      | Component        | `Item`     | Item component in dropdown. See [Custom Items](#custom-items) section for more details.\nselectOnTab       | bool|string|null | `null`     | Based on value provided, it allows selecting currently active item by <kbd>Tab</kbd> AND (if value is `'select-navigate'`) also focus next input. The constant `TAB_SELECT_NAVIGATE` is exported from svelecte\nresetOnBlur       | bool             | `true`     | Control if input value should be cleared on blur\nresetOnSelect     | bool             | `true`     | Control if input value should be cleared on item selection. **Note:** applicable only with `multiple` \nclearable         | bool             | `false`    | Display ✖ icon to clear whole selection\nmultiple          | bool             | `false`    | allow multiselection. Will be set automatically to `true`, if `name` property ends with `[]`, like `tags[]`\ncloseAfterSelect  | bool             | `false`    | closes dropdown after selection. Setting this to `true` is useful for **multiple** select only. For single select dropdown is always closed no matter the value this property has\nmax               | number           | `0`        | Maximum allowed items selected, applicable only for multiselect\ncollapseSelection | bool             | `false`    | collapse selection when `multiple` and not focused\nalwaysCollapsed   | bool             | `false`    | keep collapsed selection _even_ when focused. Selected options are shown in dropdown on the top\ninputId           | string           | `null`     | allow targeting input using a html label.\ncreatable         | bool             | `false`    | Allow creating new item(s)\ncreatablePrefix   | string           | `*`        | Prefix marking new item\nallowEditing      | bool             | `false`    | When pressing `Backspace` switch to edit mode instead of removing newly created item. **NOTE** intended to be used with `creatable` property\nkeepCreated       | bool             | `true`     | Switch whether to add newly created option to option list or not\ndelimiter         | string           | `,`        | split inserted text when pasting to create multiple items\ncreateFilter      | function         | `null`     | Function, that transform input string to custom value. It can serve as a filter, if value is valid or not. If you want to dismiss entered value, function should return `''` (empty string). By default all input string is trimmed and all multiple spaces are removed. Function notation:<br>`createFilter(inputValue: string, dropdownOptions: array): string`\ncreateTransform   | function         | `null`     | Custom function transforming input string to option object. Default returns object with `valueField` and `labelField` properties, where `labelField`'s value is input string prefixed with `creatablePrefix` property. Function notation:<br>`createTransform(inputValue: string, creatablePrefix: string, valueField: string, labelField: string): object`\nfetch             | string\\|function | `null`     | Check \"remote datasource\" section for more details\nfetchMode         | string           | `auto`     | When set to `init` options are fetched only when mounted, when searching it search in downloaded dataset\nfetchCallback     | function         | `null`     | optional fetch callback\nfetchResetOnBlur  | bool             | `true`     | reset previous search results on empty input, related to `resetOnBlur`\nminQuery          | number           | `1`        | Minimal amount of characters required to perform remote request. Usable with `fetch` property\nlazyDropdown      | bool             | `true`     | render dropdown after first focus, not by default\nvirtualList       | bool             | `false`    | Whether use virtual list for dropdown items (useful for large datasets)\nvlHeight          | number           | `null`     | Height of virtual list dropdown (if not specified, computed automatically)\nvlItemSize        | number           | `null`     | Height of one row (if not specified, computed automatically)\nsearchField       | string\\|array    | `null`     | Specify item property that will be used to search by (if not specified all props except `value` prop will be used)\nsortField         | string           | `null`     | Specify sort property. If not specified, `labelField` will be used\ndisableSifter     | bool             | `false`    | Disable Sifter filtering & sorting. Can be useful in combination with `fetch`, when further filtering or sorting may be undesired\ndisableHighlight  | bool             | `false`    | Disable highlighting of input value in results. Can be useful with a `renderer` function that includes additional text or does its own highlighting\nclass             | string           | `svelecte-control` | default css class\nstyle             | string           | `null`     | inline style\nhasAnchor         | bool             | `null`     | `internal`: when passing also existing select (for CE)\ni18n              | object           | `null`     | I18n object overriding default settings\ndndzone           | function         | empty      | Pass `dndzone` from `svelte-dnd-action`, if you want to support selection reordering. See the [example REPL](https://svelte.dev/repl/da2de4b9ed13465d892b678eba07ed99?version=3.44.0)\nvalidatorAction   | array            | `null`     | Bind validator action for inner `<select>` element. Designed to be used with `svelte-use-form`. See the [example REPL](https://svelte.dev/repl/de3cd8e47feb4d078b6bace8d4cf7b90?version=3.44.1). For this to work, `name` property MUST be defined\n\n\n### Custom items\n\nIf `renderer` property is not enough for you or you prefer Component syntax to HTML strings, you can use your own Components. Keep in mind that default `Item` component handles highlighting when searching, but the rest of features \nlike styling should be inherited if you use proper css classes (the same as `Item` component)..\n\nTo make it easier to use your own Components, there are available actions, highlighting function and close button icon for you to use.\n\nThe simplest example can be found in this [REPL](https://svelte.dev/repl/627c83c2666f452185baa8947f5588bb?version=3.44.1).\n\n---\n\n### Emitted events:\n\nEvent        | arguments                   | description\n-------------|-----------------------------|----------------------------------------------------------------------------\nfetch        | options                     | newly fetched remote options\nchange       | selection                   | selected objects. If `anchor` property is defined, `change` event is called also on it\ncreateoption | option                      | newly created option object\nblur         | -                           | blur event\ninvalidValue | invalidValue                | triggered when passed `value` is out of provided `options` items. Internal (and bound, if any) `value` is set to `null` or `[]` if multiple\nenterKey     | underlying `keyDown` event  | triggered when natively it would cause form submit (dropdown is closed). This gives you ability to prevent it by calling `event.detail.preventDefault()` \n\n### Public API:\n\nName          | type     | arguments | description\n--------------|----------|-----------|-------------\nfocus         | function | -         | focus input\ngetSelection  | function | bool      | return selection, if `true` is passed, only values are returns, whole objects otherwise\nsetSelection  | function | array     | set selection programmatically\nconfig        | property | -         | **context property**: global common config for all instances, you can override most properties here and also some additional, mainly i18n\naddFormatter  | function | -         | **context function**: with signature `(name, formatFn)` you can add additional item renderers (formatters)\n<!-- clearByParent | bool | internal for CE  -->\n\n### I18n\n\nThis is default value of `i18n` property: \n```js\n// config.i18n defaults:\n{\n  i18n: {\n    empty: 'No options',\n    nomatch: 'No matching options',    \n    max: num => `Maximum items ${num} selected`,\n    fetchBefore: 'Type to start searching',\n    fetchQuery: (minQuery, inputLength) => `Type ${minQuery > 1 && minQuery > inputLength \n      ? `at least ${minQuery - inputLength} characters `\n      : '' }to start searching`,\n    fetchEmpty: 'No data related to your search',\n    collapsedSelection: count => `${count} selected`,\n    createRowLabel: value => `Create '${value}'`\n  },\n  collapseSelectionFn: function(selectionCount, selection) {\n    return settings.i18n.collapsedSelection(selectionCount);\n  }\n}\n```\n\nYou can override whole object or only items you are interested in. You can override it globally or on component level:\n\n```js\n// global override\nimport Svelecte, { config } from 'svelecte';\n\nconfig.i18n = {\n    empty: '🚫',\n    nomatch: '✋',\n    max: num => '🙄',\n    fetchBefore: '💻',\n    fetchQuery: (minQuery, inputLength) => '🧮',\n    fetchEmpty: '🚮',\n    collapsedSelection: () => '🗃',\n    createRowLabel: value => `📝 ${value}`\n}\n\n// local override (component-level)\nconst myI18n = {\n    empty: `Empty list, can't you see?`\n}\n\n<Svelecte i18n={myI18n}></Svelecte>\n```\n\n## Customizable Slots\n\nThere are different slots within the component that allow to insert custom code and icons.\n\n### Control.svelte (bubbled up to the Svelecte component)\n- ```icon``` This allows to insert custom code like e.g. an icon at the start/left of the Control.svelte\n- ```control-end``` This allows to insert custom code at the end/right of the Control.svelte. It is positioned AFTER the indicator icons.\n\n## 🙏 Thanks to\n\n- [selectize.js](https://github.com/selectize/selectize.js) - inspiration\n- [sifter](https://github.com/brianreavis/sifter.js) - search engine\n- [svelte-select](https://github.com/rob-balfre/svelte-select) - inspiration & how-to, including some code borrowing 😊\n- [svelte-tiny-virtual-list](https://github.com/Skayo/svelte-tiny-virtual-list) virtual list capability\n\n## License\n\n[MIT License](https://github.com/mskocik/svelecte/blob/master/LICENSE)\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 31],
		[3596, 48],
		[3603, 23],
		[3610, 60],
		[3617, 33],
		[3624, 49],
		[3631, 38],
		[3638, 37],
		[3645, 26],
		[3652, 74],
		[3659, 69],
		[3666, 91],
		[3673, 78],
		[3680, 112],
		[3687, 98],
		[3694, 51],
		[3701, 87],
		[3708, 66],
		[3715, 118],
		[3722, 81],
		[3729, 72],
		[3736, 24],
		[3743, 39],
		[3750, 107],
		[3757, 115],
		[3764, 59],
		[3771, 76],
		[3778, 80],
		[3785, 96],
		[3792, 112],
		[3799, 115],
		[3806, 140],
		[3813, 103],
		[3820, 40],
		[3827, 96],
		[3834, 17],
		[3841, 145],
		[3848, 97],
		[3855, 107],
		[3862, 65],
		[3869, 145],
		[3876, 71],
		[3883, 91],
		[3890, 87],
		[3897, 86],
		[3904, 108],
		[3911, 124],
		[3918, 41],
		[3925, 92],
		[3932, 55],
		[3939, 91],
		[3946, 139],
		[3953, 108],
		[3960, 102],
		[3967, 120],
		[3974, 38],
		[3981, 19],
		[3988, 39],
		[3995, 22],
		[4002, 22],
		[4009, 7],
		[4016, 12],
		[4023, 17],
		[4030, 13],
		[4037, 34],
		[4044, 39],
		[4051, 29],
		[4058, 60],
		[4065, 50],
		[4072, 20],
		[4079, 25],
		[4086, 26],
		[4093, 27],
		[4100, 55],
		[4107, 21],
		[4114, 12],
		[4121, 36],
		[4128, 14]
	],
	"esm": true,
	"cjs": false
}
