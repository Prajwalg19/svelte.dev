{
	"name": "svelte-input-mask",
	"description": "Apply input masks to Svelte input elements.",
	"repo_url": "",
	"authors": ["xnimorz"],
	"downloads": 1914,
	"updated": "2020-12-08T00:04:28.690Z",
	"tags": ["ui"],
	"typescript": false,
	"version": "1.1.0",
	"svelte_range": ">=3.20.0",
	"last_rune_check_version": "1.1.0",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-input-mask",
				"version": "1.1.0",
				"size": 12793
			},
			{
				"name": "input-core",
				"version": "2.0.1",
				"size": 39667
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "## Mask input with simple API and rich customization.\n\nIf you need to create an input for:\n\n- credit card\n- phone number\n- date\n- birthday\n- numbers\n- Or other custom mask\n\nThis project could help you in all this situations!\n\nTake a look at our demos: https://codesandbox.io/s/svelte-input-mask-demo-xurgr\n\n### How to use it:\n\nInstall it:\n\n```\nnpm install --save svelte-input-mask\n```\n\nor if you're using yarn:\n\n```\nyarn add svelte-input-mask\n```\n\nImport `MaskInput` component:\n\n```js\nimport MaskInput from \"svelte-input-mask/MaskInput.svelte\";\n```\n\nUse it (for example for CreditCard):\n\n```js\n<MaskInput alwaysShowMask maskChar=\"_\" mask=\"0000-000000-00000\" />\n```\n\nAdd event listeners:\n\n```js\n<script>\n  import MaskInput from 'svelte-input-mask/MaskInput.svelte';\n\n  let mask = '0000-0000-0000-0000';\n\n  const handleChange = ({ detail }) => {\n    console.log(detail.inputState.maskedValue); // stores the value of input\n\n    if (detail.inputState.maskedValue.indexOf('34') === 0 || detail.inputState.maskedValue.indexOf('37') === 0) {\n      mask = '0000-000000-00000';\n      return;\n    }\n\n    mask = '0000-0000-0000-0000';\n  };\n</script>\n\n<MaskInput alwaysShowMask maskChar=\"_\" {mask} on:change={handleChange} />\n```\n\nCongrats! You made the first masked input :)\n\nCheckout more usecases here: https://codesandbox.io/s/romantic-franklin-xurgr\n\n### Where to use?\n\nCredit cards:\n\n```js\n<MaskInput alwaysShowMask maskChar=\"_\" mask=\"0000-000000-00000\" />\n```\n\nPhones (you still can change prefixes, country code like in credit card example):\n\n```js\n<MaskInput\n  alwaysShowMask\n  mask=\"+1 (000) 000 - 0000\"\n  size={20}\n  showMask\n  maskChar=\"_\"\n/>\n```\n\nDates:\n\n```js\n<script>\n  import MaskInput from 'svelte-input-mask/MaskInput.svelte';\n\n  let maskString = 'DD.MM.YYYY';\n  let mask = '00.00.0000';\n\n  const handleChange = ({ detail }) => {\n    const value = detail.inputState.maskedValue;\n    if (parseInt(value[6], 10) > 2) {\n      maskString = 'DD.MM.YY';\n      mask = '00.00.00';\n    } else {\n      maskString = 'DD.MM.YYYY';\n      mask = '00.00.0000';\n    }\n  };\n</script>\n\n<MaskInput alwaysShowMask {maskString} {mask} on:change={handleChange}/>\n```\n\nNumbers:\n\n```js\n<script>\n  import NumberInput from 'svelte-input-mask/NumberInput.svelte';\n</script>\n\n<NumberInput />\n```\n\n### Which props it has?\n\nMask input has next props:\n\n| Prop           | Default value | Description                                                                                                                                                                                            |\n| -------------- | ------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| value          | -             | The value of the input. Will be processed to masked one. In this case you can control the value of the component                                                                                       |\n| defaultValue   | -             | The default value of the input. Will be applied only during the first render                                                                                                                           |\n| maskString     | -             | The mask string to show if there are no filled chars. It's length should be the same as `mask`. Example: `'DD.MM.YYYY'`                                                                                |\n| maskChar       | ''            | In case you don't need a custom string you can define only a definite char for mask. Example: `maskChar = '_'` and `mask = '0000-0000-0000-0000'` will give: `____-____-____-____`                     |\n| mask           | -             | The mask of the input. Could be a credit card: `'0000-0000-0000-0000'`, date: `00.00.0000` or whatever you want :) Doesn't work if `reformat` prop is setted                                           |\n| maskFormat     | regexp        | The regexp for custom formatting. You may use it if you want to define a specific mask. See example here: https://github.com/xnimorz/masked-input/blob/master/packages/input-core/src/index.ts#L16-L28 |\n| alwaysShowMask | false         | Flag to show the mask                                                                                                                                                                                  |\n| showMask       | false         | Show mask if there is any data in input                                                                                                                                                                |\n| reformat       | -             | The function, which defines a custom formatting rules. In case if you can't describe the format only with mask (e.g. numbers). If you use this prop `mask` prop will be ignored                        |\n\nSvelte mask input pass all props that it doesn't handle right to `input` html element.\n\n### Quick start examples at local machine\n\n```\ngit clone git@github.com:xnimorz/svelte-input-mask.git\ncd svelte-input-mask/example\nyarn install\nyarn dev\n```\n\n### Requirements:\n\nSvelte should be installed in your project. Check the minimal Svelte version here: https://github.com/xnimorz/svelte-input-mask/blob/master/package.json#L42\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 352],
		[3596, 786],
		[3603, 532],
		[3610, 463],
		[3617, 531],
		[3624, 754],
		[3631, 763],
		[3638, 649],
		[3645, 498],
		[3652, 755],
		[3659, 806],
		[3666, 746],
		[3673, 891],
		[3680, 1030],
		[3687, 1387],
		[3694, 1291],
		[3701, 1302],
		[3708, 1692],
		[3715, 1634],
		[3722, 1112],
		[3729, 1383],
		[3736, 860],
		[3743, 1151],
		[3750, 1022],
		[3757, 1088],
		[3764, 1472],
		[3771, 1118],
		[3778, 1463],
		[3785, 1589],
		[3792, 1341],
		[3799, 1119],
		[3806, 1008],
		[3813, 1016],
		[3820, 1296],
		[3827, 1476],
		[3834, 1315],
		[3841, 1807],
		[3848, 1566],
		[3855, 1908],
		[3862, 2117],
		[3869, 3096],
		[3876, 2057],
		[3883, 3919],
		[3890, 3337],
		[3897, 3452],
		[3904, 3581],
		[3911, 2926],
		[3918, 3421],
		[3925, 3256],
		[3932, 4005],
		[3939, 3031],
		[3946, 3087],
		[3953, 2905],
		[3960, 2681],
		[3967, 2349],
		[3974, 2609],
		[3981, 2635],
		[3988, 2109],
		[3995, 2228],
		[4002, 2063],
		[4009, 1071],
		[4016, 1630],
		[4023, 2337],
		[4030, 2177],
		[4037, 1244],
		[4044, 1329],
		[4051, 1437],
		[4058, 1170],
		[4065, 1175],
		[4072, 1462],
		[4079, 1439],
		[4086, 1367],
		[4093, 1386],
		[4100, 2260],
		[4107, 1987],
		[4114, 1914],
		[4121, 2145],
		[4128, 1539]
	]
}
