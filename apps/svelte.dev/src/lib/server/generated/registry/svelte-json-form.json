{
	"name": "svelte-json-form",
	"description": "Generate HTML forms that output JSON data in Svelte.",
	"repo_url": "https://github.com/CalebPena/svelte-json-form",
	"authors": ["not_a_cm"],
	"homepage": "https://github.com/CalebPena/svelte-json-form#readme",
	"downloads": 5,
	"updated": "2024-03-01T16:12:28.456Z",
	"tags": ["miscellaneous"],
	"github_stars": 0,
	"typescript": true,
	"version": "0.0.5",
	"svelte_range": "^4.0.0",
	"kit_range": "^2.0.0",
	"last_rune_check_version": "0.0.5",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-json-form",
				"version": "0.0.5",
				"size": 22956
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Svelte JSON Form\n\nSvelte package for creating an HTML form that outputs JSON.\n\n## Installing\n\n```bash\n$ npm install svelte-json-form\n```\n\n## How to use\n\nThe Svelte JSON components work like the regualar HTML form input elements. Svelte JSON provides a couple extra wrappers for creating JSON.\n\n## API\n\n### JsonForm\n\nWrapper for a JSON from. Should only have one JSON input as a direct child.  \n`value`: The value of the JSON in the form\n\n### JsonString\n\nInput for creating a JSON string.  \n`value`: The value of the input  \n`defaultValue`: The default value of the input  \n`jsonKey`: The key of the element in the JSON\n\n### JsonNumber\n\nInput for creating a JSON number.  \n`value`: The value of the input  \n`defaultValue`: The default value of the input  \n`jsonKey`: The key of the element in the JSON\n\n### JsonBoolean\n\nInput for creating a JSON boolean.  \n`value`: The value of the input  \n`defaultValue`: The default value of the input  \n`jsonKey`: The key of the element in the JSON\n\n### JsonNull\n\nCreate a field that is always a JSON null  \n`value`: Always null  \n`jsonKey`: The key of the element in the JSON\n\n### JsonSelect\n\nCreate a select with options for the JSON field. Can be mixed types.\n\n`value`: The value of the select. Must be in options  \n`jsonKey`: The key of the element in the JSON  \n`options`: List of options for the select  \n`defaultValue`: The default value of the select. Must be in options  \n`optionProps`: Props to be passed into each option element options\n\n### JsonObject\n\nWrapper for JSON inputs where each input must have the `jsonKey` prop.  \n`jsonKey`: The key of the element in the JSON\n\n### JsonArray\n\nWrapper for JSON arrays. Requires 2 named slots:\n\nThe `value` prop has the inputs for each element in the array. Provides 2 let props.  \n`let:index`: The index of the element  \n`let:remove`: A function that removes the element\n\nThe `add-button` prop is a button to add elements to the array. Provides 1 let prop.  \n`let:add`: A function to add an element\n\n`jsonKey`: The key of the element in the JSON\n\n### JsonMap\n\nJson object where the keys are user selected. Requires 2 named slots:\n\nThe `value` prop has the inputs for each element in the map. Provides 3 let props.  \n`let:index`: The index of the element  \n`let:remove`: A function that removes the element  \n`let:updateKey`: A function to be passed into the `JsonMapKey` `on:updateKey` event\n\nThe `add-button` prop is a button to add elements to the array. Provides 1 let prop.  \n`let:add`: A function to add an element\n\n### JsonMapKey\n\nKey used in the JSON map  \n`value`: Value of the key.  \n`on:updateKey`: Event that fires then the key changes. Usually used with `let:updateKey` from the `JsonMap` component.\n\n### Types\n\n`JsonDataType`: Any JSON data  \n`JsonArrayType`: Any JSON array  \n`JsonObjectType`: Any JSON object  \n`JsonKeyType`: JSON array or object key\n\n## Example\n\n```html\n<JsonForm bind:value>\n\t<JsonObject>\n\t\t<div>\n\t\t\t<label for=\"hello\">Hello</label>\n\t\t\t<JsonNumber jsonKey=\"hello\" id=\"hello\" value={1000} />\n\t\t</div>\n\t\t<div>\n\t\t\t<label for=\"world\">World</label>\n\t\t\t<JsonString jsonKey=\"world\" id=\"world\" value=\"hello\" />\n\t\t</div>\n\t\t<div>\n\t\t\t<label for=\"number\">Number</label>\n\t\t\t<JsonSelect jsonKey=\"number\" id=\"number\" value=\"ahhh\" options={['ahhh', 'hello', 0, ':)']} />\n\t\t</div>\n\t\t<div>\n\t\t\t<label for=\"bool\">Boolean</label>\n\t\t\t<JsonBoolean jsonKey=\"bool\" id=\"bool\" value={true} />\n\t\t</div>\n\t\t<JsonNull jsonKey=\"null\" />\n\t\t<JsonArray jsonKey=\"arg\">\n\t\t\t<div slot=\"value\" let:index let:remove>\n\t\t\t\t<label for={index + 'hello'}>{index}</label>\n\t\t\t\t<JsonNumber jsonKey={index} id={index + 'hello'} />\n\t\t\t\t<button type=\"button\" on:click={remove}>Remove</button>\n\t\t\t</div>\n\t\t\t<div slot=\"add-button\" let:add>\n\t\t\t\t<button type=\"button\" on:click={add}>Add</button>\n\t\t\t</div>\n\t\t</JsonArray>\n\t\t<JsonMap jsonKey=\"i_am_the_map\">\n\t\t\t<div slot=\"value\" let:remove let:updateKey>\n\t\t\t\t<JsonMapKey on:updateKey={updateKey} />:\n\t\t\t\t<JsonString value=\"hello\" />\n\t\t\t\t<button type=\"button\" on:click={remove}>Remove</button>\n\t\t\t</div>\n\t\t\t<div slot=\"add-button\" let:add>\n\t\t\t\t<button type=\"button\" on:click={add}>Add</button>\n\t\t\t</div>\n\t\t</JsonMap>\n\t</JsonObject>\n</JsonForm>\n\n<div>{JSON.stringify(value)}</div>\n```\n\n## Contributing\n\nFeel free to create an issue or submit a pull request.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3736, 4],
		[3757, 6],
		[3771, 1],
		[3778, 5],
		[3785, 1],
		[3792, 1],
		[3799, 1],
		[3806, 10],
		[3834, 21],
		[3841, 1],
		[3848, 1],
		[3855, 3],
		[3862, 1],
		[3869, 1],
		[3883, 1],
		[3890, 9],
		[3911, 1],
		[3932, 1],
		[3939, 1],
		[3953, 1],
		[3960, 1],
		[3967, 2],
		[3981, 1],
		[4037, 14],
		[4044, 9],
		[4051, 3],
		[4065, 1],
		[4093, 2],
		[4100, 12],
		[4114, 5],
		[4121, 9],
		[4128, 3]
	]
}
