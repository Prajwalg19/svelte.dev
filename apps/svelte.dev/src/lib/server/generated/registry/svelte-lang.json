{
	"name": "svelte-lang",
	"description": "Simplify multilingual support in Svelte applications.",
	"repo_url": "https://github.com/enoy19/svelte-lang",
	"authors": ["enoy19"],
	"homepage": "https://github.com/enoy19/svelte-lang#readme",
	"downloads": 9,
	"updated": "2024-11-01T19:14:37.704Z",
	"tags": ["integration"],
	"github_stars": 2,
	"typescript": true,
	"version": "1.1.0",
	"svelte_range": "^5.1.9",
	"kit_range": "^2.7.4",
	"last_rune_check_version": "1.1.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-lang",
				"version": "1.1.0",
				"size": 18338
			},
			{
				"name": "accept-language-parser",
				"version": "1.5.0",
				"size": 13907
			},
			{
				"name": "svelte-persisted-store",
				"version": "0.12.0",
				"size": 29408
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2]
		],
		"circular": []
	},
	"readme": "# svelte-lang\n\nAn internationalization (i18n) library for Svelte applications, designed to make multilingual support simple and efficient.\n\n## Features\n\n- **Simple Setup**: Easily integrate with Svelte applications.\n- **Template Literal Translations**: Use template literals for translations, keeping code clean and readable.\n- **Parameterized Translations**: Support dynamic parameters within translation strings.\n- **Language Persistence**: Optionally persist the selected language in [localstorage](https://github.com/joshnuss/svelte-persisted-store).\n- **Automatic Language Detection**: Detect user language preferences from the browser.\n- **Inline Parameters**: Support inline parameters in translation keys.\n- **Svelte Stores Integration**: Uses Svelte stores for reactive language and translation handling.\n\n## Installation\n\n```bash\nnpm install svelte-lang\n```\n\n## How to Use\n\n### Setup Translations\n\nCreate translation files for each language in your project.\n\n**Example: English Translations (`en.ts`)**\n\n```typescript\n// src/lib/i18n/translations/en.ts\nimport { t, p } from 'svelte-lang';\n\nexport const en = {\n  app: t`svelte-lang`,\n  'Something went wrong': t`Something went wrong`,\n  'Welcome $name': t`Welcome ${p('name')}`\n} as const;\n```\n\n**Example: German Translations (`de.ts`)**\n\n```typescript\n// src/lib/i18n/translations/de.ts\nimport { t, p } from 'svelte-lang';\n\nexport const de = {\n  app: t`svelte-lang`,\n  'Something went wrong': t`Etwas ist schief gelaufen`,\n  'Welcome $name': t`Willkommen ${p('name')}`\n} as const;\n```\n\n### Initialize i18n\n\nSet up the i18n configuration in your project.\n\n```typescript\n// src/lib/i18n/index.ts\nimport { setupI18n } from 'svelte-lang';\nimport { en } from './translations/en';\nimport { de } from './translations/de';\n\nexport const translations = {\n  en,\n  de\n} as const;\n\nexport const { t, language, supportedLanguages, tUnsafe, initLanguage } = setupI18n(\n  translations,\n  'en', // Default language\n  { languagePersisted: true } // Persist language selection in localstorage\n);\n```\n\n### Update `app.d.ts`\n\nEnsure that the `language` property is available in the `App.Locals` interface.\n\n```typescript\n// src/app.d.ts\ndeclare global {\n  namespace App {\n    interface Locals {\n      language: string;\n    }\n  }\n}\n\nexport {};\n```\n\n### Implement Language Detection Hook\n\nUse a server hook to detect and set the user's preferred language.\n\n```typescript\n// src/hooks.server.ts\nimport { translations } from '$lib/i18n';\nimport { i18nHook } from 'svelte-lang';\n\nexport const handle = i18nHook(translations, 'en');\n```\n\n#### Add to existing Hook\n\n```typescript\n// src/hooks.server.ts\nimport { translations } from '$lib/i18n';\nimport { i18nHook } from 'svelte-lang';\nimport { sequence } from '@sveltejs/kit/hooks';\nimport { anotherHook } from './anotherHook';\n\n// Combine multiple hooks\nexport const handle = sequence(\n  i18nHook(translations, 'en'),\n  anotherHook\n  // Add more hooks as needed\n);\n```\n\n### Initialize Language in Layout\n\nSet the initial language in your root layout.\n\n```svelte\n<!-- src/routes/+layout.svelte -->\n<script lang=\"ts\">\n  import { initLanguage } from '$lib/i18n';\n  import type { LayoutData } from './$types';\n\n  export let data: LayoutData;\n\n  initLanguage(data.language);\n</script>\n\n<slot />\n```\n\n```typescript\n// src/routes/+layout.server.ts\nimport type { LayoutServerLoad } from './$types';\n\nexport const load: LayoutServerLoad = async ({ locals }) => {\n  return { language: locals.language };\n};\n```\n\n### Use Translations in Components\n\nUse the `t` function to retrieve translations in your Svelte components.\n\n```svelte\n<!-- src/routes/+page.svelte -->\n<script lang=\"ts\">\n  import { language, supportedLanguages, t, tUnsafe } from '$lib/i18n';\n\n  let name = 'John';\n  let dynamicKey = 'app';\n  let inlineParamsKey = 'Welcome $name({\"name\": \"John\"})';\n</script>\n\n<main>\n  <h1>{$t('app')}</h1>\n\n  <div>\n    <label for=\"language\">Select Language:</label>\n    <select id=\"language\" bind:value={$language}>\n      {#each supportedLanguages as lang}\n        <option value={lang}>{lang}</option>\n      {/each}\n    </select>\n  </div>\n\n  <div>\n    <label for=\"name\">Name:</label>\n    <input id=\"name\" type=\"text\" bind:value={name} />\n    <p>{$t('Welcome $name', { name })}</p>\n  </div>\n\n  <div>\n    <h2>Dynamic Key Translation:</h2>\n    <label for=\"dynamic-key\">Key:</label>\n    <input id=\"dynamic-key\" type=\"text\" bind:value={dynamicKey} />\n    <p>{$tUnsafe(dynamicKey)}</p>\n  </div>\n\n  <div>\n    <h2>Inline Parameters:</h2>\n    <label for=\"inline-params-key\">Key:</label>\n    <input id=\"inline-params-key\" type=\"text\" bind:value={inlineParamsKey} />\n    <p>{$tUnsafe(inlineParamsKey)}</p>\n  </div>\n</main>\n```\n\n### Accessing Translations with Parameters\n\nTo include dynamic parameters in your translations, use the `p` function when defining translations and pass the parameters when retrieving them.\n\n**Defining a Translation with Parameters**\n\n```typescript\n// In your translation file\n'Welcome $name': t`Welcome ${p('name')}`,\n```\n\n**Retrieving a Translation with Parameters**\n\n```svelte\n<p>{$t('Welcome $name', { name: 'Alice' })}</p>\n```\n\n## Contributing\n\nContributions are welcome! Please open an issue or submit a pull request for any bugs or feature requests.\n\n## License\n\nThis project is licensed under the MIT License.\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3911, 128],
		[3918, 2],
		[3925, 1],
		[3932, 4],
		[3939, 6],
		[3946, 17],
		[3953, 80],
		[3960, 19],
		[3967, 2],
		[3974, 2],
		[3981, 5],
		[3988, 6],
		[3995, 1],
		[4002, 5],
		[4009, 4],
		[4016, 4],
		[4023, 8],
		[4030, 6],
		[4037, 12],
		[4044, 7],
		[4051, 2],
		[4058, 1],
		[4065, 8],
		[4072, 12],
		[4079, 6],
		[4086, 1],
		[4093, 2],
		[4100, 3],
		[4107, 17],
		[4114, 9],
		[4121, 12],
		[4128, 2]
	],
	"esm": true,
	"cjs": false
}
