{
	"name": "@healthtree/svelte-data-table",
	"description": "Create reactive data tables for Svelte applications.",
	"repo_url": "",
	"authors": [
		"sahagun-jorge",
		"alvarocapde",
		"healthtree-admin",
		"diegofhe",
		"jpcapdevila",
		"aureliob"
	],
	"homepage": "https://github.com/Healthtree/svelte-data-table/blob/master/README.md",
	"downloads": 6,
	"updated": "2021-05-26T21:31:56.931Z",
	"tags": ["ui"],
	"typescript": false,
	"version": "1.0.4",
	"svelte_range": "3.20.1",
	"last_rune_check_version": "1.0.4",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@healthtree/svelte-data-table",
				"version": "1.0.4",
				"size": 650325
			},
			{
				"name": "fuse.js",
				"version": "5.2.2",
				"size": 301636
			},
			{
				"name": "lodash-es",
				"version": "4.17.15",
				"size": 629054
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2]
		],
		"circular": []
	},
	"readme": "# Svelte Datatable\n\nThis is a reactive svelte-datatable. Feats:\n\n- In reactive: If you change rows, the dataTable updates accordingly\n- FrontEnd paginator\n- FrontEnd included Searchbar\n- You can pass SvelteComponent to render on a column\n- You can pass SvelteComponent to render a header\n- Sticky 1 column (can sticky just 1 col for now)\n\n## Documentation\n\n|Param|type|Required|Default|\n| ------ | ------ | ------ | ----- |\n|columns| Column[] | true | --\n|rows| object[] | true | --\n|fuseConfig| object | false | --\n|paginated|boolean|false|true|\n|searchable|boolean|false|true|\n|itemsPerPages|number[]|false| [5,10,15]\n\nIf searchable == true, by default all columns will be searchable. If you wish to exclude a column from search, specify\nsearchable = false in the column definition.\n\nCustom fuse parameters may also be provided through the fuseConfig prop\n\n## Icons\n\nThis project uses material icons, this dependency need to be installed on the project that use svelte-data-table\n\nFollow the instructions [here](https://developers.google.com/fonts/docs/material_icons)\n\n## Interfaces\n\n```typescript\ninterface SvelteComponent {\n}\n\ninterface Column {\n\tlabel: string, // header of column\n\tfield: string, // property on rows to display;accessed by _.get\n\tcomponent?: SvelteComponent //must export row, column rowIndex and columnIndex  to have scopes \n\theaderComponent?: SvelteComponent // must export column and columnIndex  to have scopes     \n\tsortable?: boolean, // false by default\n\tsearchable?: boolean, // true by default\n\ttype?: string, // string by default can be: number | date\n\tsticky?: boolean,\n\tsortFnc?: 'function' // eg: (a,b, currentSort) => {}  currentSort can be asc|desc|null\n\ttransform?: 'function' // can also be an object --> see 'Transform' section below\n}\n```\n\n## CustomStyle\n\nEach element affected by css is divided by 2 classes: Layout and style. You can easily overwrite this css classes to\nmake changes in style. We recommend only changing the styles ones which are:\n\n|Component|Class|\n| ------ |-------|\n|Search|dt-search-container-style|\n|Search|dt-search-input-style|\n|Table|dt-table-container-style|\n|Table|dt-table-wrapper-style|\n|Table|dt-table-header-th-style|\n|Table|dt-table-body-td-style|\n|Paginator|dt-paginator-style|\n|Paginator|dt-paginator-items-per-page-style|\n|Paginator|dt-paginator-status-style|\n|Paginator|dt-paginator-current-page-style|\n|Paginator|dt-paginator-arrows-style|\n\n## DataTable Events Events\n\n|Name|Description|Notes|\n| ------ |-------|------|\n|headerClick|Sent  on clicking header with column and columnIndex as information| |\n|headerCustomHandler|Event used to be forwarded by the DataTable| If you have a custom header with two parts, and want to do a specific action when clicking one see \"Header Custom handler\" section|\n\n## Header Custom handler\n\nTo make the table emit a headerCustomHandler event, the column.headerComponent must dispatch an event called\nheaderCustomHandler to be forwarded to the datable.\n\n```svelte\n<script>\n    import { createEventDispatcher } from 'svelte';\n    const dispatch = createEventDispatcher();\n\n    function onClick1(){\n        dispatch('headerCustomHandler', {clickOne:true});\n    }\n    function onClick2(){\n        dispatch('headerCustomHandler', {clickTwo:true});\n    }\n</script>\n\n<div>\n    <p on:click={onClick1}>Click1</p>\n    <p on:click={onClick2}>Click2</p>\n</div>\n```\n\n## Transform\n\n### Interfaces\n\n```typescript\n// for all cases, note that pre-transformed data still exists and is never overwritten\n\ntransform: 'function' // e.g. (data) => { transform logic here }\n// or\ninterface transform {\n\tsourceField?: string            // accessed by _.get; path of target to transform; Defaults to value stored in column.field;\n\tdestinationField?: string       // accessed by _.set; new location to store the transformed data; Defaults to value stored in 'column.field';\n\tcull?: boolean                  // defaults to false; flag to ONLY return an object containing the transformed data\n\tfnc: 'function'                 // e.g. (data) => { transform logic here }\n}\n\n// if the property pointed to by 'field' or 'sourceField' is \n// null or undefined, then transform does nothing\n```\n\n### Example Code\n\n```javascript\nconst rows = [\n\t{\n\t\tdata: {\n\t\t\ttitle: \"   my Title \",\n\t\t\tvalues: [0, 1, 2, 3, 4, 5],\n\t\t\tobj: {\n\t\t\t\tworld: \"world\"\n\t\t\t}\n\t\t}\n\t}\n];\n\nfunction trimAndCAPS(title) {\n\treturn title.trim().toUpperCase() + '!!!';\n}\n\nfunction reduce(valuesArray) {\n\treturn valuesArray.reduce((a, b) => {\n\t\treturn a + b;\n\t}, 0);\n}\n\nconst columns = [\n\t{\n\t\tlabel: \"Title\",\n\t\tfield: \"data.title\",        // note that if this data does not exist, the value is set to 'null'\n\t\tcomponent: myComponent,     // optional svelte component : receives newly created, transformed object\n\t\ttransform: trimAndCAPS\n\t\t//  new object returned after transform :\n\t\t//      {\n\t\t//          data: {\n\t\t//              title: \"MY TITLE!!!\",\n\t\t//              values: [0, 1, 2, 3, 4, 5],\n\t\t//              obj: { world: \"world\" },\n\t\t//          }\n\t\t//      }\n\t},\n\t{\n\t\t// this example works exactly the same as example above\n\t\tlabel: \"transform as an object -- example 2\",\n\t\tfield: \"data.title\",\n\t\ttransform: {\n\t\t\tfnc: trimAndCAPS\n\t\t}\n\t},\n\t{\n\t\tlabel: \"Storing Transform Separately\",\n\t\tfield: \"transformed.value\",       // set default field to look at the newly created 'transformed.value' propery\n\t\tcomponent: myComponent,           // optional svelte component : receives newly created, transformed object\n\t\ttransform: {\n\t\t\tsourceField: 'data.values',                 // note again that this defaults to the 'column.field' property\n\t\t\tdestinationField: 'transformed.value',      // note that this path need not exist, and will be created on the fly.\n\t\t\tfnc: reduce\n\t\t}\n\t\t//  new object returned after transform :\n\t\t//      {\n\t\t//          data: {\n\t\t//              title: \"   my Title \",\n\t\t//              values: [0, 1, 2, 3, 4, 5],\n\t\t//              obj: { world: \"world\" },\n\t\t//          }\n\t\t//          transformed: {\n\t\t//              value: 15\n\t\t//          }\n\t\t//      }\n\t},\n\t{\n\t\tlabel: \"culled transform\",\n\t\tfield: \"transformed.value\",\n\t\ttransform: {\n\t\t\tsourceField: 'data.values',\n\t\t\tdestinationField: 'transformed.value',\n\t\t\tcull: true,                   // only return transformed values\n\t\t\tfnc: reduce\n\t\t}\n\t\t//  new object returned after transform :\n\t\t//      {\n\t\t//          transformed: {\n\t\t//              value: 15\n\t\t//          }\n\t\t//      }\n\t},\n\t{\n\t\t// the object syntax adds a little bit more flexibility, especially for use-cases with components\n\t\tlabel: \"Examining Scope\",\n\t\tfield: \"transformed.obj.concat\",\n\t\tcomponent: myComponent,\n\t\ttransform: {\n\t\t\tsourceField: 'data',                 // note again that this defaults to the 'column.field' property\n\t\t\tdestinationField: 'transformed',     // note that this path need not exist, and will be created on the fly.\n\t\t\tfnc: (data) => {\n\t\t\t\tif (!data.obj.hello) data.obj.hello = 'hello';\n\t\t\t\tdata.obj.concat = `${data.title.trim()} says '${data.obj.hello} ${data.obj.world}' : sum = ${reduce(data.values)}`;\n\t\t\t\tdata.values.push(6);\n\t\t\t\tdata.title = trimAndCAPS(data.title);\n\t\t\t\treturn data;\n\t\t\t}\n\t\t}\n\t\t//  new object returned after transform :\n\t\t//      {\n\t\t//          data: {\n\t\t//              title: \"   my Title \",\n\t\t//              values: [0, 1, 2, 3, 4, 5],\n\t\t//              obj: { world: \"world\" },\n\t\t//          }\n\t\t//          transformed: {\n\t\t//              title: \"MY TITLE!!!\",\n\t\t//              values: [0, 1, 2, 3, 4, 5, 6],\n\t\t//              obj: {\n\t\t//                  concat: \"my Title says 'hello world' : sum = 15\",\n\t\t//                  hello: \"hello\",\n\t\t//                  world: \"world\"\n\t\t//              }\n\t\t//          }\n\t\t//      }\n\t},\n\t{\n\t\tlabel: \"truncating & overwriting side-effect of passing objects\",\n\t\tfield: \"data\",\n\t\ttransform: (data) => {\n\t\t\treturn `there are ${reduce(data.values)} ${data.obj.world}s out there`;\n\t\t}\n\t\t//  new object returned after transform :\n\t\t//      {\n\t\t//          data: \"there are 15 worlds out there\"\n\t\t//      }\n\t}\n];\n```\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 2],
		[3596, 11],
		[3603, 2],
		[3610, 2],
		[3617, 1],
		[3624, 1],
		[3631, 1],
		[3638, 1],
		[3645, 2],
		[3652, 7],
		[3659, 5],
		[3666, 6],
		[3673, 6],
		[3680, 1],
		[3687, 1],
		[3694, 3],
		[3701, 4],
		[3708, 9],
		[3715, 1],
		[3722, 2],
		[3729, 5],
		[3736, 2],
		[3743, 1],
		[3757, 1],
		[3764, 6],
		[3778, 6],
		[3785, 1],
		[3792, 5],
		[3799, 1],
		[3806, 1],
		[3813, 1],
		[3820, 2],
		[3827, 2],
		[3834, 1],
		[3841, 2],
		[3855, 25],
		[3862, 11],
		[3883, 7],
		[3890, 2],
		[3897, 6],
		[3904, 6],
		[3911, 1],
		[3918, 5],
		[3932, 2],
		[3939, 1],
		[3960, 2],
		[3981, 1],
		[3988, 1],
		[3995, 1],
		[4002, 1],
		[4016, 3],
		[4023, 11],
		[4030, 3],
		[4037, 8],
		[4044, 7],
		[4051, 2],
		[4058, 2],
		[4072, 2],
		[4086, 1],
		[4093, 39],
		[4107, 6],
		[4114, 6],
		[4121, 5],
		[4128, 8]
	],
	"esm": true,
	"cjs": false
}
