{
	"name": "svormik",
	"description": "Wrap Svelte forms, handle values, errors, and form status.",
	"repo_url": "https://github.com/tranpeter08/svormik",
	"authors": ["mptxnismo"],
	"homepage": "https://github.com/tranpeter08/svormik",
	"downloads": 9,
	"updated": "2020-02-02T04:23:30.154Z",
	"tags": ["miscellaneous"],
	"github_stars": 0,
	"typescript": false,
	"version": "0.3.7",
	"svelte_range": "^3.17.3",
	"last_rune_check_version": "0.3.7",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svormik",
				"version": "0.3.7",
				"size": 11862
			},
			{
				"name": "svelte",
				"version": "3.59.2",
				"size": 10624206
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# What is Svormik?\n\nSvormik is a wrapper for [Svelte](https://www.npmjs.com/package/svelte) form components. It helps with handling form values and errors. This wrapper component was strongly influenced by [Formik](https://www.npmjs.com/package/formik) (a popular package for form state management for React applications).\n\nAnd just like Formik, Svormik can also be used with [Yup](https://www.npmjs.com/package/yup) for validating form inputs.\n\n# Usage\n\nTo use Svormik, import it and wrap your form component.\n\n```html\n\n<script>\n  import {Svormik} from 'svormik';\n</script>\n\n<Svorkmik>\n  <form>\n    ...inputs\n  </form>\n</Svormik>\n```\n\n# Props\n\n## `initialValues`\n\nSet to an Object containing keys with the associated field name and the initial value as the value.\n\n- `initialValues: {fieldName: value}`\n\n```html\n<script>\n  import {Svormik} from 'svormik';\n\n  const initialValues = {\n    username: 'foo',\n    password: 'bar'\n  };\n</script>\n\n<Svormik {initalValues}>\n  <form>\n    <input name=\"username\" type=\"text\" />\n    <input name=\"password\" type=\"password\" />\n  </form>\n</Svormik>\n```\n\n## `formData` (bind)\n\nContains all form data, such as: values, errors and form status.\n\n- `values: {field: value}` - contains field values.\n- `errors: {field: [errorMsgs]}` - contains field errors as an **array** of error messages.\n- `status` - has status of different form properties (ie submitting, dirty, hasError, etc...). _still in progress_\n\n```html\n<script>\n  import {Svormik} from 'svormik';\n\n  let formData;\n\n  $: console.log(formData); // {values: ...values, errors: ...erors, status: ...status}\n</script>\n\n<Svormik bind:formData>\n  <form>\n    ...\n  </form>\n</Svormik>\n```\n\n## `actions` (bind)\n\nContains methods that update the **formProps** derived store. See [Actions](#Actions).\n\n## `validate`\n\nSet to an Object containing keys of the field names that need to be validated and an **array** of custom validation functions, or a Yup schema for the value.\nIf using custom functions and if there is an error, return a message, else return a falsey value.\n\n- `validators: (value, values) => string | null`\n- `validate: Schema | { fieldName: Schema | [validators] }`\n\n```html\n<script>\n  import Svormik from 'svormik';\n\n  const required = (value, values) =>\n    value === undefined ? 'Field is required' : null;\n\n  const minLength = n => (value, values) =>\n    value.length < n ? `Needs to have at least ${n} characters` : null;\n\n  const matching = fieldName => (value, values) =>\n    value !== values[fieldName] ? `Doesn't match ${fieldName}` : null;\n\n  const validate = {\n    username: [required, minLength(5)],\n    password: [required, minLength(10)],\n    confirmPassword: [required, matching('password')]\n  };\n</script>\n\n<Svormik {validate}>\n  <form>\n    ...\n  </form>\n</Svormik>\n```\n\n\\- OR -\n\n```html\n<script>\n  import Svormik from 'svormik';\n  import * as Yup from 'yup';\n\n  const validate = {\n    username: yup\n      .string()\n      .required()\n      .min(3),\n    password: yup\n      .string()\n      .required()\n      .min(10)\n  };\n</script>\n\n<Svormik {validate}>\n  <form>\n    ...\n  </form>\n</Svormik>\n```\n\n## `handleSubmit` (bind)\n\nA function that accepts a callback and should be invoked on submit. The callback will be passed `formProps` and `actions` that updates the stores.\n\n- `handleSubmit: (callback) => void`\n- `callback: (formProps, actions) => void`\n- `formProps:` contains same data as [formData](#formdata).\n- `actions:` contains [setErrors](#seterrors), [setStatus](#setstatus), and [setValues](#setvalues) methods.\n\n```html\n<script>\n  import {Svormik} from 'svormik';\n\n  let handleSubmit;\n\n  function onSubmit(e) {\n    handleSubmit(sendData);\n  }\n\n  function sendData(formProps, actions) {\n    try {\n      await asyncFn(formProps.values);\n    } catch (errors) {\n      //process errors\n    }\n  }\n</script>\n\n<Svormik bind:handleSubmit>\n  <form on:submit|preventDefault=\"{onSubmit}\">\n    ...\n  </form>\n</Svormik>\n```\n\n`handleSubmit` can also be used with the **let** directive.\n\n```html\n<script>\n  import {Svormik} from 'svormik';\n\n  function sendData(formProps, actions) {\n    try {\n      await asyncFn(formProps.values);\n    } catch (errors) {\n      //process errors\n    }\n  }\n</script>\n\n<Svormik let:handleSubmit>\n  <form on:submit|preventDefault=\"{() => handleSubmit(sendData)}\">\n    ...\n  </form>\n</Svormik>\n```\n\n# Actions\n\n## `setErrors`\n\nA function that accepts an object as an argument that contains the keys of field names or custom error fields, and either an array of error messages or a custom value for the values. Updates the **formErrors** store.\n\n- `setErrors: ({errorName: [errorMsgs] | customValue}) => void`\n\n```html\n<script>\n  import {Svormik} from 'svormik';\n\n  let handleSubmit;\n\n  function onSubmit(e) {\n    handleSubmit(sendData);\n  }\n\n  function sendData(formProps, actions) {\n    try {\n      await asyncFn(formProps.values);\n    } catch (error) {\n      actions.setErrors({[error.location]: error.message});\n    }\n  }\n</script>\n\n<Svormik bind:handleSubmit>\n  <form on:submit|preventDefault=\"{onSubmit}\">\n    ...\n  </form>\n</Svormik>\n```\n\n## `setStatus`\n\nA function that accepts an object as an argument that contains the keys of status names and status value as the value. Updates the **formStatus** store.\n\n- `setStatus: ({statusName: value}) => void`\n\n```html\n<script>\n  import {Svormik} from 'svormik';\n\n  let handleSubmit;\n\n  function onSubmit(e) {\n    handleSubmit(sendData);\n  }\n\n  function sendData(formProps, actions) {\n    try {\n      await asyncFn(formProps.values);\n    } catch (error) {\n      actions.setErrors({[error.location]: error.message});\n      actions.setStatus({submitting: false});\n    }\n  }\n</script>\n\n<Svormik bind:handleSubmit>\n  <form on:submit|preventDefault=\"{onSubmit}\">\n    ...\n  </form>\n</Svormik>\n```\n\n## `setValues`\n\nA function that accepts an object as an argument that contains the keys of status names and status value as the value. Updates the **formValues** store.\n\n- `setValues: ({fieldName: value}) => void`\n\n# Context\n\nIf using custom input components, the components can subscribe to the **formProps** derived store and have access to the **actions** methods via context.\n\n```html\n<script>\n  //MyForm.svelte\n  import {Svormik} from 'svormik';\n  import CustomInput from './CustomInput.svelte';\n</script>\n\n<Svormik>\n  <form>\n    <CustomInput name=\"fancyInput\" />\n  </form>\n</Svormik>\n```\n\n```html\n<script>\n  //CustomInput.svelte\n  import {getContext} from 'svelte';\n\n  export let name;\n\n  let {formProps, actions} = getContext('formCtx');\n  let errors;\n\n  $: errors = $formProps.errors; // subscribe to errors changes\n</script>\n\n<label>\n  Some Label\n  <input {name} />\n  {#if errors && errors[name] && errors[name].length}\n  <span>{errors[name][0]}</span>\n  {/if}\n</label>\n```\n\n# `let:`\n\nThe following are available to the **let** directive:\n\n- `handleSubmit`\n- `formProps`\n- `actions`\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 1],
		[3603, 9],
		[3610, 9],
		[3624, 1],
		[3631, 1],
		[3645, 11],
		[3659, 1],
		[3666, 9],
		[3673, 1],
		[3680, 1],
		[3708, 2],
		[3722, 1],
		[3729, 1],
		[3757, 2],
		[3764, 4],
		[3771, 8],
		[3778, 4],
		[3785, 1],
		[3792, 2],
		[3799, 1],
		[3806, 2],
		[3834, 1],
		[3841, 2],
		[3848, 13],
		[3855, 2],
		[3862, 42],
		[3883, 2],
		[3890, 8],
		[3904, 1],
		[3925, 1],
		[3932, 1],
		[3946, 1],
		[3953, 1],
		[3960, 2],
		[3967, 2],
		[3974, 1],
		[3981, 1],
		[3995, 1],
		[4016, 4],
		[4023, 3],
		[4030, 9],
		[4037, 12],
		[4044, 5],
		[4051, 1],
		[4058, 1],
		[4065, 1],
		[4093, 9],
		[4100, 10],
		[4107, 4],
		[4114, 9],
		[4121, 31],
		[4128, 5],
		[4135, 6]
	],
	"esm": false,
	"cjs": true
}
