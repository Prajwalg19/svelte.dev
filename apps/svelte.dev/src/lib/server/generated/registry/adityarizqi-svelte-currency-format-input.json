{
	"name": "@adityarizqi/svelte-currency-format-input",
	"description": "Format numerical entries into localized currency formats.",
	"repo_url": "https://github.com/Adityarizqi7/svelte-currency-format-input",
	"authors": ["adityarizqi"],
	"homepage": "https://svelte-currency-format-input.netlify.app",
	"downloads": 11,
	"updated": "2024-01-15T09:01:16.339Z",
	"tags": ["ui"],
	"github_stars": 1,
	"typescript": true,
	"version": "1.1.3",
	"svelte_range": "^4.2.8",
	"kit_range": "^1.26.0",
	"last_rune_check_version": "1.1.3",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@adityarizqi/svelte-currency-format-input",
				"version": "1.1.3",
				"size": 19766
			},
			{
				"name": "or",
				"version": "0.2.0"
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"legacy_svelte": true,
	"readme": "# svelte-currency-format-input\r\n\r\nAn interactive form input that instantly transforms numerical entries into localized currency formats while you type\r\n\r\n---\r\n\r\n## Features\r\n\r\n- Utilizes [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) to incorporate **localization** for currency denominations and implements input masking.\r\n- Formats values can be **positive** and **negative**.\r\n- Basic default styling, simple to [customize](#styling).\r\n- Simple [PROPS](#props).\r\n\r\n## Usage\r\n\r\n```bash\r\nnpm install @adityarizqi/svelte-currency-format-input --save\r\n\r\nor if you are using yarn\r\n\r\nyarn add @adityarizqi/svelte-currency-format-input\r\n```\r\n\r\nThen you need to import this library into your application.\r\n\r\n\r\n```html\r\n<script lang=\"ts\">\r\n  import CurrencyFormatInput from '@adityarizqi7/svelte-currency-format-input';\r\n</script>\r\n\r\n<CurrencyFormatInput name=\"total\" placeholder='Your Placeholder' value={666} locale=\"id-ID\" currency=\"IDR\" />\r\n```\r\n\r\n## How it works\r\n\r\nUpon form submission, you obtain either unformatted or formatted values from two `<input />` elements. This is essentially the underlying structure of `<CurrencyFormatInput />`:\r\n\r\n```html\r\n<div class=\"currencyInput\">\r\n  <!-- Unformatted value -->\r\n  <input\r\n    class=\"currencyInput__unformatted\"\r\n    type=\"hidden\"\r\n    name=\"total\"\r\n    value=\"-322.76\"\r\n  />\r\n\r\n  <!-- Formatted value -->\r\n  <input\r\n    class=\"currencyInput__formatted\"\r\n    type=\"text\"\r\n    name=\"formatted-total\"\r\n    value=\"â‚¬ -322,76\"\r\n  />\r\n</div>\r\n```\r\n\r\n## PROPS\r\n\r\nOption            | Type            | Default     | Description |\r\n----------------- | --------------- | ----------- | ----------- |\r\nvalue             | `number`        | `undefined` | Initial value. If left `undefined` a formatted value of `0` is visible as a placeholder |\r\nlocale            | `string`        | `en-US`     | Overrides default locale. [Examples](https://gist.github.com/ncreated/9934896) |\r\ncurrency          | `string`        | `USD`       | Overrides default currency. [Examples](https://www.xe.com/symbols/) |\r\nname              | `string`        | `total`     | Applies the name to the [input fields](#how-it-works) for _unformatted_ (e.g `[name=total]`) and _formatted_ (e.g. `[name=formatted-total]`) values |\r\nfractionDigits    | `number`        | `2`         | Sets `maximumFractionDigits` in [`Intl.NumberFormat()` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#minimumfractiondigits) used for formatting the currency. Supported digits: `0` to `20` |\r\nplaceholder       | `string` `number` `null` | `0`         | A `string` will override the default placeholder. A `number` will override  it by formatting it to the set currency. Setting it to `null` will not show a placeholder   |\r\ninputClasses      | `object`        | [See below](#Styling)         | Selectively overrides any class names passed |\r\nrequired          | `boolean`       | `false`     | Marks the inputs as required |\r\ndisabled          | `boolean`       | `false`     | Marks the inputs as disabled |\r\nisZeroNullish | `boolean`       | `false`      | If `true` and when the value is `0`, it will override the default placeholder and render the formatted value in the field like any other value.\r\nautocomplete      | `string`        | `undefined` | Sets the autocomplete attribute. Accepts any valid HTML [autocomplete attribute values](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#values) |\r\nisNegativeInput | `boolean`       | `true`      | If `false`, forces formatting only to positive values and ignores `--positive` and `--negative` styling modifiers                                   |\r\nonValueChange     | `Callback`      | `undefined` | Runs a callback function after the value changes |\r\n\r\n## Styling Component\r\n\r\nThere are two methods for customizing the styling of the input:\r\n1. Providing your own CSS classes\r\n2. Modifying the styles by overriding the existing class names\r\n\r\nYou have the ability to **override any of the class names** by passing an object to `inputClasses` that includes **one or more** of these properties:\r\n\r\n```typescript\r\ninterface InputClasses {\r\n  wrapper?: string; // The <div> encapsulates the two <input> elements.\r\n  unformatted?: string; // The <input type=\"hidden\"> element encapsulates the unformatted value.\r\n  formatted?: string; // The <input type=\"text\"> element encapsulates the formatted value.\r\n  formattedPositive?: string; // Class applied when the formatted input represents a positive value.\r\n  formattedNegative?: string; // Class applied when the formatted input represents a negative value.\r\n  formattedZero?: string; // Class applied when the formatted input represents a zero value.\r\n}\r\n```\r\n\r\nYou can usage (with [Tailwind CSS](https://tailwindcss.com/) as an example):\r\n\r\n```html\r\n<CurrencyFormatInput name=\"total\" value=\"{322.76}\" inputClasses={\r\n  { \r\n    wrapper: \"py-1 text-sm text-gray-800 border border-gray-300 rounded-md\",\r\n    formatted: 'text-gray-800 border-0 bg-white max-w-full',\r\n    formattedPositive: 'text-green-700',\r\n    formattedNegative: 'text-red-700'\r\n  }\r\n} />\r\n```\r\n\r\nAlternatively you can **write your own CSS** by overriding the [default styles](https://github.com/Adityarizqi7/svelte-currency-format-input/blob/main/src/lib/CurrencyFormatInput.svelte) which use [BEM naming conventions](https://getbem.com/naming/). To do so apply your styles as shown below:\r\n\r\n```html\r\n<div class=\"my-currency-input\">\r\n  <CurrencyFormatInput name=\"total\" value=\"{420.69}\" />\r\n</div>\r\n\r\n<style>\r\n  /* Container */\r\n  div.my-currency-input :global(div.currencyInput) { /* ... */ }\r\n\r\n  /* Formatted input */\r\n  div.my-currency-input :global(input.currencyInput__formatted) { /* ... */ }\r\n\r\n  /* Formatted input when the it's disabled */\r\n  div.my-currency-input :global(input.currencyInput__formatted:disabled) { /* ... */ }\r\n\r\n  /* Formatted input when the value is zero */\r\n  div.my-currency-input :global(input.currencyInput__formatted--zero) { /* ... */ }\r\n\r\n  /* Formatted input when the value is positive */\r\n  div.my-currency-input :global(input.currencyInput__formatted--positive) { /* ... */ }\r\n\r\n  /* Formatted input when the value is negative */\r\n  div.my-currency-input :global(input.currencyInput__formatted--negative) { /* ... */ }\r\n</style>\r\n```\r\n\r\n## Contributing\r\n\r\nHere are ways you can contribute:\r\n\r\n- Discovered a bug? Create a [new issue](https://github.com/Adityarizqi7/svelte-currency-format-input/issues/new)\r\n- Provide comments or upvote  [existing issues](https://github.com/Adityarizqi7/svelte-currency-format-input/issues)\r\n- Submit a [pull request](https://github.com/Adityarizqi7/svelte-currency-format-input/pulls)\r\n\r\n## Developing\r\n\r\nThis package was generated with [SvelteKit](https://kit.svelte.dev/). Install dependencies with `npm install`, then start a development server:\r\n\r\n```bash\r\nnpm run dev\r\n\r\n# or start the server and open the app in a new browser tab\r\nnpm run dev -- --open\r\n```\r\n\r\n#### Integration tests\r\n\r\nThe component is tested using [Playwright](https://playwright.dev/).\r\nYou can find the tests in [`tests/svelte-currency-format-input.test.ts`](https://github.com/Adityarizqi7/svelte-currency-format-input/blob/main/tests/svelte-currency-format-input.test.ts)\r\n\r\nTo run all tests on **Chromium**, **Firefox** and **Webkit**:\r\n```bash\r\nnpm run test\r\n```\r\n\r\nTo run all tests on a specific browser (e.g. **Webkit**):\r\n```bash\r\nnpx playwright test --project=webkit\r\n```\r\n\r\nAdditional debug commands can be found on [Playwright's documentation](https://playwright.dev/docs/test-cli).\r\n",
	"downloads_history": [
		[3659, 212],
		[3666, 133],
		[3673, 13],
		[3680, 20],
		[3687, 22],
		[3694, 9],
		[3701, 6],
		[3708, 9],
		[3715, 8],
		[3722, 2],
		[3729, 4],
		[3736, 12],
		[3743, 11],
		[3750, 1],
		[3764, 8],
		[3771, 1],
		[3778, 9],
		[3785, 2],
		[3792, 4],
		[3799, 2],
		[3806, 4],
		[3813, 8],
		[3820, 4],
		[3827, 2],
		[3834, 27],
		[3841, 5],
		[3848, 4],
		[3855, 7],
		[3862, 11],
		[3869, 4],
		[3876, 15],
		[3883, 2],
		[3890, 14],
		[3897, 2],
		[3904, 6],
		[3911, 7],
		[3918, 10],
		[3925, 6],
		[3932, 4],
		[3939, 6],
		[3946, 3],
		[3953, 1],
		[3960, 4],
		[3967, 9],
		[3974, 5],
		[3981, 36],
		[3988, 10],
		[4002, 10],
		[4009, 3],
		[4016, 5],
		[4023, 4],
		[4030, 11],
		[4037, 11],
		[4044, 52],
		[4051, 25],
		[4058, 45],
		[4065, 67],
		[4072, 21],
		[4079, 59],
		[4086, 44],
		[4093, 46],
		[4100, 57],
		[4107, 34],
		[4114, 11],
		[4121, 65],
		[4128, 25]
	],
	"esm": true,
	"cjs": false
}
