{
	"name": "svelte-hash",
	"description": "Manages URL hash/fragment in Svelte applications.",
	"repo_url": "https://github.com/Bellisario/svelte-hash",
	"authors": ["bellisario"],
	"homepage": "https://github.com/Bellisario/hostname-patcher#readme",
	"downloads": 12,
	"updated": "2024-06-29T21:23:12.646Z",
	"tags": ["router"],
	"github_stars": 0,
	"typescript": true,
	"version": "1.0.1",
	"svelte_range": ">= 4.0.0",
	"last_rune_check_version": "1.0.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-hash",
				"version": "1.0.1",
				"size": 41817
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Svelte Hash\n\n> Easy URL hash management for Svelte.\n\n`svelte-hash` provides a simple way to manage URL hash/fragment in Svelte.\n\n> [!NOTE]\n> This library is client-side only, meaning SvelteKit (SSR) is not supported.\n\n## Installation\n\n```bash\n# Bun\nbun i -D svelte-hash\n\n# NPM\nnpm i -D svelte-hash\n\n# Yarn\nyarn add -D svelte-hash\n\n# PNPM\npnpm add -D svelte-hash\n```\n\n## Usage\n\n> [!TIP]\n> It's really suggested to have a look to [these interactive examples](https://svelte-hash.deno.dev) to test the library and understand the functionality (there you can see hash/fragment updates in the URL).\n\nFirst of all, create and export a new `hash` store instance:\n\n```ts\n// store.ts\nimport { createHashStore } from 'svelte-hash'\n\ninterface Hash {\n\tfoo: string\n\tbar: string\n}\n\nexport const hash = createHashStore<Hash>()\n```\n\n> [!NOTE]\n>\n> - Explicitly defining the type of the hash is optional, but extremely suggested as it provides type checking and autocompletion\n> - Currently only string values are supported: this might change in the future with `v2`\n> - Only one hash store can be initialized in the same project: multiple hash stores initialization will throw an error\n\nThen, you can use the `hash` store in your components:\n\n```svelte\n<!-- App.svelte -->\n<script>\n\timport { hash } from './store.ts'\n\n\t// Prevent pushing to browser history every change with a \"proxy\" variable\n\t// Every hash key could also not exist, so we need to provide a default value\n\tlet valueProxy = hash.foo || ''\n</script>\n\n<!-- The form will update the hash value only when submitted -->\n<!-- result (on submit) will be: <URL>#foo={valueProxy} -->\n<form on:submit|preventDefault={() => hash.foo = valueProxy}>\n\t<input type=\"text\" bind:value={valueProxy} />\n\t<button type=\"submit\">Submit</button>\n</form>\n<p>\n```\n\nTo delete a hash key from the URL, you can set it to a _falsy_ value:\n\n```ts\nimport { hash } from './store.ts'\n\nhash.foo = null\n// or\nhash.foo = undefined\n// or\nhash.foo = ''\n```\n\n## Behind the scenes\n\nThe reason I created this library was to accomplish a simple URL hash/fragment management for my Svelte music player, [Musicale](https://github.com/Bellisario/musicale) _(you should really check it out!)_.\n\nI originally created the implementation directly in that project, but then I decided to extract it and make it a standalone library for everyone to use.\n\n### Why do I call URL fragment \"hash\"?\n\nOn the browser, to access the URL fragment you use `window.location.hash`, so I decided to take that for the library name.\n\n## Contributing\n\nWe :heart: contributions!\\\nFeel free to open an [issue](https://github.com/Bellisario/svelte-hash/issues) or a [pull request](https://github.com/Bellisario/svelte-hash/pulls) but follow [Contributing Guidelines](https://github.com/Bellisario/svelte-hash/blob/main/CONTRIBUTING.md).\n\n> If you don't know where to start, check out the [help wanted issues](https://github.com/Bellisario/svelte-hash/labels/help%20wanted)!\n\n## License\n\nGPL-3.0 License [here](https://github.com/Bellisario/svelte-hash/blob/main/LICENSE).\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3820, 55],
		[3827, 77],
		[3834, 14],
		[3841, 17],
		[3848, 9],
		[3855, 8],
		[3862, 15],
		[3869, 18],
		[3876, 9],
		[3883, 4],
		[3890, 21],
		[3897, 9],
		[3904, 16],
		[3911, 13],
		[3918, 6],
		[3925, 5],
		[3932, 2],
		[3939, 11],
		[3946, 9],
		[3953, 8],
		[3960, 6],
		[3967, 14],
		[3974, 15],
		[3981, 11],
		[3988, 13],
		[3995, 10],
		[4002, 8],
		[4009, 11],
		[4016, 12],
		[4023, 9],
		[4030, 10],
		[4037, 15],
		[4044, 11],
		[4051, 5],
		[4058, 5],
		[4065, 8],
		[4072, 15],
		[4079, 6],
		[4086, 10],
		[4093, 8],
		[4100, 10],
		[4107, 13],
		[4114, 12],
		[4121, 8],
		[4128, 14]
	],
	"esm": true,
	"cjs": false
}
