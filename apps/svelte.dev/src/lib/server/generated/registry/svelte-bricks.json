{
	"name": "svelte-bricks",
	"description": "Implement masonry layout without column balancing.",
	"repo_url": "https://github.com/janosh/svelte-bricks",
	"authors": ["janosh"],
	"homepage": "https://janosh.github.io/svelte-bricks",
	"downloads": 2345,
	"updated": "2025-04-18T14:30:52.605Z",
	"tags": ["ui"],
	"github_stars": 119,
	"typescript": true,
	"version": "0.3.2",
	"svelte_range": "^5.27.3",
	"kit_range": "^2.20.7",
	"last_rune_check_version": "0.3.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-bricks",
				"version": "0.3.2",
				"size": 11814
			},
			{
				"name": "svelte",
				"version": "5.28.2",
				"size": 2426223
			},
			{
				"name": "@ampproject/remapping",
				"version": "2.3.0",
				"size": 78946
			},
			{
				"name": "@jridgewell/gen-mapping",
				"version": "0.3.8",
				"size": 81596
			},
			{
				"name": "@jridgewell/set-array",
				"version": "1.2.1",
				"size": 17945
			},
			{
				"name": "@jridgewell/sourcemap-codec",
				"version": "1.5.0",
				"size": 112815
			},
			{
				"name": "@jridgewell/trace-mapping",
				"version": "0.3.25",
				"size": 169330
			},
			{
				"name": "@jridgewell/resolve-uri",
				"version": "3.1.2",
				"size": 53153
			},
			{
				"name": "@types/estree",
				"version": "1.0.7",
				"size": 26147
			},
			{
				"name": "acorn",
				"version": "8.14.1",
				"size": 547473
			},
			{
				"name": "@sveltejs/acorn-typescript",
				"version": "1.0.5",
				"size": 197476
			},
			{
				"name": "aria-query",
				"version": "5.3.2",
				"size": 176114
			},
			{
				"name": "axobject-query",
				"version": "4.1.0",
				"size": 110878
			},
			{
				"name": "clsx",
				"version": "2.1.1",
				"size": 8555
			},
			{
				"name": "esm-env",
				"version": "1.2.2",
				"size": 3784
			},
			{
				"name": "esrap",
				"version": "1.4.6",
				"size": 50818
			},
			{
				"name": "is-reference",
				"version": "3.0.3",
				"size": 3953
			},
			{
				"name": "locate-character",
				"version": "3.0.0",
				"size": 5325
			},
			{
				"name": "magic-string",
				"version": "0.30.17",
				"size": 467464
			},
			{
				"name": "zimmerframe",
				"version": "1.1.2",
				"size": 12266
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[3, 4],
			[3, 5],
			[3, 6],
			[6, 7],
			[6, 5],
			[2, 6],
			[1, 5],
			[1, 8],
			[1, 9],
			[1, 10],
			[1, 11],
			[1, 12],
			[1, 13],
			[1, 14],
			[1, 15],
			[15, 5],
			[1, 16],
			[16, 8],
			[1, 17],
			[1, 18],
			[18, 5],
			[1, 19]
		],
		"circular": []
	},
	"readme": "<div class=\"hide-in-docs\">\n\n<h1 align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/janosh/svelte-bricks/main/static/favicon.svg\" alt=\"Logo\" height=60>\n  <br>&ensp;Svelte Bricks\n</h1>\n\n<h4 align=\"center\">\n\n[![Tests](https://github.com/janosh/svelte-bricks/actions/workflows/test.yml/badge.svg)](https://github.com/janosh/svelte-bricks/actions/workflows/test.yml)\n[![NPM version](https://img.shields.io/npm/v/svelte-bricks?color=blue&logo=NPM)](https://npmjs.com/package/svelte-bricks)\n[![GitHub Pages](https://github.com/janosh/svelte-bricks/actions/workflows/gh-pages.yml/badge.svg)](https://github.com/janosh/svelte-bricks/actions/workflows/gh-pages.yml)\n[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/janosh/svelte-bricks/main.svg)](https://results.pre-commit.ci/latest/github/janosh/svelte-bricks/main)\n[![Open in StackBlitz](https://img.shields.io/badge/Open%20in-StackBlitz-darkblue?logo=stackblitz)](https://stackblitz.com/github/janosh/svelte-bricks)\n\n</h4>\n\nNaive implementation in Svelte without column balancing. **[Live demo](https://janosh.github.io/svelte-bricks)**\n\n</div>\n\n## Installation\n\n```sh\nnpm install --dev svelte-bricks\n```\n\n## Usage\n\nThe kitchen sink for this component looks something like this:\n\n```svelte\n<script>\n  import Masonry from 'svelte-bricks'\n\n  let nItems = $state(30);\n  let items = $derived([...Array(nItems).keys()])\n\n  let [minColWidth, maxColWidth, gap] = [200, 800, 20]\n  let width = $state(0), height = $state(0)\n</script>\n\nMasonry size: <span>{width}px</span> &times; <span>{height}px</span> (w &times; h)\n\n<Masonry\n  {items}\n  {minColWidth}\n  {maxColWidth}\n  {gap}\n  style=\"padding: 20px;\"\n  columnStyle=\"background-color: rgba(0, 0, 0, 0.1);\"\n  bind:masonryWidth={width}\n  bind:masonryHeight={height}\n>\n  {#snippet children({ item })}\n    <Some {item} />\n  {/snippet}\n</Masonry>\n```\n\n**Note**: If `items` is an array of objects, this component tries to access an `id` property on each item. This value is used to tell items apart in the keyed `{#each}` block that creates the masonry layout. Without it, Svelte could not avoid duplicates when new items are added or existing ones rearranged. Read the [Svelte docs](https://svelte.dev/tutorial/keyed-each-blocks) for details. To change the name of the identifier key, pass `idKey=\"some-uniq-key`. Or pass a function `getId = (item: Item) => string | number` that maps items to unique IDs.\n\n**Hint**: Balanced columns can be achieved even with this simple implementation if masonry items are allowed to stretch to the column height.\n\n## Props\n\n`Masonry.svelte` expects an array of `items` as well as a `<slot />` component used to render each of the `items`. The array can contain whatever data (objects, strings, numbers) as long as the slot component knows how to handle it.\n\nAdditional optional props are:\n\n1. ```ts\n   animate: boolean = true\n   ```\n\n   Whether to [FLIP-animate](https://svelte.dev/tutorial/animate) masonry items when viewport resizing or other events cause `items` to rearrange.\n\n1. ```ts\n   calcCols = (\n     masonryWidth: number,\n     minColWidth: number,\n     gap: number,\n   ): number => {\n     return Math.min(\n       items.length,\n       Math.floor((masonryWidth + gap) / (minColWidth + gap)) || 1,\n     )\n   }\n   ```\n\n   Function used to compute the number of columns based on the masonry width, minimum column width and gap.\n\n1. ```ts\n   class: string = ``\n   ```\n\n   Applies to the outer `div` wrapping all masonry columns. For use with CSS frameworks like Tailwind.\n\n1. ```ts\n   columnClass: string = ``\n   ```\n\n   Applies to each column `div`.\n\n1. ```ts\n   duration: number = 200\n   ```\n\n   Transition duration in milli seconds when masonry items are rearranged or added/removed. Set to 0 to disable transitions.\n\n1. ```ts\n   gap: number = 20\n   ```\n\n   Gap between columns and items within each column in `px`.\n\n1. ```ts\n   getId = (item: Item): string | number => {\n     if (typeof item === `number`) return item\n     if (typeof item === `string`) return item\n     return item[idKey]\n   }\n   ```\n\n   Custom function that maps masonry items to unique IDs of type `string` or `number`.\n\n1. ```ts\n   idKey: string = `id`\n   ```\n\n   Name of the attribute to use as identifier if items are objects.\n\n1. ```ts\n   items: Item[]\n   ```\n\n   The only required prop are the list of items to render where `Item = $$Generic` is a generic type which usually will be `object` but can also be simple types `string` or `number`.\n\n1. ```ts\n   masonryHeight: number = 0\n   ```\n\n   The masonry `div`s height in `px`.\n\n1. ```ts\n   masonryWidth: number = 0\n   ```\n\n   The masonry `div`s width in `px`.\n\n1. ```ts\n   maxColWidth: number = 500\n   ```\n\n   Maximum column width in `px`.\n\n1. ```ts\n   minColWidth: number = 330\n   ```\n\n   Minimum column width in `px`.\n\n1. ```ts\n   style: string = ``\n   ```\n\n   Inline styles that will be applied to the top-level `div.masonry`.\n\n## Styling\n\nBesides inline CSS which you can apply through the `style` prop, the following `:global()` CSS selectors can be used for fine-grained control of wrapper and column styles:\n\n```css\n:global(div.masonry) {\n  /* top-level wrapper div */\n}\n:global(div.masonry div.col) {\n  /* each column in the masonry layout */\n}\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 169],
		[3596, 454],
		[3603, 581],
		[3610, 308],
		[3617, 450],
		[3624, 427],
		[3631, 342],
		[3638, 356],
		[3645, 310],
		[3652, 239],
		[3659, 213],
		[3666, 272],
		[3673, 348],
		[3680, 391],
		[3687, 333],
		[3694, 322],
		[3701, 575],
		[3708, 415],
		[3715, 434],
		[3722, 421],
		[3729, 469],
		[3736, 375],
		[3743, 370],
		[3750, 598],
		[3757, 668],
		[3764, 381],
		[3771, 466],
		[3778, 469],
		[3785, 509],
		[3792, 472],
		[3799, 680],
		[3806, 538],
		[3813, 524],
		[3820, 775],
		[3827, 836],
		[3834, 488],
		[3841, 461],
		[3848, 513],
		[3855, 906],
		[3862, 412],
		[3869, 774],
		[3876, 575],
		[3883, 785],
		[3890, 523],
		[3897, 502],
		[3904, 892],
		[3911, 666],
		[3918, 1162],
		[3925, 757],
		[3932, 923],
		[3939, 864],
		[3946, 924],
		[3953, 1115],
		[3960, 680],
		[3967, 664],
		[3974, 754],
		[3981, 678],
		[3988, 789],
		[3995, 953],
		[4002, 915],
		[4009, 708],
		[4016, 1255],
		[4023, 2076],
		[4030, 4828],
		[4037, 5258],
		[4044, 4843],
		[4051, 2265],
		[4058, 2215],
		[4065, 2455],
		[4072, 2323],
		[4079, 2336],
		[4086, 1637],
		[4093, 792],
		[4100, 1911],
		[4107, 1955],
		[4114, 2345],
		[4121, 1935],
		[4128, 728]
	]
}
