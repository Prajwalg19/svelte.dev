{
	"name": "use-vest",
	"description": "Validate forms in Svelte using Vest, showing errors.",
	"repo_url": "https://github.com/enyo/use-vest",
	"authors": ["enyo"],
	"homepage": "https://github.com/enyo/use-vest",
	"downloads": 8,
	"updated": "2022-06-01T15:49:37.461Z",
	"tags": ["miscellaneous"],
	"github_stars": 10,
	"typescript": true,
	"version": "0.2.5",
	"svelte_range": "3.x",
	"last_rune_check_version": "0.2.5",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "use-vest",
				"version": "0.2.5",
				"size": 15034
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# use-vest\n\n[![Tests](https://github.com/enyo/use-vest/actions/workflows/ci.yml/badge.svg)](https://github.com/enyo/use-vest/actions/workflows/ci.yml)\n[![npm version](https://badge.fury.io/js/use-vest.svg)](https://badge.fury.io/js/use-vest)\n![TypeScript](https://badgen.net/badge/icon/typescript?icon=typescript&label)\n\nA Svelte action for Vest, that makes it easy to validate forms and show errors\nwhen necessary â€” built with TypeScript.\n\nVest, in their own words is a \"Declarative validations framework inspired by\nunit testing libraries\".\n\nThis svelte action aims to make it easy to use vest in your svelte forms to\nvalidate your data and show errors. It will also wrap your call that submits the\ndata to your server and handle any errors that might happen there as well.\n\nSee it in action in this [Svelte\nREPL](https://svelte.dev/repl/7094c5603d02477c8333ad42fc73c3d1?version=3.42.6)\nor look at the example in [the example](./example/).\n\n## Installation\n\n```bash\nnpm install --save-prod use-vest\n# or pnpmpnp\npnpm add use-vest\n# or whatever package manager you like\n```\n\n## Usage\n\nLet's assume you have finished [writing your\nsuite](https://vestjs.dev/docs/writing_your_suite/vests_suite) and have exported\nthe TypeScript type for your `FormData` (optional).\n\nTo see how you would incorporate `use-vest` in your form, look at the\n[Form.svelte](./example/Form.svelte) file.\n\n> **NOTE**: Instead of posting all code snippets directly in this README, I\n> decided to use an `example/` directory and link to it. This way the example\n> can be type checked, and is actually the source for the unit tests so there\n> is no risk of the documentation being outdated.\n\nAs you can see, `useVest` returns a few stores that hold information about the\ncurrent state of your form.\n\n**But how do the individual input fields get their validation status?**\n\n`useVest` sets up a [Svelte context](https://svelte.dev/tutorial/context-api)\n(that is accessible to all children) where everything necessary to display the\ninput field state is stored.\n\nAny input field inside the form simply uses [`getVestContext()`](./src/context.ts) to get the\ncorrect context object, and this object will contain the validation result, as\nwell as information about the form in general.\n\nTo see how you can use that context, look at\n[Input.svelte](./example/Input.svelte) and\n[InputError.svelte](./example/InputError.svelte).\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 16],
		[3603, 5],
		[3610, 13],
		[3624, 1],
		[3631, 7],
		[3638, 16],
		[3645, 11],
		[3652, 5],
		[3659, 4],
		[3666, 17],
		[3673, 17],
		[3680, 4],
		[3687, 3],
		[3694, 3],
		[3701, 2],
		[3708, 17],
		[3715, 1],
		[3722, 3],
		[3729, 1],
		[3736, 13],
		[3743, 2],
		[3750, 2],
		[3757, 1],
		[3764, 1],
		[3771, 2],
		[3778, 14],
		[3785, 1],
		[3792, 5],
		[3799, 12],
		[3806, 4],
		[3813, 1],
		[3820, 3],
		[3827, 1],
		[3834, 4],
		[3841, 1],
		[3848, 4],
		[3855, 61],
		[3862, 3],
		[3869, 3],
		[3876, 3],
		[3883, 1],
		[3890, 13],
		[3897, 2],
		[3904, 3],
		[3911, 2],
		[3918, 3],
		[3925, 2],
		[3932, 4],
		[3939, 3],
		[3946, 2],
		[3953, 2],
		[3960, 2],
		[3967, 2],
		[3974, 7],
		[3981, 1],
		[3988, 1],
		[3995, 7],
		[4002, 3],
		[4009, 22],
		[4016, 7],
		[4023, 1],
		[4030, 28],
		[4037, 14],
		[4044, 13],
		[4051, 5],
		[4058, 3],
		[4065, 4],
		[4072, 1],
		[4079, 1],
		[4086, 1],
		[4093, 2],
		[4100, 63],
		[4107, 2],
		[4114, 8],
		[4121, 20],
		[4128, 7],
		[4135, 5]
	],
	"esm": true,
	"cjs": false
}
