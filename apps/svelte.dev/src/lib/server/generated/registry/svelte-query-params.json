{
	"name": "svelte-query-params",
	"description": "Manage query parameters reactively in Svelte and SvelteKit.",
	"repo_url": "https://github.com/Ernxst/svelte-query-params",
	"authors": ["ernxst"],
	"homepage": "https://github.com/Ernxst/svelte-query-params",
	"downloads": 127,
	"updated": "2025-02-24T18:47:06.870Z",
	"tags": ["router"],
	"github_stars": 13,
	"typescript": true,
	"version": "0.2.5",
	"svelte_range": "^5.0.0-next.169",
	"kit_range": "^2.0.0",
	"last_rune_check_version": "0.2.5",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-query-params",
				"version": "0.2.5",
				"size": 55338
			},
			{
				"name": "@sveltejs/kit",
				"version": "2.20.8",
				"size": 820819
			},
			{
				"name": "@types/cookie",
				"version": "0.6.0",
				"size": 10073
			},
			{
				"name": "cookie",
				"version": "0.6.0",
				"size": 23736
			},
			{
				"name": "devalue",
				"version": "5.1.1",
				"size": 31833
			},
			{
				"name": "esm-env",
				"version": "1.2.2",
				"size": 3784
			},
			{
				"name": "import-meta-resolve",
				"version": "4.1.0",
				"size": 77354
			},
			{
				"name": "kleur",
				"version": "4.1.5",
				"size": 20250
			},
			{
				"name": "magic-string",
				"version": "0.30.17",
				"size": 467464
			},
			{
				"name": "@jridgewell/sourcemap-codec",
				"version": "1.5.0",
				"size": 112815
			},
			{
				"name": "mrmime",
				"version": "2.0.1",
				"size": 33008
			},
			{
				"name": "sade",
				"version": "1.8.1",
				"size": 31545
			},
			{
				"name": "mri",
				"version": "1.2.0",
				"size": 13261
			},
			{
				"name": "set-cookie-parser",
				"version": "2.7.1",
				"size": 16074
			},
			{
				"name": "sirv",
				"version": "3.0.1",
				"size": 21845
			},
			{
				"name": "@polka/url",
				"version": "1.0.0-next.29",
				"size": 4815
			},
			{
				"name": "totalist",
				"version": "3.0.1",
				"size": 7459
			},
			{
				"name": "svelte",
				"version": "5.28.2",
				"size": 2426223
			},
			{
				"name": "@ampproject/remapping",
				"version": "2.3.0",
				"size": 78946
			},
			{
				"name": "@jridgewell/gen-mapping",
				"version": "0.3.8",
				"size": 81596
			},
			{
				"name": "@jridgewell/set-array",
				"version": "1.2.1",
				"size": 17945
			},
			{
				"name": "@jridgewell/trace-mapping",
				"version": "0.3.25",
				"size": 169330
			},
			{
				"name": "@jridgewell/resolve-uri",
				"version": "3.1.2",
				"size": 53153
			},
			{
				"name": "@types/estree",
				"version": "1.0.7",
				"size": 26147
			},
			{
				"name": "acorn",
				"version": "8.14.1",
				"size": 547473
			},
			{
				"name": "@sveltejs/acorn-typescript",
				"version": "1.0.5",
				"size": 197476
			},
			{
				"name": "aria-query",
				"version": "5.3.2",
				"size": 176114
			},
			{
				"name": "axobject-query",
				"version": "4.1.0",
				"size": 110878
			},
			{
				"name": "clsx",
				"version": "2.1.1",
				"size": 8555
			},
			{
				"name": "esrap",
				"version": "1.4.6",
				"size": 50818
			},
			{
				"name": "is-reference",
				"version": "3.0.3",
				"size": 3953
			},
			{
				"name": "locate-character",
				"version": "3.0.0",
				"size": 5325
			},
			{
				"name": "zimmerframe",
				"version": "1.1.2",
				"size": 12266
			},
			{
				"name": "valibot",
				"version": "0.31.1",
				"size": 1144915
			},
			{
				"name": "zod",
				"version": "3.24.4",
				"size": 698927
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[1, 3],
			[1, 4],
			[1, 5],
			[1, 6],
			[1, 7],
			[1, 8],
			[8, 9],
			[1, 10],
			[1, 11],
			[11, 12],
			[1, 13],
			[1, 14],
			[14, 15],
			[14, 10],
			[14, 16],
			[0, 17],
			[17, 18],
			[18, 19],
			[19, 20],
			[19, 9],
			[19, 21],
			[21, 22],
			[21, 9],
			[18, 21],
			[17, 9],
			[17, 23],
			[17, 24],
			[17, 25],
			[17, 26],
			[17, 27],
			[17, 28],
			[17, 5],
			[17, 29],
			[29, 9],
			[17, 30],
			[30, 23],
			[17, 31],
			[17, 8],
			[17, 32],
			[0, 33],
			[0, 34]
		],
		"circular": []
	},
	"readme": "# Svelte Query Params\n\nThe easiest way to reactively manage query params in Svelte _and_ SvelteKit applications, both on the server and in the browser. Built for Svelte 5 and integrates with existing validation libraries to parse, coerce and transform query params into the data your application needs.\n\n## Installation\n\n[`svelte^5`](https://svelte-5-preview.vercel.app/docs/introduction) is required:\n\n```bash\nnpm install svelte-query-params svelte@next\n```\n\n```bash\npnpm install svelte-query-params svelte@next\n```\n\n```bash\nyarn add svelte-query-params svelte@next\n```\n\n```bash\nbun install svelte-query-params svelte@next\n```\n\n`svelte` requires a version of `5.0.0-next.169` or newer as it [renamed a public API](https://github.com/sveltejs/svelte/releases/tag/svelte%405.0.0-next.169) that this library uses.\n\nBy default, `svelte-query-params` uses [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) to handle interpreting the location string, which means it does not decode `null` and has limited handling of other more advanced URL parameter configurations. If you want access to those features, add a third-party library like query-string and tell [svelte-query-params to use it](#options).\n\n## Features\n\n- **Reactivity**: The library providies a reactive object that reflects the current state of query parameters.\n\n- **Browser and Server Support**: The utility is designed to work seamlessly in both browser and server environments.\n\n- **Customizable Validators**: Define validators for each query parameter to ensure proper data types and constraints.\n\n- **Debounced Updates**: Optionally debounce updates to query parameters to optimize performance.\n\n- **Event Handling**: Automatically handles `popstate` events for accurate synchronisation with browser history.\n\n- **Serialisation**: Control how query params are serialised into strings to the browser\n\n- **Multi-value params**: Supports multi-value query parameters with ease\n\n## Usage\n\nIn some lib file e.g., `src/lib/params.ts`:\n\n```javascript\nimport { createUseQueryParams } from \"svelte-query-params\";\n\n// Define validators for query parameters\nconst validators = {\n  page: (value) => typeof value === \"number\" && value > 0,\n  q: (value) => typeof value === \"string\",\n};\n\n// Create the hook\nexport const useQueryParams = createUseQueryParams(validators);\n```\n\n`createUseQueryParams` returns a hook, rather than the reactive object itself, as the reactive nature may be lost when exporting and importing these files.\n\nThen you can use this hook in your Svelte components:\n\n```svelte\n<script>\n  import { useQueryParams } from \"$lib/params\"; // Import assuming SvelteKit\n  import { page } from \"$app/stores\";\n\n  const [params, helpers] = useQueryParams($page.url); // You must pass the URL\n\n  // Access query parameters\n  console.log(params.page); // Current 'page' value\n  console.log(params.q); // Current 'q' value\n\n  // Set query parameters\n  params.page = 1;\n  params.q = \"example\";\n\n  // Raw query params from the browser, all as strings\n  helpers.raw;\n\n  // All query params, including those that were not set in schema\n  helpers.all;\n\n  // Readonly search string, with the ? prefix\n  helpers.search;\n\n  // Update all query parameters in bulk\n  helpers.update({ page: 2, q: 'shoes' });\n\n  // Apply partial updates to query params\n  helpers.update({ page: 3 });\n\n  // Remove query parameters\n  helpers.remove(\"q\");\n\n  // Unsubscribe from popstate events\n  helpers.unsubscribe();\n\n  // Access query keys\n  helpers.keys();\n\n  // Access entries:\n  helpers.entries();\n</script>\n\n<p>\n  Currently on page {params.page}, searching for {params.q}\n</p>\n\n<!-- Bind the 'q' query param to the input -->\n<input name=\"search\" bind:value={params.q}>\n```\n\n## Validators\n\n`svelte-query-params` supports [`zod`](https://github.com/colinhacks/zod), [`valibot`](https://github.com/colinhacks/zod) and function validators to define the schema for query params. Therefore, you do not need to learn an extra API for validating data.\n\nWhen using `zod` or `valibot`, you do not need to wrap your schema\nin zod `z.object({ ... })` or valibot `object`:\n\n```javascript\nimport { z } from \"zod\";\nimport { createUseQueryParams } from \"svelte-query-params\";\n\nconst useQueryParams = createUseQueryParams({\n  page: z.number(),\n  q: z.string()\n});\n```\n\nBut you can if you want.\n\nNote that it is possible to mix and match the schemas if needed:\n\n```javascript\nimport { z } from \"zod\";\nimport { string } from \"valibot\";\nimport { createUseQueryParams } from \"svelte-query-params\";\n\nconst useQueryParams = createUseQueryParams({\n  page: (value) => typeof value === \"number\" && value > 0,\n  sort: string(),\n  q: z.string()\n});\n```\n\n### Array Values\n\nWith a function validator, you may receive the param as either a string, an array of strings, or undefined. As a result, you must handle all three cases to support multi-value params:\n\n```javascript\nconst validators = {\n  categories: (value) => {\n    if (!value) return []\n    return Array.isArray(value) ? value : [value]\n  }\n}\n```\n\nWith Zod, you need to handle the case where there's either 0 or 1 query param value as this library will not infer this as an array beforehand. You must define your array parameter like:\n\n```javascript\nimport { z } from \"zod\";\n\nz.object({\n\tcategories: z\n\t\t.union([z.string().array(), z.string()])\n\t\t.default([])\n\t\t.transform((c) => (Array.isArray(c) ? c : [c])),\n})\n```\n\nThe union between a string and array of strings handles 1 or more query params; a default is set to the empty array to allow the parameter to be omitted from the URL and it's transformed at the end to convert the single value param into an array.\n\nIn the same manner, with Valibot:\n\n```javascript\nimport * as v from \"valibot\";\n\nv.object({\n\tcategories: v.pipe(\n\t\tv.optional(v.union([v.array(v.string()), v.string()]), []),\n\t\tv.transform((c) => (Array.isArray(c) ? c : [c]))\n\t),\n});\n```\n\n## Options\n\n`createUseQueryParams` takes an options object as the second argument, with the following properties:\n\n| Option      | Default           | Description                                                                                                                                                                                                                           |\n|-------------|-------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `windowObj` | `window`          | (Optional) Provide a custom implementation of [`window`](https://developer.mozilla.org/en-US/docs/Web/API/Window). It must implement: [`Window.prototype.location`](https://developer.mozilla.org/en-US/docs/Web/API/Window/location), [`Window.prototype.history`](https://developer.mozilla.org/en-US/docs/Web/API/Window/history), [`EventTarget.prototype.addEventListener`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener) and [`EventTarget.prototype.removeEventListener`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener). |\n| `debounce`  | `0`               | (Optional) The delay in milliseconds before updating the browser URL when the reactive object is updated. This is useful in situations where URL updates happen frequently, e.g., on every keystroke. Note that this only affects the browser URL - the reactive object will always update immediately.                                                          |\n| `serialise` | `JSON.stringify`  | (Optional) Control how query params are serialized to the URL. Note that this is **NOT** for encoding values into URI components - it serializes objects into strings, which will then be encoded internally. This is used for serialising complex objects like dates.                                                                                                                              |\n| `adapter`   | [`browser`](#browser)        | (Optional) Provide a custom adapter that controls fetching/updating query params on both the server and in the browser.                                                                                                    |\n\n### Example\n\n```javascript\nimport { createUseQueryParams } from \"svelte-query-params\";\n\nconst useQueryParams = createUseQueryParams({ ... }, { \n  ... // Options here\n})\n```\n\n## Adapters\n\nAs mentioned previously, adapters control how the URL is fetched and updated, both on the server and in the browser. As such, any adapter needs to implement the following interface:\n\n- `isBrowser: () => boolean` - Returns `true` when are in the browser, and `false` otherwise.\n\n- `server` - A property with the following methods:\n  - `save(search: string) => void` - Update the server URL. Note that the `search` string has the `?` prefixed.\n\n- `browser` - A property with the following methods:\n  - `read() => URL | Location` - Retrieve the browser URL.\n  - `save(search: string, hash: string) => void` - Update the browser URL. Note that the `search` string has the `?` prefixed and the `hash` string has the `#` prefixed.\n\nTo create your own adapter, you can import the `Adapter` type from `svelte-query-params/adapter` for intellisense, or use `defineAdapter` also exported by `svelte-query-params/adapter`:\n\n```typescript\nimport type { Adapter } from 'svelte-query-params/adapter';\nimport { defineAdapter } from 'svelte-query-params/adapter';\n\nexport const myAdapter: Adapter = { ... }\nexport const myAdapter = defineAdapter({ ... });\n```\n\n### Browser\n\nThis is the default adapter when no adapter is specified and can only be used\nin the browser i.e., fetching the URL on the browser returns an empty search string and hash and updating the query params on the server is a no-op.\n\n```javascript\nimport { createUseQueryParams } from \"svelte-query-params\";\nimport { browser } from \"svelte-query-params/adapters/browser\";\n\nconst useQueryParams = createUseQueryParams({ ... }, { \n  adapter: browser({ ... })  \n})\n```\n\n#### Browser Adapter Options\n\n- `windowObj`: (Optional) Provide a custom implementation of [`window`](https://developer.mozilla.org/en-US/docs/Web/API/Window). It must implement:\n  - [`Window.prototype.location`](https://developer.mozilla.org/en-US/docs/Web/API/Window/location)\n  - [`Window.prototype.history`](https://developer.mozilla.org/en-US/docs/Web/API/Window/history)\n  - [`EventTarget.prototype.addEventListener`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)\n  - [`EventTarget.prototype.removeEventListener`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener)\n\n- `replace`: (Optional) If this is `true`, any browser query updates will not create a new browser session history item, replacing the previous one instead. If `false`, a new item will always be added to the history.\n\n### SvelteKit\n\nFor use with SvelteKit, use this adapter, instead of the [`browser`](#browser) adapter for support for interacting with query params on the server.\n\n```javascript\nimport { createUseQueryParams } from \"svelte-query-params\";\nimport { sveltekit } from \"svelte-query-params/adapters/sveltekit\";\n\nconst useQueryParams = createUseQueryParams({ ... }, { \n  adapter: sveltekit({ ... })  \n})\n```\n\n#### SvelteKit Adapter Options\n\n- `replace`: (Optional) If this is `true`, any browser query updates will not create a new browser session history item, replacing the previous one instead. If `false`, a new item will always be added to the history.\n\n## Contributing\n\nSee [Contributing Guide](CONTRIBUTING.md).\n\n## License\n\nDistributed under the MIT License. See [`LICENSE`](LICENSE) for more information.\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3617, 162],
		[3624, 17],
		[3638, 59],
		[3645, 9],
		[3652, 4],
		[3659, 4],
		[3666, 13],
		[3673, 6],
		[3687, 1],
		[3694, 4],
		[3701, 1],
		[3708, 1],
		[3715, 4],
		[3722, 4],
		[3729, 3],
		[3736, 5],
		[3743, 4],
		[3750, 18],
		[3757, 7],
		[3764, 3],
		[3778, 2],
		[3785, 1],
		[3792, 4],
		[3799, 4],
		[3806, 4],
		[3813, 6],
		[3820, 118],
		[3827, 131],
		[3834, 89],
		[3841, 30],
		[3848, 19],
		[3855, 36],
		[3862, 16],
		[3869, 32],
		[3876, 30],
		[3883, 19],
		[3890, 40],
		[3897, 29],
		[3904, 17],
		[3911, 35],
		[3918, 20],
		[3925, 105],
		[3932, 24],
		[3939, 19],
		[3946, 25],
		[3953, 24],
		[3960, 18],
		[3967, 22],
		[3974, 7],
		[3981, 16],
		[3988, 40],
		[3995, 58],
		[4002, 21],
		[4009, 10],
		[4016, 44],
		[4023, 21],
		[4030, 11],
		[4037, 81],
		[4044, 28],
		[4051, 51],
		[4058, 47],
		[4065, 25],
		[4072, 138],
		[4079, 140],
		[4086, 42],
		[4093, 65],
		[4100, 70],
		[4107, 105],
		[4114, 127],
		[4121, 138],
		[4128, 83]
	],
	"esm": true,
	"cjs": true
}
