{
	"name": "svelte-intersection-observer-action",
	"description": "Observe element intersections using IntersectionObserver.",
	"repo_url": "https://github.com/captaincodeman/svelte-intersection-observer-action",
	"authors": ["captaincodeman"],
	"homepage": "https://captaincodeman.github.io/svelte-intersection-observer-action/",
	"downloads": 122,
	"updated": "2024-04-29T20:08:50.129Z",
	"tags": ["miscellaneous"],
	"github_stars": 22,
	"typescript": true,
	"version": "0.0.5",
	"svelte_range": "^4.2.15",
	"kit_range": "^2.0.0",
	"last_rune_check_version": "0.0.5",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-intersection-observer-action",
				"version": "0.0.5",
				"size": 4807
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-intersection-observer-action\n\nSvelte use:action for element position notifications using IntersectionObserver.\n\nSmall. Efficient. SSR Friendly.\n\n## Purpose\n\nYou need to know when an Element intersects another, as efficiently as possible, adding as few bytes to your project as possible.\n\nThe existing packages I looked at all had one or more issues:\n\n- Not SSR compatible. Likely developed before SvelteKit, when Svelte was primarily used for client-side components.\n- Used a Svelte Component as a wrapper. This adds unnecessary overhead and bytes to your bundle.\n- Dispatch events. IMO this is also unnecessary and wasted bytes. A callback passed in to an action is simpler and more efficient.\n- Create an IntersectionObserver instance per element. Slightly less efficient and a potential waste of runtime resources, especially if many elements need to be observed, vs using a single observer as intended.\n- Only provide simplified event information, not the [complete set of IntersectionObserverEntry properties](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n- Lack of TypeScript support.\n\nThis package is simple, fast and efficient. It is only 372 bytes minified, 243 bytes minified and gzipped.\n\n## Usage\n\nImport using your package manager of choice, e.g.:\n\n    pnpm i svelte-intersection-observer-action\n\n### Within a Svelte Component\n\nImport and apply to your HTML element. Provide the `callback` function that will be called with the `IntersectionObserverEntry` object. Optionally, provide additional `IntersectionObserver` options (`root`, `rootMargin`, and `thresholds`)\n\n```svelte\n<script lang=\"ts\">\n  import { intersect } from 'svelte-intersection-observer-action'\n\n  let ratio = 0\n  function callback(entry: IntersectionObserverEntry) {\n    ratio = entry.intersectionRatio\n  }\n\n  // important: re-use options object for caching\n  const options = { callback }\n</script>\n\n<div use:intersect={options}>\n  {ratio}\n</div>\n```\n\n### Within another Svelte `use:action`\n\nImport inside your `use:action` module:\n\n```ts\nimport { intersect } from 'svelte-intersection-observer-action'\n```\n\nApply to the element passed in to your `use:action` and call the `destroy` method when your action is destroyed:\n\n```ts\ntype Render = (ctx: CanvasRenderingContext2D) => void\n\nexport function lazyload(image: HTMLImageElement) {\n  // use intersect action to watch element in viewport\n  const callback = entry => loadImage()\n  const intersectManager = intersect(image, { callback })\n\n  // rest of use:action implementation\n  function loadImage() {}\n\n  return {\n    destroy() {\n      // remember to call destroy when this action is destroyed\n      intersectManager.destroy()\n    },\n  }\n}\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 8],
		[3596, 7],
		[3603, 12],
		[3610, 17],
		[3617, 11],
		[3624, 10],
		[3631, 14],
		[3638, 14],
		[3645, 14],
		[3652, 44],
		[3659, 19],
		[3666, 12],
		[3673, 73],
		[3680, 41],
		[3687, 95],
		[3694, 75],
		[3701, 49],
		[3708, 69],
		[3715, 34],
		[3722, 66],
		[3729, 90],
		[3736, 16],
		[3743, 62],
		[3750, 51],
		[3757, 28],
		[3764, 79],
		[3771, 92],
		[3778, 93],
		[3785, 32],
		[3792, 49],
		[3799, 62],
		[3806, 19],
		[3813, 84],
		[3820, 75],
		[3827, 89],
		[3834, 100],
		[3841, 192],
		[3848, 102],
		[3855, 139],
		[3862, 46],
		[3869, 60],
		[3876, 46],
		[3883, 103],
		[3890, 135],
		[3897, 133],
		[3904, 50],
		[3911, 87],
		[3918, 114],
		[3925, 134],
		[3932, 156],
		[3939, 98],
		[3946, 247],
		[3953, 119],
		[3960, 135],
		[3967, 128],
		[3974, 117],
		[3981, 125],
		[3988, 182],
		[3995, 94],
		[4002, 52],
		[4009, 49],
		[4016, 32],
		[4023, 100],
		[4030, 90],
		[4037, 104],
		[4044, 114],
		[4051, 73],
		[4058, 87],
		[4065, 215],
		[4072, 100],
		[4079, 84],
		[4086, 90],
		[4093, 54],
		[4100, 55],
		[4107, 110],
		[4114, 122],
		[4121, 184],
		[4128, 308]
	]
}
