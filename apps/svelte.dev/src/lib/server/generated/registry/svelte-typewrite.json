{
	"name": "svelte-typewrite",
	"description": "Create typewriter effects in Svelte components.",
	"repo_url": "https://github.com/satohshi/svelte-typewriter",
	"authors": ["satohshi"],
	"homepage": "https://satohshi.github.io/svelte-typewriter",
	"downloads": 16,
	"updated": "2025-03-21T14:31:58.002Z",
	"tags": ["ui"],
	"github_stars": 3,
	"typescript": true,
	"version": "3.0.0",
	"svelte_range": "^5.0.0",
	"kit_range": "^2.19.2",
	"last_rune_check_version": "3.0.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-typewrite",
				"version": "3.0.0",
				"size": 21702
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Svelte Typewriter\n\nTypewriter component for Svelte that actually \"types\" one character at a time instead of just moving the caret at linear speed.\n\n![demo](https://github.com/user-attachments/assets/eac207c9-2c1f-47f5-9661-f601983c4950)\n\n## Installation\n\n```shell\nnpm i svelte-typewrite // without an \"r\" at the end\n\npnpm add svelte-typewrite\n```\n\n## Usage\n\n```svelte\n<script>\n    import { TypeWriter } from 'svelte-typewrite'\n</script>\n\n<TypeWriter texts={['lorem ipsum', 'dolor sit amet']} />\n```\n\n## Props\n\n### Required\n\n| Name    |    Type    | Description                      |\n| ------- | :--------: | -------------------------------- |\n| `texts` | `string[]` | Array of strings to be displayed |\n\n### Options\n\n| Name            |      Type      |     Default      | Description                                                                  |\n| --------------- | :------------: | :--------------: | ---------------------------------------------------------------------------- |\n| `repeat`        |    `number`    |       `0`        | Number of times to iterate through the texts (`0` for indefinitely)          |\n| `endState`      |   `EndState`   |   `undefined`    | What to do after typing the very last text<br>**_Required_** if `repeat > 0` |\n| `typeSpeed`     |    `number`    |       `60`       | How fast the text is typed (in `ms/char`)                                    |\n| `deleteSpeed`   |    `number`    |       `40`       | How fast the text is deleted (in `ms/char`)                                  |\n| `blinkDuration` |    `number`    |      `600`       | Duration of each \"blink\" of caret (in `ms`)                                  |\n| `afterTyped`    |  `AfterTyped`  | `{ blink: 2.5 }` | What caret should do after typing and before deleting the text               |\n| `afterDeleted`  | `AfterDeleted` | `{ wait: 150 }`  | What caret should do after deleting the text and before typing the next text |\n\n```ts\ntype AfterTyped =\n    | {\n          /** How long to wait before starting to delete the text (in `ms`) */\n          wait: number\n      }\n    | {\n          /** How many times the caret should blink before starting to delete the text */\n          blink: number\n      }\n\ntype AfterDeleted =\n    | {\n          /** How long to wait before starting to type the next text (in `ms`) */\n          wait: number\n      }\n    | {\n          /** How many times the caret should blink before starting to type the next text */\n          blink: number\n      }\n\ninterface EndState {\n    /** Whether to leave the last text typed or deleted */\n    text: 'typed' | 'deleted'\n\n    /** Whether to leave the caret visible, hidden, or blinking */\n    caret: 'visible' | 'hidden' | 'blink'\n}\n```\n\n### Callbacks\n\n| Name            |           Type            | Description                                                                                |\n| --------------- | :-----------------------: | ------------------------------------------------------------------------------------------ |\n| `ontypestart`   | `(index: number) => void` | Runs when typing animation starts.<br>Receives the index of the text being typed           |\n| `ontypeend`     | `(index: number) => void` | Runs when typing animation ends.<br>Receives the index of the text that was just typed     |\n| `ondeletestart` | `(index: number) => void` | Runs when deleting animation starts.<br>Receives the index of the text being deleted       |\n| `ondeleteend`   | `(index: number) => void` | Runs when deleting animation ends.<br>Receives the index of the text that was just deleted |\n\n> [!TIP]\n> Type of `index` parameter will properly be \"narrowed down\" if `texts` is a tuple (i.e. defined with `as const`).  \n> Useful if you have `noUncheckedIndexedAccess` set to `true` in your `tsconfig.json`.\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3694, 79],
		[3701, 20],
		[3708, 2],
		[3715, 13],
		[3722, 9],
		[3729, 4],
		[3736, 19],
		[3743, 17],
		[3750, 1],
		[3757, 6],
		[3764, 8],
		[3771, 7],
		[3778, 7],
		[3792, 59],
		[3799, 73],
		[3806, 18],
		[3813, 5],
		[3820, 220],
		[3827, 25],
		[3834, 28],
		[3841, 16],
		[3848, 24],
		[3855, 7],
		[3862, 12],
		[3869, 9],
		[3876, 4],
		[3890, 24],
		[3897, 14],
		[3904, 2],
		[3911, 1],
		[3918, 3],
		[3925, 3],
		[3932, 77],
		[3939, 10],
		[3946, 5],
		[3953, 7],
		[3960, 6],
		[3967, 4],
		[3974, 73],
		[3981, 44],
		[3988, 19],
		[3995, 11],
		[4002, 14],
		[4009, 5],
		[4016, 14],
		[4023, 34],
		[4030, 14],
		[4037, 37],
		[4044, 31],
		[4051, 14],
		[4058, 21],
		[4065, 28],
		[4072, 16],
		[4079, 9],
		[4086, 18],
		[4093, 66],
		[4100, 34],
		[4107, 50],
		[4114, 16],
		[4121, 20],
		[4128, 46],
		[4135, 38]
	],
	"esm": true,
	"cjs": false
}
