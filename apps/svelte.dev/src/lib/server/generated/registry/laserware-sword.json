{
	"name": "@laserware/sword",
	"description": "Provides Svelte wrapper over Redux.",
	"repo_url": "https://github.com/laserware/sword",
	"authors": ["mikerourke"],
	"homepage": "https://github.com/laserware/sword#readme",
	"downloads": 22,
	"updated": "2025-01-03T22:36:05.546Z",
	"tags": ["integration"],
	"github_stars": 0,
	"typescript": true,
	"version": "3.2.1",
	"svelte_range": ">=5",
	"last_rune_check_version": "3.2.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@laserware/sword",
				"version": "3.2.1",
				"size": 18490
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Sword\n\nSvelte wrapper over Redux.\n\n> [!IMPORTANT]\n> Version 3 of this library only works with Svelte v5!\n\n## Usage\n\nInstall the dependency. Note that `svelte` and `@laserware/stasis` are required as a peer dependencies:\n\n```bash\nnpm install @laserware/sword @laserware/stasis svelte\n```\n\nWrap your Svelte entry point component with `<Provider>`:\n\n**Entry File (`src/main.ts`)**\n\n```ts\nimport { Provider } from \"@laserware/sword\";\nimport { mount } from \"svelte\";\n\nimport App from \"./App.svelte\";\n\nconst app = mount(App, { target: document.body });\n\nexport default app();\n```\n\n**Svelte Component (`src/App.svelte`)**\n\n```html\n<script lang=\"ts\">\n  import { Provider } from \"@laserware/sword\";\n\n  import { createStore } from \"./my-redux-store\";\n\n  import MyComponent from \"./MyComponent.svelte\"\n\n  const store = createStore();\n</script>\n\n<Provider {store}>\n  <MyComponent />\n</Provider>\n```\n\nIf you don't want to create another component file just to add Redux context, you can use the `provide` function:\n\n**Entry File (`src/main.ts`)**\n\n```ts\nimport { provide } from \"@laserware/sword\";\nimport { mount } from \"svelte\";\n\nimport { createStore } from \"./my-redux-store\";\n\nimport App from \"./App.svelte\";\n\nconst store = createStore();\n\nconst app = mount(App, { \n  target: document.body,\n  context: provide(store),\n});\n\nexport default app();\n```\n\nImport the `useDispatch` or `useSelect` functions in components that need to dispatch Redux actions or access Redux state:\n\n```html\n<!-- MyComponent.svelte -->\n<script lang=\"ts\">\n  import { useDispatch, useSelector } from \"@laserware/sword\";\n\n  import { someAction } from \"./my-redux-actions\";\n  import { selectSomeValue } from \"./my-redux-selectors\";\n\n  const dispatch = useDispatch();\n\n  const someValue = useSelector(selectSomeValue);\n\n  function handleClick(): void {\n    dispatch(someAction(someValue.value));\n  }\n</script>\n\n<button onclick={handleClick}>Click me</button>\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3715, 227],
		[3722, 163],
		[3729, 25],
		[3736, 72],
		[3743, 26],
		[3750, 12],
		[3757, 13],
		[3764, 8],
		[3771, 14],
		[3778, 260],
		[3785, 40],
		[3792, 80],
		[3799, 19],
		[3806, 8],
		[3813, 11],
		[3820, 11],
		[3827, 64],
		[3834, 46],
		[3841, 25],
		[3848, 11],
		[3855, 25],
		[3862, 45],
		[3869, 21],
		[3876, 22],
		[3883, 13],
		[3890, 23],
		[3897, 20],
		[3904, 18],
		[3911, 284],
		[3918, 13],
		[3925, 2],
		[3932, 43],
		[3939, 12],
		[3946, 63],
		[3953, 52],
		[3960, 3],
		[3967, 1],
		[3974, 13],
		[3981, 5],
		[3988, 105],
		[3995, 100],
		[4002, 10],
		[4009, 20],
		[4016, 86],
		[4023, 23],
		[4030, 12],
		[4037, 34],
		[4044, 26],
		[4051, 22],
		[4058, 8],
		[4065, 3],
		[4072, 8],
		[4079, 5],
		[4086, 7],
		[4093, 27],
		[4100, 15],
		[4107, 80],
		[4114, 22],
		[4121, 23],
		[4128, 10]
	]
}
