{
	"name": "@felte/validator-yup",
	"description": "Validate Felte forms with Yup.",
	"repo_url": "https://github.com/pablo-abc/felte",
	"authors": ["pberganza"],
	"homepage": "https://github.com/pablo-abc/felte/tree/main/packages/validator-yup",
	"downloads": 3634,
	"updated": "2024-10-29T22:05:28.329Z",
	"tags": ["miscellaneous"],
	"github_stars": 1050,
	"typescript": true,
	"version": "1.1.4",
	"svelte_range": "^3.46.4",
	"last_rune_check_version": "1.1.4",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@felte/validator-yup",
				"version": "1.1.4",
				"size": 15467
			},
			{
				"name": "@felte/common",
				"version": "1.1.9",
				"size": 285201
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# @felte/validator-yup\n\n[![Tests](https://github.com/pablo-abc/felte/workflows/Tests/badge.svg)](https://github.com/pablo-abc/felte/actions/workflows/test.yml)\n[![Bundle size](https://img.shields.io/bundlephobia/min/@felte/validator-yup)](https://bundlephobia.com/result?p=@felte/validator-yup)\n[![NPM Version](https://img.shields.io/npm/v/@felte/validator-yup)](https://www.npmjs.com/package/@felte/validator-yup)\n[![codecov](https://codecov.io/gh/pablo-abc/felte/branch/main/graph/badge.svg?token=T73OJZ50LC)](https://codecov.io/gh/pablo-abc/felte)\n\nA package to help you handle validation with Yup in Felte.\n\n## Installation\n\n```sh\nnpm install --save @felte/validator-yup yup\n\n# Or, if you use yarn\n\nyarn add @felte/validator-yup yup\n```\n\n## Usage\n\nCall `validator` with an object containing your Yup schema in the `schema` property. The result of the call can be passed as an extender to Felte:\n\n```javascript\nimport { validator } from '@felte/validator-yup';\nimport * as yup from 'yup';\n\nconst schema = yup.object({\n  email: yup.string().email().required(),\n  password: yup.string().required(),\n});\n\nconst { form } = createForm({\n  // ...\n  extend: validator({ schema }), // or `extend: [validator({ schema })],`\n  // ...\n});\n```\n\nOR use the `validateSchema` function directly in the `validate` option of `createForm`. (No need to extend Felte).\n\n```javascript\nimport { validateSchema } from '@felte/validator-yup';\nimport * as yup from 'yup';\n\nconst schema = yup.object({\n  email: yup.string().email().required(),\n  password: yup.string().required(),\n});\n\nconst { form } = createForm({\n  // ...\n  validate: validateSchema(schema),\n  // ...\n});\n```\n\n## Casting values\n\nUnlike `yup`, by default this validator does **not** cast values. If you wish to have this behaviour you may set the `castValues` property to `true` on the validator's configuration:\n\n```javascript\nconst { form } = createForm({\n  //...\n  extend: validator({ schema, castValues: true }),\n  //...\n});\n```\n\n**NOTE**: `yup` throws if your schema fails to cast, **we do not catch this errors** so make sure your schema handles this appropriately to prevent your app from crashing. For example, lets assume we have a `text` input that should be cast to an integer. `yup`'s `number` rule would throw an error if a string is set so, in order to prevent your app from crashing, a custom rule would be needed:\n\n```javascript\nconst schema = yup.object({\n  shouldBeNumber: yup\n    .mixed()\n    .test('number', 'Must be a number', value => !isNaN(value))\n    .transform(value => parseInt(value, 10)),\n});\n```\n\n## Warnings\n\nOptionally, you can tell this package to assign the results of your validations to your `warnings` store by setting the `level` property of the validator function to `warning`. It's `error` by default:\n\n```javascript\nimport { validator } from '@felte/validator-yup';\nimport * as yup from 'yup';\n\nconst validateSchema = yup.object({\n  email: yup.string().email().required(),\n  password: yup.string().required(),\n});\n\n// We only warn if the user has already started typing a value\nconst warnSchema = yup.object({\n  password: yup\n    .string()\n    .test('is-secure', 'password is not secure', (value) =>\n      value ? value.length > 8 : true\n    ),\n});\n\nconst { form } = createForm({\n  // ...\n  extend: [\n    validator({ schema }),\n    validator({ schema: warnSchema, level: 'warning' }),\n  ],\n  // ...\n});\n```\n\n## Typescript\n\nYup allows you to infer the type of your schema using `yup.InferType`. This can be used so you don't need to create a type for your form's data:\n\n```typescript\nimport * as yup from 'yup';\n\nconst schema = yup.object({\n  email: yup.string().email().required(),\n  password: yup.string().required(),\n});\n\nconst { form } = createForm<yup.InferType<typeof schema>>(/* ... */);\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 865],
		[3596, 1363],
		[3603, 1293],
		[3610, 1144],
		[3617, 1390],
		[3624, 1623],
		[3631, 1683],
		[3638, 1555],
		[3645, 806],
		[3652, 1189],
		[3659, 1414],
		[3666, 1944],
		[3673, 1707],
		[3680, 2167],
		[3687, 1494],
		[3694, 1806],
		[3701, 2267],
		[3708, 2501],
		[3715, 2658],
		[3722, 3467],
		[3729, 4389],
		[3736, 3133],
		[3743, 2874],
		[3750, 3348],
		[3757, 2651],
		[3764, 2694],
		[3771, 2276],
		[3778, 2368],
		[3785, 3312],
		[3792, 2572],
		[3799, 2398],
		[3806, 3319],
		[3813, 4857],
		[3820, 4318],
		[3827, 2828],
		[3834, 2571],
		[3841, 2740],
		[3848, 2304],
		[3855, 2168],
		[3862, 2681],
		[3869, 1899],
		[3876, 1643],
		[3883, 2025],
		[3890, 1842],
		[3897, 1881],
		[3904, 1829],
		[3911, 1722],
		[3918, 1902],
		[3925, 1934],
		[3932, 2113],
		[3939, 2266],
		[3946, 2390],
		[3953, 2419],
		[3960, 2245],
		[3967, 2769],
		[3974, 3359],
		[3981, 2298],
		[3988, 3067],
		[3995, 2933],
		[4002, 2458],
		[4009, 1054],
		[4016, 1502],
		[4023, 2279],
		[4030, 2435],
		[4037, 2648],
		[4044, 2826],
		[4051, 2547],
		[4058, 3000],
		[4065, 3211],
		[4072, 3047],
		[4079, 2990],
		[4086, 3467],
		[4093, 3337],
		[4100, 3086],
		[4107, 3234],
		[4114, 3634],
		[4121, 3107],
		[4128, 3805]
	],
	"esm": true,
	"cjs": true
}
