{
	"name": "@svizzle/hierarchy",
	"description": "Visualize hierarchical data using Svelte charts.",
	"repo_url": "https://github.com/nestauk/svizzle",
	"authors": ["nestauk-dev", "mindrones"],
	"homepage": "https://github.com/nestauk/svizzle",
	"downloads": 3,
	"updated": "2023-11-23T20:36:03.117Z",
	"tags": ["ui"],
	"github_stars": 19,
	"typescript": false,
	"version": "0.1.0",
	"svelte_range": "^3.59.2",
	"last_rune_check_version": "0.1.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@svizzle/hierarchy",
				"version": "0.1.0",
				"size": 9006
			},
			{
				"name": "@svizzle/ui",
				"version": "0.13.0",
				"size": 167159
			},
			{
				"name": "@macfja/svelte-persistent-store",
				"version": "2.4.2",
				"size": 80842
			},
			{
				"name": "@macfja/serializer",
				"version": "1.1.4",
				"size": 26769
			},
			{
				"name": "browser-cookies",
				"version": "1.2.0"
			},
			{
				"name": "idb-keyval",
				"version": "6.2.1",
				"size": 53805
			},
			{
				"name": "sjcl-codec-hex",
				"version": "1.0.0"
			},
			{
				"name": "sjcl-bit-array",
				"version": "1.0.0"
			},
			{
				"name": "sjcl-es",
				"version": "2.0.0",
				"size": 2265130
			},
			{
				"name": "@svizzle/dom",
				"version": "0.7.3",
				"size": 10888
			},
			{
				"name": "@svizzle/utils",
				"version": "0.21.0",
				"size": 269532
			},
			{
				"name": "escape-string-regexp",
				"version": "5.0.0",
				"size": 3659
			},
			{
				"name": "just-compare",
				"version": "2.3.0",
				"size": 9255
			},
			{
				"name": "lamb",
				"version": "0.61.1",
				"size": 1101065
			},
			{
				"name": "bowser",
				"version": "2.11.0",
				"size": 216913
			},
			{
				"name": "d3-color",
				"version": "3.1.0",
				"size": 61152
			},
			{
				"name": "d3-hierarchy",
				"version": "3.1.2",
				"size": 136230
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[2, 4],
			[2, 5],
			[2, 6],
			[6, 7],
			[2, 8],
			[1, 9],
			[9, 10],
			[10, 11],
			[10, 12],
			[10, 13],
			[9, 13],
			[1, 10],
			[1, 14],
			[1, 15],
			[0, 10],
			[0, 16],
			[0, 13]
		],
		"circular": []
	},
	"readme": "# Treemap Component\n\nThe `Treemap` Svelte component from the Svizzle library is designed for\nvisualizing hierarchical data using a treemap layout.\n\n## Overview\n\nThe `Treemap` component uses a treemap layout to represent hierarchical data as\na set of nested rectangles. Each branch of the tree is given a rectangle, which\nis then tiled with smaller rectangles representing sub-branches.\n\nNote that in this version the `Treemap` doesn't support hierarchies with more\nthan one level of depth as we are for now porting it as-is from a project where\nwe didn't have a deeper data structure.\n\n## Installation\n\nTo use the `Treemap` component, first install the Svizzle library:\n\n```bash\nnpm install @svizzle/hierarchy\n```\n\n## Usage\n\nHere's a basic example of how to use the `Treemap` component in your Svelte\napplication:\n\n```html\n<script>\n  import {Treemap} from '@svizzle/ui';\n  // Import or define your data\n  const items = [/* your hierarchical data */];\n</script>\n\n<Treemap {items} />\n```\n\n## Props\n\n- `items`: The hierarchical data to be displayed. This should be an array of objects.\n- `geometry`: Optional. An object to customize the layout of the treemap, including padding and text positioning.\n- `keyAccessor`: Optional. A function to access the key from each data item (default is `getKey`).\n- `valueAccessor`: Optional. A function to access the value from each data item (default is `getValue`).\n- `keyToColorFn`: Optional. A function to determine the color of each rectangle based on its key.\n- `keyToColorLabelFn`: Optional. A function to determine the color of the label text for each rectangle.\n\n## Features\n\n- **Responsive Design**: Automatically adjusts to the container's size.\n- **Customizable Layout**: Control over text positioning and rectangle padding.\n- **Interactive**: Dispatches events for mouse and touch interactions on the treemap leaves.\n- **Color Customization**: Functions to define custom colors for rectangles and labels.\n\n## Events\n\nThe component dispatches several events for interaction:\n\n- `leafHovered`: Fired when a leaf is hovered over.\n- `leafExited`: Fired when the mouse exits a leaf.\n- `leafTouchStarted`: Fired when a touch interaction starts on a leaf.\n- `leafTouchEnded`: Fired when a touch interaction ends on a leaf.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3610, 74],
		[3617, 6],
		[3624, 2],
		[3638, 1],
		[3645, 2],
		[3652, 1],
		[3659, 3],
		[3666, 4],
		[3673, 2],
		[3687, 1],
		[3708, 1],
		[3736, 1],
		[3757, 2],
		[3771, 2],
		[3778, 1],
		[3785, 2],
		[3806, 1],
		[3813, 2],
		[3834, 7],
		[3862, 3],
		[3883, 2],
		[3897, 1],
		[3904, 1],
		[3911, 1],
		[3932, 1],
		[3939, 1],
		[3960, 1],
		[3988, 1],
		[4016, 1],
		[4023, 2],
		[4037, 4],
		[4044, 9],
		[4051, 1],
		[4058, 1],
		[4072, 1],
		[4093, 2],
		[4100, 2],
		[4107, 2],
		[4114, 3],
		[4121, 5],
		[4128, 2],
		[4135, 5]
	]
}
