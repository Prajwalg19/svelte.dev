{
	"name": "svelte-tiptap",
	"description": "Create rich text editors using Tiptap in Svelte.",
	"repo_url": "https://github.com/sibiraj-s/svelte-tiptap",
	"authors": ["sibiraj-s"],
	"homepage": "https://github.com/sibiraj-s/svelte-tiptap#readme",
	"downloads": 5766,
	"updated": "2024-12-01T10:24:47.495Z",
	"tags": ["ui"],
	"github_stars": 289,
	"typescript": true,
	"version": "2.1.0",
	"svelte_range": "^5.0.0",
	"kit_range": "^2.9.0",
	"last_rune_check_version": "2.1.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-tiptap",
				"version": "2.1.0",
				"size": 29372
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-tiptap\n\n> Svelte components for tiptap v2\n\n[![Tests](https://github.com/sibiraj-s/svelte-tiptap/actions/workflows/tests.yml/badge.svg)](https://github.com/sibiraj-s/svelte-tiptap/actions/workflows/tests.yml)\n[![NPM Version](https://badgen.net/npm/v/svelte-tiptap)](https://www.npmjs.com/package/svelte-tiptap)\n[![Total Downloads](https://badgen.net/npm/dt/svelte-tiptap)](https://www.npmjs.com/package/svelte-tiptap)\n[![Monthly Downloads](https://badgen.net/npm/dm/svelte-tiptap)](https://www.npmjs.com/package/svelte-tiptap)\n[![License](https://badgen.net/npm/license/svelte-tiptap)](https://github.com/sibiraj-s/svelte-tiptap/blob/master/LICENSE)\n\n## Installation\n\n```bash\nnpm i svelte-tiptap\n# or\nyarn add svelte-tiptap\n```\n\n> [!NOTE]\n> This package just provides components for svelte. For configuring/customizing the editor, refer [tiptap's official documentation](https://www.tiptap.dev/).\n\nFor any issues with the editor. You may need to open the issue on [tiptap's repository](https://github.com/ueberdosis/tiptap/issues)\n\nYou can find some [examples for the editor here](./src/routes/)\n\n## Usage\n\nA Simple editor.\n\n```svelte\n<script lang=\"ts\">\n  import { onMount } from 'svelte';\n  import type { Readable } from 'svelte/store';\n  import { createEditor, Editor, EditorContent } from 'svelte-tiptap';\n  import StarterKit from '@tiptap/starter-kit';\n\n  let editor = $state() as Readable<Editor>;\n\n  onMount(() => {\n    editor = createEditor({\n      extensions: [StarterKit],\n      content: `Hello world!`,\n    });\n  });\n</script>\n\n<EditorContent editor={$editor} />\n```\n\nRefer https://www.tiptap.dev/api/commands/ for available commands\n\n## Extensions\n\nRefer: https://www.tiptap.dev/api/extensions\n\n### Floating menu\n\nThis will make a contextual menu appear near a selection of text.\n\nThe markup and styling are totally up to you.\n\n```svelte\n<script lang=\"ts\">\n  import { EditorContent, FloatingMenu } from 'svelte-tiptap';\n\n  // ...create the editor instance on mount\n</script>\n\n<EditorContent editor={$editor} />\n<FloatingMenu editor={$editor} />\n```\n\nRefer: https://www.tiptap.dev/api/extensions/floating-menu\n\n### Bubble Menu\n\nThis will make a contextual menu appear near a selection of text. Use it to let users apply marks to their text selection.\n\nThe markup and styling are totally up to you.\n\n```svelte\n<script lang=\"ts\">\n  import { EditorContent, BubbleMenu } from 'svelte-tiptap';\n\n  // ...create the editor instance on mount\n</script>\n\n<EditorContent editor={$editor} />\n<BubbleMenu editor={$editor} />\n```\n\nRefer: https://www.tiptap.dev/api/extensions/bubble-menu\n\n## SvelteNodeViewRenderer\n\nSvelteNodeViewRenderer enables rendering Svelte Components as NodeViews. The following is an example for creating a counter component\n\n### Create a Node Extension\n\n```ts\nimport { Node, mergeAttributes } from '@tiptap/core';\nimport { SvelteNodeViewRenderer } from 'svelte-tiptap';\n\nimport CounterComponent from './Counter.svelte';\n\nexport const SvelteCounterExtension = Node.create({\n  name: 'svelteCounterComponent',\n  group: 'block',\n  atom: true,\n  draggable: true, // Optional: to make the node draggable\n  inline: false,\n\n  addAttributes() {\n    return {\n      count: {\n        default: 0,\n      },\n    };\n  },\n\n  parseHTML() {\n    return [{ tag: 'svelte-counter-component' }];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['svelte-counter-component', mergeAttributes(HTMLAttributes)];\n  },\n\n  addNodeView() {\n    return SvelteNodeViewRenderer(CounterComponent);\n  },\n});\n```\n\n### Create a Component\n\n```svelte\n<script lang=\"ts\">\n  import type { NodeViewProps } from '@tiptap/core';\n  import cx from 'clsx';\n  import { NodeViewWrapper } from 'svelte-tiptap';\n\n  let { node, updateAttributes }: NodeViewProps = $props();\n\n  const handleClick = () => {\n    updateAttributes({ count: node.attrs.count + 1 });\n  };\n</script>\n\n<NodeViewWrapper>\n  <span>Svelte Component</span>\n\n  <div>\n    <button onclick={handleClick} type=\"button\">\n      This button has been clicked {node.attrs.count} times.\n    </button>\n  </div>\n</NodeViewWrapper>\n```\n\n### Use the extension\n\n```ts\nimport { onMount, onDestroy } from 'svelte';\nimport type { Readable } from 'svelte/store';\nimport { Editor, EditorContent } from 'svelte-tiptap';\nimport StarterKit from '@tiptap/starter-kit';\n\nimport { SvelteCounterExtension } from './SvelteExtension';\n\nlet editor = $state() as Readable<Editor>;\n\nonMount(() => {\n  editor = createEditor({\n    extensions: [StarterKit, SvelteCounterExtension],\n    content: `\n        <p>This is still the text editor you’re used to, but enriched with node views.</p>\n        <svelte-counter-component count=\"0\"></svelte-counter-component>\n        <p>Did you see that? That’s a Svelte component. We are really living in the future.</p>\n      `,\n  });\n});\n```\n\n### Access/Update Attributes\n\nRefer https://www.tiptap.dev/guide/node-views/react/#all-available-props for the list of all available attributes. You can access them like\n\n```ts\nimport type { NodeViewProps } from '@tiptap/core';\n\nlet { node, updateAttributes }: NodeViewProps = $props();\n\n// update attributes\nconst handleClick = () => {\n  updateAttributes({ count: node.attrs.count + 1 });\n};\n```\n\n### Dragging\n\nTo make your node views draggable, set `draggable: true` in the extension and add `data-drag-handle` to the DOM element that should function as the drag handle.\n\n### Adding a content editable\n\nThere is another action called `editable` which helps you adding editable content to your node view. Here is an example.\n\n```svelte\n<script lang=\"ts\">\n  import { NodeViewWrapper, NodeViewContent } from 'svelte-tiptap';\n</script>\n\n<NodeViewWrapper class=\"svelte-component\">\n  <span class=\"label\" contenteditable=\"false\">Svelte Editable Component</span>\n\n  <!-- Content is inserted here -->\n  <NodeViewContent />\n</NodeViewWrapper>\n```\n\nThe NodeViewWrapper and NodeViewContent components render a `<div>` HTML tag (`<span>` for inline nodes),\nbut you can change that. For example `<NodeViewContent as=\"p\">` should render a paragraph.\nOne limitation though: That tag must not change during runtime.\n\nRefer: https://www.tiptap.dev/guide/node-views/react/#adding-a-content-editable\n\n## Contributing\n\nAll types of contributions are welcome. See [CONTRIBUTING.md](./.github/CONTRIBUTING.md) to get started.\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 689],
		[3603, 719],
		[3610, 839],
		[3617, 827],
		[3624, 749],
		[3631, 793],
		[3638, 792],
		[3645, 487],
		[3652, 577],
		[3659, 989],
		[3666, 810],
		[3673, 766],
		[3680, 842],
		[3687, 791],
		[3694, 970],
		[3701, 1029],
		[3708, 896],
		[3715, 883],
		[3722, 1189],
		[3729, 1178],
		[3736, 1223],
		[3743, 1311],
		[3750, 998],
		[3757, 974],
		[3764, 1011],
		[3771, 924],
		[3778, 962],
		[3785, 1073],
		[3792, 1035],
		[3799, 1360],
		[3806, 1311],
		[3813, 1169],
		[3820, 1175],
		[3827, 1393],
		[3834, 1354],
		[3841, 1891],
		[3848, 1533],
		[3855, 1931],
		[3862, 1381],
		[3869, 2191],
		[3876, 1740],
		[3883, 1693],
		[3890, 2046],
		[3897, 2273],
		[3904, 2275],
		[3911, 3085],
		[3918, 2921],
		[3925, 2738],
		[3932, 3440],
		[3939, 2940],
		[3946, 2829],
		[3953, 4198],
		[3960, 4184],
		[3967, 5448],
		[3974, 6090],
		[3981, 5600],
		[3988, 3783],
		[3995, 4560],
		[4002, 3933],
		[4009, 2277],
		[4016, 2916],
		[4023, 3804],
		[4030, 4147],
		[4037, 4758],
		[4044, 4532],
		[4051, 4740],
		[4058, 3775],
		[4065, 4497],
		[4072, 4901],
		[4079, 6344],
		[4086, 6525],
		[4093, 5935],
		[4100, 6579],
		[4107, 6175],
		[4114, 5766],
		[4121, 4993],
		[4128, 5364],
		[4135, 4313]
	]
}
