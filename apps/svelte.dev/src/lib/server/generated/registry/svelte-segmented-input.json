{
	"name": "svelte-segmented-input",
	"description": "Create number-only segmented input components for Svelte.",
	"repo_url": "https://github.com/ZuriPL/svelte-segmented-input",
	"authors": ["zuriii"],
	"homepage": "https://github.com/ZuriPL/svelte-segmented-input#readme",
	"downloads": 8,
	"updated": "2023-09-14T11:10:58.991Z",
	"tags": ["ui"],
	"github_stars": 2,
	"typescript": true,
	"version": "1.6.7",
	"svelte_range": "^3.49.0",
	"last_rune_check_version": "1.6.7",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-segmented-input",
				"version": "1.6.7",
				"size": 13688
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-segmented-input [![svelte-segmented-input](https://img.shields.io/badge/-svelte--segmented--input-orange)](https://github.com/ZuriPL/svelte-segmented-input)\r\n\r\nA simple component for number-only segmented input. Ideal for 2FA codes. Minified and gzipped the package is ~9kb, and can be used with svelte's client-side component API in non-svelte projects.\r\n\r\n**NOTE:** Deprecated\r\n\r\n## HOW TO USE:\r\n\r\n### 1. Svelte\r\n\r\n```svelte\r\n<script>\r\n    import SvelteSegmentedInput from 'svelte-segmented-input'\r\n\r\n    let value\r\n\r\n    let callback = (e) => console.log(e)\r\n</script>\r\n\r\n<SvelteSegmentedInput bind:value=\"{value}\" length=\"{6}\" style=\"{{borderColor: 'black', inputWidth: '50%'}}\" on:valueEntered=\"{callback}\" />\r\n```\r\n\r\n`value` is the current value of the input as a string with spaces in non-populated fields. Setting rhe variable value will change the input value to the given input if it's a number or can be coerced to a number.\r\n\r\n`length` is the number of fields. accepts number or an array of numbers. when an array is passed, it will create the segments such as for an array [3, 3, 4] the input will look like this: [] [] [] - [] [] [] - [] [] [] [].\r\n\r\n`style` is an object which holds sets custom CSS properties to control the styling of the component.\r\n\r\n`on:valueEntered` is an event that fires every time a full value is entered. `event.detail.value` is the value that was entered.\r\n\r\n### 2. Vanilla JS (with module bundler)\r\n\r\n```javascript\r\nimport SegmentedInput from 'svelte-segmented-input'\r\n\r\nconst component = new SegmentedInput({\r\n\ttarget: document.querySelector('#app'), // where to attach the component in the DOM\r\n\tprops: {\r\n\t\tlength: 6, // length of the input; can be an array to specify segments\r\n\t\tvalue: 123, // initial value\r\n\t},\r\n})\r\n\r\n// event listener. removeEvent() will remove the event listener\r\nconst removeEvent = component.$on('valueEntered', (e) => console.log(e.detail.value))\r\n\r\n// log the current value of the component\r\nconsole.log(component.value)\r\n```\r\n\r\nSetting value in the props object will not trigger the `valueEntered` event, however setting it using `component.value` will\r\n\r\n## STYLING:\r\n\r\n### input\r\n\r\n-   font-size: var(--fontSize, 2rem);\r\n-   border-radius: var(--borderRadius, 0.4rem);\r\n-   border: var(--borderWidth, 2px) solid var(--borderColor, #e5e5e5);\r\n-   padding: var(--padding, 0.25rem 1rem);\r\n-   color: var(--textColor, black);\r\n-   background-color: var(--bgInput, transparent);\r\n\r\n### input:focus\r\n\r\n-   border: var(--borderWidth, 2px) solid var(--borderColorActive, #5f91f0);\r\n\r\n### input-wrapper\r\n\r\n-   width: var(--inputWidth, 100%);\r\n-   background-color: var(--bgWrapper, transparent);\r\n-   gap: var(--gap);\r\n    // if gap is not set or is set to 'auto', it's treated as setting `justify content: space-between;` instead\r\n\r\nAlternatively, you can target each item with a descendant selector, as all elements are inside a div with id #input-wrapper.\r\n\r\n## KNOWN ISSUES:\r\n\r\n1. This solution isn't accessible, as it relies on multiple input elements and breaks a lot of browsers behaviours (i. e. ctrl+f to search). This is a milestone I'm trying to reach with v2.0\r\n2. On mobile phones it is possible to input + and - characters. I have no idea how it happens.\r\n3. Binding the `length` property will break when length is smaller than the number of fields that are populated. Please, don't bind the `length` property.\r\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 32],
		[3603, 35],
		[3610, 45],
		[3617, 21],
		[3624, 10],
		[3631, 21],
		[3638, 18],
		[3645, 15],
		[3652, 5],
		[3659, 20],
		[3666, 32],
		[3680, 1],
		[3687, 2],
		[3701, 1],
		[3708, 1],
		[3715, 5],
		[3722, 2],
		[3743, 1],
		[3750, 13],
		[3757, 11],
		[3764, 11],
		[3771, 25],
		[3778, 1],
		[3792, 3],
		[3799, 5],
		[3806, 3],
		[3813, 1],
		[3820, 1],
		[3827, 1],
		[3834, 2],
		[3841, 127],
		[3848, 2],
		[3855, 3],
		[3862, 3],
		[3869, 4],
		[3876, 1],
		[3890, 31],
		[3897, 4],
		[3904, 1],
		[3911, 2],
		[3918, 2],
		[3932, 1],
		[3939, 2],
		[3946, 2],
		[3953, 3],
		[3960, 2],
		[3967, 3],
		[3974, 7],
		[3981, 4],
		[3988, 29],
		[3995, 3],
		[4002, 1],
		[4009, 1],
		[4016, 1],
		[4030, 1],
		[4037, 34],
		[4044, 20],
		[4051, 7],
		[4058, 1],
		[4065, 1],
		[4086, 1],
		[4100, 75],
		[4107, 3],
		[4114, 8],
		[4121, 20],
		[4128, 9],
		[4135, 12]
	]
}
