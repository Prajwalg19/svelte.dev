{
	"name": "web-spreadsheet",
	"description": "Create Excel-like spreadsheet web component for Svelte.",
	"repo_url": "https://github.com/icheer/web-spreadsheet",
	"authors": ["icheer"],
	"homepage": "https://github.com/icheer/web-spreadsheet#readme",
	"downloads": 8,
	"updated": "2021-11-24T10:46:16.903Z",
	"tags": ["ui"],
	"github_stars": 10,
	"typescript": false,
	"version": "1.0.17",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "1.0.17",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "web-spreadsheet",
				"version": "1.0.17",
				"size": 124532
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# web-spreadsheet\n\nA simple Excel-like spreadsheet web component built with [svelte](https://github.com/sveltejs/svelte).\n\n- dependency free\n- compatible with any javascript framework/UI library\n- light-weighted (size: 35KB, gzip: ~12KB)\n- multiple cell type supported (input, select, multi-select, image, date, time)\n- support customized **validator**, **formatter** and **computed** function\n- support UNDO/REDO with ctrl+Z & ctrl+Y\n\n## Online demo\n\n[https://spread.vercel.app](https://spread.vercel.app)\n\n![screenshot](https://i.ibb.co/FJrhmc4/spread-shot.png)\n\n## How to use\n\nInstall with npm:\n\n```bash\nnpm install web-spreadsheet --save\n```\n\nand import it in your code:\n\n```js\nimport 'web-spreadsheet';\n```\n\nYou can **also** load the code from a CDN such as jsdelivr:\n\n```js\n<script src=\"https://cdn.jsdelivr.net/npm/web-spreadsheet@latest/lib/index.min.js\"></script>\n```\n\nthen you can use the customElement `<spread-sheet></spread-sheet>` in your HTML code.\n\nIf you're using it in a Vue.js project, you can pass proper props **columns** and **data** into customElement such as `<spread-sheet :columns=\"columns\" :data=\"rows\"/>`\nThen your spreadsheet will come into view.\n\nThe **columns** and **data** props look like these:\n\n```js\ndata() {\n  return {\n    columns: [\n      {\n        text: 'Fullname',\n        key: 'fullname',\n        type: 'input',\n        width: '200px',\n        props: {\n          maxlength: 25\n        },\n        params: {\n          validator: (value, row) => {\n            const name = (value || '').trim();\n            if (!name) return 'Please enter Fullname';\n            if (name.length > 25) return 'Fullname length should less than 25';\n          }\n        }\n      },\n      {\n        text: 'Department',\n        key: 'dept',\n        type: 'select',\n        width: '8em',\n        items: [\n          { label: 'Operation', value: 'OP' },\n          { label: 'IT Support', value: 'IT' }\n        ]\n      },\n      {\n        text: 'Identity type',\n        key: 'idType',\n        type: 'multi-select',\n        width: '6em',\n        items: [\n          { label: 'ID Card', value: 'ID' },\n          { label: 'Passport', value: 'PASSPORT' }\n        ]\n      },\n      {\n        text: 'Identity number',\n        key: 'idNumber',\n        type: 'input',\n        width: '9em',\n        props: {\n          maxlength: 18\n        }\n      },\n      {\n        text: 'Fee',\n        key: 'fee',\n        align: 'right',\n        type: 'input',\n        width: '5em',\n        props: {\n          maxlength: 8\n        },\n        params: {\n          validator: str => {\n            if (!str) return;\n            const num = +str;\n            if (Number.isNaN(num)) return 'Please enter a number';\n          },\n          formatter: str => {\n            const num = +str;\n            return num.toFixed(2);\n          }\n        }\n      },\n      {\n        text: 'Total Fee(+10)',\n        key: 'totalFee',\n        align: 'right',\n        type: 'input',\n        width: '9em',\n        props: {\n          maxlength: 8\n        },\n        params: {\n          validator: str => {\n            if (!str) return;\n            const num = +str;\n            if (Number.isNaN(num)) return 'Please enter a number';\n          },\n          formatter: str => {\n            const num = +str;\n            return num.toFixed(2);\n          },\n          computed: (row, column) => {\n            const num = +row.fee || 0;\n            return (num + 10).toFixed(2);\n          }\n        }\n      },\n      {\n        text: 'Pictures',\n        key: 'pics',\n        type: 'image',\n        width: '8.5em',\n        props: {\n          max: 3, // means can upload 3 pics at most\n          uploadApi: 'http://192.168.105.11:28080/api/file/common/upload'\n        }\n      },\n      {\n        text: 'Update Time',\n        key: 'updateTime',\n        type: 'date',\n        width: '8em'\n      }\n    ],\n    rows: [\n      {\n        fullName: 'Tony Joe',\n        dept: 'OP',\n        idType: ['ID', 'PASSPORT'],\n        idNumber: '12341122234',\n        fee: 33,\n        pics: [\n          'https://github.blog/wp-content/uploads/2019/03/product-social.png?fit=1201%2C630',\n          '//fpoimg.com/400x400?text=Preview&bg_color=000000',\n          '//fpoimg.com/400x400?text=Preview&bg_color=ffeeee'\n        ],\n        updateTime: '2020-02-01'\n      },\n      {\n        fullName: 'Mary Lee',\n        dept: 'IT',\n        idType: ['ID'],\n        idNumber: '6515151374',\n        fee: 25,\n        pics: [\n          '//fpoimg.com/400x400?text=Preview&bg_color=eeffee'\n        ],\n        updateTime: '2020-02-02'\n      }\n    ]\n  }\n}\n```\n\nIf you want to use it in pure javascript, you can refer the [demo page](https://spread.vercel.app).\n\n## FEATURES\n- cell type: input, select, multi-select, image, date, time (depends on columns array)\n- when the row data changed, it will automaticly emit a \"change\" event, so you can handle the newest row data\n- validator / formatter / computed functions can be added in column.params object\n- log at most 20 change history in memory, so you can press ctrl+Z/Y to UNDO/REDO\n- right clicking the row head can call the context menu which can insert/delete the row\n- upload images and preview images\n- support sort by column\n- auto switch languages(CN or EN) depends on your `<html lang=\"___\">`\n- keypress behavior like Excel (arrows, escape, tab, delete, backspace etc)\n- pasted letters by ctrl+V will fill current highlighted input cell\n- for those non-modern browsers which don't support shadowDOM or customElement, you can use polyfill to let them support: just add a `<script src=\"https://cdn.jsdelivr.net/npm/@webcomponents/webcomponentsjs@2.5.0/webcomponents-bundle.min.js\"></script>` in `<head>`\n\n## TODO\n- [ ] column actions such as insert/delete column\n- [ ] ...\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 23],
		[3603, 10],
		[3610, 19],
		[3617, 8],
		[3624, 2],
		[3631, 9],
		[3638, 5],
		[3645, 7],
		[3652, 1],
		[3659, 7],
		[3666, 24],
		[3673, 10],
		[3680, 5],
		[3687, 3],
		[3694, 3],
		[3701, 4],
		[3708, 4],
		[3715, 2],
		[3722, 1],
		[3736, 6],
		[3743, 3],
		[3757, 5],
		[3764, 52],
		[3771, 14],
		[3778, 9],
		[3785, 9],
		[3792, 33],
		[3799, 10],
		[3806, 3],
		[3813, 1],
		[3834, 5],
		[3841, 1],
		[3848, 3],
		[3855, 91],
		[3862, 3],
		[3869, 1],
		[3876, 3],
		[3883, 3],
		[3890, 38],
		[3897, 2],
		[3904, 19],
		[3911, 2],
		[3918, 5],
		[3932, 3],
		[3939, 1],
		[3946, 1],
		[3953, 1],
		[3960, 3],
		[3967, 1],
		[3981, 2],
		[3988, 8],
		[3995, 5],
		[4002, 4],
		[4009, 3],
		[4016, 3],
		[4023, 3],
		[4030, 24],
		[4037, 25],
		[4044, 7],
		[4051, 1],
		[4058, 4],
		[4065, 4],
		[4072, 4],
		[4079, 1],
		[4086, 1],
		[4093, 13],
		[4100, 22],
		[4107, 3],
		[4114, 8],
		[4121, 18],
		[4128, 12],
		[4135, 35]
	]
}
