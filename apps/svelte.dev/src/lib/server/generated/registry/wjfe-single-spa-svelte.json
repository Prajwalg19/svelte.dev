{
	"name": "@wjfe/single-spa-svelte",
	"description": "Create single-spa lifecycle functions for Svelte components.",
	"repo_url": "https://github.com/WJSoftware/wjfe-single-spa-svelte",
	"authors": ["webjose"],
	"homepage": "https://github.com/WJSoftware/wjfe-single-spa-svelte",
	"downloads": 10,
	"updated": "2025-02-23T20:58:05.112Z",
	"tags": ["integration"],
	"github_stars": 0,
	"typescript": true,
	"version": "0.8.0",
	"svelte_range": "^5.0.0",
	"kit_range": "^2.17.2",
	"last_rune_check_version": "0.8.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@wjfe/single-spa-svelte",
				"version": "0.8.0",
				"size": 36310
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# @wjfe/single-spa-svelte\r\n\r\n> NPM package capable of creating single-spa lifecycle functions for Svelte v5 components.\r\n\r\nSvelte v5 is fundamentally different to previous versions.  Pertaining the functionality found in the equivalent \r\npackage from the `single-spa` team, the relevant changes are:\r\n\r\n1. Components are no longer classes.  Instantiation of components now require the use of the `mount()` function from \r\nSvelte.\r\n2. Unmounting components is no longer done with the component's `$destroy()` method and instead it requires the use of \r\nthe `unmount()` function from Svelte.\r\n3. Component properties are no longer updated with `$set()` and instead the props object is reactive state built with \r\nthe `$state()` rune.\r\n\r\n## Quickstart\r\n\r\nInstall the NPM package:\r\n\r\n```bash\r\nnpm i @wjfe/single-spa-svelte\r\n```\r\n\r\nNow use it to create lifecycle functions, almost as with the v4 version from the `single-spa` team:\r\n\r\n```typescript\r\nimport { singleSpaSvelte } from '@wjfe/single-spa-svelte';\r\nimport App from './App.svelte';\r\n\r\nconst lcc = singeSpaSvelte(App /*, domElementGetter, { options } */);\r\n\r\nexport const bootstrap = lcc.bootstrap;\r\nexport const mount = lcc.mount;\r\nexport const unmount = lcc.unmount;\r\nexport const update = lcc.update;\r\n```\r\n\r\n## Migrating from Svelte v4\r\n\r\nAs seen in the previous code snippet, it is almost identical.  The differences are in the arguments passed to the \r\nfunction.  The NPM package from the `single-spa` team receives a single argument, while this version can receive up to \r\nthree arguments.\r\n\r\nBefore (`single-spa-svelte` package from the `single-spa` team):\r\n\r\n```typescript\r\nimport singleSpaSvelte from 'single-spa-svelte';\r\n\r\nconst lcc = singleSpaSvelte({\r\n    component: App\r\n});\r\n```\r\n\r\nWith this package, the export is not default, and the component is not part of the options.  Other than this, the \r\nresulting functions should be conformant to what you are used to with `single-spa`.\r\n\r\n## The Options Parameter\r\n\r\n> Since **v0.4.0**\r\n\r\nAs seen in the Quickstart, `singleSpaSvelte`'s third parameter is named \"options\".  It accepts 3 properties:\r\n\r\n+ `preMount`:  Optional function that is run just before mounting the Svelte component.\r\n+ `postUnmount`:  Optionsl function that is run immediately after unmounting the Svelte component.\r\n+ `mountOptions`:  Optional set of options for Svelte's `mount` function.\r\n\r\nFor details on the last one, refer to Svelte's documentation.  All properties are accepted, except for `target`.\r\n\r\nThe other two are optional functions that receive as only argument the target HTML element where the component will be \r\nmounted in (or it was mounted in).  This is useful if you need to manipulate this element in any way.  The use case that gave birth to this feature was to add CSS classes to the element, which need to be removed upon unmounting:\r\n\r\n```typescript\r\nconst lcc = singeSpaSvelte(App , undefined, {\r\n    preMount: (target) => target.classList.add('flex-fill'),\r\n    postUnmount: (target) => target.classList.remove('flex-fill'),\r\n});\r\n```\r\n\r\nThe `target` parameter is guaranteed to be defined.\r\n\r\n## The SspaParcel Component\r\n\r\nThis package also provides a `SspaParcel` component that should help Svelters out there to consume `single-spa` \r\nparcels in Svelte v5 projects.  It works quite similarly to `<svelte:component>`, where the component is placed in \r\nmarkup and then via props, the component and its properties are set.\r\n\r\n```html\r\n<SspaParcel sspa={{ config: parcelConfig }} {...restOfParcelProperties} />\r\n```\r\n\r\nYou can collect the parcel properties in an object and then spread them as in the example above, or you may \r\nindividually specify them in markup as it is normally done with other components.\r\n\r\n### The sspa Property\r\n\r\nThe `sspa` property is an object whose purpose is to avoid reserving property names that may collide with the property \r\nnames of the parcel component being mounted.  In the future and if required, any new properties will be defined inside \r\nthis `sspa` object property that serves as namespace.\r\n\r\n#### `sspa.config`\r\n\r\nFor a `single-spa` parcel to be successfully mounted using `SspaParcel`, the parcel configuration object or a function \r\nthat returns it must be provided.  The purpose of the `sspa.config` property is to allow passing this requirement.\r\n\r\n> [!IMPORTANT]\r\n> It is recommended to implement the factory pattern for the lifecycle functions when it comes to parcels.  See this \r\n> [GitHub issue](https://github.com/single-spa/single-spa-svelte/issues/28) opened for the Svelte v4 version of this \r\n> package for details on how to implement a factory function.\r\n\r\n#### `sspa.containerProps`\r\n\r\n> Since **v0.8.0**\r\n\r\nThe `SspaParcel` component renders the `single-spa` parcel inside a DIV whose `display` style is set to `contents` \r\nusing a CSS specificity of `(0, 1, 1)`.\r\n\r\nThis DIV element can be put to work by spreading properties on it via `sspa.containerProps`.  For example, you can set \r\nan `onfocusin` handler to be notified whenever the mounted parcel obtains the keyboard focus.\r\n\r\nYou can also style it to your needs if you wish, but remember that you must opt out of `display: contents;` first.\r\n\r\n## The single-spa Context\r\n\r\n> Since **v0.5.0**\r\n\r\nThe entire `single-spa` library instance and the `mountParcel` function are available via context.  If needed, import  \r\n`getSingleSpaContext` and call it to obtain the context.  Remember to use this function in the initialization code of a \r\ncomponent.\r\n\r\n### Setting the single-spa Context\r\n\r\n> Since **v0.7.0**\r\n\r\nIt is also possible to set the needed context for the `SspaParcel` component from root Svelte projects.  Before this \r\nwas possible, the `SspaParcel` component would not work on root projects because it was unable to get a hold of the \r\nneeded `mountParcel` function.\r\n\r\n> [!NOTE]\r\n> This is only needed on root projects that wish to mount parcels with the `SspaParcel` component.  Micro-frontends get \r\n> this done automatically.\r\n\r\n```typescript\r\nimport * as singleSpaLib from \"single-spa\";\r\nimport { setSingleSpaContext } from \"@wjfe/single-spa-svelte\";\r\n\r\nsetSingleSpaContext({ library: singleSpaLib });\r\n```\r\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3806, 45],
		[3813, 38],
		[3820, 41],
		[3827, 6],
		[3834, 59],
		[3841, 55],
		[3848, 13],
		[3855, 5],
		[3862, 5],
		[3869, 19],
		[3883, 1],
		[3890, 14],
		[3897, 14],
		[3904, 95],
		[3911, 31],
		[3918, 132],
		[3925, 46],
		[3932, 40],
		[3939, 162],
		[3946, 63],
		[3953, 16],
		[3960, 4],
		[3967, 18],
		[3974, 13],
		[3981, 9],
		[3988, 7],
		[3995, 29],
		[4002, 18],
		[4009, 7],
		[4016, 23],
		[4023, 19],
		[4030, 6],
		[4037, 11],
		[4044, 14],
		[4051, 12],
		[4058, 7],
		[4065, 132],
		[4072, 39],
		[4079, 3],
		[4086, 17],
		[4093, 15],
		[4100, 15],
		[4107, 5],
		[4114, 10],
		[4121, 14],
		[4128, 11],
		[4135, 9]
	],
	"esm": true,
	"cjs": false
}
