{
	"name": "svelte-remote-bind",
	"description": "Bind Svelte objects to remote endpoints, auto-saving changes.",
	"repo_url": "https://github.com/yellowmachine/svelte-remote-bind",
	"authors": ["yellow.machine"],
	"homepage": "https://github.com/yellowmachine/svelte-remote-bind#readme",
	"downloads": 6,
	"updated": "2022-07-02T18:16:07.407Z",
	"tags": ["integration"],
	"github_stars": 0,
	"typescript": true,
	"version": "0.0.9",
	"svelte_range": "^3.44.0",
	"kit_range": "next",
	"last_rune_check_version": "0.0.9",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-remote-bind",
				"version": "0.0.9",
				"size": 55191
			},
			{
				"name": "@xstate/svelte",
				"version": "2.1.0",
				"size": 17635
			},
			{
				"name": "deep-equal",
				"version": "2.2.3",
				"size": 90347
			},
			{
				"name": "array-buffer-byte-length",
				"version": "1.0.2",
				"size": 12007
			},
			{
				"name": "call-bound",
				"version": "1.0.4",
				"size": 17106
			},
			{
				"name": "call-bind-apply-helpers",
				"version": "1.0.2",
				"size": 15952
			},
			{
				"name": "es-errors",
				"version": "1.3.0",
				"size": 12324
			},
			{
				"name": "function-bind",
				"version": "1.1.2",
				"size": 31427
			},
			{
				"name": "get-intrinsic",
				"version": "1.3.0",
				"size": 46542
			},
			{
				"name": "es-define-property",
				"version": "1.0.1",
				"size": 10217
			},
			{
				"name": "es-object-atoms",
				"version": "1.1.1",
				"size": 11442
			},
			{
				"name": "get-proto",
				"version": "1.0.1",
				"size": 10840
			},
			{
				"name": "dunder-proto",
				"version": "1.0.1",
				"size": 13003
			},
			{
				"name": "gopd",
				"version": "1.2.0",
				"size": 9869
			},
			{
				"name": "has-symbols",
				"version": "1.1.0",
				"size": 23409
			},
			{
				"name": "hasown",
				"version": "2.0.2",
				"size": 8765
			},
			{
				"name": "math-intrinsics",
				"version": "1.1.0",
				"size": 17323
			},
			{
				"name": "is-array-buffer",
				"version": "3.0.5",
				"size": 16118
			},
			{
				"name": "call-bind",
				"version": "1.0.8",
				"size": 22902
			},
			{
				"name": "set-function-length",
				"version": "1.2.2",
				"size": 14747
			},
			{
				"name": "define-data-property",
				"version": "1.1.4",
				"size": 30851
			},
			{
				"name": "has-property-descriptors",
				"version": "1.0.2",
				"size": 10911
			},
			{
				"name": "es-get-iterator",
				"version": "1.1.3",
				"size": 31633
			},
			{
				"name": "is-arguments",
				"version": "1.2.0",
				"size": 32731
			},
			{
				"name": "has-tostringtag",
				"version": "1.0.2",
				"size": 17603
			},
			{
				"name": "is-map",
				"version": "2.0.3",
				"size": 20412
			},
			{
				"name": "is-set",
				"version": "2.0.3",
				"size": 19707
			},
			{
				"name": "is-string",
				"version": "1.1.1",
				"size": 24001
			},
			{
				"name": "isarray",
				"version": "2.0.5",
				"size": 3430
			},
			{
				"name": "stop-iteration-iterator",
				"version": "1.1.0",
				"size": 11646
			},
			{
				"name": "internal-slot",
				"version": "1.1.0",
				"size": 23009
			},
			{
				"name": "side-channel",
				"version": "1.1.0",
				"size": 21545
			},
			{
				"name": "object-inspect",
				"version": "1.13.4",
				"size": 102920
			},
			{
				"name": "side-channel-list",
				"version": "1.0.0",
				"size": 14741
			},
			{
				"name": "side-channel-map",
				"version": "1.0.1",
				"size": 13348
			},
			{
				"name": "side-channel-weakmap",
				"version": "1.0.2",
				"size": 14667
			},
			{
				"name": "is-date-object",
				"version": "1.1.0",
				"size": 24172
			},
			{
				"name": "is-regex",
				"version": "1.2.1",
				"size": 35732
			},
			{
				"name": "is-shared-array-buffer",
				"version": "1.0.4",
				"size": 17117
			},
			{
				"name": "object-is",
				"version": "1.1.6",
				"size": 27025
			},
			{
				"name": "define-properties",
				"version": "1.2.1",
				"size": 12890
			},
			{
				"name": "object-keys",
				"version": "1.1.1",
				"size": 26544
			},
			{
				"name": "object.assign",
				"version": "4.1.7",
				"size": 78300
			},
			{
				"name": "regexp.prototype.flags",
				"version": "1.5.4",
				"size": 44310
			},
			{
				"name": "set-function-name",
				"version": "2.0.2",
				"size": 16720
			},
			{
				"name": "functions-have-names",
				"version": "1.2.3",
				"size": 16715
			},
			{
				"name": "which-boxed-primitive",
				"version": "1.1.1",
				"size": 19278
			},
			{
				"name": "is-bigint",
				"version": "1.1.0",
				"size": 17895
			},
			{
				"name": "has-bigints",
				"version": "1.1.0",
				"size": 14802
			},
			{
				"name": "is-boolean-object",
				"version": "1.2.2",
				"size": 26486
			},
			{
				"name": "is-number-object",
				"version": "1.1.1",
				"size": 25184
			},
			{
				"name": "is-symbol",
				"version": "1.1.1",
				"size": 27042
			},
			{
				"name": "safe-regex-test",
				"version": "1.1.0",
				"size": 11917
			},
			{
				"name": "which-collection",
				"version": "1.0.2",
				"size": 20064
			},
			{
				"name": "is-weakmap",
				"version": "2.0.2",
				"size": 20571
			},
			{
				"name": "is-weakset",
				"version": "2.0.4",
				"size": 19794
			},
			{
				"name": "which-typed-array",
				"version": "1.1.19",
				"size": 43913
			},
			{
				"name": "available-typed-arrays",
				"version": "1.0.7",
				"size": 20380
			},
			{
				"name": "possible-typed-array-names",
				"version": "1.1.0",
				"size": 9698
			},
			{
				"name": "for-each",
				"version": "0.3.5",
				"size": 23915
			},
			{
				"name": "is-callable",
				"version": "1.2.7",
				"size": 28950
			},
			{
				"name": "lodash.clonedeep",
				"version": "4.5.0"
			},
			{
				"name": "typescript",
				"version": "4.9.5",
				"size": 66849652
			},
			{
				"name": "xstate",
				"version": "4.38.3",
				"size": 793710
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2],
			[2, 3],
			[3, 4],
			[4, 5],
			[5, 6],
			[5, 7],
			[4, 8],
			[8, 5],
			[8, 9],
			[8, 6],
			[8, 10],
			[10, 6],
			[8, 7],
			[8, 11],
			[11, 12],
			[12, 5],
			[12, 6],
			[12, 13],
			[11, 10],
			[8, 13],
			[8, 14],
			[8, 15],
			[15, 7],
			[8, 16],
			[3, 17],
			[17, 18],
			[18, 5],
			[18, 9],
			[18, 8],
			[18, 19],
			[19, 20],
			[20, 9],
			[20, 6],
			[20, 13],
			[19, 6],
			[19, 7],
			[19, 8],
			[19, 13],
			[19, 21],
			[21, 9],
			[17, 4],
			[17, 8],
			[2, 18],
			[2, 22],
			[22, 18],
			[22, 8],
			[22, 14],
			[22, 23],
			[23, 4],
			[23, 24],
			[24, 14],
			[22, 25],
			[22, 26],
			[22, 27],
			[27, 4],
			[27, 24],
			[22, 28],
			[22, 29],
			[29, 6],
			[29, 30],
			[30, 6],
			[30, 15],
			[30, 31],
			[31, 6],
			[31, 32],
			[31, 33],
			[33, 6],
			[33, 32],
			[31, 34],
			[34, 4],
			[34, 6],
			[34, 8],
			[34, 32],
			[31, 35],
			[35, 4],
			[35, 6],
			[35, 8],
			[35, 32],
			[35, 34],
			[2, 8],
			[2, 23],
			[2, 17],
			[2, 36],
			[36, 4],
			[36, 24],
			[2, 37],
			[37, 4],
			[37, 13],
			[37, 24],
			[37, 15],
			[2, 38],
			[38, 4],
			[2, 28],
			[2, 39],
			[39, 18],
			[39, 40],
			[40, 20],
			[40, 21],
			[40, 41],
			[2, 41],
			[2, 42],
			[42, 18],
			[42, 4],
			[42, 40],
			[42, 10],
			[42, 14],
			[42, 41],
			[2, 43],
			[43, 18],
			[43, 40],
			[43, 6],
			[43, 11],
			[43, 13],
			[43, 44],
			[44, 20],
			[44, 6],
			[44, 45],
			[44, 21],
			[2, 31],
			[2, 46],
			[46, 47],
			[47, 48],
			[46, 49],
			[49, 4],
			[49, 24],
			[46, 50],
			[50, 4],
			[50, 24],
			[46, 27],
			[46, 51],
			[51, 4],
			[51, 14],
			[51, 52],
			[52, 4],
			[52, 6],
			[52, 37],
			[2, 53],
			[53, 25],
			[53, 26],
			[53, 54],
			[53, 55],
			[55, 4],
			[55, 8],
			[2, 56],
			[56, 57],
			[57, 58],
			[56, 18],
			[56, 4],
			[56, 59],
			[59, 60],
			[56, 11],
			[56, 13],
			[56, 24],
			[0, 61],
			[0, 62],
			[0, 63]
		],
		"circular": []
	},
	"readme": "# svelte-remote-bind\n\nThis is a svelte-kit project, so to see the demo working: ```yarn dev```.\n\n[Demo](https://svelte-remote-bind.surge.sh)\n\nThe aim of this project is to bind an object to a remote endpoint so a POST or PUT is done automatically while typing. There's a state machine with states: idle, debouncing, saving, error and saved.\n\nYou can even have related entities, like parent and child, and if a child is created, the array parent field is updated remotely. For example a person have an array of owned cats, and that person buys a new cat.\n\n```svelte\n//person.svelte\n<script>\nlet person = {name: 'yellowman', cats: []}\n\nfunction addCat(cat){\n    person.cats = [...person.cats, cat]\n}\n\nconst { update} = useRemoteBind({id: 1, bind: 'endpoint:person'})\n\n$: update(person)\n</script>\n\n<div>Buy a new cat</div>\n\n<Cat onCreated={addCat} />\n\n<div>\n    <span>Cats of yellow man:</span>\n    <ul>\n\t{#each person.cats as cat}\n\t\t<li>\n\t\t\t{cat.id}, {cat.name}\n\t\t</li>\n\t{/each}\n    </ul>\n</div>\n```\n\n```svelte\n// cat.svelte\n<script>\nexport let onCreated;\n\nlet cat = {name: '', age: 1 } \n\nconst {state, flush, errors, update, reset} = useRemoteBind({onCreated, bind: 'endpoint:cat'})\n\n$: update(cat)\n</script>\n\n<div>\n    Name: <input type=\"text\" bind:value={cat.name} />\n    Age: <input type=\"number\" bind:value={cat.age} />\n    {#if $state.value === 'debouncing'}\n        <button on:click={flush}>Save!</button>\n    {/if}\n    <button on:click={reset}>Reset</button>\n</div>\n```\n\nThe rest of the code would be:\n\n```svelte\n<script lang=\"ts\">\n    import Person from './person.svelte';\n    import { setContext } from 'svelte';\n    import { create, test, enforce } from 'vest';\n\n    //vest for example for validation\n    const suite = create((data = {}) => {\n        test('name', 'Name is required', () => {\n            enforce(data.name).isNotBlank();\n        });\n\n        test('age', 'Age is required', () => {\n            enforce(data.age).isNotBlank();\n        });\n\n        test('age', 'Age is a number', () => {\n            enforce(data.age).isNumeric();\n        });\n\n    });\n\n    let endpoint = {\n        fetch: async ({id, url, headers, method, body, entitySchema}) => {\n            //entitySchema is useful when doing a GraphQL query \n            //example:\n            const query = method === 'POST' ? entitySchema.addQuery : entitySchema.updateQuery;\n            const variables = // create with id and body\n            const response = await GraphQLClient.fetch({url, query, headers, variables});\n            return entitySchema.key(response)\n        },\n        debounceTime: 1000, //default to 1000\n        token: async () => \"Bearer ABC\", //default to null\n        name: \"endpoint\",\n        baseUrl: \"https://my-backend/api\",\n        entities: {\n            person: {\n                path: \"/person\", \n                transform: (data) => {\n                    return {...data, cats: data.cats.map(x=>x.id)}\n                }\n                ...\n            },\n            cat: {\n                path: \"/cat\", //default to \"\"\n                addQuery: ...,\n                updateQuery: ...,\n                validation: (data) => suite(data).isValid(), //default to () => true\n                errors: (data) => suite(data).getErrors(), //default to () => ({})\n                key: (data) => data.cat.id //default to \"id\"\n            }\n        }\n    }\n\n    setContext(\"remoteBindEndpoints\", {\n        endpoint\n    }); \n\n</script>\n\n<Person />\n```\n\nThis is an alternative (not recommended and maybe will not exist on production ready package):\n\n```svelte\n<RemoteForm remoteBind=\"endpoint:cat\" bind:item={cat} let:state let:errors let:flush >\n    Name: <input type=\"text\" bind:value={cat.name} />\n    Age: <input type=\"number\" bind:value={cat.age} />\n</RemoteForm>\n```\n\nImplementation: The actual implementation is with [xstate](https://xstate.js.org/).\n\n[Link to state machine](https://stately.ai/viz/f439b6a7-9ede-4efc-96f7-6f34acc4261f)\n\nThe example uses [vest](https://vestjs.dev/) to validate forms.\n\nTODO:\n\na demo with a model (one source of truth) like \n\n```js\nlet person = {\n    id: 9,\n    name: 'yellow man',\n    cats: [{name: 'fuffy', age: 1}]\n}\n```\n\nand the svelte files *person.svelte*, *catList.svelte* and *cat.svelte*. If you add or remove a cat, person triggers automatically a save, but not when you change the name of an owned cat. \n\nThere's no need to add extra functionality to the package to do that demo. The key is to have:\n\n```js\ntransform: (data) => {\n    return {...data, cats: data.cats.map(x => x.id).filter(x => x !== undefined)}\n}\n...\n\nfunction onCreatedCat(cat){\n    //update the cat in the array without id\n    person.cats[0].id = cat.id\n    person = person\n}\n...\n//so you guess there's a need to unsifht a cat clicking on a button for example inside catList\n```\n\nTo run tests:\n\n```bash\nyarn test\n```\n\n### Contributors\n\n<table>\n<tr>\n    <td align=\"center\" style=\"word-wrap: break-word; width: 150.0; height: 150.0\">\n        <a href=https://github.com/yellowmachine>\n            <img src=https://avatars.githubusercontent.com/u/107049630?v=4 width=\"100;\"  style=\"border-radius:50%;align-items:center;justify-content:center;overflow:hidden;padding-top:10px\" alt=yellowmachine/>\n            <br />\n            <sub style=\"font-size:14px\"><b>yellowmachine</b></sub>\n        </a>\n    </td>\n</tr>\n</table>\n\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 10],
		[3603, 11],
		[3610, 9],
		[3617, 9],
		[3624, 1],
		[3645, 1],
		[3652, 1],
		[3659, 1],
		[3666, 10],
		[3673, 3],
		[3680, 1],
		[3701, 1],
		[3715, 1],
		[3729, 1],
		[3736, 9],
		[3750, 1],
		[3757, 3],
		[3764, 2],
		[3778, 4],
		[3792, 2],
		[3799, 2],
		[3806, 1],
		[3827, 1],
		[3834, 1],
		[3841, 1],
		[3848, 2],
		[3855, 46],
		[3876, 1],
		[3890, 10],
		[3897, 2],
		[3904, 2],
		[3918, 1],
		[3925, 2],
		[3953, 1],
		[3960, 1],
		[3967, 1],
		[3974, 1],
		[3995, 1],
		[4009, 1],
		[4016, 9],
		[4023, 1],
		[4030, 9],
		[4037, 6],
		[4044, 11],
		[4051, 6],
		[4058, 1],
		[4065, 1],
		[4100, 28],
		[4107, 1],
		[4114, 6],
		[4121, 20],
		[4128, 4]
	],
	"esm": true,
	"cjs": false
}
