{
	"name": "svelte-optimistic-store",
	"description": "Manage optimistic state updates in Svelte stores.",
	"repo_url": "https://github.com/Der-Penz/svelte-optimistic-store",
	"authors": ["derpenz"],
	"homepage": "https://github.com/Der-Penz/svelte-optimistic-store#readme",
	"downloads": 7,
	"updated": "2023-09-12T12:25:43.147Z",
	"tags": ["miscellaneous"],
	"github_stars": 12,
	"typescript": true,
	"version": "0.0.3",
	"svelte_range": "^4.0.0",
	"kit_range": "^1.20.4",
	"last_rune_check_version": "0.0.3",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-optimistic-store",
				"version": "0.0.3",
				"size": 11473
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "[![Svelte v4](https://img.shields.io/badge/svelte-v4-orange.svg)](https://svelte.dev)\n[![npm](https://img.shields.io/npm/v/svelte-optimistic-store.svg)](https://www.npmjs.com/package/svelte-optimistic-store)\n[![License](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![downloads](http://img.shields.io/npm/dm/svelte-optimistic-store.svg?style=flat-square)](https://npmjs.org/package/svelte-optimistic-store)\n\n# svelte-optimistic-store\n\nStore to handle optimistic values in svelte\n\nInspired by reacts useOptimistic Hook\n\n## Installation\n\n```bash\n# install the dependence\nnpm i svelte-optimistic-store\n```\n\n## Api\n\n**optimistic**\n\nCreates a writable store which can handle optimistic updates.\n\n- `initialValue`: value of the store on initialization\n\nReturns a store with these properties:\n\n- `subscribe`: subscribe method to get the current value of the store\n- `update`: update method, either optimistic or just like a basic writable store\n- `set`: basic set method like a writable store\n- `isOptimistic`: readonly store to know if the current value of the store is optimistic or not\n- `cancel`: cancel an optimistic update\n\n## Usage\n\n```ts\n// create a optimistic store with a default value\nimport { optimistic } from 'svelte-optimistic-store';\n\nconst likeStore = optimistic(1);\n\n//update and set the store like always\nlikeStore.set(2);\nlikeStore.update((cur) => cur + 1);\n\n//update asynchronously (after one second store will change)\nlikeStore.update(\n\t(cur) =>\n\t\tnew Promise((res) =>\n\t\t\tsetTimeout(() => {\n\t\t\t\tres(cur + 1);\n\t\t\t}, 1000)\n\t\t)\n);\n\n//update optimistically (after one second store will change to the actual value, but during this second the second argument will be value of the store)\nlikeStore.update(\n\t(cur) =>\n\t\tnew Promise((res) =>\n\t\t\tsetTimeout(() => {\n\t\t\t\tres(cur + 1);\n\t\t\t}, 1000)\n\t\t),\n\t(cur) => cur + 1 // updater function or just a value\n);\n```\n\nA Rejected promise in the updater function will reset the value to its previous state\n\n```ts\n//Value will be set to 2 and after one second back to 1 due to the rejected promise\nlikeStore.update(\n\t(cur) =>\n\t\tnew Promise((res, rej) =>\n\t\t\tsetTimeout(() => {\n\t\t\t\trej();\n\t\t\t}, 1000)\n\t\t),\n\t(cur) => cur + 1\n);\n```\n\nIf you want your optimistic item to have a different type than the normal store type you can provide two generics to the store (e.g if you want a way to distinguish a optimistic array item and add special classes to it). By default the second generic is the same as the first.\n\n```ts\nimport { optimistic } from 'svelte-optimistic-store';\n\ntype Todo = {\n\tid: number;\n\tcontent: string;\n\tdone: boolean;\n};\n\ntype OptimisticTodo = Todo & {\n\toptimistic: true;\n};\n\nconst todoStore = optimistic<Todo[], OptimisticTodo[]>([]);\n\ntodoStore.update(\n\t(cur) =>\n\t\tnew Promise((res) =>\n\t\t\tsetTimeout(() => {\n\t\t\t\tres([...cur, { id: 2, content: 'Write a post', done: false }]);\n\t\t\t}, 1000)\n\t\t),\n\t(cur) => [...cur, { id: 2, content: 'Write a post', done: false, optimistic: true }]\n);\n```\n\nIn your UI you can do something like this now\n\n```ts\n{#each $todoStore as todo }\n\t<div class:ghost={todo.optimistic}>\n\t\t{todo.content}\n\t</div>\n{/each}\n```\n\nYou can cancel an optimistic update by calling cancel. This will reset the value of the store back to its value before making an optimistic update. Note it will also prevent the current asynchronous update to the store.\n\n```ts\nconst likeStore = optimistic(1);\n\n//update optimistically (after one second store will change to the actual value, as long as the update is not canceled)\nlikeStore.update(\n\t(cur) =>\n\t\tnew Promise((res) =>\n\t\t\tsetTimeout(() => {\n\t\t\t\tres(cur + 1);\n\t\t\t}, 1000)\n\t\t),\n\t(cur) => cur + 1 // updater function or just a value\n);\n\n//value will be the optimistic value as long as the update didn't resolve or cancel hasn't been called\nconsole.log(get(likeStore)); // 2\n\n//store will be reset to last value (here 1) and the asynchronous update won't be applied\nlikeStore.cancel();\n\n// after 1 second store will still be 1 and won't update to 2\n\nconsole.log(get(likeStore)); // 1\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 4],
		[3596, 4],
		[3603, 6],
		[3610, 4],
		[3617, 1],
		[3624, 1],
		[3631, 3],
		[3638, 1],
		[3652, 3],
		[3666, 6],
		[3673, 1],
		[3687, 4],
		[3715, 1],
		[3736, 1],
		[3757, 4],
		[3764, 1],
		[3771, 1],
		[3778, 5],
		[3785, 2],
		[3792, 1],
		[3799, 1],
		[3806, 1],
		[3813, 2],
		[3820, 1],
		[3841, 16],
		[3848, 1],
		[3862, 1],
		[3890, 4],
		[3897, 4],
		[3904, 1],
		[3911, 3],
		[3932, 3],
		[3939, 1],
		[3953, 1],
		[3960, 3],
		[3974, 33],
		[3981, 37],
		[3988, 3],
		[3995, 11],
		[4009, 3],
		[4016, 4],
		[4023, 2],
		[4030, 3],
		[4037, 10],
		[4044, 8],
		[4051, 2],
		[4065, 1],
		[4079, 6],
		[4100, 9],
		[4107, 2],
		[4114, 7],
		[4121, 8],
		[4128, 1]
	],
	"esm": true,
	"cjs": false
}
