{
	"name": "sveltekit-session",
	"description": "Manage sessions in SvelteKit applications.",
	"repo_url": "https://github.com/mc-0bit/sveltekit-session",
	"authors": ["mc_0bit"],
	"homepage": "https://github.com/mc-0bit/sveltekit-session",
	"downloads": 9,
	"updated": "2023-04-23T12:49:02.024Z",
	"tags": ["server"],
	"github_stars": 0,
	"typescript": true,
	"version": "0.2.3",
	"svelte_range": "^3.54.0",
	"kit_range": "^1.5.0",
	"last_rune_check_version": "0.2.3",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "sveltekit-session",
				"version": "0.2.3",
				"size": 18514
			},
			{
				"name": "lodash",
				"version": "4.17.21",
				"size": 1412415
			},
			{
				"name": "type-fest",
				"version": "3.13.1",
				"size": 273907
			},
			{
				"name": "uid-safe",
				"version": "2.1.5"
			},
			{
				"name": "random-bytes",
				"version": "1.0.0"
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2],
			[0, 3],
			[3, 4]
		],
		"circular": []
	},
	"readme": "<div align=\"center\">\r\n\t<h1>SvelteKit-Session</h1>\r\n\t<h3>Simple SvelteKit session management.</h3>\r\n\t<a href=\"https://github.com/mc-0bit/sveltekit-session/blob/main/LICENSE\">\r\n\t\t<img alt=\"npm license\" src=\"https://img.shields.io/npm/l/sveltekit-session\">\r\n\t</a>\r\n\t<a href=\"https://www.npmjs.com/package/sveltekit-session\">\r\n\t\t<img alt=\"npm license\" src=\"https://img.shields.io/npm/v/sveltekit-session\">\r\n\t</a>\r\n\t<a href=\"https://github.com/mc-0bit/sveltekit-session/actions\">\r\n\t\t<img alt=\"GitHub Workflow Status\" src=\"https://img.shields.io/github/actions/workflow/status/mc-0bit/sveltekit-session/main.yml\">\r\n\t</a>\r\n</div>\r\n\r\n<br>\r\n\r\n## Installation\r\n\r\n```\r\nnpm install sveltekit-session\r\n```\r\n\r\n`sveltekit-session` offers first class support for redis as a session store. In order to use redis, you need to install `ioredis`.\r\n\r\n```\r\nnpm install sveltekit-session ioredis\r\n```\r\n\r\n## Quickstart\r\n\r\n1. Create an instance of `SessionManager`. This example uses the built-in `RedisStore`.\r\n\r\n   `/src/lib/server/session.ts`\r\n\r\n   ```ts\r\n   import { SessionManager } from 'sveltekit-session';\r\n   import RedisStore from 'sveltekit-session/redis';\r\n   import Redis from 'ioredis';\r\n\r\n   const redisClient = new Redis({ port: 6379, host: 'localhost' });\r\n\r\n   const redisStore = new RedisStore(redisClient); // pass in the redisClient\r\n\r\n   //new SessionManager(sessionOptions: SessionOptions, store: Store, cookieOptions?: CookieOptions)\r\n   export const sessionManager = new SessionManager({ ttl: 60 * 60 * 24 * 7, refreshSession: true }, redisStore, { path: '/' });\r\n   ```\r\n\r\n   See [SessionManager Options](#sessionmanager-options) for more information.\r\n\r\n2. Add the handle hook in `/src/hooks.server.ts`.\r\n\r\n   ```ts\r\n   import type { Handle } from '@sveltejs/kit';\r\n   import { sequence } from '@sveltejs/kit/hooks';\r\n   import { handleSession } from 'sveltekit-session';\r\n   import { sessionManager } from '$lib/server/session';\r\n\r\n   // your handle hook\r\n   export const myHandle = (async ({ event, resolve }) => {\r\n   \tconst session = event.locals.session; // session data is ready to be accessed\r\n   \tconst response = await resolve(event);\r\n   \treturn response;\r\n   }) satisfies Handle;\r\n\r\n   export const handle = sequence(handleSession(sessionManager), myHandle); // make sure to add handleSession before any other hooks that make use of the session\r\n   ```\r\n\r\n   Check out the SvelteKit docs on [sequence](https://kit.svelte.dev/docs/modules#sveltejs-kit-hooks-sequence).\r\n\r\n3. Using SvelteKit-Session is then as simple as this.\r\n\r\n   ```ts\r\n   import { sessionManager } from '$lib/server/session';\r\n\r\n   export const load = async (event) => {\r\n   \t// check if session exists\r\n   \tif (!event.locals.session) {\r\n   \t\tthrow error(401, 'Not logged in');\r\n   \t}\r\n\r\n   \t// create session\r\n   \tawait sessionManager.createSession({ username: 'foo' }, event);\r\n\r\n   \t// use session\r\n   \trequest.locals.session.email = 'bar@baz.com';\r\n\r\n   \t// destroy session\r\n   \trequest.locals.session.destroy();\r\n\r\n   \t// get a list of all sessionIds\r\n   \tawait sessionManager.listSessions();\r\n\r\n   \t// remove specific sessionId from store\r\n   \t// THIS WILL NOT DELETE THE COOKIE. USE session.destroy() INSTEAD\r\n   \tawait sessionManager.deleteSession(sessionId);\r\n\r\n   \t// remove all sessionIds from store\r\n   \tawait sessionManager.deleteAllSessions();\r\n   };\r\n   ```\r\n\r\n<br>\r\n\r\n## Typing your session\r\n\r\nImport the `Session` type and add it to the `App.Locals` interface, then pass your type to the `Session` type.\r\n\r\n`/src/app.d.ts`\r\n\r\n```ts\r\ntype MySessionData = {\r\n\tusername: string;\r\n\temail?: string;\r\n};\r\n\r\ndeclare namespace App {\r\n\tinterface Locals {\r\n\t\tsession?: import('sveltekit-session').Session<MySessionData>;\r\n\t}\r\n}\r\n```\r\n\r\n<br>\r\n\r\n## Custom stores\r\n\r\nCustom stores can be easily created by implementing the `Store` interface.\r\n\r\nCheck out the [RedisStore](https://github.com/mc-0bit/sveltekit-session/tree/main/src/lib/redis.ts) for an example.\r\n\r\n```ts\r\ninterface Store {\r\n\tset(key: string, value: any, ttl?: number): Promise<void>;\r\n\tget(key: string): Promise<unknown>;\r\n\tupdate(key: string, value: any, ttl?: number): Promise<void>;\r\n\tdelete(key: string): Promise<void>;\r\n\tclear(): Promise<void>;\r\n\tkeys(): Promise<string[]>;\r\n}\r\n```\r\n\r\n<br>\r\n\r\n## SessionManager options\r\n\r\n```ts\r\ntype SessionOptions = {\r\n\t/**\r\n\t * Number of seconds until the session expires.\r\n\t */\r\n\tttl: number;\r\n\t/** @defaultValue `true`\r\n\t * If true, the session will be refreshed on every request.\r\n\t */\r\n\trefreshSession?: boolean;\r\n\t/** @defaultValue `sessionId`\r\n\t * The name of the session cookie\r\n\t */\r\n\tname?: string;\r\n};\r\n\r\ntype CookieOptions = Omit<CookieSerializeOptions, 'expires' | 'maxAge'>; // expires and maxAge are automatically set based on the ttl\r\n// Take a look at the @types/cookie package for more information on CookieSerializeOptions\r\n// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/cookie/index.d.ts#L14\r\n```\r\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 2],
		[3603, 14],
		[3610, 14],
		[3624, 7],
		[3645, 8],
		[3652, 13],
		[3666, 18],
		[3673, 3],
		[3687, 4],
		[3694, 1],
		[3701, 1],
		[3715, 2],
		[3722, 1],
		[3743, 15],
		[3750, 2],
		[3757, 2],
		[3764, 1],
		[3771, 1],
		[3778, 1],
		[3785, 2],
		[3792, 1],
		[3799, 2],
		[3806, 1],
		[3820, 4],
		[3834, 17],
		[3841, 84],
		[3848, 3],
		[3855, 5],
		[3862, 5],
		[3869, 5],
		[3876, 4],
		[3883, 2],
		[3890, 22],
		[3897, 8],
		[3904, 16],
		[3911, 3],
		[3918, 5],
		[3925, 1],
		[3932, 5],
		[3939, 4],
		[3946, 1],
		[3953, 5],
		[3960, 7],
		[3967, 4],
		[3974, 3],
		[3981, 2],
		[3988, 2],
		[3995, 2],
		[4016, 18],
		[4023, 1],
		[4037, 21],
		[4044, 16],
		[4051, 14],
		[4065, 8],
		[4072, 2],
		[4079, 4],
		[4086, 1],
		[4093, 1],
		[4100, 43],
		[4107, 4],
		[4114, 9],
		[4121, 15],
		[4128, 10],
		[4135, 8]
	],
	"esm": true,
	"cjs": false
}
