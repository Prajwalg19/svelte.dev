{
	"name": "svelte-tabs-scrollable",
	"description": "Create scrollable tabs with many features for Svelte applications.",
	"repo_url": "Mohammed Aliwi/svelte-tabs-scrollable",
	"authors": ["mood-al"],
	"homepage": "https://github.com/Mood-al/svelte-tabs-scrollable#readme",
	"downloads": 10,
	"updated": "2023-01-05T23:58:35.785Z",
	"tags": ["ui"],
	"typescript": true,
	"version": "0.0.9",
	"svelte_range": "^3.44.0",
	"kit_range": "^1.0.1",
	"last_rune_check_version": "0.0.9",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-tabs-scrollable",
				"version": "0.0.9",
				"size": 38639
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-tabs-scrollable\n\n> A simple svelte scrollable tabs with a lot of additional features and with fully supporting of RTL mode\n> This package is the Svelte version of <a href=\"https://www.npmjs.com/package/react-tabs-scrollable\" target=\"_blank\" rel=\"noopener\"><span>react-tabs-scrollable</span> </a> package!!\n\n[![NPM](https://img.shields.io/npm/v/svelte-tabs-scrollable.svg)](https://www.npmjs.com/package/svelte-tabs-scrollable) [![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)\n\n## Install\n\n```bash\nnpm install --save svelte-tabs-scrollable\nyarn add svelte-tabs-scrollable\n```\n\n## Demo\n\n### <a href=\"https://svelte-tabs-scrollable.vercel.app\" target=\"_blank\" rel=\"noopener\"><span>Demo</span> </a>\n\n## Features\n\n- This package is the svelte version of <code>react-tabs-scrollable </code> package!!\n- Easy to start with it takes you less than minute to start it up!\n- It has many features and so easy to customize\n- Fully support for RTL (actually the reason why I built this component is because RTL)\n- You can control in literally everything inside it\n- Great to use in navigation , menus and lists or any proper use for tabs\n- And much more ..\n\n## Usage\n\n```jsx\n\n<script>\n\n\nimport Tabs from 'svelte-tabs-scrollable/Tabs.svelte';\nimport Tab from 'svelte-tabs-scrollable/Tab.svelte';\n\n// define the initail state of the active tab to start with\nlet activeTab = 10;\n\n</script>\n<Tabs {activeTab} >\n\t{#each [...Array(33).keys()] as item}\n\t\t<Tab>\n\t\t\ttab {item}\n\t\t</Tab>\n\t{/each}\n</Tabs>\n\n```\n\n## Advanced example\n\n```jsx\n\n<script>\n\t// @ts-nocheck\n\n\timport Tabs from 'svelte-tabs-scrollable/Tabs.svelte';\n\timport Tab from 'svelte-tabs-scrollable/Tab.svelte';\n\n\tlet isRTL = false;\n\tconst onClick = () => {\n\t\tisRTL = !isRTL;\n\t};\n\tlet activeTab = 13;\n\tconst onTabClick = (e, index) => {\n\t\tconsole.log(index);\n\t};\n\t$: {\n\t\tif (typeof window !== 'undefined') {\n\t\t\tconst body = window.document.body;\n\t\t\tisRTL ? (body.dir = 'rtl') : (body.dir = 'ltr');\n\t\t}\n\t}\n\tlet goToEnd;\n\tlet goToStart;\n\tlet showTabsScroll = false;\n\tlet hideNavBtns = false;\n\tconst didReachEnd = (val) => {\n\t\t// sets if the tabs reached the end point of the tab's container\n\t};\n\tconst didReachStart = (val) => {\n\t\t// sets if the tabs reached the start point of the tab's container\n\t};\n</script>\n\n<!-- I couldn't add comments between the <Tabs/>'s props -_- -->\n<Tabs\n\t{activeTab}\n\t{onTabClick}\n\tbind:goToEnd\n\tbind:goToStart\n\t{isRTL}\n\t{didReachStart}\n\t{didReachEnd}\n\tscrollSelectedToCenterOfView={false}\n\tscrollSelectedToEndOfView={false}\n\tanimationDuration={300}\n\thideNavBtnsOnMobile={true}\n\t{showTabsScroll}\n\t{hideNavBtns}\n\ttabsClassName=\"ss\"\n\ttabsContainerClassName=\"ss\"\n>\n\t{#each [...Array(33).keys()] as item}\n          <Tab\n            as=\"a\"\n            asProps={{\n                href: '/#',\n                ['data-item']: item\n            }}\n            tabClassName=\"custom-class\">\n            tab {item}\n         </Tab>\n\t{/each}\n</Tabs>\n\n<button on:click={() => goToEnd()}>go to end</button>\n<button on:click={() => goToStart()}>go to start</button>\n<button on:click={onClick}>{isRTL ? 'RTL' : 'LTR'}</button>\n<div style=\"border : 1px solid #000; display: inline-block\">\n\t<input bind:checked={showTabsScroll} type=\"checkbox\" id=\"showTabsScroll\" />\n\t<label for=\"showTabsScroll\"> showTabsScroll : {showTabsScroll} </label>\n</div>\n<div style=\"border : 1px solid #000; display: inline-block\">\n\t<input bind:checked={hideNavBtns} type=\"checkbox\" id=\"hideNavBtns\" />\n\t<label for=\"hideNavBtns\"> hideNavBtns : {hideNavBtns}</label>\n</div>\n```\n\n> You can see the full examples in the <a href=\"https://svelte-tabs-scrollable.vercel.app/demos\" target=\"_blank\" rel=\"noopener\"><span>demos</span></a>'s page\n\n## Tabs' API\n\n<table>\n    <tr>\n        <td>Name</td>\n        <td>Default</td>\n        <td>Type</td>\n        <td>Description</td>\n    </tr>\n    <tr>\n        <td><code>activeTab*</code> </td>\n        <td>-</td>\n        <td>integer</td>\n        <td>the selected tab value which must be passed to the commponent</td>\n    </tr>\n    <tr>\n        <td><code>onTabClick</code></td>\n        <td>-</td>\n        <td>function</td>\n        <td> <code>function(event, value) =&gt; void</code> callback function fires on tab click. It has two props, the first on is the event object the second on is the selected tab value</td>\n    </tr>\n    <!-- <tr>\n        <td><code>action</code></td>\n        <td>-</td>\n        <td>ref</td>\n        <td>react ref fired when the component mounts. It's useful if you want to some functionalities programmatically. It supports 4 function : <br />\n                <div><code>onLeftBtnClick ,onRightBtnClick, goToStart, goToEnd</code></div>\n                <br />  <div><code>onLeftBtnClick</code> : to control the left btn click and use your own navigation button. you can call it by so  <code>ref.onLeftBtnClick()</code> </div> \n        <br/>\n       <div> <code>onRightBtnClick</code> : to control the right btn click and use your own navigation button. you can call it by so  <code>ref.onRightBtnClick()</code> \n         <br/>\n        </div> \n        <br/>\n       <div> <code>goToStart</code> : to control the tabs to go to the start of the tabs container. you can call it by so  <code>ref.goToStart()</code> </div> <br /> \n       <div> <code>goToEnd</code> : to control the tabs to go to the end of the tabs container. you can call it by so  <code>ref.goToEnd()</code> </div> \n        <span></span>\n     </td>\n    </tr> -->\n\t <tr>\n        <td><code>tabsContainerClassName</code></td>\n        <td>-</td>\n        <td> string</td>\n        <td> adds a css class for the tabs' container </td>\n    </tr>\n\t <tr>\n        <td><code>tabsClassName</code></td>\n        <td>-</td>\n        <td> string</td>\n        <td>adds a css class for the tabs </td>\n    </tr>\n    \t <tr>\n        <td><code>onLeftBtnClick</code></td>\n        <td>-</td>\n        <td> function </td>\n        <td>  <code>onLeftBtnClick</code> : a function that scrolls the tabs to the left. to use it you must bind it with the <Tabs /> component like so <code> bind:onLeftBtnClick </code> </code> </td>\n    </tr>\n    \t<tr>\n        <td><code>onRightBtnClick</code></td>\n        <td>-</td>\n        <td> function </td>\n        <td>  <code>onRightBtnClick</code> : a function that scrolls the tabs to the right. to use it you must bind it with the <Tabs /> component like so <code> bind:onRightBtnClick </code> </code> </td>\n    </tr>\n\t <tr>\n        <td><code>goToStart</code></td>\n        <td>-</td>\n        <td> function</td>\n        <td>  <code>goToStart</code> : a function that scrolls to the start of the tabs container. to use it you must bind it with the <Tabs /> component like so <code> bind:goToStart </code> </code> </td>\n    </tr>\n\t </tr>\n        <tr>\n        <td><code>goToEnd</code></td>\n        <td>-</td>\n        <td> function</td>\n        <td>  <code>goToEnd</code> : a function that scrolls to the end of the tabs container. to use it you must bind it with the <Tabs /> component like so <code> bind:goToEnd</code> </code> </td>\n    </tr>\n\t<tr>\n        <tr>\n        <td><code>isRTL</code></td>\n        <td>false</td>\n        <td>boolean</td>\n        <td> sets if the direction of the tabs is RTL or not</td>\n    </tr>\n      </tr>\n        <tr>\n        <td><code>didReachEnd</code></td>\n        <td>-</td>\n        <td>function</td>\n        <td> sets if the tabs reached the end point of the container <code>didReachEnd={(val) => console.log(val)}</code>  </td>\n    </tr>\n       </tr>\n      </tr>\n        <tr>\n        <td><code>didReachStart</code></td>\n        <td>-</td>\n        <td>function</td>\n        <td> sets if the tabs reached the start point of the container <code>didReachStart={(val) => console.log(val)}</code>  </td>\n    </tr>\n     <tr>\n        <td><code>tabsScrollAmount</code></td>\n        <td>3</td>\n        <td>string | integer</td>\n        <td> sets how many tabs you want to scroll on every move <code> tabsScrollAmount={3}</code>  </td>\n    </tr>\n     <tr>\n        <td><code>animationDuration</code></td>\n        <td>300s</td>\n        <td> integer</td>\n        <td>  sets the animation duration of the scroll when you click on the navigation buttons\n               note : this will overwirte the animationDuration value <code> animationDuration={300}</code>  </td>\n    </tr>\n     \n  <tr>\n      <tr>\n        <td><code>rightBtnIcon</code></td>\n        <td>feather arrow-right svg icon</td>\n        <td> Svelte component </td>\n        <td>   sets the right navitgation button icon <code>  rightBtnIcon={SvelteComponent}</code>  </td>\n    </tr>\n     <tr>\n        <td><code>leftBtnIcon</code></td>\n        <td>feather arrow-left svg icon</td>\n        <td> Svelte component </td>\n        <td>   sets the left navitgation button icon <code>  leftBtnIcon={SvelteComponent}</code>  </td>\n    </tr>\n      <tr>\n        <td><code>hideNavBtns</code></td>\n        <td>false</td>\n        <td> boolean</td>\n        <td>  hides the navigantion button <code>  hideNavBtns={false}</code>  </td>\n    </tr>\n       <tr>\n        <td><code>hideNavBtnsOnMobile</code></td>\n        <td>true</td>\n        <td> boolean</td>\n        <td>  hides the navigation buttons on mobile devices  </td>\n    </tr>\n        <tr>\n        <td><code>showTabsScroll</code></td>\n        <td>false</td>\n        <td> boolean</td>\n        <td>  shows the scroll of the tabsn  </td>\n    </tr>\n      </tr>\n        <tr>\n        <td><code>scrollSelectedToCenterOfView</code></td>\n        <td>false</td>\n        <td> boolean</td>\n        <td> scroll the selected tab to the center of the view.\n        I will add examples about it in the demos' page\n        </td>\n    </tr>\n\t </tr>\n        <tr>\n        <td><code>scrollSelectedToEndOfView</code></td>\n        <td>false</td>\n        <td> boolean</td>\n        <td>  scroll the selected tab to the end of the view.  I will add examples about it in the demos' page </td>\n    </tr>\n</table>\n\n## Tab's API\n\n<table>\n    <tr>\n        <td>Name</td>\n        <td>Default</td>\n        <td>Type</td>\n        <td>Description</td>\n    </tr>\n     </tr>\n        <tr>\n        <td><code>as</code></td>\n        <td>button</td>\n        <td> string</td>\n        <td>  You can change the HTML element of the \n<code>\n    Tab\n</code> 's component by passing <code>as=\"a\"</code>.\nthis becomes handy if u wanted to use anchor with href or any custom element.\n\n> Note : if u want to pass props or attribute to the html element u must use <code>asProps</code> prop\n\n</td>\n    </tr>\n     </tr>\n        <tr>\n        <td><code>asProps</code></td>\n        <td>-</td>\n        <td> object</td>\n        <td> You can pass attributes to the element u passed with <code>as</code> prop.\n        For example if you want <code>as=\"a\"</code> and u want to pass <code>href</code> as an attribute.\n        you can use <code>asProps</code> like so <code>asProps={{\n\t\t\t\thref: '/#',\n\t\t\t}}</code>.\n<br />\n<br />\n\n> Note : this prop uses <code><svelte:element {...asProps} /></code> inisde so basically you can pass anything as prop to it!\n\n</td>\n    </tr>\n      <tr>\n        <td><code>tabClassName</code></td>\n        <td><code>sts___tab sts___btn</code></td>\n        <td>string</td>\n        <td>you can pass a custom class to the <code>Tab</code> component</td>\n    </tr>\n    </table>\n<br />\n\n> Please let me see your reviews and if there're any features you want me to add them to the project!\n\n> Dont forget to star the project on GITHUB 0_0\n\n## License\n\nMIT © [Mohammed Aliwi](https://github.com/Mood-al/react-tabs-scrollable)\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 17],
		[3603, 74],
		[3610, 17],
		[3617, 23],
		[3624, 22],
		[3631, 37],
		[3638, 36],
		[3645, 27],
		[3652, 23],
		[3659, 8],
		[3666, 15],
		[3673, 36],
		[3680, 3],
		[3687, 1],
		[3694, 52],
		[3701, 2],
		[3708, 27],
		[3715, 2],
		[3729, 15],
		[3736, 9],
		[3743, 4],
		[3750, 26],
		[3757, 32],
		[3764, 18],
		[3771, 19],
		[3778, 18],
		[3785, 16],
		[3792, 30],
		[3799, 35],
		[3806, 4],
		[3820, 17],
		[3827, 5],
		[3834, 51],
		[3841, 121],
		[3848, 68],
		[3855, 12],
		[3862, 51],
		[3869, 7],
		[3883, 18],
		[3890, 11],
		[3897, 2],
		[3904, 4],
		[3911, 20],
		[3918, 3],
		[3925, 2],
		[3932, 6],
		[3939, 5],
		[3946, 18],
		[3953, 9],
		[3960, 26],
		[3967, 1],
		[3981, 6],
		[3988, 23],
		[3995, 3],
		[4009, 3],
		[4016, 11],
		[4023, 19],
		[4030, 2],
		[4037, 30],
		[4044, 14],
		[4051, 4],
		[4058, 2],
		[4065, 3],
		[4072, 27],
		[4079, 9],
		[4086, 6],
		[4093, 2],
		[4100, 32],
		[4107, 14],
		[4114, 10],
		[4121, 14],
		[4128, 8],
		[4135, 16]
	]
}
