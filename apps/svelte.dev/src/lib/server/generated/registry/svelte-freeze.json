{
	"name": "svelte-freeze",
	"description": "Freeze Svelte components to prevent unnecessary updates.",
	"repo_url": "",
	"authors": ["externdefs"],
	"downloads": 16,
	"updated": "2025-03-28T09:25:34.260Z",
	"tags": ["miscellaneous"],
	"typescript": true,
	"version": "0.1.5",
	"svelte_range": "^5.25.0",
	"kit_range": "^2.20.2",
	"last_rune_check_version": "0.1.5",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-freeze",
				"version": "0.1.5",
				"size": 9378
			},
			{
				"name": "runed",
				"version": "0.25.0",
				"size": 104008
			},
			{
				"name": "esm-env",
				"version": "1.2.2",
				"size": 3784
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2]
		],
		"circular": []
	},
	"readme": "# svelte-freeze\n\nProvides freeze-like functionality.\n\n## What is this?\n\nSvelte currently lacks an equivalent to React's Suspense boundaries. While Suspense is often\nassociated with data fetching, it serves another crucial purpose: preventing unnecessary updates in\nUI components that aren't currently visible to users, while preserving their local state.\n\nThis is particularly valuable for mobile apps relying on stack navigation, where screens are pushed\nonto a stack but previous screens remain in memory. Without this freezing capability, these hidden\nscreens would continue processing updates and performing potentially expensive computations, even\nthough users can't see them.\n\nsvelte-freeze attempts to address this by providing freeze-aware effects and event handlers for\nlibrary and app developers to use.\n\n## Quick start\n\n#### 1. Replace reactive effects with freeze-aware versions\n\nInstead of using Svelte's built-in `$effect()` and `$effect.pre()` functions, import and use the\nfreeze-aware alternatives:\n\n```svelte\n<script>\n\timport { createEffect } from 'svelte-freeze';\n\n\tlet count = $state(0);\n\n\tonMount(() => {\n\t\tconst interval = setInterval(() => {\n\t\t\tcount += 1;\n\t\t}, 3_000);\n\n\t\treturn () => clearInterval(interval);\n\t});\n\n\tcreateEffect(() => {\n\t\tconsole.log(count);\n\t});\n</script>\n```\n\n#### 2. Control component freezing\n\nWrap components in `<Freeze>` to control their frozen state:\n\n```svelte\n<script>\n\timport { Freeze } from 'svelte-freeze';\n\n\tlet frozen = $state(false);\n</script>\n\n<Freeze {frozen}>\n\t<Component />\n</Freeze>\n```\n\nWhen `frozen` is true, all freeze-aware effects within the component tree will stop executing,\npreserving resources while maintaining component state.\n\n> [!NOTE]  \n> Unlike React's Suspense, svelte-freeze doesn't hide elements from DOM. UI components remain\n> visible but any reactive effects and handlers are frozen. You'll need to handle the visibility of\n> frozen components yourself.\n",
	"legacy_svelte": false,
	"downloads_history": [
		[4093, 214],
		[4100, 181],
		[4107, 11],
		[4114, 16],
		[4121, 17],
		[4128, 12]
	]
}
