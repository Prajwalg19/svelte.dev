{
	"name": "boost-web-forms-svelte",
	"description": "Integrates boost-web-forms library into Svelte components.",
	"repo_url": "https://github.com/lgirma/boost-web-forms-svelte",
	"authors": ["lgirma"],
	"homepage": "https://github.com/lgirma/boost-web-forms-svelte",
	"downloads": 5,
	"updated": "2021-07-01T17:24:30.009Z",
	"tags": ["miscellaneous"],
	"typescript": true,
	"version": "1.9.0",
	"svelte_range": "^3.37.0",
	"last_rune_check_version": "1.9.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "boost-web-forms-svelte",
				"version": "1.9.0",
				"size": 6954
			}
		],
		"dependencies": [],
		"circular": []
	},
	"legacy_svelte": true,
	"readme": "# boost-web-forms-svelte\n\nSvelte component for [boost-web-forms](https://github.com/lgirma/boost-web-forms) library.\n\n## Installation\n\n```shell\nnpm i boost-web-forms-svelte\n```\n\nor \n\n```shell\nyarn add boost-web-forms-svelte\n```\n\n## Quick Start\n\nTo generate the above login form, \n\n1. Create your model:\n\n```javascript\nlet forObj = {\n    email: '',\n    password: '',\n    rememberMe: false\n}\n```\n\n2. Render the form on the DOM:\n\n```jsx\nimport {SvelteForm as Form} from 'boost-web-forms-svelte'\n\n<Form forObject={forObj} />\n```\n\nYou will find the complete login form example [here](https://github.com/lgirma/boost-web-forms-svelte/blob/master/src/App.svelte).\n\n## Setting Options\n\nUse the `options` prop to set options:\n\n```jsx\nconst formConfig = {\n    fieldsConfig: {\n        email: {\n            placeholder: 'email@organization',\n            label: 'Your Email',\n            required: true\n        }\n    }\n}\n<Form forObject={forObj} options={formConfig} />\n```\n\n## Two-way Binding\n\nTo let the form update the `forObject` use svelte's `bind:`\n\n```jsx\n<Form bind:forObject={forObj} />\n```\n\nNow, the forObj gets updated up on every user input.\n\n## Form Submission\n\nUse the `on:submit` event handler to handle form submission\n\n```jsx\nfunction onLogin(e) {\n    // to get the validation result:\n    e.detail.validationResult\n    \n    // to prevent default submission\n    e.detail.preventDefault()\n}\n\n...\n\n<Form ... on:submit={onLogin}>\n```\n\n**Note**: This event is only triggered if the form is valid. To prevent auto-validation set `autoValidate` to false.\n\n```jsx\n<Form ... options={{autoValidate: false}}>\n```\n\n## Validation Result\n\nUp on submission, the form will be automatically validated and `on:validate` will be triggered\n\n```jsx\nfunction onValidate(validationResult) {\n    if (validationResult.detail.hasError)\n}\n\n...\n\n<Form ... on:validate={onValidate} />\n```\n\nConsult the [boost-web-forms](https://github.com/lgirma/boost-web-forms) docs for more.\n\n## Html Attributes\n\nTo set extra html `<form>` attributes ([see](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form)) add them in the `options` prop\n\n```jsx\nlet formConfig = {\n    id: \"form-login\", \n    action: \"login.php\", \n    method: \"post\", \n    novalidate: true\n}\n\n...\n\n<Form options={formConfig} />\n```\n\nRaw HTML field attributes can also be added in the `fieldsConfig` section.\n\nRefer [boost-web-forms docs](https://github.com/lgirma/boost-web-forms) for more details.\n\n## Licesne\n\nISC License",
	"downloads_history": [
		[3589, 1],
		[3596, 4],
		[3610, 2],
		[3617, 1],
		[3645, 2],
		[3659, 1],
		[3666, 3],
		[3673, 1],
		[3694, 1],
		[3715, 4],
		[3722, 1],
		[3743, 2],
		[3764, 2],
		[3771, 4],
		[3778, 1],
		[3792, 2],
		[3799, 1],
		[3806, 1],
		[3820, 1],
		[3841, 2],
		[3848, 1],
		[3855, 10],
		[3862, 2],
		[3869, 1],
		[3883, 1],
		[3897, 1],
		[3904, 2],
		[3911, 2],
		[3918, 1],
		[3932, 1],
		[3946, 2],
		[3967, 1],
		[3988, 1],
		[3995, 1],
		[4023, 1],
		[4030, 7],
		[4037, 2],
		[4044, 3],
		[4051, 2],
		[4058, 1],
		[4065, 2],
		[4072, 1],
		[4093, 9],
		[4100, 1],
		[4114, 5],
		[4121, 5],
		[4128, 4]
	]
}
