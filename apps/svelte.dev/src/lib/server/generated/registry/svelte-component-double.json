{
	"name": "svelte-component-double",
	"description": "Create test doubles for Svelte components.",
	"repo_url": "https://github.com/dirv/svelte-component-double",
	"authors": ["dirv"],
	"homepage": "https://github.com/dirv/svelte-component-double#readme",
	"downloads": 570,
	"updated": "2024-06-03T20:32:17.654Z",
	"tags": ["testing"],
	"github_stars": 7,
	"typescript": false,
	"version": "2.1.0",
	"svelte_range": ">= 3.16",
	"last_rune_check_version": "2.1.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-component-double",
				"version": "2.1.0",
				"size": 17624
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "<p>\n  <a href=\"https://www.npmjs.com/package/svelte-component-double\">\n    <img src=\"https://img.shields.io/npm/v/svelte-component-double.svg\" alt=\"npm version\">\n  </a>\n\n  <a href=\"https://packagephobia.now.sh/result?p=svelte-component-double\">\n    <img src=\"https://packagephobia.now.sh/badge?p=svelte-component-double\" alt=\"install size\">\n  </a>\n\n  <a href=\"https://travis-ci.org/dirv/svelte-component-double\">\n    <img src=\"https://api.travis-ci.org/dirv/svelte-component-double.svg?branch=master\"\n         alt=\"build status\">\n  </a>\n\n  <a href=\"https://github.com/dirv/svelte-component-double/blob/master/LICENSE\">\n    <img src=\"https://img.shields.io/npm/l/svelte-component-double.svg\" alt=\"license\">\n  </a>\n</p>\n\n# svelte-component-double\n\nAn test double for Svelte components. It works with Vitest, Jest and Jasmine.\n\n## Installation\n\nFirst install the package:\n\n```bash\nnpm install --save-dev svelte-component-double\n```\n\n## Vitest setup & usage\n\nCreate a file in your Vite project, named `test/registerSvelteComponentDouble.js`, with the followig content:\n\n```javascript\nimport { expect } from 'vitest';\nimport * as matchers from 'svelte-component-double/vitest';\n\nexpect.extend(matchers);\n\nimport { componentDouble } from 'svelte-component-double';\n\nglobalThis.componentDouble = componentDouble;\n```\n\nThen update your `vi.config.js` file to include this as a setup file for Vitest:\n\n```javascript\nconst config = {\n  ...,\n  test: {\n    ...,\n    setupFiles: [\n      ...,\n      './test/registerSvelteComponentDouble.js'\n    ]\n  }\n}\n```\n\nThen you can begin to write mocked tests like this:\n\n```javascript\nimport {\n\tdescribe,\n\tit,\n\texpect,\n\tbeforeEach,\n\tvi\n} from 'vitest';\nimport {\n\trender,\n\tscreen\n} from '@testing-library/svelte';\nimport Child from './Child.svelte';\nimport Parent from './Parent.svelte';\n\nvi.mock('./Child.svelte', async () => ({\n\tdefault: componentDouble('Child')\n}));\n\ndescribe('Parent component', () => {\n\tbeforeEach(Child.reset);\n\n  it('renders a Child with the right props', () => {\n\t\trender(Parent);\n\n    expect(Child).toBeRenderedWithProps({\n      foo: \"bar\"\n    });\n  });\n});\n```\n\nSince mocks are active for the entire module, you may wish to place mocked tests in a separate test file e.g. `parent.mocks.test.js`, keeping `parent.test.js` free for non-mocked tests.\n\n### Jasmine setup & usage\n\nAdd the following helper in `spec/support/jasmine.json`.\n\n```json\n\"helpers\": [\n  \"../node_modules/svelte-component-double/lib/matchers/jasmine.js\"\n]\n```\n\nYou'll need to use a mocking tool like [babel-plugin-rewire-exports](https://github.com/asapach/babel-plugin-rewire-exports).\n\nIn the example below, `Parent` is the component under test, and `Child` is being spied on.\n\n```javascript\nimport Child, { rewire as rewire$Child, restore } from '../src/Child.svelte';\nimport Parent from '../src/Parent.svelte';\n\nimport { componentDouble } from 'svelte-component-double';\n\ndescribe('Parent component', () => {\n  it('renders a Child', () => {\n    // ensure JSDOM is set up and ready to go\n\n    rewire$Child(componentDouble(Child));\n\n    const el = document.createElement('div');\n    new Parent({ target: el });\n\n    expect(Child).toHaveBeenCalled();\n    expect(el.querySelector(spySelector(Child))).not.toBeNull();\n  });\n});\n```\n\n## Matchers\n\nThe `expect(component)` function has the following matchers available.\n\n| Matcher | Description |\n| -------- | ----------- |\n| `toBeRendered()` | Passes if there was at least one instance of the component instantiated in the current document. |\n| `toBeRenderedIn(container)` | Same but with a specific DOM container instead of | `document.body`. |\n| `toBeRenderedWithProps(props)` | Passes if there was at least one instance of the component instantiated with these exact props. |\n| `toBeRenderedWithPropsIn(props, container)` | Same as above but with a specic DOM container instead of `document.body`. |\n\n## Identifying stubbed DOM elements\n\nA spied/stubbed component will be rendered into the DOM like this:\n\n```html\n<div class=\"spy-ComponentName\" id=\"spy-ComponentName-instanceNumber\" />\n```\n\nYou can use the `selector` function to return a selector that will match *all* instances of a rendered double. So for the example above, calling `spySelector(Child)` will return `\"div[class=spy-Child]\"`.\n\nYou can use the `instanceSelector(n)` to return a selector that matches a specific instance of the component.\n\n## Triggering two-way bindings\n\nIf your stubbed component uses a two-way binding you can trigger that binding to update using the `updateBoundValue` function.\n\nFor example, say you have the component `TagList` which can be used like this:\n\n```html\n<TagList bind:tags={tags} />\n```\n\nThen you can test how your component responds to updates to `tags` like this:\n\n```javascript\nrewire$TagList(componentDouble(TagList));\nmount(<your component that uses TagList>);\n\nTagList.firstInstance().updateBoundValue(\n  component, \"tags\", [\"a\", \"b\", \"c\"]);\n```\n\n**Warning:** `updateBoundValue` has been tested with Svelte version 3.16. It is incompatible with 3.15 and below.\n\n### Component property reference\n\nAll of these functions are available on your component double type.\n\n| Property/function | Type | Description |\n| ----------------- | ---- | ----------- |\n| `instances` | Array of instances | Each instance of the component that has been rendered. |\n| `reset()` | Function | Resets a mocked component between tests. Call this in your `beforeEach` block. |\n| `selector()` | Function | Selector for _all_ instances of this double. |\n| `instanceSelector(n)` | Function | Selector for a single instances of this double. |\n| `findMatching(matchFn)` | Function | Find the call whose props match the `matchFn` predicate |\n| `firstInstance()` | Function | Returns the first instance of a component, which you an then manipulate using functions such as `updateBoundValue` (see note above). |\n| `lastInstance()` | Function | Returns the last instance of a component. |\n| `getInstanceFromElement(domElement)` | Function | Returns the component instance that rendered the given DOM element. |\n| `mountedInstances()` | Function | Returns only the instances that are currently rendered in the DOM. |\n| `propsOfAllInstances()` | Function | Returns an array for props for each of the rendered instance of this component.|\n| `dispatch(event)` | Function | Dispatches an event to the last rendered component. You can also call `dispatch` on individual instances. |\n\n\n## Contributing\n\nAll contributions are welcome. Please feel free to create issues or raise PRs.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 16],
		[3596, 17],
		[3603, 20],
		[3610, 62],
		[3617, 103],
		[3624, 108],
		[3631, 61],
		[3638, 6],
		[3645, 18],
		[3652, 51],
		[3659, 28],
		[3666, 92],
		[3673, 163],
		[3680, 262],
		[3687, 173],
		[3694, 157],
		[3701, 198],
		[3708, 158],
		[3715, 165],
		[3722, 194],
		[3729, 128],
		[3736, 117],
		[3743, 276],
		[3750, 353],
		[3757, 272],
		[3764, 267],
		[3771, 240],
		[3778, 229],
		[3785, 290],
		[3792, 396],
		[3799, 605],
		[3806, 885],
		[3813, 838],
		[3820, 478],
		[3827, 567],
		[3834, 258],
		[3841, 416],
		[3848, 407],
		[3855, 493],
		[3862, 367],
		[3869, 448],
		[3876, 259],
		[3883, 240],
		[3890, 283],
		[3897, 413],
		[3904, 469],
		[3911, 478],
		[3918, 573],
		[3925, 468],
		[3932, 389],
		[3939, 557],
		[3946, 477],
		[3953, 386],
		[3960, 473],
		[3967, 477],
		[3974, 503],
		[3981, 392],
		[3988, 396],
		[3995, 491],
		[4002, 659],
		[4009, 429],
		[4016, 378],
		[4023, 571],
		[4030, 637],
		[4037, 549],
		[4044, 522],
		[4051, 504],
		[4058, 523],
		[4065, 602],
		[4072, 664],
		[4079, 658],
		[4086, 749],
		[4093, 730],
		[4100, 582],
		[4107, 698],
		[4114, 570],
		[4121, 531],
		[4128, 522]
	]
}
