{
	"name": "@dvcol/svelte-simple-router",
	"description": "Simple, flexible client-side router for Svelte 5 apps.",
	"repo_url": "https://github.com/dvcol/svelte-simple-router",
	"authors": ["dvcol"],
	"homepage": "https://github.com/dvcol/svelte-simple-router",
	"downloads": 105,
	"updated": "2025-05-03T15:52:59.148Z",
	"tags": ["router"],
	"github_stars": 80,
	"typescript": true,
	"version": "2.4.0",
	"svelte_range": ">=5",
	"kit_range": "^2.20.7",
	"last_rune_check_version": "2.4.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@dvcol/svelte-simple-router",
				"version": "2.4.0",
				"size": 254894
			},
			{
				"name": "@dvcol/common-utils",
				"version": "1.29.4",
				"size": 319828
			},
			{
				"name": "pretty-bytes",
				"version": "6.1.1",
				"size": 11276
			},
			{
				"name": "uuid",
				"version": "11.1.0",
				"size": 132894
			},
			{
				"name": "@dvcol/svelte-utils",
				"version": "1.17.1",
				"size": 51160
			},
			{
				"name": "svelte",
				"version": "5.28.2",
				"size": 2426223
			},
			{
				"name": "@ampproject/remapping",
				"version": "2.3.0",
				"size": 78946
			},
			{
				"name": "@jridgewell/gen-mapping",
				"version": "0.3.8",
				"size": 81596
			},
			{
				"name": "@jridgewell/set-array",
				"version": "1.2.1",
				"size": 17945
			},
			{
				"name": "@jridgewell/sourcemap-codec",
				"version": "1.5.0",
				"size": 112815
			},
			{
				"name": "@jridgewell/trace-mapping",
				"version": "0.3.25",
				"size": 169330
			},
			{
				"name": "@jridgewell/resolve-uri",
				"version": "3.1.2",
				"size": 53153
			},
			{
				"name": "@types/estree",
				"version": "1.0.7",
				"size": 26147
			},
			{
				"name": "acorn",
				"version": "8.14.1",
				"size": 547473
			},
			{
				"name": "@sveltejs/acorn-typescript",
				"version": "1.0.5",
				"size": 197476
			},
			{
				"name": "aria-query",
				"version": "5.3.2",
				"size": 176114
			},
			{
				"name": "axobject-query",
				"version": "4.1.0",
				"size": 110878
			},
			{
				"name": "clsx",
				"version": "2.1.1",
				"size": 8555
			},
			{
				"name": "esm-env",
				"version": "1.2.2",
				"size": 3784
			},
			{
				"name": "esrap",
				"version": "1.4.6",
				"size": 50818
			},
			{
				"name": "is-reference",
				"version": "3.0.3",
				"size": 3953
			},
			{
				"name": "locate-character",
				"version": "3.0.0",
				"size": 5325
			},
			{
				"name": "magic-string",
				"version": "0.30.17",
				"size": 467464
			},
			{
				"name": "zimmerframe",
				"version": "1.1.2",
				"size": 12266
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[1, 3],
			[0, 4],
			[4, 1],
			[4, 5],
			[5, 6],
			[6, 7],
			[7, 8],
			[7, 9],
			[7, 10],
			[10, 11],
			[10, 9],
			[6, 10],
			[5, 9],
			[5, 12],
			[5, 13],
			[5, 14],
			[5, 15],
			[5, 16],
			[5, 17],
			[5, 18],
			[5, 19],
			[19, 9],
			[5, 20],
			[20, 12],
			[5, 21],
			[5, 22],
			[22, 9],
			[5, 23],
			[0, 5]
		],
		"circular": []
	},
	"legacy_svelte": false,
	"readme": "<h1 align=\"center\">Welcome to <i>Svelte Simple Router</i></h1>\n<h3 align=\"center\">A simple and flexible SPA router for svelte 5</h3>\n\n<p>\n  <img src=\"https://img.shields.io/badge/pnpm-%3E%3D8.0.0-blue.svg\" />\n  <img src=\"https://img.shields.io/badge/node-%3E%3D20.0.0-blue.svg\" />\n  <a href=\"https://github.com/dvcol/svelte-simple-router#readme\" target=\"_blank\">\n    <img alt=\"Documentation\" src=\"https://img.shields.io/badge/documentation-yes-brightgreen.svg\" />\n  </a>\n  <a href=\"https://github.com/dvcol/svelte-simple-router/graphs/commit-activity\" target=\"_blank\">\n    <img alt=\"Maintenance\" src=\"https://img.shields.io/badge/Maintained%3F-yes-green.svg\" />\n  </a>\n  <a href=\"https://github.com/dvcol/svelte-simple-router/blob/master/LICENSE\" target=\"_blank\">\n    <img alt=\"License: MIT\" src=\"https://img.shields.io/github/license/dvcol/svelte-simple-router\" />\n  </a>\n <a href=\"https://paypal.me/dvcol/5\" target=\"_blank\">\n    <img alt=\"donate\" src=\"https://img.shields.io/badge/Donate%20€-PayPal-brightgreen.svg\" />\n  </a>\n</p>\n\n## Description\n\nSvelte Simple Router is a native Single Page Application (SPA) router for Svelte 5, designed for seamless client-side navigation while leveraging Svelte's reactivity and transitions.\n\nIt supports both History API and hash routing, offering flexible URL management with robust path matching, query parameter handling, and dynamic interpolation. Packed with features like nested views, route guards, lazy loading, dynamic routing, and full integration with Svelte’s Transition API and the View Transitions API, it enables smooth and interactive navigation experiences.\n\nBuilt to be easy to use yet powerful, Svelte Simple Router is the perfect solution for developers looking to add routing to their Svelte applications without unnecessary complexity.\n\n## Prerequisites\n\nNote: Svelte Simple Router is a svelte 5 native library, and will not work with prior versions of svelte.\n\n- svelte >= 5.0.0\n\n## Install\n\n```sh\npnpm add @dvcol/svelte-simple-router\n```\n\n## Getting Started\n\nThe minimal setup requires a `RouterView` component and a list of routes.\n\nThe `RouterView` component will render the component associated with the current route in place.\n\nYou can find a complete example in the [demo app](https://github.com/dvcol/svelte-simple-router/blob/main/demo/App.svelte), or [this playground](https://svelte.dev/playground/4dff6a053c024e729e203b5c37d9029c?version=5.25.10).\n\n```svelte\n<script lang=\"ts\">\n  import type { Route, RouterOptions } from '@dvcol/svelte-simple-router/models';\n\n  import { RouterView } from '@dvcol/svelte-simple-router/components';\n  import GoodbyeComponent from '~/components/goodbye/GoodbyeComponent.svelte';\n  import HelloComponent from '~/components/hello/HelloComponent.svelte';\n\n  const RouteName = {\n    Hello: 'hello',\n    Goodbye: 'goodbye',\n    Home: 'home',\n    Any: 'any',\n  } as const;\n\n  type RouteNames = (typeof RouteName)[keyof typeof RouteName];\n\n  const routes: Readonly<Route<RouteNames>[]> = [\n    {\n      name: RouteName.Home,\n      path: '/',\n      redirect: {\n        name: RouteName.Hello,\n      },\n    },\n    {\n      name: RouteName.Hello,\n      path: `/${RouteName.Hello}`,\n      component: HelloComponent,\n    },\n    {\n      name: RouteName.Goodbye,\n      path: `/${RouteName.Goodbye}`,\n      component: GoodbyeComponent,\n    },\n    {\n      name: RouteName.Any,\n      path: '*',\n      redirect: {\n        name: RouteName.Hello,\n      },\n    },\n  ] as const;\n\n  const options: RouterOptions<RouteNames> = {\n    routes,\n  } as const;\n\n</script>\n\n<RouterView {options} />\n```\n\n## Advanced Usage\n\n- [Router Context](#router-context)\n- [Debuggers](#debuggers)\n- [Nested routes](#nested-routes)\n- [Router transition](#router-transition)\n  - [Svelte transition](#svelte-transition)\n  - [View Transition API](#view-transition-api)\n- [Dom actions](#dom-actions)\n  - [Link action](#link-action)\n  - [Links action](#links-action)\n  - [Active action](#active-action)\n- [Programmatic navigation](#programmatic-navigation)\n  - [Hooks](#hooks)\n  - [Router instance](#router-instance)\n  - [Outside component tree](#outside-component-tree)\n- [Dynamic routes](#dynamic-routes)\n- [Guards and listeners](#guards-and-listeners)\n  - [Navigation listeners](#navigation-listeners)\n  - [Loading Listeners](#loading-listeners)\n- [Lazy routing](#lazy-routing)\n- [Routes](#routes)\n- [Router](#router)\n\n### Router Context\n\nThe `RouterContext` component injects the router instance into the component tree.\n\nIt can be used to share a router instance between `RouterView` components without the need to pass it down as a prop.\n\n```svelte\n<script lang=\"ts\">\n  import { RouterContext } from '@dvcol/svelte-simple-router/components';\n</script>\n\n<RouterContext>\n  <!--  children  -->\n</RouterContext>\n```\n\n### Debuggers\n\nThe `RouterDebugger` and `RouteDugger` component will display the current route and router state.\n\nIt can be used to debug the router configuration and the current route.\n\nIt requires to be placed inside a `RouterView` or `RouterContext` component.\n\n```svelte\n<script lang=\"ts\">\n  import { RouterView } from '@dvcol/svelte-simple-router/components';\n  import { RouteDebugger, RouterDebugger } from '@dvcol/svelte-simple-router/components/debug';\n</script>\n\n<RouterView>\n  <RouterDebugger />\n  <RouteDebugger />\n</RouterView>\n```\n\n### Nested routes\n\nThe `RouterView` component can be nested under another `RouterView` or `RouterContext` component.\n\nNamed `RouterView` components can be used to render different components on the same route.\n\nEach `RouterView` grabs the router context from the nearest `RouterContext` or `RouterView` component.\n\nNote: Sibling `RouterView` or `RouterContext` components will instantiate a new router instance.\n\n```svelte\n<script lang=\"ts\">\n  import type { Route, RouterOptions } from '@dvcol/svelte-simple-router/models';\n\n  import { RouterContext, RouterView } from '@dvcol/svelte-simple-router/components';\n  import ChildComponent from '~/components/goodbye/ChildComponent.svelte';\n  import ParentComponent from '~/components/hello/ParentComponent.svelte';\n\n  const RouteName = {\n    Parent: 'parent',\n    Child: 'child',\n  } as const;\n\n  type RouteNames = (typeof RouteName)[keyof typeof RouteName];\n\n  export const routes: Readonly<Route<RouteNames>[]> = [\n    {\n      name: RouteName.Parent,\n      path: `/${RouteName.Parent}`,\n      component: ParentComponent,\n    },\n    {\n      name: RouteName.Nested,\n      path: `/${RouteName.Parent}/${RouteName.Child}`,\n      components: {\n        default: ParentComponent,\n        nested: ChildComponent,\n      },\n    },\n  ] as const;\n\n  export const options: RouterOptions<RouteNames> = {\n    routes,\n  } as const;\n\n</script>\n\n<RouterContext {options}>\n  <RouterView>\n    <!--  will render ParentComponent  -->\n  </RouterView>\n\n  <RouterView name=\"nested\">\n    <!--  will only render ChildComponent on /parent/child, and nothing on /parent -->\n  </RouterView>\n</RouterContext>\n```\n\n### Router transition\n\n#### Svelte transition\n\nThe `RouterView` component can take a `transition` [prop](https://github.com/dvcol/svelte-simple-router/blob/1ca370af1d892f8291d2464145c6a582eeee7438/src/lib/models/router.model.ts#L97-L122) to animate the route transition.\n\nIt wraps the route component in a div with optionals `in` and `out` transitions.\n\nA default fade/scale transition is provided, but you can pass your own [transitions](https://github.com/dvcol/svelte-simple-router/blob/1ca370af1d892f8291d2464145c6a582eeee7438/src/lib/models/router.model.ts#L97-L122).\n\nNote: By default the first enter transition is ignored, you can change this behavior by setting the `skipFirst` option to `false`.\n\n```svelte\n<script lang=\"ts\">\n  import { RouterView } from '@dvcol/svelte-simple-router/components';\n  import { transition } from '@dvcol/svelte-simple-router/utils';\n\n  ...\n</script>\n\n<RouterView {transition} {options} />\n```\n\n#### View Transition API\n\nIf you want to use the [view-transition API](https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API) instead, you can pass a `viewTransitionName` key in the `transition` prop of the `RouterView` component.\n\nIf `viewTransitionName` is a string, it will be used as the `viewTransitionName`, otherwise a unique id will be generated `sr-container-<router-id>-<view-id>`.\n\nThen, you can use one or a combination of lifecycle hooks like `onChange` or `onStart` to trigger transitions.\n\n```svelte\n<script lang=\"ts\">\n  import { onChange, onError, onLoaded } from '@dvcol/svelte-simple-router/router';\n\n  let resolve: () => void;\n\n  const starTransition = () => {\n    const { promise: transition, resolve: end } = Promise.withResolvers<void>();\n    resolve = end;\n\n    const { promise: wait, resolve: start } = Promise.withResolvers<void>();\n    document.startViewTransition(async () => {\n      start();\n      await transition;\n    });\n    return wait;\n  };\n\n  onChange(async () => {\n    if (resolve) resolve();\n    return starTransition();\n  });\n\n  onError(() => resolve?.());\n  onLoaded(() => resolve?.());\n</script>\n```\n\n### Dom actions\n\n#### Link action\n\nThe `link action` intercepts click events on dom elements and triggers a router navigation instead.\n\nThe link action will prevent the default behavior and use the router only if the following conditions are met:\n\n- The element is within a router context\n- The event is a left click or enter key\n- The event does not have a modifier key\n- The target is not an external link (for anchor elements)\n- The target is not a new tab or window (for anchor elements)\n\nAdditionally:\n\n- The action merge data-attributes with the options passed as argument.\n- Passed options have precedence over data-attributes.\n- If attribute expects a JSON object, it will be parsed.\n- If a name or path parameter are provided, they will be used to navigate and href will be ignored.\n- Name takes precedence over path.\n- If the host is not an anchor element, the role and tabindex attributes will be set.\n\nNote: The action requires the router context to be present in the component tree.\n\n```svelte\n<script lang=\"ts\">\n  import { link } from '@dvcol/svelte-simple-router/router';\n</script>\n\n<a href=\"/path/:param?query=value\" use:link>simple link</a>\n<a href='goodbye' name use:link>named link</a>\n<a href='/path/:param' data-query='{\"query\":\"value\"}' use:link>link with query</a>\n<a href='/path/:param' use:link=\"{ params: { param: 'value' } }\">link with params</a>\n<div href='/path/:param' use:link=\"{ params: { param: 'value' } }\">div link</div>\n<button href='/path/:param' use:link=\"{ params: { param: 'value' } }\">button link</button>\n```\n\n#### Links action\n\nThe `links action` intercepts click events on dom elements and upwardly navigate the dom tree until it reaches a link element and triggers a router navigation instead.\n\nThe links action will recognize a parent node as a router link if it satisfies any of the following conditions:\n\n- The element is an anchor element\n- The element has a `data-router-link` attribute\n- The element satisfies the `apply` selector function passed as argument\n\nWhen a node is recognized as a router link, the action will behave as the `link` action (all restrictions apply).\n\nAdditionally:\n\n- The action requires either valid href or data-attributes to navigate.\n- Once the action reaches the host element or the `boundary` element (or selector function), it will stop evaluating the dom tree.\n\nNote: The action requires the router context to be present in the component tree.\nNote: Unlike use:link, use:links does not normalize link attributes (role, tabindex, href).\n\n```svelte\n<script lang=\"ts\">\n  import { links } from '@dvcol/svelte-simple-router/router';\n</script>\n\n<div use:links>\n  <div>\n    <a href=\"/path/:param?query=value\">simple link</a>\n  </div>\n  <div data-router-link data-name=\"Hello\">\n    <span>simple span</span>\n  </div>\n</div>\n```\n\n#### Active action\n\nThe `active action` adds an active state (class, style or attribute) to an element when the route matches.\n\nAdditionally:\n\n- If attached to an anchor element, it will attempt to match the href attribute.\n- If path or name options are provided, they will take precedence over the element attributes.\n- Name always takes precedence over path.\n- When the route un-matches, the original style will be restored.\n\nNote: The action requires the router context to be present in the component tree.\n\n```svelte\n<script lang=\"ts\">\n  import { active } from '@dvcol/svelte-simple-router/router';\n</script>\n\n<a href=\"/path\" use:active>simple link</a>\n<a href=\"/path\" data-name=\"route-name\" use:active>named link</a>\n<button :use:active=\"{ path: '/path' }\">button link</button>\n<div :use:active=\"{ name: 'route-name' }\">div link</div>\n```\n\n### Programmatic navigation\n\n#### Hooks\n\n- `hasRouter` & `useRouter` - Returns the router instance\n\nMust be used within a `RouterView` or `RouterContext`.\n\n```svelte\n<script lang=\"ts\">\n  import { useRouter } from '@dvcol/svelte-simple-router/router';\n\n  const router = useRouter();\n</script>\n```\n\n- `hasView` & `useView` - Returns the view instance\n\nMust be used within a `RouterView`.\n\n```svelte\n<script lang=\"ts\">\n  import { useView } from '@dvcol/svelte-simple-router/router';\n\n  const view = useView();\n</script>\n```\n\n- `useRoute` - Returns the current `route`, `location` and the `routing`state\n\nMust be used within a `RouterView` or `RouterContext`.\n\n```svelte\n<script lang=\"ts\">\n  import { useRoute } from '@dvcol/svelte-simple-router/router';\n\n  const { route, location, routing } = $derived(useRoute());\n\n  const reactiveRoute = $derived(route);\n  const reactiveLocation = $derived(location);\n  const reactiveRoutingState = $derived(routing);\n\n  const pathParams = $derived(location.params);\n  const queryParams = $derived(location.query);\n</script>\n```\n\n- `useNavigate` - Returns utility function to start navigation logic.\n\nMust be used within a `RouterView` or `RouterContext`.\n\n```svelte\n<script lang=\"ts\">\n  import { useNavigate } from '@dvcol/svelte-simple-router/router';\n\n  const { resolve, push, replace, back, forward, go } = useNavigate();\n</script>\n```\n\n- `beforeEach` - Returns a onMount hook that register (and auto-clean) a listener that triggers before each navigation event\n\nMust be used within a `RouterView` or `RouterContext`.\n\n```svelte\n<script lang=\"ts\">\n  import { beforeEach } from '@dvcol/svelte-simple-router/router';\n\n  beforeEach((event) => {\n    console.info('before navigation', event);\n  });\n</script>\n```\n\n- `onStart` - Returns a onMount hook that register (and auto-clean) a listener that triggers at the start of each navigation event\n\nMust be used within a `RouterView` or `RouterContext`.\n\n```svelte\n<script lang=\"ts\">\n  import { onStart } from '@dvcol/svelte-simple-router/router';\n\n  onStart((event) => {\n    console.info('start of navigation', event);\n  });\n</script>\n```\n\n- `onEnd` - Returns a onMount hook that register (and auto-clean) a listener that triggers at the end of each navigation event\n\nMust be used within a `RouterView` or `RouterContext`.\n\n```svelte\n<script lang=\"ts\">\n  import { onEnd } from '@dvcol/svelte-simple-router/router';\n\n  onEnd((event) => {\n    console.info('end of navigation', event);\n  });\n</script>\n```\n\n- `onChange` - Returns a onMount hook that register (and auto-clean) a listener that triggers at the start of a view change.\n\nMust be used within a `RouterView`.\n\n```svelte\n<script lang=\"ts\">\n  import { onChange } from '@dvcol/svelte-simple-router/router';\n\n  onChange((event) => {\n    console.info('start of view change', event);\n  });\n</script>\n```\n\n- `onLoading` - Returns a onMount hook that register (and auto-clean) a listener that triggers when a view start loading an async component.\n\nMust be used within a `RouterView`.\n\n```svelte\n<script lang=\"ts\">\n  import { onLoading } from '@dvcol/svelte-simple-router/router';\n\n  onLoading((event) => {\n    console.info('loading view', event);\n  });\n</script>\n```\n\n- `onLoaded` - Returns a onMount hook that register (and auto-clean) a listener that triggers when a view finish loading a component.\n\nMust be used within a `RouterView`.\n\n```svelte\n<script lang=\"ts\">\n  import { onLoaded } from '@dvcol/svelte-simple-router/router';\n\n  onLoaded((event) => {\n    console.info('view loaded', event);\n  });\n</script>\n```\n\n- `onError` - Returns a onMount hook that register (and auto-clean) a listener that triggers when an error occurs during navigation or view change.\n\nMust be used within a `RouterView`.\n\n```svelte\n<script lang=\"ts\">\n  import { NavigationEvent, onError, ViewChangeEvent } from '@dvcol/svelte-simple-router/router';\n\n  onError((err, event) => {\n    if (event instanceof NavigationEvent) {\n      console.error('Navigation Error', { err, event });\n    } else if (event instanceof ViewChangeEvent) {\n      console.error('View change error', { err, event });\n    } else {\n      console.error('Unknown Error', { err, event });\n    }\n  });\n</script>\n```\n\n- `onViewError` - Returns a onMount hook that register (and auto-clean) a listener that triggers when an error occurs during view change.\n\nMust be used within a `RouterView`.\n\n```svelte\n<script lang=\"ts\">\n  import { onViewError } from '@dvcol/svelte-simple-router/router';\n\n  onViewError((err, event) => {\n    console.error('View change error', { err, event });\n  });\n</script>\n```\n\n- `onRouterError` - Returns a onMount hook that register (and auto-clean) a listener that triggers when an error occurs during navigation.\n\nMust be used within a `RouterView` or `RouterContext`.\n\n```svelte\n<script lang=\"ts\">\n  import { onRouterError } from '@dvcol/svelte-simple-router/router';\n\n  onRouterError((err, event) => {\n    console.error('Navigation error', { err, event });\n  });\n</script>\n```\n\n#### Router instance\n\nFor more complexe usage, you can grab the router instance from the context and call the `push` or `replace` methods.\n\nSee the [router model](https://github.com/dvcol/svelte-simple-router/blob/1ca370af1d892f8291d2464145c6a582eeee7438/src/lib/models/router.model.ts#L482-L501) for more information.\n\n```svelte\n<script lang=\"ts\">\n  import { useRouter } from '@dvcol/svelte-simple-router/router';\n\n  const router = useRouter();\n\n  const onPush = () => {\n    router.push({ path: '/route-path' });\n  };\n\n  const onReplace = () => {\n    router.replace({ name: 'route-name' });\n  };\n</script>\n```\n\n#### Outside component tree\n\nIf you need to access the router instance outside of a component, you can instantiate a router instance and pass it to the `RouterContext` or `RouterView` component.\n\n```ts\nimport { Router } from '@dvcol/svelte-simple-router/router';\n\nexport const router = new Router();\n```\n\n```svelte\n<script lang=\"ts\">\n  import { RouterView } from '@dvcol/svelte-simple-router/components';\n\n  import { router } from './router';\n</script>\n\n<RouterView {router} />\n```\n\nRouter navigation support several [options](https://github.com/dvcol/svelte-simple-router/blob/1ca370af1d892f8291d2464145c6a582eeee7438/src/lib/models/route.model.ts#L28-L60):\n\n- `name` or `path` to navigate to a named or path route.\n- `params` to pass route parameters.\n- `query` to pass query parameters.\n- `state` to pass an history state object.\n- `meta` to pass an arbitrary object to the route (will be merged with the route meta).\n- `title` to set the document title (will override the route title).\n- `stripQuery` to remove current query parameters from the url.\n- `stripHash` to remove the hash from the url (only in path mode).\n- `stripTrailingHash` to remove the trailing hash from the url (only in hash mode).\n\nYou can also override the router's navigation [options](https://github.com/dvcol/svelte-simple-router/blob/1ca370af1d892f8291d2464145c6a582eeee7438/src/lib/models/router.model.ts#L199-L248):\n\n- `base` to set the base path for the router.\n- `hash` to enable hash routing.\n- `strict` to enable strictly match routes (i.e. /path will not match /path/child).\n- `force` to force navigation even if the route is the same.\n- `caseSensitive` to enable case sensitive route names.\n- `failOnNotFound` to throw an error when a route is not found.\n- `metaAsState` to pass the route meta as state when navigating.\n- `nameAsTitle` to set the document title to the route name.\n- `followGuardRedirects` to follow guard redirects.\n\n### Dynamic routes\n\nYou can dynamically [add or remove](https://github.com/dvcol/svelte-simple-router/blob/1ca370af1d892f8291d2464145c6a582eeee7438/src/lib/models/router.model.ts#L387-L411) routes from the router instance.\n\nNote that although the inner route map are reactive, adding or removing routes will not trigger a re-synchronization of the router state.\n\nTo force a re-synchronization, you can call the [`sync` method](https://github.com/dvcol/svelte-simple-router/blob/1ca370af1d892f8291d2464145c6a582eeee7438/src/lib/models/router.model.ts#L453) on the router instance.\n\nYou can also use the `RouteView` component to declare routes dynamically.\nWhen the component is added to the component tree, the routes will be added to the router instance.\nWhen the component is removed from the component tree, the routes will be removed from the router instance.\n\nRouteView can be passed a `route` object and will add it to the closest router instance.\nAdditionally, if the component/components/redirect are missing, it will try to infer them from the component's children and snippets.\nWhen inside a named `RouterView`, the children will be added to the components object under the `name` key (provided or discovered through context).\n\nRouteView supports the same error and loading snippets as the RouterView component.\nIn addition, named children can be passed as snippets to the component and will be injected into the `components` object.\nIf a snippet with the same `name` as the `RouterView` is found, the children will be injected into the `components` object under the `default` key instead.\n\n**Note**:\nInputs are not reactive, so you will need to un-mout and remount the component to trigger a route update.\nIt is recommended to use the router instance directly if you need to frequently update routes.\n\n```svelte\n<script lang=\"ts\">\n  import type { PartialRoute } from '@dvcol/svelte-simple-router/models';\n\n  import { RouterContext, RouterView, RouteView } from '@dvcol/svelte-simple-router/components';\n  import { toLazyComponent } from '@dvcol/svelte-simple-router/utils';\n  import ChildComponent from '~/components/goodbye/ChildComponent.svelte';\n  import ParentComponent from '~/components/hello/ParentComponent.svelte';\n\n  const LazyComponent = toLazyComponent(() => import('./LazyComponent.svelte'));\n\n  const parent: PartialRoute = {\n    name: 'parent',\n    path: '/parent',\n  };\n\n  const child: PartialRoute = {\n    name: 'child',\n    path: '/parent/child',\n  };\n\n</script>\n\n<RouterContext {options}>\n  <RouterView>\n    <RouteView route={parent}>\n      <!-- Will render the children in this 'default' RouterView -->\n      <ParentComponent />\n\n      <!-- Will render this snippet in the 'nested' RouterView -->\n      {#snippet nested()}\n        <ChildComponent />\n      {/snippet}\n    </RouteView>\n  </RouterView>\n\n  <RouterView name=\"nested\">\n    <RouteView route={parent}>\n      <!-- Will render the children in this 'nested' RouterView, and nothing in the default when  on '/parent/child' -->\n      <ChildComponent />\n    </RouteView>\n\n    <!-- Inline example -->\n    <RouteView route={{ path: '/other' }} children={ParentComponent} nested={LazyComponent} />\n  </RouterView>\n</RouterContext>\n```\n\n### Guards and listeners\n\n#### Navigation listeners\n\nThe `route` and `router` supports several navigation guards and listeners:\n\n- [beforeEnter](https://github.com/dvcol/svelte-simple-router/blob/1ca370af1d892f8291d2464145c6a582eeee7438/src/lib/models/route.model.ts#L269) to run before a route is resolved.\n- [beforeLeave](https://github.com/dvcol/svelte-simple-router/blob/1ca370af1d892f8291d2464145c6a582eeee7438/src/lib/models/route.model.ts#L273) to run before a route is removed.\n- [beforeEach](https://github.com/dvcol/svelte-simple-router/blob/1ca370af1d892f8291d2464145c6a582eeee7438/src/lib/models/router.model.ts#L420) to run before any route is resolved.\n\nGuards trigger after url change and before the route component is rendered.\n\nIf a guard returns `false`, and object of instance `Error` or `throws`, the navigation will be aborted and the error will be thrown.\n\nIf a guard returns an object with a `path` or `name` property, the navigation will be redirected to the provided route, if any is found and `followGuardRedirects` is enabled.\n\nThe `router` ([dynamically](https://github.com/dvcol/svelte-simple-router/blob/1ca370af1d892f8291d2464145c6a582eeee7438/src/lib/models/router.model.ts#L422-L447) or through [options](https://github.com/dvcol/svelte-simple-router/blob/1ca370af1d892f8291d2464145c6a582eeee7438/src/lib/models/router.model.ts#L307-L317)) and `RouterView` also support several event listeners:\n\n- `onStart` - executed when the navigation is triggered but before the route is resolved (fires on start and redirects).\n- `onEnd` - executed when the navigation is triggered and the route is resolved (fires on successful and failed navigation, but not on cancelled/redirected).\n- `onError` - executed when the navigation is triggered but an error occurs.\n\nNote: The `onError` listeners passed to a `RouterView` will listen to both the router and view events. If you want to listen to only the router events, you can pass the listeners to the `router` options or instance directly.\n\n#### Loading Listeners\n\nThe `RouterView` supports several view change listeners that triggers once the navigation concludes and the view starts changing.\n\n- `onChange` - executed when a view starts to change.\n- `onLoading` - executed when a view starts loading an async component.\n- `onLoaded` - executed when a view finish loading a component.\n- `onError` - executed when an error occurs during view change.\n\nNote: The `onError` listeners passed to a `RouterView` will listen to both the router and view events. If you want to listen to only the view events, you can pass the listeners to the `view` instance directly.\n\n### Lazy routing\n\nThe `Route` object supports lazy loading of the route component(s).\n\nWhen the `component` property is a lazy import, the router will resolve the matched component before rendering it.\n\nWhile the component is being resolved, the `loading` component will be rendered if any, the `loading` snippet if any, or nothing.\n\nSimilarly, if an error occurs during the component resolution, the `error` component will be rendered if any, the `error` snippet if any, or nothing.\n\nThe router will try to infer if a component is a lazy import by checking it's name (to detect component arrow functions) and it's constructor name (to detect async arrow functions), but for more complex cases, you can use the `toLazyComponent` wrapper.\nNested lazy components require the wrapper to be used or the function to be manually named `component`.\n\n```svelte\n<script lang=\"ts\">\n  import type { Route } from '@dvcol/svelte-simple-router/models';\n\n  import { RouterView } from '@dvcol/svelte-simple-router/components';\n  import { toLazyComponent } from '@dvcol/svelte-simple-router/utils';\n\n  const routes: Readonly<Route[]> = [\n    {\n      name: 'lazy',\n      path: '/lazy',\n      component: () => import('./LazyComponent.svelte'),\n      loading: () => import('./LoadingComponent.svelte'),\n      error: () => import('./ErrorComponent.svelte'),\n    },\n    {\n      name: 'lazy-snippet',\n      path: '/lazy-snippet',\n      component: () => import('./LazyComponent.svelte'),\n    },\n    {\n      name: 'lazy-nested',\n      path: '/lazy-nested',\n      components: {\n        default: async () => import('./LazyComponent.svelte'),\n        nested: toLazyComponent(() => import('./NestedComponent.svelte')),\n      },\n    },\n  ] as const;\n</script>\n\n<RouterView {routes}>\n  {#snippet loading()}\n    <h1>Default Loading...</h1>\n  {/snippet}\n\n  {#snippet error(err)}\n    <h1>Default Error: {err}</h1>\n  {/snippet}\n</RouterView>\n```\n\nNote that loading indicator only trigger once the route has been resolved and not on initial navigation.\nIf you want to show a loading indicator on initial navigation, you can use the `routing` snippet instead.\n\nThis means navigation will be a three-step process:\n\n- The `routing` snippet will be rendered.\n- Then the `loading` component will be rendered.\n- Then the route component or error component will be rendered.\n\n### Routes\n\n- Route path supports parameters. Parameters are defined by a colon followed by the parameter name.\n\n```\n/path/:param\n```\n\n- Parameters can be optional by adding a question mark.\n\n```\n/path/:param:?\n```\n\nParameters can also have a type constraint by adding `:{string}` or `:{number}` before the parameter name.\n\nThe router will only match the route if the parameter matches the type constraint.\n\n```\n/path/:{string}:param:?\n```\n\nWill match `/path/param` but not `/path/1`.\n\n```\n/path/:{number}:param\n```\n\nWill match `/path/1` but not `/path/param`.\n\n- Route support wildcards. The `*` character will match any path segment.\n\n```\n/path/*\n```\n\nWill match `/path/param` and `/path/param/param`.\n\n```\n/path/*/:{number}:param/*\n```\n\nWill match `/path/any/12` and `/path/other/12/path/end`.\n\n- Route can have a [redirect](https://github.com/dvcol/svelte-simple-router/blob/1ca370af1d892f8291d2464145c6a582eeee7438/src/lib/models/route.model.ts#L164-L170) property to redirect to another route (by path or name).\n- Route can have [components, loadings or errors](https://github.com/dvcol/svelte-simple-router/blob/1ca370af1d892f8291d2464145c6a582eeee7438/src/lib/models/route.model.ts#L94-L162) properties to render the route component, loading component or error component respectively (see [lazy-routing](#lazy-routing)).\n- Route can have a [meta](https://github.com/dvcol/svelte-simple-router/blob/1ca370af1d892f8291d2464145c6a582eeee7438/src/lib/models/route.model.ts#L236-L239) property to store additional information attached to the route.\n- Route can have a [title](https://github.com/dvcol/svelte-simple-router/blob/1ca370af1d892f8291d2464145c6a582eeee7438/src/lib/models/route.model.ts#L232-L235) property to set the document title when the route is active (if `nameAsTitle` is enabled).\n- Route can have [default query or params](https://github.com/dvcol/svelte-simple-router/blob/1ca370af1d892f8291d2464145c6a582eeee7438/src/lib/models/route.model.ts#L240-L249) to be used when navigating to the route.\n- Route can have [guard properties](https://github.com/dvcol/svelte-simple-router/blob/1ca370af1d892f8291d2464145c6a582eeee7438/src/lib/models/route.model.ts#L266-L273) to run before the route is resolved (see [guards and listeners](#guards-and-listeners)).\n- Route can provide their own [matcher](https://github.com/dvcol/svelte-simple-router/blob/1ca370af1d892f8291d2464145c6a582eeee7438/src/lib/models/route.model.ts#L265) object to resolve the active route.\n- Route can have [children](https://github.com/dvcol/svelte-simple-router/blob/1ca370af1d892f8291d2464145c6a582eeee7438/src/lib/models/route.model.ts#L257) routes that will be parsed by the router instance.\n\n### Router\n\nIn addition to default navigation options (see [programmatic navigation](#programmatic-navigation)), the router instance supports several [options](https://github.com/dvcol/svelte-simple-router/blob/1ca370af1d892f8291d2464145c6a582eeee7438/src/lib/models/router.model.ts#L256-L318):\n\n- `history` to set the history instance the router will use (defaults to global.history).\n- `location` to set the location instance the router will use (defaults to global.location).\n- `listen` to listen to `popstate` or `navigation` events and trigger synchronization.\n- `priority` to set the priority when multiple routes match the current path.\n- `caseSensitive` to enable case sensitive route names.\n- And various [guards and listeners](#guards-and-listeners).\n\n## Author\n\n- Github: [@dvcol](https://github.com/dvcol)\n\n## Show your support\n\nGive a ⭐️ if this project helped you!\n\n <a href=\"https://paypal.me/dvcol/5\" target=\"_blank\">\n    <img alt=\"donate\" src=\"https://img.shields.io/badge/Donate%20€-PayPal-brightgreen.svg\" />\n</a>\n\n## 📝 License\n\nThis project is [MIT](https://github.com/dvcol/svelte-simple-router/blob/master/LICENSE) licensed.\n\n---\n\n_This README was generated with ❤️ by [readme-md-generator](https://github.com/kefranabg/readme-md-generator)_\n",
	"downloads_history": [
		[3918, 62],
		[3925, 190],
		[3932, 54],
		[3939, 89],
		[3946, 220],
		[3953, 55],
		[3960, 183],
		[3967, 194],
		[3974, 26],
		[3981, 54],
		[3988, 187],
		[3995, 44],
		[4002, 57],
		[4009, 72],
		[4016, 111],
		[4023, 66],
		[4030, 154],
		[4037, 77],
		[4044, 134],
		[4051, 101],
		[4058, 66],
		[4065, 190],
		[4072, 125],
		[4079, 280],
		[4086, 117],
		[4093, 103],
		[4100, 115],
		[4107, 56],
		[4114, 105],
		[4121, 164],
		[4128, 155]
	],
	"esm": true,
	"cjs": false
}
