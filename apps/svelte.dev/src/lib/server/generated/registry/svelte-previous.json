{
	"name": "svelte-previous",
	"description": "Create Svelte stores remembering previous values.",
	"repo_url": "https://github.com/bryanmylee/svelte-previous",
	"authors": ["bryanmylee"],
	"homepage": "https://github.com/bryanmylee/svelte-previous#readme",
	"downloads": 297,
	"updated": "2023-08-10T17:56:01.692Z",
	"tags": ["miscellaneous"],
	"github_stars": 84,
	"typescript": true,
	"version": "2.1.4",
	"svelte_range": "^3.49.0 || ^4",
	"last_rune_check_version": "2.1.4",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-previous",
				"version": "2.1.4",
				"size": 14448
			},
			{
				"name": "svelte",
				"version": "3.59.2",
				"size": 10624206
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "![svelte-previous-banner](https://user-images.githubusercontent.com/42545742/102723346-20ac5700-4342-11eb-978d-222a2f4109d5.png)\n\n# svelte-previous\n\n[![npm version](http://img.shields.io/npm/v/svelte-previous.svg)](https://www.npmjs.com/package/svelte-previous)\n[![npm downloads](https://img.shields.io/npm/dm/svelte-previous.svg)](https://www.npmjs.com/package/svelte-previous)\n![license](https://img.shields.io/npm/l/svelte-previous)\n![build](https://img.shields.io/github/actions/workflow/status/bryanmylee/svelte-previous/publish.yml)\n[![coverage](https://coveralls.io/repos/github/bryanmylee/svelte-previous/badge.svg?branch=master)](https://coveralls.io/github/bryanmylee/svelte-previous?branch=master)\n[![size](https://img.shields.io/bundlephobia/min/svelte-previous)](https://bundlephobia.com/result?p=svelte-previous)\n\nSvelte stores that remember previous values!\n\nThis allows us to perform actions that depend on previous values, such as transitions between old and new values.\n\n## Installation\n\n```bash\n$ npm i -D svelte-previous\n```\n\nSince Svelte automatically bundles all required dependencies, you only need to install this package as a dev dependency with the -D flag.\n\n## Demo\n\nVisit the [REPL demo](https://svelte.dev/repl/1d3e752c51b848e6af264f3244f3e85c?version=3.31.0).\n\n## Usage\n\n`withPrevious` accepts an initial value, and returns a tuple comprising a [Writable](https://svelte.dev/tutorial/writable-stores) and a [Readable](https://svelte.dev/tutorial/readable-stores) store.\n\n```svelte\n<script>\n  import { withPrevious } from 'svelte-previous';\n\n  export let name;\n  // current is writable, while previous is read-only.\n  const [currentName, previousName] = withPrevious(0);\n  // To update the values, assign to the writable store.\n  $: $currentName = name;\n</script>\n\ntransition from {$previousName} to {$currentName}.\n```\n\n## Options\n\n`withPrevious` takes an options object as its second argument.\n\n### `numToTrack: number`\n\nBy default, `withPrevious` tracks one previous value.\n\nTo track more than one value, set `numToTrack`.\n\n```svelte\n<script>\n  const [current, prev1, prev2] = withPrevious(0, { numToTrack: 2 });\n</script>\n\nfrom {$prev2} to {$prev1} to {$current}.\n```\n\n### `initPrevious: T[]`\n\nTo initialize previous values with something besides `null`, pass an array of values from newest to oldest.\n\nMissing values will be filled with `null` and extra values will be ignored.\n\n```svelte\n<script>\n  const [current, prev1, prev2] = withPrevious(0, { numToTrack: 2, initPrevious: [1, 2, 3] })\n</script>\n\nfrom {$prev2} to {$prev1} to {$current}. <!-- from 2 to 1 to 0. -->\n```\n\n### `requireChange: boolean`\n\nDue to how reactivity is handled in Svelte, some assignments may assign the same value multiple times to a variable. Therefore, to prevent a single value from overwriting all previous values, a change in value is required before the current and previous values are updated.\n\nSet `requireChange = false` to change this behaviour.\n\n```ts\nconst [current, previous] = withPrevious(0, { requireChange: false });\n```\n\n### `isEqual: (a: T, b: T) => boolean`\n\nBy default, equality is determined with the `===` operator. However, `===` only checks equality by reference when comparing objects.\n\nProvide a custom `isEqual` function to compare objects.\n\n```ts\nconst [current, previous] = withPrevious(0, {\n  isEqual: (a, b) => a.name === b.name && a.age === b.age,\n});\n```\n\nIt is also possible to use [lodash.isequal](https://www.npmjs.com/package/lodash.isequal).\n\n```ts\nimport isEqual from 'lodash.isequal';\n\nconst [current, previous] = withPrevious(0, {\n  isEqual: isEqual,\n});\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 311],
		[3596, 265],
		[3603, 219],
		[3610, 208],
		[3617, 258],
		[3624, 225],
		[3631, 230],
		[3638, 253],
		[3645, 199],
		[3652, 248],
		[3659, 381],
		[3666, 269],
		[3673, 339],
		[3680, 475],
		[3687, 430],
		[3694, 378],
		[3701, 298],
		[3708, 341],
		[3715, 394],
		[3722, 602],
		[3729, 399],
		[3736, 371],
		[3743, 401],
		[3750, 619],
		[3757, 438],
		[3764, 599],
		[3771, 469],
		[3778, 690],
		[3785, 324],
		[3792, 613],
		[3799, 429],
		[3806, 573],
		[3813, 538],
		[3820, 449],
		[3827, 596],
		[3834, 379],
		[3841, 670],
		[3848, 388],
		[3855, 537],
		[3862, 522],
		[3869, 598],
		[3876, 373],
		[3883, 516],
		[3890, 576],
		[3897, 467],
		[3904, 259],
		[3911, 412],
		[3918, 372],
		[3925, 345],
		[3932, 274],
		[3939, 618],
		[3946, 672],
		[3953, 410],
		[3960, 455],
		[3967, 575],
		[3974, 554],
		[3981, 442],
		[3988, 412],
		[3995, 589],
		[4002, 610],
		[4009, 147],
		[4016, 153],
		[4023, 563],
		[4030, 396],
		[4037, 687],
		[4044, 519],
		[4051, 510],
		[4058, 580],
		[4065, 475],
		[4072, 499],
		[4079, 655],
		[4086, 636],
		[4093, 365],
		[4100, 417],
		[4107, 410],
		[4114, 297],
		[4121, 219],
		[4128, 227]
	],
	"esm": false,
	"cjs": true
}
