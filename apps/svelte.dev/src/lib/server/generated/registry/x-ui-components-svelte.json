{
	"name": "x-ui-components-svelte",
	"description": "Provides suite of customizable UI components for Svelte.",
	"repo_url": "",
	"authors": ["valentinamackovic"],
	"downloads": 4,
	"updated": "2024-08-25T19:10:08.431Z",
	"tags": ["ui"],
	"typescript": true,
	"version": "0.0.6",
	"svelte_range": "^4.2.18",
	"last_rune_check_version": "0.0.6",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "x-ui-components-svelte",
				"version": "0.0.6",
				"size": 307491
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "### Introduction\n\nThis library provides a suite of UI components designed specifically for Svelte. Both ready-to-use and customizable, these components are developed as part of a thesis project and are ideal for development and experimental environments, though they may not yet be suitable for production use.\n\n### Installation\n\nTo integrate these components into your Svelte project, use the following command to install:\n\n```bash\nnpm install x-ui-components-svelte\n```\n\n### Components\n\nThis library features five key components: modal, menu, select, multiselect, and accordion. For detailed documentation, code examples, and live demos, please visit the [documentation site](https://x-ui-components-svelte.netlify.app/).\n\n## Usage Example\n\nBelow is a simple example demonstrating how to use the Menu component:\n\n```js\n<script lang=\"ts\">\nimport { Menu, MenuButton, MenuDropdown, MenuItem } from 'x-ui-components-svelte'\nimport type { Item } from '../../xui/menu/types';\n\nlet isOpen = false;\n\nfunction toggleOpen() {\n    isOpen = !isOpen;\n}\n\nfunction handleItemClick(item: Item) {\n    isOpen = false; // Close the dropdown on item click\n    window.alert('Item clicked ' + item.value)\n}\n</script>\n  \n<Menu>\n    <MenuButton onMenuButtonClick={toggleOpen}>\n    Composable\n    </MenuButton>\n    <MenuDropdown open={isOpen}>\n    <MenuItem \n        onClick={handleItemClick}\n        item={{ id: \"1\", value: \"Action 1\" }}\n    >\n        First Action\n    </MenuItem>\n    </MenuDropdown>\n</Menu>\n```\n\n### API\n\n### Accordion\n\n| Prop Name | Description | Type | Default |\n| :--------- | :----------- | :---- | :------- |\n| `component` | If the value is false only children of the main component will be rendered | `boolean` | `false` |\n| `isStatic` | If true the component becomes a shell and ignores all the internal logic | `boolean` | `false` |\n| `expanded` | Whether accordion is expanded | `boolean` | `false` |\n| `title` | Title of the collapsible section | `string` | `\"\"` |\n| `onTitleClick` | Triggers when the title is clicked | `function` | `() => {}` |\n\n\n### Accordion Button\n\n| Prop Name | Description | Type | Default |\n| :--------- | :----------- | :---- | :------- |\n| `onClick` | Triggers when the title is clicked | `function` | `() => {}` |\n\n### Accordion Content\n\n| Prop Name | Description | Type | Default |\n| :--------- | :----------- | :---- | :------- |\n| `expanded` | Whether the content is visible | `boolean` | `false` |\n\n#### Menu\n\n| Prop Name | Description | Type | Default |\n| :--------- | :----------- | :---- | :------- |\n| `component`     | If the value is false only children of the main component will be rendered | `boolean`     | `false`                    |\n| `isStatic`      | If true, the component becomes a shell and ignores all the internal logic  | `boolean`     | `false`                    |\n| `open`          | Whether or not the menu is open                                            | `boolean`     | `false`                    |\n| `items`         | Menu items                                                                 | `{ id: number | string, value: string }[]` | `[]`           |\n| `disabledItems` | Disabled menu items                                                        | `number[]     | string[]`                  | `[]`           |\n| `onClose`       | Triggers when the dropdown menu is closed                                  | `function`    | `() => {}`                 |\n| `onItemClick`   | Triggers when a menu item is clicked                                       | `function`    | `(id: string               | number) => {}` |\n| `onButtonClick` | Triggers when the menu button is clicked                                   | `function`    | `() => {}`                 |\n\n#### Menu Button\n\n| Prop Name | Description | Type | Default |\n| :--------- | :----------- | :---- | :------- |\n|`onMenuButtonClick` | Triggers when the button is clicked | `function` | `() => {}` |\n\n#### Menu Dropdown\n\n| Prop Name | Description | Type | Default |\n| :--------- | :----------- | :---- | :------- |\n|`open` | Whether or not the dropdown is visible | `boolean` |`false`|\n\n\n#### Menu Item\n\n| Prop Name | Description | Type | Default |\n| :--------- | :----------- | :---- | :------- |\n| `item` | Menu item | `funcstion` |`{ id: number | string, value: string }`|\n| `isDisabled` | Whether the item is disabled | `boolean` | `false` |\n| `onClick` | Triggers when the item is clicked | `function` | `(id: string | number) => {}` |\n\n### Modal\n\n| Prop Name | Description | Type | Default |\n| :--------- | :----------- | :---- | :------- |\n| `component` | If the value is false only children of the main component will be rendered | `boolean` | `false` |\n| `isStatic` | If true the component becomes a shell and ignores all the internal logic | `boolean` | `false` |\n| `isOpen` | Whether the modal is visible or not | `boolean` | `false` |\n| `title` | Title of the modal | `string` | `\"\"` |\n| `onClose` | Triggers when the modal is closed | `function` | `() => {}` |\n\n### Modal Button\n\n| Prop Name | Description | Type | Default |\n| :--------- | :----------- | :---- | :------- |\n| `onButtonClick` | Triggers when the button is clicked | `function` | `() => {}` |\n\n### Multiselect\n\n| Prop Name | Description | Type | Default |\n| :--------- | :----------- | :---- | :------- |\n| `component` | If the value is false only children of the main component will be rendered | `boolean` | `false` |\n| `isStatic` | If true the component becomes a shell and ignores all the internal logic | `boolean` | `false` |\n| `options` | Select options | `{ id: string | number, value: string }[]` | `[]` |\n| `open` | Whether the select dropdown is visible or not | `boolean` | `false` |\n| `disabled` | Whether the select is disabled | `boolean` | `false` |\n| `value` | Selected value | `{ id: string | number, value: string }` | `undefined` |\n| `defaultValue` | Initial value | `{ id: string | number, value: string }` | `undefined` |\n| `onChange` | Triggers when the value is changed | `function` | `(value: { id: string | number, value: string }) => {}` |\n| `onInputClick` | Triggers when the input is clicked | `function` | `() => {}` |\n| `enableSearch` | Whether searching the options is enabled | `boolean` | `false` |\n| `onSearch` | Triggers on each search input change | `function` | `(value: string) => {}` |\n| `clearAll` | Whether clear all selected options is enabled | `boolean` | `false` |\n| `maxSelectedItems` | Number of maximum selected options allowed | `number` | `undefined` |\n\n\n### Multiselect Input\n\n| Prop Name | Description | Type | Default |\n| :--------- | :----------- | :---- | :------- |\n| `disabled` | Whether the input is disabled | `boolean` | `false` |\n| `enableSearch` | Whether searching the options is enabled | `boolean` | `false` |\n| `searchValue` | Search value | `string` | `\"\"` |\n| `onClearAll` | Triggered when clear button is clicked | `function` | `() => {}` |\n| `clearAll` | Whether clear all selected options is enabled | `boolean` | `false` |\n\n\n### Multiselect Item\n\n| Prop Name | Description | Type | Default |\n| :--------- | :----------- | :---- | :------- |\n| `onClick` | Triggered when the item is clicked | `function` | `() => {}` |\n\n### Multiselect Dropdown\n\n| Prop Name | Description | Type | Default |\n| :--------- | :----------- | :---- | :------- |\n| `areOptionsVisible` | Whether the options are visible | `boolean` | `false` |\n\n### Multiselect Option\n\n| Prop Name | Description | Type | Default |\n| :--------- | :----------- | :---- | :------- |\n| `disabled` | Whether the input is disabled | `boolean` | `false` |\n| `selected` | Whether the input is selected | `boolean` | `false` |\n| `onClick` | Triggered when the option is clicked | `function` | `() => {}` |\n\n### Select\n\n| Prop Name | Description | Type | Default |\n| :--------- | :----------- | :---- | :------- |\n| `component` | If the value is false only children of the main component will be rendered | `boolean` | `false` |\n| `isStatic` | If true the component becomes a shell and ignores all the internal logic | `boolean` | `false` |\n| `options` | Select options | `{ id: string | number, value: string }[]` | `[]` |\n| `open` | Whether the select dropdown is visible or not | `boolean` | `false` |\n| `disabled` | Whether the select is disabled | `boolean` | `false` |\n| `valueProp` | Selected value | `{ id: string | number, value: string }` | `undefined` |\n| `defaultValue` | Initial value | `{ id: string | number, value: string }` | `undefined` |\n| `onChange` | Triggers when the value is changed | `function` | `(value: { id: string | number, value: string }) => {}` |\n| `onInputClick` | Triggers when the input is clicked | `function` | `() => {}` |\n\n### Select Input\n\n| Prop Name | Description | Type | Default |\n| :--------- | :----------- | :---- | :------- |\n| `value` | Selected value | `{ id: string | number, value: string }` | `undefined` |\n| `onClick` | Triggers when the input is clicked | `function` | `() => {}` |\n| `disabled` | Whether the select is disabled | `boolean` | `false` |\n\n### Select Dropdown\n\n| Prop Name | Description | Type | Default |\n| :--------- | :----------- | :---- | :------- |\n| `visible` | Whether the select dropdown is visible or not | `boolean` | `false` |\n\n### Select Option\n\n| Prop Name | Description | Type | Default |\n| :--------- | :----------- | :---- | :------- |\n| `onClick` | Triggers when the item is clicked | `function` | `() => {}` |\n| `selected` | Whether the option is selected | `boolean` | `false` |\n\n\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3841, 212],
		[3848, 45],
		[3855, 5],
		[3862, 1],
		[3869, 32],
		[3876, 1],
		[3883, 52],
		[3890, 25],
		[3897, 4],
		[3904, 14],
		[3911, 6],
		[3939, 2],
		[3946, 1],
		[3953, 1],
		[3960, 1],
		[3981, 5],
		[3988, 1],
		[3995, 7],
		[4002, 2],
		[4016, 1],
		[4023, 5],
		[4030, 2],
		[4037, 11],
		[4044, 8],
		[4051, 4],
		[4065, 1],
		[4100, 5],
		[4107, 11],
		[4114, 4],
		[4121, 8],
		[4128, 2],
		[4135, 3]
	]
}
