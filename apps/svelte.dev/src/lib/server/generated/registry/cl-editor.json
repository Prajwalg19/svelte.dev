{
	"name": "cl-editor",
	"description": "Creates lightweight text editor built with Svelte.",
	"repo_url": "https://github.com/nenadpnc/cl-editor",
	"authors": ["nenadpnc"],
	"homepage": "https://nenadpnc.github.io/cl-editor/",
	"downloads": 974,
	"updated": "2021-12-03T20:40:58.512Z",
	"tags": ["ui"],
	"github_stars": 299,
	"typescript": true,
	"version": "2.3.0",
	"svelte_range": "^3.44.2",
	"last_rune_check_version": "2.3.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "cl-editor",
				"version": "2.3.0",
				"size": 205571
			}
		],
		"dependencies": [],
		"circular": []
	},
	"legacy_svelte": true,
	"readme": "## Lightweight text editor\n\nBuilt with svelte (no external dependencies) \n\n#### File size (bundle includes css, html and js)\n* min: 30kb\n* gzip: 10kb\n\n## Installation\n\n#### npm:\n\n```bash\nnpm install --save cl-editor\n```\n\n#### HTML:\n\n```html\n<head>\n  ...\n</head>\n<body>\n  ...\n  <div id=\"editor\"></div>\n  ...\n</body>\n```\n\n## Usage\n```js\nimport Editor from 'cl-editor';\n// or\nconst Editor = require('cl-editor');\n```\n```js\n// Initialize editor\nconst editor = new Editor({\n    // <HTMLElement> required\n    target: document.getElementById('editor'),\n    // optional\n    props: {\n        // <Array[string | Object]> string if overwriting, object if customizing/creating\n        // available actions:\n        // 'viewHtml', 'undo', 'redo', 'b', 'i', 'u', 'strike', 'sup', 'sub', 'h1', 'h2', 'p', 'blockquote', \n        // 'ol', 'ul', 'hr', 'left', 'right', 'center', 'justify', 'a', 'image', 'forecolor', 'backcolor', 'removeFormat'\n        actions: [\n            'b', 'i', 'u', 'strike', 'ul', 'ol',\n            {\n                name: 'copy', // required\n                icon: '<b>C</b>', // string or html string (ex. <svg>...</svg>)\n                title: 'Copy',\n                result: () => {\n                    // copy current selection or whole editor content\n                    const selection = window.getSelection();\n                    if (!selection.toString().length) {\n                        const range = document.createRange();\n                        range.selectNodeContents(editor.refs.editor);\n                        selection.removeAllRanges();\n                        selection.addRange(range);\n                    }\n                    editor.exec('copy');\n                }\n            },\n            'h1', 'h2', 'p'\n        ],\n        // default 300px\n        height: '300px',\n        // initial html\n        html: '',\n        // remove format action clears formatting, but also removes some html tags.\n        // you can specify which tags you want to be removed.\n        removeFormatTags: ['h1', 'h2', 'blackquote'] // default\n    }\n})\n```\n\n### API\n```js\n// Methods\neditor.exec(cmd: string, value?: string) // execute document command (document.executeCommand(cmd, false, value))\neditor.getHtml(sanitize?: boolean) // returns html string from editor. if passed true as argument, html will be sanitized before return\neditor.getText() // returns text string from editor\neditor.setHtml(html: string, sanitize?: boolean) // sets html for editor. if second argument is true, html will be sanitized\neditor.saveRange() // saves current editor cursor position or user selection\neditor.restoreRange() // restores cursor position or user selection\n// saveRange and restoreRange are useful when making custom actions\n// that demands that focus is shifted from editor to, for example, modal window.\n```\n* For list of available _**exec**_ command visit [https://codepen.io/netsi1964/pen/QbLLG](https://codepen.io/netsi1964/pen/QbLLGW)\n```js\n// Events\neditor.$on('change', (event) => console.log(event)) // on every keyup event\neditor.$on('blur', (event) => console.log(event)) // on editor blur event\n```\n```js\n// Props\neditor.refs.<editor | raw | modal | colorPicker> // references to editor, raw (textarea), modal and colorPicker HTMLElements\n```\n\n#### Actions\n\nThe `actions` prop lists predefined actions (and/or adds new actions) to be shown in the toolbar.\nIf the prop is not set, all `actions` defined and exported in [actions.js](src/helpers/actions.js) are made available, in the order in which they are defined.\nTo limit or change the order of predefined actions shown, set it by passing an array of names of actions defined, eg.:\n```js\nactions={[\"b\", \"i\", \"u\", \"h2\", \"ul\", \"left\", \"center\", \"justify\", \"forecolor\"]}\n```\nThe editor looks up to see if name is already defined, and adds it to the toolbar if it is.\n\nYou can add a custom action by inserting it in the array, like how \"copy\" is defined in example above. Take a look at `actions.js` for more examples.\n\n\n### Usage in Svelte\n\nIt is easier to import and work directly from the source if you are using Svelte. You can handle `change` events via `on:change`.\n\n```jsx\n<script>\n  import Editor from \"cl-editor/src/Editor.svelte\"\n\n  let html = '<h3>hello</h3>'\n  let editor\n\n</script>\n\n{@html html}\n<Editor {html} on:change={(evt)=>html = evt.detail}/>\n```\n\n### Example of customising the color picker palette \n\n```jsx\n<script>\n  import Editor from \"cl-editor/src/Editor.svelte\"\n\n  let html = '<h3>hello</h3>'\n  let colors = ['#000000', '#e60000', '#ff9900', '#ffff00', '#008a00', '#0066cc', '#9933ff',\n        '#ffffff', '#facccc', '#ffebcc', '#ffffcc', '#cce8cc', '#cce0f5', '#ebd6ff',\n        '#bbbbbb', '#f06666', '#ffc266', '#ffff66', '#66b966', '#66a3e0', '#c285ff',\n        '#888888', '#a10000', '#b26b00', '#b2b200', '#006100', '#0047b2', '#6b24b2',\n        '#444444', '#5c0000', '#663d00', '#666600', '#003700', '#002966', '#3d1466']\n  let editor\n\n</script>\n\n{@html html}\n<Editor {html} {colors} on:change={(evt)=>html = evt.detail}/>\n```\n\nTo limit or define the tools shown in the toolbar, pass in an `actions` prop.\n\nTo easily get the editor content DOM element, pass an `contentId` prop, eg. `contentId='notes-content'`.\n\nThis is useful if you want to listen to resize of the editor and respond accordingly.\n\nTo do so, first enable resize on the editor:\n\n```css\n.cl-content {\n  resize: both;\n}\n```\n\nNow observe the resize:\n\n```jsx\n<script>\n  const ro = new ResizeObserver(entries => {\n    const contentWd = entries[0].contentRect.width\n    // respond to contentWd ...\n  })\n  let editor\n  $: editor && ro.observe(document.getElementById('notes-content'))\n</script>\n\n<Editor {...otherEditorCfgs} contentId='notes-content' bind:this={editor} />\n```\n\n### Run demo\n```bash\ngit clone https://github.com/nenadpnc/cl-text-editor.git cl-editor\ncd cl-editor\nnpm i\nnpm run dev\n```\n\n## References\nThis library is inspired by these open source repos:\n- [Alex-D/Trumbowyg](https://github.com/Alex-D/Trumbowyg)\n- [jaredreich/pell](https://github.com/jaredreich/pell)\n\n## Licence\n\nMIT License\n",
	"downloads_history": [
		[3589, 570],
		[3596, 1024],
		[3603, 788],
		[3610, 899],
		[3617, 863],
		[3624, 795],
		[3631, 839],
		[3638, 762],
		[3645, 369],
		[3652, 826],
		[3659, 1006],
		[3666, 968],
		[3673, 951],
		[3680, 1249],
		[3687, 956],
		[3694, 806],
		[3701, 1115],
		[3708, 1158],
		[3715, 1092],
		[3722, 756],
		[3729, 801],
		[3736, 636],
		[3743, 625],
		[3750, 641],
		[3757, 607],
		[3764, 651],
		[3771, 554],
		[3778, 800],
		[3785, 813],
		[3792, 648],
		[3799, 703],
		[3806, 631],
		[3813, 885],
		[3820, 678],
		[3827, 772],
		[3834, 800],
		[3841, 651],
		[3848, 768],
		[3855, 690],
		[3862, 1052],
		[3869, 616],
		[3876, 640],
		[3883, 653],
		[3890, 609],
		[3897, 462],
		[3904, 609],
		[3911, 420],
		[3918, 481],
		[3925, 475],
		[3932, 527],
		[3939, 588],
		[3946, 577],
		[3953, 438],
		[3960, 734],
		[3967, 604],
		[3974, 477],
		[3981, 471],
		[3988, 586],
		[3995, 403],
		[4002, 579],
		[4009, 317],
		[4016, 513],
		[4023, 449],
		[4030, 658],
		[4037, 524],
		[4044, 480],
		[4051, 481],
		[4058, 542],
		[4065, 632],
		[4072, 1059],
		[4079, 1333],
		[4086, 888],
		[4093, 945],
		[4100, 1213],
		[4107, 604],
		[4114, 974],
		[4121, 1094],
		[4128, 1236]
	]
}
