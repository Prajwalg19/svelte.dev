{
	"name": "@gzim/svelte-datagrid",
	"description": "Create high-performance data grid component for Svelte.",
	"repo_url": "https://github.com/gzimbron/svelte-datagrid",
	"authors": ["zimbronapps"],
	"homepage": "https://gzimbron.github.io/svelte-datagrid/",
	"downloads": 16,
	"updated": "2024-03-05T23:45:18.302Z",
	"tags": ["ui"],
	"github_stars": 9,
	"typescript": true,
	"version": "0.4.0",
	"svelte_range": "^3.1.0 || ^4.0.0",
	"kit_range": "^2.0.0",
	"last_rune_check_version": "0.4.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@gzim/svelte-datagrid",
				"version": "0.4.0",
				"size": 43264
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "[![npm](https://img.shields.io/npm/v/@gzim/svelte-datagrid.svg?style=flat-square)](https://www.npmjs.com/package/@gzim/svelte-datagrid)\n\n# Svelte DataGrid\n\nSvelte DataGrid is a high-performance, feature-rich grid component for Svelte. It is designed to handle large datasets and provide a smooth scrolling experience. It is also designed to be accessible and customizable.\n\nIt's based on the excellent (but deprecated) [svelte-data-grid](https://github.com/bsssshhhhhhh/svelte-data-grid).\n\n## üëÄ Demo website\n\n[![Demo website](./assets/demo-screenshot.webp)](https://gzimbron.github.io/svelte-datagrid)\n\n## üöÄ Features\n\n- High scrolling performance\n- ARIA attributes set on elements\n- Lightweight even when displaying a huge dataset due to implementation of a \"virtual list\" mechanism\n- Column headers remain fixed at the top of the grid\n- Custom components can be specified to control how individual table cells or column headers are displayed\n\n## üìã TODO\n\n- [x] Demo website\n- [x] Re-ordering columns\n- [x] Resizing columns\n- ‚≠êÔ∏è Feel free to suggest more features or contribute to the project\n\n## ‚ÑπÔ∏è Usage:\n\nInstall:\n\n```bash\nnpm install @gzim/svelte-datagrid\n```\n\nImport:\n\n```javascript\nimport { Datagrid } from '@gzim/svelte-datagrid';\n\n<Datagrid\n\tcolumns={columns}\n\trows={myRows}\n\trowHeight={24}\n\ton:valueUpdated={onValueUpdated}\n\ton:scroll={onGridScroll}\n/>;\n```\n\nDatagrid requires 2 properties to be passed in order to display data: `rows` and `columns`.\n\n`columns` is an array of objects containing at least 3 properties: `label`, `dataKey`, and `width`. A svelte component can be specified in `headerComponent` and `cellComponent` if any custom cell behavior is required.\n\n```typescript\n[\n\t{\n\t\tlabel: 'Name', // What will be displayed as the column header\n\t\tdataKey: 'firstName', // The key of a row to get the column's data from\n\t\twidth: 400 // Width, in pixels, of column\n\t},\n\t{\n\t\tlabel: 'Age',\n\t\tdataName: 'age',\n\t\twidth: 150\n\t}\n];\n```\n\n`rows` is an array of objects containing the data for each table row.\n\n```javascript\n[\n\t{\n\t\tfirstName: 'Gustavo',\n\t\tage: 34\n\t},\n\t{\n\t\tfirstName: 'Paulina',\n\t\tage: 31\n\t},\n\t{\n\t\tfirstName: 'Daphne',\n\t\tage: 2\n\t}\n];\n```\n\n## üìù Editing Data\n\nYou can use this 3 componets as cellComponent to edit data:\n\nImport the components:\n\n```typescript\nimport { TextboxCell, SelectCell, CheckboxCell } from '@gzim/svelte-datagrid';\n```\n\n### Textbox Cell\n\nTextbox cell will debounce the user input.\n\n```typescript\n{\n  label: 'Name',\n  dataKey: 'name',\n  width: 250,\n  cellComponent: TextboxCell\n}\n```\n\n### Select Cell\n\nSelectCell requires that you provide an `options` array in your cell definition:\n\n```typescript\n{\n  label: 'Simpsons Character',\n  dataKey: 'simpsonChar',\n  width: 200,\n  cellComponent: SelectCell,\n  options: [\n    {\n      display: 'Homer',\n      value: 'homer'\n    },\n    {\n      display: 'Bart',\n      value: 'bart'\n    },\n    {\n      display: 'Lisa',\n      value: 'lisa'\n    },\n    {\n      display: 'Marge',\n      value: 'marge'\n    },\n    {\n      display: 'Maggie',\n      value: 'maggie'\n    }\n  ]\n}\n```\n\n### Checkbox Cell\n\nCheckboxCell will set the checked state of the checkbox depending on the boolean value of the row's data.\n\n```typescript\n{\n  display: 'Pending',\n  dataName: 'pending',\n  width: 75,\n  cellComponent: CheckboxCell\n}\n```\n\n## ‚ú® Custom Cell Components\n\nTo create a custom cell component, create a new Svelte component following the example below.\n\nComponents will be passed the following properties:\n\n- `rowNumber` - The index of the row within `rows`\n- `row` - The entire row object from `rows`\n- `column` - The entire column object from `columns`\n\nMyCustomCell.svelte\n\n```html\n<script lang=\"ts\" generics=\"T\">\n\timport type { GridCellUpdated, GridColumn } from 'datagrid-svelte/types';\n\timport { createEventDispatcher } from 'svelte';\n\n\ttype ComponentEventsList = {\n\t\tvalueUpdated: GridCellUpdated<T>;\n\t};\n\tconst dispatch = createEventDispatcher<ComponentEventsList>();\n\n\texport let row: T;\n\texport let column: GridColumn<T>;\n\texport let rowIndex: number;\n\n\tconst onSomethingHappens = () => {\n\t\tdispatch('valueUpdated', {\n\t\t\trow,\n\t\t\tcolumn,\n\t\t\tvalue: 'newValue',\n\t\t\trowIndex\n\t\t});\n\t};\n</script>\n\n<div class=\"checkbox-cell\" data-row-index=\"{rowIndex}\">ADD HERE YOUR CUSTOM CELL CONTENT</div>\n\n<style lang=\"postcss\">\n\t.checkbox-cell {\n\t\ttext-align: center;\n\t}\n</style>\n```\n\nImport the component\n\n```typescript\nimport MyCustomCell from './MyCustomCell.svelte';\n```\n\n`columns` option:\n\n```typescript\n[\n  {\n    label: 'Icon'\n    dataKey: 'icon',\n    width: 300,\n    cellComponent: MyCustomCell\n  }\n]\n```\n\n## ‚ú® Custom Header Components\n\nHeader components can also be specified in `columns` entries as the `headerComponent` property. Header components are only passed `column`, the column object from `columns`.\n\n```html\n<script lang=\"ts\" generics=\"T\">\n\timport type { GridCellUpdated, GridColumn } from 'datagrid-svelte/types';\n\n\texport let column: GridColumn<T>;\n</script>\n\n<div class=\"checkbox-cell\"><u>~{ column.label }~</u></div>\n\n<style lang=\"postcss\">\n\t.checkbox-cell {\n\t\ttext-align: center;\n\t}\n</style>\n```\n\n## üõ†Ô∏è Options and Functions:\n\nDatagrid provides a few options for controlling the grid and its interactions:\n\n### ‚öôÔ∏è Properties\n\n- `rowHeight` - The row height in pixels _(Default: 24)_\n- `headerRowHeight` - The row height in pixels _(Default: 24)_\n- `rowsPerPage` - The number of rows to render per page _(Default: rows lenght up to 10)_\n- `extraRows` - Add extra rows to the virtual list to improve scrolling performance _(Default: 0)_\n- `allColumnsDraggable` - Set all columns draggable by default, ignoring the `draggable` property of each column _(Default: false)_\n\n### üí´ Functions exported\n\nYoy can bind to the following functions to control the grid:\n\n- `getGridState` - A function that returns the current grid state.\n\n```typescript\nconst getGridState: () => {\n\tvisibleRowsIndexes: {\n\t\tstart: number;\n\t\tend: number;\n\t};\n\tscrollTop: number;\n\tscrollLeft: number;\n\tyScrollPercent: number;\n\txScrollPercent: number;\n};\n```\n\n- `scrollToRow` - A function that scrolls the grid to a specific row index.\n\n```typescript\nconst scrollToRow: (rowIndex: number, behavior: ScrollBehavior = 'smooth') => void;\n```\n\n### üíÑ Styling\n\n- `--border` Css: Custom style for grid borders _(Default: 1px)_\n- `--header-border` Custom width for header row border bottom _(Default: 2px)_\n- `--header-border-color` Custom color for header row border bottom _(Default: black)_\n- `--head-bg` Custom background color for header row _(Default: white)_\n- `--cell-bg` Custom background color for body cells _(Default: white)_\n- `--textbox-cell-bg` ustom background color for textbox cells _(Default: white)_\n- `--select-cell-bg` Custom background color for select cells _(Default: white)_\n- `--head-color` Custom color for header row text.\n- `--cell-color` Custom color for body cells text\n- `--textbox-cell-color` Custom color for textbox cells text\n- `--select-cell-color` Custom color for select cells text\n- `--no-draggable-opacity` Opacity for NOT draggable columns content when dragging. _(Default: 0.4)_\n- `--no-draggable-fg` CSS color for NOT draggable columns when dragging, this color is used to create an overlay over the column _(Default: rgba(66, 66, 66, 0.5))_\n- `--draggable-bg` CSS Hover color for draggable columns. _(Default: rgba(33, 248, 255, 0.5))_\n- `--dragging-bg` CSS Background color for actual dragging column. _(Default: rgba(33, 255, 151, 0.5))_\n- `--grid-height` Min height for the grid container _(@default RowHeight \\* 6)_\n- `--border-resizing` Min height for the grid container _(@default 2px solid #666)_\n\n## Events:\n\n- `scroll` - Triggered when the grid is scrolled on Y axis. The Y scroll percent position can be accessed from `event.detail`\n- `xScroll` - Triggered when the grid is scrolled on X axis. The X scroll percent position can be accessed from `event.detail`\n- `valueUpdated` - Triggered when a cell's value is updated. The updated value can be accessed from `event.value`, other data can be accessed from `event.row`, `event.column` and `event.rowIndex`\n- `columnsSwapped` - Triggered when columns are swapped. `event.detail` contains `from`, `to` and new `columns` order properties\n- `rowClick` - Triggered when a row is clicked. The clicked row can be accessed from `event.detail`\n- `rowDblClick` - Triggered when a row is double clicked. The clicked row can be accessed from `event.detail`\n\n## Bugs? Suggestions?\n\nPlease file an issue if you find a bug or have a suggestion for a new feature.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3687, 436],
		[3694, 550],
		[3701, 64],
		[3708, 10],
		[3715, 88],
		[3722, 7],
		[3729, 1],
		[3736, 18],
		[3743, 6],
		[3750, 6],
		[3757, 17],
		[3764, 2],
		[3771, 2],
		[3778, 28],
		[3785, 4],
		[3792, 2],
		[3799, 1],
		[3806, 5],
		[3813, 7],
		[3820, 3],
		[3827, 5],
		[3834, 86],
		[3841, 18],
		[3848, 8],
		[3855, 2],
		[3862, 35],
		[3869, 2],
		[3876, 3],
		[3883, 17],
		[3890, 2],
		[3897, 17],
		[3904, 1],
		[3911, 4],
		[3918, 1],
		[3925, 2],
		[3932, 8],
		[3939, 4],
		[3946, 2],
		[3953, 3],
		[3960, 1],
		[3967, 2],
		[3974, 3],
		[3981, 16],
		[3988, 2],
		[3995, 17],
		[4002, 1],
		[4009, 1],
		[4016, 3],
		[4023, 5],
		[4030, 3],
		[4037, 21],
		[4044, 21],
		[4051, 8],
		[4058, 2],
		[4065, 5],
		[4072, 4],
		[4079, 2],
		[4086, 3],
		[4093, 18],
		[4100, 31],
		[4107, 30],
		[4114, 16],
		[4121, 13],
		[4128, 3]
	],
	"esm": true,
	"cjs": false
}
