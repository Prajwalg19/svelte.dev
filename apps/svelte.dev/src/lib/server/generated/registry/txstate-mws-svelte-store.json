{
	"name": "@txstate-mws/svelte-store",
	"description": "Provides new store types compatible with Svelte stores.",
	"repo_url": "https://github.com/txstate-etc/svelte-store",
	"authors": ["wickning1", "jsnider", "rmcew"],
	"homepage": "https://github.com/txstate-etc/svelte-store#readme",
	"downloads": 136,
	"updated": "2023-03-15T12:35:23.182Z",
	"tags": ["miscellaneous"],
	"github_stars": 1,
	"typescript": true,
	"version": "1.0.8",
	"svelte_range": "^3.45.0",
	"last_rune_check_version": "1.0.8",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@txstate-mws/svelte-store",
				"version": "1.0.8",
				"size": 29389
			},
			{
				"name": "txstate-utils",
				"version": "1.9.17",
				"size": 221649
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# svelte-store\nSupport library offering several new types of store compatible with the basic svelte readable/writable stores.\n<br />\n\n## General Interfaces\nOur basic interfaces cover what type of access to the value we want our different subscribers to have:\n```mermaid\nclassDiagram\ndirection LR\n  class UsableSubject {\n    <<interface>>\n    subscribe(observer: (value: T) => void) => () => void\n  }\n  link UsableSubject \"https://github.com/txstate-etc/svelte-store/blob/main/src/activestore.ts#:~:text=export%20interface%20UsableSubject\" \"To Source\"\n\n  WriteableSubject~T~ --|> UsableSubject~T~ : extends\n  class WriteableSubject {\n    <<interface>>\n    update(updater: (value: T) => T) => void\n  }\n  link WriteableSubject \"https://github.com/txstate-etc/svelte-store/blob/main/src/activestore.ts#:~:text=export%20interface%20WritableSubject\" \"To Source\"\n\n  SetableSubject~T~ --|> WriteableSubject~T~ : extends\n  class SetableSubject {\n     <<interface>>\n     set(value: T) => void\n  }\n  link SetableSubject \"https://github.com/txstate-etc/svelte-store/blob/main/src/activestore.ts#:~:text=export%20interface%20SettableSubject\" \"To Source\"\n  \n  class Writeable~T~ {<<svelte store>>}\n  link Writeable \"https://svelte.dev/docs#run-time-svelte-store\" \"Svelte Writeable Store\"\n  \n  class DerivedStoreOptions {\n    <<interface>>\n    debounce?: number|boolean\n  }\n  link DerivedStoreOptions \"https://github.com/txstate-etc/svelte-store/blob/main/src/derivedstore.ts#:~:text=export%20interface%20DerivedStoreOptions\" \"To Source\"\n```\n<br />\n\n## New Store Classes\nDue to the sub-property mutability limitations of the native Svelte Stores a solution was desired that would allow flexibility for more deeply nested value states. In addition there are situations where callbacks are desired on value updates regardless of the value actually changing.\n\n- `ActiveStore` - actively calls subscribers back regardless of whether the update to value was a change or not.\n- `Store` - extends `ActiveStore` overriding its `equal` to do a `deepEqual`.\n- `ConvertedStore` - allows a traditional Svelte Store to be passed in its constructor to return a reference to a new `Store` object with its `set` overrided to handle the differences between this store framework and the traditional Svelte Store framework. A `convertStore` factory function is also exported.\n- `SubStore` - Creates a store that will represent a part of a larger store. Updates to the parent store will propagate to SubStores as appropriate and updates to SubStores will propagate back up to parent stores. This is handled by default through the use of dot-prop strings (Example: { deep: { value: 'here' }, hello: 'World'} could refer to that value prop as 'deep.value'), OR custom `getter` and `setter` functions could be provided to the [`subStore`](https://github.com/txstate-etc/svelte-store/blob/main/src/substore.ts#:~:text=export%20function%20subStore) factory functions that can provide custom handling of the getting and setting propagation.\n- `SafeStore` - unlike `ActiveStore` this does deep equality checks before notifying subscribers and clones data so that it's safe against subscriber mutations. Costs more CPU cycles but also results in fewer notifications to subscribers.\n- `DerivedStore` - watches one or more parent stores for changes. For each change it runs a function to derive a new state from the parent state(s). Subscribers will only be notified if the derived state has changed (checks deep equality). A set of `derivedStore` factory functions are also exported.\n\n```mermaid\nclassDiagram\n  class Writeable~T~ {<<svelte store>>}\n  link Writeable \"https://svelte.dev/docs#run-time-svelte-store\" \"Svelte Writeable Store\"\n\n  ActiveStore~T~ --|> Writeable~T~ : implements\n  class ActiveStore  {\n    constructor(value: T)\n    protected value!: T\n    protected subscribers: Map< string, run: function >\n    protected sourcesInitialized: 0\n    clone(value: T) => value\n    equal(a: T, b: T) => false\n    set(value: T)\n    update(updater: (value: T) => T)\n    subscribe(run: (s: T) => any)\n    clearSubscribers()\n    protected registerSource(subscribe: () => () => void) => unsubscribe: () => void\n    protected unregisterSources()\n  }\n  link ActiveStore \"https://github.com/txstate-etc/svelte-store/blob/main/src/activestore.ts#:~:text=export%20class%20ActiveStore\" \"To Source\"\n\n  direction BT\n\n  Store~T~ --|> ActiveStore~T~ : extends\n  class Store  {\n    overrides equal(a: T, b: T) => deepEqual(a,b)\n  }\n  link Store \"https://github.com/txstate-etc/svelte-store/blob/main/src/store.ts#:~:text=export%20class%20Store\" \"To Source\"\n\n  ConvertedStore~T~ --|> Store~T~ : extends\n  class ConvertedStore  {\n    overrides constructor (value: UsableSubject~T~)\n    overrides set (value: T)\n  }\n  link ConvertedStore \"https://github.com/txstate-etc/svelte-store/blob/main/src/convertedstore.ts#:~:text=export%20class%20ConvertedStore\" \"To Source\"\n  \n  SafeStore~T~ --|> Store~T~ : extends\n  class SafeStore  {\n    overrides clone(value: T) => clone(value)\n  }\n  link SafeStore \"https://github.com/txstate-etc/svelte-store/blob/main/src/safestore.ts#:~:text=export%20class%20SafeStore\" \"To Source\"\n\n  SubStore~SubType, ParentType=any~ --|> Store~SubType~ : extends\n  class SubStore  {\n    protected parentStore: WritableSubject~ParentType~\n    protected setter: (value: SubType, state: ParentType) => ParentType\n    overrides set(value: T)\n    overrides constructor(\\nstore: WirteableSubject~ParentType~,\\ngetter: keyof ParentType|string|(value: ParentType) => SubType,\\nsetter?: (value: SubType, state: ParentType) => ParentType\\n)\n  }\n  link SubStore \"https://github.com/txstate-etc/svelte-store/blob/main/src/substore.ts#:~:text=export%20class%20SubStore\" \"To Source\"\n\n  DerivedStore~DerivedType, ParentType=any~ --|> SafeStore~DerivedType~ : extends\n  class DerivedStore  {\n    protected sourcesInitialized = 0\n    overrides constructor(\\nstore: UsableSubject~ParentType~ | UsableSubject~any~[],\\ngetter: string |((value: any) => DerivedType) | ((values: any[]) => DerivedType),\\noptions?: DerivedStoreOptions\\n)\n  }\n  link DerivedStore \"https://github.com/txstate-etc/svelte-store/blob/main/src/derivedstore.ts#:~:text=export%20class%20DerivedStore\" \"To Source\"\n```\n\n\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 59],
		[3603, 147],
		[3610, 26],
		[3617, 116],
		[3624, 144],
		[3631, 92],
		[3638, 69],
		[3645, 12],
		[3652, 108],
		[3659, 98],
		[3666, 66],
		[3673, 60],
		[3680, 66],
		[3687, 80],
		[3694, 33],
		[3701, 34],
		[3708, 120],
		[3715, 46],
		[3722, 34],
		[3729, 54],
		[3736, 69],
		[3743, 146],
		[3750, 59],
		[3757, 108],
		[3764, 142],
		[3771, 127],
		[3778, 103],
		[3785, 66],
		[3792, 84],
		[3799, 75],
		[3806, 73],
		[3813, 94],
		[3820, 64],
		[3827, 59],
		[3834, 71],
		[3841, 86],
		[3848, 97],
		[3855, 161],
		[3862, 222],
		[3869, 147],
		[3876, 86],
		[3883, 103],
		[3890, 149],
		[3897, 159],
		[3904, 90],
		[3911, 75],
		[3918, 90],
		[3925, 97],
		[3932, 131],
		[3939, 176],
		[3946, 85],
		[3953, 66],
		[3960, 99],
		[3967, 105],
		[3974, 119],
		[3981, 73],
		[3988, 66],
		[3995, 60],
		[4002, 75],
		[4009, 28],
		[4016, 22],
		[4023, 75],
		[4030, 93],
		[4037, 56],
		[4044, 117],
		[4051, 206],
		[4058, 134],
		[4065, 123],
		[4072, 160],
		[4079, 82],
		[4086, 102],
		[4093, 114],
		[4100, 153],
		[4107, 67],
		[4114, 136],
		[4121, 111],
		[4128, 145],
		[4135, 119]
	]
}
