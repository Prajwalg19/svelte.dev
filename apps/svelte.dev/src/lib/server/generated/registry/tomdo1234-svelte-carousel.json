{
	"name": "@tomdo1234/svelte-carousel",
	"description": "Create carousel component for Svelte with responsiveness and touch support.",
	"repo_url": "https://github.com/TomDo1234/svelte-carousel",
	"authors": ["tomdo1234"],
	"homepage": "https://github.com/TomDo1234/svelte-carousel#readme",
	"downloads": 3,
	"updated": "2023-06-03T01:56:12.190Z",
	"tags": ["ui"],
	"github_stars": 1,
	"typescript": false,
	"version": "1.0.0",
	"svelte_range": "^3.31.2",
	"last_rune_check_version": "1.0.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@tomdo1234/svelte-carousel",
				"version": "1.0.0",
				"size": 65633
			},
			{
				"name": "easy-reactive",
				"version": "1.0.3",
				"size": 18230
			},
			{
				"name": "lodash.clonedeep",
				"version": "4.5.0"
			},
			{
				"name": "lodash.get",
				"version": "4.4.2"
			},
			{
				"name": "lodash.isequal",
				"version": "4.5.0"
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[1, 3],
			[1, 4]
		],
		"circular": []
	},
	"readme": "![svelte-carousel](./docs/svelte-carousel-logo-md.png)\n\n\n# svelte-carousel\n\n<div align=\"left\">\n\n[![npm](https://img.shields.io/npm/v/svelte-carousel.svg)](https://www.npmjs.com/package/svelte-carousel) [![npm](https://img.shields.io/npm/dm/svelte-carousel.svg)](https://www.npmjs.com/package/svelte-carousel)\n<br />\n[![GitHub repo](https://img.shields.io/badge/github-repo-green.svg?style=flat)](https://github.com/vadimkorr/svelte-carousel) [![GitHub followers](https://img.shields.io/github/followers/vadimkorr.svg?style=social&label=Follow)](https://github.com/vadimkorr)\n\n</div>\n\nI have forked the awesome carousel component for Svelte 3 because the original is taking too long to update, they are not merging my responsiveness PR so here is vadimkorr's library but with responsiveness\n\n## Demo\n* [vadimkorr.github.io/svelte-carousel](https://vadimkorr.github.io/svelte-carousel)\n* [REPL](https://svelte.dev/repl/f503a458832f4a358d9ec00f88945ff5)\n\n## Installation\n```bash\nyarn add svelte-carousel\n```\n```bash\nnpm install svelte-carousel\n```\n\nImport component\n```jsx\n<script>\n  import Carousel from 'svelte-carousel'\n  // ...\n</script>\n```\n\n## SvelteKit support\nThere are several things to keep in mind when `svelte-carousel` is used with SvelteKit. This is because `svelte-carousel` is a client-side library and depends on `document` and `window`. [See more in SvelteKit FAQ](https://kit.svelte.dev/faq).\n\n1. Install `svelte-carousel` as a dev dependency. [Why as a dev dependency?](https://github.com/sveltejs/sapper-template#using-external-components)\n\n```bash\nyarn add svelte-carousel -D\n```\n```bash\nnpm install svelte-carousel -D\n```\n\n2. Extend `kit` in `svelte.config.js` to include the `vite` property\n\n```js\nconst config = {\n  // existing props\n  kit: {\n    // existing props\n    vite: {\n      optimizeDeps: {\n        include: ['lodash.get', 'lodash.isequal', 'lodash.clonedeep']\n      }\n      // plugins: []\n    }\n  }\n}\n```\n\n3. Import and use it:\n\n```jsx\n\n<script>\n  import Carousel from 'svelte-carousel';\n  import { browser } from '$app/environment';\n\n  let carousel; // for calling methods of the carousel instance\n  \n  const handleNextClick = () => {\n    carousel.goToNext()\n  }\n</script>\n\n{#if browser}\n  <Carousel\n    bind:this={carousel}\n  >\n    <div>1</div>\n    <div>2</div>\n    <div>3</div>\n  </Carousel>\n{/if}\n\n<button on:click={handleNextClick}>Next</button>\n```\n\n## Vite support\n1. Extend `optimizeDeps.include` in `vite.config.js`\n\n```js\nexport default defineConfig({\n  optimizeDeps: {\n    include: ['lodash.get', 'lodash.isequal', 'lodash.clonedeep']\n  }\n})\n```\n\n2. Import and use it:\n\n```jsx\n\n<script>\n  import Carousel from 'svelte-carousel'\n\n  let carousel; // for calling methods of the carousel instance\n  const handleNextClick = () => {\n    carousel.goToNext()\n  }\n</script>\n\n<Carousel\n  bind:this={carousel}\n>\n  <div>1</div>\n  <div>2</div>\n  <div>3</div>\n</Carousel>\n\n<button on:click={handleNextClick}>Next</button>\n```\n\n## Props\n| Prop                      | Type       | Default         | Description                                   | \n|---------------------------|------------|-----------------|-----------------------------------------------|\n| `arrows`                  | `boolean`  | `true`          | Enables next/prev arrows                      |\n| `infinite`                | `boolean`  | `true`          | Infinite looping                              |\n| `initialPageIndex`        | `number`   | `0`             | Page to start on                              |\n| `duration`                | `number`   | `500`           | Transition duration (ms)                      |\n| `autoplay`                | `boolean`  | `false`         | Enables autoplay of pages                     |\n| `autoplayDuration`        | `number`   | `3000`          | Autoplay change interval (ms)                 |\n| `autoplayDirection`       | `string`   | `'next'`        | Autoplay change direction (`next` or `prev`)  |\n| `pauseOnFocus`            | `boolean`  | `false`         | Pauses autoplay on focus (for touchable devices - tap the carousel to toggle the autoplay, for non-touchable devices - hover over the carousel to pause the autoplay) |\n| `autoplayProgressVisible` | `boolean`  | `false`         | Shows autoplay duration progress indicator    |\n| `dots`                    | `boolean`  | `true`          | Current page indicator dots                   |\n| `timingFunction`          | `string`   | `'ease-in-out'` | CSS animation timing function                 |\n| `swiping`                 | `boolean`  | `true`          | Enables swiping                               |\n| `particlesToShow`         | `number`   | `1`             | Number of elements to show                    |\n| `particlesToScroll`       | `number`   | `1`             | Number of elements to scroll                  |\n| `breakpoints`             | `array`    | `[]`            | Set responsive behavior of particesToShow on  |\n|                           |            |                 | different screensizes                         |\n\n## Breakpoints/Responsive design\n\nThe structure of the array is \n\n```js\n[\n    { width: 0, particlesToShow: 1 }, //minimum 1 particle\n    { width: 600, particlesToShow: 2 }, //at 600px 2\n    { width: 1000, particlesToShow: 3 }, //1000px, 3\n    { width: 1500, particlesToShow: 4} //1500px and above, 4\n]\n```\n\n## Events\n\n### `pageChange`\nIt is dispatched on page change\n\n| Payload field      | Type        | Description                           | \n|--------------------|-------------|---------------------------------------|\n| `event.detail`     | `number`    | Current page index                    |\n\n```jsx\n<Carousel\n  on:pageChange={\n    event => console.log(`Current page index: ${event.detail}`)\n  }\n>\n  <!-- -->\n</Carousel>\n```\n\n## Slots\n\n### `prev` and `next`\nThey are used for customizing prev and next buttons.\n\nSlot props:\n\n| Prop               | Type        | Description                           | \n|--------------------|-------------|---------------------------------------|\n| `showPrevPage`     | `function`  | Call it to switch to the previos page |\n| `showNextPage`     | `function`  | Call it to switch to the next page    |\n\n```jsx\n<Carousel\n  let:showPrevPage\n  let:showNextPage\n>\n  <div slot=\"prev\">\n    <!-- -->\n  </div>\n  <div slot=\"next\">\n    <!-- -->\n  </div>\n  <!-- -->\n</Carousel>\n```\n\n### `dots`\nThis slot is used for customizing how dots look like.\n\nSlot props:\n\n| Prop                | Type         | Description                                  | \n|---------------------|--------------|----------------------------------------------|\n| `currentPageIndex`  | `number`     | Represents current page index (start from 0) |\n| `pagesCount`        | `number`     | Total pages amount                           |\n| `showPage`          | `function`   | Takes index as page to be shown              |\n\n```jsx\n<Carousel\n  let:currentPageIndex\n  let:pagesCount\n  let:showPage\n>\n  <div slot=\"dots\">\n    <!-- -->\n  </div>\n  <!-- -->\n</Carousel>\n```\n\n### Default slot\nThis slot takes content for the carousel.\n\nSlot props:\n\n| Prop               | Type       | Description                                                          | \n|--------------------|------------|----------------------------------------------------------------------|\n| `loaded`           | `number[]` | Contains indexes of pages to be loaded. Can be used for lazy loading |\n| `currentPageIndex` | `number`   | Represents current page index (start from 0)                         |\n\n```jsx\n<Carousel\n  let:loaded\n>\n  <div>\n    <!-- -->\n  </div>\n  <!-- -->\n</Carousel>\n```\n\n## Methods\n\n### `goTo`\nNavigates to a page by index. `(pageIndex, options) => Promise<void>`.\n\nArguments:\n\n| Argument           | Type        | Default | Description                           | \n|--------------------|-------------|---------|---------------------------------------|\n| `pageIndex`        | `number`    |         | Page number                           |\n| `options.animated` | `boolean`   | `true`  | Should it be animated or not          |\n\n```jsx\n<script>\n  // ...\n  let carousel;\n  function goToStartPage() {\n    carousel.goTo(0, { animated: false })\n  }\n</script>\n\n<Carousel\n  bind:this={carousel}\n>\n  <!--  -->\n</Carousel>\n<button class=\"button\" on:click={goToStartPage}>Go</button>\n```\n\n### `goToPrev`\nNavigates to the previous page. `(options) => Promise<void>`.\n\nArguments:\n\n| Argument           | Type        | Default | Description                   | \n|--------------------|-------------|---------|-------------------------------|\n| `options.animated` | `boolean`   | `true`  | Should it be animated or not  |\n\n```jsx\n<script>\n  // ...\n  let carousel;\n  function goToPrevPage() {\n    carousel.goToPrev({ animated: false })\n  }\n</script>\n\n<Carousel\n  bind:this={carousel}\n>\n  <!--  -->\n</Carousel>\n<button class=\"button\" on:click={goToPrevPage}>Go</button>\n```\n\n### `goToNext`\nNavigates to the next page. `(options) => Promise<void>`.\n\nArguments:\n\n| Argument           | Type        | Default | Description                  | \n|--------------------|-------------|---------|------------------------------|\n| `options.animated` | `boolean`   | `true`  | Should it be animated or not |\n\n```jsx\n<script>\n  // ...\n  let carousel;\n  function goToNextPage() {\n    carousel.goToNext({ animated: false })\n  }\n</script>\n\n<Carousel\n  bind:this={carousel}\n>\n  <!--  -->\n</Carousel>\n<button class=\"button\" on:click={goToNextPage}>Go</button>\n```\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 2],
		[3603, 2],
		[3610, 1],
		[3638, 1],
		[3652, 1],
		[3659, 3],
		[3666, 1],
		[3687, 1],
		[3715, 1],
		[3736, 1],
		[3764, 2],
		[3771, 1],
		[3778, 1],
		[3785, 1],
		[3806, 1],
		[3813, 1],
		[3834, 2],
		[3841, 5],
		[3855, 2],
		[3862, 4],
		[3876, 1],
		[3883, 2],
		[3890, 1],
		[3897, 1],
		[3911, 2],
		[3932, 2],
		[3939, 2],
		[3946, 1],
		[3960, 1],
		[3988, 1],
		[4002, 1],
		[4016, 1],
		[4023, 1],
		[4037, 3],
		[4044, 7],
		[4051, 2],
		[4058, 4],
		[4072, 1],
		[4093, 1],
		[4100, 3],
		[4114, 3],
		[4121, 5],
		[4128, 1],
		[4135, 4]
	]
}
