{
	"name": "@legnaleurc/svelte-virtual-scroll-list",
	"description": "Virtualizes lists for Svelte, improving performance with large datasets.",
	"repo_url": "https://github.com/legnaleurc/svelte-virtual-scroll-list",
	"authors": ["legnaleurc"],
	"downloads": 5,
	"updated": "2022-06-02T16:39:44.789Z",
	"tags": ["ui"],
	"github_stars": 0,
	"homepage": "https://v1ack.github.io/svelte-virtual-scroll-list/",
	"typescript": true,
	"version": "1.0.9",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "1.0.9",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@legnaleurc/svelte-virtual-scroll-list",
				"version": "1.0.9",
				"size": 94310
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Disclaimer\n\nThis package is a fork from [v1ack/svelte-virtual-scroll-list](https://github.com/v1ack/svelte-virtual-scroll-list) v1.0.8, which merged the following pull requests:\n\n* [#2](https://github.com/v1ack/svelte-virtual-scroll-list/pull/2): fixes type error\n* [#3](https://github.com/v1ack/svelte-virtual-scroll-list/pull/3): fixes iOS scroll event\n\n# svelte-virtual-scroll-list\n\n[![npm](https://img.shields.io/npm/v/svelte-virtual-scroll-list?style=for-the-badge)](https://npmjs.com/package/svelte-virtual-scroll-list/)\n\nSvelte implementation of vue library [vue-virtual-scroll-list](https://github.com/tangbc/vue-virtual-scroll-list)\n\nVirtualized scrolling for big lists\n\n---\n**Support dynamic both-directional lists** (see example)\n\n---\n\nOnline demo: [https://v1ack.github.io/svelte-virtual-scroll-list/](https://v1ack.github.io/svelte-virtual-scroll-list/)\n\n[Simple example in Svelte REPL](https://ru.svelte.dev/repl/eae82aab17b04420885851d58de50a2e?version=3.38.2)\n\n# Getting started\n\n## Installing from npm\n\n`npm i svelte-virtual-scroll-list -D`\n\nor\n\n`yarn add svelte-virtual-scroll-list -D`\n\n## Using\n\n```html\n\n<script>\n    import VirtualScroll from \"svelte-virtual-scroll-list\"\n\n    let items = [{id: 1, text: \"one\"}, ...]\n</script>\n<div class=\"vs\">\n    <VirtualScroll\n            data={items}\n            key=\"id\"\n            let:data\n    >\n        <div slot=\"header\">\n            This is a header set via slot\n        </div>\n        <div>\n            {data.text}\n        </div>\n        <div slot=\"footer\">\n            This is a footer set via slot\n        </div>\n    </VirtualScroll>\n</div>\n```\n\nMore examples available in `example` folder\n\n# Comparing to other virtualizing components\n\n| |svelte-virtual-scroll-list|svelte-virtual-list|svelte-tiny-virtual-list|\n|---|---|---|---|\n|handle dynamic size data|+|+|-|\n|scroll methods (to index)|+|-|+|\n|infinity scrolling|two-directional|-|one-directional with another lib|\n|initial scroll position|+|-|+|\n|sticky items|-|-|+|\n|top/bottom slots|+|-|+|\n|reached top/bottom events|+|-|-|\n|document as a list|+|-|-|\n\n# API\n\n## Props\n\n|prop|type|default|description|\n|---|---|---|---|\n|data|object[]|`null`|Source for list|\n|key|string|`id`|Unique key for getting data from `data`|\n|keeps|number|`30`|Count of rendered items|\n|estimateSize|number|`estimateSize`|Estimate size of each item, needs for smooth scrollbar|\n|isHorizontal|boolean|`false`|Scroll direction|\n|pageMode|boolean|`false`|Let virtual list using global document to scroll through the list|\n|start|number|`0`|scroll position start index\n|offset|number|`0`|scroll position offset\n|topThreshold|number|`0`|The threshold to emit `top` event, attention to multiple calls.\n|bottomThreshold|number|`0`|The threshold to emit `bottom` event, attention to multiple calls.\n\n## Methods\n\nAccess to methods by component binding\n<details>\n<summary>Binding example</summary>\n\n```html\n\n<script>\n    let vs\n</script>\n\n<VirtualScroll bind:this={vs}></VirtualScroll>\n<button on:click={vs.scrollToBottom}>To bottom</button>\n```\n\n</details>\n\n|method|arguments|description|\n|---|---|---|\n|scrollToBottom|`none`|Scroll list to bottom|\n|scrollToIndex|`index: number`|Set scroll position to a designated index|\n|scrollToOffset|`offset: number`|Set scroll position to a designated offset|\n|getSize|`id: typeof props.key`|Get the designated item size|\n|getSizes|`none`|Get the total number of stored (rendered) items|\n|getOffset|`none`|Get current scroll offset|\n|getClientSize|`none`|Get wrapper element client viewport size (width or height)|\n|getScrollSize|`none`|Get all scroll size (scrollHeight or scrollWidth)|\n|updatePageModeFront|`none`|When using page mode and virtual list root element offsetTop or offsetLeft change, you need call this method manually|\n\n## Events\n\n|event|description|\n|---|---|\n|scroll|Scroll event|\n|top|Top of the list reached|\n|bottom|Bottom of the list reached|\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 2],
		[3596, 3],
		[3603, 1],
		[3624, 1],
		[3638, 1],
		[3645, 1],
		[3666, 1],
		[3673, 1],
		[3694, 1],
		[3708, 1],
		[3722, 1],
		[3729, 1],
		[3743, 1],
		[3771, 2],
		[3778, 1],
		[3799, 1],
		[3806, 1],
		[3820, 1],
		[3834, 1],
		[3848, 1],
		[3855, 5],
		[3862, 2],
		[3869, 1],
		[3883, 2],
		[3897, 2],
		[3925, 1],
		[3932, 1],
		[3946, 1],
		[3974, 1],
		[3981, 1],
		[3988, 1],
		[3995, 1],
		[4016, 3],
		[4023, 1],
		[4030, 1],
		[4037, 1],
		[4044, 10],
		[4051, 2],
		[4058, 1],
		[4072, 1],
		[4086, 1],
		[4093, 2],
		[4100, 4],
		[4107, 2],
		[4114, 5],
		[4121, 5],
		[4128, 4]
	]
}
