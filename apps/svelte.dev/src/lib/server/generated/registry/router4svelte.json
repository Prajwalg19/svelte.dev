{
	"name": "router4svelte",
	"description": "Implement client-side routing for Svelte projects.",
	"repo_url": "https://github.com/OscarLundberg/router4svelte",
	"authors": ["oscarlundberg"],
	"homepage": "https://github.com/OscarLundberg/router4svelte#readme",
	"downloads": 8,
	"updated": "2023-10-06T16:02:42.796Z",
	"tags": ["router"],
	"github_stars": 0,
	"typescript": true,
	"version": "1.0.10",
	"svelte_range": "^3.24.0",
	"last_rune_check_version": "1.0.10",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "router4svelte",
				"version": "1.0.10",
				"size": 395865
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# router4svelte\n\n## summary\na client side routing library for svelte projects.\n\n- uses hash-based routing \n- works with browser buttons\n- redirects standard paths to hash based equivalent\n```diff\n- /posts/hello-world\n+ /#/posts/hello-world\n```\n\n## install\n\n```sh\nnpm i router4svelte\n```\n\n\n## usage\n\n\n### Initialize\n```html\n<!-- App.svelte -->\n<script lang=\"ts\">\n  import { Router, type RouterConfig} from \"router4svelte\";\n  let config:RouterConfig = {};\n</script>\n\n<Router {config} />\n```\n\n### Navigation\n\n#### With components\n- You can drop the included `Link`-component directly in place of anchor-tags.\n```html\n<script>\n  import { Link } from \"router4svelte\";\n</script>\n\n<a    href=\"/about\" class=\"btn btn-outline-primary\">About</a> \n\n<Link href=\"/about\" class=\"btn btn-outline-primary\">About</Link>\n```\n\n#### With api\n- You can use the RouterApi to navigate however you want in your code.\n```html\n<script>\n  import { RouterApi } from \"router4svelte\";\n  \n</script>\n\n<button on:click={ () => RouterApi.back() }>â¬…</button>\n<button on:click={ () => RouterApi.routeTo(\"/about\") }>About</button>\n```\n\n## configure\n\nThe config object maps the paths to one of the following:\n- SvelteComponent\n- RouteOptions-object\n- Function returning RouteOptions-object\n\na simple config might look like this \n```ts\n  const config = {\n    \"/\": Home,\n    \"/about\": About,\n    \"/posts/:id\": Post,\n    DEFAULT: ErrorPage\n  }\n```\n\n### routes\n\nThe routes (keys) of the object are specified as strings, starting with `/` and may declare route parameters prefixed with `:`\n> Examples:\n> `/`\n> `/about`\n> `/posts/:category`\n> `/posts/:id/edit/:version`\n\nAdditionally, a `DEFAULT` entry can be specified as a fallback, which will be applied if no other routes match. \nThe DEFAULT-entry path is declared in uppercase letters `DEFAULT` without preceeding `/`. (See example above and on the bottom of the page)\n\nIf multiple entries match the requested path, the last entry will take precedence and a warning will be logged in the console.\n\n\n#### route parameters\nA route parameter is prefixed with `:` in the definition, and will by default map to a prop on the target component.\nConsider this route config:\n```ts\n\"/posts/:category/:id\": MyPostComponent\n```\nA request to `/posts/news/32` would produce the equivalent of the following output:\n```html\n<MyPostComponent category=\"news\" id=\"32\" />\n```\n\nThere are no hard limits on route parameters, but keep in mind that if too many parameters are present, they may interfere with other declared routes.\n\n\n### advanced config\n\nyou can configure your routes with a `RouteOptions`-object for more control. see supported properties below.\nMap your route directly to such an object, or declare a function that returns `RouteOptions` and optionally takes `RequestParams`. \nYou can mix and match mappings directly to components, to objects or functions as you please.\n\n```ts\ntype RouteOptions = {\n  component: typeof SvelteComponent, // component to render on this route (Required)\n  slot?: typeof SvelteComponent, // component to render in the default slot of the main component\n  props?: Record<string, any> // props to pass to the rendered components (will merge with and be overriden by conflicting route params)\n}\n\ntype RequestParams = {\n  path: string, // Pathname\n  params: Record<string, string>, // route parameters (/:id/) mapped to an object \n  query: Record<string, string> // query parameters (?id=123) mapped to an object\n}\n\nconst config: RouteConfig = {\n  \"/posts/:category\": {\n    component: ListLayout,\n    slot: ListOfPosts\n  },\n  \"/posts/:date\": ({params}) => {\n    try {\n      const date = new Date(params.date)\n      return { component: ListOfPosts, date }\n    } catch(e) {\n      return { \n        component: ErrorComponent, \n        props: { error: \"Invalid date format\" }\n      }\n    }\n  }\n}\n```\n\n\n\n### example App.svelte\n\n```html\n<!-- App.svelte -->\n<script lang=\"ts\">\n  import Nav from \"./components/Nav.svelte\";\n  import Sidebar from \"./components/Sidebar.svelte\";\n  import Products from \"./components/Products.svelte\"\n  import LayoutComponent from \"./components/LayoutComponent.svelte\";\n  import Home from \"./pages/Home.svelte\";\n  import Error  from \"./pages/Error.svelte\";\n  import Posts from \"./pages/Posts.svelte\";\n  import { Router, type RouterConfig } from \"router4svelte\";\n\n  const config: RouterConfig = {\n    \"/\": Home,\n    \"/posts/:id\": Posts,\n    \"/:layoutMode/products\": {\n      component: LayoutComponent,\n      slot: Products\n    },\n    DEFAULT({path}) {\n      return {\n        component: Error,\n        props: { message: `404 - The requested resource ${path} was not found` },\n      };\n    },\n  };\n</script>\n\n<Nav />\n<div class=\"container-fluid\">\n  <div class=\"row\">\n    <div class=\"col\">\n      <Sidebar />\n    </div>\n    <div class=\"col\">\n      <Router {config} />\n    </div>\n  </div>\n</div>\n```",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 1],
		[3596, 2],
		[3603, 13],
		[3610, 7],
		[3617, 6],
		[3638, 1],
		[3645, 13],
		[3659, 3],
		[3666, 13],
		[3687, 6],
		[3715, 7],
		[3722, 2],
		[3729, 4],
		[3736, 3],
		[3743, 1],
		[3764, 2],
		[3771, 15],
		[3778, 1],
		[3785, 1],
		[3792, 2],
		[3806, 2],
		[3813, 1],
		[3820, 6],
		[3827, 4],
		[3834, 5],
		[3841, 60],
		[3848, 4],
		[3855, 1],
		[3862, 11],
		[3869, 3],
		[3876, 6],
		[3883, 4],
		[3890, 20],
		[3897, 6],
		[3904, 13],
		[3911, 2],
		[3932, 2],
		[3939, 3],
		[3946, 1],
		[3953, 3],
		[3960, 3],
		[3967, 1],
		[3974, 3],
		[3988, 13],
		[3995, 1],
		[4002, 1],
		[4009, 5],
		[4016, 2],
		[4023, 6],
		[4030, 2],
		[4037, 20],
		[4044, 10],
		[4051, 3],
		[4058, 2],
		[4065, 5],
		[4072, 3],
		[4079, 2],
		[4100, 33],
		[4107, 6],
		[4114, 8],
		[4121, 13],
		[4128, 10]
	],
	"esm": true,
	"cjs": false
}
