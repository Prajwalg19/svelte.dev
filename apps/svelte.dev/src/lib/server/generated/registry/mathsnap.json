{
	"name": "mathsnap",
	"description": "Render LaTeX math equations in Svelte, React, and Vue.",
	"repo_url": "https://github.com/sinhaparth5/mathsnap",
	"authors": ["parthsinha"],
	"homepage": "https://github.com/sinhaparth5/mathsnap#readme",
	"downloads": 20,
	"updated": "2025-03-29T15:51:58.377Z",
	"tags": ["content"],
	"github_stars": 0,
	"typescript": true,
	"version": "1.0.5",
	"svelte_range": "^5.25.3",
	"last_rune_check_version": "1.0.5",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "mathsnap",
				"version": "1.0.5",
				"size": 1534293
			},
			{
				"name": "katex",
				"version": "0.16.22",
				"size": 3984019
			},
			{
				"name": "commander",
				"version": "8.3.0",
				"size": 151267
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2]
		],
		"circular": []
	},
	"readme": "# MathSnap\n\n[![npm version](https://img.shields.io/npm/v/mathsnap.svg)](https://www.npmjs.com/package/mathsnap)\n[![license](https://img.shields.io/npm/l/mathsnap.svg)](https://github.com/sinhaparth5/mathsnap/blob/master/LICENSE)\n\nMathSnap is a lightweight, framework-agnostic wrapper around [KaTeX](https://katex.org/) that makes it easy to render beautiful math equations in your web applications. Works with React, Svelte, Vue, and vanilla JavaScript.\n\n## Features\n\n- üßÆ Simplified API for rendering LaTeX math equations\n- ‚öõÔ∏è Components for React, Svelte, and Vue\n- üì± Responsive by default\n- üé® Customizable styling options\n- üîç Built-in error handling\n- üì¶ Tiny footprint with KaTeX as the only dependency\n- üìù TypeScript support\n\n## Installation\n\n```bash\n# npm\nnpm install mathsnap katex\n\n# yarn\nyarn add mathsnap katex\n\n# pnpm\npnpm add mathsnap katex\n```\n\n## Quick Start\n\n### React\n\n```jsx\nimport { ReactMathEquation, equations } from 'mathsnap';\nimport 'katex/dist/katex.min.css'; // Import KaTeX CSS\n\nfunction App() {\n  return (\n    <div>\n      <h1>Einstein's famous equation</h1>\n      <ReactMathEquation equation={equations.einstein} displayMode={true} />\n      \n      <h2>Custom equation</h2>\n      <ReactMathEquation equation=\"f(x) = \\\\int_{-\\\\infty}^{\\\\infty} \\\\hat{f}(\\\\xi)\\\\,e^{2 \\\\pi i \\\\xi x} \\\\,d\\\\xi\" displayMode={true} />\n    </div>\n  );\n}\n```\n\n### Svelte\n\n```svelte\n<script>\n  import MathEquation from 'mathsnap/dist/svelte/MathEquation.svelte';\n  import { equations } from 'mathsnap';\n  import 'katex/dist/katex.min.css';\n</script>\n\n<h1>Quadratic Formula</h1>\n<MathEquation equation={equations.quadratic} displayMode={true} />\n\n<h2>Inline equation: <MathEquation equation=\"e^{i\\\\pi} + 1 = 0\" /></h2>\n```\n\n### Vue\n\n```vue\n<template>\n  <div>\n    <h1>Area of a Circle</h1>\n    <MathEquation :equation=\"equations.circleArea\" :displayMode=\"true\" />\n    \n    <h2>With custom styling</h2>\n    <MathEquation \n      equation=\"\\\\nabla \\\\times \\\\vec{B} = \\\\mu_0 \\\\vec{J} + \\\\mu_0 \\\\varepsilon_0 \\\\frac{\\\\partial \\\\vec{E}}{\\\\partial t}\"\n      :displayMode=\"true\"\n      :style=\"{ fontSize: '1.5rem', backgroundColor: '#f5f5f5', padding: '1rem' }\"\n    />\n  </div>\n</template>\n\n<script>\nimport MathEquation from 'mathsnap/dist/vue/MathEquation.vue';\nimport { equations } from 'mathsnap';\nimport 'katex/dist/katex.min.css';\n\nexport default {\n  components: {\n    MathEquation\n  },\n  setup() {\n    return { equations };\n  }\n}\n</script>\n```\n\n### Vanilla JavaScript\n\n```js\nimport { renderMath, equations } from 'mathsnap';\nimport 'katex/dist/katex.min.css';\n\n// Get the container element\nconst container = document.getElementById('math-container');\n\n// Render the equation\nconst { html } = renderMath({\n  equation: equations.schrodinger,\n  displayMode: true\n});\n\n// Set the HTML content\ncontainer.innerHTML = html;\n```\n\n## API Reference\n\n### Core Functions\n\n#### `renderMath(options: MathOptions): { html: string; error: MathError }`\n\nRenders a LaTeX equation to an HTML string.\n\n```ts\nimport { renderMath } from 'mathsnap';\n\nconst { html, error } = renderMath({\n  equation: '\\\\sqrt{a^2 + b^2}',\n  displayMode: true,\n  katexOptions: {\n    minRuleThickness: 0.05,\n    macros: {\n      '\\\\RR': '\\\\mathbb{R}'\n    }\n  }\n});\n\nif (!error.hasError) {\n  console.log(html); // The rendered HTML\n}\n```\n\n#### `isValidEquation(equation: string): boolean`\n\nChecks if a string is a valid LaTeX equation.\n\n```ts\nimport { isValidEquation } from 'mathsnap';\n\nconst isValid = isValidEquation('x^2 + y^2 = z^2');\nconsole.log(isValid); // true\n```\n\n#### `sanitizeEquation(equation: string): string`\n\nSanitizes an equation to prevent code injection.\n\n```ts\nimport { sanitizeEquation } from 'mathsnap';\n\nconst safeEquation = sanitizeEquation(userInput);\n```\n\n### Predefined Equations\n\nMathSnap comes with several predefined equations for common mathematical formulas:\n\n```ts\nimport { equations } from 'mathsnap';\n\n// Available equations:\n// - equations.quadratic (Quadratic formula)\n// - equations.einstein (E = mc¬≤)\n// - equations.pythagorean (a¬≤ + b¬≤ = c¬≤)\n// - equations.euler (Euler's identity)\n// - equations.circleArea (Area of a circle)\n// - equations.normalDistribution (Normal distribution)\n// - equations.derivative (Derivative definition)\n// - equations.integral (Integral definition)\n// - equations.maxwellDivergenceE (Maxwell's equations - divergence of E)\n// - equations.schrodinger (Schr√∂dinger equation)\n\nconsole.log(equations.euler); // e^{i\\pi} + 1 = 0\n```\n\n### React Component\n\n```tsx\nimport { ReactMathEquation } from 'mathsnap';\n\n<ReactMathEquation \n  equation=\"E = mc^2\"\n  displayMode={true}\n  className=\"custom-math\"\n  style={{ fontSize: '20px' }}\n  as=\"div\"\n  katexOptions={{ colorIsTextColor: true }}\n  onError={(error) => console.error(error)}\n/>\n```\n\n| Prop | Type | Default | Description |\n|------|------|---------|-------------|\n| `equation` | `string` | (required) | The LaTeX equation to render |\n| `displayMode` | `boolean` | `false` | Whether to render in display mode (centered, block) or inline mode |\n| `className` | `string` | `''` | Custom class name to add to the container |\n| `style` | `React.CSSProperties` | `{}` | Custom inline styles for the container |\n| `as` | `'div' \\| 'span' \\| 'p'` | Based on `displayMode` | Container element to use |\n| `katexOptions` | `KatexOptions` | `{}` | Additional KaTeX options |\n| `onError` | `(error: Error) => void` | `undefined` | Error callback when rendering fails |\n\n### Svelte Component\n\n```svelte\n<MathEquation \n  equation=\"E = mc^2\"\n  displayMode={true}\n  className=\"custom-math\"\n  style=\"font-size: 20px\"\n  as=\"div\"\n  katexOptions={{ colorIsTextColor: true }}\n/>\n```\n\n| Prop | Type | Default | Description |\n|------|------|---------|-------------|\n| `equation` | `string` | (required) | The LaTeX equation to render |\n| `displayMode` | `boolean` | `false` | Whether to render in display mode (centered, block) or inline mode |\n| `className` | `string` | `''` | Custom class name to add to the container |\n| `style` | `string` | `''` | Custom inline styles for the container |\n| `as` | `'div' \\| 'span' \\| 'p'` | Based on `displayMode` | Container element to use |\n| `katexOptions` | `KatexOptions` | `{}` | Additional KaTeX options |\n\n### Vue Component\n\n```vue\n<MathEquation \n  equation=\"E = mc^2\"\n  :displayMode=\"true\"\n  className=\"custom-math\"\n  :style=\"{ fontSize: '20px' }\"\n  as=\"div\"\n  :katexOptions=\"{ colorIsTextColor: true }\"\n  @error=\"handleError\"\n/>\n```\n\n| Prop | Type | Default | Description |\n|------|------|---------|-------------|\n| `equation` | `string` | (required) | The LaTeX equation to render |\n| `displayMode` | `boolean` | `false` | Whether to render in display mode (centered, block) or inline mode |\n| `className` | `string` | `''` | Custom class name to add to the container |\n| `style` | `Object` | `{}` | Custom inline styles for the container |\n| `as` | `'div' \\| 'span' \\| 'p'` | Based on `displayMode` | Container element to use |\n| `katexOptions` | `KatexOptions` | `{}` | Additional KaTeX options |\n\n## Advanced Usage\n\n### Custom KaTeX Options\n\nYou can pass any valid KaTeX options through the `katexOptions` prop:\n\n```jsx\n<ReactMathEquation \n  equation=\"\\color{blue}{f(x) = sin(x)}\"\n  katexOptions={{\n    colorIsTextColor: true,\n    macros: {\n      \"\\\\RR\": \"\\\\mathbb{R}\"\n    }\n  }}\n/>\n```\n\n### Responsive Equations\n\nMathSnap components are responsive by default, with `max-width: 100%` and `overflow-x: auto` to handle large equations gracefully.\n\n### Error Handling\n\nMathSnap provides error handling out of the box:\n\n```jsx\n<ReactMathEquation \n  equation=\"a = \"  // Invalid equation\n  onError={(error) => {\n    console.error('Math rendering error:', error.message);\n    // Handle the error, e.g., show a notification\n  }}\n/>\n```\n\n## Browser Support\n\nMathSnap works in all modern browsers that support KaTeX.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nMIT",
	"legacy_svelte": true,
	"downloads_history": [
		[4100, 369],
		[4107, 39],
		[4114, 20],
		[4121, 16],
		[4128, 16]
	]
}
