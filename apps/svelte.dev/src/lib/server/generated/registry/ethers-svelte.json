{
	"name": "ethers-svelte",
	"description": "Integrate ethers.js with Svelte for blockchain interactions.",
	"repo_url": "https://github.com/clbrge/ethers-svelte",
	"authors": ["clbrge"],
	"homepage": "https://github.com/clbrge/ethers-svelte#readme",
	"downloads": 20,
	"updated": "2023-11-07T14:05:22.033Z",
	"tags": ["integration"],
	"github_stars": 16,
	"typescript": true,
	"version": "3.2.1",
	"svelte_range": ">4.0",
	"last_rune_check_version": "3.2.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "ethers-svelte",
				"version": "3.2.1",
				"size": 2212883
			},
			{
				"name": "@metamask/jazzicon",
				"version": "2.0.0",
				"size": 5867
			},
			{
				"name": "color",
				"version": "0.11.4"
			},
			{
				"name": "clone",
				"version": "1.0.4",
				"size": 11132
			},
			{
				"name": "color-string",
				"version": "0.3.0"
			},
			{
				"name": "color-name",
				"version": "1.1.4",
				"size": 6693
			},
			{
				"name": "color-convert",
				"version": "1.9.3",
				"size": 26964
			},
			{
				"name": "color-name",
				"version": "1.1.3"
			},
			{
				"name": "mersenne-twister",
				"version": "1.1.0"
			},
			{
				"name": "ethereum-blockies-base64",
				"version": "1.0.2",
				"size": 16593
			},
			{
				"name": "pnglib",
				"version": "0.0.1"
			},
			{
				"name": "ethers",
				"version": "6.13.7",
				"size": 12630533
			},
			{
				"name": "@adraffy/ens-normalize",
				"version": "1.10.1",
				"size": 445992
			},
			{
				"name": "@noble/curves",
				"version": "1.2.0",
				"size": 1354635
			},
			{
				"name": "@noble/hashes",
				"version": "1.3.2",
				"size": 746880
			},
			{
				"name": "@types/node",
				"version": "22.7.5",
				"size": 2254135
			},
			{
				"name": "undici-types",
				"version": "6.19.8",
				"size": 84225
			},
			{
				"name": "aes-js",
				"version": "4.0.0-beta.5",
				"size": 737817
			},
			{
				"name": "tslib",
				"version": "2.7.0",
				"size": 86155
			},
			{
				"name": "ws",
				"version": "8.17.1",
				"size": 141358
			},
			{
				"name": "svelte",
				"version": "5.28.2",
				"size": 2426223
			},
			{
				"name": "@ampproject/remapping",
				"version": "2.3.0",
				"size": 78946
			},
			{
				"name": "@jridgewell/gen-mapping",
				"version": "0.3.8",
				"size": 81596
			},
			{
				"name": "@jridgewell/set-array",
				"version": "1.2.1",
				"size": 17945
			},
			{
				"name": "@jridgewell/sourcemap-codec",
				"version": "1.5.0",
				"size": 112815
			},
			{
				"name": "@jridgewell/trace-mapping",
				"version": "0.3.25",
				"size": 169330
			},
			{
				"name": "@jridgewell/resolve-uri",
				"version": "3.1.2",
				"size": 53153
			},
			{
				"name": "@types/estree",
				"version": "1.0.7",
				"size": 26147
			},
			{
				"name": "acorn",
				"version": "8.14.1",
				"size": 547473
			},
			{
				"name": "@sveltejs/acorn-typescript",
				"version": "1.0.5",
				"size": 197476
			},
			{
				"name": "aria-query",
				"version": "5.3.2",
				"size": 176114
			},
			{
				"name": "axobject-query",
				"version": "4.1.0",
				"size": 110878
			},
			{
				"name": "clsx",
				"version": "2.1.1",
				"size": 8555
			},
			{
				"name": "esm-env",
				"version": "1.2.2",
				"size": 3784
			},
			{
				"name": "esrap",
				"version": "1.4.6",
				"size": 50818
			},
			{
				"name": "is-reference",
				"version": "3.0.3",
				"size": 3953
			},
			{
				"name": "locate-character",
				"version": "3.0.0",
				"size": 5325
			},
			{
				"name": "magic-string",
				"version": "0.30.17",
				"size": 467464
			},
			{
				"name": "zimmerframe",
				"version": "1.1.2",
				"size": 12266
			},
			{
				"name": "svelte-proxied-store",
				"version": "2.0.4",
				"size": 30004
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[2, 4],
			[4, 5],
			[2, 6],
			[6, 7],
			[1, 8],
			[0, 9],
			[9, 10],
			[0, 11],
			[11, 12],
			[11, 13],
			[13, 14],
			[11, 14],
			[11, 15],
			[15, 16],
			[11, 17],
			[11, 18],
			[11, 19],
			[0, 20],
			[20, 21],
			[21, 22],
			[22, 23],
			[22, 24],
			[22, 25],
			[25, 26],
			[25, 24],
			[21, 25],
			[20, 24],
			[20, 27],
			[20, 28],
			[20, 29],
			[20, 30],
			[20, 31],
			[20, 32],
			[20, 33],
			[20, 34],
			[34, 24],
			[20, 35],
			[35, 27],
			[20, 36],
			[20, 37],
			[37, 24],
			[20, 38],
			[0, 39]
		],
		"circular": []
	},
	"readme": "# ethers-svelte\n\n`ethers-svelte` is a package that integrates the [ethers.js v6\nlibrary](https://docs.ethers.io/v6/) as a collection of [readable Svelte\nstores](https://svelte.dev/tutorial/readable-stores) for Svelte or SvelteKit. It\nprovides a convenient and reactive way to interact with Ethereum blockchain\nusing ethers.js in your Svelte applications.\n\n**Key features:****\n\n- A set of reactive Svelte stores, automatically updated when a new connection,\n  or when the chain or the selected account changes\n- Support for ethers.js version 6, with compatibility for various EVM providers\n  (such as browser wallets like Metamask, WalletConnect, Web3Modal, web3-onboard and more)\n- A few basic Svelte components for typical ethers.js usage, such as `Balance`,\n  `Identicon`, and `Jazzicon`, demonstrating how it is easy to build common UI\n  elements in your application.\n\nWith `ethers-svelte`, you can quickly set up connections to Ethereum blockchain,\nmanage accounts and contracts, and create reactive UI components that respond to\nchanges in the underlying blockchain data. This package simplifies the process\nof building decentralized applications using Svelte or SvelteKit (Sapper should\nalso works but it's official support is now deprecated).\n\n`ethers-svelte` support `ethers.js` version 6. If you want the same package for\n`ethers.js` version 5, please use the package\n[svelte-ethers-store](https://www.npmjs.com/package/svelte-ethers-store).\n\nIf you also use the [web3.js library](https://web3js.readthedocs.io/) to\ninteract with EVM, you may be interested by the sister package\n[svelte-web3](https://www.npmjs.com/package/svelte-web3).\n\n### Community\n\nFor additional help or discussion, join us [in our\nDiscord](https://discord.gg/7yXuwDwaHF).\n\n\n## Installation\n\nTo use `ethers-svelte` in your Svelte or SvelteKit project, you need to add it\nas a dependency:\n\n```bash\nnpm i ethers-svelte\n```\n\nOnce the package is installed, you can import and use the provided stores and\ncomponents in your application, as shown in the [Basic\nUsage](#basic-usage-default-stores-connected-to-one-chain) and [Ethers Svelte\nComponents](#ethers-svelte-components) sections.\n\n\n## Basic Usage (Default Stores Connected to One Chain)\n\nIn this section, we will cover how to use the default stores provided by\n`ethers-svelte` for managing a single chain connection. The default stores\ninclude `connected`, `provider`, `chainId`, `chainData`, `signer`,\n`signerAddress`, and `contracts`.\n\n### Derived Stores\n\n`ethers-svelte` provides a set of readable Svelte stores that automatically\nupdate when a new connection is established, or when the chain or selected\naccount changes. Import the required stores in your Svelte or JavaScript files:\n\n```js\nimport {\n  connected,\n  provider,\n  chainId,\n  chainData,\n  signer,\n  signerAddress,\n  contracts,\n} from \"ethers-svelte\"\n```\n\n- connected: store value is true if a connection has been set up.\n- provider: store value is an Ethers.js Provider instance when connected.\n- chainId: store value is the current chainId when connected (** always a BigInt **)\n- chainData: store value is the current blokchain CAIP-2 data (when connected), see below.\n- signer: store value is an Ethers.js Signer instance when connected.\n- signerAddress: store value is a shortcut to get `$signer.getAddress()` when connected.\n- contract: store value is an Object for all ethers.Contract instances you need.\n\n\nTo make these stores useful in your Svelte application, you first need to\nestablish a connection to an EVM blockchain. Use the `defaultEvmStores` helper\nto initiate the connection and instantiate all stores:\n\n```js\nimport { defaultEvmStores } from \"ethers-svelte\"\n```\n\n### Connecting with the Browser Provider (e.g., MetaMask)\n\nTo enable a connection with the current [EIP-1193\nprovider](https://eips.ethereum.org/EIPS/eip-1193#appendix-i-consumer-facing-api-documentation)\ninjected into the browser's `window` context, simply call the `setProvider()`\nmethod on the `defaultEvmStores` helper without any arguments:\n\n```js\ndefaultEvmStores.setProvider()\n```\n\nPlease note that using `setProvider()` without any arguments is only possible in\na browser context. When using SvelteKit, you may want to use the `onMount`\nfunction. Similarly, you cannot use `setProvider` with no argument in SSR\ncontext.\n\n```js\nimport { onMount } from \"svelte\"\n\nonMount(() => {\n  // Add a test to return in SSR context\n  defaultEvmStores.setProvider()\n})\n```\n\n`ethers-svelte` will automatically update the stores when the network or\naccounts change, and it will remove listeners upon disconnection.\n\n### Abbreviating the `defaultEvmStores` Helper\n\nIt's common to abbreviate the `defaultEvmStores` helper in applications. For\nexample, you can use a `evm` shortcut alias as shown in the following example.\nThis documentation will use this convention going forward.\n\n```js\nimport {\n  defaultEvmStores as evm,\n} from \"ethers-svelte\"\n\n// ...\n\nevm.setProvider()\n```\n\nBy using the `evm` alias, you can simplify your code and make it easier to read\nwhile still retaining the functionality provided by the `defaultEvmStores`\nhelper. This convention allows for cleaner code organization and improved\nreadability in your Ethereum-based applications.\n\n\n### Connecting with Non-Injected EIP-1193 Providers\n\nFor non-injected EIP-1193 providers like:\n\n- buidler.dev\n- ethers.js\n- eth-provider\n- WalletConnect\n- Web3Modal\n- Web3 Onboard\n\n\nCall the `setProvider()` method on the `evm` helper with the\nJavaScript provider instance object of the library. For example, with Web3Modal:\n\n```js\nconst web3Modal = new Web3Modal(<your config>)\nconst provider = await web3Modal.connect()\nevm.setProvider(provider)\n```\n\n`ethers-svelte` will automatically update the stores when the network or\naccounts change, and it will remove listeners upon disconnection.\n\n### Connecting with Other Ethers.js Providers (ws, http, ipc, ...)\n\nYou can instantiate various types of providers using Ethers.js (see the\n[relevant documentation](https://docs.ethers.org/v6/api/providers/thirdparty/))\nand pass them as an argument to `evm.setProvider()` to initiate the\nstores:\n\n```js\nevm.setProvider(new ethers.InfuraProvider(<args>))\n// or\nevm.setProvider(new ethers.EtherscanProvider(<args>))\n// or\nevm.setProvider(new ethers.AlchemyProvider(<args>))\n// etc...\n```\n\nAs a shortcut, if you pass a URL string or a valid connection object, an\n[Ethers.js\nJsonRpcProvider](https://docs.ethers.org/v6/api/providers/jsonrpc/#JsonRpcProvider)\nwill be automatically instantiated.\n\nFor providers that support the `getSigner()` function, a Signer Object will be\nautomatically associated with the `signer` store. You can also pass\n`addressOrIndex` as the second argument of `setProvider()` to select another\naccount than the default when possible.\n\n\n```js\nevm.setProvider(<Ethers provider>, <addressOrIndex>)\n```\n\nIf you don't need a signer, you might also call `setProvider()` with the\nargument `addressOrIndex` set to `null`, which will bypass any attempt to detect\nan account.\n\n### Using the Stores\n\nAfter a connection has been established, you can import the stores anywhere in\nyour application. Most of the time, you should use the `$` prefix Svelte\nnotation to access the store values.\n\n```html\n<script>\n  import { connected, chainId, signerAddress } from \"ethers-svelte\"\n</script>\n\n{#if !$connected}\n\n<p>My application is not yet connected</p>\n\n{:else}\n\n<p>Connected to chain (id {$chainId}) with account ($signerAddress)</p>\n\n{/if}\n```\n\nThe example above allows you to display connection status, chain ID, and signer\naddress in your application based on the current connection state.\n\nAs you build your application, you can use these stores to create reactive UI\ncomponents that respond to changes in the underlying blockchain data.\n\n\n### Using the Ethers.js Providers and Signers API\n\nTo leverage the full functionality of Ethers.js Providers and Signers within\nyour Svelte application, use the `$` prefix Svelte notation to access the\n`provider` and `signer` stores. This allows you to call methods from the\nEthers.js API directly.\n\nFor example, you can interact with the blockchain using the following Ethers.js methods:\n\n```js\nimport { connected, provider, signer } from \"ethers-svelte\"\n\n// ...\n\nconst { name, chainId } = await $provider.getNetwork()\n\nconst balance = await $signer.getBalance()\n\n$signer.sendTransaction({ to: <recipient>, value: <amount>, gasLimit: <gasLimit> })\n```\n\nRemember that for providers that don't support `getSigner`, the value of\n`$signer` will be `null`.\n\nBy using the `$` notation to access the `provider` and `signer` instances, you\ncan ensure that your application's UI components will react to any changes in\nthe underlying blockchain data. This simplifies the process of creating and\nmanaging decentralized applications using Svelte.\n\n\n### Using the Contracts Store for Reactive Contract Calls\n\nThe `contracts` store allows you to interact with smart contracts reactively by\ndeclaring their address, ABI, and an optional logical name. To do this, use the\n`attachContract()` function provided by `evm`.\n\n```html\n<script>\n  import { defaultEvmStores as evm } from \"ethers-svelte\"\n\n  // ...\n\n  evm.attachContract(\"myContract\", <address>, <abi>)\n</script>\n```\n\nThe `attachContract()` function only needs to be called once and can be called\nbefore a connection is established. `Ethers.Contract` instances will be created\nwhen a connection becomes available. If you want to reattach a new contract\ndefinition or ABI when the current network changes, simply use the same logical\nname. The old definition will be overwritten, and the instance updated in the\n`contracts` store.\n\nAfter declaring a contract, you can access its instance anywhere in your\napplication using the `$` notati*on and the logical name:\n\n```html\n<script>\n  import { contracts } from \"ethers-svelte\"\n\n  // ...\n</script>\n\n{#await $contracts.myContract.totalSupply()}\n\n<span>waiting...</span>\n\n{:then value}\n\n<span>Result of contract call totalSupply on my contract: {value}</span>\n\n{/await}\n```\n\nBy default, `ethers-svelte` builds contract instances using the signer if\navailable and the provider otherwise. You can force the use of the current\nprovider by passing `false` as the fourth argument to `attachContract()`.\n\n```js\nevm.attachContract('myContract', <address>, <abi>, false)\n```\n\nBy using the `$contracts` store, you can create reactive UI components that\ninteract with smart contracts and automatically update when the underlying\ncontract state changes.\n\n### Accessing Stores Outside of Svelte Files\n\nWhen working with pure JavaScript files outside of Svelte components, you cannot\nuse the `$` prefix notation to access store values directly. Instead, you can\nuse the `$<store>` method provided by the `defaultEvmStores/evm` helper to access\nthe instantiated values without subscribing to the store:\n\n```js\n// this is not a Svelte file but a standard JavaScript file\nimport { defaultEvmStores as evm } from \"ethers-svelte\"\n\nif (evm.$selectedAccount)) {\n  // Do something if the store selectedAccount is non-null\n}\n```\n\nYou can use the `$<store>` methods with any of the available store names, such\nas `connected`, `provider`, `chainId`, `chainData`, `signer`, `signerAddress`,\nand `contracts`.\n\n\n### Forcing a Disconnect (and Removing All Listeners)\n\nThere might be situations where you want to disconnect from the current provider\nand remove all associated listeners. To achieve this, simply call the\n`disconnect()` method on the `defaultEvmStores/evm` helper:\n\n```js\nevm.disconnect()\n```\n\nThis method will reset the connection state, remove all listeners, and update\nthe store values accordingly. You can use this method, for example, when your\napplication needs to switch between different providers or when the user logs\nout.\n\nBy disconnecting and removing listeners, you can ensure that your application\nremains responsive to user actions and maintains a clean state when transitions\noccur between providers or user sessions.\n\n\n## Human Readable Chain CAIP-2 Information\n\nThe `chainData` store provides human-readable information about the currently\nconnected chain in the\n[CAIP-2](https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-2.md)\nformat. This information can be useful for displaying details about the\nconnected chain and updating UI elements reactively.\n\n### Accessing Chain Data\n\nTo access the chain data, simply import and use the `chainData` store:\n\n```js\nimport { chainData } from \"ethers-svelte\"\n```\n\nThe information returned by the `chainData` store depends on the connected\nchain. If the store has not yet been connected (with `setProvider()`), the store\nvalue will be an empty Object.\n\n### Example\n\nThe following is an example of the CAIP-2 formatted information when the default\nstore is connected to the Ethereum Mainnet. The `chainData` store will return an\nobject containing various information about the connected chain, such as its\nname, chain ID, native currency, and more.\n\nYou can use this information to display relevant details about the connected\nchain in your application and update your UI reactively based on the current\nchain data.\n\n```json\n{\n  \"name\": \"Ethereum Mainnet\",\n  \"chain\": \"ETH\",\n  \"icon\": \"ethereum\",\n  \"rpc\": [\n    \"https://mainnet.infura.io/v3/${INFURA_API_KEY}\",\n    \"https://api.mycryptoapi.com/eth\"\n  ],\n  \"faucets\": [],\n  \"nativeCurrency\": {\n    \"name\": \"Ether\",\n    \"symbol\": \"ETH\",\n    \"decimals\": 18\n  },\n  \"infoURL\": \"https://ethereum.org\",\n  \"shortName\": \"eth\",\n  \"chainId\": 1,\n  \"networkId\": 1,\n  \"slip44\": 60,\n  \"ens\": { \"registry\": \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\" },\n  \"explorers\": [\n    {\n      \"name\": \"etherscan\",\n      \"url\": \"https://etherscan.io\",\n      \"standard\": \"EIP3091\"\n    }\n  ]\n}\n```\n\n\n### Accessing All Chains CAIP-2 Data Directly\n\nIf you want to access all chains CAIP-2 data directly without using the\n`chainData` store, you can use the `allChainsData` getter. It returns the list\nof all available CAIP-2 data.\n\n```js\nimport { allChainsData } from \"ethers-svelte\"\n\nconsole.log(allChainsData)\n```\n\nAlternatively, you can use the `getChainDataByChainId` helper function, which\ntakes the `chainId` as an argument and returns the corresponding CAIP-2 data or\nan empty object if not found.\n\n```js\nimport { getChainDataByChainId } from \"ethers-svelte\"\n\nconsole.log(getChainDataByChainId(5))\n```\n\nThese methods allow you to access chain-specific information without relying on\nthe reactive `chainData` store, making it easier to work with multiple chains or\nretrieve data outside of Svelte components.\n\n## Ethers.js Svelte Components\n\n`ethers-svelte` includes several basic Svelte components designed to simplify\ncommon tasks when building Ethereum-based applications. These components\ndemonstrate how to use the `ethers-svelte` library effectively and serve as\nreusable and composable best practices components. Currently, the library\nincludes `Balance`, `Identicon`, and `Jazzicon` components. We encourage\ncommunity members to contribute and help develop additional components by\njoining our discussions in our [Discord](https://discord.gg/7yXuwDwaHF).\n\nYou can find example usage of these components in the `components` route in the\nexample directory.\n\n### Balance Component\n\nThe `Balance` component displays the balance of a specified Ethereum address. To\nuse the `Balance` component, import it and pass the address as a prop:\n\n```html\n<script>\n  import { Balance } from 'ethers-svelte/components'\n</script>\n\n<p>Balance: <Balance address=\"0x0000000000000000000000000000000000000000\" /></p>\n```\n\n### Identicon Component\n\nThe `Identicon` component generates a unique identicon (a visual representation\nof an Ethereum address) using the `ethereum-blockies-base64` library. To use the\n`Identicon` component, import it and pass the address as a prop:\n\n```html\n<script>\n  import { Identicon } from 'ethers-svelte/components'\n</script>\n\n<Identicon address=\"0x0000000000000000000000000000000000000000\" />\n```\n\n### Jazzicon Component\n\nThe `Jazzicon` component generates a unique and colorful identicon using the\n`@metamask/jazzicon` library. To use the `Jazzicon` component, import it and\npass the address and size (optional) as props:\n\n```html\n<script>\n  import { Jazzicon } from 'ethers-svelte/components'\n</script>\n\n<Jazzicon address=\"0x0000000000000000000000000000000000000000\" size={32} />\n```\n\nThese components serve as a starting point for building your Ethereum-based\napplications using `ethers-svelte`. You can further customize them and create\nadditional components according to your application's requirements. By\nleveraging the reactivity and simplicity of Svelte along with the powerful\nfeatures of ethers.js, you can create a seamless and efficient user experience\nfor your decentralized applications.\n\n## Frequently Asked Questions\n\n### 1. How can I automatically connect to a provider on page load?\n\nAuto-connecting on page load is outside the scope of this package. However, the\nimplementation depends on the type of provider you are using and a method to\nstore connection information between page loads (e.g., using localStorage). You\ncan create a custom function that connects to your desired provider and calls\n`evm.setProvider()` on page load.\n\n### 2. Can I use ethers-svelte with multiple chains simultaneously?\n\nYes, you can create multiple instances of EVM stores by calling\n`makeEvmStores(name)` with a unique name for each instance. This allows you to\nmanage connections, accounts, and contracts for different chains independently.\n\n### 3. Can I use ethers-svelte with Sapper or SvelteKit?\n\nYes, `ethers-svelte` works with both Sapper and SvelteKit. However, Sapper suppory\nis not officially supported and when using `setProvider()` with no arguments in\na server-side rendering (SSR) context, you should use the `onMount` lifecycle\nfunction to ensure it is called only in the browser context.\n\n\n### 4. Is there an example of integrating `ethers-svelte` with Web3 Onboard\n\nYes, you can refer to the Rouge Ticket application, which demonstrates the\nintegration of `ethers-svelte` and Web3 Onboard. The wallet configuration can be\nfound in the `wallet.js` file:\n\n[https://github.com/TheRougeProject/ticket-dapp/blob/main/src/lib/wallet.js](https://github.com/TheRougeProject/ticket-dapp/blob/main/src/lib/wallet.js)\n\nThis example will help you understand how to use `ethers-svelte` in conjunction\nwith Web3 Onboard to build a seamless and user-friendly Ethereum application.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 29],
		[3596, 123],
		[3603, 32],
		[3610, 10],
		[3617, 19],
		[3624, 6],
		[3631, 7],
		[3638, 5],
		[3645, 25],
		[3652, 8],
		[3659, 3],
		[3666, 26],
		[3673, 23],
		[3680, 11],
		[3687, 7],
		[3694, 15],
		[3701, 8],
		[3708, 11],
		[3715, 18],
		[3722, 23],
		[3729, 13],
		[3736, 3],
		[3743, 28],
		[3750, 3],
		[3757, 3],
		[3771, 3],
		[3778, 5],
		[3785, 6],
		[3792, 33],
		[3799, 53],
		[3806, 31],
		[3813, 32],
		[3820, 5],
		[3827, 5],
		[3834, 6],
		[3841, 46],
		[3848, 13],
		[3855, 12],
		[3869, 3],
		[3876, 1],
		[3883, 6],
		[3890, 17],
		[3897, 41],
		[3904, 20],
		[3911, 36],
		[3918, 7],
		[3925, 32],
		[3932, 5],
		[3939, 20],
		[3946, 18],
		[3953, 10],
		[3960, 11],
		[3967, 18],
		[3974, 3],
		[3981, 3],
		[3988, 13],
		[3995, 18],
		[4002, 10],
		[4009, 3],
		[4016, 19],
		[4023, 15],
		[4030, 15],
		[4037, 29],
		[4044, 15],
		[4051, 4],
		[4058, 11],
		[4065, 8],
		[4072, 34],
		[4079, 5],
		[4086, 43],
		[4093, 42],
		[4100, 50],
		[4107, 28],
		[4114, 20],
		[4121, 14],
		[4128, 9]
	]
}
