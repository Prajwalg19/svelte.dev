{
	"name": "xmodel-svelte",
	"description": "Implement OOP style state management for Svelte apps.",
	"repo_url": "https://github.com/TishanV/xmodel",
	"authors": ["tiscodes"],
	"homepage": "https://github.com/TishanV/xmodel/tree/main#readme",
	"downloads": 4,
	"updated": "2022-08-16T11:30:26.399Z",
	"tags": ["miscellaneous"],
	"github_stars": 0,
	"typescript": true,
	"version": "1.0.2",
	"svelte_range": "^3.49.0",
	"last_rune_check_version": "1.0.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "xmodel-svelte",
				"version": "1.0.2",
				"size": 10897
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Xmodel for Svelte\nPublished Date: 16 Aug 2022 (v1.0.2)\n\n> **Only for Svelte apps.**\n\nVisit Github page for other frameworks (React, Solid.js).\n\n```bash\n    npm i xmodel-svelte\n    # or \n    yarn add xmodel-svelte\n```\n---\n## Advantages\n-  Model states can be both global or local.\n-  Can share model codes across applications/framework with minimum code refactor\n-  Intuitive for MVVM or MVI architecture\n-  Less boilerplate/ Straightforward\n---\n## Intro\n\nTired of Redux or using the useReducer or other Flux pattern? This library eliminitates your decision time on state management instead focus on building the actual buisness logic in OOP style.\n\nA good design pattern is that your buisness logic should be never be tied with state management functions i.e. The core buisness logic must be independent from your app architecture thus it has to be loosely coupled with other components in your architecture.\n\n### Models\n\nModels are the base component of the buisness logic where each model represent the specific domain-logic. MVVM, MVC, MVI and many uses the model in their architecture, hence the model code is portable for any framework. Thus you can port your model created for this library anywhere with minimum or no changes.  \n\n## API\n---\n`Model`\n\nBase abstract class that need to be extended by your model class.\n\n`PrimitiveModel`\n\nPrimitiveModel is used when the model has only a single primitive variable and has its own set of functions to modify or reuse.\n\n```typescript\nconstructor(value: Primitive)\nvalue: Primitive\nvalueOf(): Primitive\n\ntype Primitive = string | number | boolean | null | undefined | BigInt | Symbol\n```\n\n`ArrayModel`\n\nArray model is used for managing list of models where each model item can be modified directly. Native javascript array of model will not be reactive, thus you need to implement by extending this class for reactive collection of models.\n\n```typescript\nconstructor(Model: typeof Model) // Here you pass the Model class not the instance\nlist: Model[]\nat(i: number): Model\npush(item: Model): void\npop(i?: number, n?: number): Model | undefined \n```\n\n`useModel(modelClass: Model, args?: string[])`\n\nThis function is used to convert your model class into reactive state which can be used anywhere in your application.\n\n> Note: It can be called outside the jsx component thus making it available globally.\n\n---\n## Example (Todo App)\n\n```typescript\n// ./models/Todo.ts\nimport { Model } from \"xmodel-svelte\";\n\nclass Todo extends Model {\n    task: string;\n    isDone: boolean;\n\n    constructor(task: string) {\n        super();\n        this.task = task;\n        this.isDone = false;\n    }\n\n    changeTask(task: string) {\n        this.task = task;\n    }\n\n    toggleDone() {\n        this.isDone = !this.isDone;\n    }\n}\n\nexport default Todo;\n\n```\n\n```typescript\n// ./models/TodoList.ts\nimport { ArrayModel } from \"xmodel-svelte\";\nimport Todo from \"./Todo\";\n\nclass TodoList extends ArrayModel<Todo> {\n  constructor() {\n    super(Todo);\n  }\n\n  add(task: string) {\n    this.push(new Todo(task));\n    // push method is available on ArrayModel\n    // If you need use native methods of array you can directly modify on this.list\n  }\n\n  delete(i: number) {\n    this.pop(i);\n    // This pop function can remove item at any index like in Python\n    // Not only removes 1 element but also subsequent n items by passing it as second arg.\n  }\n}\n\nexport default TodoList;\n```\n\n```typescript\n// ./App.svelte\n<script lang=\"ts\">\n  import { useModel } from \"xmodel-svelte\";\n  import TodoList from \"./models/TodoList\";\n  import TodoView from \"./lib/Todo.svelte\";\n\n  let jotter: HTMLInputElement;\n\n  const todos = useModel(TodoList);\n  const addTodo = () => todos.add(jotter.value);\n</script>\n\n<div>\n  <input bind:this={jotter} placeholder=\"Jot task\" />\n  <button on:click={addTodo}>Add Task</button>\n</div>\n{#each $todos.list as todo, i}\n  <TodoView\n    task={todo.task}\n    isDone={todo.isDone}\n    onDelete={() => todos.delete(i)}\n    toggleDone={() => todos.$.toggleDone(i)}\n  />\n{/each}\n```",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 4],
		[3603, 1],
		[3610, 4],
		[3624, 4],
		[3645, 1],
		[3659, 1],
		[3666, 4],
		[3673, 1],
		[3694, 2],
		[3708, 1],
		[3715, 1],
		[3722, 1],
		[3743, 2],
		[3771, 5],
		[3778, 3],
		[3792, 1],
		[3799, 3],
		[3806, 2],
		[3820, 2],
		[3841, 17],
		[3848, 2],
		[3869, 1],
		[3876, 1],
		[3890, 3],
		[3897, 4],
		[3911, 3],
		[3918, 1],
		[3946, 2],
		[3960, 1],
		[3974, 1],
		[3988, 1],
		[3995, 2],
		[4023, 6],
		[4030, 6],
		[4037, 5],
		[4044, 8],
		[4051, 2],
		[4058, 1],
		[4065, 1],
		[4086, 2],
		[4100, 10],
		[4114, 4],
		[4121, 11],
		[4128, 1],
		[4135, 3]
	]
}
