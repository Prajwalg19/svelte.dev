{
	"name": "@overlays/svelte",
	"description": "Create imperative overlays in Svelte applications.",
	"repo_url": "https://github.com/hairyf/unoverlays",
	"authors": ["tuimao"],
	"homepage": "https://github.com/hairyf/unoverlays#readme",
	"downloads": 9,
	"updated": "2023-05-22T03:04:41.188Z",
	"tags": ["ui"],
	"github_stars": 69,
	"typescript": true,
	"version": "0.4.3",
	"svelte_range": "^3.57.0",
	"last_rune_check_version": "0.4.3",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@overlays/svelte",
				"version": "0.4.3",
				"size": 39465
			},
			{
				"name": "svelte",
				"version": "3.59.2",
				"size": 10624206
			},
			{
				"name": "@overlays/core",
				"version": "0.4.3",
				"size": 17217
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2]
		],
		"circular": []
	},
	"readme": "# Getting Started\r\n\r\ncreate imperative overlays in the svelte application, supporting context inheritance!\r\n\r\n## Install\r\n\r\nWith pnpm: \r\n```sh\r\npnpm add @overlays/svelte\r\n```\r\n\r\nWith yarn:\r\n```sh\r\nyarn add @overlays/svelte\r\n```\r\n\r\n## Usage\r\n\r\n\r\n### Step 1: Define Component\r\n\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n  import { useOverlay, Overlay } from \"@overlays/svelte\";\r\n  import { fly } from \"svelte/transition\";\r\n  \r\n  export let title: number\r\n  export let duration = 200\r\n\r\n  // duration of overlay duration, helps prevent premature component destroy\r\n  const { resolve, reject } = useOverlay({ duration })\r\n\r\n  function onClick() {\r\n    resolve(`${title}:confirmed`)\r\n  }\r\n</script>\r\n\r\n<Overlay>\r\n  <div transition:fly={{ opacity: 0, duration }} on:click={onClick}>\r\n    <slot name=\"title\">\r\n      { title }\r\n    </slot>\r\n  </div>\r\n</Overlay>\r\n```\r\n\r\n### Step 2: Create Overlay\r\n\r\nYou can use the `defineOverlay` method to convert the component into a modal dialog in Javascript / Typescript, which allows you to call it.\r\n\r\n```ts\r\nimport { defineOverlay } from '@overlays/svelte'\r\nimport OverlayComponent from './overlay.svelte'\r\n\r\n// Convert to imperative callback\r\nconst callback = defineOverlay(OverlayComponent)\r\n// Call the component and get the value of the resolve callback\r\nconst value = await callback({ title: 'callbackOverlay' })\r\n// value === \"callbackOverlay:confirmed\"\r\n```\r\n\r\nYou can also use `renderOverlay` to directly call the component and skip the `defineOverlay` method.\r\n\r\n```ts\r\nimport { renderOverlay } from '@overlays/svelte'\r\nimport OverlayComponent from './overlay.svelte'\r\n\r\nconst value = await renderOverlay(OverlayComponent, {\r\n  title: 'useOverlay'\r\n})\r\n// value === \"useOverlay:confirmed\"\r\n```\r\n\r\n## Controlled manner\r\n\r\nBy default, you do not need to control the display and hiding of the `visible` variable. The value is controlled by the component `Overlay`, and you can pass in `visible` to control the display\r\n\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n  import { useOverlay, Overlay } from \"@overlays/svelte\";\r\n\r\n  let visible = false\r\n\r\n  const { resolve, reject, deferred, vanish } = useOverlay({\r\n    // close the transition duration, at this point you need to manually destroy it\r\n    duration: false,\r\n    // cancel setting visible to true immediately\r\n    immediate: false\r\n  })\r\n\r\n  // Manually set vanish (when promise ends)\r\n  deferred.finally(() => vanish())\r\n</script>\r\n\r\n<Overlay bind:visible={visible}>\r\n  <div on:click={() => resolve(`${title}:confirmed`)}>\r\n    ...\r\n  </div>\r\n</Overlay>\r\n```",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 10],
		[3596, 9],
		[3603, 12],
		[3610, 2],
		[3617, 1],
		[3624, 4],
		[3631, 3],
		[3638, 1],
		[3652, 1],
		[3659, 4],
		[3666, 8],
		[3673, 1],
		[3701, 1],
		[3722, 1],
		[3736, 3],
		[3743, 1],
		[3750, 2],
		[3771, 6],
		[3778, 4],
		[3799, 1],
		[3806, 1],
		[3827, 8],
		[3834, 3],
		[3841, 41],
		[3848, 3],
		[3855, 17],
		[3862, 16],
		[3876, 1],
		[3883, 4],
		[3890, 1],
		[3897, 2],
		[3904, 1],
		[3911, 2],
		[3925, 1],
		[3932, 2],
		[3946, 1],
		[3953, 1],
		[3960, 1],
		[3967, 18],
		[3974, 1],
		[3981, 4],
		[3988, 9],
		[4002, 2],
		[4009, 2],
		[4016, 3],
		[4023, 5],
		[4030, 3],
		[4037, 12],
		[4044, 13],
		[4051, 3],
		[4058, 6],
		[4065, 2],
		[4072, 1],
		[4093, 8],
		[4100, 17],
		[4114, 9],
		[4121, 7],
		[4128, 3]
	]
}
