{
	"name": "@bztes/svelte-ds-validator",
	"description": "Validate form values easily in Svelte applications.",
	"repo_url": "https://github.com/bztes/svelte-ds-validator",
	"authors": ["bztes"],
	"homepage": "https://github.com/bztes/svelte-ds-validator#readme",
	"downloads": 5,
	"updated": "2021-11-15T16:36:46.200Z",
	"tags": ["miscellaneous"],
	"github_stars": 2,
	"typescript": true,
	"version": "2.7.0",
	"svelte_range": ">= 3.0.0",
	"last_rune_check_version": "2.7.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@bztes/svelte-ds-validator",
				"version": "2.7.0",
				"size": 55453
			},
			{
				"name": "intl-messageformat",
				"version": "9.13.0",
				"size": 224182
			},
			{
				"name": "tslib",
				"version": "2.8.1",
				"size": 90359
			},
			{
				"name": "@formatjs/fast-memoize",
				"version": "1.2.1",
				"size": 12217
			},
			{
				"name": "@formatjs/ecma402-abstract",
				"version": "1.11.4",
				"size": 274564
			},
			{
				"name": "@formatjs/intl-localematcher",
				"version": "0.2.25",
				"size": 38163
			},
			{
				"name": "@formatjs/icu-messageformat-parser",
				"version": "2.1.0",
				"size": 216139
			},
			{
				"name": "@formatjs/icu-skeleton-parser",
				"version": "1.3.6",
				"size": 39284
			},
			{
				"name": "lodash",
				"version": "4.17.21",
				"size": 1412415
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[1, 3],
			[3, 2],
			[1, 4],
			[4, 2],
			[4, 5],
			[5, 2],
			[1, 6],
			[6, 2],
			[6, 4],
			[6, 7],
			[7, 2],
			[7, 4],
			[0, 8]
		],
		"circular": []
	},
	"legacy_svelte": true,
	"readme": "# svelte-ds-validator\n\nDamn simple value checker for [Svelte](https://svelte.dev/). Works well with forms\n\n## -1. Installation\n\n```\nnpm i -D @bztes/svelte-ds-validator\n```\n\n```\nyarn add -D @bztes/svelte-ds-validator\n```\n\n## 0. Example Code\n\n```js\n<script>\n  import { and, createChecker, email, number, required } from '@bztes/svelte-ds-validator';\n\n  export let data;\n\n  // apply validation rules\n  const checker = createChecker({\n    fields: {\n      email: {\n        value: () => data.email,\n        rule: and(required(), email()),\n      },\n      age: {\n        value: () => data.age,\n        rule: and(required(), number({ min: 0, max: 130, int: true })),\n      },\n      message: {\n        value: () => data.message,\n        // Default rule can be skipped\n        // rule: required(),\n      },\n    },\n  });\n\n  // validate on data changed\n  $: data, checker.validate();\n</script>\n\n<form>\n  <p>\n    <label for=\"email\">E-Mail</label>\n    <input type=\"email\" name=\"email\" bind:value={data.email} />\n    <span>{$checker.fields.email.error}</span>\n  </p>\n  <p>\n    <label for=\"age\">Age</label>\n    <input type=\"number\" name=\"age\" bind:value={data.age} />\n    <span>{$checker.fields.age.error}</span>\n  </p>\n  <p>\n    <label for=\"message\">Message</label>\n    <textarea name=\"message\" bind:value={data.message} />\n    <span>{$checker.fields.message.error}</span>\n  </p>\n  <p>\n    <button type=\"submit\" disabled={!$checker.valid}>Send</button>\n  </p>\n</form>\n```\n\n## 1. Checker\n\n### Create\n\n```js\nconst checker = createChecker({\n  defaultRule: ...\n  fields: {\n    [field_name]: {\n      value: () => ...\n      rule: ...\n    }\n  }\n});\n```\n\n**defaultRule** (Optional)  \nA default rule that will be used by all checker fields where no specified rule is defined\n\n**fields.[].rule** (Optional)  \nThe rule to be checked. Use `and()` or `or()` to combine rules. If no rule is provided `checker.defaultRule`, `settings.defaultRule` or `required()` is used (in this order).\n\n**fields.[].value()**  \nThe function that provides the input value to be checked\n\n### Use\n\n```js\n<script>\n  ...\n\n  const checker = ...\n\n  // validate on data changed\n  $: data, checker.validate();\n</script>\n\n<form>\n  <p>\n    <label for=\"message\">Message</label>\n    <textarea name=\"message\" bind:value={data.message} />\n    <span>{$checker.fields.message.error}</span>\n  </p>\n  <p>\n    <button type=\"submit\" disabled={!$checker.valid}>Send</button>\n  </p>\n</form>\n```\n\n**checker.validate()**  \nTriggers the validation. You probably want to call this function after the input has changed\n\n**$checker.fields.[].error**  \nContains the error message for the individual fields if the input is invalid, `null` otherwise\n\n**$checker.fields.[].valid**  \n`true` if the specific input value is valid, `false` otherwise\n\n**$checker.valid**  \n`true` if all input values are valid, `false` otherwise\n\n## 2. Rules\n\n### Apply rules to a checker\n\n```js\nconst settings = {\n  fields: {\n    userMail: {\n      rule: email(),\n    },\n  },\n};\n```\n\n### Available rules\n\n<!--- #RUN OUTPUT find ./src/rules/ -maxdepth 2 -type f -iname 'README.md' -exec head -n 1 {} \\; | sort | sed -E 's/#+ (.*)/\\* [\\1](https:\\/\\/github.com\\/bztes\\/svelte-ds-validator\\/blob\\/main\\/src\\/rules\\/\\1\\/README.md)/g' -->\n<!--- #ECHO OUTPUT { -->\n* [and](https://github.com/bztes/svelte-ds-validator/blob/main/src/rules/and/README.md)\n* [email](https://github.com/bztes/svelte-ds-validator/blob/main/src/rules/email/README.md)\n* [equals](https://github.com/bztes/svelte-ds-validator/blob/main/src/rules/equals/README.md)\n* [falsy](https://github.com/bztes/svelte-ds-validator/blob/main/src/rules/falsy/README.md)\n* [files](https://github.com/bztes/svelte-ds-validator/blob/main/src/rules/files/README.md)\n* [not](https://github.com/bztes/svelte-ds-validator/blob/main/src/rules/not/README.md)\n* [number](https://github.com/bztes/svelte-ds-validator/blob/main/src/rules/number/README.md)\n* [or](https://github.com/bztes/svelte-ds-validator/blob/main/src/rules/or/README.md)\n* [regex](https://github.com/bztes/svelte-ds-validator/blob/main/src/rules/regex/README.md)\n* [required](https://github.com/bztes/svelte-ds-validator/blob/main/src/rules/required/README.md)\n* [truthy](https://github.com/bztes/svelte-ds-validator/blob/main/src/rules/truthy/README.md)\n<!--- #ECHO } -->\n\n## 3. Custome error messages\n\n### local - only for the specified rule instance\n\n```js\nconst options = {\n  min: 18,\n  msg = {\n    numberToSmall: 'adults only',\n  },\n};\nrule = number(options);\n```\n\n### global - default for all rule instances\n\n```js\nnumber.Options.msg.numberToSmall = 'adults only';\n```\n\n## 4. Advanced\n\n### Rule definition\n\n**Static**\n\n```js\nrule = {\n  validate(input): true | string\n  value(fieldValue)?: any\n  error?: string\n}\n```\n\n**validate**  \nValidation function that takes an input value and returns true on validation success or an error message otherwise\n\n**value(input)** (Optional)  \nFunction that can be used to provide a rule specific input value for validate(). If undefined the field value will be used as an input\n\n**error** (Optional)  \nCan be used to provide a rule specific error message. If undefined the return value from validate will be used as error message\n\n### Writing your own rule (examples)\n\n```js\nconst isTrue = {\n  validate: (input) => input === true || 'Input value must be true',\n};\n```\n\n**With parameters**\n\n```js\nconst equals = (value) => ({\n  validate: (input) => value == input || 'Invalid value',\n});\n```\n\n### Overwrite all error messages for a rule\n\n```js\nconst checker = createChecker({\n  fields: {\n    legal: {\n      value: () => data.legal,\n      rule: { ...equals(true), error: 'Legal rules have to be accepted' },\n    },\n  },\n});\n```\n\n### Rule specific input values (value mapping)\n\n```js\nlet message = { response: 'Succeed', error: null };\n\nconst checker = createChecker({\n  fields: {\n    message: {\n      value: () => message,\n      rule: and({ ...required(), value: (v) => v.response }, { ...falsy(), value: (v) => v.error }),\n    },\n  },\n});\n```\n",
	"downloads_history": [
		[3589, 3],
		[3596, 21],
		[3603, 2],
		[3610, 1],
		[3631, 1],
		[3638, 1],
		[3645, 4],
		[3659, 7],
		[3666, 10],
		[3687, 1],
		[3694, 1],
		[3708, 2],
		[3715, 4],
		[3722, 1],
		[3736, 1],
		[3757, 1],
		[3764, 1],
		[3771, 11],
		[3778, 1],
		[3785, 1],
		[3799, 2],
		[3806, 4],
		[3813, 2],
		[3820, 1],
		[3827, 8],
		[3834, 2],
		[3848, 3],
		[3855, 53],
		[3862, 23],
		[3869, 1],
		[3876, 12],
		[3883, 1],
		[3890, 2],
		[3904, 30],
		[3911, 1],
		[3932, 3],
		[3939, 2],
		[3953, 2],
		[3960, 12],
		[3981, 1],
		[3988, 1],
		[4002, 10],
		[4009, 11],
		[4016, 10],
		[4030, 8],
		[4037, 4],
		[4044, 7],
		[4051, 2],
		[4058, 1],
		[4072, 2],
		[4079, 1],
		[4086, 21],
		[4093, 59],
		[4100, 10],
		[4107, 2],
		[4114, 5],
		[4121, 13],
		[4128, 15]
	]
}
