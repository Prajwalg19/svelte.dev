{
	"name": "svelte-firebase-state",
	"description": "Manage Firebase Firestore and Realtime Database data.",
	"repo_url": "",
	"authors": ["httpete"],
	"homepage": "https://svelte-firebase-state.vercel.app",
	"downloads": 32,
	"updated": "2024-12-21T12:27:59.151Z",
	"tags": ["integration"],
	"typescript": true,
	"version": "1.3.2",
	"svelte_range": ">=5",
	"kit_range": "^2.9.0",
	"last_rune_check_version": "1.3.2",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-firebase-state",
				"version": "1.3.2",
				"size": 40531
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-firebase-state\n\nsvelte-firebase-state simplifies Firebase integration in Svelte/Sveltekit applications by providing easy-to-use reactive state classes for managing Firestore and Realtime Database data. These classes handle data fetching, live updates, user-specific queries and state management, allowing you to focus on your app's logic instead of Firebase boilerplate.\n\n## Documentation\n\nhttps://svelte-firebase-state.vercel.app/\n\n## Usage\n\n1. Install the library with your favorite package manager.\n\n```bash\nnpm install svelte-firebase-state\n```\n\n2. In your svelte component, import and create an instance of `CollectionState`, `DocumentState`, `NodeState`, or `NodeListState`, passing configuration options like Firestore, Authentication, query functions, or database paths.\n\nYou can also instantiate the state class in a .svelte.ts file making it global to your app, in this case the data will be fetch only when the data is subscribed to (shown in a component or logged in a reactive environment).\n\n```typescript\nimport { CollectionState } from \"svelte-firebase-state\";\nimport { firestore, auth } from \"../firebase\"; // Your firebase config file\nconst tasks = new CollectionState({\n  auth,\n  firestore,\n  path: (user) => `/users/${user?.uid}/tasks`,\n  listen: true\n});\n```\n\n3. Access **svelte 5** reactive state with the \"data\" property of the instance.\n\nIf you use the \"listen\" param, when your database receive updates your UI will be re-rendered with the correct data.\n\n```typescript\n// Reactive data = [task1, task2, ...]\n$inspect(tasks.data);\n```\n\n```svelte\n{#each tasks.data as task (task.id)}\n  <p>{task.name}</p>\n{/each}\n```\n\n4. Perform CRUD Operations using class methods.\n\n```svelte\n<script>\n  function handleAdd(newTask) {\n    tasks.add(newTask);\n  }\n  function handleDelete(taskId) {\n    tasks.delete(taskId);\n  }\n</script>\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3981, 344],
		[3988, 248],
		[3995, 356],
		[4002, 370],
		[4009, 64],
		[4016, 145],
		[4023, 78],
		[4030, 67],
		[4037, 80],
		[4044, 31],
		[4051, 79],
		[4058, 55],
		[4065, 91],
		[4072, 52],
		[4079, 55],
		[4086, 40],
		[4093, 36],
		[4100, 65],
		[4107, 63],
		[4114, 32],
		[4121, 70],
		[4128, 66]
	],
	"esm": true,
	"cjs": false
}
