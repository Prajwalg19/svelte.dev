{
	"name": "@foxkdev/svelte-components",
	"description": "Provide reusable Svelte components.",
	"repo_url": "https://github.com/foxkdev/svelte-components",
	"authors": ["foxkdev"],
	"homepage": "https://github.com/foxkdev/svelte-components",
	"downloads": 5,
	"updated": "2023-05-10T21:51:40.278Z",
	"tags": ["ui"],
	"github_stars": 0,
	"typescript": true,
	"version": "1.0.4",
	"svelte_range": "^3.59.0",
	"last_rune_check_version": "1.0.4",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@foxkdev/svelte-components",
				"version": "1.0.4",
				"size": 114785
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "\n\n### Install dependencies\n\nInstall dependencies with npm:\n\n```bash\nnpm i\n```\n\n\n### Build\n\nBuild production (distribution) files in your **dist** folder:\n\n```bash\nnpm run build\n```\n\nIt generates CommonJS (in **dist/cjs** folder), ES Modules (in **dist/esm** folder), bundled and minified UMD (in **dist/umd** folder), as well as TypeScript declaration files (in **dist/types** folder).\n\n### Try it before publishing\n\nRun:\n\n```bash\nnpm link\n```\n\n[npm link](https://docs.npmjs.com/cli/v6/commands/npm-link) will create a symlink in the global folder, which may be **{prefix}/lib/node_modules/example-typescript-package** or **C:\\Users\\<username>\\AppData\\Roaming\\npm\\node_modules\\example-typescript-package**.\n\nCreate an empty folder elsewhere, you don't even need to `npm init` (to generate **package.json**). Open the folder with VS Code, open a terminal and just run:\n\n```bash\nnpm link analytics-sdk-js\n```\n\nThis will create a symbolic link from globally-installed example-typescript-package to **node_modules/** of the current folder.\n\n\nIf you don't see any linting errors in VS Code, if you put your mouse cursor over `Num` and see its type, then it's all good.\n\nWhenever you want to uninstall the globally-installed example-typescript-package and remove the symlink in the global folder, run:\n\n```bash\nnpm uninstall example-typescript-package -g\n```\n\n### Prepare to publish\n\nCreate an [npm](https://www.npmjs.com/) account.\n\n<details><summary><strong>Click to read this section if you do manual publishing</strong></summary>\n\n#### Manual publishing to npm\n\nLog in:\n\n```bash\nnpm adduser\n```\n\nAnd publish:\n\n```bash\nnpm publish\n```\n\n</details>\n\nThis package is configured to use GitHub Actions CI/CD to automate both the **npm** and **GitHub Packages** publishing process. The following are what you have to do.\n\n#### CI publishing to npm\n\nFollow [npm's official instruction](https://docs.npmjs.com/creating-and-viewing-access-tokens) to create an npm token. Choose \"Publish\" from the website, or use `npm token create` without argument with the CLI.\n\nIf you use 2FA, then make sure it's enabled for **authorization** only instead of **authorization and publishing** (**Edit Profile** -> **Modify 2FA**).\n\nOn the page of your newly created or existing GitHub repo, click **Settings** -> **Secrets** -> **New repository secret**, the **Name** should be `NPM_TOKEN` and the **Value** should be your npm token.\n\n#### CI publishing to GitHub Packages\n\nThe default configuration of this example package **assumes you publish package with an unscoped name to npm**. GitHub Packages must be named with a scope name such as \"@tomchen/example-typescript-package\".\n\nChange `scope: '@tomchen'` to your own scope in **.github/workflows/publish.yml**, also change `addscope` in **package.json**.\n\nIf you publish package with a scoped name to npm, change the name to something like \"@tomchen/example-typescript-package\" in **package.json**, and remove the `- run: npm run addscope` line in **.github/workflows/publish.yml**\n\nIf you publish your package to npm only, and don't want to publish to GitHub Packages, then delete the lines from `- name: Setup .npmrc file to publish to GitHub Packages` to the end of the file in **.github/workflows/publish.yml**.\n\n(You might have noticed `secret.GITHUB_TOKEN` in **.github/workflows/publish.yml**. You don't need to set up a secret named `GITHUB_TOKEN` actually, it is [automatically created](https://docs.github.com/en/free-pro-team@latest/actions/reference/authentication-in-a-workflow#about-the-github_token-secret))\n\n### Publish\n\nNow everything is set. The example package has automated tests and upload (publishing) already set up with GitHub Actions:\n\n- Every time you `git push` or a pull request is submitted on your `master` or `main` branch, the package is automatically tested against the desired OS and Node.js versions with GitHub Actions.\n- Every time an [**annotated**](https://git-scm.com/book/en/v2/Git-Basics-Tagging#_annotated_tags) (not [lightweight](https://git-scm.com/book/en/v2/Git-Basics-Tagging#_lightweight_tags)) \"v*\" tag is pushed onto GitHub, a GitHub release is automatically generated from this version, it also automatically publishes to the npm registry and/or GitHub Packages registry to update the package there.\n  - [`npm version`](https://docs.npmjs.com/cli/version/) / [`yarn version`](https://yarnpkg.com/cli/version) is useful to create tags.\n  - (npm or yarn v1, not yarn v2) You could also add `\"postversion\": \"git push --follow-tags\"` to **package.json** file to push it automatically after `npm` or `yarn` `version`.\n  - (yarn v1, not v2) because `yarn version` doesn't check whether there are uncommitted changes, you can add `\"preversion\": \"git diff-index --quiet HEAD --\"` to **package.json**\n    - Note: `preversion`, `postversion` doesn't work in yarn v2\n\nFor npm registry: you can unpublish a version or the whole package but can never re-publish the same version under the same name.\n\nIf you want to modify the description / README on the npm package page, you have to publish a new version. You can modify the description on GitHub Packages without publishing.\n\n## Notes\n\n- It uses npm but you can easily switch to yarn, of course (remember to change all \"npm\" in `scripts` in the file **package.json**)\n  - Whether you use npm as your package manager â‰  Whether you can publish to the npm registry\n- Works fine in VS Code. In my configuration **.eslintrc** and **.prettierrc** cooperate perfectly\n- See `scripts` in **package.json** for other predefined script commands\n- [pinst](https://github.com/typicode/pinst) is used to solve [a problem of husky](https://typicode.github.io/husky/#/?id=yarn-2)\n- The installation of the package with npm, yarn v1 and yarn v2+ is ensured in [this test](https://github.com/tomchen/example-typescript-package-test)\n\n## References\n\n- [Creating and publishing unscoped public packages - npm docs](https://docs.npmjs.com/creating-and-publishing-unscoped-public-packages)\n- [npm-publish - npm docs](https://docs.npmjs.com/cli/v6/commands/npm-publish)\n- [Publishing - TypeScript docs](https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html)\n- [Publishing Node.js packages - GitHub Docs](https://docs.github.com/en/free-pro-team@latest/actions/guides/publishing-nodejs-packages)\n\nBtw, if you want to publish Python package, go to [Example PyPI (Python Package Index) Package & Tutorial / Instruction / Workflow for 2021](https://github.com/tomchen/example_pypi_package).\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 7],
		[3596, 11],
		[3603, 10],
		[3610, 2],
		[3638, 2],
		[3659, 1],
		[3666, 6],
		[3687, 1],
		[3708, 3],
		[3715, 1],
		[3729, 5],
		[3736, 2],
		[3750, 1],
		[3764, 1],
		[3771, 3],
		[3778, 4],
		[3785, 1],
		[3806, 1],
		[3813, 1],
		[3834, 8],
		[3841, 31],
		[3862, 11],
		[3876, 1],
		[3883, 7],
		[3890, 1],
		[3911, 1],
		[3918, 2],
		[3932, 1],
		[3939, 1],
		[3960, 1],
		[3981, 1],
		[3988, 1],
		[3995, 1],
		[4016, 9],
		[4023, 2],
		[4037, 12],
		[4044, 12],
		[4051, 1],
		[4058, 4],
		[4065, 1],
		[4072, 1],
		[4086, 1],
		[4093, 5],
		[4100, 11],
		[4107, 5],
		[4114, 5],
		[4121, 7],
		[4128, 1]
	],
	"esm": true,
	"cjs": false
}
