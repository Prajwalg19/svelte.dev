{
	"name": "@kesval/image-svelte",
	"description": "Optimize images in Svelte applications.",
	"repo_url": "https://github.com/xKesvaL/image-svelte",
	"authors": ["kesval"],
	"homepage": "https://github.com/xKesvaL/image-svelte",
	"downloads": 12,
	"updated": "2023-08-27T19:46:55.608Z",
	"tags": ["media"],
	"typescript": true,
	"version": "0.2.1",
	"svelte_range": "^4.0.0",
	"kit_range": "^1.20.4",
	"last_rune_check_version": "0.2.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@kesval/image-svelte",
				"version": "0.2.1",
				"size": 8048
			},
			{
				"name": "esm-env",
				"version": "1.2.2",
				"size": 3784
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# Svelte Optimized Images ðŸª„ðŸ“ˆ\n\n[![Version](https://img.shields.io/npm/v/@kesval/image-svelte?style=for-the-badge)](https://www.npmjs.com/package/@kesval/image-svelte) [![Issues](https://img.shields.io/github/issues/xKesvaL/image-svelte?style=for-the-badge)](https://github.com/xKesvaL/image-svelte/issues) [![License](https://img.shields.io/github/license/xKesvaL/image-svelte?style=for-the-badge)](https://github.com/xKesvaL/image-svelte/blob/main/LICENSE)\n\n- [Svelte Optimized Images ðŸª„ðŸ“ˆ](#svelte-optimized-images-)\n  - [Usage](#usage)\n    - [Important](#important)\n    - [Component Props](#component-props)\n      - [Styling](#styling)\n    - [Image Package Customization](#image-package-customization)\n    - [Vercel](#vercel)\n    - [Dev Mode](#dev-mode)\n  - [Create your own component](#create-your-own-component)\n  - [Svelte Starter](#svelte-starter)\n\n## Usage\n\nTo use this package it is very important to have installed the following packages: [`@kesval/image`](https://www.npmjs.com/package/@kesval/image) and to have these scripts in your `package.json`:\n\n```json\n{\n  \"scripts\": {\n    \"optimize-images\": \"image-opti --source ./build/<sourceFolder> --target ./build/<targetFolder>\",\n    \"postbuild\": \"npm run optimize-images\"\n  }\n}\n```\n\nYou can replace `<sourceFolder>` and `<targetFolder>` with the folders where your images are usually in your `static` folder.\n\nFor example, if you have your images in `static/images` you can replace `<sourceFolder>` with `images` and `<targetFolder>` with `images-opti`.\n\n### Important\n\nIt is mandatory that the script `optimize-images` is executed after the build script, or otherwise the build script will overwrite the optimized images.\n\n### Component Props\n\nThe component accepts the following props (with typesafety):\n\n- `src: string`\n- `alt: string`\n- `formats?: string[]` (default: `['webp', 'png', 'jpg']`)\n- `widths?: string[]` (default: `null` - base width)\n- `figcaption?: string` (default: `null`)\n- `loading?: 'lazy' | 'eager'` (default: `lazy`)\n- `figureClasses?: string` (default: `''`)\n- `imgClasses?: string` (default: `''`)\n\n#### Styling\n\nYou can add classes to the component using the figureClasses (which go on the `figure` tag) and imageClasses (which go on the `img` tag inside) props:\n\n```svelte\n<script>\n  import Image from '@kesval/image-svelte'\n</script>\n\n<Image figureClasses=\"class1 class2\" imgClasses=\"class3 class4\" >\n```\n\n### Image Package Customization\n\nThe default behavior of the package is to optimize all `jpg`, `jpeg` and `png` images to `webp` without changing their width.\n\nFor further customization of the script you can add -h to the args or you can check the [documentation](https://github.com/kesval/image).\n\n### Vercel\n\nIf you are deploying your app on vercel, you just have to replace your source and destination folders like so:\n\n```json\n{\n  \"scripts\": {\n    \"optimize-images\": \"image-opti --source .vercel/output/static/<sourceFolder> --target .vercel/output/static/<targetFolder>\",\n    \"postbuild\": \"npm run optimize-images\"\n  }\n}\n```\n\n### Dev Mode\n\nJust note that in dev mode, the raw images will be served, not the optimized ones. This is because the images are optimized at build time.\n\nIf you need to have an idea of how big the images will be, you can just run the script: `npm run optimize-images -- -v` (enables verbose) and check the size of the images in the command line or in the target folder.\n\n## Create your own component\n\nBy default, the component simply renders an `img` tag with the `src` attribute pointing to the optimized image. If you want to customize this behavior, you can create your own component. For example, you can show an error image if the image fails to load:\n\n```svelte\n<script>\n  import Image from '@kesval/image-svelte'\n\n  let error = false;\n</script>\n\n<Image let:error let:alt let:src>\n  {#if error}\n    placeholder error image\n  {:else}\n    <img src={src} alt={alt} srcset={srcSet} on:error={() => {\n      error = true;\n    }} />\n  {/if}\n</Image>\n```\n\nThe component will pass the following props to the parent:\n`srcSet`\n\n## Svelte Starter\n\nThis package is included in my [Svelte Starter](\n  https://github.com/xKesvaL/starter-svelte\n) template. Check it out!\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 5],
		[3596, 12],
		[3603, 6],
		[3610, 4],
		[3624, 26],
		[3631, 6],
		[3638, 3],
		[3645, 7],
		[3652, 7],
		[3659, 1],
		[3666, 14],
		[3673, 7],
		[3694, 6],
		[3701, 7],
		[3708, 6],
		[3722, 1],
		[3736, 3],
		[3743, 10],
		[3750, 4],
		[3764, 1],
		[3771, 8],
		[3778, 16],
		[3792, 1],
		[3799, 1],
		[3806, 1],
		[3820, 1],
		[3834, 2],
		[3841, 30],
		[3848, 1],
		[3862, 12],
		[3869, 3],
		[3883, 8],
		[3890, 1],
		[3897, 2],
		[3911, 6],
		[3925, 1],
		[3932, 1],
		[3939, 7],
		[3946, 1],
		[3974, 1],
		[3981, 1],
		[3988, 1],
		[3995, 2],
		[4016, 4],
		[4023, 6],
		[4037, 10],
		[4044, 13],
		[4051, 3],
		[4058, 1],
		[4072, 1],
		[4086, 1],
		[4093, 6],
		[4100, 12],
		[4107, 7],
		[4114, 12],
		[4121, 8],
		[4128, 3]
	],
	"esm": true,
	"cjs": false
}
