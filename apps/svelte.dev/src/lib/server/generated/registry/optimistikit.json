{
	"name": "optimistikit",
	"description": "Simplify optimistic UI updates in SvelteKit forms.",
	"repo_url": "https://github.com/paoloricciuti/optimistikit",
	"authors": ["pablopang"],
	"homepage": "https://github.com/paoloricciuti/optimistikit",
	"downloads": 10,
	"updated": "2024-08-09T15:28:39.348Z",
	"tags": ["integration"],
	"github_stars": 68,
	"typescript": true,
	"version": "1.0.2",
	"svelte_range": "^5.0.0 || ^5.0.0-next.1",
	"kit_range": "^2.0.0",
	"last_rune_check_version": "1.0.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "optimistikit",
				"version": "1.0.2",
				"size": 13668
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# optimistikit\n\nOptimistic UI is not easy...but it can be easier then ever in SvelteKit with Optimistikit!\n\n> **Warning**\n>\n> This package is meant to be used with Svelte-Kit as the name suggest. Because it uses api that are **only** present in Svelte-Kit it will not work in your normal svelte project.\n\n[![MIT License](https://img.shields.io/badge/License-MIT-green.svg)](https://choosealicense.com/licenses/mit/)\n\n![npm](https://img.shields.io/npm/v/optimistikit)\n\n![npm](https://img.shields.io/npm/dt/optimistikit)\n\n![GitHub last commit](https://img.shields.io/github/last-commit/paoloricciuti/optimistikit)\n\n## Contributing\n\nContributions are always welcome!\n\nFor the moment there's no code of conduct neither a contributing guideline but if you found a problem or have an idea feel free to [open an issue](https://github.com/paoloricciuti/optimistikit/issues/new)\n\nIf you want the fastest way to open a PR try out Codeflow\n\n[![Open in Codeflow](https://developer.stackblitz.com/img/open_in_codeflow.svg)](https://pr.new/paoloricciuti/optimistikit/)\n\n## Authors\n\n-   [@paoloricciuti](https://www.github.com/paoloricciuti)\n\n## Installation\n\nInstall optimistikit with npm\n\n```bash\n  npm install optimistikit@latest\n```\n\n## Usage/Examples\n\nThe concept behind optimistikit is quite straightforward. Instead of using the `data` props from SvelteKit you can call the functionÂ `optimistikit` and get back a function to call whenever data changes and an action to apply to all of your forms.\n\n### Basic example\n\nImagine you have this `+page.server.ts`\n\n```ts\nexport async function load() {\n\tconst comments = await db.select(comments);\n\treturn {\n\t\tcomments,\n\t};\n}\n\nexport const actions = {\n\tasync add({ request }) {\n\t\tconst formData = await request.formData();\n\t\tconst new_comment = formData.get('comment');\n\t\tif (new_comment) {\n\t\t\tawait db.insert(comments).values({\n\t\t\t\tcontent: new_comment,\n\t\t\t});\n\t\t}\n\t},\n};\n```\n\nand this `+page.svelte`\n\n```svelte\n<script lang=\"ts\">\n\tconst { data } = $props();\n</script>\n\n<form method=\"post\" action=\"?/add\">\n\t<input name=\"comment\" />\n\t<button>Add comment</button>\n</form>\n<ul>\n\t{#each data.comments as comment}\n\t\t<li>{comment.content}</li>\n\t{/each}\n</ul>\n```\n\nif you want to optimistically add the comment using `optimistikit` you would need the following updated to `+page.svelte`\n\n```svelte\n<script lang=\"ts\">\n\timport { optimistikit } from 'optimistikit';\n\tconst { data } = $props();\n\tconst { enhance, data: optimistic_data } = optimistikit(() => data);\n</script>\n\n<form\n\tuse:enhance={(data, { formData }) => {\n\t\tconst new_comment = formData.get('comment');\n\t\tif (new_comment) {\n\t\t\t// just mutate `data`\n\t\t\tdata.comments.push({\n\t\t\t\tcontent: new_comment,\n\t\t\t});\n\t\t}\n\t}}\n\tmethod=\"post\"\n\taction=\"?/add\"\n>\n\t<input name=\"comment\" />\n\t<button>Add comment</button>\n</form>\n<ul>\n\t<!-- use `optimistic_data` instead of `data` -->\n\t{#each optimistic_data.comments as comment}\n\t\t<li>{comment.content}</li>\n\t{/each}\n</ul>\n```\n\n### Keyed forms\n\nSometimes the resource that you are updating on the server is always the same resource (eg. updating a comment). When that's the case we want to cancel every concurrent request. You can do this by adding an unique `data-key` attribute to the form.\n\n```ts\nexport async function load() {\n\tconst comments = await db.select(comments);\n\treturn {\n\t\tcomments,\n\t};\n}\n\nexport const actions = {\n\t// other actions\n\tasync edit({ request }) {\n\t\tconst formData = await request.formData();\n\t\tconst new_comment = formData.get('comment');\n\t\tconst id = formData.get('id');\n\t\tif (new_comment && id) {\n\t\t\tawait db\n\t\t\t\t.update(comments)\n\t\t\t\t.values({\n\t\t\t\t\tcontent: new_comment,\n\t\t\t\t})\n\t\t\t\t.where({\n\t\t\t\t\tid,\n\t\t\t\t});\n\t\t}\n\t},\n};\n```\n\nand this is the `+page.svelte`\n\n```svelte\n<script lang=\"ts\">\n\timport { optimistikit } from 'optimistikit';\n\tconst { data } = $props();\n\n\tconst { enhance, data: optimistic_data } = optimistikit(() => data);\n</script>\n\n<!-- rest of the page -->\n<ul>\n\t<!-- use `optimistic_data` instead of `data` -->\n\t{#each optimistic_data.comments as comment}\n\t\t<li>\n\t\t\t<form\n\t\t\t\tmethod=\"post\"\n\t\t\t\taction=\"?/edit\"\n\t\t\t\tdata-key=\"edit-comment-{comment.id}\"\n\t\t\t\tuse:enhance={(data, { formData }) => {\n\t\t\t\t\tconst new_comment = formData.get('comment');\n\t\t\t\t\tconst id = formData.get('id');\n\t\t\t\t\tif (new_comment && id) {\n\t\t\t\t\t\tconst comment = data.comments.find((comment) => comment.id === id);\n\t\t\t\t\t\t// just mutate `data`\n\t\t\t\t\t\tcomment.content = new_comment;\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<input name=\"id\" type=\"hidden\" value={comment.id} />\n\t\t\t\t<input name=\"comment\" value={comment.content} />\n\t\t\t\t<button>Edit</button>\n\t\t\t</form>\n\t\t</li>\n\t{/each}\n</ul>\n```\n\n### Use in nested components\n\nIf you have a form in a nested component it can be tedious to pass either `data` or the `enhance` action around. To solver this problem there's another export from `optimistikit` that allows you to grab the action directly\n\n```svelte\n<script lang=\"ts\">\n\timport { get_action } from 'optimistikit';\n\timport type { PageData } from './$types';\n\n\tconst enhance = get_action<PageData>();\n</script>\n\n<form\n\tuse:enhance={(data) => {\n\t\t// your logic\n\t}}\n>\n\t<!-- your form -->\n</form>\n```\n\n### Options\n\nThe function `optimistikit` can optionally receive an object as argument where you can specify two values:\n\n-   `key`: a string that allows you to have different actions/stores in the same route. Most of the times you will probably not need this since specifying a key also means that the updates from the forms will involve only the state returned from that specific `optimistikit` function.\n-   `enhance`: some libraries like [superforms](https://superforms.rocks) provide a custom `enhance` function that is different from the one provided by SvelteKit. To allow you to use this libraries together with `optimistikit` you can pass a custom `enhance` function. It's important for this function to have the same signature as the sveltekit one.\n\n## What about svelte 4?\n\nIf you are using `svelte@4` you really should upgrade to `svelte@5`...but if you can't you can use the legacy tag of this library that uses a store and has a slightly different and less ergonomic API.\n\nYou can install it like this:\n\n```bash\nnpm i optimistikit@legacy\n```\n\nCheck the documentation [here!](https://github.com/paoloricciuti/optimistikit/tree/legacy#)\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3729, 294],
		[3736, 26],
		[3743, 6],
		[3750, 19],
		[3757, 11],
		[3764, 11],
		[3771, 2],
		[3778, 12],
		[3792, 1],
		[3806, 2],
		[3813, 4],
		[3820, 1],
		[3827, 8],
		[3834, 33],
		[3841, 3],
		[3848, 7],
		[3855, 177],
		[3862, 55],
		[3869, 84],
		[3876, 11],
		[3883, 5],
		[3890, 16],
		[3897, 9],
		[3904, 13],
		[3911, 10],
		[3918, 5],
		[3925, 14],
		[3932, 7],
		[3939, 13],
		[3946, 11],
		[3953, 3],
		[3960, 2],
		[3967, 4],
		[3974, 3],
		[3988, 2],
		[3995, 1],
		[4002, 1],
		[4009, 2],
		[4016, 23],
		[4023, 3],
		[4030, 5],
		[4037, 3],
		[4044, 10],
		[4051, 6],
		[4065, 3],
		[4079, 1],
		[4086, 1],
		[4100, 10],
		[4107, 21],
		[4114, 10],
		[4121, 12],
		[4128, 5]
	]
}
