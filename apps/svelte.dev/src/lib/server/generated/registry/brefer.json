{
	"name": "brefer",
	"description": "Preprocessor to shorten Svelte 5 runes syntax.",
	"repo_url": "https://github.com/KilDesu/brefer",
	"authors": ["kildesu"],
	"homepage": "https://github.com/KilDesu/brefer#readme",
	"downloads": 9,
	"updated": "2024-09-17T14:58:51.419Z",
	"tags": ["tooling"],
	"github_stars": 44,
	"typescript": true,
	"version": "1.0.0-beta-1",
	"svelte_range": "5.0.0-next.248",
	"last_rune_check_version": "1.0.0-beta-1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "brefer",
				"version": "1.0.0-beta-1",
				"size": 38535
			},
			{
				"name": "@babel/parser",
				"version": "7.27.1",
				"size": 1859876
			},
			{
				"name": "@babel/types",
				"version": "7.27.1",
				"size": 2597469
			},
			{
				"name": "@babel/helper-string-parser",
				"version": "7.27.1",
				"size": 31816
			},
			{
				"name": "@babel/helper-validator-identifier",
				"version": "7.27.1",
				"size": 48330
			},
			{
				"name": "recast",
				"version": "0.23.11",
				"size": 246250
			},
			{
				"name": "ast-types",
				"version": "0.16.1",
				"size": 673481
			},
			{
				"name": "tslib",
				"version": "2.8.1",
				"size": 90359
			},
			{
				"name": "esprima",
				"version": "4.0.1",
				"size": 314361
			},
			{
				"name": "source-map",
				"version": "0.6.1"
			},
			{
				"name": "tiny-invariant",
				"version": "1.3.3",
				"size": 14809
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[2, 4],
			[0, 5],
			[5, 6],
			[6, 7],
			[5, 8],
			[5, 9],
			[5, 10],
			[5, 7]
		],
		"circular": []
	},
	"legacy_svelte": false,
	"readme": "# Brefer project for Svelte 5 preprocessing\r\n\r\n## What is it?\r\n\r\nBrefer is a preprocessor to shorten the new Svelte 5 syntax for handling reactivity (hence the name \"Brefer\", made from \"Bref\" which means \"Brief\" in French and the suffix \"er\", which means \"more\").\r\n\r\n## Installation\r\n\r\n```bash\r\nnpm install -D brefer\r\n```\r\n\r\nFor PNPM and YARN, just replace `npm install` with `pnpm add` or `yarn add` in the commands above.\r\n\r\n**Warning!** Brefer is not yet ready for production (well, Svelte 5 neither). Expect bugs and breaking changes, as the syntax is not yet entirely decided.\r\n\r\n## Usage\r\n\r\n### Basic usage\r\n\r\nThe configuration is pretty easy:\r\n\r\n```js\r\n// svelte.config.js\r\nimport { vitePreprocess } from \"@sveltejs/vite-plugin-svelte\";\r\nimport { breferPreprocess } from \"brefer\";\r\n\r\nexport default {\r\n\tpreprocess: [breferPreprocess(), vitePreprocess()]\r\n};\r\n```\r\n\r\nIf you don't want to use a Vite plugin and rather use Svelte's preprocess API, you can stop your configuration here and [skip to the next paragraph](#why).\r\n\r\nThe Brefer's Vite plugin allows you to also preprocess Svelte modules (`.svelte.js` files).\r\n\r\n```js\r\n// vite.config.js\r\nimport { defineConfig } from \"vite\";\r\nimport { brefer } from \"brefer\";\r\n\r\nexport default defineConfig({\r\n\t// If you use other preprocessors, put brefer first\r\n\tplugins: [brefer()]\r\n});\r\n```\r\n\r\n### Options\r\n\r\nYou can pass options to the plugin. Those options contain 2 properties: `include` and `exclude`. You might already be familiar with them as a lot of other frameworks also use it.\r\n\r\nYou can check the [documentation](https://rollupjs.org/configuration-options/#watch-exclude) on Rollup's website.\r\n\r\n```js\r\n// vite.config.js\r\nimport { defineConfig } from \"vite\";\r\nimport { brefer } from \"brefer\";\r\n\r\nexport default defineConfig({\r\n\tplugins: [\r\n\t\tbrefer({\r\n\t\t\tinclude: [\r\n\t\t\t\t// Files to preprocess\r\n\t\t\t\t\"src/**/*.svelte\",\r\n\t\t\t\t\"src/**/*.svelte.js\"\r\n\t\t\t],\r\n\t\t\texclude: [\r\n\t\t\t\t// Files you don't want preprocessed\r\n\t\t\t\t\"tests/**/*.svelte\"\r\n\t\t\t]\r\n\t\t})\r\n\t]\r\n});\r\n```\r\n\r\n## Why?\r\n\r\nWhat was your reaction when Rich Harris announced that Svelte 4's reactivity, which was as concise as a JS framework reactivity syntax could be, would be abandoned in favor of ~~Vue~~ Runes syntax?\r\nIf you were delighted, Brefer is probably not for you. Personally, I didn't want to write `$state` and `$derived` everytime I defined a new reactive variable. That's the reason I started this project.\r\n\r\n## Ok but... What is the Brefer syntax?\r\n\r\nWith Brefer, I opted for a more straightforward syntax:\r\n\r\n> Variables defined with `let` are reactive by default\r\n\r\n> Using the rune `$(...)` creates `$derived` values\r\n\r\n> Using the rune `$$(() => {...})` creates `$effect` expressions\r\n\r\n> All subrunes for `$effect` (like `$effect.root` for example) are usable with `$$`\r\n\r\nThat is (almost) all you have to know.\r\n\r\n### Here are some examples\r\n\r\n<table>\r\n<tr>\r\n\t<td><b>With Svelte 5</b></td>\r\n\t<td><b>With Brefer</b></td>\r\n</tr>\r\n<tr>\r\n<td>\r\n\t\r\n```html\r\n<script>\r\n\tlet count = $state(0);\r\n\tlet double = $derived(count * 2);\r\n</script>\r\n\r\n<button onclick=\"{() => count++}\">\r\nclicks: {count} / double: {double}\r\n</button>\r\n\r\n````\r\n\r\n</td>\r\n<td>\r\n\r\n```html\r\n<script>\r\nlet count = 0;\r\nlet double = $(count * 2);\r\n</script>\r\n\r\n<button onclick=\"{() => count++}\">\r\n\tclicks: {count} / double: {double}\r\n</button>\r\n````\r\n\r\n</td>\r\n</tr>\r\n<tr>\r\n<td>\r\n\r\n```html\r\n<script>\r\n\tclass Counter {\r\n\t\tcount = $state(0);\r\n\t\tdouble = $derived(this.count * 2);\r\n\r\n\t\tincrement() {\r\n\t\t\tthis.count++;\r\n\t\t}\r\n\t}\r\n\r\n\tlet counter = new Counter();\r\n</script>\r\n\r\n<button onclick=\"{() => counter.increment()}\">\r\n\tclicks: {counter.count} / double: {counter.double}\r\n</button>\r\n```\r\n\r\n</td>\r\n<td>\r\n\r\n```html\r\n<script>\r\n\tclass Counter {\r\n\t\tcount = 0;\r\n\t\tdouble = $(this.count * 2);\r\n\r\n\t\tincrement() {\r\n\t\t\tthis.count++;\r\n\t\t}\r\n\t}\r\n\r\n\tlet counter = new Counter();\r\n</script>\r\n\r\n<button onclick=\"{() => counter.increment()}\">\r\n\tclicks: {counter.count} / double: {counter.double}\r\n</button>\r\n```\r\n\r\n</td>\r\n</tr>\r\n</table>\r\n\r\n## Typescript\r\n\r\nBrefer supports typescript out of the box as it uses [@babel/parser](https://babeljs.io/docs/babel-parser) to parse the script content of `.svelte` files and `.svelte.[js|ts]` modules.\r\n\r\n## Other features\r\n\r\n### Defining non-reactive variables\r\n\r\nTo define non-reactive variables, you have 2 choices:\r\n\r\n- Use the `var` or `const` keywords\r\n\r\n  > This choice is better for everyday use, e.g for temporary variables or loops\r\n\r\n  **NB:** if you use the `var` keyword, Brefer will preprocess it to use `let` instead\r\n\r\n- Use the `$static` rune\r\n\r\n  > This choice if better for when the first one can't be used, e.g for class properties which are defined without any keyword or when defining constants with `const`\r\n\r\n### `$derived.by`\r\n\r\nBrefer takes care of figuring out if you're using a function or an expression inside the `$(...)` rune and will preprocess it to `$derived` or `$derived.by` depending on the result.\r\n\r\nFor very rare edges cases, this could cause bugs, especially with nested callbacks. As an example, if you do that:\r\n\r\n```js\r\nlet foo = \"bar\";\r\n\r\nfunction yeet() {\r\n\treturn () => `Yeet the ${foo}`;\r\n}\r\n\r\nlet baz = $(yeet());\r\n```\r\n\r\nBrefer will think you're trying to use an expression and will preprocess it to `let baz = $derived(yeet())` even if `$derived.by` should be used.\r\n\r\nKeep that in mind if you don't want to waste hours trying to debug your non-working code.\r\n\r\nNB: This bug can also occure with the `$untrack` rune, so watch out.\r\n\r\n### The `$untrack` rune\r\n\r\nBrefer exposes an `$untrack` rune so you don't have to `import { untrack } from \"svelte\"` everytime. Brefer takes care of it all.\r\n\r\nMoreover, you can pass reactive variables to `$untrack` as a reference, no need to wrap it inside an arrow function. However, keep the problem mentionned in [the previous paragraph](#derivedby) about the potential bugs that it could cause.\r\n\r\n<table>\r\n<tr>\r\n<td><b>Svelte 5</b></td>\r\n<td><b>Brefer</b></td>\r\n</tr>\r\n<tr>\r\n<td>\r\n\r\n```js\r\nimport { untrack } from \"svelte\";\r\n\r\nlet count = $state(1);\r\nlet double = $derived(count * 2);\r\n\r\nconst cleanup = $effect.root(() => {\r\n\tconsole.log(\r\n\t\tcount,\r\n\t\tuntrack(() => double)\r\n\t);\r\n\r\n\treturn () => {\r\n\t\tconsole.log(\"cleanup\");\r\n\t};\r\n});\r\n```\r\n\r\n</td>\r\n<td>\r\n\r\n```js\r\nlet count = 1;\r\nlet double = $(count * 2);\r\n\r\nconst cleanup = $$.root(() => {\r\n\tconsole.log(count, $untrack(double));\r\n\r\n\treturn () => {\r\n\t\tconsole.log(\"cleanup\");\r\n\t};\r\n});\r\n```\r\n\r\n</td>\r\n</tr>\r\n</table>\r\n\r\n### `$state` subrunes\r\n\r\nTo be able to define variables with `$state.raw` or use `$state.snapshot` given the shorten syntax for `$state`'s, Brefer exposes the `$raw` and `$snapshot` runes.\r\n\r\nUse them just as you would use `$state.raw` and `$svelte.snapshot`.\r\n\r\n## Pros and cons\r\n\r\n### Pros\r\n\r\n- More concise than Svelte 5's syntax\r\n- Works with Typescript\r\n- Easy to integrate\r\n- It's a preprocessor, so you can still use Svelte 5's syntax if you want to\r\n- Can preprocess svelte modules (`.svelte.[js|ts]`)\r\n\r\n### Cons\r\n\r\n- You have to use a preprocessor\r\n- Some rare edge cases might induce bugs, especially when deep nested functions are involved\r\n\r\n## Contribute\r\n\r\nIf you like the concept and want to contribute, feel free to open an issue or a pull request.\r\nAlso, if you have any idea to improve or extend the syntax, I'm all ears (you can contact me on discord @kildesu)!\r\n",
	"downloads_history": [
		[3645, 817],
		[3652, 4],
		[3659, 35],
		[3666, 26],
		[3673, 10],
		[3680, 2],
		[3687, 77],
		[3694, 48],
		[3701, 100],
		[3708, 111],
		[3715, 13],
		[3722, 17],
		[3729, 7],
		[3736, 75],
		[3743, 6],
		[3750, 9],
		[3757, 2],
		[3764, 1],
		[3771, 12],
		[3778, 17],
		[3785, 142],
		[3792, 11],
		[3799, 7],
		[3806, 12],
		[3813, 1],
		[3820, 1],
		[3827, 1],
		[3834, 4],
		[3841, 2],
		[3848, 2],
		[3855, 12],
		[3862, 2],
		[3869, 1],
		[3876, 7],
		[3883, 4],
		[3890, 19],
		[3897, 1],
		[3904, 2],
		[3911, 127],
		[3918, 3],
		[3925, 7],
		[3932, 6],
		[3939, 5],
		[3946, 5],
		[3953, 22],
		[3960, 2],
		[3967, 3],
		[3974, 3],
		[3981, 3],
		[3988, 1],
		[3995, 1],
		[4002, 1],
		[4009, 4],
		[4016, 4],
		[4023, 3],
		[4030, 8],
		[4037, 11],
		[4044, 11],
		[4051, 16],
		[4058, 2],
		[4065, 1],
		[4072, 6],
		[4079, 2],
		[4086, 1],
		[4093, 21],
		[4100, 1],
		[4107, 43],
		[4114, 9],
		[4121, 18],
		[4128, 10]
	],
	"esm": true,
	"cjs": false
}
