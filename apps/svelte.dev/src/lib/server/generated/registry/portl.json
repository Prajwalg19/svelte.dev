{
	"name": "portl",
	"description": "Render content in different locations using Svelte portals.",
	"repo_url": "https://github.com/FalkZ/portl",
	"authors": ["falkz"],
	"homepage": "https://github.com/FalkZ/portl#readme",
	"downloads": 13,
	"updated": "2025-04-26T08:55:58.733Z",
	"tags": ["miscellaneous"],
	"github_stars": 2,
	"typescript": true,
	"version": "1.0.4",
	"svelte_range": "^5.0.0",
	"kit_range": "^2.0.0",
	"last_rune_check_version": "1.0.4",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "portl",
				"version": "1.0.4",
				"size": 7865
			},
			{
				"name": "esm-env",
				"version": "1.2.2",
				"size": 3784
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# portl\n\n> A lightweight portal library for Svelte 5.\n\n## Installation\n\n```bash\nnpm install portl\n```\n\n## Usage\n\nPortl lets you render content in different locations than where it's defined. Using `Portal` to define the content and `Receiver` to define where it is rendered.\n\n### Basic Example\n\n```svelte\n<script>\n    import { createPortal } from \"portl\";\n\n    const Title = createPortal();\n</script>\n\n<!-- Define the rendering location (e.g. in a +layout.svelte) -->\n<Title.Receiver />\n\n<!-- Define the content elsewhere (e.g. in a +page.svelte) -->\n<Title.Portal>\n    <h1>This content will be rendered at the Receiver location</h1>\n</Title.Portal>\n```\n\n### Multiple Portals\n\nYou can create as many portals as you like:\n\n```js\nimport { createPortal } from \"portl\";\n\nexport const Header = createPortal();\nexport const Footer = createPortal();\n```\n\n`Header` and `Footer` can be used anywhere in your application.\n\n### Placeholder\n\nYou can provide a placeholder when no portal content is present:\n\n```svelte\n<script>\n    import { createPortal } from \"portl\";\n\n    const Modal = createPortal();\n</script>\n\n<Title.Receiver>\n    {#snippet placeholder()}\n        <h1>Default Title</h1>\n    {/snippet}\n</Title.Receiver>\n```\n\n### Conditional Rendering\n\nPortals work seamlessly with Svelte's conditional rendering:\n\n```svelte\n<script>\n    import { createPortal } from \"portl\";\n\n    const Modal = createPortal();\n    let isOpen = $state(false);\n</script>\n\n<Modal.Receiver />\n\n<Modal.Portal>\n    {#if isOpen}\n        <div class=\"modal\">\n            <h2>Modal Content</h2>\n            <button on:click={() => (isOpen = false)}>Close</button>\n        </div>\n    {/if}\n</Modal.Portal>\n```\n\n### Rendering Order\n\nYou can render as many portals as you want in a receiver. If you render multiple portals they will be rendered in the order the portals where mounted:\n\n```svelte\n<Title.Portal>This is shown first</Title.Portal>\n\n<Title.Portal>This is shown second</Title.Portal>\n```\n\nTherefore it is better to define conditional rendering inside of the portal when ever possible:\n\n```svelte\n<Title.Portal>\n    {#if condition}✅ This will always render first{/if}\n</Title.Portal>\n<Title.Portal>✅ This will always render second</Title.Portal>\n```\n\nRather than:\n\n```svelte\n{#if condition}<Title.Portal>❌ This will NOT always render first</Title.Portal>{/if}\n<Title.Portal>❌ This will NOT always render second</Title.Portal>\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 1],
		[3596, 16],
		[3603, 24],
		[3610, 7],
		[3617, 8],
		[3624, 11],
		[3631, 2],
		[3638, 4],
		[3645, 1],
		[3652, 2],
		[3659, 1],
		[3666, 11],
		[3673, 2],
		[3687, 1],
		[3694, 2],
		[3701, 1],
		[3708, 1],
		[3715, 1],
		[3722, 1],
		[3729, 1],
		[3743, 1],
		[3750, 2],
		[3771, 11],
		[3778, 5],
		[3792, 7],
		[3799, 7],
		[3806, 4],
		[3813, 1],
		[3820, 1],
		[3827, 1],
		[3834, 1],
		[3841, 1],
		[3848, 15],
		[3855, 10],
		[3862, 55],
		[3876, 9],
		[3883, 1],
		[3890, 11],
		[3897, 3],
		[3904, 2],
		[3911, 3],
		[3918, 1],
		[3925, 1],
		[3932, 4],
		[3953, 2],
		[3960, 1],
		[3967, 2],
		[3974, 1],
		[3981, 1],
		[3988, 1],
		[3995, 1],
		[4002, 2],
		[4016, 3],
		[4023, 6],
		[4030, 10],
		[4037, 9],
		[4044, 12],
		[4051, 6],
		[4065, 1],
		[4072, 2],
		[4079, 1],
		[4086, 1],
		[4093, 95],
		[4100, 39],
		[4107, 4],
		[4114, 13],
		[4121, 24],
		[4128, 140]
	],
	"esm": true,
	"cjs": false
}
