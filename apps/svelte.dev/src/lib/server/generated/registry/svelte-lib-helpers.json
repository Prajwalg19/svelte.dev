{
	"name": "svelte-lib-helpers",
	"description": "Utility package for Svelte libraries, managing exports and docs.",
	"repo_url": "https://github.com/shinokada/svelte-lib-helpers",
	"authors": ["shinichiokada"],
	"homepage": "https://github.com/shinokada/svelte-lib-helpers#readme",
	"downloads": 770,
	"updated": "2025-04-27T15:50:35.022Z",
	"tags": ["tooling"],
	"github_stars": 11,
	"typescript": true,
	"version": "0.4.28",
	"svelte_range": "5.25.3",
	"last_rune_check_version": "0.4.28",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-lib-helpers",
				"version": "0.4.28",
				"size": 201555
			},
			{
				"name": "jsonc-parser",
				"version": "3.3.1",
				"size": 212821
			},
			{
				"name": "yargs",
				"version": "17.7.2",
				"size": 292421
			},
			{
				"name": "y18n",
				"version": "5.0.8",
				"size": 23435
			},
			{
				"name": "cliui",
				"version": "8.0.1",
				"size": 32314
			},
			{
				"name": "wrap-ansi",
				"version": "7.0.0",
				"size": 10648
			},
			{
				"name": "ansi-styles",
				"version": "4.3.0",
				"size": 16978
			},
			{
				"name": "color-convert",
				"version": "2.0.1",
				"size": 27189
			},
			{
				"name": "color-name",
				"version": "1.1.4",
				"size": 6693
			},
			{
				"name": "string-width",
				"version": "4.2.3",
				"size": 5161
			},
			{
				"name": "strip-ansi",
				"version": "6.0.1",
				"size": 4029
			},
			{
				"name": "ansi-regex",
				"version": "5.0.1",
				"size": 5609
			},
			{
				"name": "emoji-regex",
				"version": "8.0.0",
				"size": 48255
			},
			{
				"name": "is-fullwidth-code-point",
				"version": "3.0.0",
				"size": 4994
			},
			{
				"name": "escalade",
				"version": "3.2.0",
				"size": 12385
			},
			{
				"name": "yargs-parser",
				"version": "21.1.1",
				"size": 128470
			},
			{
				"name": "get-caller-file",
				"version": "2.0.5",
				"size": 4719
			},
			{
				"name": "require-directory",
				"version": "2.1.1"
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2],
			[2, 3],
			[2, 4],
			[4, 5],
			[5, 6],
			[6, 7],
			[7, 8],
			[5, 9],
			[9, 10],
			[10, 11],
			[9, 12],
			[9, 13],
			[5, 10],
			[4, 10],
			[4, 9],
			[2, 14],
			[2, 9],
			[2, 15],
			[2, 16],
			[2, 17]
		],
		"circular": []
	},
	"readme": "<a href='https://ko-fi.com/Z8Z2CHALG' target='_blank'><img height='42' style='border:0px;height:42px;' src='https://storage.ko-fi.com/cdn/kofi3.png?v=3' alt='Buy Me a Coffee at ko-fi.com' /></a>\n\n# Svelte Lib Helpers\n\nSvelte Lib Helpers is a utility package designed to streamline various tasks when developing Svelte libraries. It offers a set of subcommands that simplify the process of managing exports, documentation, package distribution, and more.\n\n## Repo\n\n[Svelte-lib-helpers](https://github.com/shinokada/svelte-lib-helpers)\n\n## Installation\n\nInstall Svelte Lib Helpers as a development dependency using npm/pnpm/yarn/bun:\n\n```sh\npnpm i -D svelte-lib-helpers\n```\n\nSvelte Lib Helpers provides the following subcommands to enhance your Svelte library development workflow:\n\n## exports\n\nThe `exports` subcommand simplifies updating your package.json by adding or updating all Svelte files in src/lib. This enables efficient imports of individual components and reducing package size for developers.\n\nAdd the following to your package.json scripts section:\n\n```json\n\"gen:exports\": \"svelte-lib-helpers exports\",\n```\n\n## package\n\nCopies your project's package.json to the dist directory, allowing for seamless distribution of your library.\n\nAdd the following to your package.json scripts section:\n\n```json\n\"copy:package\": \"svelte-lib-helpers package\",\n```\n\n## ts\n\nCopies your project's tsconfig.json to the dist directory, allowing for seamless distribution of your library.\n\nAdd the following to your package.json scripts section:\n\n```json\n\"copy:ts\": \"svelte-lib-helpers ts\",\n```\n\n## Component documentation\n\nGenerates component documentation for all Svelte files within the src/lib directory. \nYou need to set \"homepage\" value in your `package.json` file.\n\n```json\n \"homepage\": \"https://flowbite-svelte.com/\",\n```\n\n### docspropvalue (for svelte 5)\n\nAutomatically generating inline documentation comments in Svelte 5 components.\n\n#### Overview\n\nThis tool scans Svelte 5 components that use the `$props()` syntax and adds standardized documentation comments containing prop information and links to GitHub source code and documentation.\n\n#### Usage\n\nIn your scripts add the following:\n\n```json\n\"gen:docspropvalue\": \"svelte-lib-helpers docspropvalue <githubLink>\",\n```\n\nExample: \n\n```json\n\"gen:docspropvalue\": \"svelte-lib-helpers docspropvalue themesberg/flowbite-svelte-next\",\n```\n\n#### Features\n\n- Automatically adds documentation comments to Svelte 5 components\n- Extracts props and their default values\n- Creates links to type definitions in your GitHub repository\n- Adds links to external documentation from package.json's \"homepage\" field\n- Handles complex prop definitions with nested objects and arrays\n- Updates existing documentation comments when run multiple times\n\n#### Requirements\n\n- Svelte 5\n- A `types.ts` file in your source directory\n- \"homepage\" field in your package.json pointing to documentation\n- Svelte 5 components using `$props()` syntax\n\n#### Generated Documentation Format\n\nThe tool adds comments in this format:\n\n```html\n<!--\n@component\n[Go to docs](https://your-docs-url.com)\n## Type\n[ComponentPropsType](https://github.com/org/repo/blob/main/src/lib/types.ts#L42)\n## Props\n@prop propName = defaultValue\n@prop anotherProp\n-->\n```\n\n### docs5\n\nThe subcommand `docs5` extracts prop definitions from your Svelte 5 components to generate documentation. It focuses on the prop destructuring syntax specific to Svelte 5 and creates a simple list of props with their default values.\n\n#### Requirements\n\nYour Svelte 5 component must use the $props() syntax for prop destructuring.\nThe command supports various prop type annotations, including custom types.\n\n#### How It Works\n\nThe command searches for the prop destructuring pattern in your Svelte files:\njavascriptCopylet { ... }: SomePropsType = $props()\n\nIt extracts all props defined within the curly braces.\nThe extracted props are used to generate documentation comments in the Svelte file.\n\n#### Output Format\nThe command generates a comment block in your Svelte file with the following structure.\n\nFrom the following props structure:\n\n```js\n  let {\n    children: Snippet,\n    footerType: 'sitemap' | 'default' | 'logo' | 'socialmedia' | undefined = 'default',\n    class: string | undefined = '',\n    ...attributes\n  }: Props = $props();\n```\n\nTo:\n\n```js\n<!--\n@component\n[Go to docs](https://github.com/shinokada/svelte-lib-helpers#readme)\n## Props\n@prop children: Snippet\n@prop footerType: 'sitemap' | 'default' | 'logo' | 'socialmedia' | undefined = 'default'\n@prop class: string | undefined = ''\n@prop ...attributes\n-->\n```\n\n#### Notes\n\n- The command removes any existing @component comment blocks before adding the new one.\n- It preserves the prop definitions exactly as they appear in your code, including default values and type annotations.\n- Comments within the prop destructuring are removed from the documentation.\n- The documentation URL is taken from the homepage field in your package.json file.\n\n#### Troubleshooting\nIf the command doesn't generate the expected output:\n\n1. Ensure your Svelte file uses the $props() syntax for prop destructuring.\n2. Check that your package.json has a valid homepage field.\n3. Verify that your Svelte files are in the correct directory structure.\n\n#### Limitations\n\n- This script does not extract or display type information beyond what's in the prop destructuring.\n- It doesn't handle props defined outside of the $props() destructuring.\n\n### docs5FromType\n\n#### Overview\nThe subcommand `docs5FromType` extracts prop types and default values from your Svelte components to generate documentation. It supports two common patterns for defining prop types:\n\n1. Types defined directly in the Svelte file\n2. Types imported from a separate TypeScript file (typically ./index.ts)\n\n#### Format\n\nYour component must use one of these patterns for prop definitions:\n\n- interface Props { ... }\n- interface Props extends SomeType { ... }\n- Types defined in index.ts in the same directory as the Svelte file\n\n#### How It Works\n\n1. The command first looks for type definitions within the Svelte file itself.\n2. If no types are found in the Svelte file, it checks for imports from ./index.ts.\n3. It extracts prop names, types, and default values.\n4. The extracted information is used to generate documentation comments in the Svelte file.\n\n#### Notes\n\n- Ensure your prop destructuring in the Svelte file matches the interface definition.\n- The command handles both let { ... }: Props = $props(); syntax for Svelte 5 and older syntax for previous versions.\n- Custom types used in your props should be defined in the same file or properly imported.\n\n#### Troubleshooting\nIf the command doesn't generate the expected output:\n\n1. Check that your prop interface follows one of the supported patterns.\n2. Verify that all custom types are properly defined or imported.\n3. Ensure the Svelte file and any separate TypeScript files are in the correct locations.\n\n#### Example\n\nFrom the following props structure:\n```js\n  interface Props {\n    children: any;\n    drawerStatus: boolean;\n    toggleDrawer?: () => void;\n    position?: 'fixed' | 'absolute';\n    leftOffset?: string | undefined;\n    width?: string;\n    placement?: 'left' | 'right' | 'top' | 'bottom';\n    transitionParams: drawerTransitionParamTypes;\n  }\n\n  let {\n    children,\n    drawerStatus,\n    toggleDrawer,\n    position = 'fixed',\n    leftOffset = 'inset-y-0 start-0',\n    width = 'w-80',\n    placement = 'left',\n    transitionParams,\n    ...attributes\n  }: Props = $props();\n```\n\nTo:\n\n```js\n<!--\n@component\n[Go to docs](https://github.com/shinokada/svelte-lib-helpers)\n## Props\n@props: children: any;\n@props:drawerStatus: boolean;\n@props:toggleDrawer?: () => void;\n@props:position?:  'fixed' | 'absolute'; = 'fixed';\n@props:leftOffset?:  string | undefined; = 'inset-y-0 start-0';\n@props:width?:  string; = 'w-80';\n@props:placement?:  'left' | 'right' | 'top' | 'bottom'; = 'left';\n@props:transitionParams: drawerTransitionParamTypes;\n-->\n```\n\nOr from the following structure:\n\n```js\n  // defined type in index.ts\n  import { type DropzoneProps as Props, dropzone } from '.';\n\n  let { children, value = $bindable<string | undefined>(), files = $bindable<FileList | null>(), class: className, ...restProps }: Props = $props();\n```\n\nTo:\n\n```js\n<!--\n@component\n[Go to docs](https://github.com/shinokada/svelte-lib-helpers#readme)\n## Props\n@prop children\n@prop value = $bindable<string | undefined>()\n@prop files = $bindable<FileList | null>()\n@prop class: className\n@prop ...restProps\n-->\n```\n\nAdd the following to your package.json scripts section:\n\n```json\n\"gen:docs5FromType\": \"node ./index.js docs5FromType\",\n```\n\n### docs (svelte 4)\n\nThe `docs`and `docsFromProps` subcommands work for Svelte 4 structure. From the following props structure:\n\n```js\nexport let color: 'primary' | 'blue' | 'gray' | 'green' | 'red' | 'yellow' | 'pink' | 'purple' | 'white' | 'custom' | undefined = 'primary';\nexport let bg: string = 'text-gray-300';\nexport let customColor: string = '';\nexport let size: string | number = '8';\n```\n\nTo:\n\n```js\n<!--\n@component\n[Go to docs](https://github.com/shinokada/svelte-lib-helpers#readme)\n## Props\n@prop export let color: 'primary' | 'blue' | 'gray' | 'green' | 'red' | 'yellow' | 'pink' | 'purple' | 'white' | 'custom' | undefined = 'primary';\n@prop export let bg: string = 'text-gray-300';\n@prop export let customColor: string = '';\n@prop export let size: string | number = '8';\n-->\n```\n\nOr from the following structure:\n\n```js\n  interface $$Props extends ComponentProps<TransitionFrame> {\n    dismissable?: boolean;\n    defaultClass?: string;\n  }\n\n  export let dismissable: $$Props['dismissable'] = false;\n  export let defaultClass: $$Props['defaultClass'] = 'p-4 gap-3 text-sm';\n```\n\nTo:\n\n```json\n<!--\n@component\n[Go to docs](https://github.com/shinokada/svelte-lib-helpers#readme)\n## Props\n@prop export let dismissable: boolean = false\n@prop export let defaultClass: string = 'p-4 gap-3 text-sm'\n-->\n```\n\n## Component data\n\nThe following commands will generate JSON files containing props, slots, and events information from all Svelte files in the src/lib directory, placing them in the routes/component-data directory.\n\n### component-data-prop-value (for svelte 5)\n\nAutomatically extracting and documenting props from Svelte 5 components.\n\n#### Overview\n\nThis tool scans your Svelte 5 components that use the `$props()` syntax, extracts their prop definitions, and generates JSON documentation files. It links prop types to their GitHub source files when possible.\n\n#### Usage\n\nIn your scripts:\n\n```json\n\"gen:component-data-prop-value\": svelte-lib-helpers component-data-prop-value <githubLink>\n```\n\nExample:\n```json\n\"gen:component-data-prop-value\": svelte-lib-helpers component-data-prop-value themesberg/flowbite-svelte-next\n```\n\n#### Options\n\n- `--src`: Custom source directory (default: `./src/lib`)\n- `--dest`: Custom output directory (default: `./src/routes/component-data/`)\n\n#### Features\n\n- Extracts props from Svelte 5 components using `$props()` syntax\n- Identifies prop types and their documentation links\n- Handles both internal and external type imports\n- Supports generic types like `HTMLAttributes<HTMLDivElement>`\n- Preserves default prop values in documentation\n- Creates JSON documentation files for each component\n\n#### Output Format\n\nThe tool generates JSON files with the following structure:\n\n```json\n{\n  \"name\": \"ComponentName\",\n  \"type\": {\n    \"name\": \"TypeName\",\n    \"link\": \"https://github.com/org/repo/blob/main/src/lib/types.ts#L42\"\n  },\n  \"props\": [\n    [\"propName\", \"defaultValue\"]\n  ]\n}\n```\n\n#### Requirements\n\n- Svelte 5\n- Svelte 5 components using `$props()` syntax\n- `types.ts` file in your source directory (optional)\n\n### component5-data\n\nThe `component5-data` subcommand works for Svelte 5 structure. This will generate a JSON file for each component with the following format from:\n\n```js\n  // defined type in index.ts\n  import { type CheckboxProps as Props, checkbox } from '.';\n\n  let { children, aria_describedby, color = 'primary', custom, inline, tinted = false, rounded = false, group = $bindable([]), choices = [], checked = $bindable(false), classLabel, indeterminate, class: className, ...restProps }: Props = $props();\n```\n\nto:\n\n```json\n{\n  \"name\": \"Checkbox\",\n  \"slots\": [],\n  \"events\": [],\n  \"props\": [\n    [\n      \"children\",\n      \"Snippet\",\n      \"\"\n    ],\n    [\n      \"aria_describedby\",\n      \"string\",\n      \"\"\n    ],\n    [\n      \"color\",\n      \"ColorType\",\n      \"'primary'\"\n    ],\n    [\n      \"custom\",\n      \"boolean\",\n      \"\"\n    ],\n    [\n      \"inline\",\n      \"boolean\",\n      \"\"\n    ],\n    [\n      \"tinted\",\n      \"boolean\",\n      \"false\"\n    ],\n    [\n      \"rounded\",\n      \"boolean\",\n      \"false\"\n    ],\n    [\n      \"group\",\n      \"array\",\n      \"$bindable([])\"\n    ],\n    [\n      \"choices\",\n      \"array\",\n      \"[]\"\n    ],\n    [\n      \"checked\",\n      \"boolean\",\n      \"$bindable(false)\"\n    ],\n    [\n      \"classLabel\",\n      \"string\",\n      \"\"\n    ],\n    [\n      \"indeterminate\",\n      \"boolean\",\n      \"\"\n    ],\n    [\n      \"className\",\n      \"\",\n      \"\"\n    ]\n  ]\n}\n```\n\n### runes-data\n\nThe `runes-data` subcommand works for Svelte 5 structure. This will generate a JSON file for each component with the following format from:\n\n```js\nlet {\n    children: Snippet,\n    footerType: 'sitemap' | 'default' | 'logo' | 'socialmedia' | undefined = 'default',\n    class: string | undefined = '',\n    ...attributes\n  }: Props = $props();\n```\n\nto:\n\n```json\n{\"name\":\"Footer\",\"props\":[[\"children:Snippet\",\"\"],[\"footerType:'sitemap' | 'default' | 'logo' | 'socialmedia' | undefined\",\"\"],[\"class:string | undefined\",\"\"],[\"...attributes\",\"\"]]}\n```\n\n## Example Usage\n\nBelow is an example of how you can integrate Svelte Lib Helpers subcommands into the scripts section of your package.json file within a SvelteKit project:\n\n```json\n\"scripts\": {\n  // ...\n    \"gen:exports\": \"node ./index.js exports\",\n    \"gen:docs\": \"node ./index.js docs\",\n    \"gen:docsFromProps\": \"node ./index.js docsFromProps\",\n    \"gen:docs5\": \"node ./index.js docs5\",\n    \"gen:docs5FromType\": \"node ./index.js docs5FromType\",\n    \"gen:compo-data\": \"node ./index.js compo-data\",\n    \"gen:componentData\": \"node ./index.js component-data\",\n    \"gen:componentDataRunes\": \"node ./index.js component-data-runes\",\n    \"gen:runes-data\": \"node ./index.js runes-data\",\n    \"copy:package\": \"node ./index.js package\",\n    \"lib-helpers\": \"npm run format && npm run gen:docs && npm run gen:compo-data && npm run package && npm run gen:exports && npm run copy:package\",\n    \"package:publish\": \"standard-version && git push --follow-tags origin main && npm publish\"\n}\n```\n\n### compo-data\n\nThe `compo-data` subcommand works for Svelte 4 structure. This will generate a JSON file for each component with the following format from:\n\n```js\nexport let color: 'primary' | 'blue' | 'gray' | 'green' | 'red' | 'yellow' | 'pink' | 'purple' | 'white' | 'custom' | undefined = 'primary';\nexport let bg: string = 'text-gray-300';\n// more lines for events and slots\n```\n\nto:\n\n```json\n{\"name\":\"Spinner\",\"slots\":[],\"events\":[],\"props\":[[\"color\",\"'primary' | 'blue' | 'gray' | 'green' | 'red' | 'yellow' | 'pink' | 'purple' | 'white' | 'custom' | undefined\",\"'primary'\"],[\"bg\",\"string\",\"'text-gray-300'\"]]}\n```\n\n### component-data\n\nThe `component-data` subcommand works for Svelte 4 structure. This will generate a JSON file for each component with the following format from:\n\n```js\ninterface $$Props extends ComponentProps<TransitionFrame> {\n  dismissable?: boolean;\n  defaultClass?: string;\n}\n\nexport let dismissable: $$Props['dismissable'] = false;\nexport let defaultClass: $$Props['defaultClass'] = 'p-4 gap-3 text-sm';\n// more lines for events and slots\n```\n\nto:\n\n```json\n{\"name\":\"Alert\",\"slots\":[\"icon\",\"close-button\"],\"events\":[\"on:close\",\"on:click\",\"on:change\",\"on:keydown\",\"on:keyup\",\"on:focus\",\"on:blur\",\"on:mouseenter\",\"on:mouseleave\"],\"props\":[[\"dismissable\",\"$$Props['dismissable']\",\"false\"],[\"defaultClass\",\"$$Props['defaultClass']\",\"'p-4 gap-3 text-sm'\"]]}\n```\n\n## License\n\nThis project is licensed under the MIT License. For details, please refer to the LICENSE file.",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 44],
		[3596, 36],
		[3603, 46],
		[3610, 47],
		[3617, 113],
		[3624, 129],
		[3631, 176],
		[3638, 89],
		[3645, 97],
		[3652, 105],
		[3659, 279],
		[3666, 617],
		[3673, 664],
		[3680, 1005],
		[3687, 1046],
		[3694, 641],
		[3701, 953],
		[3708, 850],
		[3715, 1034],
		[3722, 1148],
		[3729, 1014],
		[3736, 736],
		[3743, 1019],
		[3750, 1192],
		[3757, 827],
		[3764, 869],
		[3771, 906],
		[3778, 988],
		[3785, 745],
		[3792, 1174],
		[3799, 1011],
		[3806, 1280],
		[3813, 1349],
		[3820, 1207],
		[3827, 1541],
		[3834, 994],
		[3841, 1896],
		[3848, 1747],
		[3855, 1554],
		[3862, 1889],
		[3869, 1280],
		[3876, 1181],
		[3883, 1223],
		[3890, 1419],
		[3897, 1122],
		[3904, 901],
		[3911, 898],
		[3918, 1136],
		[3925, 1012],
		[3932, 690],
		[3939, 947],
		[3946, 804],
		[3953, 627],
		[3960, 654],
		[3967, 508],
		[3974, 643],
		[3981, 364],
		[3988, 419],
		[3995, 511],
		[4002, 400],
		[4009, 249],
		[4016, 614],
		[4023, 493],
		[4030, 468],
		[4037, 259],
		[4044, 266],
		[4051, 375],
		[4058, 272],
		[4065, 314],
		[4072, 311],
		[4079, 325],
		[4086, 345],
		[4093, 349],
		[4100, 462],
		[4107, 349],
		[4114, 770],
		[4121, 1065],
		[4128, 577]
	]
}
