{
	"name": "rich-text-svelte-renderer",
	"description": "Render Hygraph Rich Text content in Svelte.",
	"repo_url": "https://github.com/bertybot/svelte-renderer",
	"authors": ["bertybot"],
	"homepage": "https://github.com/bertybot/svelte-renderer#readme",
	"downloads": 11,
	"updated": "2025-03-17T20:25:18.413Z",
	"tags": ["content"],
	"github_stars": 6,
	"typescript": true,
	"version": "2.0.4",
	"svelte_range": "^5.0.0",
	"kit_range": "^2.5.27",
	"last_rune_check_version": "2.0.4",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "rich-text-svelte-renderer",
				"version": "2.0.4",
				"size": 27771
			},
			{
				"name": "@graphcms/rich-text-types",
				"version": "0.5.1",
				"size": 33369
			},
			{
				"name": "tslib",
				"version": "2.8.1",
				"size": 90359
			},
			{
				"name": "es-escape-html",
				"version": "0.1.1",
				"size": 7403
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[0, 3]
		],
		"circular": []
	},
	"readme": "# rich-text-svelte-renderer\n\nSvelte port of @hygraph's Rich text renderer. [link](https://github.com/hygraph/rich-text/blob/main/packages/react-renderer/README.md) .\n\n## Getting Started\n\nYou can get it on npm or Yarn.\n\n```sh\n# npm\nnpm i rich-text-svelte-renderer\n\n# Yarn\nyarn add rich-text-svelte-renderer\n\n# pnpm\npnpm i rich-text-svelte-renderer\n```\n\n## üî• Usage/Examples\n\nTo render the content on your application, you'll need to provide the array of elements returned from the Hygraph API to the `RichText` component. The content has to be returned in `raw` (or `json`) format as the AST representation. For more information on how to query the Rich Text content, [check our documentation](https://hygraph.com/docs/api-reference/schema/field-types#rich-text).\n\n````svelte\n<script lang=\"ts\">\n\timport type { RichTextProps } from 'rich-text-svelte-renderer/RichText.svelte';\n\timport { RichText } from 'rich-text-svelte-renderer';\n\n\tconst content: RichTextProps['content'] = {\n\t\tchildren: [\n\t\t\t{\n\t\t\t\ttype: 'paragraph',\n\t\t\t\tchildren: [\n\t\t\t\t\t{\n\t\t\t\t\t\tbold: true,\n\t\t\t\t\t\ttext: 'Hello World!'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t]\n\t};\n</script>\n\n<RichText {content} />\n\nThe content from the example above will render: ```html\n<p>\n\t<b>Hello world!</b>\n</p>\n````\n\n## Custom elements\n\nBy default, the elements won't have any styling, despite the `IFrame`, which we designed to be responsive. But if you have, for example, a design system and wants to use your own components with styling, you can pass a `renderers` prop to the `RichText` component. Let's see an example:\n\n```svelte\n<script>\n\timport { RichText } from 'rich-text-svelte-renderer';\n\timport newH1 from './newH1.svelte';\n\tconst content = {\n\t\t/* ... */\n\t};\n</script>\n\n<RichText\n\t{content}\n\trenderers={{\n\t\th1: newH1\n\t}}\n/>\n```\n\nBelow you can check the full list of elements you can customize, alongside the props available for each of them.\n\n- `a`\n  - `children`: SvelteComponent;\n  - `href`: string;\n  - `className`: string;\n  - `rel`: string;\n  - `id`: string;\n  - `title`: string;\n  - `openInNewTab`: boolean;\n- `class`\n  - `children`: SvelteComponent;\n  - `className`: string;\n- `img`\n  - `src`: string;\n  - `title`: string;\n  - `width`: number;\n  - `height`: number;\n  - `mimeType`: ImageMimeTypes;\n  - `altText`: string;\n- `video`\n  - `src`: string;\n  - `title`: string;\n  - `width`: number;\n  - `height`: number;\n- `iframe`\n  - `url`: string;\n  - `width`: number;\n  - `height`: number;\n- `h1`\n  - `children`: SvelteComponent;\n- `h2`\n  - `children`: SvelteComponent;\n- `h3`\n  - `children`: SvelteComponent;\n- `h4`\n  - `children`: SvelteComponent;\n- `h5`\n  - `children`: SvelteComponent;\n- `h6`\n  - `children`: SvelteComponent;\n- `p`\n  - `children`: SvelteComponent;\n- `ul`\n  - `children`: SvelteComponent;\n- `ol`\n  - `children`: SvelteComponent;\n- `li`\n  - `children`: SvelteComponent;\n- `table`\n  - `children`: SvelteComponent;\n- `table_head`\n  - `children`: SvelteComponent;\n- `table_header_cell`\n  - `children`: SvelteComponent;\n- `table_body`\n  - `children`: SvelteComponent;\n- `table_row`\n  - `children`: SvelteComponent;\n- `table_cell`\n  - `children`: SvelteComponent;\n- `blockquote`\n  - `children`: SvelteComponent;\n- `bold`\n  - `children`: SvelteComponent;\n- `italic`\n  - `children`: SvelteComponent;\n- `underline`\n  - `children`: SvelteComponent;\n- `code`\n  - `children`: SvelteComponent;\n- `code_block`\n  - `children`: SvelteComponent;\n\n### Custom Embeds/Assets\n\nDepending on your reference query and model, fields may change, which applies to types. To have a better DX using the package, we have `EmbedProps` and `LinkEmbedProps` types that you can import from `@graphcms/rich-text-types` (you may need to install it if you don't have done it already).\n\nIn this example, we have seen how to write a renderer for a `Post` model, but it applies the same way to any other model and `Asset` on your project.\n\n```svelte\n<script lang=\"ts\">\n\timport type { EmbedProps, LinkEmbedProps } from '@graphcms/rich-text-types';\n\n\ttype Post = {\n\t\ttitle: string;\n\t\tslug: string;\n\t\tdescription: string;\n\t};\n\n\timport Post from './Post.svelte';\n\timport PostLink from './PostLink.svelte';\n\n\tconst content = {\n\t\t/* ... */\n\t};\n</script>\n\n<RichText\n\t{content}\n\trenderers={{\n\t\tembed: {\n\t\t\tPost\n\t\t},\n\t\tlink: {\n\t\t\tPost: PostLink\n\t\t}\n\t}}\n/>\n```\n\n## üìù License\n\nLicensed under the MIT License.\n\n---\n\nMade with üíú by Bert Bengtson\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 61],
		[3596, 5],
		[3603, 5],
		[3610, 2],
		[3617, 5],
		[3624, 2],
		[3631, 2],
		[3638, 3],
		[3652, 2],
		[3659, 1],
		[3666, 8],
		[3680, 1],
		[3687, 1],
		[3694, 1],
		[3708, 1],
		[3715, 1],
		[3722, 2],
		[3736, 2],
		[3743, 2],
		[3757, 1],
		[3764, 1],
		[3771, 1],
		[3778, 2],
		[3785, 2],
		[3792, 1],
		[3799, 1],
		[3806, 3],
		[3813, 5],
		[3841, 17],
		[3862, 1],
		[3869, 2],
		[3876, 1],
		[3883, 3],
		[3890, 9],
		[3897, 9],
		[3904, 4],
		[3911, 4],
		[3918, 22],
		[3925, 55],
		[3932, 45],
		[3939, 45],
		[3946, 37],
		[3953, 32],
		[3960, 24],
		[3967, 7],
		[3974, 62],
		[3981, 8],
		[3988, 5],
		[3995, 66],
		[4002, 6],
		[4009, 2],
		[4016, 6],
		[4023, 3],
		[4030, 3],
		[4037, 16],
		[4044, 81],
		[4051, 4],
		[4058, 3],
		[4065, 10],
		[4072, 3],
		[4079, 80],
		[4086, 29],
		[4093, 43],
		[4100, 23],
		[4107, 9],
		[4114, 11],
		[4121, 12],
		[4128, 8]
	],
	"esm": false,
	"cjs": true
}
