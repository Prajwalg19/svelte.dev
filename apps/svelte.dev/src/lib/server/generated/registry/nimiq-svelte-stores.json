{
	"name": "nimiq-svelte-stores",
	"description": "Provide Svelte stores for Nimiq Blockchain Client.",
	"repo_url": "",
	"authors": ["sisou"],
	"homepage": "https://github.com/sisou/nimiq-svelte-stores",
	"downloads": 8,
	"updated": "2020-02-26T09:12:05.474Z",
	"tags": ["integration"],
	"typescript": true,
	"version": "1.4.0",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "1.4.0",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "nimiq-svelte-stores",
				"version": "1.4.0",
				"size": 45766
			},
			{
				"name": "svelte",
				"version": "3.59.2",
				"size": 10624206
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# Nimiq Svelte Stores\n\nThis library provides [SvelteJS](https://svelte.dev) stores for a [Nimiq](https://nimiq.com) Blockchain Client.\n\nClient initialization is already handled for you (mainnet, pico client).\nYou simply import the stores that you need.\n\n- [Example](#example)\n- [Setup](#setup)\n- [Start](#start)\n- [Stores](#stores)\n- [Writable Stores](#writable-stores)\n- [Client](#client)\n- [Config](#config)\n\n## Example\n\n- [Example app on Netlify](https://nimiq-svelte-stores.netlify.com)\n- [Example code](https://github.com/sisou/nimiq-svelte-stores/blob/master/example/App.svelte)\n\n## Setup\n\n1. Install this library from [NPM](https://www.npmjs.com/package/nimiq-svelte-stores):\n    ```bash\n    yarn add --dev nimiq-svelte-stores\n    ```\n2. Add the Nimiq script _before_ the bundle in your `public/index.html`:\n   ```html\n   <script defer src=\"https://cdn.nimiq-testnet.com/v1.5.2/web.js\"></script>\n   ```\n3. Import Nimiq stores into your components and start the client, see next sections.\n\n## Start\n\nTo start the Nimiq Client, call the exported `start` function:\n\n```js\nimport { start } from 'nimiq-svelte-stores`\n\nstart()\n```\n\nAdvanced: [Learn how to configure the Nimiq Client](#config).\n\n## Stores\n\n```js\nimport {\n    ready,\n    consensus,\n    established,\n    headHash,\n    head,\n    height,\n    networkStatistics,\n    peerCount,\n    accounts,\n    accountsRefreshing,\n    newTransaction,\n    transactions,\n    transactionsRefreshing,\n} from 'nimiq-svelte-stores'\n```\n\n| Store | Type | Initial value |\n|-------|------|---------------|\n| ready | Boolean | `false` |\n| consensus | String | `'loading'` |\n| established | Boolean | `false` |\n| headHash | [Nimiq.Hash](https://doc.esdoc.org/github.com/nimiq/core-js/class/src/main/generic/consensus/base/primitive/Hash.js~Hash.html) | `null` |\n| head | [Nimiq.Block](https://doc.esdoc.org/github.com/nimiq/core-js/class/src/main/generic/consensus/base/block/Block.js~Block.html) | `null` |\n| height | Number | `0` |\n| networkStatistics | [Nimiq.Client.NetworkStatistics](https://doc.esdoc.org/github.com/nimiq/core-js/class/src/main/generic/api/NetworkClient.js~NetworkStatistics.html) | `Object` |\n| peerCount | Number | `0` |\n| accounts | Array<{address: [Nimiq.Address](https://doc.esdoc.org/github.com/nimiq/core-js/class/src/main/generic/consensus/base/account/Address.js~Address.html), ...}> | `[]` |\n| accountsRefreshing | Boolean | `false` |\n| newTransaction | [Nimiq.Client.TransactionDetails](https://doc.esdoc.org/github.com/nimiq/core-js/class/src/main/generic/api/TransactionDetails.js~TransactionDetails.html) | `null` |\n| transactions | Array<[Nimiq.Client.TransactionDetails](https://doc.esdoc.org/github.com/nimiq/core-js/class/src/main/generic/api/TransactionDetails.js~TransactionDetails.html)> | `[]` |\n| transactionsRefreshing | Boolean | `false` |\n\n## Writable Stores\n\nThe `accounts` and `transactions` stores expose methods to write to them and trigger actions.\n\n### accounts.add()\n\nYou can add one or more accounts to the `accounts` store by passing the following types to the `accounts.add()` method:\n\n* [`Nimiq.Address`](https://doc.esdoc.org/github.com/nimiq/core-js/class/src/main/generic/consensus/base/account/Address.js~Address.html)\n* `string` (userfriendly, hex or base64 address representation)\n* `Object<{address: Nimiq.Address | string}>`\n* Array of these types\n\nIf you add objects, they can include whatever properties you like, as long as they have an `address` property\nwhich can be interpreted as a Nimiq address. All other properties on the object are preserved and added to the store.\nYou can use this for example to store an account `label` or other meta data in the `accounts` store.\n\n>The `accounts` store automatically populates and updates accounts' `balance` and `type` fields from the blockchain,\n>while consensus is established (as well as other relevant fields for [vesting contracts](https://doc.esdoc.org/github.com/nimiq/core-js/class/src/main/generic/consensus/base/account/VestingContract.js~VestingContract.html) and [HTLCs](https://doc.esdoc.org/github.com/nimiq/core-js/class/src/main/generic/consensus/base/account/HashedTimeLockedContract.js~HashedTimeLockedContract.html)).\n\n### accounts.remove()\n\nAccounts may be removed from the `accounts` store with the `accounts.remove()` method.\nThe method takes the same arguments as the `add` method above.\n\n### accounts.refresh()\n\nThe `accounts.refresh()` method can be used to manually trigger a blockchain sync of some or all stored `accounts`.\nWhen passed any of the arguments accepted by the `add` method, only those accounts are refreshed.\nIf no argument is passed, all stored accounts are refreshed.\n\n### transactions.add()\n\nYou can add single or an array of known [`Nimiq.Client.TransactionDetails`](https://doc.esdoc.org/github.com/nimiq/core-js/class/src/main/generic/api/TransactionDetails.js~TransactionDetails.html) to the `transactions` store with\nthe `transactions.add()` method.\nThese transaction details are then used when fetching the transaction history for an account, and prevent\na great amount of data from being downloaded again.\n\n>When subscribing to the `transactions` store, the transaction history for all stored and newly added accounts\n>is automatically fetched while consensus is established.\n\n### transactions.refresh()\n\nThe `transactions.refresh()` method can be used to manually trigger fetching the transaction history of some\nor all stored `accounts`. When passed any of the arguments accepted by the `accounts.add` method, only the histories\nof those accounts are refreshed. If no argument is passed, the history of all stored accounts is refreshed.\n\n### transactions.setSort()\n\nThe `transactions.setSort()` method allows you to overwrite the library's transaction-sorting algorithm.\n(By default, transactions are sorted 'newest first'.)\n\nPass your custom sort function to the `setSort()` method.\nYour sort function receives two arguments, both `Nimiq.Client.TransactionDetails`, and is required to return a number:\n`< 0` if the first argument should be sorted first, `> 0` if the second argument should be sorted first, `0` if both arguments should be sorted equally.\n\n```js\n// Sort transactions by their hash value, ascending\nfunction customSort(a, b) {\n    const aValue = parseInt(a.transactionHash.toHex().substring(0, 10), 16)\n    const bValue = parseInt(b.transactionHash.toHex().substring(0, 10), 16)\n    return a - b\n}\n\ntransactions.setSort(customSort)\n```\n\n## Client\n\nThis library exposes a [Nimiq Client](https://doc.esdoc.org/github.com/nimiq/core-js/class/src/main/generic/api/Client.js~Client.html) as the `client` export.\nFor configuration options, see [Config](#config).\nThe `client` export is `undefined` until:\n\n- the `ready` store turned `true` or\n- the `start()` function resolves\n\nThere are two ways to make sure the `client` is defined when you use it:\n\n1. Only enable `client`-triggering elements when the `ready` store turned `true`:\n\n```html\n<script>\n    import { ready, client } from 'nimiq-svelte-stores'\n\n    function sendTransaction() {\n        const tx = ...\n        client.sendTransaction(tx)\n    }\n</script>\n\n<button disabled={!$ready} on:click={sendTransaction}>Send Transaction</button>\n```\n\n2. Await the exported `start()` function:\n\n```js\nimport { start, client } from 'nimiq-svelte-stores'\n\nasync function sendTransaction() {\n    const tx = ...;\n    await start() // or: const client = await start()\n    client.sendTransaction(tx)\n}\n```\n\nThe Nimiq Client API is documented here: https://doc.esdoc.org/github.com/nimiq/core-js/class/src/main/generic/api/Client.js~Client.html\n\nTutorials for sending transactions are here: https://nimiq.github.io/tutorials/basics-3-transactions\n\n## Config\n\nThe Nimiq Client that is created internally in this library can be configured during first start-up.\nThe `start()` method therefore takes a callback as its first argument.\nThis callback receives a [`Nimiq.Client.ConfigurationBuilder`](https://doc.esdoc.org/github.com/nimiq/core-js/class/src/main/generic/api/Configuration.js~ConfigurationBuilder.html) instance as an argument, which can be manipulated inside the callback.\n\n*Note:* The client is only created once, so the config callback is only effective in the _first call_ to the `start()` function.\n\n```js\nstart((config) => {\n    // Create a volatile consensus (not storing peer information across page reloads)\n    config.volatile(true)\n\n    // Require a local mempool (creates a light consensus)\n    client.feature(Nimiq.Client.Feature.MEMPOOL)\n})\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 7],
		[3603, 11],
		[3624, 1],
		[3645, 13],
		[3652, 1],
		[3659, 1],
		[3666, 10],
		[3673, 2],
		[3694, 1],
		[3701, 1],
		[3708, 1],
		[3722, 1],
		[3729, 1],
		[3743, 1],
		[3750, 3],
		[3771, 15],
		[3778, 6],
		[3792, 1],
		[3799, 2],
		[3806, 1],
		[3820, 1],
		[3827, 1],
		[3834, 1],
		[3841, 2],
		[3848, 2],
		[3855, 1],
		[3862, 45],
		[3869, 1],
		[3876, 1],
		[3883, 1],
		[3890, 10],
		[3897, 2],
		[3911, 10],
		[3918, 3],
		[3925, 2],
		[3932, 1],
		[3946, 5],
		[3960, 1],
		[3974, 2],
		[3995, 12],
		[4002, 1],
		[4009, 1],
		[4016, 1],
		[4030, 12],
		[4037, 12],
		[4044, 7],
		[4051, 2],
		[4058, 1],
		[4065, 2],
		[4079, 9],
		[4086, 1],
		[4093, 19],
		[4100, 10],
		[4107, 6],
		[4114, 8],
		[4121, 10],
		[4128, 6]
	],
	"esm": false,
	"cjs": true
}
