{
	"name": "svelte-pincode",
	"description": "Creates declarative pin code input components for Svelte.",
	"repo_url": "https://github.com/metonym/svelte-pincode",
	"authors": ["metonym"],
	"homepage": "https://github.com/metonym/svelte-pincode",
	"downloads": 179,
	"updated": "2024-06-13T02:35:03.543Z",
	"tags": ["ui"],
	"github_stars": 32,
	"typescript": true,
	"version": "2.2.2",
	"svelte_range": "^3.59.1",
	"last_rune_check_version": "2.2.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-pincode",
				"version": "2.2.2",
				"size": 25045
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-pincode\n\n[![NPM][npm]][npm-url]\n\n> Declarative pin code component for Svelte.\n\n<!-- REPO_URL -->\n\nA pin code is a short sequence of characters (usually numeric) used for verification. It differs from a password in that it is typically ephemeral and is not predetermined by the user.\n\nTry it in the [Svelte REPL](https://svelte.dev/repl/2841eef46bfb49c4a848a2a063602e5d).\n\n---\n\n<!-- TOC -->\n\n## Installation\n\n```sh\n# npm\nnpm i -D svelte-pincode\n\n# pnpm\npnpm i -D svelte-pincode\n\n# Bun\nbun i -D svelte-pincode\n\n# Yarn\nyarn add -D svelte-pincode\n```\n\n## Usage\n\n### Basic\n\nBind to either the `code` or `value` prop.\n\n- **code** (`string[]`): Array of input values. An empty string represents an undefined value.\n- **value** (`string`): `code` joined as a string.\n\n<!-- prettier-ignore-start -->\n```svelte\n<script>\n  import { Pincode, PincodeInput } from \"svelte-pincode\";\n\n  let code = [];\n  let value = '';\n</script>\n\n<Pincode bind:code bind:value>\n  <PincodeInput />\n  <PincodeInput />\n  <PincodeInput />\n  <PincodeInput />\n</Pincode>\n\n<div>code: <code>{JSON.stringify(code)}</code></div>\n<div>value: <code>{JSON.stringify(value)}</code></div>\n```\n<!-- prettier-ignore-end -->\n\n### Select text on focus\n\nSet `selectTextOnFocus` to `true` for the input value text to be selected when focused.\n\n<!-- prettier-ignore-start -->\n```svelte\n<script>\n  import { Pincode, PincodeInput } from \"svelte-pincode\";\n\n  let input;\n</script>\n\n<Pincode selectTextOnFocus>\n  <PincodeInput bind:ref={input} value=\"0\" />\n  <PincodeInput />\n  <PincodeInput />\n  <PincodeInput />\n</Pincode>\n\n<button on:click={() => input.focus()}>\n  Focus input\n</button>\n```\n<!-- prettier-ignore-end -->\n\n### Numeric variant\n\nBy default, this component accepts alphanumeric values.\n\nSet `type` to `\"numeric\"` to only allow numbers.\n\n<!-- prettier-ignore-start -->\n```svelte\n<Pincode type=\"numeric\">\n  <PincodeInput />\n  <PincodeInput />\n  <PincodeInput />\n  <PincodeInput />\n</Pincode>\n```\n<!-- prettier-ignore-end -->\n\n### Initial values\n\nDefine intitial input values by using the `code` prop or `value` prop on `PincodeInput`.\n\n<!-- prettier-ignore-start -->\n```svelte\n<script>\n  import { Pincode, PincodeInput } from \"svelte-pincode\";\n\n  let pincode = [\"1\", \"\", \"3\"];\n</script>\n\n<Pincode bind:code={pincode}>\n  <PincodeInput />\n  <PincodeInput value=\"2\" />\n  <PincodeInput />\n  <PincodeInput />\n</Pincode>\n\n<div>code: <code>{JSON.stringify(pincode)}</code></div>\n```\n<!-- prettier-ignore-end -->\n\n### Validating upon completion\n\nActual validation is left to the consumer.\n\nThis example illustrates how you can validate the code once all inputs have a value by binding to the `complete` prop.\n\n<!-- prettier-ignore-start -->\n```svelte\n<script>\n  import { Pincode, PincodeInput } from \"svelte-pincode\";\n\n  const correctCode = \"1234\";\n\n  let inputValue = '';\n  let complete = false;\n\n  $: success = complete && inputValue === correctCode;\n  $: error = complete && !success;\n</script>\n\n<Pincode bind:complete bind:value={inputValue}>\n  <PincodeInput />\n  <PincodeInput />\n  <PincodeInput />\n  <PincodeInput />\n</Pincode>\n\n<div class:complete class:success class:error>\n  {#if !complete}\n    Enter {correctCode.length - inputValue.length} more digit(s)...\n  {/if}\n  {#if success}Correct code{/if}\n  {#if error}Incorrect code{/if}\n</div>\n```\n<!-- prettier-ignore-end -->\n\nUse the dispatched \"complete\" event as an alternative to binding the `complete` prop.\n\n```svelte no-eval\n<Pincode\n  on:complete=\"{(e) => {\n    console.log(e.detail); // { code: string[]; value: string; }\n  }}\"\n/>\n```\n\n### Programmatic usage\n\n`code` can be set programmatically.\n\nIn the following example, type some initial values and try setting or clearing the code.\n\n<!-- prettier-ignore-start -->\n```svelte\n<script>\n  import { Pincode, PincodeInput } from \"svelte-pincode\";\n\n  let passcode = [];\n</script>\n\n<Pincode bind:code={passcode}>\n  <PincodeInput />\n  <PincodeInput />\n  <PincodeInput />\n  <PincodeInput />\n</Pincode>\n\n<div>code: <code>{JSON.stringify(passcode)}</code></div>\n\n<button on:click={() => passcode = ['1', '2', '3', '4']}>\n  Set code\n</button>\n\n<button on:click={() => passcode = ['', '', '', '']}>\n  Clear code\n</button>\n```\n<!-- prettier-ignore-end -->\n\n### Focusing the first input\n\nTo programmatically focus the first input, invoke the `focusFirstInput` method in a component reference.\n\n<!-- prettier-ignore-start -->\n```svelte\n<script>\n  import { Pincode, PincodeInput } from \"svelte-pincode\";\n\n  let ref;\n</script>\n\n<Pincode bind:this={ref}>\n  <PincodeInput />\n  <PincodeInput />\n  <PincodeInput />\n  <PincodeInput />\n</Pincode>\n\n<button on:click={ref.focusFirstInput}>\n  Focus first input\n</button>\n```\n<!-- prettier-ignore-end -->\n\n### Focusing the next empty input\n\nTo focus the next input with no value, invoke the `focusNextEmptyInput` method.\n\n<!-- prettier-ignore-start -->\n```svelte\n<script>\n  import { Pincode, PincodeInput } from \"svelte-pincode\";\n\n  let pincodeRef;\n</script>\n\n<Pincode code={[\"9\", \"9\"]} bind:this={pincodeRef}>\n  <PincodeInput />\n  <PincodeInput />\n  <PincodeInput />\n  <PincodeInput />\n</Pincode>\n\n<button on:click={pincodeRef.focusNextEmptyInput}>\n  Focus next empty input\n</button>\n```\n<!-- prettier-ignore-end -->\n\n### Focusing the last input\n\nTo focus the last input, invoke the `focusLastInput` method.\n\n<!-- prettier-ignore-start -->\n```svelte\n<script>\n  import { Pincode, PincodeInput } from \"svelte-pincode\";\n\n  let passcodeRef;\n</script>\n\n<Pincode bind:this={passcodeRef}>\n  <PincodeInput />\n  <PincodeInput />\n  <PincodeInput />\n  <PincodeInput />\n</Pincode>\n\n<button on:click={passcodeRef.focusLastInput}>\n  Focus last input\n</button>\n```\n<!-- prettier-ignore-end -->\n\n## Styling\n\n### Customization\n\nThis component is minimally styled; override the default styles by targeting the `data-pincode` selector:\n\n```css\n/** Pincode **/\n:global([data-pincode]) {\n  display: inline-flex;\n  border: 1px solid #e0e0e0;\n}\n\n/** PincodeInput */\n:global([data-pincode] input) {\n  width: 3rem;\n  padding: 0.5rem 1rem;\n  margin: 0;\n  border: 0;\n  border-radius: 0;\n  text-align: center;\n}\n\n:global([data-pincode] input:focus) {\n  z-index: 1;\n}\n\n:global([data-pincode] input:not(:last-of-type)) {\n  border-right: 1px solid #e0e0e0;\n}\n```\n\n### Unstyled components\n\nUse the unstyled components located in the `svelte-pincode/unstyled` folder if you prefer to style the components from scratch.\n\n```html\n<script>\n  import Pincode from \"svelte-pincode/unstyled/Pincode.svelte\";\n  import PincodeInput from \"svelte-pincode/unstyled/PincodeInput.svelte\";\n</script>\n```\n\n## API\n\n### Pincode\n\n#### Props\n\n| Name              | Type                            | Default value    |\n| :---------------- | :------------------------------ | :--------------- |\n| code              | `string[]`                      | `[]`             |\n| value             | `string`                        | `\"\"`             |\n| type              | `\"alphanumeric\"` or `\"numeric\"` | `\"alphanumeric\"` |\n| selectTextOnFocus | `boolean`                       | `false`          |\n\n#### Accessors\n\n- `focusFirstInput`\n- `focusNextEmptyInput`\n- `focusLastInput`\n\n#### Dispatched Events\n\n- **on:complete**: fired when all inputs have a value\n- **on:clear**: fired when no inputs have a value\n\n```svelte no-eval\n<Pincode\n  on:complete=\"{(e) => {\n    console.log(e.detail); // { code: string[]; value: string; }\n  }}\"\n  on:clear\n/>\n```\n\n### PincodeInput\n\n#### Props\n\n| Name | Type               | Default value                          |\n| :--- | :----------------- | :------------------------------------- |\n| id   | `string`           | `\"input\" + Math.random().toString(36)` |\n| ref  | `HTMLInputElement` | `null`                                 |\n\n#### Forwarded Events\n\n- on:focus\n- on:blur\n- on:keydown\n\n## Changelog\n\n[CHANGELOG.md](CHANGELOG.md)\n\n## License\n\n[MIT](LICENSE)\n\n[npm]: https://img.shields.io/npm/v/svelte-pincode.svg?style=for-the-badge&color=%23ff3e00\n[npm-url]: https://npmjs.com/package/svelte-pincode\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 1032],
		[3596, 1513],
		[3603, 699],
		[3610, 511],
		[3617, 536],
		[3624, 502],
		[3631, 486],
		[3638, 424],
		[3645, 254],
		[3652, 445],
		[3659, 494],
		[3666, 421],
		[3673, 307],
		[3680, 336],
		[3687, 413],
		[3694, 351],
		[3701, 310],
		[3708, 350],
		[3715, 457],
		[3722, 371],
		[3729, 357],
		[3736, 350],
		[3743, 405],
		[3750, 418],
		[3757, 388],
		[3764, 379],
		[3771, 292],
		[3778, 330],
		[3785, 586],
		[3792, 391],
		[3799, 455],
		[3806, 492],
		[3813, 414],
		[3820, 424],
		[3827, 485],
		[3834, 371],
		[3841, 307],
		[3848, 345],
		[3855, 408],
		[3862, 229],
		[3869, 271],
		[3876, 319],
		[3883, 321],
		[3890, 554],
		[3897, 424],
		[3904, 531],
		[3911, 237],
		[3918, 382],
		[3925, 456],
		[3932, 530],
		[3939, 462],
		[3946, 317],
		[3953, 222],
		[3960, 234],
		[3967, 272],
		[3974, 230],
		[3981, 194],
		[3988, 515],
		[3995, 449],
		[4002, 416],
		[4009, 112],
		[4016, 98],
		[4023, 185],
		[4030, 190],
		[4037, 177],
		[4044, 427],
		[4051, 531],
		[4058, 327],
		[4065, 220],
		[4072, 257],
		[4079, 202],
		[4086, 211],
		[4093, 164],
		[4100, 133],
		[4107, 187],
		[4114, 179],
		[4121, 299],
		[4128, 189]
	],
	"esm": true,
	"cjs": false
}
