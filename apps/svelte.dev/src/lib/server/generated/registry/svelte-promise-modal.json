{
	"name": "svelte-promise-modal",
	"description": "Create modals returning promises for Svelte applications.",
	"repo_url": "",
	"authors": ["esinx"],
	"downloads": 5,
	"updated": "2020-06-01T09:48:19.187Z",
	"tags": ["miscellaneous"],
	"typescript": false,
	"version": "0.7.0-2",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "0.7.0-2",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-promise-modal",
				"version": "0.7.0-2",
				"size": 98595
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-promise-modal\n\nYeah you've seen lots of modals. But have you seen a modal that returns a promise?\n\n## Installation\n\n```\nnpm i -D svelte-promise-modal\n```\n\n## How to\n\nImport as shown below\n\n```html\n<script>\n    import { Modal, AlertModal, AskModal } from \"svelte-promise-modal\";\n    import { get } from \"svelte/store\"; // you will need this for AskModal\n</script>\n```\n\nCreate references to each components as shown below\n\n```js\nlet _modal;\nlet _alertmodal;\nlet _askmodal;\n```\n\n```html\n<Modal bind:this=\"{_modal}\">\n    <h1>Hi! I'm a Modal!</h1>\n</Modal>\n\n<AlertModal bind:this=\"{_alertmodal}\" let:confirm>\n    <div slot=\"footer\">\n        <button on:click=\"{confirm}\">ok</button>\n    </div>\n</AlertModal>\n\n<AskModal let:datastore let:confirm let:cancel bind:this=\"{_askmodal}\">\n    <h1>Hi! I'm an Ask Modal!</h1>\n    <p>I resolve when you press confirm</p>\n    <div>\n        <input value={get(datastore).text} on:input={e => { datastore.set({ text: e.target.value });\n        }} />\n    </div>\n    <div>\n        <button on:click=\"{cancel}\">cancel</button>\n        <button on:click=\"{confirm}\">confirm</button>\n    </div>\n</AskModal>\n```\n\nOpen them using corresponding methods.\n\nAlertModal and AskModal will return a promise that is fulfilled once `confirm` is called.\n\n```html\n\n    <div>\n      <button on:click={_modal.open}>Open Modal</button>\n    </div>\n    <div>\n      <button\n        on:click={() => {\n          _alertmodal.alert(`<h1>Hi! I'm an Alert Modal!</h1>`);\n        }}>\n        Open Alert Modal\n      </button>\n    </div>\n    <div>\n      <button\n        on:click={async () => {\n          try {\n            const data = await _askmodal.ask({ text: 'test' });\n            setTimeout(() => {\n              alert(`You typed: ${data.text}`);\n            }, 500);\n          } catch (e) {\n            setTimeout(() => {\n              alert(`You closed the ask modal without confirmation!`);\n            }, 500);\n          }\n        }}>\n        Open Ask Modal\n      </button>\n    </div>\n```\n\n## AskModal datastore\n\nAskModal's `ask` method expects an object as its first argment. This is the default data that will be stored in the `datastore` store.\n\nDeclaring `let:datastore` in the AskModal component will provide a way for its inner contents to communiate with the datastore. `datastore` is a svelte store, so you should use the `get` function exported from `svelte/store` in order to access the default values and the `set` function to edit its values. See example folder for detailed usage.\n\n## License\n\nMIT\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 5],
		[3603, 4],
		[3610, 4],
		[3631, 1],
		[3645, 1],
		[3652, 1],
		[3659, 1],
		[3666, 4],
		[3673, 3],
		[3680, 2],
		[3687, 3],
		[3694, 1],
		[3708, 4],
		[3729, 4],
		[3757, 2],
		[3771, 3],
		[3778, 4],
		[3785, 1],
		[3792, 3],
		[3799, 1],
		[3806, 3],
		[3827, 1],
		[3834, 4],
		[3848, 1],
		[3855, 3],
		[3862, 5],
		[3883, 3],
		[3890, 3],
		[3904, 1],
		[3911, 4],
		[3932, 1],
		[3960, 2],
		[3967, 2],
		[3981, 4],
		[3995, 3],
		[4016, 4],
		[4023, 1],
		[4030, 4],
		[4037, 8],
		[4044, 7],
		[4051, 1],
		[4058, 2],
		[4065, 1],
		[4093, 11],
		[4100, 4],
		[4107, 2],
		[4114, 5],
		[4121, 6],
		[4128, 4]
	],
	"esm": true,
	"cjs": false
}
