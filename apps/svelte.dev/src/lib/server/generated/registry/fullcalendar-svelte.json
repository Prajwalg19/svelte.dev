{
	"name": "fullcalendar-svelte",
	"description": "Integrate FullCalendar into Svelte apps with Svelte 5 support.",
	"repo_url": "",
	"authors": ["ntcbinh"],
	"downloads": 9,
	"updated": "2025-03-30T10:14:50.902Z",
	"tags": ["ui"],
	"typescript": true,
	"version": "0.0.1",
	"svelte_range": "^5.0.0",
	"kit_range": "^2.16.0",
	"last_rune_check_version": "0.0.1",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "fullcalendar-svelte",
				"version": "0.0.1",
				"size": 9456
			},
			{
				"name": "@fullcalendar/core",
				"version": "6.1.17",
				"size": 1869438
			},
			{
				"name": "preact",
				"version": "10.12.1",
				"size": 1185208
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2]
		],
		"circular": []
	},
	"readme": "# fullcalendar-svelte\n\n## A SvelteKit wrapper for [FullCalendar](https://fullcalendar.io)\n\n## Installation\n\nTo get started, install the required dependencies for FullCalendar and Svelte integration:\n\n```bash\nnpm install @fullcalendar/core\nnpm install --save-dev fullcalendar-svelte\n```\n\nInstall any additional plugins you need for your calendar:\n\n```bash\nnpm install @fullcalendar/daygrid\n```\n\n-   **Note:** At least one plugin providing a view is required for the calendar to function.\n\n## Usage\n\nHereâ€™s an example of how to use the `<FullCalendar>` component in a SvelteKit project:\n\n```html\n<script lang=\"ts\">\n  import FullCalendar from 'fullcalendar-svelte';\n  import dayGridPlugin from '@fullcalendar/daygrid';\n\n  let options = {\n    initialView: 'dayGridMonth',\n    plugins: [dayGridPlugin],\n  };\n</script>\n\n<FullCalendar {options} />\n```\n\n## Props and Events\n\nAll FullCalendar options, props, and events are passed through the `options` object. For example, you can define events and handle a `dateClick` event like this:\n\n```html\n<script>\n  let options = {\n    dateClick: (event) => alert('Date clicked: ' + event.dateStr),\n    events: [\n      { title: 'Event 1', date: '2025-03-30' },\n      { title: 'Event 2', date: '2025-03-31' },\n    ],\n    initialView: 'dayGridMonth',\n    plugins: [dayGridPlugin],\n  };\n</script>\n\n<FullCalendar {options} />\n```\n\n## Updating Options Dynamically\n\nYou can update the calendar options dynamically by reassigning the `options` object. For example, toggling the `weekends` option:\n\n```html\n<script>\n  import FullCalendar from 'fullcalendar-svelte';\n\n  let options = {\n    initialView: 'dayGridMonth',\n    plugins: [dayGridPlugin],\n    weekends: true,\n  };\n\n  function toggleWeekends() {\n    options = {\n      ...options,\n      weekends: !options.weekends,\n    };\n  }\n</script>\n\n<button on:click=\"{toggleWeekends}\">Toggle Weekends</button>\n<FullCalendar {options} />\n```\n\n## Accessing the Calendar API\n\nTo access the underlying FullCalendar API, bind the component to a reference and use the `getApi` method:\n\n```html\n<script>\n  let calendarRef;\n\n  function goToNextMonth() {\n    const calendarApi = calendarRef.getApi();\n    calendarApi.next();\n  }\n</script>\n\n<FullCalendar bind:this=\"{calendarRef}\" {options} />\n<button on:click=\"{goToNextMonth}\">Next Month</button>\n```\n\n## Using Premium Plugins\n\nTo use premium plugins like [FullCalendar Scheduler](https://fullcalendar.io/docs/premium), install the required plugin and include your license key:\n\n```html\n<script>\n  import FullCalendar from 'fullcalendar-svelte';\n\n  let options = {\n    plugins: [(await import('@fullcalendar/resource-timeline')).default],\n    schedulerLicenseKey: 'your-license-key', // Replace 'your-license-key' with a valid license key.\n  };\n</script>\n\n<FullCalendar {options} />\n```\n\n-   **Note:** A valid license key is required to use premium plugins. You can obtain a license key by purchasing a subscription from the [FullCalendar website](https://fullcalendar.io/pricing).\n",
	"legacy_svelte": true,
	"downloads_history": [
		[4121, 3],
		[4128, 3]
	]
}
