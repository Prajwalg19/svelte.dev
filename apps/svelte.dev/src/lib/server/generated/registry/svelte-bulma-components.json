{
	"name": "svelte-bulma-components",
	"description": "Bulma UI components for Svelte applications.",
	"repo_url": "https://github.com/elcobvg/svelte-bulma-components",
	"authors": ["elcobvg"],
	"homepage": "https://github.com/elcobvg/svelte-bulma-components#readme",
	"downloads": 24,
	"updated": "2018-08-20T04:37:19.244Z",
	"tags": ["design-system"],
	"github_stars": 94,
	"typescript": false,
	"version": "0.1.5",
	"svelte_range": "^2.9.1",
	"last_rune_check_version": "0.1.5",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-bulma-components",
				"version": "0.1.5",
				"size": 150638
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-bulma-components\nLibrary of UI components to be used in [Svelte.js](https://svelte.technology/) or standalone.\n\nA convenient way to implement [**interactive Bulma components**](https://bulma.io/documentation/components/).\n\n### Available components\n\n- Dropdown\n- Modal\n- ModalCard\n- Navbar\n- Pagination\n- Tabs\n\n**Demo at http://svelte-bulma-components.surge.sh/**\n\n\n### Install\n\n`npm install svelte-bulma-components`\n\n### Use\n\nImport the components you need in your Svelte project.\n\n```javascript\nimport {\n  Dropdown,\n  DropdownLink,\n  Modal\n} from 'svelte-bulma-components/module'\n\nexport default {\n  components: {\n    Dropdown,\n    DropdownLink,\n    Modal,\n\t...\n  }\n}\n```\nAnd then use them like so:\n\n```xml\n  <Dropdown label=\"Dropdown\">\n    <DropdownLink href=\"/\">A dropdown link</DropdownLink>\n    <DropdownLink href=\"/\" active>This link is active</DropdownLink>\n    <DropdownLink href=\"/\">Another link item</DropdownLink>\n  </Dropdown>\n```\n**Don't forget to include the Bulma and Font Awesome CSS files!**\n\nFor including styles, you can either place the below styles in the `<head>` of your template:\n\n```xml\n<link href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css\" rel=\"stylesheet\">\n<link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\">\n```\n\nOr you can import them to your webpack/rollup entry point:\n\n```javascript\nrequire('/path/to/node_modules/bulma/css/bulma.min.css')\nrequire('/path/to/node_modules/font-awesome/css/font-awesome.min.css')\n```\n\n**Note that you'll have to install** `bulma` **and** `font-awesome` **first**\n\n\n## Dropdown\n\nAn interactive **dropdown menu** for discoverable content.\n`DropdownLink` elements emit an onclick event with the value of the `href` attribute.\n\n#### Markup\n\n```xml\n<Dropdown label=\"Dropdown\">\n  <DropdownItem><h5>Dropdown Item</h5>Not clickable</DropdownItem>\n  <DropdownDivider />\n  <DropdownLink href=\"/\" on:click=\"logEvent(event)\">A dropdown link</DropdownLink>\n  <DropdownLink href=\"/\" active>This link is active</DropdownLink>\n  <DropdownLink href=\"/\">Another link item</DropdownLink>\n</Dropdown>\n```\n#### Options\n\n| Prop | Type | Default | Required | Description |\n|------|------|---------|----------|-------------|\n| label | String | '' | true | text of dropdown label\n| hoverable | Boolean | false | false | open menu on hover instead of click\n| up | Boolean | false | false | popup instead of down\n| right | Boolean | false | false | align right \n\n\n## Modal\n\nA classic **modal** overlay, in which you can include *any* content you want\n\n#### Markup\n\n```xml\n<Modal {active} on:close=\"set({ active: false })\">\n  <p>\n    ...\n  </p>\n</Modal>\n```\n\n## ModalCard\n\nA **modal card**, with a head, a body and a foot. This components emits an `onclose` event when closed with `success` or `cancel` as value.\n\n#### Markup\n\n```xml\n<ModalCard {active} color=\"link\" on:close=\"cardClosed(event)\">\n  <span slot=\"title\">Modal card title</span>\n  <span slot=\"content\">\n    ...\n  </span>\n  <span slot=\"success\">Save changes</span>\n  <span slot=\"cancel\">Cancel</span>            \n</ModalCard>\n```\n#### Options\n\n| Prop | Type | Default | Required | Description |\n|------|------|---------|----------|-------------|\n| color | String | success | false | color of the success button\n\n#### Slots\n\n| Slot | Default | Required | Description |\n|------|---------|----------|-------------|\n| title | - | true | title of the modal dialog\n| content | - | true | the content of the modal\n| success | Submit | false | label of the **success** button\n| cancel | Cancel | false | label of the **cancel** button\n\n\n## Navbar\n\nA responsive horizontal **navbar** that can support images, links, buttons, and dropdowns\n\n#### Markup\n\n```xml\n<Navbar>\n  <!-- navbar-brand -->\n  <span slot=\"brand\">\n    <NavbarItem href=\"#\">\n      <img src=\"/images/brand-logo.png\" alt=\"Logo\">\n    </NavbarItem>\n  </span>\n\n  <!-- navbar-start -->\n  <NavbarStart>\n    <NavbarItem href=\"#\">Documentation</NavbarItem>\n    <NavbarItem href=\"#\">Videos</NavbarItem>\n    <NavbarItem href=\"#\">...</NavbarItem>\n  </NavbarStart>\n\n  <!-- navbar-end -->\n  <NavbarEnd>\n    <NavbarItem>\n      <p class=\"control\">\n        <a class=\"button is-info\" href=\"#\">\n          <strong>Download</strong>\n        </a>\n      </p>\n    </NavbarItem>\n  </NavbarEnd>\n</Navbar>\n```\n#### Options\n\n| Prop | Type | Default | Required | Description |\n|------|------|---------|----------|-------------|\n| fixedTop | Boolean | false | false | fixes navbar to top of page\n| fixedBottom | Boolean | false | false | fixes navbar to bottom\n| color | String | - | false | background color of the navbar\n| transparent | Boolean | false | false | sets navbar transparency\n| noBodyClass | Boolean | false | false | do not add classes to `<body>` \n\n\n## Pagination\n\nA responsive, usable, and flexible **pagination** component.\n\nThe pagination component emits an `onchange` event with the <strong>selected page number</strong>.\n\n#### Markup\n\n```xml\n<Pagination current=\"10\" total=\"20\" show=\"5\" on:change=\"gotoPage(event)\" />\n```\n#### Options\n\n| Prop | Type | Default | Required | Description |\n|------|------|---------|----------|-------------|\n| current | Number | 1 | false | the currently active page number\n| total | Number | - | true | total number of pages\n| show | Number | 5 | false | how many page link buttons to show\n| transparent | Boolean | false | false | sets navbar transparency\n| align | String | - | false | align centered or right\n| rounded | Boolean | false | false | rounded buttons\n| size | String | - | false | sets size of pagination component\n| previous | String | Previous | false | set label text for previous button\n| next | String | Next page | false | set label text for next button\n\n\n## Tabs\n\nSimple responsive horizontal navigation **tabs**, with different styles.\n\nTab items emit an `onclick` event with the `#id` of the selected tab.\n\n#### Markup\n\n```xml\n<TabsContainer align=\"centered\" boxed>\n  <TabItem active label=\"Pictures\" icon=\"fa fa-image\" on:click=\"setTab(event)\" />\n  <TabItem label=\"Music\" on:click=\"setTab(event)\" />\n  <TabItem label=\"Videos\" on:click=\"setTab(event)\" />\n  <TabItem label=\"Documents\" on:click=\"setTab(event)\" />\n</TabsContainer>\n```\n#### Options\n\n| Prop | Type | Default | Required | Description |\n|------|------|---------|----------|-------------|\n| align | String | - | false | align centered or right\n| boxed | Boolean | false | false | classical, boxed tabs\n| size | String | - | false | sets size of pagination component\n| toggle | Boolean | false | false | toggle button like tabs\n| rounded | Boolean | false | false | rounded, can be used with `toggle`\n| fullWidth | Boolean | false | false | consume whole width available\n\n#### Slots\n\n| Slot | Default | Required | Description |\n|------|---------|----------|-------------|\n| default | - | true | set of `<TabItem>` tabs\n\n### Custom classes (new in 0.1.4)\n\nYou can now easily add custom classes to the components by adding a regular `class` attribute:\n\n```xml\n<Dropdown label=\"My dropdown\" class=\"my-custom-class\">\n```\n**NOTE:** because Svelte component CSS is scoped, you'll have to add the `global` modifier to your CSS selectors:\n\n```css\n:global(.my-custom-class) {\n  ...\n}\n```\n\n## Made with Svelte\nIt's made with [Svelte](https://svelte.technology/), which means you don't need any JS framework. Just use the file in the `dist` directory in any Javascript project.\n\n### See also\n\n- https://www.npmjs.com/package/svelte-bulma-forms Bulma form components for Svelte\n- https://www.npmjs.com/package/svelte-autocomplete a lightweight autocomplete component made with Svelte\n\n### Reference\n\n- https://bulma.io/documentation/components/\n- https://svelte.technology/guide\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 27],
		[3596, 31],
		[3603, 52],
		[3610, 35],
		[3617, 19],
		[3624, 7],
		[3631, 4],
		[3638, 4],
		[3645, 15],
		[3652, 12],
		[3659, 32],
		[3666, 34],
		[3673, 32],
		[3680, 14],
		[3687, 23],
		[3694, 25],
		[3701, 22],
		[3708, 30],
		[3715, 32],
		[3722, 25],
		[3729, 54],
		[3736, 25],
		[3743, 17],
		[3750, 14],
		[3757, 12],
		[3764, 41],
		[3771, 33],
		[3778, 17],
		[3785, 40],
		[3792, 17],
		[3799, 7],
		[3806, 6],
		[3813, 28],
		[3820, 33],
		[3827, 42],
		[3834, 51],
		[3841, 20],
		[3848, 32],
		[3855, 14],
		[3862, 59],
		[3869, 18],
		[3876, 19],
		[3883, 8],
		[3890, 16],
		[3897, 26],
		[3904, 42],
		[3911, 26],
		[3918, 12],
		[3925, 15],
		[3932, 8],
		[3939, 8],
		[3946, 13],
		[3953, 8],
		[3960, 15],
		[3967, 4],
		[3974, 12],
		[3981, 13],
		[3988, 5],
		[3995, 6],
		[4002, 2],
		[4016, 1],
		[4023, 5],
		[4030, 11],
		[4037, 14],
		[4044, 9],
		[4051, 3],
		[4058, 5],
		[4065, 2],
		[4072, 1],
		[4093, 14],
		[4100, 9],
		[4107, 4],
		[4114, 24],
		[4121, 18],
		[4128, 3]
	],
	"esm": false,
	"cjs": true
}
