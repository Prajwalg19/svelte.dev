{
	"name": "grig",
	"description": "Provide lightweight i18n library with smart TS prompts for Svelte.",
	"repo_url": "",
	"authors": ["leafnote"],
	"homepage": "https://github.com/leafio/grig",
	"downloads": 8,
	"updated": "2024-09-02T12:28:39.673Z",
	"tags": ["integration"],
	"typescript": true,
	"version": "0.2.3",
	"svelte_range": "*",
	"last_rune_check_version": "0.2.3",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "grig",
				"version": "0.2.3",
				"size": 39290
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "[English](#grig)|[中文](#grig-1)|[Demos](#demos)|[示例](#示例)\r\n\r\n\r\n## grig\r\n  a lightweight and easy-to-use i18n library, with TS **smart prompts**.\r\n Can be used in react、vue3、svelte、solid ...\r\n![截图](https://raw.githubusercontent.com/leafio/grig/main/snap.png \"snap.png\")\r\n\r\n\r\n<!-- ![截图](./snap.png \"snap.png\") -->\r\n\r\n- [Use as a formatter](#use-as-a-formatter)\r\n- [React](#react)\r\n- [Vue3](#vue3)\r\n- [Svelte](#svelte)\r\n- [Solid](#solid)\r\n- [General Instance Usage](#general-instance-usage)\r\n- [Demos](#demos)\r\n- [Installation](#installation)\r\n- [Support Me](#support-me)\r\n\r\n#### Use as a formatter\r\n\r\n```typescript\r\nimport { grig } from \"grig\";\r\nconst message = {\r\n    name: \"姓名\",\r\n    form: { status: \"状态\" },\r\n    welcome: \"欢迎来到{city}！\",\r\n    own: (count: number) => `我有${count}个苹果`,\r\n} as const;\r\nconst t = grig(message);\r\nconsole.log(t(\"name\")); // 姓名\r\nconsole.log(t(\"form.status\")); // 状态\r\nconsole.log(t(\"welcome\", { city: \"上海\" })); // 欢迎来到上海！\r\nconsole.log(t(\"own\", 2)); //我有2个苹果\r\n```\r\n\r\n#### React\r\n\r\n###### 1.Create a grig Instance\r\n\r\n```typescript\r\n//./lang/init\r\nimport { createGrigReact } from \"grig/react\";\r\nconst zh_global = { g_welcome: \"全局_欢迎\" } as const;\r\nconst en_global = { g_welcome: \"Global Welcome\" } as const;\r\nconst global_messages = { zh: zh_global, en: en_global };\r\nexport const { tMessages, useGrigContext, useMessages, GrigProvider,getLang } =\r\n    createGrigReact({ lang: \"zh\", fallbackLang: \"en\" }, global_messages);\r\n```\r\n\r\n###### 2.Use it anywhere\r\n\r\n```tsx\r\nimport { useState } from \"react\";\r\nimport { useMessages } from \"../lang/init\";\r\nexport function Content() {\r\n    const t = useMessages({\r\n        zh: { world: \"世界\" },\r\n        en: { world: \"World\" },\r\n    });\r\n    return (\r\n        <div className=\"content card\">\r\n            <div>child: Content.tsx</div>\r\n            <span>{t(\"g_welcome\")}</span>\r\n            <span>{t(\"world\")}</span>\r\n        </div>\r\n    );\r\n}\r\n```\r\n\r\n###### 3.Switch the lang\r\n\r\n```tsx\r\nimport { useGrigContext } from \"../lang/init\";\r\nexport default function SwitchLang() {\r\n    const { lang, setLang } = useGrigContext();\r\n    const t = tMessages({\r\n        zh: { lang: \"中文\" },\r\n        en: { lang: \"English\" },\r\n    });\r\n    return (\r\n        <div className=\"lang-switch card\">\r\n            <div>child: SwitchLang.tsx</div>\r\n            <button\r\n                onClick={() => {\r\n                    setLang(lang === \"en\" ? \"zh\" : \"en\");\r\n                }}\r\n            >\r\n                {lang} {t(\"lang\")}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n```\r\n\r\n###### 4.Refresh DOM by Wrap App with GrigProvider\r\n\r\n```tsx\r\nimport \"./app.css\";\r\nimport SwitchLang from \"./components/SwitchLang\";\r\nimport Content from \"./components/Content\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { GrigProvider } from \"./lang/init\";\r\n\r\nexport function App() {\r\n    return (\r\n        <GrigProvider>\r\n            <div className=\"app card\">\r\n                <div>app.tsx</div>\r\n                <SwitchLang />\r\n                <Content />\r\n            </div>\r\n        </GrigProvider>\r\n    );\r\n}\r\n```\r\n#### Vue3\r\n\r\n###### 1.Create a grig Instance\r\n\r\n```typescript\r\n//./lang/init\r\nimport { createGrigVue } from \"grig/vue\";\r\nconst zh_global = { g_welcome: \"全局_欢迎\" } as const;\r\nconst en_global = { g_welcome: \"Global Welcome\" } as const;\r\nconst global_messages = { zh: zh_global, en: en_global };\r\nexport const { tMessages, lang } = createGrigVue(\r\n    { lang: \"zh\", fallbackLang: \"en\" },\r\n    global_messages\r\n);\r\n```\r\n\r\n###### 2.Use it anywhere\r\n\r\n```vue\r\n<template>\r\n    <div className=\"content card\">\r\n        <div>child: Content.tsx</div>\r\n        <span>{{ t(\"g_welcome\") }}</span>\r\n        <span>{{ t(\"world\") }}</span>\r\n    </div>\r\n</template>\r\n<script setup lang=\"ts\">\r\n    import { tMessages } from \"../lang/init\";\r\n    const t = tMessages({\r\n        zh: { world: \"世界\" },\r\n        en: { world: \"World\" },\r\n    });\r\n</script>\r\n\r\n\r\n```\r\n\r\n###### 3.Switch the lang\r\n\r\n```vue\r\n<template>\r\n    <div class=\"lang-switch card\">\r\n        <div>child: langSwitch.vue</div>\r\n        <button @click=\"handleToggle\">{{ t(\"lang\") }} {{ lang }}</button>\r\n    </div>\r\n</template>\r\n<script setup lang=\"ts\">\r\nimport { lang, tMessages } from \"../lang\";\r\n\r\nconst handleToggle = () => {\r\n    if (lang.value == \"zh\") {\r\n        lang.value = \"en\";\r\n    } else {\r\n        lang.value = \"zh\";\r\n    }\r\n};\r\nconst t = tMessages({\r\n    zh: {\r\n        lang: \"中文\",\r\n    },\r\n    en: {\r\n        lang: \"English\",\r\n    },\r\n});\r\n</script>\r\n```\r\n#### Svelte\r\n\r\n###### 1.Create a grig Instance\r\n\r\n```typescript\r\n//./lang/init\r\nimport { createGrigSvelte } from \"grig/svelte\";\r\nconst zh_global = { g_welcome: \"全局_欢迎\" } as const;\r\nconst en_global = { g_welcome: \"Global Welcome\" } as const;\r\nconst global_messages = { zh: zh_global, en: en_global };\r\nexport const { tMessages, lang} = \r\ncreateGrigSvelte({ lang: \"zh\", fallbackLang: \"en\" }, global_messages);\r\n\r\n```\r\n\r\n###### 2.Use it anywhere\r\n\r\n```svelte\r\n\r\n<script  lang=\"ts\">\r\n    import { tMessages } from \"../lang/init\";\r\n    const t = tMessages({\r\n        zh: { world: \"世界\" },\r\n        en: { world: \"World\" },\r\n    });\r\n</script>\r\n  <div className=\"content card\">\r\n        <div>child: Content.tsx</div>\r\n        <span>{{ $t(\"g_welcome\") }}</span>\r\n        <span>{{ $t(\"world\") }}</span>\r\n    </div>\r\n\r\n```\r\n\r\n###### 3.Switch the lang\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n    import { tMessages, lang } from \"../lang/init\";\r\n    const t = tMessages({  zh: { lang: \"中文\", },\r\n     en: { lang: \"English\", },\r\n    });\r\n  </script>\r\n  \r\n  <div class=\"lang-switch card\">\r\n    <div>child: SwitchLang.svelte</div>\r\n    <button\r\n        on:click={() => {\r\n            lang.update(_lang=>(_lang=== \"en\" ? \"zh\" : \"en\"));\r\n        }}\r\n    >\r\n        {$lang} {$t(\"lang\")}\r\n    </button>\r\n</div>\r\n  \r\n</script>\r\n```\r\n\r\n#### Solid\r\n\r\n###### 1.Create a grig Instance\r\n\r\n```typescript\r\n//./lang/init\r\nimport { createGrigSolid } from \"grig/solid\";\r\nconst zh_global = { g_welcome: \"全局_欢迎\" } as const;\r\nconst en_global = { g_welcome: \"Global Welcome\" } as const;\r\nconst global_messages = { zh: zh_global, en: en_global };\r\nexport const { tMessages, lang,setLang } = createGrigSolid({ lang: \"zh\", fallbackLang: \"en\" }, global_messages);\r\n```\r\n\r\n###### 2.Use it anywhere\r\n\r\n```tsx\r\nimport { tMessages } from \"../lang/init\";\r\nexport function Content() {\r\n    const t = tMessages({\r\n        zh: { world: \"世界\" },\r\n        en: { world: \"World\" },\r\n    });\r\n    return (\r\n        <div className=\"content card\">\r\n            <div>child: Content.tsx</div>\r\n            <span>{t(\"g_welcome\")}</span>\r\n            <span>{t(\"world\")}</span>\r\n        </div>\r\n    );\r\n}\r\n```\r\n\r\n###### 3.Switch the lang\r\n\r\n```tsx\r\nimport { lang, setLang, tMessages } from \"../lang/init\";\r\n\r\nconst SwitchLang = () => {\r\n  const t = tMessages({\r\n    zh: {\r\n      lang: \"中文\",\r\n    },\r\n    en: {\r\n      lang: \"English\",\r\n    },\r\n  });\r\n  return (\r\n    <div class=\"lang-switch card\">\r\n      <div>child: SwitchLang.tsx</div>\r\n      <button\r\n        onClick={() => {\r\n          setLang(lang() === \"en\" ? \"zh\" : \"en\");\r\n        }}\r\n      >\r\n        {lang()} {t(\"lang\")}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\n```\r\n#### General Instance Usage\r\n\r\n###### 1.Create a grig Instance\r\n\r\n```typescript\r\n//./lang/init\r\nimport { createGrig } from \"grig\";\r\nconst zh_global = { g_welcome: \"全局_欢迎\" } as const;\r\nconst en_global = { g_welcome: \"Global Welcome\" } as const;\r\nconst global_messages = { zh: zh_global, en: en_global };\r\nexport const {\r\n    tMessages,\r\n    addLangChangeCallback,\r\n    removeLangChangeCallback,\r\n    getLang,\r\n    setLang,\r\n} = createGrig({ lang: \"zh\", fallbackLang: \"en\" }, global_messages);\r\n```\r\n\r\n###### 2.Use it anywhere\r\n\r\n```tsx\r\nimport { useState } from \"react\";\r\nimport { tMessages } from \"../lang/init\";\r\nexport function Content() {\r\n    const t = tMessages({\r\n        zh: { world: \"世界\" },\r\n        en: { world: \"World\" },\r\n    });\r\n    return (\r\n        <div className=\"content card\">\r\n            <div>child: Content.tsx</div>\r\n            <span>{t(\"g_welcome\")}</span>\r\n            <span>{t(\"world\")}</span>\r\n        </div>\r\n    );\r\n}\r\n```\r\n\r\n###### 3.Switch the lang\r\n\r\n```tsx\r\nimport { getLang, setLang, tMessages } from \"../lang/init\";\r\nexport default function SwitchLang() {\r\n    const t = tMessages({\r\n        zh: { lang: \"中文\" },\r\n        en: { lang: \"English\" },\r\n    });\r\n    return (\r\n        <div className=\"lang-switch card\">\r\n            <div>child: SwitchLang.tsx</div>\r\n            <button\r\n                onClick={() => {\r\n                    setLang(getLang() === \"en\" ? \"zh\" : \"en\");\r\n                }}\r\n            >\r\n                {getLang()} {t(\"lang\")}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n```\r\n\r\n###### 4.Refresh DOM by key\r\n\r\n```tsx\r\nimport \"./app.css\";\r\nimport SwitchLang from \"./components/SwitchLang\";\r\nimport Content from \"./components/Content\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n    addLangChangeCallback,\r\n    getLang,\r\n    removeLangChangeCallback,\r\n} from \"./lang/init\";\r\n\r\nexport function App() {\r\n    const [lang, setLang] = useState(getLang());\r\n    useEffect(() => {\r\n        addLangChangeCallback(\"langChange\", (_lang) => {\r\n            setLang(_lang);\r\n        });\r\n        return () => {\r\n            removeLangChangeCallback(\"langChange\");\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"app card\" key={lang}>\r\n                <div>app.tsx</div>\r\n                <SwitchLang />\r\n                <Content />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n```\r\n\r\n#### Demos\r\n\r\n```bash\r\nnpx degit https://github.com/leafio/grig/examples grig-examples\r\n```\r\n\r\n#### Installation\r\n\r\n```bash\r\nnpm install grig\r\n```\r\n### Support Me\r\n\r\nIf you like this library , you can give a **start** on github.\r\nEmail: leafnote@outlook.com\r\n\r\n> I'm looking for a frontend job in Shanghai , hope someone could find a offer for me.\r\n\r\n[English](#grig)|[中文](#grig-1)|[Demos](#demos)|[示例](#示例)\r\n\r\n## grig\r\n轻量易用的 i18n 库，含 TS 智能提示。 可在 react、vue3、svelte、solid等多种框架内使用。 \r\n![截图](https://raw.githubusercontent.com/leafio/grig/main/snap.png \"snap.png\")\r\n\r\n- [直接使用](#直接使用)\r\n- [React](#react-1)\r\n- [Vue3](#vue3-1)\r\n- [Svelte](#svelte-1)\r\n- [Solid](#solid-1)\r\n- [通用用法](#通用用法)\r\n- [示例](#示例)\r\n- [安装](#安装n)\r\n- [支持一下](#支持一下)\r\n\r\n#### 直接使用\r\n\r\n```typescript\r\nimport { grig } from \"grig\";\r\nconst message = {\r\n    name: \"姓名\",\r\n    form: { status: \"状态\" },\r\n    welcome: \"欢迎来到{city}！\",\r\n    own: (count: number) => `我有${count}个苹果`,\r\n} as const;\r\nconst t = grig(message);\r\nconsole.log(t(\"name\")); // 姓名\r\nconsole.log(t(\"form.status\")); // 状态\r\nconsole.log(t(\"welcome\", { city: \"上海\" })); // 欢迎来到上海！\r\nconsole.log(t(\"own\", 2)); //我有2个苹果\r\n```\r\n\r\n#### React\r\n\r\n###### 1.创建grig实例\r\n\r\n```typescript\r\n//./lang/init\r\nimport { createGrigReact } from \"grig/react\";\r\nconst zh_global = { g_welcome: \"全局_欢迎\" } as const;\r\nconst en_global = { g_welcome: \"Global Welcome\" } as const;\r\nconst global_messages = { zh: zh_global, en: en_global };\r\nexport const { tMessages, useGrigContext, useMessages, GrigProvider,getLang } =\r\n    createGrigReact({ lang: \"zh\", fallbackLang: \"en\" }, global_messages);\r\n```\r\n\r\n###### 2.在任意组件内使用\r\n\r\n```tsx\r\nimport { useState } from \"react\";\r\nimport { useMessages } from \"../lang/init\";\r\nexport function Content() {\r\n    const t = useMessages({\r\n        zh: { world: \"世界\" },\r\n        en: { world: \"World\" },\r\n    });\r\n    return (\r\n        <div className=\"content card\">\r\n            <div>child: Content.tsx</div>\r\n            <span>{t(\"g_welcome\")}</span>\r\n            <span>{t(\"world\")}</span>\r\n        </div>\r\n    );\r\n}\r\n```\r\n\r\n###### 3.切换语言\r\n\r\n```tsx\r\nimport { useGrigContext } from \"../lang/init\";\r\nexport default function SwitchLang() {\r\n    const { lang, setLang } = useGrigContext();\r\n    const t = tMessages({\r\n        zh: { lang: \"中文\" },\r\n        en: { lang: \"English\" },\r\n    });\r\n    return (\r\n        <div className=\"lang-switch card\">\r\n            <div>child: SwitchLang.tsx</div>\r\n            <button\r\n                onClick={() => {\r\n                    setLang(lang === \"en\" ? \"zh\" : \"en\");\r\n                }}\r\n            >\r\n                {lang} {t(\"lang\")}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n```\r\n\r\n###### 4.用GrigProvider包裹App刷新DOM\r\n\r\n```tsx\r\nimport \"./app.css\";\r\nimport SwitchLang from \"./components/SwitchLang\";\r\nimport Content from \"./components/Content\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { GrigProvider } from \"./lang/init\";\r\n\r\nexport function App() {\r\n    return (\r\n        <GrigProvider>\r\n            <div className=\"app card\">\r\n                <div>app.tsx</div>\r\n                <SwitchLang />\r\n                <Content />\r\n            </div>\r\n        </GrigProvider>\r\n    );\r\n}\r\n```\r\n#### Vue3\r\n\r\n###### 1.创建grig实例\r\n\r\n```typescript\r\n//./lang/init\r\nimport { createGrigVue } from \"grig/vue\";\r\nconst zh_global = { g_welcome: \"全局_欢迎\" } as const;\r\nconst en_global = { g_welcome: \"Global Welcome\" } as const;\r\nconst global_messages = { zh: zh_global, en: en_global };\r\nexport const { tMessages, lang } = createGrigVue(\r\n    { lang: \"zh\", fallbackLang: \"en\" },\r\n    global_messages\r\n);\r\n```\r\n\r\n###### 2.在任意组件内使用\r\n\r\n```vue\r\n<template>\r\n    <div className=\"content card\">\r\n        <div>child: Content.tsx</div>\r\n        <span>{{ t(\"g_welcome\") }}</span>\r\n        <span>{{ t(\"world\") }}</span>\r\n    </div>\r\n</template>\r\n<script setup lang=\"ts\">\r\n    import { tMessages } from \"../lang/init\";\r\n    const t = tMessages({\r\n        zh: { world: \"世界\" },\r\n        en: { world: \"World\" },\r\n    });\r\n</script>\r\n\r\n\r\n```\r\n\r\n###### 3.切换语言\r\n\r\n```vue\r\n<template>\r\n    <div class=\"lang-switch card\">\r\n        <div>child: langSwitch.vue</div>\r\n        <button @click=\"handleToggle\">{{ t(\"lang\") }} {{ lang }}</button>\r\n    </div>\r\n</template>\r\n<script setup lang=\"ts\">\r\nimport { lang, tMessages } from \"../lang\";\r\n\r\nconst handleToggle = () => {\r\n    if (lang.value == \"zh\") {\r\n        lang.value = \"en\";\r\n    } else {\r\n        lang.value = \"zh\";\r\n    }\r\n};\r\nconst t = tMessages({\r\n    zh: {\r\n        lang: \"中文\",\r\n    },\r\n    en: {\r\n        lang: \"English\",\r\n    },\r\n});\r\n</script>\r\n```\r\n#### Svelte\r\n\r\n###### 1.创建grig实例\r\n\r\n```typescript\r\n//./lang/init\r\nimport { createGrigSvelte } from \"grig/svelte\";\r\nconst zh_global = { g_welcome: \"全局_欢迎\" } as const;\r\nconst en_global = { g_welcome: \"Global Welcome\" } as const;\r\nconst global_messages = { zh: zh_global, en: en_global };\r\nexport const { tMessages, lang} = \r\ncreateGrigSvelte({ lang: \"zh\", fallbackLang: \"en\" }, global_messages);\r\n\r\n```\r\n\r\n###### 2.在任意组件内使用\r\n\r\n```svelte\r\n\r\n<script  lang=\"ts\">\r\n    import { tMessages } from \"../lang/init\";\r\n    const t = tMessages({\r\n        zh: { world: \"世界\" },\r\n        en: { world: \"World\" },\r\n    });\r\n</script>\r\n  <div className=\"content card\">\r\n        <div>child: Content.tsx</div>\r\n        <span>{{ $t(\"g_welcome\") }}</span>\r\n        <span>{{ $t(\"world\") }}</span>\r\n    </div>\r\n\r\n```\r\n\r\n###### 3.切换语言\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n    import { tMessages, lang } from \"../lang/init\";\r\n    const t = tMessages({  zh: { lang: \"中文\", },\r\n     en: { lang: \"English\", },\r\n    });\r\n  </script>\r\n  \r\n  <div class=\"lang-switch card\">\r\n    <div>child: SwitchLang.svelte</div>\r\n    <button\r\n        on:click={() => {\r\n            lang.update(_lang=>(_lang=== \"en\" ? \"zh\" : \"en\"));\r\n        }}\r\n    >\r\n        {$lang} {$t(\"lang\")}\r\n    </button>\r\n</div>\r\n  \r\n</script>\r\n```\r\n\r\n#### Solid\r\n\r\n###### 1.创建grig实例\r\n\r\n```typescript\r\n//./lang/init\r\nimport { createGrigSolid } from \"grig/solid\";\r\nconst zh_global = { g_welcome: \"全局_欢迎\" } as const;\r\nconst en_global = { g_welcome: \"Global Welcome\" } as const;\r\nconst global_messages = { zh: zh_global, en: en_global };\r\nexport const { tMessages, lang,setLang } = createGrigSolid({ lang: \"zh\", fallbackLang: \"en\" }, global_messages);\r\n```\r\n\r\n###### 2.在任意组件内使用\r\n\r\n```tsx\r\nimport { tMessages } from \"../lang/init\";\r\nexport function Content() {\r\n    const t = tMessages({\r\n        zh: { world: \"世界\" },\r\n        en: { world: \"World\" },\r\n    });\r\n    return (\r\n        <div className=\"content card\">\r\n            <div>child: Content.tsx</div>\r\n            <span>{t(\"g_welcome\")}</span>\r\n            <span>{t(\"world\")}</span>\r\n        </div>\r\n    );\r\n}\r\n```\r\n\r\n###### 3.切换语言\r\n\r\n```tsx\r\nimport { lang, setLang, tMessages } from \"../lang/init\";\r\n\r\nconst SwitchLang = () => {\r\n  const t = tMessages({\r\n    zh: {\r\n      lang: \"中文\",\r\n    },\r\n    en: {\r\n      lang: \"English\",\r\n    },\r\n  });\r\n  return (\r\n    <div class=\"lang-switch card\">\r\n      <div>child: SwitchLang.tsx</div>\r\n      <button\r\n        onClick={() => {\r\n          setLang(lang() === \"en\" ? \"zh\" : \"en\");\r\n        }}\r\n      >\r\n        {lang()} {t(\"lang\")}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\n```\r\n#### 通用用法\r\n\r\n###### 1.创建实例\r\n\r\n```typescript\r\n//./lang/init\r\nimport { createGrig } from \"grig\";\r\nconst zh_global = { g_welcome: \"全局_欢迎\" } as const;\r\nconst en_global = { g_welcome: \"Global Welcome\" } as const;\r\nconst global_messages = { zh: zh_global, en: en_global };\r\nexport const {\r\n    tMessages,\r\n    addLangChangeCallback,\r\n    removeLangChangeCallback,\r\n    getLang,\r\n    setLang,\r\n} = createGrig({ lang: \"zh\", fallbackLang: \"en\" }, global_messages);\r\n```\r\n\r\n###### 2.在任意组件内使用\r\n\r\n```tsx\r\nimport { useState } from \"react\";\r\nimport { tMessages } from \"../lang/init\";\r\nexport function Content() {\r\n    const t = tMessages({\r\n        zh: { world: \"世界\" },\r\n        en: { world: \"World\" },\r\n    });\r\n    return (\r\n        <div className=\"content card\">\r\n            <div>child: Content.tsx</div>\r\n            <span>{t(\"g_welcome\")}</span>\r\n            <span>{t(\"world\")}</span>\r\n        </div>\r\n    );\r\n}\r\n```\r\n\r\n###### 3.切换语言\r\n\r\n```tsx\r\nimport { getLang, setLang, tMessages } from \"../lang/init\";\r\nexport default function SwitchLang() {\r\n    const t = tMessages({\r\n        zh: { lang: \"中文\" },\r\n        en: { lang: \"English\" },\r\n    });\r\n    return (\r\n        <div className=\"lang-switch card\">\r\n            <div>child: SwitchLang.tsx</div>\r\n            <button\r\n                onClick={() => {\r\n                    setLang(getLang() === \"en\" ? \"zh\" : \"en\");\r\n                }}\r\n            >\r\n                {getLang()} {t(\"lang\")}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n```\r\n\r\n###### 4.通过key刷新DOM\r\n\r\n```tsx\r\nimport \"./app.css\";\r\nimport SwitchLang from \"./components/SwitchLang\";\r\nimport Content from \"./components/Content\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n    addLangChangeCallback,\r\n    getLang,\r\n    removeLangChangeCallback,\r\n} from \"./lang/init\";\r\n\r\nexport function App() {\r\n    const [lang, setLang] = useState(getLang());\r\n    useEffect(() => {\r\n        addLangChangeCallback(\"langChange\", (_lang) => {\r\n            setLang(_lang);\r\n        });\r\n        return () => {\r\n            removeLangChangeCallback(\"langChange\");\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div className=\"app card\" key={lang}>\r\n                <div>app.tsx</div>\r\n                <SwitchLang />\r\n                <Content />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n```\r\n\r\n#### 示例\r\n\r\n```bash\r\nnpx degit https://github.com/leafio/grig/examples grig-examples\r\n```\r\n\r\n#### 安装\r\n\r\n```bash\r\nnpm install grig\r\n```\r\n\r\n### 支持一下\r\n\r\n喜欢grig的话 , 在github上给个 **star** 吧.\r\nEmail: leafnote@outlook.com\r\n\r\n> 我目前在找前端的工作，位置上海。有岗位机会的话，可以联系我。",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 2],
		[3596, 6],
		[3603, 2],
		[3617, 2],
		[3624, 76],
		[3631, 9],
		[3645, 4],
		[3652, 6],
		[3666, 7],
		[3673, 141],
		[3680, 6],
		[3687, 1],
		[3694, 4],
		[3701, 5],
		[3708, 6],
		[3715, 58],
		[3722, 62],
		[3729, 3],
		[3736, 6],
		[3743, 4],
		[3750, 6],
		[3757, 3],
		[3771, 4],
		[3778, 6],
		[3792, 56],
		[3799, 73],
		[3806, 6],
		[3813, 3],
		[3820, 3],
		[3827, 2],
		[3834, 23],
		[3841, 15],
		[3848, 3],
		[3855, 1],
		[3862, 8],
		[3869, 1],
		[3876, 2],
		[3883, 1],
		[3890, 9],
		[3897, 61],
		[3904, 20],
		[3911, 4],
		[3918, 3],
		[3925, 1],
		[3932, 1],
		[3939, 2],
		[3946, 4],
		[3960, 4],
		[3967, 1],
		[3981, 1],
		[3995, 3],
		[4009, 1],
		[4016, 3],
		[4023, 17],
		[4037, 6],
		[4044, 15],
		[4051, 2],
		[4058, 1],
		[4065, 1],
		[4079, 1],
		[4093, 9],
		[4107, 20],
		[4114, 8],
		[4121, 14],
		[4128, 15]
	],
	"esm": true,
	"cjs": true
}
