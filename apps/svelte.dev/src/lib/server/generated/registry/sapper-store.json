{
	"name": "sapper-store",
	"description": "Manage Svelte state using actions and mutations.",
	"repo_url": "https://github.com/elcobvg/sapper-store",
	"authors": ["elcobvg"],
	"homepage": "https://github.com/elcobvg/sapper-store#readme",
	"downloads": 11,
	"updated": "2018-07-29T01:27:54.085Z",
	"tags": ["miscellaneous"],
	"github_stars": 5,
	"typescript": false,
	"version": "0.0.5",
	"svelte_range": "^2.9.7",
	"last_rune_check_version": "0.0.5",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "sapper-store",
				"version": "0.0.5",
				"size": 27501
			},
			{
				"name": "svelte",
				"version": "2.16.1",
				"size": 981534
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# sapper-store\n\nSapper / Svelte state management using the well-known **actions & mutations pattern**\n\n* works on client- and server side\n* can handle asynchronous actions\n* emits `stateChange` event which your app can hook into\n* warns when trying to change state directly\n* persists state in `localStorage`\n\n#### [Try the demo](https://todo-oxllhqmwbb.now.sh)\n\n## Install\n\n`npm install sapper-store`\n\n## Usage\n\nImport the store in your Sapper (or) Svelte project like this:\n\nAdd a `/store` directory with the following files\n\n````\n/store\n - actions.js\n - getters.js\n - index.js\n - mutations.js\n - state.js\n````\n#### actions.js\n\nActions receive a `context` (store) and a `payload` param. Every **action** should **commit** the state change:\n\n````javascript\nexport default {\n  addItem(context, payload) {\n    context.commit('ADD_ITEM', payload);\n  },\n  clearItem(context, payload) {\n    context.commit('CLEAR_ITEM', payload);\n  }\n};\n````\nActions may be asynchronous.\n\n#### mutations.js\n\nMutations should basically do no more than update the store state with the given payload:\n\n````javascript\nexport default {\n  ADD_ITEM (state, payload) {\n    state.items.push(payload);\n    return state;\n  },\n  CLEAR_ITEM (state, payload) {\n    state.items.splice(payload.index, 1);\n    return state;\n  }\n};\n````\n#### state.js\n\nThe store can be given initial state data in the form of a plain object literal, like this:\n\n````javascript\nexport default {\n  items: [\n    'I made this',\n    'Another thing'\n  ]\n};\n````\n#### getters.js\n\nOptional getters can be added to the store in the following format:\n\n````javascript\nexport default {\n  item (index = 0) {\n    const { items } = this.get();\n    return items[index];\n  },\n  itemCount () {\n    // 'Old' Svelte syntax is supported:\n    return this.get('items').length;  \t\n  }\n};\n````\nCall them in your app like this: `this.store.get('item', 1)`\n\n\n#### index.js\n\nThis file ties all the parts together into a new `Store` object to use in your app: \n\n````javascript\nimport Store from 'sapper-store';\nimport actions from './actions.js';\nimport mutations from './mutations.js';\nimport getters from './getters.js';\nimport state from './state.js';\n\nconst key = 'my-store-key';\n\nexport default new Store({\n  actions,\n  mutations,\n  getters,\n  state,\n  key\n});\n````\n\nAnd then use it like so:\n\n#### app/server.js\n\n````javascript\nimport sirv from 'sirv';\nimport polka from 'polka';\nimport sapper from 'sapper';\nimport compression from 'compression';\nimport { manifest } from './manifest/server.js';\nimport store from '../store';\n\npolka() \n  .use(\n    compression({ threshold: 0 }),\n    sirv('assets'),\n    sapper({ \n      store: request => store,\n      manifest\n    })\n  )\n  .listen(process.env.PORT)\n  .catch(err => {\n    console.log('error', err);\n  })\n````\n\n#### app/client.js\n\nOn the client side, call the `init` method with the server side **data**:\n\n````javascript\nimport { init } from 'sapper/runtime.js';\nimport { manifest } from './manifest/client.js';\nimport store from '../store';\n\ninit({\n  target: document.querySelector('#sapper'),\n  store: data => store.init(data),\n  manifest\n});\n````\n\nIf you do not need/want to use the server side state, just omit the `init(data)` call and the Store will be give the default state from `state.js`\n\n#### Use in components\n\nNow, in your app you can **dispatch actions** and/or **commit mutations** like this: \n\n````javascript\nthis.store.dispatch('addItem', value);\n\nthis.store.commit('CLEAR_ITEM', index);\n````\n\n--\n### Credits\n\nThis package was inspired by https://css-tricks.com/build-a-state-management-system-with-vanilla-javascript/\n\n**See also**\n\n* https://sapper.svelte.technology/guide#state-management\n* https://svelte.technology/guide#state-management\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 6],
		[3603, 2],
		[3610, 7],
		[3617, 3],
		[3624, 3],
		[3631, 1],
		[3645, 8],
		[3659, 1],
		[3666, 5],
		[3673, 1],
		[3680, 1],
		[3701, 1],
		[3708, 6],
		[3729, 5],
		[3743, 1],
		[3757, 1],
		[3771, 7],
		[3778, 1],
		[3785, 1],
		[3792, 2],
		[3799, 1],
		[3806, 2],
		[3820, 5],
		[3827, 1],
		[3834, 1],
		[3841, 1],
		[3855, 1],
		[3862, 25],
		[3883, 1],
		[3890, 5],
		[3904, 2],
		[3911, 1],
		[3918, 1],
		[3932, 2],
		[3946, 3],
		[3960, 1],
		[3967, 1],
		[3981, 1],
		[3988, 5],
		[3995, 2],
		[4002, 3],
		[4009, 2],
		[4016, 3],
		[4023, 1],
		[4030, 8],
		[4037, 13],
		[4044, 8],
		[4051, 3],
		[4058, 4],
		[4065, 1],
		[4079, 5],
		[4093, 9],
		[4100, 7],
		[4107, 5],
		[4114, 11],
		[4121, 4],
		[4128, 4]
	]
}
