{
	"name": "markdoc-svelte",
	"description": "Preprocesses Markdoc files for use in SvelteKit sites.",
	"repo_url": "https://github.com/CollierCZ/markdoc-svelte",
	"authors": ["colliercz"],
	"homepage": "https://github.com/CollierCZ/markdoc-svelte#readme",
	"downloads": 8,
	"updated": "2025-01-14T21:26:29.968Z",
	"tags": ["content"],
	"github_stars": 13,
	"typescript": true,
	"version": "2.0.1",
	"svelte_range": "4.x || 5.x",
	"last_rune_check_version": "2.0.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "markdoc-svelte",
				"version": "2.0.1",
				"size": 40898
			},
			{
				"name": "@markdoc/markdoc",
				"version": "0.4.0",
				"size": 1904124
			},
			{
				"name": "js-yaml",
				"version": "4.1.0",
				"size": 404738
			},
			{
				"name": "argparse",
				"version": "2.0.1",
				"size": 171548
			},
			{
				"name": "markdown-it",
				"version": "14.1.0",
				"size": 767399
			},
			{
				"name": "entities",
				"version": "4.5.0",
				"size": 412892
			},
			{
				"name": "linkify-it",
				"version": "5.0.0",
				"size": 55391
			},
			{
				"name": "uc.micro",
				"version": "2.1.0",
				"size": 13257
			},
			{
				"name": "mdurl",
				"version": "2.0.0",
				"size": 37524
			},
			{
				"name": "punycode.js",
				"version": "2.3.1",
				"size": 33517
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2],
			[2, 3],
			[0, 4],
			[4, 3],
			[4, 5],
			[4, 6],
			[6, 7],
			[4, 8],
			[4, 9],
			[4, 7]
		],
		"circular": []
	},
	"readme": "# markdoc-svelte\n\nPreprocess [Markdoc](https://markdoc.io/) files for use in Svelte Kit sites.\n\n## Use\n\nAdd the `.md` extension and the `markdoc` preprocessor to your Svelte Kit configuration:\n\n```javascript\nimport { markdoc } from \"markdoc-svelte\";\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n  extensions: [\".svelte\", \".md\"],\n  preprocess: [markdoc()],\n};\n```\n\n## Add custom schema\n\nMarkdoc allows you to configure various options for parsing:\n\n- [Functions](https://markdoc.dev/docs/functions)\n- [Nodes](https://markdoc.dev/docs/nodes)\n- [Partials](https://markdoc.dev/docs/partials)\n- [Tags](https://markdoc.dev/docs/tags)\n- [Variables](https://markdoc.dev/docs/variables)\n\nTo include these options in your preprocessing, pass them in the configuration.\nYou can do this in two ways:\n\n- Pass each individually as an option.\n- Create a schema directory to include files that define each option for you.\n  Include that directory in the [markdown-svelte configuration](#schema-path).\n\nIn each case, imports happen before bundling, so import files as relative paths to JavaScript files with the extension.\nUse JavaScript files or run Node.js with a tool such as [tsx](https://tsx.is/) to use TypeScript.\n\n### Functions\n\nUse Markdoc [functions](https://markdoc.dev/docs/functions) to transform content.\nInclude them as a file or directory in your [Markdoc schema directory](#schema-path)\nor in the markdoc-svelte configuration.\n\n```javascript\nimport { markdoc } from \"markdoc-svelte\";\n\nconst uppercase = {\n  transform(parameters) {\n    const string = parameters[0];\n\n    return typeof string === \"string\" ? string.toUpperCase() : string;\n  },\n};\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n  preprocess: [\n    markdoc({\n      functions: { uppercase },\n    }),\n  ],\n};\n```\n\n### Nodes\n\nUse Markdoc [nodes](https://markdoc.dev/docs/nodes) to customize how standard Markdown elements are rendered.\nInclude them as a file or directory in your [Markdoc schema directory](#schema-path)\nor in the markdoc-svelte configuration.\n\nImports happen before bundling, so import files as relative paths to JavaScript files with the extension.\n\n```javascript\nimport { markdoc } from \"markdoc-svelte\";\nimport { link } from \"./markdown/link.js\";\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n  preprocess: [\n    markdoc({\n      nodes: { link },\n    }),\n  ],\n};\n```\n\n### Partials\n\nUse Markdoc [partials](https://markdoc.dev/docs/partials) to reuse blocks of content in various places.\nInclude them in a directory in your [Markdoc schema directory](#schema-path)\nor define a partials directory as a relative path in the markdoc-svelte configuration.\n\n```javascript\nimport { markdoc } from \"markdoc-svelte\";\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n  preprocess: [\n    markdoc({\n      partials: \"./markdoc/partials\",\n    }),\n  ],\n};\n```\n\n### Tags\n\nUse Markdoc [tags](https://markdoc.dev/docs/tags) to extend Markdown elements to do more.\nInclude them as a file or directory in your [Markdoc schema directory](#schema-path)\nor in the markdoc-svelte configuration.\n\nImports happen before bundling, so import files as relative paths to JavaScript files with the extension.\n\n```javascript\nimport { markdoc } from \"markdoc-svelte\";\nimport { button } from \"./markdown/button.js\";\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n  preprocess: [\n    markdoc({\n      nodes: { button },\n    }),\n  ],\n};\n```\n\n### Variables\n\nUse Markdoc [variables](https://markdoc.dev/docs/variables) to customize content during the build.\nInclude them as a file in your [Markdoc schema directory](#schema-path)\nor in the markdoc-svelte configuration.\n\n```javascript\nimport { markdoc } from \"markdoc-svelte\";\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n  preprocess: [\n    markdoc({\n      variables: { flags: { best_feature_flag: true } },\n    }),\n  ],\n};\n```\n\n## Code blocks\n\nMarkdoc tags are processed as the first thing.\nThis allows you to do things like use Markdoc variables inside code blocks.\nBut sometimes you want to include text like `{% %}` inside a code block.\n\nTo mark a single code block to not be processed for tags,\nadd a attribute to the block:\n\n````markdown\n```markdown {% process = false %}\nUse variables in your code: `{% product_name %}`\n```\n````\n\nTo set this as the default option, create a custom `fence` node and set a different default\n([example](https://github.com/markdoc/markdoc/issues/503#issuecomment-2079771178)).\n\n## Frontmatter\n\nFrontmatter added as YAML is automatically parsed.\nSo you could add frontmatter like the following:\n\n```markdown\n---\ntitle: A great page\n---\n\nWith great content\n```\n\nYou can then access it in your layouts:\n\n```svelte\n<script lang=\"ts\">\n  let {\n    children,\n    title = '',\n  } = $props()\n</script>\n\n<h1>{ title }</h1>\n\n<!-- Article content -->\n{@render children?.()}\n```\n\nAnd in your content:\n\n```markdown\n---\ntitle: Using the Next.js plugin\ndescription: Integrate Markdoc into your Next.js app\n---\n\n# {% $frontmatter.title %}\n```\n\n## Options\n\nYou can choose to customize how Markdoc files are processed.\n\n| Option            | Type             | Default              | Description                           |\n| ----------------- | ---------------- | -------------------- | ------------------------------------- |\n| `comments`        | boolean          | `true`               | [Comments](#comments)                 |\n| `extensions`      | array of strings | `[\".mdoc\",\".md\"]` | [Extensions](#extensions)             |\n| `functions`       | functions object |                      | [Functions](#functions)               |\n| `layout`          | path             |                      | [Layout](#layout)                     |\n| `nodes`           | nodes object     |                      | [Nodes](#nodes)                       |\n| `partials`        | partials object  |                      | [Partials](#partials)                 |\n| `schema`          | path             |                      | [Schema path](#schema-path)           |\n| `tags`            | tags object      |                      | [Tags](#tags)                         |\n| `typographer`     | boolean          | `false`              | [Typographer](#typographer)           |\n| `validationLevel` | string           | `info`               | [Validation level](#validation-level) |\n| `variables`       | variables object |                      | [Variables](#variables)               |\n\n### Comments\n\nWhether to allow [Markdown comment syntax](https://spec.commonmark.org/0.30/#example-624)\nto hide comments from the rendered output.\nOn by default as this will be the default in Markdoc.\n\nTo turn this off, set the option to `false`:\n\n```javascript\nimport { markdoc } from \"markdoc-svelte\";\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n  extensions: [\".mdoc\", \".md\"],\n  preprocess: [\n    markdoc({\n      comments: false,\n    }),\n  ],\n};\n```\n\n### Validation level\n\nThis preprocessor validates whether the Markdoc is valid.\nBy default, it throws an error on files for errors at the `error` or `critical` level.\nTo debug, you can set the level to a lower level and it stops the build for any errors at that level or above.\nPossible values in ascending order: `debug`, `info`, `warning`, `error`, `critical`\n\n```javascript\nimport { markdoc } from \"markdoc-svelte\";\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n  extensions: [\".mdoc\", \".md\"],\n  preprocess: [\n    markdoc({\n      validationLevel: \"info\",\n    }),\n  ],\n};\n```\n\n### Typographer\n\nChoose whether to turn on typographic replacements from [markdown-it](https://github.com/markdown-it/markdown-it).\nSee the options in action at the [markdown-it demo](https://markdown-it.github.io/)\n(select or deselect `typographer`).\nDefaults to false.\n\n### Extensions\n\nBy default, files ending in `.mdoc` and `.md` are preprocessed.\nTo use other extensions, add them to the `extensions` array in the options:\n\n```javascript\nimport { markdoc } from \"markdoc-svelte\";\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n  extensions: [\".svelte\", \".mdoc\", \".md\"],\n  preprocess: [\n    markdoc({\n      extensions: [\".svelte\", \".mdoc\", \".md\"],\n    }),\n  ],\n};\n```\n\n### Layout\n\nTo give your processed Markdoc a layout, pass the path to the layout file:\n\n```javascript\nimport { markdoc } from \"markdoc-svelte\";\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n  extensions: [\".svelte\", \".md\"],\n  preprocess: [\n    markdoc({\n      layout: \"/path/to/layout.svelte\",\n    }),\n  ],\n};\n```\n\n[Frontmatter](#frontmatter) in YAML format is automatically passed to your layout as props.\nThe content is passed as children that can then be rendered.\n\n```svelte\n<script lang=\"ts\">\n  let {\n    children,\n    title = '',\n  } = $props()\n</script>\n\n<h1>{ title }</h1>\n\n<!-- Article content -->\n{@render children?.()}\n```\n\n### Schema path\n\nTo define Markdoc options, you can use a directory that holds multiple options.\nYou can define each option as a single file or a directory with an `index.js` file that exports the option.\nExcept for partials, which is a directory holding Markdoc files.\n\nExample structure:\n\n```tree\nmarkdoc\n├── functions.js\n├── nodes\n│   ├── heading.js\n│   ├── index.js\n│   └── callout.js\n├── partials\n│   ├── content.mdoc\n│   └── more-content.mdoc\n├── tags.js\n└── variables.js\n```\n\nBy default, the preprocessor looks for your Markdoc schema definition in a `./markdoc` directory at the app root.\nTo use a different path, define the directory in the options as a relative path.\n\n```javascript\nimport { markdoc } from \"markdoc-svelte\";\n\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n  preprocess: [\n    markdoc({\n      schema: \"./path/to/schema/directory\",\n    }),\n  ],\n};\n```\n\n### Markdoc config options\n\nIn addition to the option to include Markdoc configuration as a single directory,\nyou can pass each option individually:\n\n- [Functions](#functions)\n- [Nodes](#nodes)\n- [Partials](#partials)\n- [Tags](#tags)\n- [Variables](#variables)\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 1],
		[3596, 12],
		[3610, 3],
		[3617, 2],
		[3631, 1],
		[3638, 1],
		[3645, 1],
		[3659, 1],
		[3666, 7],
		[3673, 1],
		[3680, 3],
		[3687, 1],
		[3715, 2],
		[3736, 7],
		[3743, 1],
		[3750, 2],
		[3764, 1],
		[3771, 1],
		[3778, 1],
		[3785, 1],
		[3792, 1],
		[3799, 1],
		[3806, 1],
		[3813, 2],
		[3827, 3],
		[3834, 18],
		[3841, 11],
		[3855, 15],
		[3862, 1],
		[3883, 2],
		[3890, 6],
		[3911, 2],
		[3918, 5],
		[3939, 1],
		[3960, 4],
		[3988, 4],
		[4002, 2],
		[4009, 5],
		[4016, 221],
		[4023, 178],
		[4030, 142],
		[4037, 11],
		[4044, 30],
		[4051, 14],
		[4058, 6],
		[4065, 7],
		[4072, 4],
		[4079, 5],
		[4086, 8],
		[4093, 9],
		[4100, 21],
		[4107, 2],
		[4114, 8],
		[4121, 10],
		[4128, 15]
	]
}
