{
	"name": "happy-svelte-scrollbar",
	"description": "Create custom scrollbar components for Svelte applications.",
	"repo_url": "https://github.com/happy-inc-tech/happy-svelte-scrollbar",
	"authors": ["happy-inc"],
	"homepage": "https://github.com/happy-inc-tech/happy-svelte-scrollbar#readme",
	"downloads": 6,
	"updated": "2020-12-15T13:24:34.841Z",
	"tags": ["ui"],
	"github_stars": 6,
	"typescript": false,
	"version": "1.1.0",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "1.1.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "happy-svelte-scrollbar",
				"version": "1.1.0",
				"size": 96137
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# happy-svelte-scrollbar\n\nCustom scrollbar component for Svelte\n\n\n![](.gh/demo.gif)\n\n* Cross-browser (tested on Chrome/Opera/FF; Safari and iOS Safari; IE 10+);\n* lightweight and easy-to-use; \n* highly customizable.\n\n### How to use? \n\nImport component inside yours component: \n```javascript\nimport Scrollbar from 'happy-svelte-scrollbar';\n```\nNear your scrollable area place a component and pass two props:\n\n```sveltehtml\n<div class=\"my-scroller\" bind:this={ iAmScrollArea }>\n    <div class=\"dynamic-content\" bind:this={ iChangeMyHeight }>...</div>\n</div>\n<Scrollbar \n    observerTarget={ iChangeMyHeight } \n    scrollArea={ iAmScrollArea }\n    showArrows={ true }\n    buttonPressingMove={ 10 }\n/>\n```\n\nFor UX reasons component watches on height changes from `dynamic-content` element, so you should \npass it as a prop to Scrollbar component. `my-scroller` element is also required, because Scrollbar\nshould apply scroll action on something. \n\n`observerTarget` and `scrollArea` can be both HTML-elements and Svelte components. If they are Svelte components, \nyou should add these methods inside each of them:\n```javascript\n// observerTarget\nexport function happyObserverTarget() {\n    return divNode; // bind it with bind:this in your markup\n}\n\n// scrollArea\nexport function happyScrollArea() {\n    return divNode; // bind it with bind:this in your markup\n}\n```\n\nUp and down arrows are available from version v1.1.0. \nUse the `showArrows` prop to control visibility. \nThe `buttonPressingMove` prop can control \nthe speed at which the block will be scrolled by the \nbuttons. \n\n### Under the hood\n`happy-svelte-scrollbar` uses:\n* In modern browsers: `ResizeObserver` API;\n* in legacy browsers: custom wrapper over `requestAnimationFrame`. \n\n### TODO\n* Horizontal orientation (for now vertical only)\n\n#### Contributing and issues report are welcome! ",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 2],
		[3596, 7],
		[3603, 1],
		[3617, 3],
		[3624, 1],
		[3631, 1],
		[3638, 9],
		[3645, 4],
		[3666, 4],
		[3673, 4],
		[3694, 3],
		[3701, 1],
		[3715, 4],
		[3729, 1],
		[3736, 3],
		[3743, 1],
		[3750, 1],
		[3757, 1],
		[3764, 1],
		[3771, 4],
		[3778, 1],
		[3792, 2],
		[3799, 1],
		[3806, 1],
		[3820, 1],
		[3834, 3],
		[3841, 2],
		[3855, 7],
		[3862, 5],
		[3869, 1],
		[3876, 3],
		[3883, 1],
		[3890, 3],
		[3897, 2],
		[3918, 5],
		[3925, 3],
		[3932, 9],
		[3939, 18],
		[3946, 8],
		[3953, 4],
		[3960, 8],
		[3967, 3],
		[3974, 3],
		[3981, 1],
		[3988, 18],
		[3995, 4],
		[4002, 5],
		[4016, 2],
		[4023, 1],
		[4030, 5],
		[4037, 15],
		[4044, 15],
		[4051, 4],
		[4058, 10],
		[4065, 6],
		[4072, 10],
		[4079, 14],
		[4086, 2],
		[4093, 11],
		[4100, 9],
		[4107, 8],
		[4114, 6],
		[4121, 6],
		[4128, 1]
	],
	"esm": true,
	"cjs": false
}
