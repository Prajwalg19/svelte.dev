{
	"name": "svelte-suspense",
	"description": "Implement React Suspense functionality in Svelte.",
	"repo_url": "https://github.com/sveltejs/svelte-machine-component",
	"authors": ["brucou"],
	"homepage": "https://github.com/sveltejs/svelte-machine-component#readme",
	"downloads": 24,
	"updated": "2019-07-10T01:33:13.431Z",
	"tags": ["miscellaneous"],
	"typescript": false,
	"version": "0.12.0",
	"svelte_range": "^3.5.4",
	"last_rune_check_version": "0.12.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-suspense",
				"version": "0.12.0",
				"size": 14271
			},
			{
				"name": "suspense-fsm",
				"version": "0.10.1",
				"size": 1281956
			},
			{
				"name": "kingly",
				"version": "0.20.11",
				"size": 1254998
			},
			{
				"name": "fp-rosetree",
				"version": "0.6.2",
				"size": 5975412
			},
			{
				"name": "emitonoff",
				"version": "0.1.0",
				"size": 128949
			},
			{
				"name": "kingly",
				"version": "0.19.3",
				"size": 1168019
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[0, 4],
			[0, 5],
			[5, 3]
		],
		"circular": []
	},
	"readme": "# Content\nThis directory contains the specifications for a React Suspense simulation of functionality, \nexpressed as a Kingly state machine.  \n\n# API\n<Suspense let:intents={{done, failed}} task timeout >\n  <Spinner slot=\"fallback\" ...props />\n  <Main on:load=\"{... => done(...}\" />\n</Suspense>\n\nThe `Suspense` component admits the following props:\n- `timeout`: the number of milliseconds to wait before displaying the fallback slot \ncontent\n- `task`: a function to run on starting the `Suspense` component. That function will \nreceive an object parameter `{done, failed}` which can be used to indicate termination or failure\n to the underlying suspense state machine. \n\nThe `Suspense` component also passes on the `intents` parameter to its children slots. The \naforementioned parameter is an object with properties `{done, failed}` which can be used to \nindicate termination or failure to the underlying suspense state machine. Both properties are \nfunction which can also pass event data if necessary.  \n\n# Machine component\nThe Svelte `<Machine>` component is based on [Kingly](https://github.com/brucou/kingly) (though it would also work with any other \nmachine library which adheres to the same interface as Kingly). The corresponding file is `Suspense.svelte`. \n\n# Install\n`import <your-name> from 'svelte-machine'`\n\n# Demo\n[Svelte suspense demo](https://github.com/brucou/svelte-suspense-app)\n\n## Motivation\nThis is a proof of concept for offering functionality similar to that of React Suspense. It is \ninspired from [previous work](https://reactgo.com/tutorial-reactlazy-react-suspense/) by [Sai \ngowtham](https://twitter.com/saigowthamr) that I reimplemented here with Svelte in lieu of React.\n\n## What it is \n![suspense demo](assets/suspense%20demo.gif)\n\n# Markup and semantics\nThe main screen which will hold the loaded image is handled with a suspense functionality:\n\n````html\nlet albums=[];\n\nfunction fetchAlbums(intents, {settings}){\n  const {done, failed} = intents;\n  axios.get(iTunesUrl)\n       .then(res => res.data.feed.entry)\n       .then(done)\n       .catch(failed)\n}\n \n<div class=\"app\">\n    <Header />\n    <div class=\"albums\">\n        <Suspense task={fetchAlbums} let:data={albums} timeout=10>\n            <div slot=\"fallback\" class=\"album-img\">\n                <img alt=\"\" src=\"https://media.giphy.com/media/y1ZBcOGOOtlpC/200.gif\" />\n            </div>\n            <div slot=\"error\" class=\"album-img\">\n                <h1>ERROR!</h1>\n            </div>\n            <LazyLoadContainer>\n                {#if albums}\n                  {#each albums as album, i}\n                  <LazyLoad id=\"{i}\">\n                      <Album {album} />\n                  </LazyLoad >\n                  {/each}\n                {/if }\n            </LazyLoadContainer>\n        </Suspense>\n    </div>\n</div>\n\n````\n\nThe default slot content of the `Suspense` component will be immediately put in the DOM and \nhidden (`display: none`). Two things can happen:\n\n- the default slot content signals completion before `settings.duration` milliseconds. In that \ncase, the slot content is displayed as soon as it has indicated completion\n- the default slot content does not signal completion before `settings.duration` milliseconds \nexpires. In that case, the fallback content (e.g. the `fallback` slot content) will be displayed. When the default slot content signals completion, it will be displayed.\n \nThe `Suspense` component behaviour is better summarized with the defining state machine:\n\n![suspense finite state machine](assets/suspense%20machine.png)\n\nThe `Album` component also benefits from the suspense functionality:\n\n```javascript\n<ul class=\"album\">\n    <li class=\"album-item\">\n        <Suspense let:intents={{done, failed}} timeout=0 >\n            <div slot=\"fallback\" class=\"album-img\">\n                <img alt=\"\" src=\"https://media.giphy.com/media/y1ZBcOGOOtlpC/200.gif\" />\n            </div>\n            <a href={link} target=\"blank\" class=\"link\">\n                <img class=\"album-img\"\n                     on:load=\"{() => done(void 0)}\"\n                     src={image}\n                     alt={'itunes' + Math.random()} />\n            </a>\n        </Suspense>\n    </li>\n    <li class=\"title album-item\">\n        <a href={link} target=\"blank\" class=\"link\">\n            {title.slice(0, 20)}..</a></li>\n    <li class=\"price album-item\">Price:{price}</li>\n    <li class=\"date album-item\">Released:{formatDate(date, \"MMM Do YY\")}</li>\n</ul>\n\n```\n\n## Issues\nI ran into some issues when developing the component, some of which are linked to Svelte, others \nto the DOM.\n\nConcerning Svelte:\n- Svelte being template-based, there is no functional composition available. The next best thing \nis slot composition which is a very flexible mechanism, though the syntax of it can be confusing.\n In particular the necessity to pass parameters and handle variable scoping (which comes for free \n with functions) requires to understand well the syntax proposed by Svelte.\n- [Component do not admit slots (yet)!!](https://github.com/sveltejs/svelte/issues/2080). That is\n a strong limitation for this particular example, and leads to a component whose functionality is\n  not very robust (see below). \n- I found what seems to be a bug in that imported variables are not \n\nDOM-wise:\n- because of Svelte current limitations, we had to hide our default slot component by wrapping it\n in an extra `div` and use `display:none` on that div. However, that extra `div` can conflict \n with the surrounding css, which it does in our examples (the surrounding `div` for an album is a\n flex container, which handles direct children -- it would thus pass to handle a unique `div` \n children instead of a list of `Album` children).\n- we opted for a work-around, which is to display conditionally (with template `#if` logic) the \ndefault slot component. However this lead to some obscure errors such as `li0 is not defined`. \nI assumed this is connected to Svelte's internal and did not pursue the matter further. For this \ndemo, we ended up attached the `Suspense` component to the image loading, instea of the `ul` list\n element, to avoid that error. This is however less user-friendly -- which is the goal of \n Suspense in the first place.\n\nOn the bright side, the targetted API which uses slots looks good:\n ````html\n <Suspense task={fetchAlbums} timeout=10>\n   <Fallback slot=\"fallback\" />\n   ... #Suuspended content\n </Suspense >\n````\n \nFor inline suspended content, it implies minimal to no modification of the 'suspended' component.\n In the `Album` case, we only added an `onload` handler. In the `App` case, we added the `run` \n function to fetch data, separately from the view displaying the data, effectively decoupling the\n  view and the model within the template.\n\nHowever a usage which reuses existing components like:\n ````html\n <Suspense let:intents={{done, failed}} timeout=0>\n   <Fallback slot=\"fallback\" />\n   <Suspended {intents} />\n </Suspense >\n````\n\ninvolves wrapping those components in a `Suspended` component to put `intents`  in scope.\n\nI am new to Svelte so I did get something wrong, I welcome your friendly and helpful comments \n(open an issue). Always happy to hear feedback.\n\n## Using state machines\nI implemented `Suspense` with the [Kingly](https://github.com/brucou/kingly) state machine library. \nThis is not strictly necessarily and the implementation can be replaced by a simple function with no \ndependency (that is a fundamental objective of Kingly). That function may actually be the result \nof compiling the Kingly machine, just like Svelte compiles its template. A state machine is but a\n template for behaviour.\n \nWhile using a formalized state machine may feel like too much for a simple behaviour like \nSuspense, the technique can however be generalized easily to more complex scenarios -- only by \nmodifying the underlying machine. \n\nA more complex scenario could be to implement a more sophisticated version of suspense which \ndeals with a full range of lazy loading formula as described in this excellent [CSS tricks article](https://css-tricks.com/the-complete-guide-to-lazy-loading-images/). \n\nAnother complex scenario could be handling the synchronization/scheduling of competing content, \nsimilar to but with less flexibility than React Concurrent. This would be possible without any change in architecture, or impact in the Svelte compiler. All this is very preliminary but those are interesting tracks to follow.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 20],
		[3603, 20],
		[3610, 20],
		[3631, 1],
		[3652, 1],
		[3659, 2],
		[3666, 19],
		[3673, 5],
		[3680, 4],
		[3694, 1],
		[3708, 2],
		[3715, 4],
		[3722, 1],
		[3729, 22],
		[3736, 1],
		[3743, 1],
		[3750, 1],
		[3757, 2],
		[3764, 7],
		[3771, 12],
		[3778, 1],
		[3785, 1],
		[3792, 13],
		[3799, 10],
		[3806, 3],
		[3820, 4],
		[3827, 1],
		[3834, 2],
		[3841, 4],
		[3848, 2],
		[3855, 3],
		[3862, 96],
		[3869, 1],
		[3883, 2],
		[3890, 19],
		[3904, 3],
		[3911, 1],
		[3925, 2],
		[3932, 1],
		[3939, 3],
		[3953, 1],
		[3960, 4],
		[3967, 3],
		[3974, 1],
		[3981, 21],
		[4016, 1],
		[4030, 19],
		[4037, 20],
		[4044, 10],
		[4051, 3],
		[4058, 11],
		[4065, 2],
		[4072, 1],
		[4079, 1],
		[4093, 10],
		[4100, 22],
		[4107, 10],
		[4114, 24],
		[4121, 18],
		[4128, 7],
		[4135, 8]
	],
	"esm": false,
	"cjs": false
}
