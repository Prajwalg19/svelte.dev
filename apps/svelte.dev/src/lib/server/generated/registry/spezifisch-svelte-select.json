{
	"name": "@spezifisch/svelte-select",
	"description": "Create select/autocomplete components for Svelte apps.",
	"repo_url": "https://github.com/spezifisch/svelte-select",
	"authors": ["spezifisch"],
	"homepage": "https://github.com/spezifisch/svelte-select#readme",
	"downloads": 5,
	"updated": "2022-05-12T07:56:42.116Z",
	"tags": ["ui"],
	"github_stars": 0,
	"typescript": true,
	"version": "3.17.3",
	"svelte_range": "^3.31.0",
	"last_rune_check_version": "3.17.3",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@spezifisch/svelte-select",
				"version": "3.17.3",
				"size": 314945
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-select\n\nA select/autocomplete component for Svelte apps.  With support for grouping, filtering, async and more.\n\n## Demos\n\nðŸŒ±â€ƒ[Simple demo](https://svelte.dev/repl/a859c2ba7d1744af9c95037c48989193?version=3.12.1)\n\nðŸŒ»â€ƒ[Advanced demo](https://svelte.dev/repl/3e032a58c3974d07b7818c0f817a06a3?version=3.20.1)\n\n## Installation\n\n```bash\nyarn add svelte-select\n```\n\n**Note:** Install as a dev dependency (yarn add svelte-select --dev) if using [Sapper](https://sapper.svelte.dev/) to avoid a SSR error.\n\n\n## Usage\n\n```html\n<script>\n  import Select from 'svelte-select';\n\n  let items = [\n    {value: 'chocolate', label: 'Chocolate'},\n    {value: 'pizza', label: 'Pizza'},\n    {value: 'cake', label: 'Cake'},\n    {value: 'chips', label: 'Chips'},\n    {value: 'ice-cream', label: 'Ice Cream'},\n  ];\n\n  let selectedValue = {value: 'cake', label: 'Cake'};\n\n  function handleSelect(event) {\n    console.log('selected item', event.detail);\n    // .. do something here ðŸ™‚\n  }\n</script>\n\n<Select {items} {selectedValue} on:select={handleSelect}></Select>\n```\n\n\n## API\n\n- `items: Array` Default: `[]`. List of selectable items that appear in the dropdown.\n- `selectedValue: Any` Default: `undefined`. Selected item or items\n- `filterText: String` Default: `''`. Text to filter `items` by.\n- `placeholder: String` Default: `'Select...'`. Placeholder text.\n- `noOptionsMessage: String` Default: `'No options'`. Message to display in list when there are no `items`.\n- `optionIdentifier: String` Default: `'value'`. Override default identifier.\n- `listOpen: Boolean` Default: `false`. Open/close list.\n- `hideEmptyState: Boolean` Default: `false`. Hide list and don't show `noOptionsMessage` when there are no `items`.\n- `containerClasses: String` Default: `''`. Add extra container classes, for example 'global-x local-y'.\n- `containerStyles: String` Default: `''`. Add inline styles to container.\n- `isClearable: Boolean` Default: `true`. Enable clearing of selected items.\n- `isCreatable: Boolean` Default: `false`. Can create new item(s) to be added to `selectedValue`.\n- `isDisabled: Boolean` Default: `false`. Disable select.\n- `isMulti: Boolean` Default: `false`. Enable multi-select, `selectedValue` becomes an array of selected items.\n- `isSearchable: Boolean` Default: `true`. Enable search/filtering of `items` via `filterText`.\n- `isGroupHeaderSelectable: Boolean` Default: `false`. Enable selectable group headers in `items` (see adv demo).\n- `listPlacement: String` Default: `'auto'`. When `'auto'` displays either `'top'` or `'bottom'` depending on viewport.\n- `hasError: Boolean` Default: `false`. Show/hide error styles around select input (red border by default).\n- `listAutoWidth: Boolean` Default: `true`. List width will grow wider than the Select container (depending on list item content length).\n- `showIndicator: Boolean` Default: `false`. If true, the chevron indicator is always shown.\n- `inputAttributes: Object` Default: `{}`. Useful for passing in HTML attributes like `'id'` to the Select input.\n- `Item: Component` Default: `Item`. Item component.\n- `Selection: Component` Default: `Selection`. Selection component.\n- `MultiSelection: Component` Default: `MultiSelection`. Multi selection component.\n- `Icon: Component` Default: `Icon`. Icon component.\n- `iconProps: Object` Default: `{}`. Icon props.\n- `indicatorSvg: @html` Default: `undefined`. Override default SVG chevron indicator.\n- `ClearIcon` Default: `ClearIcon`. ClearIcon component.\n- `isVirtualList: Boolean` Default: `false`. Uses [svelte-virtual-list](https://github.com/sveltejs/svelte-virtual-list) to render list (experimental).\n- `filteredItems: Array` Default: `[]`. List of items that are filtered by `filterText`\n\n### Exposed methods\nIf you really want to get your hands dirty these internal functions are exposed as props to override if needed. See the adv demo or look through the test file (test/src/index.js) for examples.\n\n```js\nexport let itemFilter = (label, filterText, option) => label.toLowerCase().includes(filterText.toLowerCase());\n```\n\n```js\nexport let groupBy = undefined; // see adv demo for example\n```\n\n```js\nexport let groupFilter = groups => groups;\n```\n\n```js\nexport let createGroupHeaderItem = groupValue => {\n  return {\n    value: groupValue,\n    label: groupValue\n  };\n};\n```\n\n```js\nexport let createItem = filterText => {\n  return {\n    value: filterText,\n    label: filterText\n  };\n};\n```\n\n```js\nexport let getOptionLabel = (option, filterText) => {\n  return option.isCreator ? `Create \\\"${filterText}\\\"` : option.label;\n};\n```\n\n```js\nexport let getSelectionLabel = option => {\n  if (option) return option.label;\n};\n```\n\n```js\nexport let getGroupHeaderLabel = option => {\n  return option.label;\n};\n```\n\n```js\nexport function handleClear() {\n  selectedValue = undefined;\n  listOpen = false;\n  dispatch(\"clear\", selectedValue);\n  handleFocus();\n}\n```\n\n```js\nexport let loadOptions = undefined; // if used must return a Promise that updates 'items'\n/* Return an object with { cancelled: true } to keep the loading state as active. */\n```\n\n## Styling\n\nYou can style a component by overriding [the available CSS variables](/docs/theming_variables.md).\n\n```html\n<script>\n  import Select from 'svelte-select';\n\n  const items = ['One', 'Two', 'Three'];\n</script>\n\n<style>\n  .themed {\n    --border: 3px solid blue;\n    --borderRadius: 10px;\n    --placeholderColor: blue;\n  }\n</style>\n\n<div class=\"themed\">\n  <h2>Theming</h2>\n  <Select {items}></Select>\n</div>\n```\n\nYou can also use the `inputStyles` prop to write in any override styles needed for the input.\n\n```html\n<script>\n  import Select from 'svelte-select';\n\n  const items = ['One', 'Two', 'Three'];\n</script>\n\n<Select {items} inputStyles=\"box-sizing: border-box;\"></Select>\n```\n\n## Events\n\n| Event Name | Callback | Description |\n|------|------|----------|\n| select | { detail } | fires when selectedValue changes\n| clear | - | fires when clear all is invoked\n| loaded | { items } | fires when `loadOptions` resolves\n| error | { type, details } | fires when error is caught\n\n```html\n<script>\n  import Select from 'svelte-select';\n\n  let items = [...];\n  function handleSelect(event) {\n    // event.detail will contain the selected value\n    ...\n  }\n  function onClear() {\n    ...\n  }\n</script>\n\n<Select {items} on:select={handleSelect} on:clear={handleClear}></Select>\n```\n\n## Development\n\n```bash\nyarn global add serve@8\nyarn\nyarn dev\nyarn test:browser\n```\n\nIn your favourite browser go to http://localhost:3000 and open devtools and see the console for the test output. When developing its handy to see the component on the page; comment out the `select.$destroy();` on the last test in /test/src/index.js or use the `test.only()` to target just one test.\n\nFor example:\n\n```js\ntest.only('when getSelectionLabel contains HTML then render the HTML', async (t) => {\n  const select = new Select({\n    target,\n    props: {\n      selectedValue: items[0],\n      getSelectionLabel: (option) => `<p>${option.label}</p>`,\n    }\n  });\n\n  t.ok(document.querySelector('.selection').innerHTML === '<p>Chocolate</p>');\n\n  //select.$destroy();\n});\n\n```\n\n\n## Configuring webpack\n\nIf you're using webpack with [svelte-loader](https://github.com/sveltejs/svelte-loader), make sure that you add `\"svelte\"` to [`resolve.mainFields`](https://webpack.js.org/configuration/resolve/#resolve-mainfields) in your webpack config. This ensures that webpack imports the uncompiled component (`src/index.html`) rather than the compiled version (`index.mjs`) â€” this is more efficient.\n\nIf you're using Rollup with [rollup-plugin-svelte](https://github.com/rollup/rollup-plugin-svelte), this will happen automatically.\n\n\n## License\n\n[LIL](LICENSE)\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 44],
		[3596, 4],
		[3603, 5],
		[3610, 1],
		[3617, 69],
		[3624, 1],
		[3645, 4],
		[3652, 37],
		[3659, 1],
		[3666, 5],
		[3673, 6],
		[3680, 21],
		[3701, 14],
		[3708, 5],
		[3722, 2],
		[3750, 2],
		[3771, 4],
		[3778, 6],
		[3799, 2],
		[3806, 1],
		[3813, 1],
		[3827, 1],
		[3834, 1],
		[3848, 2],
		[3855, 21],
		[3862, 5],
		[3869, 1],
		[3876, 3],
		[3883, 1],
		[3897, 5],
		[3925, 1],
		[3932, 1],
		[3939, 1],
		[3953, 3],
		[3960, 2],
		[3974, 1],
		[3988, 1],
		[4002, 1],
		[4023, 1],
		[4030, 10],
		[4037, 4],
		[4044, 8],
		[4051, 1],
		[4058, 1],
		[4072, 1],
		[4079, 5],
		[4093, 23],
		[4100, 4],
		[4107, 4],
		[4114, 5],
		[4121, 6],
		[4128, 1]
	],
	"esm": true,
	"cjs": false
}
