{
	"name": "sveld",
	"description": "Generate TypeScript definitions for Svelte components.",
	"repo_url": "https://github.com/carbon-design-system/sveld",
	"authors": ["metonym"],
	"homepage": "https://github.com/carbon-design-system/sveld",
	"downloads": 2841,
	"updated": "2025-02-17T19:19:19.814Z",
	"tags": ["tooling"],
	"github_stars": 422,
	"typescript": true,
	"version": "0.22.1",
	"svelte_range": "^4.2.19",
	"last_rune_check_version": "0.22.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "sveld",
				"version": "0.22.1",
				"size": 106884
			},
			{
				"name": "@rollup/plugin-node-resolve",
				"version": "13.3.0",
				"size": 96376
			},
			{
				"name": "resolve",
				"version": "1.22.10",
				"size": 145619
			},
			{
				"name": "is-core-module",
				"version": "2.16.1",
				"size": 33475
			},
			{
				"name": "hasown",
				"version": "2.0.2",
				"size": 8765
			},
			{
				"name": "function-bind",
				"version": "1.1.2",
				"size": 31427
			},
			{
				"name": "path-parse",
				"version": "1.0.7",
				"size": 4511
			},
			{
				"name": "supports-preserve-symlinks-flag",
				"version": "1.0.0",
				"size": 9178
			},
			{
				"name": "deepmerge",
				"version": "4.3.1",
				"size": 31157
			},
			{
				"name": "is-module",
				"version": "1.0.0"
			},
			{
				"name": "@types/resolve",
				"version": "1.17.1",
				"size": 7689
			},
			{
				"name": "@types/node",
				"version": "22.15.3",
				"size": 2350386
			},
			{
				"name": "undici-types",
				"version": "6.21.0",
				"size": 83680
			},
			{
				"name": "is-builtin-module",
				"version": "3.2.1",
				"size": 3875
			},
			{
				"name": "builtin-modules",
				"version": "3.3.0",
				"size": 4512
			},
			{
				"name": "@rollup/pluginutils",
				"version": "3.1.0",
				"size": 47695
			},
			{
				"name": "picomatch",
				"version": "2.3.1",
				"size": 89952
			},
			{
				"name": "@types/estree",
				"version": "0.0.39",
				"size": 17818
			},
			{
				"name": "estree-walker",
				"version": "1.0.1",
				"size": 15196
			},
			{
				"name": "acorn",
				"version": "8.14.1",
				"size": 547473
			},
			{
				"name": "comment-parser",
				"version": "1.4.1",
				"size": 365999
			},
			{
				"name": "prettier",
				"version": "3.5.3",
				"size": 7876465
			},
			{
				"name": "rollup",
				"version": "2.79.2",
				"size": 6452533
			},
			{
				"name": "rollup-plugin-svelte",
				"version": "7.2.2",
				"size": 15322
			},
			{
				"name": "@rollup/pluginutils",
				"version": "4.2.1",
				"size": 50858
			},
			{
				"name": "estree-walker",
				"version": "2.0.2",
				"size": 50243
			},
			{
				"name": "resolve.exports",
				"version": "2.0.3",
				"size": 24050
			},
			{
				"name": "svelte",
				"version": "4.2.19",
				"size": 2633608
			},
			{
				"name": "code-red",
				"version": "1.0.4",
				"size": 55185
			},
			{
				"name": "@jridgewell/sourcemap-codec",
				"version": "1.5.0",
				"size": 112815
			},
			{
				"name": "@types/estree",
				"version": "1.0.7",
				"size": 26147
			},
			{
				"name": "estree-walker",
				"version": "3.0.3",
				"size": 17599
			},
			{
				"name": "periscopic",
				"version": "3.1.0",
				"size": 11219
			},
			{
				"name": "is-reference",
				"version": "3.0.3",
				"size": 3953
			},
			{
				"name": "css-tree",
				"version": "2.3.1",
				"size": 1190591
			},
			{
				"name": "mdn-data",
				"version": "2.0.30",
				"size": 602138
			},
			{
				"name": "source-map-js",
				"version": "1.2.1",
				"size": 139872
			},
			{
				"name": "aria-query",
				"version": "5.3.2",
				"size": 176114
			},
			{
				"name": "magic-string",
				"version": "0.30.17",
				"size": 467464
			},
			{
				"name": "axobject-query",
				"version": "4.1.0",
				"size": 110878
			},
			{
				"name": "locate-character",
				"version": "3.0.0",
				"size": 5325
			},
			{
				"name": "@ampproject/remapping",
				"version": "2.3.0",
				"size": 78946
			},
			{
				"name": "@jridgewell/gen-mapping",
				"version": "0.3.8",
				"size": 81596
			},
			{
				"name": "@jridgewell/set-array",
				"version": "1.2.1",
				"size": 17945
			},
			{
				"name": "@jridgewell/trace-mapping",
				"version": "0.3.25",
				"size": 169330
			},
			{
				"name": "@jridgewell/resolve-uri",
				"version": "3.1.2",
				"size": 53153
			},
			{
				"name": "svelte-preprocess",
				"version": "6.0.3",
				"size": 97158
			},
			{
				"name": "tinyglobby",
				"version": "0.2.13",
				"size": 31264
			},
			{
				"name": "fdir",
				"version": "6.4.4",
				"size": 45593
			},
			{
				"name": "picomatch",
				"version": "4.0.2",
				"size": 85237
			},
			{
				"name": "typescript",
				"version": "5.8.3",
				"size": 22867703
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[3, 4],
			[4, 5],
			[2, 6],
			[2, 7],
			[1, 8],
			[1, 9],
			[1, 10],
			[10, 11],
			[11, 12],
			[1, 13],
			[13, 14],
			[1, 15],
			[15, 16],
			[15, 17],
			[15, 18],
			[0, 19],
			[0, 20],
			[0, 21],
			[0, 22],
			[0, 23],
			[23, 24],
			[24, 16],
			[24, 25],
			[23, 26],
			[0, 27],
			[27, 19],
			[27, 28],
			[28, 29],
			[28, 30],
			[28, 19],
			[28, 31],
			[31, 30],
			[28, 32],
			[32, 30],
			[32, 31],
			[32, 33],
			[33, 30],
			[27, 34],
			[34, 35],
			[34, 36],
			[27, 37],
			[27, 32],
			[27, 33],
			[27, 38],
			[38, 29],
			[27, 30],
			[27, 31],
			[27, 39],
			[27, 40],
			[27, 41],
			[41, 42],
			[42, 43],
			[42, 29],
			[42, 44],
			[44, 45],
			[44, 29],
			[41, 44],
			[27, 44],
			[27, 29],
			[0, 46],
			[0, 47],
			[47, 48],
			[47, 49],
			[0, 50]
		],
		"circular": []
	},
	"readme": "# sveld\n\n[![NPM][npm]][npm-url]\n![GitHub](https://img.shields.io/github/license/carbon-design-system/sveld?color=262626&style=for-the-badge)\n![npm downloads to date](https://img.shields.io/npm/dt/sveld?color=262626&style=for-the-badge)\n\n`sveld` is a TypeScript definition generator for Svelte components. It analyzes props, events, slots, and other component features through static analysis. Types and signatures can be defined using [JSDoc notation](https://jsdoc.app/). The tool can also generate component documentation in Markdown and JSON formats.\n\nThe purpose of this project is to make third party Svelte component libraries compatible with the Svelte Language Server and TypeScript with minimal effort required by the author. For example, TypeScript definitions may be used during development via intelligent code completion in Integrated Development Environments (IDE) like VSCode.\n\n[Carbon Components Svelte](https://github.com/IBM/carbon-components-svelte) uses this library to auto-generate component types and API metadata:\n\n- [TypeScript definitions](https://github.com/IBM/carbon-components-svelte/blob/master/types): Component TypeScript definitions\n- [Component Index](https://github.com/IBM/carbon-components-svelte/blob/master/COMPONENT_INDEX.md): Markdown file documenting component props, slots, and events\n- [Component API](https://github.com/IBM/carbon-components-svelte/blob/master/docs/src/COMPONENT_API.json): Component API metadata in JSON format\n\n**Please note** that the generated TypeScript definitions require Svelte version 3.55 or greater.\n\n---\n\nGiven a Svelte component, `sveld` can infer basic prop types to generate TypeScript definitions compatible with the [Svelte Language Server](https://github.com/sveltejs/language-tools):\n\n**Button.svelte**\n\n```svelte\n<script>\n  export let type = \"button\";\n  export let primary = false;\n</script>\n\n<button {...$$restProps} {type} class:primary on:click>\n  <slot>Click me</slot>\n</button>\n```\n\nThe generated definition extends the official `SvelteComponentTyped` interface exported from Svelte.\n\n**Button.svelte.d.ts**\n\n```ts\nimport type { SvelteComponentTyped } from \"svelte\";\nimport type { SvelteHTMLElements } from \"svelte/elements\";\n\ntype $RestProps = SvelteHTMLElements[\"button\"];\n\ntype $Props = {\n  /**\n   * @default \"button\"\n   */\n  type?: string;\n\n  /**\n   * @default false\n   */\n  primary?: boolean;\n\n  [key: `data-${string}`]: any;\n};\n\nexport type ButtonProps = Omit<$RestProps, keyof $Props> & $Props;\n\nexport default class Button extends SvelteComponentTyped<\n  ButtonProps,\n  { click: WindowEventMap[\"click\"] },\n  { default: {} }\n> {}\n```\n\nSometimes, inferring prop types is insufficient.\n\nProp/event/slot types and signatures can be augmented using [JSDoc](https://jsdoc.app/) notations.\n\n```js\n/** @type {\"button\" | \"submit\" | \"reset\"} */\nexport let type = \"button\";\n\n/**\n * Set to `true` to use the primary variant\n */\nexport let primary = false;\n```\n\nThe accompanying JSDoc annotations would generate the following:\n\n```ts\nimport type { SvelteHTMLElements } from \"svelte/elements\";\n\ntype $RestProps = SvelteHTMLElements[\"button\"];\n\ntype $Props = {\n  /**\n   * @default \"button\"\n   */\n  type?: \"button\" | \"submit\" | \"reset\";\n\n  /**\n   * Set to `true` to use the primary variant\n   * @default false\n   */\n  primary?: boolean;\n};\n\nexport type ButtonProps = Omit<$RestProps, keyof $Props> & $Props;\n\nexport default class Button extends SvelteComponentTyped<\n  ButtonProps,\n  { click: WindowEventMap[\"click\"] },\n  { default: {} }\n> {}\n```\n\n---\n\n## Table of Contents\n\n- [Approach](#approach)\n- [Usage](#usage)\n  - [Installation](#installation)\n  - [Rollup](#rollup)\n  - [Node.js](#nodejs)\n  - [CLI](#cli)\n  - [Publishing to NPM](#publishing-to-npm)\n- [Available Options](#available-options)\n- [API Reference](#api-reference)\n  - [@type](#type)\n  - [@typedef](#typedef)\n  - [@slot](#slot)\n  - [@event](#event)\n  - [@restProps](#restprops)\n  - [@extends](#extends)\n  - [@generics](#generics)\n  - [@component comments](#component-comments)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Approach\n\n`sveld` uses the Svelte compiler to statically analyze Svelte components exported from a library to generate documentation useful to the end user.\n\nExtracted metadata include:\n\n- props\n- slots\n- forwarded events\n- dispatched events\n- `$$restProps`\n\nThis library adopts a progressively enhanced approach. Any property type that cannot be inferred (e.g., \"hello\" is a string) falls back to \"any\" to minimize incorrectly typed properties or signatures. To mitigate this, the library author can add JSDoc annotations to specify types that cannot be reliably inferred. This represents a progressively enhanced approach because JSDocs are comments that can be ignored by the compiler.\n\n## Usage\n\n### Installation\n\nInstall `sveld` as a development dependency.\n\n```sh\n# npm\nnpm i -D sveld\n\n# pnpm\npnpm i -D sveld\n\n# Bun\nbun i -D sveld\n\n# Yarn\nyarn add -D sveld\n```\n\n### Rollup\n\nImport and add `sveld` as a plugin to your `rollup.config.js`.\n\n```js\n// rollup.config.js\nimport svelte from \"rollup-plugin-svelte\";\nimport resolve from \"@rollup/plugin-node-resolve\";\nimport sveld from \"sveld\";\n\nexport default {\n  input: \"src/index.js\",\n  output: {\n    format: \"es\",\n    file: \"lib/index.mjs\",\n  },\n  plugins: [svelte(), resolve(), sveld()],\n};\n```\n\nWhen building the library, TypeScript definitions are emitted to the `types` folder by default.\n\nCustomize the output folder using the `typesOptions.outDir` option.\n\nThe following example emits the output to the `dist` folder:\n\n```diff\nsveld({\n+  typesOptions: {\n+    outDir: 'dist'\n+  }\n})\n```\n\nThe [tests/e2e](tests/e2e) folder contains example set-ups:\n\n- [single-export](tests/e2e/single-export): library that exports one component\n- [single-export-default-only](tests/e2e/single-export-default-only): library that exports one component using the concise `export { default } ...` syntax\n- [multi-export](tests/e2e/multi-export): multi-component library without JSDoc annotations (types are inferred)\n- [multi-export-typed](tests/e2e/multi-export-typed): multi-component library with JSDoc annotations\n- [multi-export-typed-ts-only](tests/e2e/multi-export-typed-ts-only): multi-component library that only generates TS definitions\n- [glob](tests/e2e/glob): library that uses the glob strategy to collect/analyze \\*.svelte files\n- [carbon](tests/e2e/carbon): full `carbon-components-svelte` example\n\n### CLI\n\nThe CLI uses the `\"svelte\"` field from your `package.json` as the entry point:\n\n```sh\nnpx sveld\n```\n\nGenerate documentation in JSON and/or Markdown formats using the following flags:\n\n```sh\nnpx sveld --json --markdown\n```\n\n### Node.js\n\nYou can also use `sveld` programmatically in Node.js.\n\nIf no `input` is specified, `sveld` will infer the entry point based on the `package.json#svelte` field.\n\n```js\nconst { sveld } = require(\"sveld\");\nconst pkg = require(\"./package.json\");\n\nsveld({\n  input: \"./src/index.js\",\n  glob: true,\n  markdown: true,\n  markdownOptions: {\n    onAppend: (type, document, components) => {\n      if (type === \"h1\")\n        document.append(\"quote\", `${components.size} components exported from ${pkg.name}@${pkg.version}.`);\n    },\n  },\n  json: true,\n  jsonOptions: {\n    outFile: \"docs/src/COMPONENT_API.json\",\n  },\n});\n```\n\n#### `jsonOptions.outDir`\n\nIf `json` is `true`, a `COMPONENT_API.json` file will be generated at the root of your project. This file contains documentation for all components.\n\nUse the `jsonOptions.outDir` option to specify the folder for individual JSON files to be emitted.\n\n```js\nsveld({\n  json: true,\n  jsonOptions: {\n    // an individual JSON file will be generated for each component API\n    // e.g. \"docs/Button.api.json\"\n    outDir: \"docs\",\n  },\n});\n```\n\n### Publishing to NPM\n\nTypeScript definitions are outputted to the `types` folder by default. Don't forget to include the folder in your `package.json` when publishing the package to NPM.\n\n```diff\n{\n  \"svelte\": \"./src/index.js\",\n  \"main\": \"./lib/index.mjs\",\n+ \"types\": \"./types/index.d.ts\",\n  \"files\": [\n    \"src\",\n    \"lib\",\n+   \"types\",\n  ]\n}\n```\n\n## Available Options\n\nBy default, only TypeScript definitions are generated.\n\nTo generate documentation in Markdown and JSON formats, set `markdown` and `json` to `true`.\n\n```diff\nsveld({\n+  markdown: true,\n+  json: true,\n})\n```\n\n## API Reference\n\n### `@type`\n\nWithout a `@type` annotation, `sveld` will infer the primitive type for a prop:\n\n```js\nexport let kind = \"primary\";\n// inferred type: \"string\"\n```\n\nUse the `@type` tag to explicitly document the type. In the following example, the `kind` property has an enumerated (enum) type.\n\nSignature:\n\n```js\n/**\n * Optional description\n * @type {Type}\n */\n```\n\nExample:\n\n```js\n/**\n * Specify the kind of button\n * @type {\"primary\" | \"secondary\" | \"tertiary\"}\n */\nexport let kind = \"primary\";\n\n/**\n * Specify the Carbon icon to render\n * @type {typeof import(\"carbon-icons-svelte\").CarbonIcon}\n */\nexport let renderIcon = Close20;\n```\n\n### `@typedef`\n\nThe `@typedef` tag can be used to define a common type that is used multiple times within a component. All typedefs defined in a component will be exported from the generated TypeScript definition file.\n\nSignature:\n\n```js\n/**\n * @typedef {Type} TypeName\n */\n```\n\nExample:\n\n```js\n/**\n * @typedef {string} AuthorName\n * @typedef {{ name?: AuthorName; dob?: string; }} Author\n */\n\n/** @type {Author} */\nexport let author = {};\n\n/** @type {Author[]} */\nexport let authors = [];\n```\n\n### `@slot`\n\nUse the `@slot` tag for typing component slots. Note that `@slot` is a non-standard JSDoc tag.\n\nDescriptions are optional for named slots. Currently, the default slot cannot have a description.\n\nSignature:\n\n```js\n/**\n * @slot {Type} slot-name [slot description]\n */\n\nOmit the `slot-name` to type the default slot.\n\n/**\n * @slot {Type}\n */\n```\n\nExample:\n\n```svelte\n<script>\n  /**\n   * @slot {{ prop: number; doubled: number; }}\n   * @slot {{}} title\n   * @slot {{ prop: number }} body - Customize the paragraph text.\n   */\n\n  export let prop = 0;\n</script>\n\n<h1>\n  <slot {prop} doubled={prop * 2} />\n  <slot name=\"title\" />\n</h1>\n\n<p>\n  <slot name=\"body\" {prop} />\n</p>\n```\n\n### `@event`\n\nUse the `@event` tag to type dispatched events. An event name is required and a description optional.\n\nUse `null` as the value if no event detail is provided.\n\nSignature:\n\n```js\n/**\n * @event {EventDetail} eventname [event description]\n */\n```\n\nExample:\n\n```js\n/**\n * @event {{ key: string }} button:key\n * @event {null} key – Fired when `key` changes.\n */\n\nexport let key = \"\";\n\nimport { createEventDispatcher } from \"svelte\";\n\nconst dispatch = createEventDispatcher();\n\n$: dispatch(\"button:key\", { key });\n$: if (key) dispatch(\"key\");\n```\n\nOutput:\n\n```ts\nexport default class Component extends SvelteComponentTyped<\n  ComponentProps,\n  {\n    \"button:key\": CustomEvent<{ key: string }>;\n    /** Fired when `key` changes. */ key: CustomEvent<null>;\n  },\n  {}\n> {}\n```\n\n### `@restProps`\n\n`sveld` can pick up inline HTML elements that `$$restProps` is forwarded to. However, it cannot infer the underlying element for instantiated components.\n\nYou can use the `@restProps` tag to specify the element tags that `$$restProps` is forwarded to.\n\nSignature:\n\n```js\n/**\n * Single element\n * @restProps {tagname}\n *\n * Multiple elements\n * @restProps {tagname-1 | tagname-2 | tagname-3}\n */\n```\n\nExample:\n\n```svelte\n<script>\n  /** @restProps {h1 | button} */\n  export let edit = false;\n\n  import Button from \"../\";\n</script>\n\n{#if edit}\n  <Button {...$$restProps} />\n{:else}\n  <h1 {...$$restProps}><slot /></h1>\n{/if}\n```\n\n### `@extends`\n\nIn some cases, a component may be based on another component. The `@extends` tag can be used to extend generated component props.\n\nSignature:\n\n```js\n/**\n * @extends {<relative path to component>} ComponentProps\n */\n```\n\nExample:\n\n```js\n/** @extends {\"./Button.svelte\"} ButtonProps */\n\nexport const secondary = true;\n\nimport Button from \"./Button.svelte\";\n```\n\n### `@generics`\n\nCurrently, to define generics for a Svelte component, you must use [`generics` attribute](https://github.com/dummdidumm/rfcs/blob/bfb14dc56a70ec6ddafebf2242b8e1500e06a032/text/ts-typing-props-slots-events.md#generics) on the script tag. Note that this feature is [experimental](https://svelte.dev/docs/typescript#experimental-advanced-typings) and may change in the future.\n\nHowever, the `generics` attribute only works if using `lang=\"ts\"`; the language server will produce an error if `generics` is used without specifying `lang=\"ts\"`.\n\n```svelte\n<!-- This causes an error because `lang=\"ts\"` must be used. -->\n<script generics=\"Row extends DataTableRow = any\"></script>\n```\n\nBecause `sveld` is designed to support JavaScript-only usage as a baseline, the API design to specify generics uses a custom JSDoc tag `@generics`.\n\nSignature:\n\n```js\n/**\n * @generics {GenericParameter} GenericName\n */\n```\n\nExample\n\n```js\n/**\n * @generics {Row extends DataTableRow = any} Row\n */\n```\n\nThe generated TypeScript definition will resemble the following:\n\n```ts\nexport default class Component<Row extends DataTableRow = any> extends SvelteComponentTyped<\n  ComponentProps<Row>,\n  Record<string, any>,\n  Record<string, any>\n> {}\n```\n\nFor a parameter list, the name should be comma-separated but not include spaces.\n\n```js\n/**\n * @generics {Param1, Param2} Name1,Name2\n */\n```\n\n```ts\nexport default class Component<Param1, Param2> extends SvelteComponentTyped<\n  ComponentProps<Name1, Name2>,\n  Record<string, any>,\n  Record<string, any>\n> {}\n```\n\n### `@component` comments\n\nThe Svelte Language Server supports component-level comments through the following syntax: `<!-- @component [comment] -->`.\n\n`sveld` will copy these over to the exported default component in the TypeScript definition.\n\nExample:\n\n```svelte\n<!-- @component\n@example\n<Button>\n  Text\n</Button>\n-->\n<button>\n  <slot />\n</button>\n```\n\nOutput:\n\n```ts\n/**\n * @example\n * <Button>\n *   Text\n * </Button>\n */\nexport default class Button extends SvelteComponentTyped<ButtonProps, {}, { default: {} }> {}\n```\n\n## Contributing\n\nRefer to the [contributing guidelines](CONTRIBUTING.md).\n\n## License\n\n[Apache-2.0](LICENSE)\n\n[npm]: https://img.shields.io/npm/v/sveld.svg?color=262626&style=for-the-badge\n[npm-url]: https://npmjs.com/package/sveld\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 2951],
		[3596, 5234],
		[3603, 3613],
		[3610, 2681],
		[3617, 3389],
		[3624, 4041],
		[3631, 3100],
		[3638, 3022],
		[3645, 1507],
		[3652, 2632],
		[3659, 3229],
		[3666, 3164],
		[3673, 4295],
		[3680, 3987],
		[3687, 3704],
		[3694, 3715],
		[3701, 3576],
		[3708, 3631],
		[3715, 3735],
		[3722, 3414],
		[3729, 3260],
		[3736, 2818],
		[3743, 3540],
		[3750, 2894],
		[3757, 3561],
		[3764, 3478],
		[3771, 3979],
		[3778, 3699],
		[3785, 4641],
		[3792, 6063],
		[3799, 5606],
		[3806, 5827],
		[3813, 6028],
		[3820, 5550],
		[3827, 4254],
		[3834, 4121],
		[3841, 4578],
		[3848, 5866],
		[3855, 4832],
		[3862, 5328],
		[3869, 6400],
		[3876, 7902],
		[3883, 6965],
		[3890, 7786],
		[3897, 7515],
		[3904, 7308],
		[3911, 6704],
		[3918, 6600],
		[3925, 6744],
		[3932, 5992],
		[3939, 6739],
		[3946, 5258],
		[3953, 5185],
		[3960, 4447],
		[3967, 4403],
		[3974, 4480],
		[3981, 5676],
		[3988, 5570],
		[3995, 5537],
		[4002, 4319],
		[4009, 1834],
		[4016, 2028],
		[4023, 2949],
		[4030, 3810],
		[4037, 2844],
		[4044, 3436],
		[4051, 3317],
		[4058, 3074],
		[4065, 3012],
		[4072, 3785],
		[4079, 3677],
		[4086, 3676],
		[4093, 3668],
		[4100, 2667],
		[4107, 2746],
		[4114, 2841],
		[4121, 2555],
		[4128, 2077]
	],
	"esm": false,
	"cjs": true
}
