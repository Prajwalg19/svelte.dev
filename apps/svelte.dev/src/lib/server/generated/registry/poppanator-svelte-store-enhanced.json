{
	"name": "@poppanator/svelte-store-enhanced",
	"description": "Enhance Svelte stores with additional methods and features.",
	"repo_url": "https://github.com/poppa/svelte-store-enhanced",
	"authors": ["poppanator_"],
	"homepage": "https://github.com/poppa/svelte-store-enhanced#readme",
	"downloads": 5,
	"updated": "2023-08-30T10:22:39.366Z",
	"tags": ["miscellaneous"],
	"github_stars": 0,
	"typescript": true,
	"version": "1.0.0",
	"svelte_range": "^4.0.0",
	"kit_range": "^1.20.4",
	"last_rune_check_version": "1.0.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@poppanator/svelte-store-enhanced",
				"version": "1.0.0",
				"size": 66079
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Svelte Store Enhanced\n\nA collection of \"enhanced\" Svelte stores\n\n# Table Of Contents\n\n1. [WritableEnhanced](#writableenhancedt)\n   1. [Usage](#usage)\n2. [ToggleStore](#togglestoret)\n   1. [Usage](#usage-1)\n3. [Narrow Imports](#narrow-imports)\n\n## Install\n\n```\nnpm i -D @poppanator/svelte-store-enhanced\n```\n\n```\nyarn add --dev @poppanator/svelte-store-enhanced\n```\n\n## `WritableEnhanced<T>`\n\nThis is pretty much a standard `Writable<T>` store with the added `up()` method\nwhich lets you update multiple properties at once in the store data, if the\nstore data is an object.\n\nIt also has the `get()` method which lets you retrieve store data in a\nnon-Svelte context, i.e. equivalent to Svelte's `get(theStore)`\n\nThis is the type declaration for the `WritableEnhanced<T>` store\n\n````ts\n/**\n * A store extending a Svelte {@link Writable} store\n *\n * @template T - The type of the data\n */\nexport type WritableEnhanced<T> = Writable<T> & {\n  /**\n   * Update the store with `values`\n   *\n   * These are equivalent\n   * ```\n   * store.up({ myKey: 'some value' })\n   *\n   * store.update((curr) => {\n   *   curr.myKey = 'some value'\n   *   return curr\n   * })\n   * ```\n   */\n  up(values: Partial<T>): void\n\n  /**\n   * Getter for the internal store data\n   *\n   * These are equivalent:\n   *\n   * ```\n   * const storeData = someStore.get()\n   * ```\n   *\n   * and\n   *\n   * ```\n   * import { get } from 'svelte/store'\n   * const storeData = get(someStore)\n   * ```\n   */\n  get(): T\n\n  /**\n   * Get the value of property `key` from the internal store data\n   *\n   * These are equivalent:\n   *\n   * ```\n   * const someValue = someStore.get('myProp')\n   * ```\n   *\n   * and\n   *\n   * ```\n   * import { get } from 'svelte/store'\n   * const storeData = get(someStore).myProp\n   * ```\n   */\n  get<K extends keyof T>(key: K): T[K]\n}\n````\n\n### Usage\n\nYou can either enhance an existing Svelte writable store, or just pass the\ninitial state to the `wriableEnhanced()` method\n\n```svelte\n<script lang=\"ts\">\nimport { writableEnhanced } from '@poppanator/svelte-store-enhanced'\n\nconst store = writableEnhanced({ lang: 'Svelte', version: '3', cool: 'yes' })\n\nstore.up({ version: '4', cool: 'very' })\n</script>\n```\n\nThe above `store.up(...)` is the equivalent of\n\n```svelte\n<script lang=\"ts\">\nstore.update((curr) => {\n  curr.version = '4'\n  curr.cool = 'very'\n\n  return curr\n})\n</script>\n```\n\nAs stated above, you can also \"enhance\" an existing Svelte writable\nstore like so:\n\n```svelte\n<script lang=\"ts\">\nimport { writable } from 'svelte/store'\nimport { writableEnhanced } from '@poppanator/svelte-store-enhanced'\n\nconst orgStore = writable({\n  name: 'Rich Harris',\n  creatorOf: ['svelte', 'rollup', 'degit'],\n})\n\nconst store = writableEnhanced(orgStore)\n</script>\n```\n\nIf you need to retrieve data from a store in a non-Svelte context, you\ncan call `store.get()`, to get the data. This method also takes a\nspecific store property as argument if that particular property is\nwanted\n\n```ts\n// some-file.ts\n\nexport function verifyStoreName(store: WritableEnhanced<MyState>) {\n  const name = store.get('name')\n\n  if (name !== 'Rich Harris') {\n    throw new Error('Bad Name')\n  }\n}\n\nexport function verifyStore(store: WritableEnhanced<MyState>) {\n  verifyStoreName(store)\n\n  const allData = store.get()\n\n  if (!allData.creatorOf.includes('svelte')) {\n    throw new Error('Missing Svelte in creatorOf')\n  }\n}\n```\n\n## `ToggleStore<T>`\n\nThe `ToggleStore<T>` is a store for keeping `boolean` states for given\nproperty names. This is useful when implementing things like _accordions_ and\nsuch.\n\nThis is the type declaration for the toggle store:\n\n```ts\nexport type ToggleStore<T extends ToggleMap> = Writable<T> & {\n  /** Toggle the state of `key` */\n  toggle: (key: keyof T) => ToggleStore<T>\n\n  /**\n   * Set the state of all items\n   *\n   * @param state -\n   *  - `on` will set all items to `true`\n   *  - `off` will set all items to `false`\n   *  - `toggle` will toggle the state of all items\n   */\n  every: (state: 'on' | 'off' | 'toggle') => ToggleStore<T>\n\n  /** Set the state of `key` to active, i.e. `true` */\n  on: (key: keyof T) => ToggleStore<T>\n\n  /** Set the state of `key` to inactive, i.e. `false` */\n  off: (key: keyof T) => ToggleStore<T>\n\n  /** Toggle `key` and disable any other active key  */\n  swap: (key: keyof T) => ToggleStore<T>\n\n  /** Reset the store to its initial values */\n  reset: () => ToggleStore<T>\n}\n```\n\n### Usage\n\n```svelte\n<script lang=\"ts\">\nimport { toggle } from '@poppanator/svelte-store-enhanced'\n\nconst store = toggle({ one: true, two: false, three: false })\n</script>\n\n<div>\n  <button on:click={() => store.every('on')}>Show All</button>\n  <button on:click={() => store.every('off')}>Hide All</button>\n</div>\n\n<ul>\n  <li class:open={$store.one}>\n    <button on:click={() => store.swap('one')}>\n      <h2>First</h2>\n    </button>\n    <div>\n      <p>This is the first text</p>\n    </div>\n  </li>\n\n  <li class:open={$store.two}>\n    <button on:click={() => store.swap('two')}>\n      <h2>Second</h2>\n    </button>\n    <div>\n      <p>This is the second text</p>\n    </div>\n  </li>\n\n  <li class:open={$store.three}>\n    <button on:click={() => store.swap('three')}>\n      <h2>Third</h2>\n    </button>\n    <div>\n      <p>This is the third text</p>\n    </div>\n  </li>\n</ul>\n\n<style>\ndiv {\n  display: none;\n}\n\n.open div {\n  display: block;\n}\n</style>\n```\n\n## Narrow Imports\n\nThis package has support for importing specific \"submodules\" directly, without\nimporting them from the root. This can help with three-shaking and such, if\nthat is of concern.\n\n> **NOTE!** If you are using Typescript you have to make sure the\n> `moduleResolution` option in you `tsconfig.json` is set to `node16` or\n> `nodenext`\n\n### Example\n\n```ts\nimport { wriableEnhanced } from '@poppanator/svelte-store-enhanced/writable-enhanced'\nimport { toggle } from '@poppanator/svelte-store-enhanced/toggle'\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 4],
		[3603, 3],
		[3617, 2],
		[3624, 4],
		[3631, 1],
		[3638, 2],
		[3652, 3],
		[3659, 6],
		[3666, 2],
		[3673, 3],
		[3680, 1],
		[3694, 1],
		[3701, 1],
		[3715, 1],
		[3722, 1],
		[3743, 2],
		[3750, 1],
		[3757, 1],
		[3771, 2],
		[3778, 9],
		[3785, 1],
		[3792, 1],
		[3799, 1],
		[3806, 1],
		[3813, 2],
		[3827, 1],
		[3834, 2],
		[3841, 10],
		[3848, 1],
		[3855, 8],
		[3862, 4],
		[3876, 1],
		[3883, 2],
		[3897, 3],
		[3925, 1],
		[3932, 1],
		[3939, 2],
		[3953, 1],
		[3974, 1],
		[3995, 1],
		[4002, 1],
		[4016, 2],
		[4023, 1],
		[4030, 2],
		[4037, 7],
		[4044, 9],
		[4051, 2],
		[4058, 1],
		[4072, 1],
		[4093, 2],
		[4100, 4],
		[4107, 1],
		[4114, 5],
		[4121, 9],
		[4128, 2]
	],
	"esm": true,
	"cjs": true
}
