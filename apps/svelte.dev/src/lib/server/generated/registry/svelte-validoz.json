{
	"name": "svelte-validoz",
	"description": "Provides form validation for Svelte applications.",
	"repo_url": "https://github.com/KamyarLajani/svelte-validoz",
	"authors": ["kamyar_lajani"],
	"homepage": "https://github.com/KamyarLajani/svelte-validoz#readme",
	"downloads": 22,
	"updated": "2020-11-24T22:49:21.267Z",
	"tags": ["miscellaneous"],
	"github_stars": 3,
	"typescript": false,
	"version": "1.1.0",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "1.1.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-validoz",
				"version": "1.1.0",
				"size": 94824
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-validoz\n\nsvelte-validoz is [Validoz](https://www.npmjs.com/package/validoz) for Svelte for `form validation`.\n\nSee [svelte-yup](https://github.com/KamyarLajani/svelte-yup) better library for data validation\n\n### Installation\n\n```sh\n$ npm install svelte-validoz\n```\n\n![GIF demo](https://raw.githubusercontent.com/KamyarLajani/svelte-validoz/main/demo1.gif)\n\n\n### Sample code\n\n```html\n<script>\nimport {validoz, isValid, Message} from 'svelte-validoz';\nimport {fields} from './form.js';\nlet result;\nlet submited = false;\n$: if(submited){\n    result = validoz(fields);\n}\nlet formSubmit = () =>{\n    submited = true;\n    result = validoz(fields);\n    // if everything validated\n    if(isValid(result)){\n        alert('Everything is validated!');\n    }\n}\n</script>\n```\n```html\n<form on:submit|preventDefault=\"{formSubmit}\">\n    <h4>Form</h4>\n    <input type=\"text\" placeholder=\"Enter email\" bind:value=\"{fields[0].value}\"><br>\n    <Message result={result} name=\"Email address\"/>\n    <input type=\"number\" placeholder=\"Age\" bind:value=\"{fields[1].value}\"><br>\n    <Message result={result} name=\"Age\"/>\n    <button type=\"submit\">Submit</button>\n</form>\n```\n```js\n// form.js file\nexport let fields = [\n    {\n        name: \"Email address\",\n        type: \"email\",\n        value: '',\n        // you can pass your custom properties\n    },\n    {\n        name: \"Age\",\n        type: \"number\",\n        value: 12,\n        min: 18\n    },\n];\n```\nRemove those lines below if you want to revalidate only after submits.\n\n```js\nlet submited = false;\n$: if(submited){\n    result = validoz(fields);\n}\n```\n#### All messages in one place\nExample below to put all messages in one place by `AllMessages` component\n```html\n<script>\nimport {validoz, isValid, AllMessages} from 'svelte-validoz';\nimport {fields} from './form.js';\nlet result;\nlet submited = false;\n$: if(submited){\n    result = validoz(fields);\n}\nlet formSubmit = () =>{\n    submited = true;\n    result = validoz(fields);\n    // if everything validated\n    if(isValid(result)){\n        alert('Everything is validated!');\n    }\n}\n</script>\n```\n```html\n<form on:submit|preventDefault=\"{formSubmit}\">\n    <h4>Form</h4>\n    <input type=\"text\" placeholder=\"Enter email\" bind:value=\"{fields[0].value}\"><br>\n    <input type=\"number\" placeholder=\"Age\" bind:value=\"{fields[1].value}\"><br>\n    <AllMessages result={result}/> // add it once\n    <button type=\"submit\">Submit</button>\n</form>\n```\n\n### Date example\n```js\nimport {validoz, isValid, isValidByName} from 'validoz';\nlet field = [\n{\n    name: \"Date\",\n    type: \"date\",\n    value: '24/05/2020',\n    dateFormat: 'dd/mm/yyyy',\n    startDate: '08/02/2020',\n    endDate: '24/05/2020',\n}\n];\n\nlet result = validoz(field);\nconsole.log(result); // { field: 'Date', message: '' }\nisValid(result); // true\nisValidByName(result, 'Date'); // true\n```\n\n### Types\n\n| name | Description |\n| ------ | ------ |\n| `text` | Any characters |\n| `password` | String must contain at least one numberic, one upper case, one lower case characters and the length at least 6 characters |\n| `fullname` | String should contain at least 2 words with 3 characters for each of the words and separated by space. It can contain more than one word.|\n| `username` | Like Instagram username. |\n| `word` | Alphabet characters. |\n| `number` | An integer number |\n| `date` | Example `21/03/2020` string. |\n| `time` | Example `05:12` string. |\n\n### Field properties\n\n| name | Description |\n| ------------- | ------ |\n| `name` | Field name |\n| `value` | Field value |\n| `type` | Field type |\n| `required` | `Boolean`. default: `true` |\n| `min` and `max` | Minumum and Maximum of type number. Each of them can be passed alone. |\n| `minDigits` and `maxDigits` | Minumum and Maximum digits of type number. Each of them can be passed alone. |\n| `minLength` and `maxLength` | Minimum and Maximum length of the string types. |\n| `dateFormat` | String values of `mm/dd/yyyy`, `mm-dd-yyyy`, `dd/mm/yyyy`, `dd-mm-yyyy`, `yyyy/mm/dd` and `yyyy-mm-dd` |\n| `equal` | A field value and equal value to be equal. |\n| `notEqual` | A field value and equal value not to be equal. |\n\n\n### Other example\n\n```js\nlet {validoz, isValid, isValidByName} = require('validoz');\n\nlet {field} = require('./form.js');\nlet result = validoz(field);\nconsole.log(result); \n/*\nReturns: \n[\n  { field: 'Full name', message: '' },\n  { field: 'Email address', message: 'Email address is invalid' },\n  { field: 'Age', message: 'Age must be between 18 and 60' },\n  { field: 'Best friend', message: 'Best friend value is wrong' },\n  {\n    field: 'Password',\n    message: 'Password must contain at least one numberic, one upper case, one lower case characters and the length at least 6 characters'\n  }\n]\n*/\nisValid(result); // false\nisValid(result); // false\nisValid(result[0]); // \"Full name\", true\nisValidByName(result, 'Full name'); // true\nisValidByName(result, 'Email address'); // false\nisValidByName(result, 'Password'); // false\n```\n\n\n```js\n// form.js file\nexport let field = [\n    {\n        name: \"Full name\",\n        type: \"text\",\n        value: 'Hello world',\n        minLength: 6\n    },\n    {\n        name: \"Email address\",\n        type: \"email\",\n        value: 'example@.com'\n    },\n    {\n        name: \"Age\",\n        type: \"number\",\n        value: 12,\n        min: 18,\n        max: 60,\n    },\n    {\n        name: \"Best friend\",\n        type: \"text\",\n        value: 'Doe',\n        equal: 'John' // value must be John\n    },\n    {\n        name: \"Password\",\n        type: \"password\", // you can also pass text if you don't want regex pattern to be conditioned\n        value: '123456',\n        minLength: 6,\n        maxLength: 30,\n    }\n];\n```\n\n### Other Examples with source code\n - [Example1](https://github.com/KamyarLajani/svelte-validoz/blob/main/src/Example1.svelte)\n - [Example2](https://github.com/KamyarLajani/svelte-validoz/blob/main/src/Example2.svelte)\n - [Integerating with Svelte Material UI (SMUI)](https://github.com/KamyarLajani/svelte-validoz/blob/main/src/ExampleSMUI.svelte)\n\n### Author\nKamyar Lajani\n\nLicense\n----\n\nMIT\n\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 14],
		[3603, 14],
		[3610, 12],
		[3617, 1],
		[3631, 1],
		[3645, 1],
		[3652, 1],
		[3659, 1],
		[3666, 15],
		[3673, 12],
		[3680, 2],
		[3687, 2],
		[3694, 1],
		[3701, 7],
		[3708, 3],
		[3722, 8],
		[3729, 25],
		[3736, 2],
		[3743, 10],
		[3750, 5],
		[3757, 8],
		[3764, 6],
		[3771, 11],
		[3778, 4],
		[3785, 12],
		[3792, 4],
		[3799, 2],
		[3806, 7],
		[3813, 3],
		[3820, 11],
		[3827, 14],
		[3834, 3],
		[3841, 11],
		[3848, 5],
		[3855, 62],
		[3862, 9],
		[3869, 7],
		[3876, 5],
		[3883, 9],
		[3890, 25],
		[3897, 5],
		[3904, 3],
		[3911, 5],
		[3918, 3],
		[3925, 4],
		[3932, 7],
		[3939, 3],
		[3946, 1],
		[3953, 1],
		[3960, 6],
		[3967, 4],
		[3974, 1],
		[3981, 8],
		[3988, 4],
		[3995, 2],
		[4002, 7],
		[4009, 9],
		[4016, 17],
		[4023, 21],
		[4030, 19],
		[4037, 16],
		[4044, 10],
		[4051, 6],
		[4058, 2],
		[4065, 3],
		[4072, 7],
		[4079, 6],
		[4086, 2],
		[4093, 13],
		[4100, 13],
		[4107, 11],
		[4114, 22],
		[4121, 35],
		[4128, 8],
		[4135, 10]
	]
}
