{
	"name": "svelte-crop-window",
	"description": "Crop images, videos with touch, mouse gestures in Svelte.",
	"repo_url": "https://github.com/sabine/svelte-crop-window",
	"authors": ["sabine_s"],
	"homepage": "https://sabine.github.io/svelte-crop-window",
	"downloads": 37,
	"updated": "2022-10-20T10:31:17.590Z",
	"tags": ["ui"],
	"github_stars": 38,
	"typescript": true,
	"version": "0.1.1",
	"svelte_range": "^3.44.0",
	"last_rune_check_version": "0.1.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-crop-window",
				"version": "0.1.1",
				"size": 57925
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-crop-window\n\nA crop window component for images and videos that supports touch gestures (pinch zoom, rotate, pan), as well as mousewheel zoom, mouse-dragging the image, and rotating on right mouse button.\n\nCurrently looking for contributors / feature requests / feedback to help improve this component.\n\n![video cropper](/static/videocrop.gif)\n\nIf you can do code-review, that's very welcome.\n\nHere's a [demo page](https://sabine.github.io/svelte-crop-window/).\n\n## Installation\n\n```bash\nnpm install svelte-crop-window\n```\n\n## Basic use\n\nYou must wrap the `CropWindow` component with an Element that determines the height.\n```html\n<script>\n    import { CropWindow, defaultValue } from 'svelte-crop-window';\n\n    let media = {\n        content_type: 'image',\n        url: '/svelte-crop-window/hintersee-3601004.jpg'\n    };\n\n    let value = { ...defaultValue };\n</script>\n\n<div style=\"height:20em\">\n    <CropWindow bind:value {media} />\n</div>\n```\n\n## `CropWindow.svelte` Component\n\n### Props\n\n| name      | type                                                                    | required | purpose                                                                                      |\n| --------- | ----------------------------------------------------------------------- | -------- | -------------------------------------------------------------------------------------------- |\n| `media`   | `Media`                     | âœ“        | image or video to be cropped                                                                 |\n| `value`   | `CropValue` |          | value that describes [how to crop](https://github.com/sabine/svelte-crop-window#how-to-crop) - will be initialized if undefined |\n| `options` | [`Options`](https://github.com/sabine/svelte-crop-window#options)                                                               |          | options for the crop window and overlay, see below                                           |\n\n```typescript\ntype Media = {\n    content_type: 'image' | 'video';\n    url: string;\n}\n\ntype CropValue = {\n    position: { x: number; y: number };\n    aspect: number;\n    rotation: number;\n    scale: number; }\n}\n\nconst defaultValue: CropValue = {\n    position: { x: 0, y: 0 },\n    aspect: 1.0,\n    rotation: 0,\n    scale: 0\n};\n```\n\n### Options\n\n| name                 | type                | purpose                                                                                                                                                                                                                                                            |\n| -------------------- | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `shape`              | `'rect' \\| 'round'` | shape of the crop area (yes, an ellipse will work)                                                                                                                                                                                                                                             |\n| `crop_window_margin` | `number`            | Margin of the crop window, in pixels. The crop window will always scale to the maximum possible size in its containing element.                                                                                                                                    |\n| `overlay`            | a Svelte component  | The overlay component which visually highlights the crop area. You can pass your own Svelte component with props `options: T, gesture_in_progress: boolean, shape: 'rect' \\| 'round'` here, or use the included [Overlay.svelte](/src/lib/overlay/Overlay.svelte). |\n| `overlay_options`    | `T`                 | Options for your overlay component. See below for the options of the included overlay component.                                                                                                                                                                   |\n\n```typescript\nconst defaultOptions: Options<OverlayOptions> = {\n    shape: 'rect',\n    crop_window_margin: 10,\n    overlay: Overlay,\n    overlay_options: defaultOverlayOptions\n};\n```\n\n## `Overlay.svelte` Component\n\n### Options\n\n| name               | type      | purpose                                                              |\n| ------------------ | --------- | -------------------------------------------------------------------- |\n| `overlay_color`    | `string`  | the color of the overlay that covers everything except the crop area |\n| `line_color`       | `string`  | the color of the lines                                               |\n| `show_third_lines` | `boolean` | whether to show third lines or not when a gesture is in progress     |\n\n```typescript\nconst defaultOverlayOptions: OverlayOptions = {\n    overlay_color: 'rgb(11, 11, 11)',\n    line_color: 'rgb(167, 167, 167)',\n    show_third_lines: true\n};\n```\n\n## How to Crop\n\n### Display in HTML Without Actually Cropping:\n\n```html\n<div\n    style=\"\n        position:relative; overflow:hidden;\n        height:{HEIGHT}px; width:{value.aspect * HEIGHT}px;\n        border-radius: {options.shape == 'round' ? '50%' : '0'}\"\n>\n    <video\n        style=\"\n    transform: translateX(-50%) translateY(-50%) rotate({value.rotation}deg);\n    height: {value.scale * HEIGHT}px;\n    margin-left: {HEIGHT * value.aspect / 2 + value.position.x * HEIGHT}px;\n    margin-top: {HEIGHT / 2 + value.position.y * HEIGHT}px;\n    max-width:none\"\n        src=\"{url}\"\n    />\n</div>\n```\n\nNote: You must choose a `HEIGHT`, because the crop value is normalized against the target height.\n\n### Pseudo Code to Crop\n\n1. Choose a `target_height` and calculate the `target_width` for the cropped image:\n\n```javascript\nlet target_width = value.aspect * target_height;\n```\n\n2. Calculate factor `s` by which to scale:\n\n```javascript\nlet s = (value.scale * target_height) / media.height;\n```\n\n3. Scale media by `s`:\n\n```javascript\nlet resized_media = scale(media, s);\n```\n\n4. Rotate media by `value.rotation`:\n\n```javascript\nlet resized_and_rotated_media = rotate(resized_media, value.rotation);\n```\n\n5. Calculate top left position of the area to extract:\n\n```javascript\nlet left = (resized_and_rotated_media.width - target_width) / 2.0 \n            - value.x * target_height;\nlet top = (resized_and_rotated_media.height - target_height) / 2.0\n           - value.y * target_height;\n```\n\n6. Extract area:\n\n```javascript\nlet cropped_media =\n    extract_area(resized_and_rotated_media,\n                 left, top, target_width, target_height);\n```\n\n## What this component doesn't do\n\n1. Does not modify/crop the image, you have to do that by whatever means make sense for your application. Doesn't (yet) provide usable controls. Currently, you need to implement your own.\n2. Similar to the overlay, it would be nice to include some controls to make this more usable out of the box. Contributions are very welcome.\n\n## Developing\n\nOnce you've cloned the project and installed dependencies with `npm install` (or `pnpm install` or `yarn`), start a development server:\n\n```bash\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n## Acknowledgements\n\nOne big inspiration for this component was the Android library\n[uCrop by Yalantis](https://github.com/Yalantis/uCrop). What is particularly\nvaluable is that the developers shared their thought process in\n[this blog post](https://yalantis.com/blog/how-we-created-ucrop-our-own-image-cropping-library-for-android/).\n\nAnother very helpful resource was [svelte-easy-crop](https://www.npmjs.com/package/svelte-easy-crop)\nwhich gave me a basic understanding of how to implement a crop window component in Svelte\n(and HTML/JS in general).\n\nThere's no code reuse between either of these components and this one. All\ncalculations had to be recreated from textbook math.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 18],
		[3596, 34],
		[3603, 41],
		[3610, 87],
		[3617, 60],
		[3624, 17],
		[3631, 61],
		[3638, 29],
		[3645, 59],
		[3652, 21],
		[3659, 23],
		[3666, 26],
		[3673, 22],
		[3680, 15],
		[3687, 25],
		[3694, 110],
		[3701, 154],
		[3708, 86],
		[3715, 79],
		[3722, 41],
		[3729, 46],
		[3736, 57],
		[3743, 46],
		[3750, 83],
		[3757, 39],
		[3764, 16],
		[3771, 19],
		[3778, 41],
		[3785, 44],
		[3792, 17],
		[3799, 25],
		[3806, 56],
		[3813, 19],
		[3820, 20],
		[3827, 38],
		[3834, 83],
		[3841, 19],
		[3848, 16],
		[3855, 74],
		[3862, 25],
		[3869, 41],
		[3876, 42],
		[3883, 82],
		[3890, 75],
		[3897, 55],
		[3904, 63],
		[3911, 56],
		[3918, 82],
		[3925, 27],
		[3932, 91],
		[3939, 78],
		[3946, 40],
		[3953, 53],
		[3960, 29],
		[3967, 45],
		[3974, 44],
		[3981, 119],
		[3988, 73],
		[3995, 42],
		[4002, 34],
		[4009, 36],
		[4016, 28],
		[4023, 90],
		[4030, 52],
		[4037, 31],
		[4044, 51],
		[4051, 75],
		[4058, 17],
		[4065, 89],
		[4072, 62],
		[4079, 95],
		[4086, 29],
		[4093, 43],
		[4100, 16],
		[4107, 29],
		[4114, 37],
		[4121, 19],
		[4128, 15]
	]
}
