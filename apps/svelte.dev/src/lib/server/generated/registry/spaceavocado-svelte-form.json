{
	"name": "@spaceavocado/svelte-form",
	"description": "Handle Svelte form models and input validations.",
	"repo_url": "https://github.com/spaceavocado/svelte-form",
	"authors": ["davidhorak"],
	"homepage": "https://github.com/spaceavocado/svelte-form",
	"downloads": 870,
	"updated": "2019-10-11T14:37:50.096Z",
	"tags": ["miscellaneous"],
	"github_stars": 47,
	"typescript": false,
	"version": "1.0.4",
	"svelte_range": "^3.8.1",
	"last_rune_check_version": "1.0.4",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@spaceavocado/svelte-form",
				"version": "1.0.4",
				"size": 38213
			},
			{
				"name": "@spaceavocado/type-check",
				"version": "1.0.2",
				"size": 21447
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# Svelte Form\r\nSimple [Svelte](#https://svelte.dev) Form model handler and form fields validation library. It is designed to give maximum freedom in the actual input component construction, i.e. there are not actual build-in input components, rather examples how to build one.\r\n\r\nTo see the details code documentation, please read the [Code Documentation](https://spaceavocado.github.io/svelte-form/).\r\n\r\n**Quick Links**\r\n* [Webpack Setup](#webpack-setup)\r\n* [Rollup Setup](#rollup-setup)\r\n\r\n**Table of Content**\r\n- [Svelte Form](#svelte-form)\r\n  - [Installation via NPM or Yarn](#installation-via-npm-or-yarn)\r\n  - [Webpack Setup](#webpack-setup)\r\n  - [Rollup Setup](#rollup-setup)\r\n  - [Essentials](#essentials)\r\n    - [Create the Form](#create-the-form)\r\n    - [Input Binding](#input-binding)\r\n    - [Form State](#form-state)\r\n    - [Form Data](#form-data)\r\n    - [Form Field Validation](#form-field-validation)\r\n    - [Builtin Validation Rules](#builtin-validation-rules)\r\n      - [Required](#required)\r\n      - [Equal](#equal)\r\n      - [Email](#email)\r\n      - [URL](#url)\r\n      - [Min](#min)\r\n      - [Max](#max)\r\n      - [Between](#between)\r\n      - [Regular Expression](#regular-expression)\r\n      - [Exclude](#exclude)\r\n      - [Include](#include)\r\n      - [Ignore Empty](#ignore-empty)\r\n    - [Custom Validation Rule](#custom-validation-rule)\r\n    - [Trigger Form Validation](#trigger-form-validation)\r\n  - [API](#api)\r\n    - [Create Form](#create-form)\r\n      - [Form Options](#form-options)\r\n    - [Form Object](#form-object)\r\n    - [Form Field Object](#form-field-object)\r\n  - [Changes](#changes)\r\n  - [About](#about)\r\n  - [Contributing](#contributing)\r\n    - [Pull Request Process](#pull-request-process)\r\n  - [License](#license)\r\n\r\n## Installation via NPM or Yarn\r\n```sh\r\nnpm install -D @spaceavocado/svelte-form\r\n```\r\n```sh\r\nyarn add @spaceavocado/svelte-form -D\r\n```\r\n\r\n## Webpack Setup\r\nPlease see the [Svelte Webpack Template](https://github.com/sveltejs/template-webpack).\r\nImportant setup in the **webpack.config.js**:\r\n```javascript\r\nresolve: {\r\n  // This alias is important to prevent svelte mismatch\r\n  // between your code, and the 3rd party components.\r\n  alias: {\r\n    svelte: path.resolve('node_modules', 'svelte')\r\n  },\r\n  extensions: ['.mjs', '.js', '.svelte'],\r\n  mainFields: ['svelte', 'browser', 'module', 'main']\r\n},\r\n\r\nmodule: {\r\n  rules: [\r\n    {\r\n      test: /\\.svelte$/,\r\n      // Do not exclude: /(node_modules)/ since the router \r\n      // components are located in the node_modules\r\n      use: {\r\n        loader: 'svelte-loader',\r\n        options: {\r\n          emitCss: true,\r\n          hotReload: true\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n## Rollup Setup\r\nrollup.config.js:\r\n```javascript\r\nimport babel from 'rollup-plugin-babel';\r\nimport resolve from 'rollup-plugin-node-resolve';\r\nimport commonjs from 'rollup-plugin-commonjs';\r\nimport svelte from 'rollup-plugin-svelte';\r\n\r\nexport default {\r\n  input: './src/index.js',\r\n  output: {\r\n    file: './dist/bundle.js',\r\n    format: 'iife'\r\n  },\r\n  plugins: [\r\n    resolve(),\r\n    commonjs({\r\n      include: 'node_modules/**',\r\n    }),\r\n    svelte(),\r\n    babel({\r\n      exclude: 'node_modules/**',\r\n    }),\r\n  ]\r\n}\r\n```\r\n\r\n## Essentials\r\nNote: All code below uses ES2015+.\r\n\r\n### Create the Form\r\nform.svelte:\r\n```javascript\r\nimport createForm from '@spaceavocado/svelte-form';\r\n\r\n// An example of a form without validation\r\nconst form = createForm({\r\n  username: '',\r\n  password: '',\r\n});\r\n```\r\n> To get more details about the createForm method, please see [Create Form](#create-form).\r\n\r\n### Input Binding\r\nform.svelte:\r\n```html\r\n<script>\r\nimport createForm from '@spaceavocado/svelte-form';\r\nimport TextInput from './input/text.svelte';\r\n\r\n// An example of a form without validation\r\nconst form = createForm({\r\n  username: '',\r\n  password: '',\r\n});\r\n</script>\r\n\r\n<TextInput form={form} name='username' />\r\n```\r\ntext.svelte:\r\n```html\r\n<script>\r\n  // Props\r\n  export let form;\r\n  export let name;\r\n\r\n  // Get the form field\r\n  $: field = form.field(name);\r\n  // Value svelte store\r\n  $: value = field.value;\r\n  // State svelte store, {valid: boolean, error: string}\r\n  $: state = field.state;\r\n</script>\r\n\r\n<div class=\"input\" class:error=\"{$state.valid === false}\">\r\n  <input type=\"text\" bind:value=\"{$value}\" />\r\n  <p class=\"validation\">{$state.error}</p>\r\n</div>\r\n\r\n<style lang=\"scss\">\r\n.input {\r\n  .validation {\r\n    display: none;\r\n  }\r\n  &.error {\r\n    .validation {\r\n      display: block;\r\n    }\r\n  }\r\n}\r\n</style>\r\n```\r\n* The state store is a derived store based on the value store, performing the input validation each time the value changes.\r\n* The **form.field(name)** method gets the field stores, for more details see [Form Field Object](#form-field-object).\r\n\r\n### Form State\r\nThe form state is a svelte store holding the form validation state.\r\n\r\nform.svelte:\r\n```javascript\r\nimport createForm from '@spaceavocado/svelte-form';\r\n\r\n// An example of a form without validation\r\nconst form = createForm({\r\n  username: '',\r\n  password: '',\r\n});\r\n\r\n// You can directly subscribe to form state change\r\nform.subscribe((f) => console.log(f.valid));\r\n// or shorthand access.\r\nconsole.log($form.valid)\r\n```\r\n\r\n> To get more details about the form, please see [Form Object](#form-object).\r\n\r\n### Form Data\r\nYou can get the current form date anytime by calling:\r\n```javascript\r\nimport createForm from '@spaceavocado/svelte-form';\r\n\r\n// An example of a form without validation\r\nconst form = createForm({\r\n  username: '',\r\n  password: '',\r\n});\r\n\r\n// Get the form current data\r\nconst data = form.data();\r\n```\r\n\r\n### Form Field Validation\r\nValidation functions could be passed for individual form fields:\r\n\r\n```javascript\r\nimport createForm from '@spaceavocado/svelte-form';\r\nimport {required, email} from '@spaceavocado/svelte-form';\r\n\r\n// An example of a form without validation\r\nconst form = createForm(\r\n  // Form fields\r\n  {\r\n    username: '',\r\n    password: '',\r\n  },\r\n  // Form validation - optional\r\n  // Collection of validation rules or single rule.\r\n  {\r\n    username: [\r\n      required('This field is required'),\r\n      email('Invalid email format')\r\n    ],\r\n    password: required('This field is required'),\r\n  }\r\n);\r\n```\r\n\r\n**More information:**\r\n* [Builtin Validation Rules](#builtin-validation-rules).\r\n* [Custom Validation Rule](#custom-validation-rule).\r\n\r\n### Builtin Validation Rules\r\n\r\n#### Required\r\n```javascript\r\nimport {required} from '@spaceavocado/svelte-form';\r\n\r\n// Create new rule\r\nconst rule = required('Error message');\r\n```\r\n\r\n#### Equal\r\n```javascript\r\nimport {equal} from '@spaceavocado/svelte-form';\r\n\r\n// The value must be equal to 5\r\nconst rule = equal('Error message', 5);\r\n\r\n// Equal can accept fn(val)->boolean as an argument for a custom\r\n// equality matching.\r\nconst customMatcherRule = equal('Error message', (val) => {\r\n  return val === 5;\r\n});\r\n```\r\n\r\n#### Email\r\n```javascript\r\nimport {email} from '@spaceavocado/svelte-form';\r\n\r\n// Create new rule\r\nconst rule = email('Error message');\r\n```\r\n\r\n#### URL\r\n```javascript\r\nimport {url} from '@spaceavocado/svelte-form';\r\n\r\n// Create new rule\r\nconst rule = url('Error message');\r\n```\r\n\r\n#### Min\r\n```javascript\r\nimport {min} from '@spaceavocado/svelte-form';\r\n\r\n// The value must be 5 and more.\r\nconst rule = min('Error message', 5);\r\n```\r\n\r\n#### Max\r\n```javascript\r\nimport {max} from '@spaceavocado/svelte-form';\r\n\r\n// The value must be 5 and less.\r\nconst rule = max('Error message', 5);\r\n```\r\n\r\n#### Between\r\n```javascript\r\nimport {between} from '@spaceavocado/svelte-form';\r\n\r\n// The value must be between 5 and 10 inclusively.\r\nconst rule = between('Error message', 5, 10);\r\n```\r\n\r\n#### Regular Expression\r\n```javascript\r\nimport {rx} from '@spaceavocado/svelte-form';\r\n\r\n// The value must match custom regular expression.\r\nconst rule = rx('Error message', /\\d+\\.\\d+/);\r\n```\r\n\r\n#### Exclude\r\n```javascript\r\nimport {exclude} from '@spaceavocado/svelte-form';\r\n\r\n// The value must not be present in the exclusion array.\r\nconst ruleA = exclude('Error message', [1, 2]);\r\nconst ruleB = exclude('Error message', ['toronto', 'new-york']);\r\n```\r\n\r\n#### Include\r\n```javascript\r\nimport {include} from '@spaceavocado/svelte-form';\r\n\r\n// The value must be present in the inclusion array.\r\nconst ruleA = include('Error message', [1, 2]);\r\nconst ruleB = include('Error message', ['toronto', 'new-york']);\r\n```\r\n\r\n#### Ignore Empty\r\nThis is a special rule which might be used to the ignore empty fields, i.e. any other validation rules will be tested only if the value in not empty.\r\n```javascript\r\nimport {ignoreEmpty, url} from '@spaceavocado/svelte-form';\r\n\r\n// An example usage\r\nconst form = createForm(\r\n  // Form fields\r\n  {\r\n    website: '',\r\n  },\r\n  // URL validation will be tested only if the website in not empty.\r\n  {\r\n    website: [\r\n      ignoreEmpty(),\r\n      url('Invalid URL'),\r\n    ],\r\n  }\r\n);\r\n\r\n```\r\n\r\n### Custom Validation Rule\r\nCustom validation rule must be a function accepting a tested value, and expected to return true when valid, or error message string in not valid, e.g.:\r\n```javascript\r\nconst invoice = (msg) => (value) => {\r\n  if (value.match(/inv-\\d+/) === null) {\r\n    return msg;\r\n  }\r\n  return true;\r\n}\r\n\r\n// The actual rule expected by the form field, e.g. fn(val)->true|string\r\nconst rule = invoice('Invalid invoice number');\r\n```\r\n\r\n### Trigger Form Validation\r\nValidation could be trigger all fields in this manner:\r\n\r\n```javascript\r\nimport createForm from '@spaceavocado/svelte-form';\r\nimport {required, email} from '@spaceavocado/svelte-form';\r\n\r\n// An example of a form without validation\r\nconst form = createForm(\r\n  // Form fields\r\n  {\r\n    username: '',\r\n    password: '',\r\n  },\r\n  // Form validation - optional\r\n  // Collection of validation rules or single rule.\r\n  {\r\n    username: [\r\n      required('This field is required'),\r\n      email('Invalid email format')\r\n    ],\r\n    password: required('This field is required'),\r\n  }\r\n);\r\n\r\n// Trigger validation of all fields\r\nform.validate();\r\n```\r\n\r\n## API\r\nTo see the details code documentation, please read the [Code Documentation](https://spaceavocado.github.io/svelte-form/)\r\n\r\n### Create Form\r\n```javascript\r\nimport createForm from '@spaceavocado/svelte-form';\r\n\r\n// Please see the opts below.\r\nconst formOpts = {};\r\n\r\n// Please see the Form object for details on returned object\r\nconst form = createForm(\r\n  // Form fields\r\n  {\r\n    username: '',\r\n    password: '',\r\n  },\r\n  // Form validation - optional\r\n  // Collection of validation rules or single rule.\r\n  {\r\n    username: [\r\n      required('This field is required'),\r\n      email('Invalid email format')\r\n    ],\r\n    password: required('This field is required'),\r\n  },\r\n  // Form options - optional\r\n  formOpts,\r\n);\r\n```\r\n\r\n#### Form Options\r\n| Property           | Description                                                       | Type    |\r\n| :----------------- | :---------------------------------------------------------------- | :------ |\r\n| onCreateValidation | Validate form fields when the form is created. Defaults to false. | boolean |\r\n\r\n\r\n### Form Object\r\n| Property  | Description                                                                                                    | Type     |\r\n| :-------- | :------------------------------------------------------------------------------------------------------------- | :------- |\r\n| subscribe | Svelte store, context {valid: boolean}.                                                                        | function |\r\n| field     | Get form field observable value and state. Signature fn(key), returns [Form Field Object](#form-field-object). | function |\r\n| data      | Get all form fields data. Signature fn().                                                                      | function |\r\n\r\n### Form Field Object\r\n| Property | Description                                             | Type     |\r\n| :------- | :------------------------------------------------------ | :------- |\r\n| value    | Svelte store, context: mixed value.                     | function |\r\n| state    | Svelte store, context: {valid: boolean, error: string}. | function |\r\n\r\n## Changes\r\nTo see the changes that were made in a given release, please lookup the tag on the releases page. The full changelog could be seen here [changelog.md](https://github.com/spaceavocado/svelte-form/blob/master/changelog.md)\r\n\r\n## About\r\nThis project is mainly to explore and test [Svelte](#https://svelte.dev) in SPA realm. Any feedback, contribution to this project is welcomed.\r\n\r\nThe project is in a beta phase, therefore there might be major changes in near future, the annotation should stay the same, though.\r\n\r\n## Contributing\r\nWhen contributing to this repository, please first discuss the change you wish to make via issue, email, or any other method with the owners of this repository before making a change.\r\n\r\n### Pull Request Process\r\n1. Fork it\r\n2. Create your feature branch (git checkout -b ft/new-feature-name)\r\n3. Commit your changes (git commit -am 'Add some feature')\r\n4. Push to the branch (git push origin ft/new-feature-name)\r\n5. Create new Pull Request\r\n> Please make an issue first if the change is likely to increase.\r\n\r\n## License\r\nSvelte Router is released under the MIT license. See [LICENSE.txt](https://github.com/spaceavocado/svelte-router/blob/master/LICENSE.txt).",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 23],
		[3596, 69],
		[3603, 17],
		[3610, 25],
		[3617, 27],
		[3624, 36],
		[3631, 16],
		[3638, 37],
		[3645, 40],
		[3652, 32],
		[3659, 35],
		[3666, 36],
		[3673, 24],
		[3680, 22],
		[3687, 34],
		[3694, 36],
		[3701, 33],
		[3708, 52],
		[3715, 63],
		[3722, 41],
		[3729, 41],
		[3736, 13],
		[3743, 28],
		[3750, 43],
		[3757, 36],
		[3764, 50],
		[3771, 44],
		[3778, 34],
		[3785, 73],
		[3792, 58],
		[3799, 69],
		[3806, 46],
		[3813, 32],
		[3820, 21],
		[3827, 38],
		[3834, 25],
		[3841, 50],
		[3848, 35],
		[3855, 49],
		[3862, 94],
		[3869, 43],
		[3876, 74],
		[3883, 110],
		[3890, 78],
		[3897, 100],
		[3904, 87],
		[3911, 77],
		[3918, 95],
		[3925, 58],
		[3932, 73],
		[3939, 53],
		[3946, 65],
		[3953, 45],
		[3960, 83],
		[3967, 67],
		[3974, 106],
		[3981, 75],
		[3988, 41],
		[3995, 77],
		[4002, 58],
		[4009, 65],
		[4016, 53],
		[4023, 81],
		[4030, 81],
		[4037, 89],
		[4044, 89],
		[4051, 80],
		[4058, 87],
		[4065, 58],
		[4072, 80],
		[4079, 80],
		[4086, 52],
		[4093, 87],
		[4100, 62],
		[4107, 68],
		[4114, 870],
		[4121, 1669],
		[4128, 1385]
	],
	"esm": false,
	"cjs": true
}
