{
	"name": "svelte-hash-router",
	"description": "Implement hash-based routing for Svelte applications.",
	"repo_url": "https://github.com/pynnl/svelte-hash-router",
	"authors": ["pynnl"],
	"homepage": "https://github.com/pynnl/svelte-hash-router#readme",
	"downloads": 16,
	"updated": "2019-06-16T16:31:41.755Z",
	"tags": ["router"],
	"github_stars": 47,
	"typescript": false,
	"version": "1.0.1",
	"svelte_range": "^3.5.1",
	"last_rune_check_version": "1.0.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-hash-router",
				"version": "1.0.1",
				"size": 13436
			},
			{
				"name": "url-pattern",
				"version": "1.0.3"
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# svelte-hash-router\r\n[![npm](https://img.shields.io/npm/v/svelte-hash-router.svg)](https://www.npmjs.com/package/svelte-hash-router)\r\n[![Build Status](https://travis-ci.org/pynnl/pug2svelte.svg?branch=master)](https://travis-ci.org/pynnl/pug2svelte)\r\n[![GitHub license](https://img.shields.io/github/license/pynnl/svelte-hash-router.svg)](https://github.com/pynnl/svelte-hash-router/blob/master/LICENSE)\r\n[![Dependencies Status](https://david-dm.org/pynnl/svelte-hash-router.svg)](https://github.com/pynnl/svelte-hash-router)\r\n\r\nSvelte 3 hash based router. Inspired from [svelte-spa-router](https://github.com/ItalyPaleAle/svelte-spa-router), but with global routes.\r\n\r\n## Install\r\n```\r\nnpm i -D svelte-hash-router\r\n```\r\n\r\n## Usage\r\nFirst, set the `routes` schema before the root component.\r\n```javascript\r\n// index.js\r\nimport { routes } from 'svelte-hash-router'\r\nimport App from './App.svelte'\r\nimport Home from './Home.svelte'\r\nimport About from './About.svelte'\r\n\r\nroutes.set({\r\n  '/home': Home,\r\n  '/about': About \r\n})\r\n\r\nexport default new App({ target: document.body })\r\n```\r\n\r\nThen use `Router` inside your components.\r\n```svelte\r\n<!-- App.svelte -->\r\n<script>\r\nimport { Router } from 'svelte-hash-router'\r\n</script>\r\n\r\n<Router/>\r\n```\r\n\r\n### Nested routes\r\n```javascript\r\n// schema\r\n{\r\n  '/': {\r\n    $$component: MainLayout,\r\n    'home': Home,\r\n    'networking': {\r\n      $$component: Layout,\r\n      '/github': Github,\r\n      '/facebook': Facebook\r\n    }\r\n  },\r\n  '*': NotFound\r\n}\r\n```\r\n\r\nThen just simply use `Router` for each levels. The parent components won't be re-rendered when switching between children routes.\r\n```svelte\r\n<!-- MainLayout.svelte -->\r\n<div id='header'></div>\r\n\r\n<Router/> <!-- will match '/home' and '/networking' -->\r\n<div id='footer'></div>\r\n\r\n<!-- Layout.svelte -->\r\n<p>A social networking</p>\r\n<Router/> <!-- will match '/networking/github' and '/networking/facebook' -->\r\n```\r\n\r\nEach nested level consumes a `Router`. Once all `Router` are consumed, the rest will have no effect.\r\n```svelte\r\n<!-- Layout.svelte -->\r\n<p>A social networking</p>\r\n<Router/> <!-- this will be rendered when the route is active -->\r\n<Router/> <!-- this will not -->\r\n<Router/> <!-- same -->\r\n```\r\n\r\nIf `$$component` in the parent is omitted:\r\n```javascript\r\n// schema\r\n{\r\n  '/': {\r\n    'home': Home,\r\n    'about': About\r\n  }\r\n}\r\n\r\n// will act the same as\r\n{\r\n  '/home': Home,\r\n  '/about': About\r\n}\r\n```\r\n`/` in the first schema will consume the same amount of `Router` as the second one. The difference is in the first schema, it is an individual route, has its own data and can be looped for children routes when needed. See [`routes`](#the-routes-store).\r\n\r\n## Schema\r\nRoot paths must start with a `/` or if using wildcard, `*`.\r\n```javascript\r\nimport { routes, Router } from 'svelte-hash-router'\r\n\r\nroute.set({\r\n  '/home': Home,\r\n  '*': NotFound\r\n})\r\n\r\nexport default new Router({ target: document.body })\r\n```\r\n\r\nAn object of options can be passed. All properties starting with `$$` will be treated as options, the rest will be seen as nested routes. All options are saved as none-enumerable. `$$component` is a reserved option.\r\n```javascript\r\n{\r\n  '/home': Home,\r\n  '/about': {\r\n    $$component: About,\r\n    $$name: 'About me',\r\n    $$customOption: '',\r\n    '/biography': Biography,\r\n    '/hobbies': Hobbies \r\n  }\r\n}\r\n```\r\n\r\n### Params\r\nGet params of current active route with the params store.\r\n```javascript\r\n// schema\r\n{\r\n  '/books/:id': null,\r\n  '/authors/:name/novels/:title': null\r\n}\r\n\r\n// Svelte component\r\nimport { params } from 'svelte-hash-router'\r\n\r\n// /books/123\r\n$params.id === '123'\r\n\r\n// /authors/John/novels/Dreams\r\n$params.name === 'John'\r\n$params.title === 'Dreams'\r\n\r\n```\r\n\r\nSame with query.\r\n```javascript\r\n// Svelte component\r\nimport { query } from 'svelte-hash-router'\r\n\r\n// /book?id=123&title=Dreams\r\n$query.id === '123'\r\n$query.title === 'Dreams'\r\n```\r\n\r\n### Wildcard\r\n__*The order of schema does matter*__. Whichever route matching first will be rendered. Wildcard `*` matches anything, so it is usually put at the end. Wilcard is collected in `params` as `_`.\r\n```javascript\r\n// schema\r\n{ '/book/*': null }\r\n\r\n// /book/123?title=Dreams\r\n$params._ === '123' // not catch query\r\n```\r\n\r\n### url-pattern\r\nThis library uses the nice package [url-pattern](https://github.com/snd/url-pattern), check it out for more syntaxes.\r\n\r\n## Redirect\r\nRedirect routes by using a string instead of a Svelte component, or if passing options object, use `$$redirect`. The redirect path must be an asbolute path.\r\n```javascript\r\n{\r\n  '/home': Home,\r\n  '/networking': {\r\n    '/github': Github,\r\n    '*': '/networking/github'\r\n  },\r\n  '*': {\r\n    $$redirect: '/home'\r\n  }\r\n}\r\n\r\n```\r\n\r\n## The `routes` store\r\nAfter the first schema setup, `routes` becomes readonly. The following reserved properties are added for each route:\r\n\r\n- `$$pathname` the exact path as in schema define\r\n- `$$href` full path including `#` at the beginning\r\n- `$$stringify` generate string from params. Check out [url-pattern stringify](https://github.com/snd/url-pattern#stringify-patterns)\r\n- `$$pattern` url-pattern object\r\n\r\nSince they are __*non-enumarable*__, you can easily loop for just nested routes when needed.\r\n```svelte\r\n<!-- Navigator.svelte -->\r\n<script>\r\nimport { routes, active } from 'svelte-hash-router'\r\n\r\n$: links = Object.values($routes['/books']['/comedy'])\r\n</script>\r\n\r\n{#each links as e}\r\n  <a\r\n    class:active={e === $active}\r\n    href={e.$$href}\r\n    > {e.$$name}\r\n  </a>\r\n{/each}\r\n\r\n<style>\r\n.active { color: blue; }\r\n</style>\r\n```\r\n\r\nThe store `active` is current active route. If you use nested routes and want to check if a parent route has an active child route, use the store `matches`. It is an array including all the parents of the active route and itself.\r\n```svelte\r\n<script>\r\nimport { matches } from 'svelte-hash-router'\r\n</script>\r\n\r\n<a class:active={$matches.includes(route)}></a>\r\n```\r\n\r\nA route containing params can be stringified.\r\n```svelte\r\n<!-- schema: '/book/:id/:name' -->\r\n<a href='{route.$$stringify({id: 123, name: `Dreams`})}'>\r\n\r\n<!-- will give: '/book/123/Dreams' -->\r\n```\r\n\r\n## [CHANGELOG](CHANGELOG.md)\r\n\r\n## [LICENSE: MIT](LICENSE.md)\r\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 33],
		[3596, 77],
		[3603, 87],
		[3610, 64],
		[3617, 61],
		[3624, 18],
		[3631, 30],
		[3638, 37],
		[3645, 9],
		[3652, 47],
		[3659, 20],
		[3666, 28],
		[3673, 66],
		[3680, 33],
		[3687, 18],
		[3694, 27],
		[3701, 63],
		[3708, 43],
		[3715, 72],
		[3722, 30],
		[3729, 70],
		[3736, 42],
		[3743, 27],
		[3750, 33],
		[3757, 40],
		[3764, 25],
		[3771, 23],
		[3778, 13],
		[3785, 32],
		[3792, 21],
		[3799, 26],
		[3806, 26],
		[3813, 19],
		[3820, 23],
		[3827, 35],
		[3834, 9],
		[3841, 34],
		[3848, 27],
		[3855, 18],
		[3862, 28],
		[3869, 18],
		[3876, 12],
		[3883, 26],
		[3890, 12],
		[3897, 10],
		[3904, 66],
		[3911, 32],
		[3918, 20],
		[3925, 24],
		[3932, 58],
		[3939, 19],
		[3946, 16],
		[3953, 16],
		[3960, 7],
		[3967, 10],
		[3974, 18],
		[3981, 11],
		[3988, 37],
		[3995, 6],
		[4002, 27],
		[4009, 20],
		[4016, 7],
		[4023, 9],
		[4030, 13],
		[4037, 30],
		[4044, 46],
		[4051, 19],
		[4058, 11],
		[4065, 3],
		[4072, 6],
		[4079, 6],
		[4086, 14],
		[4093, 7],
		[4100, 15],
		[4107, 3],
		[4114, 16],
		[4121, 17],
		[4128, 3]
	],
	"esm": false,
	"cjs": true
}
