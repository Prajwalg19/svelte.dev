{
	"name": "@nerd-coder/svelte-zod-form",
	"description": "Build forms with Zod validation in Svelte.",
	"repo_url": "https://github.com/nerd-coder/svelte-zod-form",
	"authors": ["toanzzz"],
	"homepage": "https://github.com/nerd-coder/svelte-zod-form#readme",
	"downloads": 36,
	"updated": "2024-10-20T17:48:47.815Z",
	"tags": ["miscellaneous"],
	"github_stars": 10,
	"typescript": true,
	"version": "1.6.1",
	"svelte_range": "^4.0.0 || ^5.0.0",
	"kit_range": "^2.7.2",
	"last_rune_check_version": "1.6.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@nerd-coder/svelte-zod-form",
				"version": "1.6.1",
				"size": 47925
			},
			{
				"name": "svelte",
				"version": "5.28.2",
				"size": 2426223
			},
			{
				"name": "@ampproject/remapping",
				"version": "2.3.0",
				"size": 78946
			},
			{
				"name": "@jridgewell/gen-mapping",
				"version": "0.3.8",
				"size": 81596
			},
			{
				"name": "@jridgewell/set-array",
				"version": "1.2.1",
				"size": 17945
			},
			{
				"name": "@jridgewell/sourcemap-codec",
				"version": "1.5.0",
				"size": 112815
			},
			{
				"name": "@jridgewell/trace-mapping",
				"version": "0.3.25",
				"size": 169330
			},
			{
				"name": "@jridgewell/resolve-uri",
				"version": "3.1.2",
				"size": 53153
			},
			{
				"name": "@types/estree",
				"version": "1.0.7",
				"size": 26147
			},
			{
				"name": "acorn",
				"version": "8.14.1",
				"size": 547473
			},
			{
				"name": "@sveltejs/acorn-typescript",
				"version": "1.0.5",
				"size": 197476
			},
			{
				"name": "aria-query",
				"version": "5.3.2",
				"size": 176114
			},
			{
				"name": "axobject-query",
				"version": "4.1.0",
				"size": 110878
			},
			{
				"name": "clsx",
				"version": "2.1.1",
				"size": 8555
			},
			{
				"name": "esm-env",
				"version": "1.2.2",
				"size": 3784
			},
			{
				"name": "esrap",
				"version": "1.4.6",
				"size": 50818
			},
			{
				"name": "is-reference",
				"version": "3.0.3",
				"size": 3953
			},
			{
				"name": "locate-character",
				"version": "3.0.0",
				"size": 5325
			},
			{
				"name": "magic-string",
				"version": "0.30.17",
				"size": 467464
			},
			{
				"name": "zimmerframe",
				"version": "1.1.2",
				"size": 12266
			},
			{
				"name": "zod",
				"version": "3.24.3",
				"size": 697771
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[3, 4],
			[3, 5],
			[3, 6],
			[6, 7],
			[6, 5],
			[2, 6],
			[1, 5],
			[1, 8],
			[1, 9],
			[1, 10],
			[1, 11],
			[1, 12],
			[1, 13],
			[1, 14],
			[1, 15],
			[15, 5],
			[1, 16],
			[16, 8],
			[1, 17],
			[1, 18],
			[18, 5],
			[1, 19],
			[0, 20]
		],
		"circular": []
	},
	"readme": "# ðŸŒµ Svelte Zod Form\n\n[![jsr]][jsr-link]\n[![npm]][npm-link]\n[![workflow]][workflow-link]\n![license]\n[![bundle]][bundle-link]\n[![codecov]][codecov-link]\n\nBuilding forms in Svelte with breeze, using [Zod](https://zod.dev/)\n\n## Example\n\n[REPL: Simple login form](https://svelte.dev/repl/33ff009d317745a389663c61ab228538)\n[![REPL: Simple login form](docs/screenshot-01.png)](<(https://svelte.dev/repl/33ff009d317745a389663c61ab228538)>)\n\n## Installation\n\n[NPM][npm-link]\n\n```sh\nnpm i @nerd-coder/svelte-zod-form\n```\n\n[JSR][jsr-link] (Recommended)\n\n```sh\nnpx jsr add @nerd-coder/svelte-zod-form\n```\n\n## How to use\n\nFirst you need to create a Zod's schema\n\n```ts\nimport { z } from 'zod'\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  pass: z.string().min(4),\n})\n```\n\nThen pass the schema to `ZodFormStore`:\n\n```ts\nconst form = new ZodFormStore(loginSchema, { onSubmit: v => console.log('Submitted values:', v) })\n```\n\nAll the field's handler, value will be generated and typed for you:\n\n```ts\n// We need pull the generated field store out, in order\n// to use the Svelte's \"auto subscription\" feature \"$\"\nconst { email_value, email_error, email_dirty, pass_value, pass_error, pass_dirty } = form.stores\n```\n\nFinally, use it in html\n\n```svelte\n<form on:submit|preventDefault={form.triggerSubmit}>\n  <fieldset>\n    <input\n      name=\"email\"\n      on:input={form.fields.email.handleChange}\n      on:blur={form.fields.email.handleBlur}\n      value={$email_value || ''}\n      class:invalid={!!$email_error}\n      class:valid={!$email_error && !!$email_dirty}\n    />\n    {#if $email_error}<p>{$email_error}</p>{/if}\n  </fieldset>\n\n  <fieldset>\n    <input\n      name=\"pass\"\n      type=\"password\"\n      on:input={form.fields.pass.handleChange}\n      on:blur={form.fields.pass.handleBlur}\n      value={$pass_value || ''}\n      class:invalid={!!$pass_error}\n      class:valid={!$pass_error && !!$pass_dirty}\n    />\n    {#if $pass_error}<p>{$pass_error}</p>{/if}\n  </fieldset>\n\n  <button type=\"submit\">Sign In</button>\n</form>\n```\n\n## Configuration\n\n### `initialValue`\n\n- type: `Partial<T>`\n- required: `false`\n- default: `undefined`\n\nThe initial data in the form. Will revert to this value if call `form.reset`.\n\n```ts\nconst form = new ZodFormStore(schema, {\n  initialValue: { email: 'my@email.com' },\n  ...\n})\n```\n\n### `onSubmit`\n\n- type: `(v: T) => Promise<void | string> | string | void`\n- required: `true`\n\nAsync callback to handle submmition of the form. Should return nothing, or an `string` contain error message\n\n```ts\nconst form = new ZodFormStore(schema, {\n  onSubmit: (values) => console.log('Submitted values:', values),\n  ...\n})\n```\n\n### `debug`\n\n- type: `boolean`\n- required: `false`\n- default: `false`\n\nPrint various debug messages.\n\n```ts\nconst form = new ZodFormStore(schema, {\n  debug: true,\n  ...\n})\n```\n\n## API\n\n| Prop            | Type                              | Description                                                                                                       |\n| --------------- | --------------------------------- | ----------------------------------------------------------------------------------------------------------------- |\n| model           | `Readable<T>`                     | Form's data. Will be passed to onSubmit handler                                                                   |\n| options         | `readonly ZodFormStoreOptions<T>` | Form settings. Should not be update                                                                               |\n| triggerSubmit   | `() => Promise<void>`             | Function to start parsing, validating and submit the form's data                                                  |\n| setupAutoSubmit | `(delay: number) => Unsubscriber` | Setup auto submit on every change of the model                                                                    |\n| reset           | `() => void`                      | Function to reset the form to original state.                                                                     |\n| submitting      | `Readable<boolean>`               | True of submitting the form.                                                                                      |\n| error           | `Readable<string>`                | Error message returned from `onSubmit` handler, or custom validation message.                                     |\n| errors          | `Readable<string[]>`              | Array of string contains all error messages (including fields's errors and error return from `onSubmit` handler). |\n| dirty           | `Readable<boolean>`               | Indicate if the form is edited or submitted.                                                                      |\n| valid           | `Readable<boolean>`               | Indicate if the form is valid.                                                                                    |\n| fields          | `object`                          | Generated fields's functions.                                                                                     |\n| stores          | `object`                          | Generated fields's stores.                                                                                        |\n\n### Generated stores's props\n\n| Prop                          | Type                       | Description                                |\n| ----------------------------- | -------------------------- | ------------------------------------------ |\n| stores._`fieldName`_\\_value   | `Readable<T['fieldName']>` | Readable store holding field's value       |\n| stores._`fieldName`_\\_touched | `Readable<boolean>`        | The field have been touched or not         |\n| stores._`fieldName`_\\_dirty   | `Readable<boolean>`        | The field value been changed or not        |\n| stores._`fieldName`_\\_error   | `Readable<string>`         | The field validation error message, if any |\n| stores._`fieldName`_\\_valid   | `Readable<boolean>`        | The field value is valid or not            |\n\n### Generated field's functions\n\n| Prop                              | Type                                         | Description                       |\n| --------------------------------- | -------------------------------------------- | --------------------------------- |\n| fields._`fieldName`_.updateValue  | `(updater: Updater<T['fieldName']>) => void` | Function to update field's value  |\n| stores._`fieldName`_.setValue     | `(val: T['fieldName']) => void`              | Function to set field's value     |\n| stores._`fieldName`_.handleChange | `(val: unknown) => void`                     | Callback to update field's value  |\n| stores._`fieldName`_.handleBlur   | `() => void`                                 | Callback to mark field as touched |\n| stores._`fieldName`_.reset        | `() => void`                                 | Reset field to original state     |\n| stores._`fieldName`_.setError     | `(msg: string) => void`                      | Manually set field error          |\n| stores._`fieldName`_.setTouched   | `(val: boolean) => void`                     | Manually set touched state        |\n\n## Features\n\n- Use Svelte native stores\n- Fast: only update what changed, and you only subscribe to what you need\n- Validation using Zod (Peer dependencies)\n- TypeScript\n- Minimal [![bundle]][bundle-link]\n\n## Extra\n\nWhy the cactus ðŸŒµ?\n\n\\> For its resilience\n\n## TODO\n\n- More tests\n- Support nested object\n- Support array\n\n## Contributions\n\nAny contributions are highly appreciate, please make a pull-request. If you would like to discuses a new feature, please create an issue first.\n\n[jsr]: https://jsr.io/badges/@nerd-coder/svelte-zod-form\n[jsr-link]: https://jsr.io/@nerd-coder/svelte-zod-form\n[npm]: https://img.shields.io/npm/v/%40nerd-coder%2Fsvelte-zod-form?logo=npm&labelColor=%23CB3837&color=%23213949\n[npm-link]: https://www.npmjs.com/package/@nerd-coder/svelte-zod-form\n[workflow]: https://github.com/nerd-coder/svelte-zod-form/actions/workflows/main.yaml/badge.svg\n[workflow-link]: https://github.com/nerd-coder/svelte-zod-form/actions/workflows/main.yaml\n[bundle]: https://badgen.net/bundlephobia/minzip/@nerd-coder/svelte-zod-form?icon=packagephobia&label=bundlephobia\n[bundle-link]: https://bundlephobia.com/package/@nerd-coder/svelte-zod-form\n[codecov]: https://codecov.io/gh/nerd-coder/svelte-zod-form/branch/main/graph/badge.svg?token=60IHHKQJ1Y\n[codecov-link]: https://codecov.io/gh/nerd-coder/svelte-zod-form\n[license]: https://img.shields.io/github/license/nerd-coder/svelte-zod-form\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 88],
		[3596, 55],
		[3603, 50],
		[3610, 13],
		[3617, 35],
		[3624, 32],
		[3631, 68],
		[3638, 36],
		[3645, 31],
		[3652, 33],
		[3659, 24],
		[3666, 52],
		[3673, 24],
		[3680, 19],
		[3687, 24],
		[3694, 13],
		[3701, 30],
		[3708, 31],
		[3715, 34],
		[3722, 21],
		[3729, 36],
		[3736, 30],
		[3743, 53],
		[3750, 23],
		[3757, 12],
		[3764, 51],
		[3771, 30],
		[3778, 35],
		[3785, 69],
		[3792, 26],
		[3799, 24],
		[3806, 20],
		[3813, 22],
		[3820, 53],
		[3827, 43],
		[3834, 21],
		[3841, 168],
		[3848, 24],
		[3855, 13],
		[3862, 82],
		[3869, 25],
		[3876, 26],
		[3883, 53],
		[3890, 33],
		[3897, 43],
		[3904, 15],
		[3911, 294],
		[3918, 24],
		[3925, 147],
		[3932, 149],
		[3939, 204],
		[3946, 46],
		[3953, 19],
		[3960, 17],
		[3967, 21],
		[3974, 39],
		[3981, 51],
		[3988, 23],
		[3995, 45],
		[4002, 8],
		[4009, 16],
		[4016, 32],
		[4023, 45],
		[4030, 22],
		[4037, 38],
		[4044, 35],
		[4051, 16],
		[4058, 30],
		[4065, 18],
		[4072, 18],
		[4079, 8],
		[4086, 39],
		[4093, 37],
		[4100, 11],
		[4107, 73],
		[4114, 36],
		[4121, 20],
		[4128, 39]
	],
	"esm": true,
	"cjs": true
}
