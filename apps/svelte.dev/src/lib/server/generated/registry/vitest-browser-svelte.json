{
	"name": "vitest-browser-svelte",
	"description": "Render Svelte components in Vitest Browser Mode.",
	"repo_url": "https://github.com/vitest-dev/vitest-browser-svelte",
	"authors": ["vitestbot"],
	"homepage": "https://github.com/vitest-dev/vitest-browser-svelte#readme",
	"downloads": 2585,
	"updated": "2025-01-13T16:15:54.183Z",
	"tags": ["testing"],
	"github_stars": 17,
	"typescript": true,
	"version": "0.1.0",
	"svelte_range": ">3.0.0",
	"last_rune_check_version": "0.1.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "vitest-browser-svelte",
				"version": "0.1.0",
				"size": 14575
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# vitest-browser-svelte\n\nRender Svelte components in Vitest Browser Mode. This library follows `testing-library` principles and exposes only [locators](https://vitest.dev/guide/browser/locators) and utilities that encourage you to write tests that closely resemble how your Svelte components are used.\n\nRequires `vitest` and `@vitest/browser` 2.1.0 or higher.\n\n```tsx\nimport { render } from 'vitest-browser-svelte'\nimport { expect, test } from 'vitest'\nimport Component from './Component.svelte'\n\ntest('counter button increments the count', async () => {\n  const screen = render(Component, {\n    initialCount: 1,\n  })\n\n  await screen.getByRole('button', { name: 'Increment' }).click()\n\n  await expect.element(screen.getByText('Count is 2')).toBeVisible()\n})\n```\n\n> [!NOTE]\n> This library doesn't expose or use `act`. Instead, you should use Vitest's locators and `expect.element` API that have [retry-ability mechanism](https://vitest.dev/guide/browser/assertion-api) baked in.\n\n`vitest-browser-svelte` also automatically injects `render` and `cleanup` methods on the `page`. Example:\n\n```ts\n// vitest.config.ts\nimport { defineConfig } from 'vitest/config'\n\nexport default defineConfig({\n  test: {\n    // if the types are not picked up, add `vitest-browser-svelte` to\n    // \"compilerOptions.types\" in your tsconfig or\n    // import `vitest-browser-svelte` manually so TypeScript can pick it up\n    setupFiles: ['vitest-browser-svelte'],\n    browser: {\n      name: 'chromium',\n      enabled: true,\n    },\n  },\n})\n```\n\n```tsx\nimport { page } from '@vitest/browser/context'\nimport Component from './Component.svelte'\n\ntest('counter button increments the count', async () => {\n  const screen = page.render(Component, {\n    initialCount: 1,\n  })\n\n  screen.cleanup()\n})\n```\n\nUnlike `@testing-library/svelte`, `vitest-browser-svelte` cleans up the component before the test starts instead of after, so you can see the rendered result in your UI. To avoid auto-cleanup, import the `render` function from `vitest-browser-vue/pure`.\n\n## Special thanks\n\n- Forked from [`@testing-library/svelte`](https://github.com/testing-library/svelte-testing-library)\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3869, 67],
		[3876, 14],
		[3883, 7],
		[3890, 6],
		[3897, 12],
		[3904, 12],
		[3911, 59],
		[3918, 218],
		[3925, 172],
		[3932, 286],
		[3939, 244],
		[3946, 314],
		[3953, 617],
		[3960, 752],
		[3967, 1139],
		[3974, 1202],
		[3981, 852],
		[3988, 1200],
		[3995, 1169],
		[4002, 860],
		[4009, 227],
		[4016, 108],
		[4023, 566],
		[4030, 779],
		[4037, 921],
		[4044, 872],
		[4051, 839],
		[4058, 1265],
		[4065, 1246],
		[4072, 1289],
		[4079, 1248],
		[4086, 2279],
		[4093, 6153],
		[4100, 7558],
		[4107, 4818],
		[4114, 2585],
		[4121, 1889],
		[4128, 1705],
		[4135, 1630]
	]
}
