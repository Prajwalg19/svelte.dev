{
	"name": "svelte-adapter-deno",
	"description": "Generate standalone Deno server for SvelteKit apps.",
	"repo_url": "https://github.com/pluvial/svelte-adapter-deno",
	"authors": ["jpaquim"],
	"homepage": "https://github.com/pluvial/svelte-adapter-deno#readme",
	"downloads": 171,
	"updated": "2024-08-09T00:25:14.026Z",
	"tags": ["adapter"],
	"github_stars": 350,
	"typescript": true,
	"version": "0.9.1",
	"kit_range": "^2.4.0",
	"last_rune_check_version": "0.9.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-adapter-deno",
				"version": "0.9.1",
				"size": 15989
			},
			{
				"name": "@rollup/plugin-commonjs",
				"version": "24.1.0",
				"size": 180833
			},
			{
				"name": "glob",
				"version": "8.1.0",
				"size": 56156
			},
			{
				"name": "once",
				"version": "1.4.0"
			},
			{
				"name": "wrappy",
				"version": "1.0.2"
			},
			{
				"name": "inflight",
				"version": "1.0.6"
			},
			{
				"name": "inherits",
				"version": "2.0.4",
				"size": 3958
			},
			{
				"name": "minimatch",
				"version": "5.1.6",
				"size": 38919
			},
			{
				"name": "brace-expansion",
				"version": "2.0.1",
				"size": 11486
			},
			{
				"name": "balanced-match",
				"version": "1.0.2",
				"size": 6939
			},
			{
				"name": "fs.realpath",
				"version": "1.0.0"
			},
			{
				"name": "commondir",
				"version": "1.0.1"
			},
			{
				"name": "is-reference",
				"version": "1.2.1",
				"size": 6374
			},
			{
				"name": "@types/estree",
				"version": "1.0.7",
				"size": 26147
			},
			{
				"name": "magic-string",
				"version": "0.27.0",
				"size": 404809
			},
			{
				"name": "@jridgewell/sourcemap-codec",
				"version": "1.5.0",
				"size": 112815
			},
			{
				"name": "estree-walker",
				"version": "2.0.2",
				"size": 50243
			},
			{
				"name": "@rollup/pluginutils",
				"version": "5.1.4",
				"size": 58354
			},
			{
				"name": "picomatch",
				"version": "4.0.2",
				"size": 85237
			},
			{
				"name": "@rollup/plugin-json",
				"version": "6.1.0",
				"size": 10683
			},
			{
				"name": "@rollup/plugin-node-resolve",
				"version": "15.3.1",
				"size": 154449
			},
			{
				"name": "resolve",
				"version": "1.22.10",
				"size": 145619
			},
			{
				"name": "is-core-module",
				"version": "2.16.1",
				"size": 33475
			},
			{
				"name": "hasown",
				"version": "2.0.2",
				"size": 8765
			},
			{
				"name": "function-bind",
				"version": "1.1.2",
				"size": 31427
			},
			{
				"name": "path-parse",
				"version": "1.0.7",
				"size": 4511
			},
			{
				"name": "supports-preserve-symlinks-flag",
				"version": "1.0.0",
				"size": 9178
			},
			{
				"name": "deepmerge",
				"version": "4.3.1",
				"size": 31157
			},
			{
				"name": "is-module",
				"version": "1.0.0"
			},
			{
				"name": "@types/resolve",
				"version": "1.20.2",
				"size": 9885
			},
			{
				"name": "rollup",
				"version": "3.29.5",
				"size": 2520676
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[3, 4],
			[2, 5],
			[5, 3],
			[5, 4],
			[2, 6],
			[2, 7],
			[7, 8],
			[8, 9],
			[2, 10],
			[1, 11],
			[1, 12],
			[12, 13],
			[1, 14],
			[14, 15],
			[1, 16],
			[1, 17],
			[17, 13],
			[17, 16],
			[17, 18],
			[0, 19],
			[19, 17],
			[0, 20],
			[20, 21],
			[21, 22],
			[22, 23],
			[23, 24],
			[21, 25],
			[21, 26],
			[20, 27],
			[20, 28],
			[20, 29],
			[20, 17],
			[0, 30]
		],
		"circular": []
	},
	"readme": "# svelte-adapter-deno\n\n[Adapter](https://kit.svelte.dev/docs/adapters) for SvelteKit apps that generates a standalone Deno server.\n\n## Usage\n\nInstall with `npm i -D svelte-adapter-deno`, then add the adapter to your `svelte.config.js`:\n\n```js\n// svelte.config.js\nimport adapter from 'svelte-adapter-deno';\n\nexport default {\n  kit: {\n    adapter: adapter()\n  }\n};\n```\n\nAfter building the server (`npm run build`), use the following command to start:\n\n```sh\n# with the default build directory\ndeno run --allow-env --allow-read --allow-net build/index.js\n\n# with a custom build directory\ndeno run --allow-env --allow-read --allow-net path/to/build/index.js\n```\n\nYou can use the [deployctl](https://github.com/denoland/deployctl/blob/main/action/README.md) GitHub Action to automatically deploy your app in Deno Deploy:\n\n.github/workflows/ci.yml\n\n```yml\nname: ci\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  deploy:\n    name: deploy\n    runs-on: ubuntu-latest\n    permissions:\n      id-token: write\n      contents: read\n\n    steps:\n      - name: Clone repository\n        uses: actions/checkout@v2\n\n      - name: Install Node\n        uses: actions/setup-node@v2\n        with:\n          node-version: 16\n\n      - name: Cache pnpm modules\n        uses: actions/cache@v2\n        with:\n          path: ~/.pnpm-store\n          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-\n\n      - name: Install pnpm and node_modules\n        uses: pnpm/action-setup@v2\n        with:\n          version: latest\n          run_install: true\n\n      - name: Build site\n        run: pnpm build\n        working-directory: '<root>' # if necessary, should contain {out}\n\n      - name: Deploy to Deno Deploy\n        uses: denoland/deployctl@v1\n        with:\n          project: <YOUR PROJECT NAME>\n          entrypoint: '{out}/index.js' # same as `out` option in config\n          root: '<root>' # if necessary\n```\n\nThe server needs at least the following permissions to run:\n\n- `allow-env` - allow environment access, to support runtime configuration via runtime variables (can be further restricted to include just the necessary variables)\n- `allow-read` - allow file system read access (can be further restricted to include just the necessary directories)\n- `allow-net` - allow network access (can be further restricted to include just the necessary domains)\n\nIn the documentation `deno run -A` is used for simplicity rather than as a recommendation, use only the necessary permissions in general use.\n\n## Environment variables\n\n### `PORT` and `HOST`\n\nBy default, the server will accept connections on `0.0.0.0` using port 3000. These can be customised with the `PORT` and `HOST` environment variables:\n\n```\nHOST=127.0.0.1 PORT=4000 deno run --allow-env --allow-read --allow-net build/server.js\n```\n\n### `ADDRESS_HEADER` and `XFF_DEPTH`\n\nThe [RequestEvent](types#public-types-requestevent) object passed to hooks and endpoints includes an `event.getClientAddress()` function that returns the client's IP address. By default this is the connecting `remoteAddress`. If your server is behind one or more proxies (such as a load balancer), this value will contain the innermost proxy's IP address rather than the client's, so we need to specify an `ADDRESS_HEADER` to read the address from:\n\n```\nADDRESS_HEADER=True-Client-IP node build\n```\n\n> Headers can easily be spoofed. As with `PROTOCOL_HEADER` and `HOST_HEADER`, you should [know what you're doing](https://adam-p.ca/blog/2022/03/x-forwarded-for/) before setting these.\n\nIf the `ADDRESS_HEADER` is `X-Forwarded-For`, the header value will contain a comma-separated list of IP addresses. The `XFF_DEPTH` environment variable should specify how many trusted proxies sit in front of your server. E.g. if there are three trusted proxies, proxy 3 will forward the addresses of the original connection and the first two proxies:\n\n```\n<client address>, <proxy 1 address>, <proxy 2 address>\n```\n\nSome guides will tell you to read the left-most address, but this leaves you [vulnerable to spoofing](https://adam-p.ca/blog/2022/03/x-forwarded-for/):\n\n```\n<spoofed address>, <client address>, <proxy 1 address>, <proxy 2 address>\n```\n\nWe instead read from the _right_, accounting for the number of trusted proxies. In this case, we would use `XFF_DEPTH=3`.\n\n> If you need to read the left-most address instead (and don't care about spoofing) — for example, to offer a geolocation service, where it's more important for the IP address to be _real_ than _trusted_, you can do so by inspecting the `x-forwarded-for` header within your app.\n\n## Options\n\nThe adapter can be configured with various options:\n\n```js\n/// file: svelte.config.js\nimport adapter from '@sveltejs/adapter-node';\n\nexport default {\n  kit: {\n    adapter: adapter({\n      // default options are shown\n      out: 'build',\n      precompress: false,\n      envPrefix: '',\n      deps: './deps.ts' // (relative to adapter-deno package)\n    })\n  }\n};\n```\n\n### out\n\nThe directory to build the server to. It defaults to `build` — i.e. `deno run -A build/index.js` would start the server locally after it has been created.\n\n### precompress\n\nEnables precompressing using gzip and brotli for assets and prerendered pages. It defaults to `false`.\n\n### envPrefix\n\nIf you need to change the name of the environment variables used to configure the deployment (for example, to deconflict with environment variables you don't control), you can specify a prefix:\n\n```js\nenvPrefix: 'MY_CUSTOM_';\n```\n\n```\nMY_CUSTOM_HOST=127.0.0.1 \\\nMY_CUSTOM_PORT=4000 \\\nMY_CUSTOM_ORIGIN=https://my.site \\\ndeno run -A build/index.js\n```\n\n### deps\n\nThe file re-exporting external runtime dependencies (`deps.ts` by convention in Deno). It defaults to the `deps.ts` file included in the package.\n\n## Custom server\n\nThe adapter creates two files in your build directory — `index.js` and `handler.js`. Running `index.js` — e.g. `deno run -A build/index.js`, if you use the default build directory — will start a server on the configured port.\n\nAlternatively, you can import the `handler.js` file, which exports a handler suitable for use with [Oak](https://github.com/oakserver/oak) and set up your own server:\n\n```js\n/// file: my-server.js\nimport { Application, Router } from 'https://deno.land/x/oak@v11.1.0/mod.ts';\nimport { handler } from './build/handler.js';\n\nconst app = new Application();\n\n// add a route that lives separately from the SvelteKit app\nconst router = new Router();\nrouter.get('/healthcheck', (ctx) => {\n  ctx.response.body = 'ok';\n});\napp.use(router.routes());\napp.use(router.allowedMethods());\n\n// let SvelteKit handle everything else, including serving prerendered pages and static assets\napp.use(handler);\n\napp.addEventListener('listen', () => {\n  console.log('listening on port 3000');\n});\nawait app.listen({ port: 3000 });\n```\n\n## License\n\n[MIT](LICENSE)\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 29],
		[3596, 178],
		[3603, 111],
		[3610, 94],
		[3617, 77],
		[3624, 106],
		[3631, 133],
		[3638, 184],
		[3645, 155],
		[3652, 150],
		[3659, 71],
		[3666, 112],
		[3673, 71],
		[3680, 22],
		[3687, 27],
		[3694, 55],
		[3701, 78],
		[3708, 71],
		[3715, 78],
		[3722, 91],
		[3729, 96],
		[3736, 82],
		[3743, 90],
		[3750, 199],
		[3757, 114],
		[3764, 81],
		[3771, 94],
		[3778, 150],
		[3785, 114],
		[3792, 103],
		[3799, 73],
		[3806, 73],
		[3813, 115],
		[3820, 73],
		[3827, 54],
		[3834, 52],
		[3841, 78],
		[3848, 144],
		[3855, 167],
		[3862, 55],
		[3869, 180],
		[3876, 96],
		[3883, 75],
		[3890, 77],
		[3897, 55],
		[3904, 84],
		[3911, 129],
		[3918, 127],
		[3925, 114],
		[3932, 169],
		[3939, 197],
		[3946, 171],
		[3953, 192],
		[3960, 163],
		[3967, 123],
		[3974, 232],
		[3981, 189],
		[3988, 205],
		[3995, 141],
		[4002, 131],
		[4009, 158],
		[4016, 124],
		[4023, 295],
		[4030, 134],
		[4037, 207],
		[4044, 173],
		[4051, 151],
		[4058, 195],
		[4065, 107],
		[4072, 58],
		[4079, 105],
		[4086, 171],
		[4093, 207],
		[4100, 119],
		[4107, 194],
		[4114, 171],
		[4121, 226],
		[4128, 252]
	],
	"esm": true,
	"cjs": false
}
