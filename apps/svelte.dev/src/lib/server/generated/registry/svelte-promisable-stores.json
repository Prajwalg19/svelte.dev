{
	"name": "svelte-promisable-stores",
	"description": "Manage promises and API calls with Svelte stores.",
	"repo_url": "https://github.com/lucianoratamero/svelte-promisable-stores",
	"authors": ["lucianoratamero"],
	"homepage": "https://github.com/lucianoratamero/svelte-promisable-stores#readme",
	"downloads": 39,
	"updated": "2020-08-23T16:17:10.077Z",
	"tags": ["miscellaneous"],
	"github_stars": 23,
	"typescript": false,
	"version": "0.1.3",
	"svelte_range": "^3.24.1",
	"last_rune_check_version": "0.1.3",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-promisable-stores",
				"version": "0.1.3",
				"size": 10255
			},
			{
				"name": "svelte",
				"version": "3.59.2",
				"size": 10624206
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# svelte-promisable-stores\n\n![Node.js CI](https://github.com/lucianoratamero/svelte-promisable-stores/workflows/Node.js%20CI/badge.svg)\n![Coverage - branches](https://raw.githubusercontent.com/lucianoratamero/svelte-promisable-stores/master/badges/badge-branches.svg)\n![Coverage - functions](https://raw.githubusercontent.com/lucianoratamero/svelte-promisable-stores/master/badges/badge-functions.svg)\n![Coverage - lines](https://raw.githubusercontent.com/lucianoratamero/svelte-promisable-stores/master/badges/badge-lines.svg)\n![Coverage - statements](https://raw.githubusercontent.com/lucianoratamero/svelte-promisable-stores/master/badges/badge-statements.svg)\n\n\nThis project contains a collection of stores to manage and save promises.\n\nIt's mostly used together with [svelte](https://svelte.dev/)'s [await blocks](https://svelte.dev/docs#await).\n\nIf you're using it to fetch data from a backend API, try using [`axios`](https://www.npmjs.com/package/axios), since [`fetch` does not trigger `catch` for 4xx/5xx responses](https://github.com/whatwg/fetch/issues/18).\n\n## Installing\n\n`npm install --save-dev svelte-promisable-stores`\n\n**Note:** we recommend using `--save-dev` instead of `--save` to enable better SSR support (mostly for [Sapper](https://sapper.svelte.dev/)).\n\n## Examples\n\nOn Svelte's REPL:\n\n- [promisable](https://svelte.dev/repl/308a64be27124f23ab5f942047c9c30c?version=3.24.1)\n- [derivedPromisable](https://svelte.dev/repl/ebc66e9c501b40e6a86c8aa12dfb2167?version=3.24.1)\n\n\n### `promisable`\n\n```js\n// stores.js\nimport axios from 'axios';\nimport { promisable } from 'svelte-promisable-stores';\n\n// promiseFunction: function that returns a promise\nconst fetchPerson = (personId) =>\n  axios\n    .get(`//jsonplaceholder.typicode.com/users/${personId}`)\n    .then((response) => response.data);\n\nexport const currentPerson = promisable(\n  fetchPerson,\n  // shouldRefreshPromise: function that evaluates if\n  // promise should be refreshed when `dispatch` is called.\n  // In this case, it fetches a person's data\n  // if there is no data for the store or\n  // if it's id is different from the one passed to `dispatch`.\n  (currentStateData, personId) =>\n    !currentStateData || personId != currentStateData.id\n);\n```\n\n```svelte\n<!-- Person.svelte -->\n<script>\n  import { onMount } from 'svelte';\n  import { currentPerson } from './stores';\n\n  export let personId;\n\n  onMount(() => {\n    currentPerson.dispatch(personId);\n  });\n</script>\n\n{#if $currentPerson}\n  {#await $currentPerson}\n    <p>Loading...</p>\n  {:then $currentPerson}\n    <dl>\n      {#each $currentPerson as person}\n        <dt>Name:</dt>\n        <dd>{person.name}</dd>\n\n        <dt>Email:</dt>\n        <dd>{person.email}</dd>\n      {/each}\n    </dl>\n  {:catch $currentPerson}\n    <h1>Person not found</h1>\n  {/await}\n{/if}\n```\n\n### `derivedPromisable`\n\n```js\n// stores.js\nimport axios from 'axios';\nimport { writable } from 'svelte/store';\nimport { derivedPromisable } from 'svelte-promisable-stores';\n\nexport const searchTerm = writable('');\n\nconst fetchPeopleByName = ($searchTerm) =>\n  axios\n    .get(`//jsonplaceholder.typicode.com/users?q=${$searchTerm}`)\n    .then((response) => response.data);\n\nexport const people = derivedPromisable(\n  searchTerm, // <- store to derive data from\n  fetchPeopleByName, // <- function that returns a promise\n  // shouldRefreshPromise: same as the `promisable` one\n  (currentStateData, $searchTerm, previousSearchTerm) =>\n    $searchTerm && $searchTerm !== previousSearchTerm\n);\n\n```\n\n```svelte\n<!-- SearchPeopleByName.svelte -->\n<script>\n  import {searchTerm, people} from './store';\n  let timer;\n\n  // debouncing is always a good idea :]\n  function handleKeyup(value){\n    clearTimeout(timer);\n    timer = setTimeout(() => searchTerm.set(value), 500);\n  }\n</script>\n\n<div>\n  <input type=\"text\" value={$searchTerm} on:keyup={e => handleKeyup(e.target.value)} />\n</div>\n\n{#if $searchTerm}\n  {#await $people}\n    <p>Searching...</p>\n  {:then $people}\n    {#each $people as person}\n      <a rel=\"preload\" href=\"/person/{person.id}\">\n        <h1>Name: {person.name}</h1>\n      </a>\n    {/each}\n  {:catch $people}\n    <h1>ohno, something wrong isn't right! here's ther error:</h1>\n    <p>{JSON.stringify($people)}</p>\n  {/await}\n{/if}\n```\n\n## API\n\n### `promisable(promiseFunction: function, shouldRefreshPromise = () => true)`:\n\nExtended `writable` stores.\n\nReceives:\n\n- `promiseFunction`: required, returns `Promise`. It expects a function that returns a promise (for example, a fetch or axios call);\n- `shouldRefreshPromise`: optional, returns `Boolean`. It receives multiple arguments. The first is always the current data from its own resolved/rejected promise. The others are all the arguments passed to the `dispatch` method.\n\nReturns:\n\n- `subscribe, set, update`: directly from the embedded `writable` store;\n- `dispatch`: this method calls the provided `promiseFunction` passing any arguments and saves inside the store its returned promise. If a `shouldRefreshPromise` function was provided, `dispatch` calls it before `promiseFunction` and, if it returns false, `promiseFunction` will not be called and the `promisable` store data won't change;\n- `isPromisable`: always set to `true`. Only used internally on `derivedPromisable` stores, for a better developer experience (no `.then`s inside `shouldRefreshPromise`).\n\n\n### `derivedPromisable(store, promiseFunction: function, shouldRefreshPromise = () => true)`:\n\nExtended `derived` stores.\n\nReceives:\n\n- `store`: any svelte store, including `promisable`s;\n- `promiseFunction`: required, returns `Promise`. It expects a function that returns a promise (for example, a fetch or axios call). `promiseFunction` is called with the provided store's data, whenever its data changes;\n- `shouldRefreshPromise`: optional, returns `Boolean`. It receives multiple arguments. The first is always the current data from its own resolved/rejected promise. The others are all the arguments passed to the `dispatch` method.\n\nReturns:\n\n- `subscribe`: directly from the embedded `derived` store;\n- `isPromisable`: always set to `true`. Only used internally on `derivedPromisable` stores, for a better developer experience (no `.then`s inside `shouldRefreshPromise`).\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 3],
		[3596, 22],
		[3603, 22],
		[3610, 38],
		[3617, 20],
		[3624, 13],
		[3631, 15],
		[3638, 12],
		[3645, 18],
		[3652, 6],
		[3659, 9],
		[3666, 16],
		[3673, 28],
		[3680, 12],
		[3687, 18],
		[3694, 17],
		[3701, 11],
		[3708, 15],
		[3715, 18],
		[3722, 20],
		[3729, 12],
		[3736, 7],
		[3743, 13],
		[3750, 14],
		[3757, 29],
		[3764, 21],
		[3771, 25],
		[3778, 7],
		[3785, 16],
		[3792, 11],
		[3799, 19],
		[3806, 56],
		[3813, 12],
		[3820, 12],
		[3827, 11],
		[3834, 6],
		[3841, 6],
		[3848, 10],
		[3855, 17],
		[3862, 27],
		[3869, 12],
		[3876, 2],
		[3883, 19],
		[3890, 8],
		[3897, 14],
		[3904, 21],
		[3911, 9],
		[3918, 36],
		[3925, 22],
		[3932, 32],
		[3939, 23],
		[3946, 24],
		[3953, 21],
		[3960, 23],
		[3967, 22],
		[3974, 29],
		[3981, 28],
		[3988, 28],
		[3995, 21],
		[4002, 27],
		[4009, 16],
		[4016, 19],
		[4023, 26],
		[4030, 32],
		[4037, 36],
		[4044, 34],
		[4051, 19],
		[4058, 27],
		[4065, 25],
		[4072, 25],
		[4079, 32],
		[4086, 49],
		[4093, 30],
		[4100, 26],
		[4107, 23],
		[4114, 39],
		[4121, 39],
		[4128, 18]
	]
}
