{
	"name": "@danielsharkov/svelte-router",
	"description": "Simple, fast Svelte router with smooth page transitions.",
	"repo_url": "https://github.com/danielsharkov/svelte-router",
	"authors": ["danielsharkov"],
	"homepage": "https://github.com/DanielSharkov/svelte-router",
	"downloads": 15,
	"updated": "2023-04-09T12:06:58.408Z",
	"tags": ["router"],
	"github_stars": 13,
	"typescript": true,
	"version": "4.0.0",
	"svelte_range": "^3.52.0",
	"last_rune_check_version": "4.0.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@danielsharkov/svelte-router",
				"version": "4.0.0",
				"size": 65605
			}
		],
		"dependencies": [],
		"circular": []
	},
	"legacy_svelte": true,
	"readme": "[![Simple, fast & easy to use Svelte Router](https://github.com/DanielSharkov/svelte-router/blob/master/readme-banner.svg)](#)\n\n[![Live Demo](https://img.shields.io/badge/‚ñ∂-Live%20Demo-2962ff)](https://danielsharkov.github.io/svelte-router-examples)\n[![Examples](https://img.shields.io/badge/üß©-Examples-ff9100)](https://github.com/DanielSharkov/svelte-router-examples)\n[![npm version](https://badge.fury.io/js/@danielsharkov%2Fsvelte-router.svg)](https://badge.fury.io/js/@danielsharkov%2Fsvelte-router)\n![GitHub](https://img.shields.io/github/license/danielsharkov/svelte-router)\n[![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/TheComputerM/awesome-svelte#readme)\n\n# üóÇ Index\n\n- [Installation](#-installation)\n- [Initializing a Router Instance](#initializing-a-router-instance)\n- [Fallback Route](#fallback-route)\n- [Route View Component Props](#route-view-component-props)\n- [Route Props](#route-props)\n- [Before-Push Hooks](#before-push-hooks)\n- [Global Before-Push Hook](#global-before-push-hook)\n- [Programmatic History Navigation](#programmatic-history-navigation)\n- [Route Updated Event Listener](#route-updated-event-listener)\n- [RouteLink Component](#routelink-component)\n\t- [RouteLink with Parameters](#routelink-with-parameters)\n- [Svelte Action use:link](#svelte-action-uselink)\n- [Route Transitions](#route-transitions)\n- [Lazy loading](#lazy-loading)\n- [Router Examples](#-router-examples)\n\n<br>\n\n# üßó‚Äç‚ôÄÔ∏è Getting Started\n\n## üíø Installation\n\nDepending on your package manager just:\n\n**pnpm**<br>\n`pnpm add -D @danielsharkov/svelte-router`\n\n**yarn**<br>\n`yarn add --dev @danielsharkov/svelte-router`\n\n**npm**<br>\n`npm i -D @danielsharkov/svelte-router`\n\nAnd done üòÅ üéâ\n\n<br>\n\n## Initializing a Router Instance\n\nInitialize a new router with the configuration in `src/router.ts` or where\never you like, maybe even inside `App.svelte` as a module - it's up to you.\n\n```ts\nimport SvelteRouter from '@danielsharkov/svelte-router'\nimport ViewHome from './views/Home.svelte'\nimport ViewUser from './views/User.svelte'\nimport ViewAlbum from './views/Album.svelte'\n\nexport default new SvelteRouter({\n\twindow: window,\n\tscrollingElement: window.document.scrollingElement,\n\tbasePath: '/persistent/path',\n\troutes: {\n\t\t'home': {\n\t\t\tpath: '/',\n\t\t\tcomponent: ViewHome,\n\t\t},\n\t\t'users.user': {\n\t\t\t// paths must always begin with a slash\n\t\t\t// and may take parameters prefixed by a colon\n\t\t\tpath: '/users/:uid',\n\t\t\tcomponent: ViewUser,\n\t\t},\n\t\t'user.album': {\n\t\t\t// paths may take multiple parameters\n\t\t\tpath: '/users/:uid/albums/:aid',\n\t\t\tcomponent: ViewAlbum,\n\t\t},\n\t},\n})\n```\n\n* `window` should usually be assigned the [browser object model](https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model)\nbut can also be used for testing and debugging purposes.\n\n* `scrollingElement` should usually be assigned the [Document.scrollingElement](https://developer.mozilla.org/en-US/docs/Web/API/document/scrollingElement),\nwhich is the usual scrollable viewport. But if your viewport differs you may\nthen provid it your needed `Element`. When no `scrollableElement` is provided\nthen the router won't save and restore scroll state by the history.\n\n* `basePath` is an optional field which has the same principle as the HTML\n`<Base>` tag. It acts like a prefix to the paths. It's useful in cases like\nhosting on GitHub Pages, where the base URL is always `https://<username>.github.io/<repo-name>`\nand the base path therefor always is `/<repo-name>`.\n\n* a route name is required to be unique and is allowed to contain\n`a-z`, `A-Z`, `0-9`, `-`, `_` and `.`\n\n* static routes will always be preferred to their parameterized counterparts.\nThis means `user/a/albums` will be preferred to `/user/:id/albums` if the URL\nmatches the static route.\n\nThen use the `Viewport` as the actual visual router in your `App.svelte`\npassing it your created router instance:\n\n```svelte\n<script lang='ts'>\nimport Viewport from '@danielsharkov/svelte-router/Viewport'\nimport router from './router'\n</script>\n\n<nav>\n\t<button on:click={()=> router.push('home')}>\n\t\tHome\n\t</button>\n\t<button on:click={()=> router.push('users.user', {uid: 'paul'})}>\n\t\tPaul\n\t</button>\n\t<button on:click={()=> router.push('user.album', {uid: 'alex', aid: 'sumer-2016'})}>\n\t\tBob's Album\n\t</button>\n</nav>\n\n<Viewport {router}/>\n```\n\n\n<br>\n\n--------------------------------------------------------------------------------\n<br>\n\n\n# Fallback Route\n\n```ts\nimport SvelteRouter from '@danielsharkov/svelte-router'\nimport ViewHome from './views/Home.svelte'\nimport ViewNotFound from './views/NotFound.svelte'\n\nexport default new SvelteRouter({\n\twindow,\n\troutes: {\n\t\t'home': {\n\t\t\tpath: '/',\n\t\t\tcomponent: ViewHome,\n\t\t},\n\t\t'404': {\n\t\t\tpath: '/404',\n\t\t\tcomponent: ViewNotFound,\n\t\t},\n\t},\n\tfallback: {\n\t\tname: '404',\n\t\treplace: false, // true by default\n\t},\n})\n```\n\n`fallback` is optional and defines the route the router should fallback to in\ncase the user navigates to an inexistent URL. If `replace` is `false` then the\nfallback will push the route into the browser history and change the URL,\notherwise it'll just display the fallback route in the router viewport without\naffecting the browser history. `replace` is `true` by default.\n\n\n<br>\n\n--------------------------------------------------------------------------------\n<br>\n\n\n# Route View Component Props\n\nThe route view components always get the props `router`, `params`, `urlQuery`\nand `props`.\n\n```svelte\n<script lang='ts'>\nexport let router\n// router: is the SvelteRouter instance you provided to <Viewport>\n\nexport let params\n// params: is either undefined or the parameters you defined\n// in the path template for this route in the router config.\n\nexport let urlQuery\n// urlQuery: is either undefined or a key:value object depending whether\n// the URL has any query parameters.\n\nexport let props\n// props: is either undefined or the defined props for this route\n// in the router config.\n\n// We assume that the route parameters always exist, because we defined\n// them parameters in the path template for this route in the router config -\n// and they do always exist, because the router won't route on a route\n// missing its parameters.\n// You can may access these values without worry of trying to access an\n// undefined property.\nconsole.log(params.someParam)\n\n// Same follows for props, they are hard-coded and therefore always defined.\nconsole.log(props.nav.title)\n\n// Only the urlQuery keys must be checked first, because there's is no\n// definition for the URL query.\nif (urlQuery.search) console.log(search)\n</script>\n\n<!-- Here your Layout & Styles ... -->\n```\n\n\n<br>\n\n--------------------------------------------------------------------------------\n<br>\n\n\n# Route Props\n\nRoutes can be assigned arbitrary props which are then available in the view\ncomponent:\n\n<sub>**router.ts**</sub>\n```ts\nimport SvelteRouter from '@danielsharkov/svelte-router'\nimport ViewHome from './views/Home.svelte'\nimport ViewAbout from './views/About.svelte'\n\nexport default new SvelteRouter({\n\twindow,\n\troutes: {\n\t\t'root': {\n\t\t\tpath: '/',\n\t\t},\n\t\t'home': {\n\t\t\tpath: '/home',\n\t\t\tcomponent: ViewHome,\n\t\t\tprops: {\n\t\t\t\tnav: {\n\t\t\t\t\ttitle: 'Home',\n\t\t\t\t\ticon: 'fas fa-home',\n\t\t\t\t},\n\t\t\t\tpicture: 'https://sample.url/picture.jpg',\n\t\t\t},\n\t\t},\n\t\t'about': {\n\t\t\tpath: '/about',\n\t\t\tcomponent: ViewAbout,\n\t\t\tprops: {\n\t\t\t\tnav: {\n\t\t\t\t\ttitle: 'About me',\n\t\t\t\t\ticon: 'fas fa-address-card',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t},\n})\n```\n\n<sub>**views/Home.svelte**</sub>\n\n```svelte\n<script lang='ts'>\nexport let props\n</script>\n\n<!-- We assume that these props always exist,\nbecause we hard-coded them into the router -->\n<h1>{props.nav.title}</h1>\n<img src={props.picture} alt='Some beautiful picture'>\n```\n\n<sub>**App.svelte**</sub>\n\n```svelte\n<script lang='ts'>\nimport router from './router'\n</script>\n\n<nav>\n\t{#each $router.routes as route}\n\t\t{#if route.props?.nav}\n\t\t\t<button on:click={router.push(route.name)}>\n\t\t\t\t<i class='{route.props.nav.icon}'/>\n\t\t\t\t<span>{route.props.nav.title}</span>\n\t\t\t</button>\n\t\t{/if}\n\t{/each}\n</nav>\n```\n\n\n<br>\n\n--------------------------------------------------------------------------------\n<br>\n\n\n# Before-Push Hooks\n\nThe `beforePush` hooks are promises which are executed before a route is pushed\nto the history. The passed function receives an object containing the current\n`location`, the `pendingRoute` (which the router is about to navigate to) and both\nthe `resolver` and `rejector`. A hook must either resolve (approve) the pending\nroute otherwise to reject it by passing an another route, or even\nnothing (`undefined`) to cancel routing. It can be used for specifying redirect behavior or\nanything else that should be done before a push.\n\nYou may use the `$router.isLoading` property to determine whether the router is\nloading a new route and resolving before push hooks, which may be asynchronous.\n\n| ‚ö† Warning ‚ö† |\n|:--|\nBe sure to always either resolve or reject a hook, otherwise it will **dead-lock** your router.\n\nSimple example of using a hook:\n\n```svelte\n<script>\nimport {onDestroy} from 'svelte'\nimport router from './router'\n\nconst testHookID = 'test-hook'\nconst removeBeforePushHook = router.addBeforePushHook(\n\ttestHookID,\n\t({location, pendingRoute, resolve, reject})=> {\n\t\tif (pendingRoute.name === '/very/secret/path') {\n\t\t\treject()\n\t\t}\n\t\tresolve()\n\t}\n)\n\nonDestroy(()=> {\n\tremoveBeforePushHook()\n\t// or\n\t// router.removeBeforePush(testHookID)\n})\n</script>\n```\n\n\n<br>\n\n--------------------------------------------------------------------------------\n<br>\n\n\n# Global Before-Push Hook\n\nThe global before push hook is a persistent hook, which can't be removed.\nIt's defined right in the router config.\nHere's a simple example:\n\n```ts\nimport SvelteRouter from '@danielsharkov/svelte-router'\nimport {get as get$} from 'svelte/store'\nimport {isValidUserSession} from 'user_session'\n// isValidSession could be any of your implementations - in this example it is\n// just a derived store returning false or true\n\nimport ViewLogin from './views/Login.svelte'\nimport ViewHome from './views/Home.svelte'\nimport ViewUser from './views/User.svelte'\n\nexport default new SvelteRouter({\n\twindow,\n\troutes: {\n\t\t'root': {\n\t\t\tpath: '/',\n\t\t},\n\t\t'login': {\n\t\t\tpath: '/login',\n\t\t\tcomponent: ViewLogin,\n\t\t},\n\t\t'home': {\n\t\t\tpath: '/home',\n\t\t\tcomponent: ViewHome,\n\t\t},\n\t\t'user': {\n\t\t\tpath: '/user/:uid',\n\t\t\tcomponent: ViewUser,\n\t\t},\n\t\t'very-secret': {\n\t\t\tpath: '/treasure',\n\t\t}\n\t},\n\tbeforePush({pendingRoute, location, resolve, reject}) {\n\t\tif (!get$(isValidUserSession)) {\n\t\t\treject({name: 'login'})\n\t\t} else if (pendingRoute.name === 'login') {\n\t\t\treject()\n\t\t}\n\n\t\tswitch (pendingRoute) {\n\t\tcase 'root':\n\t\t\treject({name: 'home'})\n\t\t\tbreak\n\t\tcase 'user':\n\t\t\tif (params.uid === 'a') {\n\t\t\t\treject({\n\t\t\t\t\tname: pendingRoute.name,\n\t\t\t\t\tparams: {uid: 'b'},\n\t\t\t\t})\n\t\t\t}\n\t\t\tbreak\n\t\tcase 'very-secret':\n\t\t\treject()\n\t\t}\n\t\tresolve()\n\t},\n})\n```\n\n\n<br>\n\n--------------------------------------------------------------------------------\n<br>\n\n\n# Programmatic History Navigation\n\nTo programmatically go back or forward in history just use the [browser history API](https://developer.mozilla.org/en-US/docs/Web/API/History_API) or the built-in aliases:\n\n\n```svelte\n<script lang='ts'>\nimport type SvelteRouter from '@danielsharkov/svelte-router'\nexport let router: SvelteRouter\n</script>\n\n<button on:click={router.back}>Back</button>\n<button on:click={router.forward}>Forward</button>\n```\n\nTo navigate to a new route use the built-in `push` API of the router, which\nrequires the route name as the first parameter and if needed a `key:value` object\nwith the parameter values:\n\n```svelte\n<script lang='ts'>\nimport type SvelteRouter from '@danielsharkov/svelte-router'\nexport let router: SvelteRouter\n</script>\n\n<button on:click={()=> router.push('home')}>\n\tHome\n</button>\n<button on:click={()=> router.push('user', {uid: 'ndkh2oj2'})}>\n\tDennis\n</button>\n<button on:click={()=> router.push('user', {uid: 'sz92fnkk'})}>\n\tErik\n</button>\n```\n\n\n<br>\n\n--------------------------------------------------------------------------------\n<br>\n\n\n# Route Updated Event Listener\n\nThe `routeUpdated` event listener if fired right after the route has been updated.\nThe payload in the event is the current location.\n\n```svelte\n<script lang='ts'>\nexport let params;\n\nfunction routeUpdated(event) {\n\tconsole.log('Route params changed!', event.detail.params)\n\tconsole.log(parms, 'is equal to the event payload')\n}\n</script>\n\n<svelte:window on:routeUpdated={routeUpdated}/>\n```\n\n\n<br>\n\n--------------------------------------------------------------------------------\n<br>\n\n\n# RouteLink Component\nA `<RouteLink>` can only be used inside a `<Viewport>` instance or by\npassing it the router instance. You may pass HTML tag attributes like `class`,\n`id` and etc. directly to the component - as you'll see in the example below.\n\n<sub>**router.ts**</sub>\n```ts\nimport SvelteRouter from '@danielsharkov/svelte-router'\nimport ViewHome from './views/Home.svelte'\nimport ViewAbout from './views/About.svelte'\nimport ViewUser from './views/User.svelte'\n\nexport default new SvelteRouter({\n\twindow,\n\troutes: {\n\t\t'root': {\n\t\t\tpath: '/',\n\t\t},\n\t\t'home': {\n\t\t\tpath: '/home',\n\t\t\tcomponent: ViewHome,\n\t\t\tprops: {\n\t\t\t\tnav: {\n\t\t\t\t\ttitle: 'Home',\n\t\t\t\t\ticon: 'fas fa-home',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t'about': {\n\t\t\tpath: '/about',\n\t\t\tcomponent: ViewAbout,\n\t\t\tprops: {\n\t\t\t\tnav: {\n\t\t\t\t\ttitle: 'About me',\n\t\t\t\t\ticon: 'fas fa-address-card',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t'user': {\n\t\t\tpath: '/about/:userName/:userNumber',\n\t\t\tcomponent: ViewUser,\n\t\t},\n\t},\n})\n```\n\n<sub>**components/Nav.svelte**</sub>\n```svelte\n<script>\nimport RouteLink from '@danielsharkov/svelte-router/RouteLink'\nimport router from '../router'\n</script>\n\n<nav>\n\t{#each $router.routes as route}\n\t\t{#if route.props?.nav}\n\t\t\t<RouteLink to={route.name} class='nav-btn'>\n\t\t\t\t<i class=\"{route.props.nav.icon}\"/>\n\t\t\t\t<span>{route.props.nav.title}</span>\n\t\t\t</RouteLink>\n\t\t{/if}\n\t{/each}\n</nav>\n\n<!-- The only disadvantage is that you have to define the styles globally -->\n<style>\n:global(.nav-btn) {\n\tcolor: #ff3e00;\n}\n</style>\n```\n\n#### RouteLink with parameters\n\n```svelte\n<RouteLink to='user' params={{userName: 'john_doe', userNumber: 0397}}>\n\tI'm a router link\n</RouteLink>\n```\n\n\n<br>\n\n--------------------------------------------------------------------------------\n<br>\n\n\n# Svelte Action `use:link`\nThe use action can only be used inside a `<Viewport>` instance or by\npassing it the router instance. When you're using it inside a `<Viewport>`,\nthen leave the parameter `router` blank.\n\n##### Inside a `<Viewport>`\n```svelte\n<script>\nimport {link} from '@danielsharkov/svelte-router'\n</script>\n\n<a href='/home' use:link class:active={$router.location === 'home'}>\n\tHome\n</a>\n<a href='/about' use:link class:active={$router.location === 'about'}>\n\tAbout\n</a>\n<a href='/user/lauren/8953' use:link class:active={$router.location === 'home'}>\n\tLauren#8953 <!-- matches /user/:userName/:userNumber -->\n</a>\n\n<style>\na.active {\n\tcolor: #ff3e00;\n}\n</style>\n```\n\n##### Outside a `<Viewport>`\n```svelte\n<script>\nimport {link} from '@danielsharkov/svelte-router'\nimport Viewport from '@danielsharkov/svelte-router/Viewport'\nimport router from './router'\n</script>\n\n<a href='/home' use:link={router}>Home</a>\n<a href='/about' use:link={router}>About</a>\n<a href='/user/lauren/8953' use:link={router}>Lauren</a>\n\n<Viewport {router}/>\n```\n\n\n<br>\n\n--------------------------------------------------------------------------------\n<br>\n\n\n# Route Transitions\nRoute transitions can't be just applied and used on a route easily. If you\nwould just add some transitions into the route component and navigate through\nthe routes, it will show unexpected behavior (\n\tsee Svelte Issues:\n\t[#6779](https://github.com/sveltejs/svelte/issues/6779),\n\t[#6763](https://github.com/sveltejs/svelte/issues/6763),\n\t[and even including my simple REPL](https://svelte.dev/repl/a5122281148c4c458f40e317fc4be11e?version=3.44.2)\n).\n\n**But! Dirty hacks to the rescue:** üòéüí°\n\nTo tell the viewport that a route has a transition you must dispatch the event\n`hasOutro` inside the `onMount` handler. Now that the viewport is aware of the\noutro transition, it's going to await the route to finish its transition,\nbefore switching to the next route.\nNow that the router is awaiting the outro, at the end of the transition we have\nto tell the viewport that it may switch further to the next route.\nThis is done by dispatching the another event called `outroDone`.\nThat's the trick!\n\n| ‚Ñπ Info |\n|:--|\nAny mistaken dispatched event `outroDone` will be ignored by the viewport, as it only listens for the event after the routers location has changed. Meaning you may just dispatch this event on every outro transition without worring.\n\n| ‚Ñπ Info |\n|:--|\nInside the route component be sure to call the `outroDone` event on the longest outro transition on any element inside the component, as they have to finish as well. For better understanding see the second example below üëá\n\n| ‚ö† Warning ‚ö† |\n|:--|\nBe sure to fire the event `outroDone` after telling the viewport to await the outro transition, otherwise the viewport will wait a indefinitely.\n\n```svelte\n<script lang='ts'>\nimport {onMount, createEventDispatcher} from 'svelte'\nimport {fade} from 'svelte/transition'\nconst dispatch = createEventDispatcher()\n\nonMount(()=> {\n\tdispatch('hasOutro')\n})\n</script>\n\n<div class='page'\ntransition:fade={{duration: 400}}\non:outroend={()=> dispatch('outroDone')}>\n\t<h1>Some content</h1>\n\n\t<p>Lorem Impsum...</p>\n</div>\n```\n\n##### A route containing a child transition\n```svelte\n<script lang='ts'>\nimport {onMount, createEventDispatcher} from 'svelte'\nimport {fade, fly} from 'svelte/transition'\nconst dispatch = createEventDispatcher()\n\nonMount(()=> {\n\tdispatch('hasOutro')\n})\n\nconst custom =()=> ({\n\tduration: 1000,\n\tcss: (t)=> (\n\t\t`opacity: ${t};` +\n\t\t`transform: rotate(${360 - 360 * t}deg);`\n\t)\n})\n</script>\n\n<!-- You may delay the actual route transition, otherwise it will already\nfade out and the user will see a blank screen, where it's actually is still\nprocessing a child outro. I set it to 600ms, because 1000ms of the longest\nchild transition (the heading) minus the 400ms route transition is a delay of 600ms. -->\n\n<div class='page'\ntransition:fade={{duration: 400, delay: 600}}\non:outroend={()=> dispatch('outroDone')}>\n\t<h1 transition:custom>\n\t\tSome content\n\t</h1>\n\n\t<p style='display: inline-block;' transition:fly={{duration: 700}}>\n\t\tLorem Impsum...\n\t</p>\n</div>\n```\n\n\n<br>\n\n--------------------------------------------------------------------------------\n<br>\n\n\n# ü•± Lazy loading\nTo lazy load components you would need to set the field `lazyComponent` instead\nof `component`. The router will panic when using both, as it makes no sense.\nYou may even provide a `loading` and `fallback` component, which act like a\nregular route component, meaning they [can be smoothly transitioned](#route-transitions) as well.\n\n```ts\nimport SvelteRouter from '@danielsharkov/svelte-router'\nimport RouteLoading from './components/RouteLoading.svelte'\nimport RouteLoadFailedFallback from './components/RouteLoadFailedFallback.svelte'\n\nimport ViewHome from './views/Home.svelte'\nimport ViewNotFound from './views/NotFound.svelte'\n\nexport default new SvelteRouter({\n\twindow: window,\n\tscrollingElement: window.document.scrollingElement,\n\troutes: {\n\t\t'home': {\n\t\t\tpath: '/',\n\t\t\tcomponent: ViewHome,\n\t\t},\n\t\t'users.user': {\n\t\t\tpath: '/users/:uid',\n\t\t\tlazyComponent: {\n\t\t\t\t// lazy load and show this component:\n\t\t\t\tcomponent: async ()=> (await import('./views/User.svelte')).default,\n\t\t\t\t// when the actual route component is loading show:\n\t\t\t\tloading: RouteLoading,\n\t\t\t\t// in case it fails loading the component show:\n\t\t\t\tfallback: RouteLoadFailedFallback,\n\t\t\t},\n\t\t},\n\t\t'user.album': {\n\t\t\tpath: '/users/:uid/albums/:aid',\n\t\t\tlazyComponent: {\n\t\t\t\tcomponent: async ()=> (await import('./views/Album.svelte')).default,\n\t\t\t\tloading: RouteLoading,\n\t\t\t\tfallback: RouteLoadFailedFallback,\n\t\t\t},\n\t\t},\n\t\t// this route below will never load, it would always first show the\n\t\t// loading and then the fallback component after 2 seconds\n\t\t'will-never-load': {\n\t\t\tpath: '/users/:uid/albums/:aid',\n\t\t\tlazyComponent: {\n\t\t\t\tcomponent: async ()=> new Promise((_, reject)=> setTimeout(reject, 2e3)),\n\t\t\t\tloading: RouteLoading,\n\t\t\t\tfallback: RouteLoadFailedFallback,\n\t\t\t},\n\t\t},\n\t\t'404': {\n\t\t\tpath: '/404',\n\t\t\t// This component mustn't be lazy loaded, as it makes no sense.\n\t\t\t// Still though it's possible.\n\t\t\tcomponent: ViewNotFound,\n\t\t},\n\t},\n\tfallback: {name: '404'},\n})\n```\n\n\n<br>\n\n--------------------------------------------------------------------------------\n<br>\n\n\n# üß© Router Examples\nYou can find full router examples in [danielsharkov/svelte-router-examples](https://github.com/DanielSharkov/svelte-router-examples)\n<br><br><br><br>\n\n\n\n# ‚ú® Thanks for contribution goes to:\n[@romshark](https://github.com/romshark)\n[@madebyfabian](https://github.com/madebyfabian)\n<br><br><br><br>\n\n\n\n# ‚öñÔ∏è License\nSvelte Router is a open source software [licensed as MIT](LICENSE).\n<br><br><br><br>\n\n\n\n# ‚öñÔ∏è Additional notices\nYou may feel free to use the [Logo](https://github.com/DanielSharkov/svelte-router/blob/master/logo.svg), [Animated Logo](https://github.com/DanielSharkov/svelte-router/blob/master/logo-animated.svg) and [Banner](https://github.com/DanielSharkov/svelte-router/blob/master/readme-banner.svg) for non-commercial usage only, but first please ask me kindly. Contact me by email on `scharktv[at]gmail.com`.\n",
	"downloads_history": [
		[3589, 6],
		[3596, 57],
		[3603, 7],
		[3610, 8],
		[3617, 3],
		[3624, 2],
		[3631, 5],
		[3638, 5],
		[3645, 3],
		[3659, 8],
		[3666, 43],
		[3673, 4],
		[3680, 2],
		[3687, 2],
		[3694, 3],
		[3701, 1],
		[3708, 6],
		[3715, 7],
		[3722, 28],
		[3729, 8],
		[3736, 3],
		[3743, 1],
		[3757, 2],
		[3764, 15],
		[3771, 17],
		[3778, 6],
		[3785, 1],
		[3792, 1],
		[3799, 5],
		[3806, 5],
		[3827, 1],
		[3834, 30],
		[3841, 60],
		[3848, 2],
		[3855, 47],
		[3862, 112],
		[3869, 1],
		[3876, 31],
		[3883, 1],
		[3890, 2],
		[3897, 2],
		[3904, 24],
		[3911, 2],
		[3918, 6],
		[3925, 7],
		[3932, 8],
		[3939, 2],
		[3946, 1],
		[3953, 3],
		[3960, 30],
		[3967, 2],
		[3974, 1],
		[3981, 2],
		[3988, 32],
		[4002, 2],
		[4009, 19],
		[4016, 7],
		[4023, 7],
		[4030, 3],
		[4037, 57],
		[4044, 18],
		[4051, 7],
		[4058, 2],
		[4065, 2],
		[4072, 1],
		[4086, 30],
		[4093, 28],
		[4100, 85],
		[4107, 7],
		[4114, 15],
		[4121, 10],
		[4128, 3]
	]
}
