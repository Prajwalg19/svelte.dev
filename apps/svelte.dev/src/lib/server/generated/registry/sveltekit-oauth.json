{
	"name": "sveltekit-oauth",
	"description": "Implement OAuth authentication in SvelteKit apps with custom providers.",
	"repo_url": "https://github.com/vhsdev/sveltekit-oauth",
	"authors": ["vhsdev"],
	"homepage": "https://github.com/vhsdev/sveltekit-oauth#readme",
	"downloads": 10,
	"updated": "2022-08-01T03:03:52.356Z",
	"tags": ["auth", "server"],
	"typescript": true,
	"version": "0.1.5",
	"svelte_range": "^3.49.0",
	"kit_range": "1.0.0-next.401",
	"last_rune_check_version": "0.1.5",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "sveltekit-oauth",
				"version": "0.1.5",
				"size": 169890
			},
			{
				"name": "cookie",
				"version": "0.5.0",
				"size": 23137
			},
			{
				"name": "jose",
				"version": "4.15.9",
				"size": 548521
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2]
		],
		"circular": []
	},
	"readme": "[![Latest NPM version](https://flat.badgen.net/npm/v/sveltekit-oauth)](https://npmjs.com/sveltekit-oauth)\n[![Total Downloads](https://flat.badgen.net/npm/dt/sveltekit-oauth)](https://npmjs.com/sveltekit-oauth)\n[![Minimum SvelteKit version](https://flat.badgen.net/badge/SvelteKit/>=1.0.0-next.286/ff3e00)](https://github.com/sveltejs/kit/blob/master/packages/kit/CHANGELOG.md#100-next286)\n![Type Definitions](https://flat.badgen.net/npm/types/sveltekit-oauth)\n[![MIT licensed](https://flat.badgen.net/npm/license/sveltekit-oauth)](https://codeberg.org/vhs/sveltekit-oauth/src/branch/trunk/LICENSE)\n\n# SvelteKit OAuth\n\n> Based on the original SvelteKitAuth https://github.com/Dan6erbond/sk-auth\n\nSvelteKit authentication library with built-in OAuth providers and unrestricted customization.\n\n## Installation\n\nInstall using your preferred package manager:\n\n```bash\npnpm add -D sveltekit-oauth # or yarn add, npm install, etc.\n```\n\n### Usage with TypeScript\n\nSvelteKit OAuth also comes with first-class support for TypeScript out of the box, so no need to add an additional `@types/` dev dependency! ðŸŽ‰\n\n## Getting Started\n\nSvelteKit OAuth is very easy to setup! All you need to do is instantiate the `SvelteKitAuth` class, and configure it with some default providers, as well as a JWT secret key used to verify the cookies:\n\n***Warning**: env variables prefixed with `VITE_` can be exposed and leaked into client-side bundles if they are referenced in any client-side code. Make sure this is not the case, or consider using an alternative method such as loading them via dotenv directly instead.*\n\n```ts\nexport const appAuth = new SvelteKitAuth({\n  providers: [\n    new GoogleOAuthProvider({\n      clientId: import.meta.env.VITE_GOOGLE_OAUTH_CLIENT_ID,\n      clientSecret: import.meta.env.VITE_GOOGLE_OAUTH_CLIENT_SECRET,\n      profile(profile) {\n        return { ...profile, provider: \"google\" };\n      },\n    }),\n  ],\n  jwtSecret: import.meta.env.JWT_SECRET_KEY,\n});\n```\n\nIf you want to override or augment the default SvelteKit session to get access to the user in the `session` store, you can use the `getSession` hook:\n\n```ts\n// overriding the default session\nexport const { getSession } = appAuth;\n\n// augmenting it\nexport const getSession: GetSession = async (request) => {\n  const { user } = await appAuth.getSession(request);\n\n  return { user };\n};\n```\n\n## Callbacks\n\nSvelteKit OAuth provides some callbacks, similar to NextAuth.js. Their call signatures are:\n\n```ts\ninterface AuthCallbacks {\n  signIn?: () => boolean | Promise<boolean>;\n  jwt?: (token: JWT, profile?: any) => JWT | Promise<JWT>;\n  session?: (token: JWT, session: Session) => Session | Promise<Session>;\n  redirect?: (url: string) => string | Promise<string>;\n}\n```\n\n## Adding more Providers\n\nSvelteKit OAuth uses a object-oriented approach towards creating providers. It is unopinionated and allows you to implement any three-legged authentication flow such as OAuth, SAML SSO, and even regular credential logins by omitting the `signin()` route.\n\nYou can implement your own using the `Provider` base provider class, and by implementing the `signin()` and `callback()` methods:\n\n```ts\nexport abstract class Provider<T extends ProviderConfig = ProviderConfig> {\n  abstract signin<Locals extends Record<string, any> = Record<string, any>, Body = unknown>(\n    request: ServerRequest<Locals, Body>,\n  ): RequestHandlerOutput | Promise<RequestHandlerOutput>;\n\n  abstract callback<Locals extends Record<string, any> = Record<string, any>, Body = unknown>(\n    request: ServerRequest<Locals, Body>,\n  ): CallbackResult | Promise<CallbackResult>;\n}\n```\n\n`signin()` must return a generic endpoint output, this can be a redirect, or the path to the provider's sign-in page. When implementing a `HTTP POST` route, `signin()` can simply return an empty body and `callback()` should handle the user login flow.\n\n`callback()` takes a `ServerRequest` and must return a `CallbackResult` which is a custom type exported by `sveltekit-oauth`:\n\n```ts\nexport type Profile = any;\nexport type CallbackResult = [Profile, string | null];\n```\n\nThe first item in the tuple is the user profile, which gets stored in the token, and is provided to the `jwt()` callback as the second argument. The second item is a redirect route, which may be tracked using the `state` query parameter for OAuth providers, or other implementations depending on the sign-in method.\n\n### OAuth2\n\nSvelteKitAuth comes with a built-in OAuth2 provider that takes extensive configuration parameters to support almost any common OAuth2 provider which follows the OAuth2 spec. It can be imported from `sveltekit-oauth/providers` and configured with the following configuration object:\n\n```ts\nexport interface OAuth2ProviderConfig<ProfileType = any, TokensType extends OAuth2Tokens = any>\n  extends OAuth2BaseProviderConfig<ProfileType, TokensType> {\n  accessTokenUrl?: string;\n  authorizationUrl?: string;\n  profileUrl?: string;\n  clientId?: string;\n  clientSecret?: string;\n  scope: string | string[];\n  headers?: any;\n  authorizationParams?: any;\n  params: any;\n  grantType?: string;\n  responseType?: string;\n  contentType?: \"application/json\" | \"application/x-www-form-urlencoded\";\n}\n```\n\nSome values have defaults which can be seen below:\n\n```ts\nconst defaultConfig: Partial<OAuth2ProviderConfig> = {\n  responseType: \"code\",\n  grantType: \"authorization_code\",\n  contentType: \"application/json\",\n};\n```\n\nThe `OAuth2Provider` class can then be instantiated with the configuration to support the OAuth2 flow, including authorization redirect, token retrieval and profile fetching. It will also automatically handle the `state` and `nonce` params for you.\n\n## Motivation\n\nSvelteKit OAuth is inspired by the [NextAuth.js](https://next-auth.js.org/) package built for the Next.js SSR framework for React. Unlike NextAuth.js it is completely unopinionated and only provides implementations for default flows, while still empowering users to add their own providers.\n\nAs it leverages classes and TypeScript, the implementation of such providers is very straightforward, and in the future it will even be possible to register multiple SvelteKit OAuth handlers in the same project, should the need arise, by leveraging a class-based client and server setup.\n\n## Examples\n\nSee the [example app](./app/) in the repository source.\n\n## Rights\n\nThis project is licensed under the terms of the MIT license.\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 25],
		[3603, 26],
		[3610, 23],
		[3617, 26],
		[3624, 11],
		[3631, 11],
		[3638, 8],
		[3645, 19],
		[3652, 23],
		[3659, 72],
		[3666, 112],
		[3673, 75],
		[3680, 32],
		[3687, 31],
		[3694, 62],
		[3701, 68],
		[3708, 41],
		[3715, 54],
		[3722, 46],
		[3729, 52],
		[3736, 59],
		[3743, 33],
		[3750, 43],
		[3757, 48],
		[3764, 39],
		[3771, 33],
		[3778, 41],
		[3785, 66],
		[3792, 76],
		[3799, 98],
		[3806, 115],
		[3813, 119],
		[3820, 78],
		[3827, 123],
		[3834, 107],
		[3841, 114],
		[3848, 101],
		[3855, 128],
		[3862, 121],
		[3869, 102],
		[3876, 77],
		[3883, 83],
		[3890, 116],
		[3897, 87],
		[3904, 75],
		[3911, 71],
		[3918, 61],
		[3925, 11],
		[3932, 5],
		[3939, 12],
		[3946, 5],
		[3953, 4],
		[3960, 3],
		[3967, 2],
		[3974, 5],
		[3981, 3],
		[3988, 6],
		[3995, 4],
		[4002, 24],
		[4009, 11],
		[4016, 5],
		[4023, 6],
		[4030, 7],
		[4037, 16],
		[4044, 13],
		[4051, 5],
		[4058, 3],
		[4065, 6],
		[4072, 5],
		[4079, 4],
		[4086, 6],
		[4100, 20],
		[4107, 2],
		[4114, 10],
		[4121, 28],
		[4128, 16],
		[4135, 8]
	]
}
