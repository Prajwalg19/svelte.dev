{
	"name": "@flexilte/dnd",
	"description": "Create JSON-driven layouts with drag and drop support in Svelte.",
	"repo_url": "https://github.com/flexilte/flexilte",
	"authors": ["borgmon"],
	"homepage": "https://flexilte.github.io",
	"downloads": 4,
	"updated": "2024-11-20T03:33:24.377Z",
	"tags": ["ui"],
	"github_stars": 1,
	"typescript": true,
	"version": "2.0.0",
	"svelte_range": "^4.0.0",
	"kit_range": "^2.5.10",
	"last_rune_check_version": "2.0.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@flexilte/dnd",
				"version": "2.0.0",
				"size": 12237
			},
			{
				"name": "@flexilte/core",
				"version": "2.0.0",
				"size": 9868
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# Flexilte DND\n\n# See [Flexilte Core](https://www.npmjs.com/package/@flexilte/core) for documentation\n\nFlexilte is a powerful Svelte framework that transforms JSON into flex-based pages. It supports any frontend UI framework and custom components, allowing for dynamic page creation and easy integration with AI-generated layouts.\n\n**DEMO https://flexilte.github.io/**\n\n(Yes this entire website is Flexilte json generated)\n\n## Features\n\n- JSON-driven layout generation\n- Support for custom components and any frontend UI framework\n- AI-powered page generation\n- Drag-and-drop editor\n- Flexible and responsive designs\n\n## Installation\n\nInstall Flexilte:\n\n```bash\nnpm install @flexilte/core\n```\n\nIf you use [skeleton](https://github.com/skeletonlabs/skeleton), Flexilte comes with wrappers:\n\n```bash\nnpm install @flexilte/core @flexilte/skeleton\n```\n\n## Basic Usage\n\n```svelte\n<script lang=\"ts\">\n\timport { Flexilte } from '@flexilte/core';\n\texport const components = {\n\t\tAvatar\n\t};\n\tconst layoutConfig: LayoutConfig<typeof components> = {\n\t\trows: [\n\t\t\t{\n\t\t\t\tcols: {\n\t\t\t\t\tcomponent: 'Avatar',\n\t\t\t\t\tprops: {\n\t\t\t\t\t\tsrc: 'https://placedog.net/512/512',\n\t\t\t\t\t\twidth: 'w-32',\n\t\t\t\t\t\trounded: 'rounded-full'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t};\n</script>\n\n<Flexilte layoutConfig={$docStore} {components}></Flexilte>\n```\n\n## Layout Config Model\n\nLayout config is a recursive tree.\n\n```ts\ninterface LayoutConfig<C extends Record<string, ComponentType>> {\n\tid?: string; // will be added to the element\n\twidth?: string; // tailwind class for the width (w-1/6)\n\tcomponent?: keyof C & string; // component name\n\tprops?: Record<string, unknown>; // component props\n\tnodeClass?: string; // classes apply to cols/rows/elements\n\twrapperClass?: string; // create and wrap element with a wrapper, this is a short hand for components that doesn't like flex box\n\tlayoutClass?: string; // classes apply to cols/rows\n\tcols?: LayoutConfig<C>[]; // array of itself\n\trows?: LayoutConfig<C>[]; // array of itself\n\tposX?: 'left' | 'right' | 'middle'; // we solved css! choose how to position your element horizontally\n\tposY?: 'top' | 'bottom' | 'middle'; // we solved css! choose how to position your element vertically\n\talignHeight?: boolean; // if true then all element in the same row/col will align at the bottom\n\twrap?: 'wrap' | 'nowrap'; // choose if element wrap around flex way\n\tgap?: string; // tailwind class for the gap (gap-4)\n}\n```\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3974, 52],
		[3981, 4],
		[3988, 2],
		[3995, 2],
		[4002, 2],
		[4009, 2],
		[4016, 4],
		[4023, 3],
		[4030, 1],
		[4037, 3],
		[4044, 6],
		[4051, 2],
		[4058, 1],
		[4072, 1],
		[4086, 2],
		[4093, 1],
		[4107, 4],
		[4114, 4],
		[4121, 6],
		[4128, 2]
	],
	"esm": true,
	"cjs": false
}
