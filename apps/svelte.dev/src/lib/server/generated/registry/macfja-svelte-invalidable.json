{
	"name": "@macfja/svelte-invalidable",
	"description": "Create Svelte stores that can update themselves on demand.",
	"repo_url": "https://github.com/macfja/svelte-invalidable",
	"authors": ["macfja"],
	"homepage": "https://github.com/macfja/svelte-invalidable#readme",
	"downloads": 6,
	"updated": "2021-09-25T17:51:57.132Z",
	"tags": ["miscellaneous"],
	"github_stars": 4,
	"typescript": true,
	"version": "1.1.0",
	"svelte_range": "^3.0",
	"last_rune_check_version": "1.1.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@macfja/svelte-invalidable",
				"version": "1.1.0",
				"size": 14427
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Svelte Invalidable store\n\nA Svelte that can be requested to update itself\n\n## Installation\n\n```\nnpm install @macfja/svelte-invalidable\n```\n\n## Goal\n\nThe idea behind this store is to provide a way to make a store to refresh it's base on an external event.\n\nFor example your store contains data that are dependent on an external API. Instead of creating a logic outside your store to update it, this store to just say \"your data is not up-to-date, go get the new data\"\n\n## Usage\n\n```javascript\nimport { invalidable } from \"@macfja/svelte-invalidable\"\nimport { writable } from \"svelte/store\"\n\nlet name = invalidable(writable(\"John\"), () => {\n    // your custom logic here\n    return \"the new value that you compute just before\"\n})\n\nname.invalidate()\n```\n\n```javascript\nimport { pinvalidable } from \"@macfja/svelte-invalidable\"\nimport { writable } from \"svelte/store\"\n\nlet name = pinvalidable(writable(\"John\"), () => {\n    // your custom logic here\n    // your should return a Promise (for example from a fetch)\n    // The store will only be updated when the promise is revolved\n    return new Promise(resolve => {resolve(\"Doe\")})\n})\n\nname.invalidate()\n```\n\n## Example\n\n```html\n<script>\n    import { invalidate, invalidable, pinvalidable } from \"@macfja/svelte-invalidable\"\n    import { writable } from \"svelte/store\"\n\n    let time = pinvalidable(writable(\"Never\"), () => {\n        return fetch(\"https://worldtimeapi.org/api/timezone/Etc/UTC\")\n            .then(r => r.json())\n            .then(r => r.datetime)\n    })\n\n    const updateTime = () => {\n        time.invalidate()\n    }\n\n    const updating = time.isUpdating\n    const values = [2, 7, 3, 5, 11, 13]\n    let position = 0\n    let data = invalidable(writable(2), () => values[(++position)%6])\n</script>\n\n<p>The last time the date was refresh is: {$time} {#if $updating}(Updating...){/if}</p>\n<button id=\"date-btn\" on:click={updateTime}>Do it now</button>\n\n<hr />\n<var on:click={() => invalidate(data)}>prime number: {$data}</var>\n```\n([REPL](https://svelte.dev/repl/c2c2ad1e14d747fabf68b5a2e85bbf6a?version=3.43.0))\n\n----\n\n```html\n<script>\n    import {pinvalidable} from \"@macfja/svelte-invalidable\"\n    import { writable, derived } from \"svelte/store\"\n\n    let quantity = 1\n    let price = pinvalidable(writable(10), () => {\n        // Simulate long calculation + network access\n        return new Promise(r => setTimeout(() => r(Math.round(quantity * 10 * 0.8)), 1000))\n    })\n    let discount = derived([price], ([finalPrice]) => {\n        return (10 * quantity) - finalPrice\n    })\n    const increase = () => {\n        quantity++\n        $price = quantity * 10\n        // Indicate that the price should be recalculated\n        price.invalidate()\n    }\n</script>\n<h2>Shopping cart</h2>\n<ul>\n    <li>\n        <ul>\n            <li>Product #1553879</li>\n            <li>Unit Price: 10造</li>\n            <li>Quantity {quantity} <button id=\"increase-qty\" on:click={increase}>+</button></li>\n        </ul>\n    </li>\n</ul>\n<dl>\n    <dt>Subtotal</dt>\n    <dd id=\"subtotal\">{10 * quantity}造</dd>\n    <dt>Total</dt>\n    <dd id=\"total\">{$price}造 ({$discount}造 of discount)</dd>\n</dl>\n```\n([REPL](https://svelte.dev/repl/05179797adcf4de5a2c1a78de61bbca3?version=3))\n\n## Contributing\n\nContributions are welcome. Please open up an issue or create PR if you would like to help out.\n\nRead more in the [Contributing file](CONTRIBUTING.md)\n\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 15],
		[3596, 42],
		[3603, 28],
		[3610, 7],
		[3617, 17],
		[3624, 9],
		[3631, 13],
		[3638, 29],
		[3645, 10],
		[3652, 17],
		[3659, 19],
		[3666, 11],
		[3673, 17],
		[3680, 8],
		[3687, 18],
		[3694, 10],
		[3701, 8],
		[3708, 11],
		[3715, 6],
		[3722, 9],
		[3729, 5],
		[3736, 5],
		[3743, 10],
		[3750, 7],
		[3757, 6],
		[3764, 11],
		[3771, 4],
		[3778, 3],
		[3785, 6],
		[3792, 6],
		[3799, 6],
		[3806, 4],
		[3813, 11],
		[3820, 6],
		[3827, 1],
		[3834, 8],
		[3841, 6],
		[3848, 4],
		[3855, 22],
		[3862, 9],
		[3869, 6],
		[3876, 3],
		[3883, 6],
		[3890, 17],
		[3897, 6],
		[3904, 6],
		[3911, 5],
		[3918, 6],
		[3925, 4],
		[3932, 4],
		[3939, 4],
		[3946, 2],
		[3953, 4],
		[3960, 1],
		[3967, 5],
		[3974, 3],
		[3981, 3],
		[3988, 1],
		[3995, 3],
		[4002, 1],
		[4009, 1],
		[4016, 4],
		[4023, 3],
		[4030, 6],
		[4037, 6],
		[4044, 8],
		[4051, 2],
		[4058, 4],
		[4065, 2],
		[4072, 5],
		[4079, 2],
		[4086, 2],
		[4093, 13],
		[4100, 1],
		[4107, 4],
		[4114, 6],
		[4121, 5],
		[4128, 7]
	],
	"esm": true,
	"cjs": false
}
