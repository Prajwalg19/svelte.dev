{
	"name": "@svelte-drama/suspense",
	"description": "Implements React's Suspense for Svelte.",
	"repo_url": "https://github.com/svelte-drama/suspense",
	"authors": ["adantes"],
	"homepage": "https://github.com/svelte-drama/suspense#readme",
	"downloads": 63,
	"updated": "2025-04-15T18:38:38.933Z",
	"tags": ["miscellaneous"],
	"github_stars": 65,
	"typescript": true,
	"version": "1.0.1",
	"svelte_range": "^5.3.0",
	"kit_range": "^2.20.7",
	"last_rune_check_version": "1.0.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@svelte-drama/suspense",
				"version": "1.0.1",
				"size": 17124
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Suspense for Svelte\n\nThis is a Svelte component that implements the core idea of React's `<Suspense>`.\n\nWhen requesting asynchronous data, a typical pattern is for a parent component to handle all fetching and then push data down to its children. This can become difficult as levels of nesting increase and add unnessecary amounts of complexity. `<Suspense>` instead lets its children, at an arbitrary nested depth, dictate when they are done loading.\n\n[See it in action](https://svelte.dev/repl/91183af6db654f2099806426ff3bbb4b)\n\n## Installation\n\n```\nnpm install --save @svelte-drama/suspense\n```\n\n## `suspend`\n\nChild components need to register what data they depend on. `suspend` returns a function to to handle orchestration between this component and its nearest parent `<Suspense>` component.\n\n```js\nsuspend<T extends { current: any, error?: Error }>(data: T) => T\n```\n\nWrap a model using runes. `<Suspense>` will consider this resolved as long as `current` resolves to not `undefined`. If `error` is present, `<Suspense>` will display the error state as long as `current` is undefined and `error` is not.\n\n```js\nsuspend<T extends Promise<any>>(data: T) => T\n```\n\nWrap a promise. This returns a promise, allowing it to be used as part of a promise chain. The containing `<Suspense>` component will display its `loading` state until the promise is resolved. If the promise is rejected, it will instead show the `error` state.\n\n## `createSuspense`\n\nBecause `suspend` relies on [getContext](https://svelte.dev/docs#getContext), it must be declared during component initialization. `createSuspense` can be used to create bind the function in advance, allowing the user to pass references to `suspend` when access to `getContext` or `$effect` would not normally be allowed.\n\n```js\nimport { createSuspense } from '@svelte-drama/suspense'\n\nconst suspend = createSuspense()\n```\n\nThe resulting function, `suspend`, is identical to `suspend` as listed above.\n\n## `<Suspense>`\n\n`<Suspense>` provides three slots, only one of which will be displayed at a time. All three are optional.\n\n- _loading_: If there any pending requests, this slot will be displayed.\n- _error_: Once a request fails, this slot is displayed. The caught error is [passed to the slot](https://svelte.dev/docs#slot_let) as `error`.\n- _default_: After all children have finished loading data, display this.\n\nTwo events are availabe:\n\n- _onerror_: Triggers after a promise given to `suspend` is rejected. The original error is passed as part of `event.detail`.\n- _onload_: Triggers when all components inside the `<Suspense>` block have finished loading.\n\n```svelte\n<script>\nimport { createSuspense, Suspense } from '@svelte-drama/suspense'\n\nconst suspend = createSuspense()\n\nconst MyComponent = import('./my-component.svelte').then((m) => m.default)\n</script>\n\n<Suspense\n  onerror={(e) => console.error(e.detail)}\n  onload={() => console.log('loaded')}\n>\n  {#snippet loading()}\n    <p>Loading...</p>\n  {/snippet}\n  {#snippet error(error)}\n    <p>Error: {error?.message || error}</p>\n  {/snippet}\n\n  {#snippet children(suspend)}\n    <h1>My Component</h1>\n    {#await suspend(MyComponent) then MyComponent}\n      <MyComponent />\n    {/await}\n  {/snippet}\n</Suspense>\n```\n\n## `<SuspenseList>`\n\n`<SuspenseList>` orchestrates the loading of all child `<Suspense>` containers. It guarantees they will load in display order. This is useful to avoid multiple, distracting pop-ins of content or reflow of elements while the user is reading.\n\n- _collapse_: Boolean. Defaults to `false`. If `true`, only one loading state will be shown among the children.\n- _final_: Boolean. Defaults to `false`. If `true`, children will not resuspend if they have been displayed, regardless of the state of previous siblings.\n- _onload_: Triggers when all components inside the `<SuspenseList>` have finished loading.\n\n```svelte\n<script>\nimport { Suspense, SuspenseList } from '@svelte-drama/suspense'\nimport Loading from './loading.svelte'\nimport Post from './my-component.svelte'\n\nexport let posts\n</script>\n\n<SuspenseList collapse final>\n  {#snippet children(loading)}\n    {#if loading}\n      <p>Fetching posts...</p>\n    {/if}\n\n    {#each posts as post}\n      <Suspense>\n        <Post {post} />\n\n        {#snippet loading()}\n          <Loading />\n        {/snippet}\n      </Suspense>\n    {/each}\n  {/snippet}\n</SuspenseList>\n```\n\n## Limitations\n\n- [Intro transitions](https://svelte.dev/docs/svelte-transition) will not work as expected on elements inside the default slot. Elements are rendered in a hidden container as soon as possible, which triggers these intro transitions prematurely.\n- SSR will only display the loading component. Implementing `<Suspense>` during SSR would require Svelte to support `async/await` during SSR.\n- `createSuspense` operates at component boundaries. The following example causes the parent of \"my-component.svelte\" to suspend, not the `<Suspense>` block inside of it, despite initial appearances:\n\n```svelte\n<script>\nimport Suspense, { createSuspense } from '@svelte-drama/suspense'\nimport getData from './get-data.js'\n\nconst suspend = createSuspense()\nconst request = getData()\n</script>\n\n<Suspense>\n  {#await suspend(request) then data}\n    {JSON.stringify(data)}\n  {/await}\n</Suspense>\n```\n\nThis, however, will work as it looks:\n\n```svelte\n<script>\nimport Suspense from '@svelte-drama/suspense'\nimport getData from './get-data.js'\n\nconst request = getData()\n</script>\n\n<Suspense>\n  {#snippet children(suspend)}\n    {#await suspend(request) then data}\n      {JSON.stringify(data)}\n    {/await}\n  {/snippet}\n</Suspense>\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 429],
		[3596, 336],
		[3603, 347],
		[3610, 368],
		[3617, 296],
		[3624, 244],
		[3631, 367],
		[3638, 489],
		[3645, 310],
		[3652, 368],
		[3659, 267],
		[3666, 433],
		[3673, 287],
		[3680, 277],
		[3687, 294],
		[3694, 302],
		[3701, 306],
		[3708, 435],
		[3715, 296],
		[3722, 381],
		[3729, 331],
		[3736, 413],
		[3743, 328],
		[3750, 361],
		[3757, 354],
		[3764, 349],
		[3771, 362],
		[3778, 299],
		[3785, 403],
		[3792, 275],
		[3799, 402],
		[3806, 397],
		[3813, 307],
		[3820, 555],
		[3827, 540],
		[3834, 256],
		[3841, 297],
		[3848, 231],
		[3855, 414],
		[3862, 284],
		[3869, 329],
		[3876, 202],
		[3883, 288],
		[3890, 201],
		[3897, 240],
		[3904, 262],
		[3911, 237],
		[3918, 301],
		[3925, 258],
		[3932, 138],
		[3939, 266],
		[3946, 372],
		[3953, 157],
		[3960, 340],
		[3967, 299],
		[3974, 207],
		[3981, 180],
		[3988, 357],
		[3995, 188],
		[4002, 202],
		[4009, 80],
		[4016, 129],
		[4023, 162],
		[4030, 232],
		[4037, 293],
		[4044, 270],
		[4051, 299],
		[4058, 152],
		[4065, 190],
		[4072, 226],
		[4079, 275],
		[4086, 127],
		[4093, 179],
		[4100, 51],
		[4107, 33],
		[4114, 63],
		[4121, 183],
		[4128, 105]
	]
}
