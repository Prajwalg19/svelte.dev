{
	"name": "render-big-data",
	"description": "Render big data lists with high performance in Svelte.",
	"repo_url": "https://github.com/Buzhifanji/render-big-data",
	"authors": ["buzhifanji"],
	"homepage": "https://github.com/Buzhifanji/render-big-data#readme",
	"downloads": 26,
	"updated": "2023-01-03T14:17:41.361Z",
	"tags": ["ui"],
	"github_stars": 1,
	"typescript": true,
	"version": "0.4.1",
	"svelte_range": "^3.52.0",
	"last_rune_check_version": "0.4.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "render-big-data",
				"version": "0.4.1",
				"size": 57311
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "## virtual-list\r\n\r\n![NPM](https://img.shields.io/npm/l/render-big-data?style=for-the-badge)\r\n![npm](https://img.shields.io/npm/v/render-big-data?style=for-the-badge)\r\n![downloads](https://img.shields.io/npm/dm/render-big-data.svg?style=for-the-badge)\r\n![npm bundle size (scoped)](https://img.shields.io/bundlephobia/minzip/render-big-data?style=for-the-badge)\r\n\r\n[中文](./README.zh_CN.md) | [English](./README.md)\r\n\r\n## Advantages\r\n\r\n- Only 4 required props, simple and very easy to use.\r\n- Big data list with high render performance and efficient.\r\n- You don't have to care about item size, it will calculate automatic.\r\n- There is no framework limitation, only one premise, the framework used supports web component\r\n\r\n## Live demo\r\n\r\n[https://buzhifanji.github.io/render-big-data/](https://buzhifanji.github.io/render-big-data/)\r\n\r\n## Simple usage\r\n\r\nexample by use `vue`.\r\n\r\n```\r\nnpm i render-big-data --save\r\n```\r\n\r\ncomponent:\r\n\r\n```vue\r\n<script>\r\nimport { initRenderData, visiableData } from \"render-big-data\";\r\nimport Mock from \"mockjs\";\r\nimport { onUnmounted } from \"vue\";\r\n\r\nsetTimeout(() => {\r\n  const reslut: { key: number; value: string }[] = [];\r\n  for (let i = 0; i < 10000; i++) {\r\n    reslut.push({ key: i, value: Mock.mock({ content: \"@cparagraph()\" }).content });\r\n  }\r\n\r\n  initRenderData(reslut);  // first:  prepare all data\r\n}, 1000);\r\n\r\n\r\n// second: subscribe data\r\nconst list = []\r\nconst unsubscribe = visiableData.subscribe((value) => (data = value));\r\n\r\n\r\n// third: don't forget unsubscribe\r\nonUnmounted(unsubscribe);\r\n</script>\r\n\r\n<template>\r\n <virtual-list>\r\n    <virtual-list-item v-for=\"(item, index) in list\" :index=\"index\"> // index is important here, don't forget it\r\n       <p class=\"content\">{item.key}: {item.value}</p>\r\n    </virtual-list-item>\r\n  </virtual-list>\r\n</template>\r\n```\r\n\r\nweb component setting\r\n\r\nif you use `vue`，you should read [using-custom-elements-in-vue](https://vuejs.org//guide/extras/web-components.html#using-custom-elements-in-vue).\r\n\r\nif you use `react`, you should read [Using Web Components in React](https://reactjs.org/docs/web-components.html).\r\n\r\nif you use `angular`, you should read [using-custom-elements-in-angular](https://angular.io/guide/elements).\r\n\r\nif you use `svelte`, you don't need any settings.\r\n\r\nand so on.\r\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 1],
		[3596, 2],
		[3603, 20],
		[3610, 17],
		[3617, 6],
		[3624, 1],
		[3631, 1],
		[3638, 2],
		[3645, 10],
		[3652, 17],
		[3659, 1],
		[3666, 18],
		[3673, 4],
		[3687, 3],
		[3701, 2],
		[3708, 1],
		[3736, 20],
		[3743, 2],
		[3757, 1],
		[3764, 2],
		[3771, 3],
		[3778, 7],
		[3785, 1],
		[3792, 1],
		[3799, 1],
		[3806, 1],
		[3813, 2],
		[3827, 1],
		[3834, 63],
		[3841, 88],
		[3848, 11],
		[3855, 2],
		[3862, 2],
		[3869, 2],
		[3876, 3],
		[3883, 1],
		[3890, 19],
		[3911, 1],
		[3925, 3],
		[3939, 3],
		[3946, 2],
		[3953, 3],
		[3960, 4],
		[3967, 2],
		[3974, 4],
		[3981, 1],
		[3988, 18],
		[3995, 8],
		[4002, 1],
		[4016, 1],
		[4023, 5],
		[4037, 29],
		[4044, 15],
		[4051, 2],
		[4058, 2],
		[4065, 1],
		[4079, 1],
		[4100, 52],
		[4107, 2],
		[4114, 26],
		[4121, 15],
		[4128, 6]
	]
}
