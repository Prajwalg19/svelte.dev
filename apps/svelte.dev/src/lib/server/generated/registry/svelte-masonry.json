{
	"name": "svelte-masonry",
	"description": "Implements lightweight Masonry layout for Svelte.",
	"repo_url": "https://github.com/janzheng/svelte-masonry",
	"authors": ["janzheng"],
	"homepage": "https://github.com/janzheng/svelte-masonry#readme",
	"downloads": 52,
	"updated": "2025-01-14T23:02:23.331Z",
	"tags": ["ui"],
	"github_stars": 33,
	"typescript": false,
	"version": "0.1.5",
	"svelte_range": "^4.0.0",
	"kit_range": "^2.15.2",
	"last_rune_check_version": "0.1.5",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-masonry",
				"version": "0.1.5",
				"size": 485253
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-masonry\n\nA lightweight Masonry implementation for Svelte, based on [Ana Tudor's CSS-Tricks article](https://css-tricks.com/a-lightweight-masonry-solution/). No external dependencies required.\n\n[Demo](https://svelte-masonry.surge.sh)\n\nBoth demos can be found under `/src/routes/`\n\nThis is an implementation of Masonry based on this excellent article by Ana Tudor (@anatudor) on CSS Tricks: https://css-tricks.com/a-lightweight-masonry-solution. It's really great. It requires no external dependencies, is super light-weight, etc.\n\nBasically I just wrapped Svelte around the Masonry code as a reusable component.\n\n\n## Installation\n\n```bash\nnpm install svelte-masonry\n```\n\nor\n\n```bash\nyarn add svelte-masonry\n```\n\n## Basic Usage\n\n```svelte\n<script>\n  import Masonry from 'svelte-masonry';\n  \n  let data = [\n    { name: 'Item 1', text: 'Some content...' },\n    { name: 'Item 2', text: 'More content...' }\n  ];\n</script>\n\n<Masonry \n  stretchFirst={true} \n  gridGap={'0.75rem'} \n  colWidth={'minmax(Min(20em, 100%), 1fr)'}\n>\n  {#each data as item}\n    <div class=\"card\">\n      <h3>{item.name}</h3>\n      <p>{item.text}</p>\n    </div>\n  {/each}\n</Masonry>\n```\n\n## Component Props\n\n- `stretchFirst` (boolean): Stretches the first item across the full width\n- `gridGap` (string): Space between grid items (default: '0.5em')\n- `padding` (string): Padding around the entire grid (default: '0px')\n- `colWidth` (string): Column width using CSS grid values (default: 'minmax(Min(20em, 100%), 1fr)')\n- `items` (array): Optional array of data items - pass this if your grid content updates dynamically\n- `reset` (boolean): Trigger to force grid recalculation\n\n## Working with Dynamic Content\n\n### Images and Async Content\nWhen working with images or other async content, use the `refreshLayout` binding:\n\nAn example can be found under `/src/routes/pics/+page.svelte`\n\n\n\n```svelte\n<script>\n  import Masonry from 'svelte-masonry';\n  import { onMount } from 'svelte';\n\n  let refreshLayout;\n  let images = [];\n  \n  onMount(async () => {\n    images = await fetchImages();\n  });\n</script>\n\n<Masonry \n  items={images}\n  bind:refreshLayout={refreshLayout}\n  gridGap={'0.75rem'}\n>\n  {#each images as image}\n    <img \n      src={image.url} \n      alt={image.alt}\n      on:load={refreshLayout}\n      class=\"w-full h-auto\"\n    />\n  {/each}\n</Masonry>\n```\n\n### Dynamic Updates (e.g., \"Load More\")\n\n```svelte\n<script>\n  import Masonry from 'svelte-masonry';\n  let items = [];\n  let refreshLayout;\n  \n  async function loadMore() {\n    const newItems = await fetchMoreItems();\n    items = [...items, ...newItems];\n  }\n</script>\n\n<button on:click={loadMore}>Load More</button>\n\n<Masonry \n  items={items}\n  bind:refreshLayout={refreshLayout}\n  gridGap={'0.75rem'}\n>\n  {#each items as item}\n    <div class=\"card\">\n      <h3>{item.name}</h3>\n      <p>{item.text}</p>\n    </div>\n  {/each}\n</Masonry>\n```\n\n## Important Implementation Notes\n\n1. **Async Content Loading**\n   - Always bind `refreshLayout` when working with async content\n   - Trigger `refreshLayout` on image load events\n   - Pass the `items` prop when content updates dynamically\n\n2. **Layout Updates**\n   The layout automatically refreshes when:\n   - Window is resized\n   - Items array changes\n   - `reset` prop is triggered\n   - `refreshLayout()` is manually called\n\n3. **Grid Behavior**\n   - Uses CSS Grid under the hood\n   - Automatically adjusts columns based on viewport width\n   - Can stretch first item full-width with `stretchFirst`\n   - Centers content with `justify-content: center`\n\n\n\n## Development\n\nYou're welcome to create an issue, feature request, or a pull request and I'll take a look, but this won't be a very managed repo. Instead, please read the the CSS tricks article, check out the source code, or ask the author (@anatudor) directly about the implementation (this repo is not related to the author, but an implementation of the CSS tricks article).\n\n\n## License\n\nThe code was lifted from Ana Tudor (@anatudor) from CSS tricks. They have a funny license page, so you should take a look (https://css-tricks.com/license/). Do whatever you'd like with this example! \n\n\n\n\n## Deployment / Packaging\n\nThis project was built with Sveltekit Package https://svelte.dev/docs/kit/packaging / https://www.npmjs.com/package/@sveltejs/package. \n\nTo build the package, run `npm run package`. This will build the package and create a dist folder with the built files.\n\nTo publish the package, run `npm publish`. This will publish the package to the npm registry.\n\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 9],
		[3596, 38],
		[3603, 643],
		[3610, 68],
		[3617, 20],
		[3624, 8],
		[3631, 24],
		[3638, 6],
		[3645, 6],
		[3652, 19],
		[3659, 14],
		[3666, 40],
		[3673, 28],
		[3680, 11],
		[3687, 36],
		[3694, 11],
		[3701, 97],
		[3708, 21],
		[3715, 26],
		[3722, 17],
		[3729, 38],
		[3736, 27],
		[3743, 12],
		[3750, 10],
		[3757, 33],
		[3764, 34],
		[3771, 16],
		[3778, 50],
		[3785, 31],
		[3792, 46],
		[3799, 142],
		[3806, 62],
		[3813, 154],
		[3820, 104],
		[3827, 191],
		[3834, 94],
		[3841, 139],
		[3848, 115],
		[3855, 84],
		[3862, 137],
		[3869, 91],
		[3876, 105],
		[3883, 78],
		[3890, 46],
		[3897, 85],
		[3904, 90],
		[3911, 105],
		[3918, 120],
		[3925, 52],
		[3932, 36],
		[3939, 120],
		[3946, 43],
		[3953, 33],
		[3960, 28],
		[3967, 59],
		[3974, 63],
		[3981, 30],
		[3988, 16],
		[3995, 307],
		[4002, 272],
		[4009, 24],
		[4016, 39],
		[4023, 314],
		[4030, 146],
		[4037, 765],
		[4044, 681],
		[4051, 611],
		[4058, 193],
		[4065, 55],
		[4072, 33],
		[4079, 114],
		[4086, 49],
		[4093, 40],
		[4100, 62],
		[4107, 44],
		[4114, 52],
		[4121, 90],
		[4128, 39]
	],
	"esm": true,
	"cjs": true
}
