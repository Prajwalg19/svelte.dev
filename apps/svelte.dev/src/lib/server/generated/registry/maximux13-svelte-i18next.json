{
	"name": "@maximux13/svelte-i18next",
	"description": "Add internationalization (i18n) support to SvelteKit.",
	"repo_url": "https://github.com/maximux13/svelte-i18next",
	"authors": ["maximux13"],
	"homepage": "https://github.com/maximux13/svelte-i18next#readme",
	"downloads": 11,
	"updated": "2023-11-27T16:08:58.637Z",
	"tags": ["integration"],
	"github_stars": 8,
	"typescript": true,
	"version": "2.0.0",
	"svelte_range": "^3.55.1 || ^4.0.0",
	"kit_range": "^1.8.5",
	"last_rune_check_version": "2.0.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@maximux13/svelte-i18next",
				"version": "2.0.0",
				"size": 44520
			},
			{
				"name": "accept-language-parser",
				"version": "1.5.0",
				"size": 13907
			},
			{
				"name": "intl-parse-accept-language",
				"version": "1.0.0",
				"size": 23521
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2]
		],
		"circular": []
	},
	"readme": "# Svelte.i18next\n\n![License](https://img.shields.io/github/license/maximux13/svelte-i18next)\n![Downloads](https://img.shields.io/npm/dm/@maximux13/svelte-i18next)\n![Version](https://img.shields.io/npm/v/@maximux13/svelte-i18next)\n\n## Table of Contents\n\n- [Introduction](#introduction)\n- [Installation](#installation)\n- [Configuration](#configuration)\n- [Usage](#usage)\n- [Advanced Features](#advanced-features)\n  - [Managing Namespaces](#managing-namespaces)\n  - [getFixedT](#getfixedt)\n  - [Trans Component](#trans-component)\n- [Acknowledgements](#acknowledgements)\n- [Troubleshooting](#troubleshooting)\n- [License](#license)\n\n## Introduction\n\n[Svelte.i18next](https://github.com/maximux13/svelte-i18next) is a library that makes it easy to add internationalization (i18n) support to your [SvelteKit](https://kit.svelte.dev/). It provides a simple interface for configuring [i18next](https://www.i18next.com/) and managing translations.\n\n## Installation\n\nTo install Svelte.i18next, simply run:\n\n```bash\npnpm install @maximux13/svelte-i18next i18next i18next-browser-languagedetector i18next-http-backend\n```\n\n## Configuration\n\nTo set up Svelte.i18next in your project, you'll need to go through the following configuration steps:\n\n### i18n Config File\n\nStep 1: Create an i18n Configuration File\n\nCreate a file named src/i18n.ts and populate it with the i18n configuration. Here is an example:\n\n```ts\nexport default {\n  supportedLngs: ['en', 'es'], // Supported languages\n  fallbackLng: 'en', // Fallback language\n  defaultNS: 'common' // Default namespace\n};\n```\n\n### Locale Files\n\nStep 2: Create Locale Files\n\nCreate locale JSON files inside the static/locales/{lng}/{ns}.json directory. Replace {lng} with the language code (e.g., en, es) and {ns} with the namespace (e.g., common).\n\nExample content for `static/locales/en/common.json`:\n\n```json\n{\n  \"title\": \"Svelte i18next - Hello {{name}}!\",\n  \"world\": \"World\"\n}\n```\n\n### Server Initialization\n\nStep 3: Initialize SvelteI18next Instance\n\nIn your src/i18n.server.ts, initialize a new SvelteI18next instance as shown below:\n\n```ts\n// src/i18n.server.ts\nimport Backend from 'i18next-http-backend';\nimport { SvelteI18next } from '@maximux13/svelte-i18next';\nimport i18n from './i18n';\n\nconst i18next = new SvelteI18next({\n  i18next: {\n    ...i18n,\n    backend: { loadPath: '/locales/{{lng}}/{{ns}}.json' }\n  },\n  backend: Backend\n});\n\nexport default i18next;\n```\n\n### Add Server Hook\n\nStep 4: Add Server Hook\n\nCreate a server hook to initialize i18next in src/hook.server.ts:\n\n```ts\nimport type { Handle } from '@sveltejs/kit';\nimport { createInstance } from 'i18next';\nimport Backend from 'i18next-http-backend';\n\nimport i18n from './i18n';\nimport i18next from './i18n.server';\n\nimport { createFetchRequest } from '@maximux13/svelte-i18next';\n\nexport const handle: Handle = async (props) => {\n  const { event, resolve } = props;\n\n  const instance = createInstance();\n  const lng = await i18next.getLocale(event);\n  const ns = await i18next.getNamespaces(event);\n  const request = createFetchRequest(event.fetch);\n\n  await instance\n    .use(Backend)\n    .init({ ...i18n, backend: { loadPath: '/locales/{{lng}}/{{ns}}.json', request }, lng, ns });\n\n  const initOptions = i18next.getInitOptions(instance);\n\n  event.locals.i18n = Object.assign(instance, { initOptions });\n\n  return resolve(event, {\n    transformPageChunk: ({ html }) => html.replace('<html lang=\"en\">', `<html lang=\"${lng}\">`)\n  });\n};\n```\n\n### Client Initialization\n\nStep 5: Client Instance Setup\n\nFinally, set up a client instance to expose i18next functionalities in your code. For example, in src/routes/+layout.server.ts and src/routes/+layout.ts:\n\n`src/routes/+layout.server.ts`\n\n```ts\nimport type { LayoutServerLoad } from './$types';\n\nexport const load: LayoutServerLoad = async ({ locals, depends }) => {\n  depends('i18n:lng');\n\n  return { i18n: locals.i18n.initOptions };\n};\n```\n\n`src/routes/+layout.ts`\n\n```ts\nimport type { LayoutLoad } from './$types';\n\nimport i18next from 'i18next';\nimport Backend from 'i18next-http-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nimport { createStore } from '@maximux13/svelte-i18next';\n\nexport const load: LayoutLoad = async ({ data }) => {\n  i18next\n    .use(Backend)\n    .use(LanguageDetector)\n    .init({\n      ...data.i18n,\n      detection: { caches: ['cookie'], order: ['htmlTag'] }\n    });\n\n  const store = createStore(i18next);\n\n  return { i18n: store };\n};\n```\n\n## Usage\n\nOnce you've completed the [Configuration](#configuration) steps, you can start using Svelte.i18next in your Svelte components and server-side code.\n\n### In Svelte Components\n\nYou can use the i18n store in your Svelte components to access translations. Here's an example:\n\n```svelte\n<script lang=\"ts\">\n  export let data;\n\n  $: ({ i18n } = data);\n</script>\n\n<h1>{$i18n.t('title', { name: $i18n.t('world') })}</h1>\n```\n\n### In Svelte Server Code\n\nYou can also use i18n functionalities in your server-side code. For instance:\n\n```ts\n// Example in a server-side Svelte file\nimport type { PageServerLoad } from './$types';\n\nexport const load: PageServerLoad = async ({ locals, depends }) => {\n  depends('i18n:lng');\n\n  return { world: locals.i18n.t('world') };\n};\n```\n\n**Note**: We use `depends('i18n:lng');` to invalidate the data when the language changes. This invalidation is triggered by the i18n store when calling `$i18n.changeLanguage` method.\n\n## Advanced Features\n\n### Managing Namespaces\n\nTo manage namespaces, specify which namespaces should be loaded on each page by setting the `ns` property in your page or layout configuration. For example:\n\n```ts\n// src/routes/page.(server).ts\nexport const config = {\n  ns: ['page']\n};\n```\n\nThis will load the `page` namespace for the corresponding page. You can also use an array to load multiple namespaces:\n\n```ts\nexport const config = {\n  ns: ['page', 'otherNamespace']\n};\n```\n\n### getFixedT\n\nThe `getFixedT` function allows you to use a fixed translation function in your server-side code. Example:\n\n```ts\n// Inside a server-side Svelte file\nexport function GET(event) {\n  const t = i18next.getFixedT(event, { locale: 'en', namespaces: 'test', options: {} });\n  return new Response(t('title'));\n}\n```\n\n### Trans Component\n\nThe `Trans` component provides a convenient way to include complex translations with HTML tags and Svelte components.\n\n**Props**\n\n| Prop         | Type         | Description                                               |\n| ------------ | ------------ | --------------------------------------------------------- |\n| i18n         | i18n         | i18n store instance (required if not wrapped in provider) |\n| t            | i18n.t       | Custom translation function                               |\n| tOptions     | object       | Options to pass to the translation function               |\n| key          | string       | Translation key                                           |\n| values       | object       | Values for interpolation                                  |\n| count        | number       | Count for pluralization                                   |\n| context      | string       | Context for pluralization                                 |\n| ns           | string       | Namespace                                                 |\n| defaultValue | string       | Default value                                             |\n| components   | array/object | Components to be used for interpolation                   |\n\nFor detailed usage of the `Trans` component, please refer to [this section](#trans-component-usage).\n\n### Trans Component Usage\n\nThe `Trans` component is designed to handle more complex translations that may include HTML tags, variables, and even Svelte components. Below are some examples and use-cases where you might find the `Trans` component useful.\n\n#### Basic Usage\n\nAt its simplest, the `Trans` component can be used to translate static text.\n\n```svelte\n<Trans key=\"hello_world\" />\n```\n\n#### With Variables\n\nYou can also pass variables for interpolation.\n\n```svelte\n<Trans key=\"greeting\" values={{ name: 'John' }} />\n```\n\n#### With HTML Tags\n\nHTML tags can be included in the translation string and mapped to actual HTML tags using the `components` prop.\n\n**Example translation string**: `Click <link>here</link>`\n\n```svelte\n<Trans key=\"click_here\" components={{ link: 'a' }} />\n```\n\n#### Different Ways to Declare Components\n\n##### As a String\n\nYou can declare the component as a string, representing the HTML tag name.\n\n```svelte\n<Trans key=\"click_here\" components={{ link: 'a' }} />\n```\n\n##### As an Object\n\nYou can also declare the component as an object, providing more options including props.\n\n```svelte\n<Trans\n  key=\"click_here\"\n  components={{\n    link: { component: 'a', props: { href: '/page' } }\n  }}\n/>\n```\n\n##### As a Svelte Component\n\nYou can use a Svelte component directly and pass props to it.\n\n```svelte\n<Trans\n  key=\"click_here\"\n  components={{\n    link: { component: CustomLink, props: { href: '/page' } }\n  }}\n/>\n```\n\n#### `components` as an Array or Object\n\nThe `components` prop can either be an array or an object, depending on your needs.\n\n##### As an Array\n\nWhen declared as an array, the components will replace the tags in the order they appear in the translation string.\n\n**Translation string**: `Hello <0>World</0> and <1>universe</1>`\n\n```svelte\n<Trans key=\"key\" components={['strong', 'i']} />\n```\n\n##### As an Object\n\nWhen declared as an object, you can use meaningful keys to represent your tags, making your code more readable.\n\n**Translation string**: `Hello <bold>World</bold> and <italic>universe</italic>`\n\n```svelte\n<Trans key=\"key\" components={{ bold: 'strong', italic: 'i' }} />\n```\n\n#### Passing Props to Components\n\nYou can pass additional props to the components by using the object notation.\n\n```svelte\n<Trans\n  key=\"click_here\"\n  components={{\n    bold: { component: 'strong', props: { class: 'font-semibold' } },\n    link: { component: CustomLink, props: { href: '#/' } }\n  }}\n/>\n```\n\n#### Advanced Props\n\nThe `Trans` component also accepts a number of advanced props like `count`, `context`, `defaultValue`, and so on.\n\n```svelte\n<Trans key=\"itemCount\" count={5} />\n```\n\nThis could translate to \"5 items\" depending on your translation string and pluralization rules.\n\n## Acknowledgements\n\nThis library was inspired by the excellent work of SergioDXA on the [remix-i18next](https://github.com/sergiodxa/remix-i18next) library. Special thanks to all contributors and users for their support and feedback.\n\n## Troubleshooting\n\nIf you encounter any issues while using Svelte.i18next, please refer to the following resources for guidance:\n\n- **Documentation**: Make sure to read the documentation carefully for any configuration or usage details you might have missed.\n- **GitHub Issues**: Feel free to open an issue on our [GitHub repository](https://github.com/maximux13/svelte-i18next/issues) if you encounter bugs or have feature requests.\n- **Community Support**: For general questions and discussions, you can join the [Svelte community](https://svelte.dev/chat) or other relevant forums.\n\n## License\n\nThis project is licensed under the MIT License. For more details, see the [LICENSE](LICENSE) file in the repository.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 5],
		[3596, 12],
		[3603, 5],
		[3610, 7],
		[3617, 67],
		[3624, 2],
		[3631, 2],
		[3638, 5],
		[3645, 9],
		[3652, 8],
		[3659, 7],
		[3666, 10],
		[3673, 4],
		[3680, 6],
		[3687, 3],
		[3694, 3],
		[3701, 1],
		[3708, 3],
		[3715, 2],
		[3722, 5],
		[3729, 1],
		[3736, 2],
		[3743, 1],
		[3750, 1],
		[3757, 1],
		[3764, 2],
		[3771, 5],
		[3778, 3],
		[3785, 1],
		[3792, 4],
		[3799, 1],
		[3806, 4],
		[3813, 2],
		[3820, 2],
		[3827, 1],
		[3834, 9],
		[3841, 19],
		[3848, 1],
		[3855, 1],
		[3862, 14],
		[3869, 2],
		[3876, 1],
		[3883, 3],
		[3890, 7],
		[3897, 2],
		[3904, 2],
		[3911, 8],
		[3918, 2],
		[3925, 1],
		[3932, 3],
		[3939, 4],
		[3946, 2],
		[3953, 2],
		[3960, 3],
		[3967, 2],
		[3974, 1],
		[3981, 1],
		[3988, 2],
		[3995, 1],
		[4002, 6],
		[4009, 1],
		[4016, 5],
		[4023, 4],
		[4030, 5],
		[4037, 14],
		[4044, 12],
		[4051, 2],
		[4058, 3],
		[4065, 1],
		[4072, 2],
		[4079, 2],
		[4086, 1],
		[4093, 7],
		[4100, 12],
		[4107, 3],
		[4114, 11],
		[4121, 11],
		[4128, 5]
	]
}
