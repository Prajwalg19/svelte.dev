{
	"name": "svelte-select",
	"description": "Create select/autocomplete/typeahead components.",
	"repo_url": "https://rob-balfre@github.com/rob-balfre/svelte-select",
	"authors": ["rob-balfre"],
	"homepage": "https://github.com/rob-balfre/svelte-select#readme",
	"downloads": 30141,
	"updated": "2024-01-05T01:59:21.822Z",
	"tags": ["ui"],
	"github_stars": 1317,
	"typescript": true,
	"version": "5.8.3",
	"svelte_range": "^3.58.0",
	"kit_range": "1.15.0",
	"last_rune_check_version": "5.8.3",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-select",
				"version": "5.8.3",
				"size": 116599
			},
			{
				"name": "svelte-floating-ui",
				"version": "1.5.8",
				"size": 14998
			},
			{
				"name": "@floating-ui/dom",
				"version": "1.7.0",
				"size": 166707
			},
			{
				"name": "@floating-ui/core",
				"version": "1.7.0",
				"size": 214929
			},
			{
				"name": "@floating-ui/utils",
				"version": "0.2.9",
				"size": 64926
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[3, 4],
			[2, 4],
			[1, 3]
		],
		"circular": []
	},
	"readme": "<div align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/rob-balfre/svelte-select/master/svelte-select.png\" alt=\"Svelte Select\" width=\"150\" />\n  <h1>Svelte Select</h1>\n</div>\n\n<div align=\"center\">\n  <a href=\"https://npmjs.org/package/svelte-select\">\n    <img src=\"https://badgen.now.sh/npm/v/svelte-select\" alt=\"version\" />\n  </a>\n  <a href=\"https://npmjs.org/package/svelte-select\">\n    <img src=\"https://badgen.now.sh/npm/dm/svelte-select\" alt=\"downloads\" />\n  </a>\n</div>\n<div align=\"center\">A select/autocomplete/typeahead Svelte component.</div>\n\n## Demos\n\n[ðŸ’¥ Examples of every prop, event, slot and more ðŸ’¥](https://svelte-select-examples.vercel.app)\n\n[âœ¨ REPL: Simple âœ¨](https://svelte.dev/repl/c3bbe052fdfc4e87a46ccd9091ee002b)\n\n[ðŸ’ƒ REPL: Show me everything ðŸ•º](https://svelte.dev/repl/3df87e32340e4e9e85bf371becae2af0)\n\n## Installation\n\n```bash\nnpm install svelte-select\n```\n\n## Upgrading to v5\nSee [migration guide](/MIGRATION_GUIDE.md) if upgrading from v4 to v5.\n\n\n## Rollup and low/no-build setups\n\nList position and floating is powered by `floating-ui`, see their [package-entry-points](https://github.com/floating-ui/floating-ui#package-entry-points) docs if you encounter build errors.\n\n\n\n## Props\n\n| Prop                   | Type      | Default         | Description                                                    |\n| ---------------------- | --------- | --------------- | -------------------------------------------------------------- |\n| items                  | `any[]`   | `[]`            | Array of items available to display / filter                   |\n| value                  | `any`     | `null`          | Selected value(s)                                              |\n| justValue              | `any`     | `null`          | **READ-ONLY** Selected value(s) excluding container object     |\n| itemId                 | `string`  | `value`         | Override default identifier                                    |\n| label                  | `string`  | `label`         | Override default label                                         |\n| id                     | `string`  | `null`          | id attr for input field                                        |\n| filterText             | `string`  | `''`            | Text to filter `items` by                                      |\n| placeholder            | `string`  | `Please select` | Placeholder text                                               |\n| hideEmptyState         | `boolean` | `false`         | When no items hide list                                        |\n| listOpen               | `boolean` | `false`         | Open/close list                                                |\n| class                  | `string`  | `''`            | container classes                                              |\n| containerStyles        | `string`  | `''`            | Add inline styles to container                                 |\n| clearable              | `boolean` | `true`          | Enable clearing of value(s)                                    |\n| disabled               | `boolean` | `false`         | Disable select                                                 |\n| multiple               | `boolean` | `false`         | Enable multi-select                                            |\n| searchable             | `boolean` | `true`          | If `false` search/filtering is disabled                        |\n| groupHeaderSelectable  | `boolean` | `false`         | Enable selectable group headers                                |\n| focused                | `boolean` | `false`         | Controls input focus                                           |\n| listAutoWidth          | `boolean` | `true`          | If `false` will ignore width of select                         |\n| showChevron            | `boolean` | `false`         | Show chevron                                                   |\n| inputAttributes        | `object`  | `{}`            | Pass in HTML attributes to Select's input                      |\n| placeholderAlwaysShow  | `boolean` | `false`         | When `multiple` placeholder text will always show              |\n| loading                | `boolean` | `false`         | Shows `loading-icon`. `loadOptions` will override this         |\n| listOffset             | `number`  | `5`             | `px` space between select and list                             |\n| debounceWait           | `number`  | `300`           | `milliseconds` debounce wait                                   |\n| floatingConfig         | `object`  | `{}`            | [Floating UI Config](https://floating-ui.com/)                 |\n| hasError               | `boolean` | `false`         | If `true` sets error class and styles                          |\n| name                   | `string`  | `null`          | Name attribute of hidden input, helpful for form actions       |\n| required               | `boolean` | `false`         | If `Select` is within a `<form>` will restrict form submission |\n| multiFullItemClearable | `boolean` | `false`         | When `multiple` selected items will clear on click             |\n| closeListOnChange      | `boolean` | `true`          | After `on:change` list will close                              |\n| clearFilterTextOnBlur  | `boolean` | `true`          | If `false`, `filterText` value is preserved on:blur            |\n\n\n## Named slots\n\n```svelte\n<Select>\n  <div slot=\"prepend\" />\n  <div slot=\"selection\" let:selection let:index /> <!-- index only available when multiple -->\n  <div slot=\"clear-icon\" />  \n  <div slot=\"multi-clear-icon\" />  \n  <div slot=\"loading-icon\" />  \n  <div slot=\"chevron-icon\" /> \n  <div slot=\"list-prepend\" />  \n  <div slot=\"list\" let:filteredItems />  \n  <div slot=\"list-append\" />  \n  <div slot=\"item\" let:item let:index />  \n  <div slot=\"input-hidden\" let:value />\n  <div slot=\"required\" let:value />\n  <!-- Remember you can also use `svelte:fragment` to avoid a container DOM element. -->\n  <svelte:fragment slot=\"empty\" />  \n</Select>\n```\n\n\n## Events\n\n| Event Name | Callback          | Description                                                                |\n| ---------- | ----------------- | -------------------------------------------------------------------------- |\n| change     | { detail }        | fires when the user selects an option                                      |\n| input      | { detail }        | fires when the value has been changed                                      |\n| focus      | { detail }        | fires when select > input on:focus                                         |\n| blur       | { detail }        | fires when select > input on:blur                                          |\n| clear      | { detail }        | fires when clear is invoked or item is removed (by user) from multi select |\n| loaded     | { options }       | fires when `loadOptions` resolves                                          |\n| error      | { type, details } | fires when error is caught                                                 |\n| filter     | { detail }        | fires when `listOpen: true` and items are filtered                         |\n| hoverItem  | { detail }        | fires when hoverItemIndex changes                                          |\n\n\n### Items\n\n`items` can be simple arrays or collections.\n\n```html\n<script>\n  import Select from 'svelte-select';\n\n  let simple = ['one', 'two', 'three'];\n\n  let collection = [\n    { value: 1, label: 'one' },\n    { value: 2, label: 'two' },\n    { value: 3, label: 'three' },\n  ];\n</script>\n\n<Select items={simple} />\n\n<Select items={collection} />\n```\n\nThey can also be grouped and include non-selectable items.\n\n```html\n<script>\n  import Select from 'svelte-select';\n\n  const items = [\n    {value: 'chocolate', label: 'Chocolate', group: 'Sweet'},\n    {value: 'pizza', label: 'Pizza', group: 'Savory'},\n    {value: 'cake', label: 'Cake', group: 'Sweet', selectable: false},\n    {value: 'chips', label: 'Chips', group: 'Savory'},\n    {value: 'ice-cream', label: 'Ice Cream', group: 'Sweet'}\n  ];\n\n  const groupBy = (item) => item.group;\n</script>\n\n<Select {items} {groupBy} />\n```\n\nYou can also use custom collections.\n\n```html\n<script>\n  import Select from 'svelte-select';\n\n  const itemId = 'id';\n  const label = 'title';\n\n  const items = [\n    {id: 0, title: 'Foo'},\n    {id: 1, title: 'Bar'},\n  ];\n</script>\n\n<Select {itemId} {label} {items} />\n```\n\n### Async Items\n\nTo load items asynchronously then `loadOptions` is the simplest solution. Supply a function that returns a `Promise` that resolves with a list of items. `loadOptions` has debounce baked in and fires each time `filterText` is updated.\n\n```html\n<script>\n  import Select from 'svelte-select';\n\n  import { someApiCall } from './services';\n\n  async function examplePromise(filterText) {\n    // Put your async code here...\n    // For example call an API using filterText as your search params\n    // When your API responds resolve your Promise\n    let res = await someApiCall(filterText);\n    return res;\n  }\n</script>\n\n<Select loadOptions={examplePromise} />\n```\n\n\n### Advanced List Positioning / Floating \n\n`svelte-select` uses [floating-ui](https://floating-ui.com/) to control the list floating. See their docs and pass in your config via the `floatingConfig` prop.\n\n```html\n<script>\n  import Select from 'svelte-select';\n\n  let floatingConfig = {\n    strategy: 'fixed'\n  }\n</script>\n\n<Select {floatingConfig} />\n```\n\n### Exposed methods\nThese internal functions are exposed to override if needed. Look through the test file (test/src/index.js) for examples.\n\n```js\nexport let itemFilter = (label, filterText, option) => label.toLowerCase().includes(filterText.toLowerCase());\n```\n\n```js\nexport let groupBy = undefined;\n```\n\n```js\nexport let groupFilter = groups => groups;\n```\n\n```js\nexport let createGroupHeaderItem = groupValue => {\n  return {\n    value: groupValue,\n    label: groupValue\n  };\n};\n```\n\n```js\nexport function handleClear() {\n  value = undefined;\n  listOpen = false;\n  dispatch(\"clear\", value);\n  handleFocus();\n}\n```\n\n```js\nexport let loadOptions = undefined; // if used must return a Promise that updates 'items'\n/* Return an object with { cancelled: true } to keep the loading state as active. */\n```\n\n```js\nexport const getFilteredItems = () => {\n  return filteredItems;\n};\n```\n\n```js\nexport let debounce = (fn, wait = 1) => {\n  clearTimeout(timeout);\n  timeout = setTimeout(fn, wait);\n};\n```\n\nOverride core functionality at your own risk! See ([get-items.js](/src/lib/get-items.js) & [filter.js](/src/lib/filter.js))\n\n```js\n    // core replaceable methods...\n    <Select \n      filter={...}\n      getItems={...}\n    />\n```\n\n## A11y (Accessibility)\n\nOverride these methods to change the `aria-context` and `aria-selection` text.\n\n```js\nexport let ariaValues = (values) => {\n  return `Option ${values}, selected.`;\n}\n\nexport let ariaListOpen = (label, count) => {\n  return `You are currently focused on option ${label}. There are ${count} results available.`;\n}\n\nexport let ariaFocused = () => {\n  return `Select is focused, type to refine list, press down to open the menu.`;\n}\n```\n\n## CSS custom properties (variables)\n\nYou can style a component by overriding [the available CSS custom properties](/docs/theming_variables.md).\n\n```html\n<script>\n  import Select from 'svelte-select';\n</script>\n\n<Select --border-radius= \"10px\" --placeholder-color=\"blue\" />\n```\n\nYou can also use the `inputStyles` prop to write in any override styles needed for the input.\n\n```html\n<script>\n  import Select from 'svelte-select';\n\n  const items = ['One', 'Two', 'Three'];\n</script>\n\n<Select {items} inputStyles=\"box-sizing: border-box;\"></Select>\n```\n\n### ðŸ§ª Experimental: Replace styles (Tailwind, Bootstrap, Bulma etc)\nIf you'd like to supply your own styles use: `import Select from 'svelte-select/no-styles/Select.svelte'`. Then somewhere in your code or build pipeline add your own. There is a tailwind stylesheet via `import 'svelte-select/tailwind.css'`. It uses `@extend` so PostCSS is required.\n\n\n## License\n\n[LIL](LICENSE)\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 21899],
		[3603, 22542],
		[3610, 21431],
		[3617, 21406],
		[3624, 20781],
		[3631, 20268],
		[3638, 18603],
		[3645, 9288],
		[3652, 15651],
		[3659, 20780],
		[3666, 22308],
		[3673, 22450],
		[3680, 23062],
		[3687, 22324],
		[3694, 23303],
		[3701, 25274],
		[3708, 26028],
		[3715, 26980],
		[3722, 26146],
		[3729, 27065],
		[3736, 21948],
		[3743, 24323],
		[3750, 25464],
		[3757, 25044],
		[3764, 27842],
		[3771, 22560],
		[3778, 22406],
		[3785, 27515],
		[3792, 26968],
		[3799, 26242],
		[3806, 27025],
		[3813, 25569],
		[3820, 25313],
		[3827, 26198],
		[3834, 24451],
		[3841, 33575],
		[3848, 29651],
		[3855, 32133],
		[3862, 30583],
		[3869, 26369],
		[3876, 30109],
		[3883, 33704],
		[3890, 34270],
		[3897, 31043],
		[3904, 31832],
		[3911, 30644],
		[3918, 31906],
		[3925, 31108],
		[3932, 30653],
		[3939, 30516],
		[3946, 30056],
		[3953, 27152],
		[3960, 27952],
		[3967, 33582],
		[3974, 46518],
		[3981, 33881],
		[3988, 26657],
		[3995, 26372],
		[4002, 24593],
		[4009, 11293],
		[4016, 14726],
		[4023, 25557],
		[4030, 28869],
		[4037, 26769],
		[4044, 26820],
		[4051, 27337],
		[4058, 28538],
		[4065, 29623],
		[4072, 30502],
		[4079, 29687],
		[4086, 28513],
		[4093, 29310],
		[4100, 30617],
		[4107, 28845],
		[4114, 30141],
		[4121, 26354],
		[4128, 26781],
		[4135, 24930]
	],
	"esm": true,
	"cjs": false
}
