{
	"name": "svelte-translate-pro",
	"description": "Provides i18n library for dynamic language management.",
	"repo_url": "",
	"authors": ["dev.zarghami"],
	"downloads": 13,
	"updated": "2025-01-19T11:22:08.976Z",
	"tags": ["miscellaneous"],
	"typescript": true,
	"version": "0.0.8",
	"svelte_range": "^4.0.0",
	"kit_range": "^2.0.0",
	"last_rune_check_version": "0.0.8",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-translate-pro",
				"version": "0.0.8",
				"size": 19969
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Svelte Translate Pro\n\n## Svelte Internationalization (i18n) with Dynamic Language Loading\n\nThis project provides a flexible internationalization (i18n) solution for Svelte applications, with support for multiple languages and dynamic translation loading. It allows you to load translation files at runtime, switch languages dynamically, and retrieve translations with support for interpolation.\n\n![Svelte Translate Pro](https://raw.githubusercontent.com/devzarghami/svelte-translate-pro/refs/heads/main/svelte-translate-pro.jpg?raw=true)\n\n## Features\n\n- Support for multiple languages.\n- Dynamic loading of translation files.\n- Page-specific translations.\n- Interpolation of variables in translation strings.\n- Reactive translation system using Svelte stores.\n\n## Installation\n\nTo get started, simply install the package using npm or yarn:\n\n```bash\nnpm install svelte-translate-pro\n```\n\nor\n\n```bash\nyarn add svelte-translate-pro\n```\n\n## Usage\n\n### 1. Define Supported Languages\n\nYou can define the languages supported by your application using the `AppLanguages` enum:\n\n```typescript\nimport { AppLanguages } from 'svelte-translate-pro';\n\nconsole.log(AppLanguages.EN); // \"en\"\n```\n\n### 2. Load Translation Files\n\nUse the `loadTranslation` function to dynamically load a translation data for a given language.\n\n```typescript\nimport { loadTranslation, AppLanguages } from 'svelte-translate-pro';\n\nimport en from \"/lib/translations/en.json\"\n\nawait loadTranslation(AppLanguages.EN, en);\n\n```\n\n#### Translation File Example (`fr.json`)\n\n```json\n{\n  \"navbar.title\": \"Bienvenue\",\n  \"footer.contact\": \"Contactez-nous\"\n}\n```\n\n### 3. Get the Current Language\n\nYou can retrieve the current language using the `getActiveLanguage` function.\n\n```typescript\nimport { getActiveLanguage } from 'svelte-translate-pro';\n\nconst currentLang = getActiveLanguage();\nconsole.log(currentLang); // \"en\"\n```\n\n### 4. Set Page-Specific Translations\n\nUse `setPageSpecificTranslations` to update translations for the current page. This allows you to set translations that are specific to the page content.\n\n```typescript\nimport { setPageSpecificTranslations, AppLanguages } from 'svelte-translate-pro';\n\nsetPageSpecificTranslations({\n    [AppLanguages.EN]: { \"title\": \"Welcome to the page\" },\n    [AppLanguages.FA]: { \"title\": \"به صفحه خوش آمدید\" }\n});\n```\n\n### 5. Retrieve Translations\n\nYou can use the `$t$` store to retrieve translations reactively in your Svelte components.\n\n```svelte\n<script lang=\"ts\">\n  import { t$ } from 'svelte-translate-pro';\n</script>\n\n<h1>{$t$('navbar.title')}</h1> <!-- Displays the translation for \"navbar.title\" -->\n```\n\nYou can also pass variables for interpolation:\n\n```typescript\nconst variables = { name: \"John\" };\nconst translatedText = $t$('greeting', variables);\n```\n\n#### Example with Interpolation (`greeting` key in JSON):\n\n```json\n{\n  \"greeting\": \"Hello, {{name}}!\"\n}\n```\n\n### Example with Language-Specific Variables\n\nYou can also pass language-specific values for interpolation:\n\n```typescript\n$t$('greeting', { name: {\n  [AppLanguages.EN]: \"John\",\n  [AppLanguages.FA]: \"جان\"\n}});\n```\n\n### Inline Translation\n\nIf you need to provide inline translations directly in the code, you can use the following format:\n\n```typescript\n$t$({\n  [AppLanguages.EN]: \"Hello, World!\",\n  [AppLanguages.FA]: \"سلام دنیا!\"\n});\n```\n\n### 6. Language Switching\n\nYou can switch the language by calling the `setActiveLanguage` function, which updates the application's language:\n\n```typescript\nimport { setActiveLanguage, AppLanguages } from 'svelte-translate-pro';\n\nsetActiveLanguage(AppLanguages.FA); // Switches to Persian (FA)\nsetActiveLanguage(AppLanguages.EN); // Switches to English (EN)\n```\n\n### 7. Debugging\n\nWhen loading translations in development mode (`DEV` environment variable is true), you will see console logs indicating successful translation file loading.\n\n```bash\nDEBUG=vite-plugin-svelte:node-modules-onwarn pnpm build\n```\n\n## API Reference\n\n### `AppLanguages`\n\nAn enum that defines the supported languages:\n\n```typescript\nexport enum AppLanguages {\n    EN = \"en\",\n    FA = \"fa\",\n    ES = \"es\",\n    DE = \"de\",\n    FR = \"fr\",\n    IT = \"it\",\n    RU = \"ru\",\n    CN = \"zh-cn\",\n    JP = \"ja\",\n    AR = \"ar\"\n}\n```\n\n### `getActiveLanguage(): AppLanguage`\n\nGets the current language of the application.\n\n```typescript\nconst lang = getActiveLanguage(); // \"en\"\n```\n\n### `setPageSpecificTranslations(data: Record<AppLanguage, TranslationData>)`\n\nSets page-specific translations for the current page.\n\n```typescript\nsetPageSpecificTranslations({\n    en: { \"title\": \"Welcome\" },\n    fa: { \"title\": \"به صفحه خوش آمدید\" }\n});\n```\n\n### `t$`: Readable\n\nA derived store that provides a reactive translation function.\n\n```svelte\n<h1>{$t$('navbar.title')}</h1>\n```\n\n### `TranslationObject`\n\nRepresents a translation object that can map language codes to translation strings.\n\n```typescript\ntype TranslationObject = Partial<Record<AppLanguage, string>>;\n```\n\n### `TranslationData`\n\nRepresents translation data for a single language.\n\n```typescript\ntype TranslationData = Record<string, string>;\n```\n\n### `reactiveTranslate`: Reactive Translations for Arrays\n\n`reactiveTranslate`is a utility function that provides a reactive array of translated items based on the current language.\n\n```typescript\nimport { reactiveTranslate } from \"svelte-translate-pro\";\n\nconst tabs = reactiveTranslate((t) => [\n    { title: t(\"tabs.recieve\"), id: 1 },\n    { title: t(\"tabs.send\"), id: 2 },\n]);\n\n```\n```sveltehtml\n<div>\n    {#each $tabs as tab}\n        <button>{tab.title}</button>\n    {/each}\n</div>\n```\n\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Contributing\n\nContributions are welcome! Please fork this repository and submit your pull requests.\n\n---\n\nHappy coding and enjoy using the Svelte i18n system!\n",
	"legacy_svelte": false,
	"downloads_history": [
		[4016, 135],
		[4023, 143],
		[4030, 254],
		[4037, 16],
		[4044, 38],
		[4051, 12],
		[4058, 5],
		[4065, 6],
		[4072, 14],
		[4079, 1],
		[4086, 17],
		[4100, 22],
		[4107, 3],
		[4114, 13],
		[4121, 11],
		[4128, 8],
		[4135, 10]
	],
	"esm": true,
	"cjs": false
}
