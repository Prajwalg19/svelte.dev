{
	"name": "kitva",
	"description": "Validate endpoints and forms in SvelteKit applications.",
	"repo_url": "https://github.com/qurafi/kitva",
	"authors": ["alqurafi"],
	"homepage": "https://github.com/qurafi/kitva#readme",
	"downloads": 8,
	"updated": "2023-06-22T21:17:30.206Z",
	"tags": ["tooling"],
	"github_stars": 1,
	"typescript": true,
	"version": "1.0.0-next.15",
	"svelte_range": "^3.54.0",
	"kit_range": "^1.5.0",
	"last_rune_check_version": "1.0.0-next.15",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "kitva",
				"version": "1.0.0-next.15",
				"size": 189615
			},
			{
				"name": "ajv-build-tools",
				"version": "1.0.0-next.6",
				"size": 521552
			},
			{
				"name": "ajv",
				"version": "8.17.1",
				"size": 1030888
			},
			{
				"name": "fast-deep-equal",
				"version": "3.1.3",
				"size": 12966
			},
			{
				"name": "fast-uri",
				"version": "3.0.6",
				"size": 109402
			},
			{
				"name": "json-schema-traverse",
				"version": "1.0.0",
				"size": 22220
			},
			{
				"name": "require-from-string",
				"version": "2.0.2",
				"size": 3422
			},
			{
				"name": "rfdc",
				"version": "1.4.1",
				"size": 27150
			},
			{
				"name": "debug",
				"version": "4.4.0",
				"size": 42798
			},
			{
				"name": "ms",
				"version": "2.1.3",
				"size": 6721
			},
			{
				"name": "kleur",
				"version": "4.1.5",
				"size": 20250
			},
			{
				"name": "esbuild",
				"version": "0.17.19",
				"size": 130127
			},
			{
				"name": "chokidar",
				"version": "3.6.0",
				"size": 90200
			},
			{
				"name": "braces",
				"version": "3.0.3",
				"size": 44635
			},
			{
				"name": "fill-range",
				"version": "7.1.1",
				"size": 16743
			},
			{
				"name": "to-regex-range",
				"version": "5.0.1",
				"size": 22939
			},
			{
				"name": "is-number",
				"version": "7.0.0",
				"size": 9615
			},
			{
				"name": "is-glob",
				"version": "4.0.3",
				"size": 13609
			},
			{
				"name": "is-extglob",
				"version": "2.1.1"
			},
			{
				"name": "anymatch",
				"version": "3.1.3",
				"size": 9654
			},
			{
				"name": "picomatch",
				"version": "2.3.1",
				"size": 89952
			},
			{
				"name": "normalize-path",
				"version": "3.0.0",
				"size": 9219
			},
			{
				"name": "readdirp",
				"version": "3.6.0",
				"size": 20472
			},
			{
				"name": "glob-parent",
				"version": "5.1.2",
				"size": 12134
			},
			{
				"name": "is-binary-path",
				"version": "2.1.0",
				"size": 3078
			},
			{
				"name": "binary-extensions",
				"version": "2.3.0",
				"size": 5030
			},
			{
				"name": "fs-extra",
				"version": "11.3.0",
				"size": 55287
			},
			{
				"name": "graceful-fs",
				"version": "4.2.11",
				"size": 32535
			},
			{
				"name": "jsonfile",
				"version": "6.1.0",
				"size": 19750
			},
			{
				"name": "universalify",
				"version": "2.0.1",
				"size": 4675
			},
			{
				"name": "unplugin",
				"version": "1.16.1",
				"size": 192604
			},
			{
				"name": "acorn",
				"version": "8.14.1",
				"size": 547473
			},
			{
				"name": "webpack-virtual-modules",
				"version": "0.6.2",
				"size": 46451
			},
			{
				"name": "fast-glob",
				"version": "3.3.3",
				"size": 98396
			},
			{
				"name": "@nodelib/fs.stat",
				"version": "2.0.5",
				"size": 11845
			},
			{
				"name": "@nodelib/fs.walk",
				"version": "1.2.8",
				"size": 26377
			},
			{
				"name": "fastq",
				"version": "1.19.1",
				"size": 45922
			},
			{
				"name": "reusify",
				"version": "1.1.0",
				"size": 11696
			},
			{
				"name": "@nodelib/fs.scandir",
				"version": "2.1.5",
				"size": 22155
			},
			{
				"name": "run-parallel",
				"version": "1.2.0",
				"size": 6563
			},
			{
				"name": "queue-microtask",
				"version": "1.2.3",
				"size": 8367
			},
			{
				"name": "merge2",
				"version": "1.4.1",
				"size": 8897
			},
			{
				"name": "micromatch",
				"version": "4.0.8",
				"size": 56599
			},
			{
				"name": "ajv-errors",
				"version": "3.0.0",
				"size": 53233
			},
			{
				"name": "ajv-formats",
				"version": "3.0.0-rc.0",
				"size": 56824
			},
			{
				"name": "@sinclair/typebox",
				"version": "0.28.20",
				"size": 464629
			},
			{
				"name": "json-schema-to-typescript",
				"version": "13.1.2",
				"size": 2374321
			},
			{
				"name": "mz",
				"version": "2.7.0"
			},
			{
				"name": "any-promise",
				"version": "1.3.0"
			},
			{
				"name": "object-assign",
				"version": "4.1.1"
			},
			{
				"name": "thenify-all",
				"version": "1.6.0"
			},
			{
				"name": "thenify",
				"version": "3.3.1",
				"size": 7920
			},
			{
				"name": "glob",
				"version": "7.2.3",
				"size": 55064
			},
			{
				"name": "once",
				"version": "1.4.0"
			},
			{
				"name": "wrappy",
				"version": "1.0.2"
			},
			{
				"name": "inflight",
				"version": "1.0.6"
			},
			{
				"name": "inherits",
				"version": "2.0.4",
				"size": 3958
			},
			{
				"name": "minimatch",
				"version": "3.1.2",
				"size": 34902
			},
			{
				"name": "brace-expansion",
				"version": "1.1.11",
				"size": 11059
			},
			{
				"name": "balanced-match",
				"version": "1.0.2",
				"size": 6939
			},
			{
				"name": "concat-map",
				"version": "0.0.1"
			},
			{
				"name": "fs.realpath",
				"version": "1.0.0"
			},
			{
				"name": "path-is-absolute",
				"version": "1.0.1"
			},
			{
				"name": "lodash",
				"version": "4.17.21",
				"size": 1412415
			},
			{
				"name": "mkdirp",
				"version": "1.0.4",
				"size": 19088
			},
			{
				"name": "minimist",
				"version": "1.2.8",
				"size": 54477
			},
			{
				"name": "prettier",
				"version": "2.8.8",
				"size": 11238446
			},
			{
				"name": "cli-color",
				"version": "2.0.4",
				"size": 39623
			},
			{
				"name": "d",
				"version": "1.0.2",
				"size": 14209,
				"isCircular": true,
				"circularTarget": 68
			},
			{
				"name": "es5-ext",
				"version": "0.10.64",
				"size": 373969,
				"isCircular": true,
				"circularTarget": 69
			},
			{
				"name": "es6-iterator",
				"version": "2.0.3"
			},
			{
				"name": "es6-symbol",
				"version": "3.1.4",
				"size": 16511
			},
			{
				"name": "ext",
				"version": "1.7.0",
				"size": 23083
			},
			{
				"name": "type",
				"version": "2.7.3",
				"size": 89348
			},
			{
				"name": "esniff",
				"version": "2.0.1",
				"size": 60911
			},
			{
				"name": "d",
				"version": "^1.0.1",
				"isCircular": true,
				"circularTarget": 75
			},
			{
				"name": "event-emitter",
				"version": "0.3.5"
			},
			{
				"name": "next-tick",
				"version": "1.1.0",
				"size": 7650
			},
			{
				"name": "es5-ext",
				"version": "^0.10.64",
				"isCircular": true,
				"circularTarget": 69
			},
			{
				"name": "es6-iterator",
				"version": "^2.0.3",
				"isCircular": true,
				"circularTarget": 79
			},
			{
				"name": "memoizee",
				"version": "0.4.17",
				"size": 66149
			},
			{
				"name": "es6-weak-map",
				"version": "2.0.3",
				"size": 12458
			},
			{
				"name": "esniff",
				"version": "^2.0.1",
				"isCircular": true,
				"circularTarget": 82
			},
			{
				"name": "is-promise",
				"version": "2.2.2",
				"size": 2745
			},
			{
				"name": "lru-queue",
				"version": "0.1.0"
			},
			{
				"name": "timers-ext",
				"version": "0.1.8",
				"size": 12111
			},
			{
				"name": "get-stdin",
				"version": "8.0.0",
				"size": 4706
			},
			{
				"name": "glob-promise",
				"version": "4.2.2",
				"size": 6260
			},
			{
				"name": "@types/glob",
				"version": "7.2.0",
				"size": 6608
			},
			{
				"name": "@types/minimatch",
				"version": "5.1.2",
				"size": 12522
			},
			{
				"name": "@types/node",
				"version": "22.15.3",
				"size": 2350386
			},
			{
				"name": "undici-types",
				"version": "6.21.0",
				"size": 83680
			},
			{
				"name": "@types/lodash",
				"version": "4.17.16",
				"size": 867997
			},
			{
				"name": "@types/prettier",
				"version": "2.7.3",
				"size": 49802
			},
			{
				"name": "@types/json-schema",
				"version": "7.0.15",
				"size": 31748
			},
			{
				"name": "@bcherny/json-schema-ref-parser",
				"version": "10.0.5-fork",
				"size": 309512
			},
			{
				"name": "@jsdevtools/ono",
				"version": "7.1.3",
				"size": 105359
			},
			{
				"name": "call-me-maybe",
				"version": "1.0.2",
				"size": 3790
			},
			{
				"name": "js-yaml",
				"version": "4.1.0",
				"size": 404738
			},
			{
				"name": "argparse",
				"version": "2.0.1",
				"size": 171548
			},
			{
				"name": "jsonc-parser",
				"version": "3.3.1",
				"size": 212821
			},
			{
				"name": "zod-to-json-schema",
				"version": "3.24.5",
				"size": 211797
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[2, 4],
			[2, 5],
			[2, 6],
			[1, 7],
			[1, 8],
			[8, 9],
			[1, 10],
			[1, 11],
			[1, 12],
			[12, 13],
			[13, 14],
			[14, 15],
			[15, 16],
			[12, 17],
			[17, 18],
			[12, 19],
			[19, 20],
			[19, 21],
			[12, 22],
			[22, 20],
			[12, 23],
			[23, 17],
			[12, 24],
			[24, 25],
			[12, 21],
			[1, 26],
			[26, 27],
			[26, 28],
			[28, 29],
			[26, 29],
			[1, 30],
			[30, 31],
			[30, 32],
			[1, 33],
			[33, 34],
			[33, 35],
			[35, 36],
			[36, 37],
			[35, 38],
			[38, 39],
			[39, 40],
			[38, 34],
			[33, 23],
			[33, 41],
			[33, 42],
			[42, 13],
			[42, 20],
			[1, 43],
			[1, 42],
			[1, 44],
			[44, 2],
			[1, 45],
			[0, 8],
			[0, 46],
			[46, 47],
			[47, 48],
			[47, 49],
			[47, 50],
			[50, 51],
			[51, 48],
			[46, 52],
			[52, 53],
			[53, 54],
			[52, 55],
			[55, 53],
			[55, 54],
			[52, 56],
			[52, 57],
			[57, 58],
			[58, 59],
			[58, 60],
			[52, 61],
			[52, 62],
			[46, 63],
			[46, 64],
			[46, 17],
			[46, 65],
			[46, 66],
			[46, 67],
			[67, 68],
			[68, 69],
			[69, 70],
			[70, 68],
			[70, 69],
			[70, 71],
			[71, 68],
			[71, 72],
			[72, 73],
			[69, 71],
			[69, 74],
			[74, 75],
			[74, 69],
			[74, 76],
			[76, 69],
			[76, 68],
			[74, 73],
			[69, 77],
			[68, 73],
			[67, 69],
			[68, 78],
			[67, 70],
			[69, 79],
			[67, 80],
			[80, 68],
			[80, 69],
			[80, 81],
			[81, 68],
			[81, 69],
			[81, 70],
			[81, 71],
			[80, 76],
			[69, 82],
			[80, 83],
			[80, 84],
			[84, 69],
			[80, 77],
			[80, 85],
			[85, 69],
			[85, 77],
			[67, 85],
			[46, 86],
			[46, 87],
			[87, 88],
			[88, 89],
			[88, 90],
			[90, 91],
			[46, 92],
			[46, 93],
			[46, 94],
			[46, 95],
			[95, 96],
			[95, 94],
			[95, 97],
			[95, 98],
			[98, 99],
			[0, 100],
			[0, 10],
			[0, 7],
			[0, 101]
		],
		"circular": [
			[70, 68],
			[70, 69],
			[71, 68],
			[74, 68],
			[74, 69],
			[76, 69],
			[76, 68],
			[68, 69],
			[74, 75],
			[68, 78],
			[69, 70],
			[69, 79],
			[69, 82]
		]
	},
	"readme": "# Kitva - Validation Kit for Sveltekit\n\nValidate your endpoints and forms with no boilerplate, Just define your **schemas.ts** alongside your routes and this tool will take care of validation, type generation and form client generation.\n\n## Showcase\nhttps://github.com/qurafi/kitva/assets/15172611/839dea17-95f2-476d-8b5f-f90dd12ce77d\n\n\n## Table of Content\n\n- [Kitva - Validation Kit for Sveltekit](#kitva---validation-kit-for-sveltekit)\n  - [Showcase](#showcase)\n  - [Table of Content](#table-of-content)\n  - [Features](#features)\n  - [Get Started](#get-started)\n    - [Schema format](#schema-format)\n    - [Defining Schemas](#defining-schemas)\n      - [Example of an endpoint schema file](#example-of-an-endpoint-schema-file)\n      - [Type builders](#type-builders)\n    - [Validation Hooks](#validation-hooks)\n    - [Standalone Validation](#standalone-validation)\n    - [CLI options](#cli-options)\n    - [Manual Setup](#manual-setup)\n\n## Features\n\n- **Standard**: Uses Json Schema standard as the default schema format.\n- **Performance**: Compiles your schemas into highly optmized validation code, thanks to Ajv.\n- **Less boilerplate**: Endpoints and forms are automatically validated by a global Sveltekit hook.\n- **Small bundle sizes**: Just your validation function and the form client and nothing else!\n- **Typesafety**: Types are automatically generated and handled for you.\n- **Fully featured form client**: Just import `./$form` inside your page and your form client is ready to use. With features including:\n  - Fully typed, No need to bring types with you.\n  - Save your form in session storage.\n  - Warning before navigating away.\n  - Form input components ready to use with binding and errors all set\n  - and more.\n- **Zod compatibility**: Zod schemas are converted to Json Schemas out of the box.\n\n## Get Started\n\n**NOTE**: This is still in alpha. If you have any issue or feedback, please raise a new issue.\n\n`npm i kitva ajv ajv-formats@beta`\n\n`pnpm i kitva ajv ajv-formats@beta`\n\nAnd then run this command to setup everything:\n\n`npm run kitva`\n\n`pnpm kitva`\n\nAfter that, you may need to restart your typescript server.\n\n**NOTE:** This command will edit your vite config, tsconfig and create $lib/validation/hook file, so it's recommended to commit your work.\n\nFor more information: See [Manual setup](#manual-setup), [CLI Options](#cli-options)\n\n### Schema format\n\nJson schemas are used as the default schema format and it's managed by Ajv. Althought we kinda made it possible to use other formats, but we currently only focus on json schemas.\n\nFor more information about using Json Schemas. Consult one of the following links:\n\n- [Ajv docs](https://ajv.js.org/json-schema.html)\n- [Understanding JSON Schema](https://json-schema.org/understanding-json-schema/)\n- [JSON Schema Spec Draft-07](https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-00)\n\n**NOTE**: This library does not handle any schema compilation or any schema specific logic. It uses [ajv-build-tools](https://github.com/qurafi/ajv-tools) plugin under the hood to manage the compilation. If you have any issue regarding compilation, please open issue there.\n\n### Defining Schemas\n\nThere's two kind of schema files:\n\n- A shared one defined in `$lib/schemas`.\n- A route schema which included with some enhancement for endpoints and forms.\n\n#### Example of an endpoint schema file\n\n```typescript\n/* \n    routes/api/login\n        +server.ts\n        schemas.ts\n*/\n\n// or GET, DELETE, etc.\nexport const POST = {\n body: {\n  type: \"object\",\n  properties: {\n   username: {\n    type: \"string\",\n    minLength: 3,\n    maxLength: 36\n   },\n   password: {\n    type: \"string\",\n    minLength: 6,\n    maxLength: 128,\n    format: \"password\" // just a hint for the UI\n   },\n   email: {\n    type: \"string\",\n    minLength: 6,\n    maxLength: 100,\n    format: \"email\"\n   }\n  },\n  // additional properties allowed by default per the standard\n  additionalProperties: false,\n  // properties are optional by default\n  required: [\"username\", \"password\", \"email\"]\n }\n // validate other parts\n // queries, headers, params\n};\n```\n\nAnd that's it. Your endpoint will automatically validated. To get the parsed data use the `event.locals.validation.*`\n\n```typescript\n// all related types available in the new $types2 file\nimport type { POSTHandler } from \"./$types2\";\n\nexport const POST: POSTHandler = async (event) => {\n    // data is fully typed\n    // {email:string, username: string, ...}\n    const { data } = event.locals.validation.body;\n    return text(\"ok\");\n};\n```\n\nThe event local is automatically set by the hook and it contains:\n\n```typescript\nevent.locals.validation = {\n    valid: boolean, // if any part failed\n    body/headers/queries/params: {\n        valid: boolean,\n        data: Data,\n        input: JSONType,\n        errors: AjvError[]\n    },\n}\n```\n\n#### Type builders\n\nYou could use some type builders such as [Zod](https://github.com/colinhacks/zod)<sup>1</sup>, [Fluent-Json-Schema](https://github.com/fastify/fluent-json-schema) and [TypeBox](https://github.com/sinclairzx81/typebox)<sup>2</sup> to make life easier:\n\n```typescript\nimport { Type as t } from \"@sinclair/typebox\";\nimport { z } from \"zod\";\n\n// typebox\nconst UserLoginSchemaTypeBox = t.Object(\n {\n  username: t.String({\n   minLength: 3,\n   maxLength: 36\n  }),\n  password: t.String({\n   format: \"password\", // just a hint for the UI\n   minLength: 6,\n   maxLength: 128\n  }),\n  email: t.String({\n   format: \"email\",\n   minLength: 6,\n   maxLength: 100\n  })\n },\n { additionalProperties: false }\n);\n\n// zod\nconst UserLoginSchemaZod = z.object({\n username: z.string().min(3).max(36),\n password: z.string().min(6).max(128),\n email: z.string().min(6).max(100).email()\n});\n\nexport const POST = {\n body: UserLoginSchemaTypeBox,\n//  body: UserLoginSchemaZod,\n};\n```\n\n**1:** Zod schemas are converted to json schema using [zod-to-json-schema](https://github.com/StefanTerdell/zod-to-json-schema). Not all features are supported and the validation and compilation still backed by Ajv. Although it should work fine for most of schemas.\n\n**2:** TypeBox supports type inference but currently all schemas are converted to types by [json-schema-to-typescript](https://github.com/bcherny/json-schema-to-typescript).\n\n**Form actions:**\n\n```typescript\n/* routes/api/login\n    +page.svelte\n    +page.server.ts\n    schema.ts\n*/\nexport const actions = {\n    signup: {\n        // must be type object and additionalProperties turned off\n        type:\"object\",\n        additionalProperties: false,\n        properties: {\n            a: {type:\"string\"},\n            b: {type:\"boolean\", default:false},\n        },\n        // must set required\n        required: [\"a\", \"b\"]\n        ...\n    }\n\n}\n```\n\nThis will require aditional step by calling withValidation as there's no current possible way to intercept and change form result in Sveltekit:\n\n```typescript\nimport { withValidation } from \"kitva/hooks\";\n// NOTE: use $types2\nimport type { Actions } from \"./$types2\";\n\nexport const actions: Actions = withValidation({\n    signup(event) {\n        // type safe!\n        event.locals.validation.body.a\n\n        return {\n            success: true,\n        };\n    },\n    another: ..., // TS error, unknown prop\n});\n```\n\n**Using the client:**\n\nTo use the client, simply import `./$form`. The types will be automatically handled.\n\nAll clients are exported by the format, `action_name = createActionNameForm`, e.g., `default = createDefaultForm`.\n\n```svelte\n<script>\n import { createDefaultForm } from \"./$form\";\n\n const my_form = createDefaultForm({fields: initial_fields});\n\n const { fields, errs, action, action_url } = my_form;\n</script>\n\n<form method=\"post\" action={action_url}>\n <label>\n  Username\n  <input type=\"text\" name=\"username\" autocomplete=\"username\" bind:value={$fields.username} />\n  {#if $errs.username}\n   <p class=\"error\">{$errs.username}</p>\n  {/if}\n </label>\n\n <!-- or use Input from kitva/components -->\n <Input form={my_form} name=\"username\"/>\n ...\n</form>\n```\n\nFor more information about the client see [forms/types.ts](./src/lib/forms/types.ts)\n\n\n### Validation Hooks\n\nTo change the behavior of validation, use handleValidate from `kitva/hooks`.\n```typescript\nhandleValidate(actions.default, async ({ event, input, validate }) => {\n\n if (input.body) {\n  input.body.filled_by_server = \"filled by server\";\n }\n\n await validate();\n\n delete input.body.password;\n\n//  return false to cancel the validation\n//  return false\n});\n\n```\n\nNote that if you don't call validate. In production, it will be called for you, but in dev mode, an error will be thrown. This to prevent security issues when forgetting to call validate.\n\n\n\n### Standalone Validation\n\nTo directly import and use the compiled validation functions. refer to [ajv-build-tools](https://github.com/qurafi/ajv-tools#importing-the-compiled-schemas)\n\n### CLI options\n\nRunning the command without arguments will setup every thing listed in [Manual Setup](#manual-setup), but in case you want to setup a specific setup add --only=steps, where steps are comma seperated:\n`pnpm kitva --only=hook,vite,types`\n\n### Manual Setup\n\nUsually the CLI will handle most of the setup steps automatically, but just in case, here is the step required to setup Kitva:\n\n1. **Vite plugin**\n\n    ```javascript\n    import { defineConfig } from \"vite\";\n    import { sveltekit } from \"@sveltejs/kit/vite\";\n    import { vitePluginSvelteKitva } from \"kitva/vite\";\n\n    export default defineConfig({\n     plugins: [sveltekit(), vitePluginSvelteKitva()]\n    });\n    ```\n\n2. **Sveltekit hook**\n\n    ```javascript\n    // virtual import used to import all the compiled schemas\n    import schemas from \"$schemas?t=all\";\n\n    import { validationHook } from \"kitva/hooks\";\n    import { createPreset } from \"kitva/presets/ajv/server\";\n\n    export const preset = createPreset(schemas);\n\n    export const handle = validationHook(preset);\n    ```\n\n3. **Setting up rootDir**\n   Similar to \".svelte-kit/types\" for route types(./$types). Add \".schemas/types\" to your rootDirs and include.\n   \\\n    **NOTE:** Because tsconfig does not merge rootDirs and include, you have to copy them from .svelte-kit/tsconfig.json.\n\n    ````json\n     {\n         \"extends\": \"./.svelte-kit/tsconfig.json\",\n         \"compilerOptions\": {\n             \"rootDirs\": [\n                 \".\",\n                 \".svelte-kit/types\",\n                 \".schemas/types\"\n             ],\n             \"allowJs\": true,\n             \"checkJs\": true,\n             \"esModuleInterop\": true,\n             \"forceConsistentCasingInFileNames\": true,\n             \"resolveJsonModule\": true,\n             \"skipLibCheck\": true,\n             \"sourceMap\": true,\n             \"strict\": true\n         },\n         \"include\": [\n             \".schemas/types\"\n             \".svelte-kit/ambient.d.ts\",\n             \".svelte-kit/types/**/$types.d.ts\",\n             \"vite.config.ts\",\n             \"src/**/*.js\",\n             \"src/**/*.ts\",\n             \"src/**/*.svelte\",\n             \"src/**/*.js\",\n             \"src/**/*.ts\",\n             \"src/**/*.svelte\",\n             \"tests/**/*.js\",\n             \"tests/**/*.ts\",\n             \"tests/**/*.svelte\",\n         ],\n     }\n     ```\n\n    ````\n\n4. **Ambient Types**.\n   Just add this `import \"kitva/ambient\";` on top of your app.d.ts.\n   This will type $schemas virtual imports\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 3],
		[3596, 20],
		[3603, 8],
		[3631, 6],
		[3645, 19],
		[3659, 1],
		[3666, 14],
		[3673, 1],
		[3680, 3],
		[3701, 1],
		[3708, 2],
		[3715, 1],
		[3729, 1],
		[3743, 3],
		[3757, 2],
		[3764, 1],
		[3771, 11],
		[3778, 5],
		[3792, 1],
		[3806, 2],
		[3820, 1],
		[3834, 1],
		[3841, 2],
		[3855, 26],
		[3876, 12],
		[3883, 2],
		[3890, 14],
		[3897, 12],
		[3904, 2],
		[3918, 3],
		[3932, 15],
		[3953, 1],
		[3960, 2],
		[3967, 1],
		[3981, 1],
		[3988, 1],
		[4009, 12],
		[4016, 3],
		[4023, 3],
		[4037, 17],
		[4044, 13],
		[4051, 7],
		[4065, 3],
		[4072, 1],
		[4086, 1],
		[4100, 37],
		[4107, 2],
		[4114, 8],
		[4121, 8],
		[4128, 6]
	]
}
