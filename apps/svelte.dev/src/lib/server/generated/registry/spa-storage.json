{
	"name": "spa-storage",
	"description": "Integrate browser storage with Svelte and Pinia.",
	"repo_url": "https://github.com/arthurgermano/spa-storage",
	"authors": ["arthurgermano"],
	"homepage": "https://arthurgermano.github.io/spa-storage/",
	"downloads": 5,
	"updated": "2022-09-14T12:35:50.270Z",
	"tags": ["miscellaneous"],
	"github_stars": 1,
	"typescript": false,
	"version": "2.0.2",
	"svelte_range": "^3.49.0",
	"last_rune_check_version": "2.0.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "spa-storage",
				"version": "2.0.2",
				"size": 29146
			},
			{
				"name": "crypto-js",
				"version": "4.2.0",
				"size": 486947
			},
			{
				"name": "localforage",
				"version": "1.10.0",
				"size": 467670
			},
			{
				"name": "lie",
				"version": "3.1.1"
			},
			{
				"name": "immediate",
				"version": "3.0.6"
			},
			{
				"name": "lodash.clonedeep",
				"version": "4.5.0"
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2],
			[2, 3],
			[3, 4],
			[0, 5]
		],
		"circular": []
	},
	"readme": "# SPA Storage - Browser Storage Plugin for Svelte and Pinia\n\n## Integrate easely with browser storage and forage!\n\nSPA Storage makes it ease to send and retrieve information to browser storage and forage.\nYou can choose witch one to use and configure how it will behave.\n\n## Test It\n<a href=\"https://arthurgermano.github.io/spa-storage/\" _target=\"blank\">SPA Storage - testing</a>\n\n## Index\n\n- [SPA Storage - Browser Storage Plugin for Svelte and Pinia](#spa-storage---browser-storage-plugin-for-svelte-and-pinia)\n  - [Integrate easely with browser storage and forage!](#integrate-easely-with-browser-storage-and-forage)\n  - [Test It](#test-it)\n  - [Index](#index)\n  - [Features](#features)\n  - [Install](#install)\n    - [Example](#example)\n      - [SVELTE USAGE](#svelte-usage)\n      - [PINIA USAGE](#pinia-usage)\n  - [Main Methods Exported and Signatures](#main-methods-exported-and-signatures)\n    - [Storage Methods](#storage-methods)\n    - [Svelte Methods](#svelte-methods)\n    - [Pinia Methods](#pinia-methods)\n\n\n## Features\n\n- Ease Configuration\n- Set Keys with Timeout \n- Set Keys with Encryption\n- Key Chain of Expire Keys\n- Integration with Svelte \n- Integration with Pinia - VueJS\n- Simple Encryption of Information\n\n## Install\n\nTo install SPA Storage Plugin on your app:\n\nwith npm\n\n```bash\nnpm i spa-storage\n```\n\n### Example\n \n```javascript\n\n// importing spaStorage\nimport { spaStorage, svelteFunctions, piniaFunctions } from \"spa-storage\";\n\n// starting forage to use IndexedDB\nspaStorage.startForage(undefined, { name: \"SS_MY_CUSTOM_NAME\", storeName: \"SS_CUSTOM_STORE_NAME\" });\n\n// starting storage to use localStorage\nexport { spaStorage, svelteFunctions, piniaFunctions };\n\n```\n\nNow to use it you have just to import it in your stores and use!\n\n#### SVELTE USAGE\n \n```javascript\n// DEFINING APP STORE! It could be any store!\n// importing spaStorage configured as above\nimport { writable } from \"svelte/store\";\nimport { assign } from \"../helpers.js\"; // same as cloneDeep from lodash\nimport { svelteFunctions as SF } from \"./storage.js\";\n\nconst STORAGE_KEY = \"SS_APP_STORE\";\n\nconst storeTemplate = {\n  themeDark: false,\n};\n\nconst store = writable(assign({}, storeTemplate));\n\n// ------------------------------------------------------------------------------------------------\n// --------------  darkTheme Property  ------------------------------------------------------------\n\nasync function setThemeDark(themeDark) {\n  SF.updateStoreKey(store, { themeDark });\n  await SF.setSvelteStoreInStorage(store, STORAGE_KEY);\n}\n\nfunction getThemeDark() {\n  return SF.getStoreKey(store, \"themeDark\");\n}\n\n// ------------------------------------------------------------------------------------------------\n\n```\n\nNow to retrieve the information - when you first load the app\n\n```javascript\n\nimport { svelteFunctions as SF } from \"./storage.js\";\nimport appStore from \"./app.js\";\n\nexport let IS_READY = false;\nexport async function loadStores() {\n  if (IS_READY) return true;\n\n  try {\n    // now that we have the store defined we can retrieve information from the browser navigator\n    // this will load the information from the browser to the app store\n    await SF.getSvelteStoreInStorage(appStore.store, appStore.STORAGE_KEY);\n    IS_READY = true;\n    return true;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n\nexport { appStore };\n\n```\n\n#### PINIA USAGE\n\nPinia is a little more \"simple\" because it isn't as sofisticated as SVELTE\n\n```javascript\n\n// importing your store definition\nimport useAppStore from \"./app.js\";\n\n// exporting for usage in the application\nexport const appStore = useAppStore();\n\n// loading from browser information to the Pinia store\nawait getPiniaStoreInStorage(appStore, appStore.$id);\n\n// now you can use subscribe to listen any changes and update the store automatically\n// as below\nawait setPiniaStoreInStorage(\n  appStore, \n  appStore.$id, \n  undefined, \n  [\n    \"header_options_opened\",\n    \"menu_opened\",\n    \"menu_filter\",\n  ]\n);\n\n```\n\n## Main Methods Exported and Signatures\n\n### Storage Methods\n\n```javascript\n\n// -----------------------------  startStorage  ---------------------------------------------------\n\nfunction startStorage(config = {})\n// config.encrypted - true or false\n// config.expireKeysKey - the name of the key that will be used to store the expire keys\n// config.checkExpiredKeysInterval - the interval in milliseconds to check for expired keys\n\n// -----------------------------  startForage  ----------------------------------------------------\n\nfunction startForage(config = {}, forageConfig)\n// config.encrypted - true or false\n// config.expireKeysKey - the name of the key that will be used to store the expire keys\n// config.checkExpiredKeysInterval - the interval in milliseconds to check for expired keys\n\n// forageConfig.name - the name of the database\n// forageConfig.storeName - the name of the store\n// forageConfig.version - the version of the database\n// forageConfig.description - the description of the database\n\n// -----------------------------  configure  ------------------------------------------------------\n\nfunction configure(config = {}, forageConfig)\n\n// -----------------------------  getItem  --------------------------------------------------------\n\nfunction getItem (key) // retrieves a key from the browser storage\n// key - key to retrieve\n\n// -----------------------------  setItem  --------------------------------------------------------\n\nasync function setItem(key, value, time) // sets a key into the browser storage \n// key - key to set\n// value - value to set\n// time - time in milliseconds to expire the key - if not set will be forever\n\n// -----------------------------  removeItem  -----------------------------------------------------\n\nasync function removeItem(key) // removes a key from the browser storage\n// key - key to remove\n\n// -----------------------------  getAll  ---------------------------------------------------------\n\nasync getAll() // retrieves all keys from the browser storage\n\n// -----------------------------  clearExpireKeys  ------------------------------------------------\n\nasync clearExpireKeys() // clears all the expiration list and the keys\n\n// -----------------------------  clearKeyList  ---------------------------------------------------\n\n// clear a given array list of keys\n// affects expiration key list and the keys\nasync function clearKeyList(keyList)\n\n// -----------------------------  removeExpiredKeys  ----------------------------------------------\n\n// Function to check and remove a key if expired\n// If so... remove the key from the expiration list and the key\n// IT IS CALLED AUTOMATICALLY EVERY INTERVAL SET BY CHECK_EXPIRED_KEYS_INTERVAL\nasync function removeExpiredKeys()\n\n\n```\n\n### Svelte Methods\n\n```javascript\n\n// -----------------------------  SvelteStorage  --------------------------------------------------\n// -----------------------------  setSvelteStoreInStorage  ----------------------------------------\n\nasync function setSvelteStoreInStorage(\n  store, // function to subscribe to the SVELTE store\n  key, // key to be updated in the browser storage\n  options: {\n    timeout, // time in milliseconds to expire the key - if not set will be forever\n    ignoreKeys = [] // array of keys to ignore when updating the browser storage - this will be as the keys never existed\n  }\n)\n\n// -----------------------------  getSvelteStoreInStorage  ----------------------------------------\n\nasync function getSvelteStoreInStorage(store, key) // retrieves a key from the browser storage\n// update - function to update the SVELTE store\n// key - key to retrieve\n\n// ------------------------------------------------------------------------------------------------\n// -----------------------------  getStoreState  --------------------------------------------------\n\nfunction getStoreState(store) // returns the current state of the SVELTE store\n\n// ------------------------------------------------------------------------------------------------\n// -----------------------------  getStoreKey  ----------------------------------------------------\n\nfunction getStoreKey(store, key, ifEmpty) // returns the value of a key from the SVELTE store\n// store - SVELTE store\n// key - key to retrieve\n// ifEmpty - value to return if the key is not found\n\n// ------------------------------------------------------------------------------------------------\n// -----------------------------  updateStoreKey  -------------------------------------------------\n\nfunction updateStoreKey(store, objectKeyValue, storeStateSubstitute) // updates a key in the SVELTE store\n// store - SVELTE store\n// objectKeyValue - object with the key and value to update\n// storeStateSubstitute - if informed will replace the store state with this value\n\n```\n\n### Pinia Methods\n\n```javascript\n\n// -----------------------------  PiniaStorage  ---------------------------------------------------\n// -----------------------------  setPiniaStoreInStorage  -----------------------------------------\n\nasync function setPiniaStoreInStorage(\n  store, // store to subscribe to the Pinia store\n  key, // key to be updated in the browser storage\n  options: {\n    timeout, // time in milliseconds to expire the key - if not set will be forever\n    ignoreKeys = [] // array of keys to ignore when updating the browser storage - this will be as the keys never existed\n  }\n) \n\n// -----------------------------  getPiniaStoreInStorage  -----------------------------------------\n\nasync function getPiniaStoreInStorage(store, key) // retrieves a key from the browser storage\n// store - function to update the Pinia store\n// key - key to retrieve\n\n\n```",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 5],
		[3596, 7],
		[3603, 1],
		[3610, 6],
		[3624, 2],
		[3645, 2],
		[3652, 1],
		[3659, 1],
		[3666, 6],
		[3673, 1],
		[3701, 1],
		[3708, 1],
		[3715, 1],
		[3722, 1],
		[3729, 1],
		[3736, 11],
		[3743, 1],
		[3750, 5],
		[3757, 3],
		[3764, 3],
		[3771, 2],
		[3778, 3],
		[3785, 4],
		[3792, 5],
		[3799, 2],
		[3806, 1],
		[3827, 1],
		[3841, 21],
		[3848, 1],
		[3876, 3],
		[3890, 4],
		[3897, 6],
		[3911, 5],
		[3918, 1],
		[3925, 1],
		[3939, 2],
		[3946, 2],
		[3953, 2],
		[3960, 3],
		[3967, 3],
		[3974, 2],
		[3981, 2],
		[3988, 1],
		[3995, 1],
		[4002, 3],
		[4023, 2],
		[4030, 6],
		[4037, 13],
		[4044, 13],
		[4058, 3],
		[4065, 4],
		[4072, 3],
		[4086, 4],
		[4100, 14],
		[4114, 5],
		[4121, 10],
		[4128, 9]
	]
}
