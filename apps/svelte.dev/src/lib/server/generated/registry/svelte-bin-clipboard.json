{
	"name": "@svelte-bin/clipboard",
	"description": "Copy text and images to clipboard using Svelte actions.",
	"repo_url": "",
	"authors": ["binsarjr"],
	"downloads": 160,
	"updated": "2023-11-13T20:03:51.203Z",
	"tags": ["miscellaneous"],
	"typescript": true,
	"version": "0.1.4",
	"svelte_range": "^4.0.0",
	"kit_range": "^1.20.4",
	"last_rune_check_version": "0.1.4",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@svelte-bin/clipboard",
				"version": "0.1.4",
				"size": 9924
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# @svelte-bin/clipboard\n\nSvelte action & utilities for copying text and image to clipboard\n\n## Installation\n\n```bash\nnpm i @svelte-bin/clipboard\n```\n\n## Usage\n\n<details>\n    <summary>Text Passed</summary>\n\n```svelte\n<script>\n\timport { clipboard } from '@svelte-bin/clipboard';\n\tlet textToCopy = 'Hello World';\n\n\tlet copied = false;\n\tconst onCopy = () => {\n\t\tcopied = true;\n\t\tsetTimeout(() => {\n\t\t\tcopied = false;\n\t\t}, 1000);\n\t};\n</script>\n\n<button type=\"button\" use:clipboard={textToCopy} on:copied={onCopy}\n\t>{copied ? 'copied' : 'click me'}</button\n>\n```\n\n</details>\n\n<details>\n    <summary>Image Passed (Blob)</summary>\n\nhttps://web.dev/articles/async-clipboard#writetext\n\n```svelte\n<script>\n    import {clipboard} from '@svelte-bin/clipboard'\n    let imageToCopy = () => {\n        const imgURL = '/images/generic/file.png';\n        const data = await fetch(imgURL);\n        const blob = await data.blob();\n\n        return blob\n    }\n\n    let copied = false\n    const onCopy = () => {\n        copied = true\n        setTimeout(() => {\n            copied = false\n        }, 1000)\n    }\n</script>\n\n<button type=\"button\" use:clipboard={imageToCopy} on:copied={onCopy}\n\t>{copied ? 'copied' : 'click me'}</button\n>\n```\n\n</details>\n\n<details>\n    <summary>Image Passed (URL)</summary>\n\nhttps://web.dev/articles/async-clipboard#writetext\n\n```svelte\n<script>\n\timport { clipboard } from '@svelte-bin/clipboard';\n\n\tlet copied = false;\n\tconst onCopy = () => {\n\t\tcopied = true;\n\t\tsetTimeout(() => {\n\t\t\tcopied = false;\n\t\t}, 1000);\n\t};\n</script>\n\n<button\n\ttype=\"button\"\n\tuse:clipboard={{\n\t\timageURL: '/images/generic/file.png'\n\t}}\n\ton:copied={onCopy}>{copied ? 'copied' : 'click me'}</button\n>\n```\n\n</details>\n\n<details>\n    <summary>text+Image Passed (URL)</summary>\n\nhttps://web.dev/articles/async-clipboard#writetext\n\n```svelte\n<script>\n\timport { clipboard } from '@svelte-bin/clipboard';\n\n\tlet copied = false;\n\tconst onCopy = () => {\n\t\tcopied = true;\n\t\tsetTimeout(() => {\n\t\t\tcopied = false;\n\t\t}, 1000);\n\t};\n</script>\n\n<button\n\ttype=\"button\"\n\tuse:clipboard={{\n\t\timageURL: '/images/generic/file.png',\n\t\ttext: 'Hello World'\n\t}}\n\ton:copied={onCopy}>{copied ? 'copied' : 'click me'}</button\n>\n```\n\n</details>\n\n## Params\n\n| Param                  | Description                                  |\n| ---------------------- | -------------------------------------------- |\n| `string\\|Blob\\|object` | There are 3 types parameter that can be used |\n\n| Param  | Description                                                                               |\n| ------ | ----------------------------------------------------------------------------------------- |\n| string | The text (or function that returns text) that will be copied when the action is triggered |\n\n| Param | Description                                                                                           |\n| ----- | ----------------------------------------------------------------------------------------------------- |\n| blob  | The image blob (or function that returns image blob) that will be copied when the action is triggered |\n\n| Param (Object) | Description                                                    |\n| -------------- | -------------------------------------------------------------- |\n| text           | The text that will be copied when the action is triggered      |\n| imageURL       | The image url that will be copied when the action is triggered |\n\n## Events\n\nThe clipboard action dispatches custom events. Each custom event takes a callback function just like other events.\n\n```ts\n'on:copying': (event: CustomEvent) => void;\n'on:copied': (event: CustomEvent<string | ClipboardItem>) => void;\n'on:clipboard-error': (event: CustomEvent<any>) => void;\n\n// just for check clipboard status\n'on:clipboard-granted': (event: CustomEvent) => void;\n'on:clipboard-danied': (event: CustomEvent) => void;\n'on:clipboard-prompt': (event: CustomEvent) => void;\n```\n\n## Definition\n\n```ts\ninterface ParameterObject {\n\timageURL?: string;\n\ttext?: string;\n}\n\ntype AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> & U[keyof U];\n\ntype ParameterValue = string | ClipboardItem;\n\nexport type Parameter =\n\t| ParameterValue\n\t| Promise<ParameterValue>\n\t| (() => ParameterValue | Promise<ParameterValue>)\n\t| AtLeastOne<ParameterObject>;\n\ninterface Attributes {\n\t'on:copying': (event: CustomEvent) => void;\n\t'on:copied': (event: CustomEvent<string | ClipboardItem>) => void;\n\t'on:clipboard-error': (event: CustomEvent<any>) => void;\n\n\t// just for check clipboard status\n\t'on:clipboard-granted': (event: CustomEvent) => void;\n\t'on:clipboard-danied': (event: CustomEvent) => void;\n\t'on:clipboard-prompt': (event: CustomEvent) => void;\n}\n\nexport type clipboardAction = Action<HTMLElement, Parameter, Attributes>;\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 407],
		[3603, 107],
		[3610, 10],
		[3617, 3],
		[3624, 4],
		[3631, 2],
		[3638, 2],
		[3645, 11],
		[3652, 6],
		[3659, 7],
		[3666, 16],
		[3673, 11],
		[3680, 5],
		[3694, 1],
		[3701, 1],
		[3715, 4],
		[3722, 6],
		[3736, 1],
		[3750, 1],
		[3757, 3],
		[3771, 6],
		[3778, 15],
		[3785, 2],
		[3799, 2],
		[3806, 1],
		[3813, 3],
		[3827, 1],
		[3834, 31],
		[3841, 30],
		[3848, 17],
		[3855, 26],
		[3862, 61],
		[3869, 6],
		[3876, 14],
		[3883, 28],
		[3890, 31],
		[3897, 64],
		[3904, 25],
		[3911, 32],
		[3918, 214],
		[3925, 137],
		[3932, 150],
		[3939, 136],
		[3946, 144],
		[3953, 104],
		[3960, 75],
		[3967, 49],
		[3974, 87],
		[3981, 71],
		[3988, 111],
		[3995, 97],
		[4002, 100],
		[4009, 57],
		[4016, 18],
		[4023, 122],
		[4030, 112],
		[4037, 104],
		[4044, 176],
		[4051, 139],
		[4058, 162],
		[4065, 147],
		[4072, 115],
		[4079, 181],
		[4086, 149],
		[4093, 149],
		[4100, 154],
		[4107, 152],
		[4114, 160],
		[4121, 151],
		[4128, 178]
	],
	"esm": true,
	"cjs": false
}
