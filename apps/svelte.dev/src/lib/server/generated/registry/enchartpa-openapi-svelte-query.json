{
	"name": "@enchartpa/openapi-svelte-query",
	"description": "Generate type-safe Svelte Query client from OpenAPI schema.",
	"typescript": true,
	"repo_url": "https://github.com/enchart/openapi-svelte-query",
	"authors": ["enchart"],
	"homepage": "https://github.com/enchart/openapi-svelte-query",
	"downloads": 59,
	"updated": "2025-04-04T18:06:29.293Z",
	"tags": ["server", "tooling"],
	"svelte_range": "^5.25.3",
	"last_rune_check_version": "0.1.3",
	"version": "0.1.3",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@enchartpa/openapi-svelte-query",
				"version": "0.1.3",
				"size": 35425
			},
			{
				"name": "openapi-typescript-helpers",
				"version": "0.0.15",
				"size": 19068
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# openapi-svelte-query\n\n> ‚ö†Ô∏è openapi-svelte-query is a **work-in-progress** port of [openapi-react-query](https://github.com/openapi-ts/openapi-typescript/tree/main/packages/openapi-react-query) for [Svelte](https://svelte.dev/).\n\nopenapi-svelte-query is a type-safe tiny wrapper (1 kb) around [@tanstack/svelte-query](https://tanstack.com/query/latest/docs/framework/svelte/overview) to work with OpenAPI schema.\n\nIt works by using [openapi-fetch](https://github.com/openapi-ts/openapi-typescript/tree/main/packages/openapi-fetch) and [openapi-typescript](https://github.com/openapi-ts/openapi-typescript/tree/main/packages/openapi-typescript) so you get all the following features:\n\n- ‚úÖ No typos in URLs or params.\n- ‚úÖ All parameters, request bodies, and responses are type-checked and 100% match your schema\n- ‚úÖ No manual typing of your API\n- ‚úÖ Eliminates `any` types that hide bugs\n- ‚úÖ Eliminates `as` type overrides that can also hide bugs\n\n## Setup\n\nInstall this library along with [openapi-fetch](https://github.com/openapi-ts/openapi-typescript/tree/main/packages/openapi-fetch) and [openapi-typescript](https://github.com/openapi-ts/openapi-typescript/tree/main/packages/openapi-typescript):\n\n```bash\nnpm i @enchartpa/openapi-svelte-query openapi-fetch\nnpm i -D openapi-typescript typescript\n```\n\nNext, generate TypeScript types from your OpenAPI schema using openapi-typescript:\n\n```bash\nnpx openapi-typescript ./path/to/api/v1.yaml -o ./src/lib/api/v1.d.ts\n```\n\n## Usage\n\nOnce your types have been generated from your schema, you can create a [fetch client](https://github.com/openapi-ts/openapi-typescript/tree/main/packages/openapi-fetch), a svelte-query client and start querying your API.\n\n```svelte\n<script lang=\"ts\">\n  import createFetchClient from \"openapi-fetch\";\n  import createClient from \"openapi-svelte-query\";\n  import type { paths } from \"./my-openapi-3-schema\"; // generated by openapi-typescript\n\n  const fetchClient = createFetchClient<paths>({\n    baseUrl: \"https://myapi.dev/v1/\",\n  });\n\n  const api = createClient(fetchClient);\n\n  const query = api.createQuery(\n    \"get\",\n    \"/blogposts/{post_id}\",\n    {\n      params: {\n        path: { post_id: 5 },\n      },\n    }\n  );\n</script>\n\n{#if $query.isPending || !$query.data}\n  Loading...\n{:else if $query.error}\n  An error occurred: {$query.error.message}\n{:else}\n  <div>{$query.data.title}</div>\n{/if}\n```\n\n## üìù TODO\n\n- [ ] Write documentation for functions\n- [ ] Add support for `fetchQuery` and `fetchInfiniteQuery`\n- [ ] Add tests for `prefetchQuery` and `prefetchInfiniteQuery`\n- [ ] Add documentation for `prefetchQuery` and `prefetchInfiniteQuery`\n",
	"legacy_svelte": false,
	"downloads_history": [
		[4107, 196],
		[4114, 59],
		[4121, 12],
		[4128, 10]
	]
}
