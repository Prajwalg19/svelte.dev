{
	"name": "@a-luna/svelte-simple-tables",
	"description": "Create accessible, sortable, paginated table components.",
	"repo_url": "https://github.com/a-luna/svelte-simple-tables",
	"authors": ["a-luna"],
	"homepage": "https://github.com/a-luna/svelte-simple-tables",
	"downloads": 42,
	"updated": "2022-07-19T09:27:18.684Z",
	"tags": ["ui"],
	"github_stars": 6,
	"typescript": true,
	"version": "0.0.29",
	"svelte_range": "^3.49.0",
	"kit_range": "^1.0.0-next.379",
	"last_rune_check_version": "0.0.29",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@a-luna/svelte-simple-tables",
				"version": "0.0.29",
				"size": 206328
			},
			{
				"name": "@sveltejs/vite-plugin-svelte",
				"version": "1.4.0",
				"size": 629540
			},
			{
				"name": "debug",
				"version": "4.4.0",
				"size": 42798
			},
			{
				"name": "ms",
				"version": "2.1.3",
				"size": 6721
			},
			{
				"name": "kleur",
				"version": "4.1.5",
				"size": 20250
			},
			{
				"name": "vitefu",
				"version": "0.2.5",
				"size": 19174
			},
			{
				"name": "deepmerge",
				"version": "4.3.1",
				"size": 31157
			},
			{
				"name": "svelte-hmr",
				"version": "0.15.3",
				"size": 78275
			},
			{
				"name": "magic-string",
				"version": "0.26.7",
				"size": 400761
			},
			{
				"name": "sourcemap-codec",
				"version": "1.4.8",
				"size": 31802
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[1, 4],
			[1, 5],
			[1, 6],
			[1, 7],
			[1, 8],
			[8, 9]
		],
		"circular": []
	},
	"legacy_svelte": true,
	"readme": "# svelte-simple-tables\n\n![npm version](https://badgen.net/npm/v/@a-luna/svelte-simple-tables) ![npm types included](https://badgen.net/npm/types/@a-luna/svelte-simple-tables) ![gh license](https://badgen.net/github/license/a-luna/svelte-simple-tables) ![npm dl count](https://img.shields.io/npm/dm/@a-luna/svelte-simple-tables) [![codecov](https://codecov.io/gh/a-luna/svelte-simple-tables/branch/main/graph/badge.svg?token=N7XKOHAKNC)](https://codecov.io/gh/a-luna/svelte-simple-tables)\n\n- [Features](#features)\n- [Examples](#examples)\n- [Installation](#installation)\n- [Usage](#usage)\n  - [`data`](#data)\n  - [`columnSettings`](#columnsettings)\n  - [`tableSettings`](#tablesettings)\n- [Themes](#themes)\n  - [CSS Custom Properties](#css-custom-properties)\n\n## Features\n\n- **Create sortable, paginated tables** that follow [WAI-ARIA guidelines](https://www.w3.org/TR/wai-aria-practices-1.1/examples/table/table.html).\n- **Columns dynamically resize** to accommodate all visible content.\n- **Automatically responsive.** Tables become horizontally scrollable without breaking page layout.\n- **Four color themes provided**. Users can adjust every detail of existing themes or create new themes with CSS custom properties.\n\n## Examples\n\n- [svelte-simple-tables docs site](https://svelte-simple-tables.netlify.app/)\n- Coming Soon: CSS Theme Editor\n\n## Installation\n\n**yarn**\n\n```shell\nyarn add -D @a-luna/svelte-simple-tables\n```\n\n**npm**\n\n```shell\nnpm install -D @a-luna/svelte-simple-tables\n```\n\n**pnpm**\n\n```shell\npnpm install -D @a-luna/svelte-simple-tables\n```\n\n## Usage\n\n```html\n<script lang=\"ts\">\n\timport SimpleTable from '@a-luna/svelte-simple-tables';\n\timport type { TableSettings } from '@a-luna/svelte-simple-tables/types';\n\timport { columnSettings } from './columnSettings';\n\timport { data } from './data';\n\n\tinterface VaxData {\n\t\tpersonId: number;\n\t\tname: string;\n\t\tage: number;\n\t\tbirthdate: Date;\n\t\tvaccinated: boolean;\n\t}\n\n\tconst tableSettings: TableSettings = {\n\t\ttableId: 'vax-status-table',\n\t\tshowHeader: true,\n\t\theader: 'Vax Status',\n\t\tshowSortDescription: true,\n\t\tsortBy: 'age',\n\t\tsortDir: 'desc',\n\t\ttableWrapper: true,\n\t\tpaginated: true,\n\t\tpageRangeFormat: 'compact',\n\t\tpageNavFormat: 'compact',\n\t\tpageSize: 10,\n\t\tpageSizeOptions: [5, 10, 15, 20, 25],\n\t\tthemeName: 'darker',\n\t\trowType: 'vax records',\n\t};\n</script>\n\n<SimpleTable {data} {columnSettings} {tableSettings} />\n```\n\n`SimpleTable` expects three props: `data`, `columnSettings`, and `tableSettings`:\n\n| Name             | Type                  | Description                                                                                                                                                                        |\n| ---------------- | --------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `data`           | `T[]`                 | Array of `T`¬†objects (`T`¬†is a generic type) . Each object will be rendered as a row in the table.                                                                                 |\n| `columnSettings` | `ColumnSettings<T>[]` | Array of `ColumnSettings<T>` objects (`T` is the same generic type from `data`). Each `ColumnSettings<T>` object specifies which property to display, the column header text, etc. |\n| `tableSettings`  | `TableSettings`       | Configuration object for sizing, layout, pagination, and other overall table settings.                                                                                             |\n\n### `data`\n\nYou must define a `type` or `interface` for your tabular data (`VaxData` in this example). This becomes the generic type `T` used by the `data` and `columnSettings` props.\n\n> ü§î **HELP ME UNDERSTAND** Why is it necessary to specify the type of the items in the `data` array? `SimpleTable` uses [an experimental svelte feature](https://github.com/dummdidumm/rfcs/blob/ts-typedefs-within-svelte-components/text/ts-typing-props-slots-events.md) that makes it possible to use generic types with component props. This enables advanced error-checking and autocompletion in your IDE.\n\nThe `data` for your table will typically be provided from a response to an API request or database query. In this example, `data` is imported from a typescript file (`data.ts`) that exports a list of `VaxData` objects:\n\n```typescript\n// data.ts\n// contains 21 items, only showing first and last item for brevity\nexport const data: VaxData[] = [\n\t{\n\t\tpersonId: 1,\n\t\tname: 'Alice',\n\t\tage: 11,\n\t\tbirthdate: new Date(2010, 7, 12),\n\t\tvaccinated: true,\n\t},\n\t...{\n\t\tpersonId: 21,\n\t\tname: 'Ulysses',\n\t\tage: 85,\n\t\tbirthdate: new Date(1936, 2, 12),\n\t\tvaccinated: true,\n\t},\n];\n```\n\n### `columnSettings`\n\nAfter you have the `data` that you wish to display in a table, the next step is to determine which `VaxData` properties (`name`, `age`, etc.) should be displayed in each column. This is accomplished with the `columnSettings` prop, which is a list of `ColumnSettings<T>` objects. The API for `ColumnSettings<T>` is given below:\n\n| Property     | Type                 | Required | Default                                                                                                                                                                                                                  | Description                                                                                                                                                                                                                                        |\n| ------------ | -------------------- | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `propName`   | `string`             | ‚úÖ       | N/A                                                                                                                                                                                                                      | The name of the property to display                                                                                                                                                                                                                |\n| `propType`   | `PropType`           | ‚úÖ       | N/A                                                                                                                                                                                                                      | `PropType` is a string literal with valid values: `'string'`, `'number'`, `'boolean'`¬†or¬†`'date'`. In this example, if `propName = 'age'` => `propType = 'number'`, or `propName = 'birthdate'` => `propType = 'date'`                             |\n| `headerText` | `string`             | ‚ùå       | If the value provided for `propName` is in `snake_case` or `camelCase` format, it is converted to `Snake Case` or `Camel Case`, respectively. Otherwise, the value provided for `propName` is used as the default value. | The text displayed in the column header.                                                                                                                                                                                                           |\n| `tooltip`    | `string`             | ‚ùå       | Same behavior as `headerText`                                                                                                                                                                                            | Tooltip value to display when mouse hovers over the column header.                                                                                                                                                                                 |\n| `sortable`   | `boolean`            | ‚ùå       | `true`                                                                                                                                                                                                                   | If `sortable=True`, clicking the column header will re-sort the table using that value. Clicking the same column header again will toggle between ascending/descending order. If `sortable=False`, clicking the column header will have no effect. |\n| `classList`  | `string[]`           | ‚ùå       | `[]`                                                                                                                                                                                                                     | A list of strings where each string will be added to the `classList` of each data cell in this column. Useful for utility classes such as Tailwind to control text-alignment, font-weight, etc.                                                    |\n| `colValue`   | `(obj: T) => string` | ‚ùå       | (obj: T) => obj[propName] (i.e, The value of the object property `propName`)                                                                                                                                             | A function that accepts an object from `data` and returns the value that should be displayed in this column. This allows you to customize the way the data is displayed in any way.                                                                |\n\n> ü§î **YOU MAY BE WONDERING** Why is it neessary to specify the `propType` for each column? This is required in order to make the table sortable. Since numeric, text and date values cannot be sorted using a single algorithm, `propType` is used to determine the sort function appropriate for each data type.\n\nLet's take a look at an example that renders a column for each `VaxData` property:\n\n| Name                  | Birthdate       | Age | Vax? | ID  |\n| --------------------- | --------------- | --- | ---- | --- |\n| [Alice](/person/1)    | Thu Aug 12 2010 | 11  | ‚úÖ   | 1   |\n| ...                   | ...             | ... | ...  | ... |\n| [Ulysses](/person/21) | Thu Mar 12 1936 | 85  | ‚úÖ   | 21  |\n\nThe `columnSettings` prop that produces the table above must contain five `ColumnSettings<VaxData>` objects, and would be configured as follows:\n\n```typescript\n// columnSettings.ts\nimport type { ColumnSettings } from '@a-luna/svelte-simple-tables/types';\nimport type { VaxData } from './data';\n\nexport const columnSettings: ColumnSettings<VaxData>[] = [\n\t{\n\t\tpropName: 'name',\n\t\tpropType: 'string',\n\t\ttooltip: 'First Name',\n\t\tcolValue: (data: VaxData): string => `<a href=\"/person/${data.personId}\">${data.name}</a>`,\n\t},\n\t{\n\t\tpropName: 'birthdate',\n\t\tpropType: 'date',\n\t\tcolValue: (data: VaxData): string => data.birthdate.toDateString(),\n\t},\n\t{\n\t\tpropName: 'age',\n\t\tpropType: 'number',\n\t},\n\t{\n\t\tpropName: 'vaccinated',\n\t\tpropType: 'boolean',\n\t\theaderText: 'Vax?',\n\t\ttooltip: 'Vaccination Status',\n\t\tclassList: ['text-center'],\n\t\tcolValue: (data: VaxData): string => (data.vaccinated ? '‚úÖ' : '‚ùå'),\n\t},\n\t{\n\t\tpropName: 'personId',\n\t\tpropType: 'number',\n\t\theaderText: 'ID',\n\t\tsortable: false,\n\t},\n];\n```\n\nFor each column, the only required values are `propName` and `propType` (all other properties have sane default values). In most cases, `colValue` is where the most 'interesting' settings are applied, since this controls the value that a column displays for each object.\n\nFor example, the first column is configured to display the `name` property of each object as a link to a hypothetical page. Since `colValue` is a function which accepts a single `VaxData` object and returns a string, we can easily construct an anchor element that incorporates properties of the `VaxData` object:\n\n```typescript\ncolValue: (data: VaxData): string => `<a href=\"/person/${data.personId}\">${data.name}</a>`;\n```\n\nThis string will be rendered using the special `@html` tag available in svelte, resulting in a clickable link as shown in the table above.\n\nThe `birthdate` property is a `Date` value, and by default would be displayed by simply calling the `Date.toString()` method (e.g., `Thu Aug 12 2010 00:00:00 GMT-0700 (Pacific Daylight Time)`). By simply configuring `colValue` to instead call the `Date.toDateString()` method, the column will omit the time and time-zone information, displaying just the date portion (`Thu Aug 12 2010`):\n\n```typescript\ncolValue: (data: VaxData): string => data.birthdate.toDateString();\n```\n\nThe column for `vaccinated` contains `boolean` values, which by default will simply display `'true'`/`'false'` strings. The easiest way to display something more interesting is with a ternary operator:\n\n```typescript\ncolValue: (data: VaxData): string => (data.vaccinated ? '‚úÖ' : '‚ùå');\n```\n\nThis column also takes advantage of the `classList` property. In Tailwind CSS, `text-center` is a utility class that sets `text-align: center` on a HTML element. This would add the `text-center` class to each data cell in this column.\n\nFinally, the last column displays the `personId` property. The `sortable` property is set to `false`, making this the only column that cannot be sorted by clicking on the column header.\n\n> ‚ô®Ô∏è **HOT TIP** You can define `columnSettings` in the `<script>` tag of your `.svelte` file, or in a separate `.ts` file as demonstrated here. If your table has a large number of columns, moving it to its own file will make your `.svelte` file easier to digest visually and make your component easier to maintain (IMO).\n\n### `tableSettings`\n\nStrictly speaking, the final prop, `tableSettings`, isn't required. Without it, our table would be rendered like this:\n\n![Table that would be rendered with all default settings](./static/readme_default_settings.png)\n\nThat's a very nice table, I'm sure you will agree. However, by customizing the `tableSettings` prop, the same `data` and `columnSettings` can produce the table below:\n\n![Table that would be rendered by adjusting the default settings](./static/readme_custom_settings.png)\n\nNow that's a table that you can be proud of! The `tableSettings` object specified at the beginning of this README will produce these changes.\n\nThe `TableSettings` interface exposes the following configuration settings:\n\n| Property              | Type               | Required | Default                                        | Description                                                                                                                                                                                                                                                       |\n| --------------------- | ------------------ | -------- | ---------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `tableId`             | `string`           | ‚ùå       | Randomly generated ID (e.g., `table-79f3e496`) | This is the `id`¬†attribute of the table HTML element                                                                                                                                                                                                              |\n| `showHeader`          | `boolean`          | ‚ùå       | `false`                                        | Display the¬†¬†`header`value above the table (**#1 in the disgram below**)                                                                                                                                                                                          |\n| `header`              | `string`           | ‚ùå       | `''` (empty string)                            | Table header/caption/title to display above the table                                                                                                                                                                                                             |\n| `showSortDescription` | `boolean`          | ‚ùå       | `false`                                        | Display the sort column and sort direction currently applied (**#2 in the diagram below**)                                                                                                                                                                        |\n| `sortBy`              | `string`           | ‚ùå       | `null`                                         | `propName`¬†of the column to sort the table by. If not specified, no sorting behavior will be applied when component is loaded. (**#3 in the diagram below**)                                                                                                      |\n| `sortDir`             | `SortDirection`    | ‚ùå       | `'asc'`                                        | `SortDirection`¬†is a string literal type = `asc`¬†or `desc`. Determines if the sort behavior is applied in ascending or descending order.                                                                                                                          |\n| `tableWrapper`        | `boolean`          | ‚ùå       | `false`                                        | Display a border around the table (**#4 in the diagram below**)                                                                                                                                                                                                   |\n| `themeName`           | `TableTheme`       | ‚ùå       | `'lighter'`                                    | `themeName`is a string literal type = `'light'` \\| `'lighter'`¬†\\| `'dark'`¬†\\| `'darker'`¬†\\| `'custom‚Äô`. You can check out all of the themes in the interactive docs.                                                                                              |\n| `clickableRows`       | `boolean`          | ‚ùå.      | `false`                                        | The `rowClicked` event is raised when any row in the body of the table is clicked. The event contains the row data as an object of type `T`.                                                                                                                      |\n| `animateSorting`      | `boolean`          | ‚ùå.      | `false`                                        | Changes in row order are reflected as a flip animation when the sort behavior is changed (e.g., by clicking on a column header)                                                                                                                                   |\n| `paginated`           | `boolean`          | ‚ùå       | `false`                                        | Enables pagination. If `false`, all rows are displayed.                                                                                                                                                                                                           |\n| `pageSize`            | `number`           | ‚ùå       | `5`                                            | _(If pagination is enabled)_ Number of rows to display per page. Must be one of the options in `pageSizeOptions`.                                                                                                                                                 |\n| `pageSizeOptions`     | `number[]`         | ‚ùå       | `[5, 10, 15]`                                  | _(If pagination is enabled)_ Array of possible page sizes, user can switch between page sizes at any time.                                                                                                                                                        |\n| `pageRangeFormat`     | `PageRangeFormat`  | ‚ùå       | `'auto'`                                       | _(If pagination is enabled)_ `PageRangeFormat` is a string literal type = `'none'` \\| `'compact'` \\| `'verbose'` \\| `'auto'`. See interactive docs for examples.                                                                                                  |\n| `pageNavFormat`       | `PaginationLayout` | ‚ùå       | `'auto'`                                       | _(If pagination is enabled)_ `PaginationLayout` is a string literal type = `'compact'` \\| `'full'` \\| `'auto'`. See interactive docs for examples.                                                                                                                |\n| `rowType`             | `string`           | ‚ùå       | `'rows'`                                       | _(If pagination is enabled)_ Since the page range description in verbose mode displays as 'XX-YY of ZZ total _rowType_' you can customize the term used to dsescribe the tabular data (e.g., '1-10 of 21 _patients_' or '6-10 of 21 _vax records_' in our table). |\n\n<blockquote><span title=\"stop calling me 'chief'\">üò≤</span> <strong>LISTEN UP, CHIEF:</strong> As explained above, the <code>tableId</code> prop is used as the <code>id</code> attribute of the table HTML element. Therefore, it is very important that you treat this value as a unique identifier, per HTML requirements. If you choose to provide your own value for <code>tableId</code> , it is extremely important that you do not reuse this value for another <code>SimpleTable</code> component, or any HTML element in your project. Bad things will happen, trust me!</blockquote>\n\n![Image that shows where and how various table settings change the appearance of the rendered table](./static/readme_settings_explained.png)\n\n## Themes\n\n### CSS Custom Properties\n\nThe following CSS custom properties can be applied either at the `body` element (if you want all tables throughout your site to use a single, uniform theme) or can be applied individually to each table. Detailed instructions and an interactive theme editor is a WIP, will be available ASAP:\n\n```css\n--sst-font-size\n--sst-table-wrapper-border-width\n--sst-table-wrapper-border-style\n--sst-table-wrapper-padding\n--sst-sort-description-font-size\n--sst-table-header-font-size\n--sst-table-border-radius\n--sst-col-header-padding\n--sst-col-header-text-weight\n--sst-col-header-highlight-text-weight\n--sst-body-cell-padding\n--sst-button-group-border-radius\n\n--sst-table-wrapper-bg-color\n--sst-table-wrapper-border-color\n\n--sst-text-color\n--sst-link-text-color\n--sst-link-hover-text-color\n--sst-table-outer-border-color\n--sst-table-header-text-color\n--sst-sort-description-text-color\n--sst-page-range-description-text-color\n\n--sst-col-header-bg-color\n--sst-col-header-text-color\n--sst-col-header-vert-border-color\n--sst-col-header-horiz-border-color\n--sst-col-header-highlight-sort-bg-color\n--sst-col-header-highlight-sort-text-color\n--sst-col-header-highlight-sort-vert-border-color\n--sst-col-header-highlight-sort-horiz-border-color\n\n--sst-body-even-row-bg-color\n--sst-body-odd-row-bg-color\n--sst-body-inner-vert-border-color\n--sst-body-inner-horiz-border-color\n--sst-body-highlight-sort-bg-color\n--sst-body-highlight-sort-text-color\n--sst-body-highlight-sort-border-color\n\n--sst-button-text-color\n--sst-button-bg-color\n--sst-button-border-color\n\n--sst-button-hover-text-color\n--sst-button-hover-bg-color\n--sst-button-hover-border-color\n\n--sst-button-active-text-color\n--sst-button-active-bg-color\n--sst-button-active-border-color\n\n--sst-button-disabled-text-color\n--sst-button-disabled-bg-color\n--sst-button-disabled-border-color\n\n--sst-button-focus-border-color\n```\n",
	"downloads_history": [
		[3589, 30],
		[3596, 101],
		[3603, 42],
		[3610, 67],
		[3617, 126],
		[3624, 57],
		[3631, 74],
		[3638, 56],
		[3645, 47],
		[3652, 49],
		[3659, 55],
		[3666, 79],
		[3673, 70],
		[3680, 71],
		[3687, 61],
		[3694, 52],
		[3701, 61],
		[3708, 91],
		[3715, 51],
		[3722, 34],
		[3729, 14],
		[3736, 13],
		[3743, 11],
		[3750, 14],
		[3757, 11],
		[3764, 17],
		[3771, 41],
		[3778, 26],
		[3785, 16],
		[3792, 18],
		[3799, 51],
		[3806, 14],
		[3813, 23],
		[3820, 83],
		[3827, 35],
		[3834, 26],
		[3841, 37],
		[3848, 23],
		[3855, 148],
		[3862, 72],
		[3869, 18],
		[3876, 76],
		[3883, 28],
		[3890, 80],
		[3897, 63],
		[3904, 100],
		[3911, 31],
		[3918, 25],
		[3925, 44],
		[3932, 33],
		[3939, 37],
		[3946, 56],
		[3953, 52],
		[3960, 45],
		[3967, 36],
		[3974, 44],
		[3981, 14],
		[3988, 20],
		[3995, 27],
		[4002, 43],
		[4009, 11],
		[4016, 62],
		[4023, 64],
		[4030, 25],
		[4037, 30],
		[4044, 48],
		[4051, 29],
		[4058, 35],
		[4065, 31],
		[4072, 11],
		[4079, 23],
		[4086, 86],
		[4093, 16],
		[4100, 117],
		[4107, 21],
		[4114, 42],
		[4121, 51],
		[4128, 37]
	]
}
