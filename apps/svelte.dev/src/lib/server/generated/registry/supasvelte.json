{
	"name": "supasvelte",
	"description": "Reactive bindings for Supabase in Svelte apps.",
	"repo_url": "https://github.com/coflow-network/supasvelte",
	"authors": ["ixxie"],
	"homepage": "https://github.com/coflow-network/supasvelte#readme",
	"downloads": 7,
	"updated": "2021-05-04T20:09:55.135Z",
	"tags": ["integration"],
	"github_stars": 8,
	"typescript": false,
	"version": "0.1.8",
	"svelte_range": "^3.38.0",
	"last_rune_check_version": "0.1.8",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "supasvelte",
				"version": "0.1.8",
				"size": 32959
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Supasvelte - reactive bindings for Supabase in Svelte\n\n⚠ **Very much Alpha stuff... so use in production at your own risk** ⚠️\n\nThis library is used for wrapping a limited subset of the Supabase API in reactive bindings that expose custom Svelte stores. The library provides constructors that let you build these stores:\n\n* `makeSessionStore()` - constructs a store that follows signin state;\n* `makeRegistrationStore()` constructs a store that follows signup state;\n* `makeRecordStore(table)` - constructs a store that exposes CRUD operations for records of a table;\n* `makeQueryStore(table, query, trigger=\"*\")` - constructs a store that mimics a view, i.e. updates its data in realtime to reflect query results;\n\nWhen you use these constructors, you receive a store that has a `.state` attribute intended for use in Svelte component logic (e.g. `{#if session.state === 'signed-in'}`) and a `.data` attribute store relevant data (e.g. `email = session.data.user.email` or the `error` object when in `'error'` state). This *should* allow you to easily build reactive and persistent logic with Supabase and Svelte.\n\nYou shift the store state by using its methods, which wrap the `supabase` methods. For example, you would call a `session.signin(email, password)` method to trigger a signin event which also updates `$session.state` to `'signed-in'`. These methods return data in a similar way as the `supabase` API, which means you can use them in more traditional ways (e.g. `{#await}`) while still keeping the store state correct.\n\n## Usage\n\nTo get started, first initialize a Supabase client and pass it to Supasvelte to initialize constructors for your client:\n\n```js\nimport { createClient } from '@supabase/supabase-js';\nimport { makeConstructors } from 'supasvelte';\n\nexport let supabase = createClient(url, key);\nexport let {\n    makeSessionStore,\n    makeRegistrationStore,\n    makeRecordStore,\n    makeQueryStore \n    } = makeConstructors(supabase);\n```\n\nNotes that the `supabase` client doesn't need to be exported for `supasvelte`; export it if you need to do things this library cannot;\n\nLogging level can be configured by setting `makeConstructors(supabase, {log: '<log level>})` where `<log level>` is `silent`, `error`, `info`, `log` or `verbose`. Currently there is no difference between the last two levels.\n\nNow that you have store constructors for your Supabase client, you can create your own custom reactive Supabase stores.\n\n### Session\n\nThe `$session` store is used to reactively track users' login sessions. It uses `supabase.auth.onAuthStateChange` ([see Supabase docs](https://supabase.io/docs/reference/javascript/auth-onauthstatechange)) to keep itself updated regard user session data. If [this feature request](https://github.com/supabase/gotrue-js/issues/79) is accepted, this would synchronize user state accross tabs automatically, but currently it will just work within a tab.\n\n**Setup:**\n```js\nconst session = makeSessionStore();\n```\n\n**Data:**\n* `$session.state` - either `signed-out`, `signed-in` or `error`;\n* `$session.data` - when in `signed-in` state - holds the [session data](https://supabase.github.io/gotrue-js/interfaces/session.html) which `gotrue-js` passes the `supabase` client; notably, this contains the `user` object.\n\n**Methods:**\n * `session.signin(email, password)` - signs the user in and returns `{ user, error }` \n * `session.signout()` - signs the user out and returns `{ error }`\n * `session.reset()` - resets the state machine to `signed-out` and clears data (this can be used in the event of an error)\n\n### Registration\n\nThe `$registration` store is used to reactively track signup events. \n\n**Setup:**\n```js\nconst registration = makeRegistrationStore();\n```\n\n**Data:**\n * `$registration.state` - either `idle`, `pending`, `success` or `error`;\n * `$registration.data` - when in `success` state, holds the user credentials just created;\n\n**Methods:**\n * `registration.signup(email, password)` - signs the user up and returns `{ user, error }`\n * `registration.reset()` - resets the state machine to `idle` and clears data (this can be used in the event of an error)\n\n### Record\n\nThe `$record` store is used to run CRUD operations on *single* records in a table. The record is identified by using the `supabase` API's `.match()` function ([see Supabase docs](https://supabase.io/docs/reference/javascript/match)), so all of this store's methods expect a `record` pattern object, for example `{id: 23}` or `{firstName: \"Bob\", lastName: \"Saget\"}`.\n\nThe store uses a special `checkRecord` method internally to ensure you are only changing one record at a time, and fails with an error otherwise.\n\n**Setup:**\n```js\nconst record = createRecordStore(table);\n```\n\n**Data:**\n * `$record.state` - either `idle`, `pending`, `success` or `error`;\n * `$record.data` - when in `success` state, holds the data returned by `supabase`;\n\n**Methods:**\n * `record.create` - create a record and returns `{ data, error }`;\n * `record.read` - read a record and returns `{ data, error }`;\n * `record.update` - update a record and returns `{ data, error }`;\n * `record.delete` - delete a record and returns `{ data, error }`;\n\n### Query\n\nThe `$query` store is used to reactively update data in a component to reflect results of a query. The query is restricted to the string accepted by the `supabase` API's `.or` filter ([see Supabase docs](https://supabase.io/docs/reference/javascript/or)). But that is flexible enough to perform quite a few matching queries.\n\nThis store leverages a Realtime subscription for reactivity; you can select the types of events you want to trigger store's refresh ([see Supabase docs](https://supabase.io/docs/reference/javascript/subscribe)) This means it requeries whenever a triggering change occurs in the effected table.\n\n**Setup:**\n```js\nconst query = makeQueryStore(table, query, trigger)\n```\n\n**Data:**\n * `$query.state` - either `idle`, `pending`, `success` or `error`;\n * `$query.data` - when in `success` or `pending` modes, shows the latest query results;\n\n**Methods:**\n  * `query.fetch()` - triggers the query and returns `{ data, error }`\n\n⚠ **Performance of this store is probably not great for tables getting a lot of updates. TODO: investigate how to allow the user to ensure updates are triggered a sane amount of times.**\n\n## Developing\n\nPRs? Yes please! Try to keep them inline with the philosophy of the library:\n\n 1. `supasvelte` focuses on providing *constructors* that help users create *stores* that deliver *reactive* interfaces to their Supabase instance in Svelte;\n 2. The `supabase` client comes from the user, to ensure they can always work around this library if needed (so lets not try and manage it ourselves here);\n 3. Logging should be consistent across the board;\n\n\n## Support\n\nDrop an issue in [the Github repo](https://github.com/coflow-network/supasvelte) or find me lurking in [the Svelte Discord server](https://discord.com/channels/457912077277855764/457912077277855766) as Ixxie or at the [Supabase Slack server](https://app.slack.com/client/TS93YE5NV/C0185CM23RV) as Matan.\n\n## Disclaimer\n\nAs mentioned, this is very much alpha stuff. Also, keep in mind I am a noob and I have no idea what I am doing (been working with Javascript only for a few months and I am not a Software Engineer by training).",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 1],
		[3610, 10],
		[3617, 9],
		[3624, 1],
		[3631, 1],
		[3645, 10],
		[3659, 1],
		[3666, 10],
		[3680, 1],
		[3708, 2],
		[3722, 9],
		[3729, 1],
		[3757, 2],
		[3764, 12],
		[3771, 7],
		[3778, 5],
		[3785, 2],
		[3792, 2],
		[3799, 2],
		[3806, 3],
		[3813, 3],
		[3834, 1],
		[3848, 1],
		[3855, 47],
		[3869, 2],
		[3876, 2],
		[3883, 3],
		[3890, 9],
		[3904, 1],
		[3925, 2],
		[3932, 1],
		[3946, 1],
		[3953, 2],
		[3960, 1],
		[3981, 1],
		[3995, 11],
		[4016, 2],
		[4023, 4],
		[4030, 10],
		[4037, 14],
		[4044, 4],
		[4051, 1],
		[4058, 1],
		[4065, 2],
		[4072, 1],
		[4086, 1],
		[4093, 10],
		[4100, 11],
		[4107, 6],
		[4114, 7],
		[4121, 11],
		[4128, 3]
	],
	"esm": true,
	"cjs": false
}
