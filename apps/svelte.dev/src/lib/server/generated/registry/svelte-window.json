{
	"name": "svelte-window",
	"description": "Renders large, scrollable lists and tabular data efficiently.",
	"repo_url": "https://github.com/micha-lmxt/svelte-window",
	"authors": ["micha-lmxt"],
	"homepage": "https://github.com/micha-lmxt/svelte-window#readme",
	"downloads": 112,
	"updated": "2022-09-27T07:25:49.318Z",
	"tags": ["ui"],
	"github_stars": 61,
	"typescript": true,
	"version": "1.2.5",
	"svelte_range": "^3.32.3",
	"last_rune_check_version": "1.2.5",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-window",
				"version": "1.2.5",
				"size": 110055
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-window\n\n> Svelte components for efficiently rendering large, scrollable lists and tabular data. Port of react-window to Svelte.\n\nSvelte window works by only rendering *part* of a large data set (just enough to fill the viewport). This helps address some common performance bottlenecks:\n1. It reduces the amount of work (and time) required to render the initial view and to process updates.\n2. It reduces the memory footprint by avoiding over-allocation of DOM nodes.\n\n[![NPM license](https://img.shields.io/badge/license-mit-red.svg?style=for-the-badge)](LICENSE.md)\n\n## Install\n\n```bash\nnpm install --save-dev svelte-window\n```\n\n## Usage\n\nThis library is a port of react-window, here are some examples: [react-window.now.sh](https://react-window.now.sh/).\n\nThis is how to render a basic list:\n\n\n```javascript\n<script>\n    import { FixedSizeList as List, styleString as sty } from 'svelte-window';\n</script>\n<List\nheight={150}\nitemCount={1000}\nitemSize={35}\nwidth={300}\nlet:items>\n    {#each items as it (it.key)}\n        <div style={sty(it.style)}>Row {it.index}</div>        \n    {/each}\n</List>\n```\n\nHere is another example with a fixed size grid with a scroll-to button, scrolling indicators:\n\n```javascript\n<script>\n  import { FixedSizeGrid as Grid, styleString as sty } from 'svelte-window'\n\n  let grid\n\n  const click = () => {\n    if (grid) {\n      grid.scrollToItem({\n        align: 'start',\n        columnIndex: 150,\n        rowIndex: 300,\n      })\n    }\n  }\n</script>\n\n<Grid\n  bind:this={grid}\n  columnCount={1000}\n  columnWidth={100}\n  height={150}\n  rowCount={1000}\n  rowHeight={35}\n  width={300}\n  useIsScrolling\n  let:items>\n  {#each items as it (it.key)}\n    <div style={sty(it.style)}>\n      {it.isScrolling ? 'Scrolling' : `Row ${it.rowIndex} - Col ${it.columnIndex}`}\n    </div>\n  {/each}\n</Grid>\n\n<button on:click={click}> To row 300, column 150 </button>\n```\n\n### SvelteKit\n\nSvelteKit is in public beta, so a 100% compatibility cannot be guaranteed. Since version 1.2.0 `svelte-window` should work with SvelteKit when imported as a devDependency (`npm i --save-dev svelte-window`). By design, `svelte-window` is a client side library. Normal components like `FixedSizeList` need to be guarded from server-side-rendering (eg. with a `{#if mounted}...` clause). For convenience, there are SSR counterparts to all four components, which handle guarding within the library: `FixedSizeListSSR`, `FixedSizeGridSSR`, `VariableSizeListSSR`, `VariableSizeGridSSR`. In the examples above, just change eg.:\n\n```javascript\n<script>\n    import { FixedSizeList as List, styleString as sty } from 'svelte-window';\n</script>\n...\n```\n\nto \n\n```javascript\n<script>\n    import { FixedSizeListSSR as List, styleString as sty } from 'svelte-window';\n</script>\n...\n```\n\n## Bundle Size\n\nIf you don't use all of `svelte-window`s components on a page, you can minimize the bundle size by using direct imports from the `lib` folder. Eg. you can change imports like this\n\n```javascript\nimport { FixedSizeListSSR as List, styleString as sty } from 'svelte-window';\n```\n\nto\n\n```javascript\nimport List from 'svelte-window/lib/FixedSizeListSSR.svelte';\nimport {styleString as sty} from 'svelte-window/src/styleString';\n```\n\n## Differences to the React library\n\n1. Grids and lists don't actively render the children. Instead, an array of item information is passed down via item props. You can use the [let:item](https://svelte.dev/tutorial/slot-props) to access it and render with the [each block](https://svelte.dev/tutorial/each-blocks).\n2. Styles are passed down as objects, like in the React library, but Svelte only accepts strings for style. A helper function `styleString` is exported from `svelte-window`, to convert the style object to string\n3. Variable sized variants have utilities to reset the cache, when row/cell sizes change. These are not directly added to the class, but to a member called `instance`. Eg. instead of\n\n```javascript\nlist.resetAfterIndex(...)\n```\n\nuse \n\n```javascript\nlist.instance.resetAfterIndex(...)\n```\n\nAffected functions:\n\nVariableSizeList:\n\n- resetAfterIndex\n\nVariableSizeGrid:\n\n- resetAfterIndices\n- resetAfterColumnIndex\n- resetAfterRowIndex\n\n## Related libraries\n\n* [`svelte-virtualized-auto-sizer`](https://npmjs.com/package/svelte-virtualized-auto-sizer): HOC that grows to fit all of the available space and passes the width and height values to its child.\n\n## More information\n\n[Here is a blog post](https://gradientdescent.de/porting-react-window) about how the library was ported from React to Svelte.\n\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 289],
		[3603, 414],
		[3610, 339],
		[3617, 453],
		[3624, 395],
		[3631, 477],
		[3638, 188],
		[3645, 422],
		[3652, 339],
		[3659, 429],
		[3666, 408],
		[3673, 277],
		[3680, 586],
		[3687, 377],
		[3694, 422],
		[3701, 427],
		[3708, 476],
		[3715, 262],
		[3722, 506],
		[3729, 358],
		[3736, 220],
		[3743, 366],
		[3750, 280],
		[3757, 399],
		[3764, 300],
		[3771, 394],
		[3778, 307],
		[3785, 211],
		[3792, 351],
		[3799, 626],
		[3806, 346],
		[3813, 381],
		[3820, 373],
		[3827, 384],
		[3834, 99],
		[3841, 253],
		[3848, 287],
		[3855, 413],
		[3862, 214],
		[3869, 368],
		[3876, 410],
		[3883, 369],
		[3890, 415],
		[3897, 253],
		[3904, 362],
		[3911, 335],
		[3918, 443],
		[3925, 313],
		[3932, 255],
		[3939, 177],
		[3946, 105],
		[3953, 86],
		[3960, 212],
		[3967, 207],
		[3974, 92],
		[3981, 137],
		[3988, 189],
		[3995, 157],
		[4002, 190],
		[4009, 51],
		[4016, 21],
		[4023, 147],
		[4030, 336],
		[4037, 198],
		[4044, 341],
		[4051, 272],
		[4058, 162],
		[4065, 95],
		[4072, 261],
		[4079, 265],
		[4086, 145],
		[4093, 190],
		[4100, 106],
		[4107, 128],
		[4114, 112],
		[4121, 43],
		[4128, 153],
		[4135, 227]
	],
	"esm": true,
	"cjs": false
}
