{
	"name": "ag-grid-svelte5",
	"description": "Integrate AG Grid with Svelte 5 applications.",
	"repo_url": "https://github.com/JohnMaher1/ag-grid-svelte5",
	"authors": ["johnmaher149"],
	"homepage": "https://github.com/JohnMaher1/ag-grid-svelte5#readme",
	"downloads": 29,
	"updated": "2025-02-21T10:13:19.792Z",
	"tags": ["ui"],
	"github_stars": 15,
	"typescript": true,
	"version": "1.0.3",
	"svelte_range": "^5.0.0-next.259",
	"kit_range": "^2.0.0",
	"last_rune_check_version": "1.0.3",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "ag-grid-svelte5",
				"version": "1.0.3",
				"size": 17028
			},
			{
				"name": "@ag-grid-community/client-side-row-model",
				"version": "32.3.5",
				"size": 596774
			},
			{
				"name": "tslib",
				"version": "2.8.1",
				"size": 90359
			},
			{
				"name": "@ag-grid-community/core",
				"version": "32.3.5",
				"size": 6192583
			},
			{
				"name": "ag-charts-types",
				"version": "10.3.5",
				"size": 327993
			},
			{
				"name": "@ag-grid-community/theming",
				"version": "32.3.5",
				"size": 1169098
			},
			{
				"name": "@ag-grid-enterprise/row-grouping",
				"version": "32.3.5",
				"size": 603895
			},
			{
				"name": "@ag-grid-enterprise/core",
				"version": "32.3.5",
				"size": 1098298
			},
			{
				"name": "svelte",
				"version": "5.28.2",
				"size": 2426223
			},
			{
				"name": "@ampproject/remapping",
				"version": "2.3.0",
				"size": 78946
			},
			{
				"name": "@jridgewell/gen-mapping",
				"version": "0.3.8",
				"size": 81596
			},
			{
				"name": "@jridgewell/set-array",
				"version": "1.2.1",
				"size": 17945
			},
			{
				"name": "@jridgewell/sourcemap-codec",
				"version": "1.5.0",
				"size": 112815
			},
			{
				"name": "@jridgewell/trace-mapping",
				"version": "0.3.25",
				"size": 169330
			},
			{
				"name": "@jridgewell/resolve-uri",
				"version": "3.1.2",
				"size": 53153
			},
			{
				"name": "@types/estree",
				"version": "1.0.7",
				"size": 26147
			},
			{
				"name": "acorn",
				"version": "8.14.1",
				"size": 547473
			},
			{
				"name": "@sveltejs/acorn-typescript",
				"version": "1.0.5",
				"size": 197476
			},
			{
				"name": "aria-query",
				"version": "5.3.2",
				"size": 176114
			},
			{
				"name": "axobject-query",
				"version": "4.1.0",
				"size": 110878
			},
			{
				"name": "clsx",
				"version": "2.1.1",
				"size": 8555
			},
			{
				"name": "esm-env",
				"version": "1.2.2",
				"size": 3784
			},
			{
				"name": "esrap",
				"version": "1.4.6",
				"size": 50818
			},
			{
				"name": "is-reference",
				"version": "3.0.3",
				"size": 3953
			},
			{
				"name": "locate-character",
				"version": "3.0.0",
				"size": 5325
			},
			{
				"name": "magic-string",
				"version": "0.30.17",
				"size": 467464
			},
			{
				"name": "zimmerframe",
				"version": "1.1.2",
				"size": 12266
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[1, 3],
			[3, 2],
			[3, 4],
			[0, 3],
			[0, 5],
			[5, 2],
			[5, 3],
			[0, 6],
			[6, 3],
			[6, 7],
			[7, 3],
			[0, 8],
			[8, 9],
			[9, 10],
			[10, 11],
			[10, 12],
			[10, 13],
			[13, 14],
			[13, 12],
			[9, 13],
			[8, 12],
			[8, 15],
			[8, 16],
			[8, 17],
			[8, 18],
			[8, 19],
			[8, 20],
			[8, 21],
			[8, 22],
			[22, 12],
			[8, 23],
			[23, 15],
			[8, 24],
			[8, 25],
			[25, 12],
			[8, 26]
		],
		"circular": []
	},
	"legacy_svelte": false,
	"readme": "# Svelte 5 AG Grid\n\nA Svelte component for integrating AG Grid with Svelte 5\n\n## Installation\n\n```bash\nnpm i ag-grid-svelte5\npnpm i ag-grid-svelte5\nbun install ag-grid-svelte5\nyarn install ag-grid-svelte5\n```\n\n# Table of contents\n\n1. [Main Features](#mainfeatures)\n2. [How this Library Works](#works)\n   1. [Overview](#worksoverview)\n   2. [Custom Cells](#workscells)\n3. [Examples](#examples)\n   1. [Standard](#example1)\n   2. [Custom Cell](#example2)\n   3. [Custom Theme](#example3)\n4. [General and Contact](#general)\n\n## Main Features <a name=\"mainfeatures\"></a>\n\n- Create custom cells with Svelte components ðŸš€\n- Create various themes that will auto-update when changed ðŸŽŸ\n- Fully Svelte 5 Compatible ðŸ’¨\n- Please visit the [GitHub](https://github.com/JohnMaher1/ag-grid-svelte5) for demo usage ðŸ’¡\n\n### How this library works <a name=\"works\"></a>\n\n#### Overview <a name=\"worksoverview\"></a>\n\nThis library creates a Svelte component based on the Javascript version of AG Grid. The svelte component contains a div component where the grid is placed and has an internal reference to the grid api returned from ag grids `createGrid` function. To render the grid inside this svelte component overrides are required to tell the grid we are using a framework to render the grid.\n\n#### Custom Cells <a name=\"workscells\"></a>\n\nAG Grid provides 2 main ways to render a custom cell.\n\n1. A function which the gui element (e.g. a div containing your cell data)\n2. A class that implements `ICellRendererComp`\n\nThe first instance only returns a gui element which will not work to render our custom svelte component and its required props.\n\nThe second instance is what this library uses. This library exports the class `AgGridSvelteRendererComp` which implements AG Grids `ICellRendererComp`. This class contains the methods required to render the svelte component, pass the required parameters, and cleanup the component once its deleted. The main functions are `init` to setup the parameters and `render` which simply calls Svelte's `mount` function to mount/render the component.\n\nBecause a component cannot be passed in as a generic type to a class. A 'hack' is used to carry some of the weight in `cellRendererParams` which includes the component instance and the props to be passed.\n\nI would strongly advise looking into the documentation for AG Grid particulary around custom components if this is something you are interested in. There are many cases where the generic `AgGridSvelteRendererComp` may not meet your needs, so it may be recommened to create your own class that implements ` ICellRendererComp`. E.g. a different `refresh` function which only refreshes the cell when `x` value changes.\n\n## Examples <a name=\"examples\"></a>\n\n### Standard Grid with custom theme and reactive data <a name=\"example1\"></a>\n\n```svelte\n<script lang=\"ts\">\n\tlet rowData: RowData1[] = $state([\n\t\t{ id: 1, make: 'Toyota', model: 'Celica', price: 35000 },\n\t\t{ id: 2, make: 'Ford', model: 'Mondeo', price: 32000 },\n\t\t{ id: 3, make: 'Porsche', model: 'Boxster', price: 72000 }\n\t]);\n\tlet gridOptions: GridOptions<RowData1> = $state({\n\t\tcolumnDefs: [{ field: 'id' }, { field: 'make' }, { field: 'model' }, { field: 'price' }],\n\t\t// Important for reducing dom updates and improving performance\n\t\tgetRowId: (params) => params.data.id.toString(),\n\t\tdomLayout: 'autoHeight',\n\t\ttheme: themeQuartz\n\t});\n\n\t// Simple change detection to show reactivity\n\tsetInterval(() => {\n\t\trowData = [\n\t\t\t{ id: 1, make: 'Ford', model: 'Mondeo', price: 32000 },\n\t\t\t{ id: 2, make: 'Toyota', model: 'Celica', price: 35000 },\n\t\t\t{ id: 3, make: 'Porsche', model: 'Boxster', price: rowData[2].price + 1 }\n\t\t];\n\t}, 1000);\n</script>\n\n<AgGridSvelte5Component {gridOptions} {rowData} theme={selectedTheme} {modules} />\n```\n\n### Custom Cell Renderer <a name=\"example2\"></a>\n\n#### Main Svelte Component\n\n```\n<script lang=\"ts\">\n\tlet rowDataTwo: RowData2[] = $state([\n\t\t{ name: 'John', desc: 'Desc1' },\n\t\t{ name: 'Jane', desc: 'Desc2' },\n\t\t{ name: 'Jack', desc: 'Desc3' }\n\t]);\n\n\tlet gridOptionsTwo: GridOptions<RowData2> = $state({\n\t\tcolumnDefs: [\n\t\t\t{ field: 'name' },\n\t\t\t{\n    \t\t\tfield: 'desc',\n    \t\t\t// Important: Both cellRenderer AND cellRendererParams is required\n    \t\t\tcellRenderer: AgGridSvelteRendererComp,\n    \t\t\tcellRendererParams: (params: ExampleCellProps) => {\n    \t\t\t\t// (Optional): Add a custom prop to the cell renderer alongside ag grids params\n    \t\t\t\tparams.additionalProp1 = 'Hello there';\n    \t\t\t\t// (Optional) Add additional context to the cell renderer\n    \t\t\t\tparams.context = {\n    \t\t\t\t\tsomeAdditionalContext: 'Some additional context'\n    \t\t\t\t};\n    \t\t\t\t// Required: Return the cell renderer params including the component to render\n    \t\t\t\tconst cell: AgGridSvelteRendererParams<ExampleCellProps> = {\n    \t\t\t\t\tcomponent: ExampleCustomCell, // .svelte component\n    \t\t\t\t\t...params // .svelte component props which extend ICellRendererParams\n    \t\t\t\t};\n    \t\t\t\treturn cell;\n    \t\t\t}\n\t\t\t}\n\t\t],\n\t\tgetRowId: (params) => params.data.name,\n\t\tdomLayout: 'autoHeight',\n\t\ttheme: themeQuartz\n\t});\n</script>\n\n<AgGridSvelte5Component\n\t\tgridOptions={gridOptionsTwo}\n\t\trowData={rowDataTwo}\n\t\ttheme={selectedTheme}\n\t\t{modules}\n    />\n```\n\n```\n<script module>\n\timport type { RowData2, RowData2Context } from './+page.svelte';\n\timport type { ICellRendererParams } from '@ag-grid-community/core';\n\n\texport interface ExampleCellProps extends ICellRendererParams<RowData2, string, RowData2Context> {\n\t\t// (Optional) Add additional props here\n\t\tadditionalProp1: string;\n\t}\n</script>\n\n<script lang=\"ts\">\n\tlet props: ExampleCellProps = $props();\n</script>\n\n<div style=\"overflow-x: auto;\">\n\tThis is an additional prop: '{props.additionalProp1}'. This is a standard ag grid prop: '{props.data?.name}'. This is a context prop: '{props.context?.someAdditionalContext}'.\n</div>\n```\n\n### Custom themes <a name=\"example3\"></a>\n\n```\n<script lang=\"ts\">\n\tconst themeOne = themeQuartz.withParams({\n\t\taccentColor: '#EE28ED',\n\t\tbackgroundColor: '#1f2836',\n\t\tbrowserColorScheme: 'dark',\n\t\tchromeBackgroundColor: {\n\t\t\tref: 'foregroundColor',\n\t\t\tmix: 0.07,\n\t\t\tonto: 'backgroundColor'\n\t\t},\n\t\tforegroundColor: '#FFF',\n\t\theaderFontSize: 14\n\t});\n\n\tconst themeTwo = themeQuartz.withParams({\n\t\taccentColor: '#33E34B',\n\t\tbackgroundColor: '#b7b3b3',\n\t\tbrowserColorScheme: 'light',\n\t\tchromeBackgroundColor: {\n\t\t\tref: 'foregroundColor',\n\t\t\tmix: 0.07,\n\t\t\tonto: 'backgroundColor'\n\t\t},\n\t\tforegroundColor: '#000',\n\t\theaderFontSize: 14\n\t});\n\n\tlet selectedTheme = $state(themeOne);\n</script>\n\n<div>\n\t<button\n\t\tstyle=\"margin-bottom: 8px;\"\n\t\tonclick={() => (selectedTheme = selectedTheme === themeOne ? themeTwo : themeOne)}\n\t\t>Change Theme</button\n\t>\n\n\t<AgGridSvelte5Component\n        gridOptions={gridOptionsTwo}\n        rowData={rowDataTwo}\n        theme={selectedTheme} // Changes when selectedTheme updates!\n        {modules}\n    />\n\n</div>\n```\n\n#### General and Contact <a name=\"general\"></a>\n\nIf you have any suggestions/feedback it would be greatly appreciated. Please visit the [GitHub](https://github.com/JohnMaher1/ag-grid-svelte5) to raise any issues or possible changes!\n\nIf you would like to contact me. Here is my website: https://www.john-maher.dev with contact information.\n",
	"downloads_history": [
		[3911, 563],
		[3918, 396],
		[3925, 22],
		[3932, 9],
		[3939, 19],
		[3946, 5],
		[3953, 1],
		[3960, 8],
		[3967, 8],
		[3974, 4],
		[3981, 11],
		[3988, 7],
		[3995, 7],
		[4002, 9],
		[4009, 9],
		[4016, 25],
		[4023, 29],
		[4030, 9],
		[4037, 7],
		[4044, 16],
		[4051, 9],
		[4058, 3],
		[4065, 256],
		[4072, 64],
		[4079, 31],
		[4086, 26],
		[4093, 46],
		[4100, 71],
		[4107, 39],
		[4114, 29],
		[4121, 34],
		[4128, 31]
	],
	"esm": true,
	"cjs": false
}
