{
	"name": "@humanspeak/svelte-keyed",
	"description": "Create deep, reactive stores for Svelte with TypeScript support.",
	"repo_url": "https://github.com/humanspeak/svelte-keyed",
	"authors": ["humanspeakadmin"],
	"homepage": "https://github.com/humanspeak/svelte-keyed#readme",
	"downloads": 1048,
	"updated": "2025-01-27T19:29:34.608Z",
	"tags": ["miscellaneous"],
	"github_stars": 0,
	"typescript": true,
	"version": "5.0.1",
	"svelte_range": "^5.19.3",
	"kit_range": "^2.16.1",
	"last_rune_check_version": "5.0.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@humanspeak/svelte-keyed",
				"version": "5.0.1",
				"size": 17196
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# @humanspeak/svelte-keyed\n\n![svelte-keyed-banner](https://user-images.githubusercontent.com/42545742/145455110-0d90603a-5fb3-453a-a9ea-7c4e3b443913.png)\n\n> A powerful TypeScript-first derived store for Svelte 5 that enables deep object and array manipulation with full reactivity.\n\n[![npm version](http://img.shields.io/npm/v/@humanspeak/svelte-keyed.svg)](https://www.npmjs.com/package/humanspeak/svelte-keyed)\n![build](https://img.shields.io/github/actions/workflow/status/humanspeak/svelte-keyed/npm-publish.yml)\n[![coverage](https://coveralls.io/repos/github/humanspeak/svelte-keyed/badge.svg?branch=main)](https://coveralls.io/github/humanspeak/svelte-keyed?branch=main)\n[![Downloads](https://img.shields.io/npm/dm/@humanspeak/svelte-keyed.svg)](https://www.npmjs.com/package/@humanspeak/svelte-keyed)\n[![License](https://img.shields.io/npm/l/@humanspeak/svelte-keyed.svg)](https://github.com/humanspeak/svelte-keyed/blob/main/LICENSE)\n[![CodeQL](https://github.com/humanspeak/svelte-keyed/actions/workflows/codeql.yml/badge.svg)](https://github.com/humanspeak/svelte-keyed/actions/workflows/codeql.yml)\n[![Install size](https://packagephobia.com/badge?p=@humanspeak/svelte-keyed)](https://packagephobia.com/result?p=@humanspeak/svelte-keyed)\n[![Code Style: Trunk](https://img.shields.io/badge/code%20style-trunk-blue.svg)](https://trunk.io)\n\n## Features\n\n- 🎯 **Type-Safe**: Full TypeScript support with automatic type inference\n- 🔄 **Reactive**: Deep object and array manipulation with automatic updates\n- 🎨 **Svelte 5 Ready**: Built for the latest Svelte features\n- 🪶 **Lightweight**: Zero dependencies, tiny bundle size\n- 🔒 **Null-Safe**: Built-in handling for nullable types\n- 🎮 **Easy API**: Simple dot notation for deep object access\n\n## Quick Start\n\n```js\nconst user = writable({ name: { first: 'Rich', last: 'Harris' } })\nconst firstName = keyed(user, 'name.first')\n\n$firstName = 'Bryan'\n\nconsole.log($user) // { name: { first: 'Bryan', last: 'Harris' } };\n```\n\n## Installation\n\n```bash\n\nnpm i -D svelte-keyed\n\n```\n\nSince Svelte automatically bundles all required dependencies, you only need to install this package as a dev dependency with the `-D` flag.\n\n## Why svelte-keyed?\n\nWhile Svelte's built-in stores are powerful, they don't provide an elegant way to work with nested properties. svelte-keyed solves this by:\n\n- Enabling direct manipulation of nested properties\n- Maintaining full TypeScript support\n- Providing a clean API for complex state management\n- Supporting both object and array access patterns\n\n## API\n\n`keyed` takes a writable object store and a **keypath**, and returns a writable store whose _changes are reflected on the original store_.\n\nProperties are accessed with dot notation, and arrays can be indexed with bracket notation.\n\n```js\nconst email = keyed(settings, 'profiles[0].email')\n```\n\n### Nullable parents\n\nIf the parent store is nullable, then the child store will also be nullable.\n\n```ts\ntype User = {\n    name: {\n        first: string\n        last: string\n    }\n    relations: {\n        partner?: User\n    }\n}\n\nconst maybeUser = writable<User | undefined>(undefined)\n// Writable<string | undefined>\nconst firstName = keyed(maybeUser, 'name.first')\n```\n\n### Nullable properties\n\nNullable properties are accessed with [optional chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining) behaviour.\n\n```ts\nconst user = writable(initUser)\n// Writable<Name | undefined>\nconst partnerName = keyed(user, 'relations.partner.name')\n```\n\n### TypeScript\n\n`keyed` infers the return type of the keyed store from the keypath.\n\n```ts\nconst user = writable(initUser)\n// Writable<string>\nconst firstName = keyed(user, 'name.first')\n```\n\n`keyed` will also try to guess all possible keypaths up to a depth limit of 3.\n\n```ts\nkeyed(user, '...');\n            ┌───────────────────────────────┐\n            │ • name                        │\n            │ • name.first                  │\n            │ • name.last                   │\n            │ • relations                   │\n            │ • relations.partner           │\n            │ • relations.partner.name      │\n            └───────────────────────────────┘\n```\n\n_This limit is due to a TypeScript limitation where structured types must be generated statically. Increasing the depth limit slows down type compilation._\n\nType hints will not be provided for keypaths with a depth greater than 3 but this does not affect the return type.\n\n```ts\nconst user = writable(user)\n// Writable<string | undefined>\nconst firstName = keyed(user, 'relations.partner.name.first')\n```\n\n## Motivations\n\nWe usually read and write properties of an object store with [auto-subscriptions](https://svelte.dev/tutorial/auto-subscriptions).\n\n```svelte\n<input bind:value={$name.first} />\n```\n\nHowever, auto-subscriptions are isolated to a Svelte component. `svelte-keyed` aims to solve several common limitations listed below.\n\n### Context stores\n\nOften, we want to set a property or element of a store into component context, then allow child components to read / write to the property.\n\n```svelte\n<!-- Settings.svelte -->\n<script>\n    setContext('profileSettings', keyed(settings, 'profile'))\n</script>\n\n<GeneralSettings />\n<ProfileSettings />\n```\n\n```svelte\n<!-- ProfileSettings.svelte -->\n<script>\n    const profileSettings = getContext('profileSettings')\n</script>\n\n<input type=\"text\" bind:value={$profileSettings.username} />\n```\n\n### Helper functions\n\nOne important method to reduce clutter on your component is to extract functionality into external helper functions. `svelte-keyed` allows you to create derived `Writable` stores that can be passed into or returned from helper functions.\n\n```svelte\n<!-- Settings.svelte -->\n<script>\n    const stats = writable({ userClicks: 0, userTaps: 0 })\n    const clicks = keyed(stats, 'userClicks')\n</script>\n\n<div use:trackClicks={clicks} />\n<input use:trackClicks={clicks} />\n```\n\n```js\nexport const trackClicks = (node, clicks) => {\n    const listen = () => {\n        clicks.update(($clicks) => $clicks + 1)\n    }\n    node.addEventListener('click', listen)\n    return {\n        destroy() {\n            node.removeEventListener('click', listen)\n        }\n    }\n}\n```\n\n## License\n\nMIT © [Humanspeak, Inc.](LICENSE)\n\n## Credits\n\nMade with ♥ by [Humanspeak](https://humanspeak.com)\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3960, 53],
		[3967, 7],
		[3974, 2],
		[3988, 62],
		[3995, 14],
		[4002, 2],
		[4009, 2],
		[4016, 73],
		[4023, 9],
		[4030, 6],
		[4037, 141],
		[4044, 163],
		[4051, 81],
		[4058, 59],
		[4065, 59],
		[4072, 277],
		[4079, 266],
		[4086, 515],
		[4093, 245],
		[4100, 792],
		[4107, 631],
		[4114, 1048],
		[4121, 818],
		[4128, 1222]
	],
	"esm": true,
	"cjs": false
}
