{
	"name": "sapper-navigation-enhancer",
	"description": "Enhance Sapper navigation with beforeNavigate hook.",
	"repo_url": "https://github.com/PatrickG/sapper-navigation-enhancer",
	"authors": ["pehgeh"],
	"homepage": "https://github.com/PatrickG/sapper-navigation-enhancer#readme",
	"downloads": 6,
	"updated": "2021-03-26T17:03:41.941Z",
	"tags": ["miscellaneous"],
	"github_stars": 2,
	"typescript": true,
	"version": "0.1.6",
	"svelte_range": "^3.35.0",
	"last_rune_check_version": "0.1.6",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "sapper-navigation-enhancer",
				"version": "0.1.6",
				"size": 286295
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# sapper-navigation-enhancer\n\n## Important\n* You need to use the [`goto`](#goto) function exported by sapper-navigation-enhancer instead of the `goto` function exported by Sapper.\n* You need to use the [`redirect`](#redirect) function exported by sapper-navigation-enhancer instead of Sappers `this.redirect` in your `preload` functions.\n\n\n## Install\n\n```sh\nnpm install sapper-navigation-enhancer\n```\n\n\n## Initialization\n\n`src/client.js`\n```js\nimport { start } from '@sapper/app';\nimport beforeStart from 'sapper-navigation-enhancer';\n\nconst afterStart = beforeStart(['/'], true);\nstart({ target: document.querySelector('#app') });\nafterStart();\n```\n\n`src/routes/_layout.svelte`\n```html\n<script>\n  import { goto, stores } from '@sapper/app';\n  import { init } from 'sapper-navigation-enhancer';\n\n  const { page } = stores();\n\n  init(page, goto);\n</script>\n```\n\n\n## API\n\n### back\n\n```ts\nfunction back(fallback: string | () => string): void;\n```\n\nIf [`canGoBack()`](#cangoback) returns `true`, navigates to the previous history entry (like `history.back()`).\\\nIf [`canGoBack()`](#cangoback) returns `false`, navigates to the `fallback` url. It will do so by prepending a history entry with the fallback url before the current history entry and then navigates back.\n\n\n### beforeNavigate\n\n```ts\ntype Callback = (href: string) => false | Promise<false | any> | any;\ntype Unsubscribe = () => void;\nfunction beforeNavigate(callback: Callback, useBeforeUnload: boolean = false): Unsubscribe;\n```\n\nSubscribe to navigation attempts. Navigation will be prevented, when you return `false` or `Promise<false>`.\n\nIf `useBeforeUnload` (or `alwaysUseBeforeUnload` in [`beforeStart`](#beforestart)) is `true`, a `onbeforeunload` listener will be created.\\\nReturns an `Unsubscribe` function, which must be called when the component is destroyed.\n\n```html\n<!-- some-route-or-component.svelte -->\n<script>\n  import { beforeNavigate } from 'sapper-navigation-enhancer';\n  import { onMount } from 'svelte';\n\n  onMount(() => beforeNavigate(href => confirm(`Do you want to navigate to ${href}?`)));\n</script>\n```\n\n\n### beforeStart\n\n```ts\ntype AfterStart = () => void;\nfunction beforeStart(startPaths?: string[], alwaysUseBeforeUnload: boolean = false): AfterStart;\n```\n\nYou need to call this function before you call Sappers `start` function and you need to call the returned `AfterStart` function after you call Sappers `start` function. Typically in the `client.js`.\n\nIf you provide the `startPaths` parameter and the current `location.pathname` does not match any of them, it will prepend a history entry - with the first item of `startPaths` array as the url - before the current history entry.\\\nIf `alwaysUseBeforeUnload` is `true`, a `onbeforeunload` listener will be created when calling [`beforeNavigate`](#beforenavigate) or [`preventNavigation`](#preventnavigation).\n\nThis is the default exported function also, see [Initialization](#initialization).\n\n\n### canGoBack\n\n```ts\nfunction canGoBack(): boolean;\n```\n\nReturns true if the previous history entry is from your app.\n\nAt the same time, `canGoBack` is a readable store.\n\n```html\n<!-- some-component.svelte -->\n<script>\n  import { back, canGoBack } from 'sapper-navigation-enhancer';\n</script>\n\n{#if $canGoBack}\n  <button on:click={() => back('/')}>Go back</button>\n{/if}\n```\n\n\n### goto\n\n```ts\nfunction goto(\n  href: string,\n  opts: {\n    force?: boolean;\n    noscroll?: boolean;\n    replaceStart?: boolean;\n    state?: Record<string, any>;\n  } = {}\n): Promise<void>;\n```\n\nYou need to use this function instead of Sappers `goto` function.\n\nIf `opts.force` is `true`, no [`beforeNavigate`](#beforenavigate) callback will be called.\\\nIf you called [`preventNavigation`](#preventnavigation), `opts.force` has no effect.\n\nWith `opts.state` you can set `history.state` properties for the next history entry.\n\n```diff\n<!-- some-component.svelte -->\n<script>\n-  import { goto } from '@sapper/app';\n+  import { goto } from 'sapper-navigation-enhancer';\n</script>\n\n<button on:click={() => goto('/')}>Home</button>\n```\n\n\n### init\n\n```ts\nimport type { PageContext } from '@sapper/common';\nimport type { Readable } from 'svelte/store';\ntype Goto = typeof import('@sapper/app').goto;\nfunction init(page: Readable<PageContext>, goto: Goto): void;\n```\n\nYou need to call this in your root layout component, see [Initialization](#initialization).\n\n\n### preventNavigation\n\n```ts\ntype RemovePrevention = () => void;\nfunction preventNavigation(useBeforeUnload: boolean = false): RemovePrevention;\n```\n\nPrevents navigation. Returns a function that stops the prevention when called.\n\nIf `useBeforeUnload` (or `alwaysUseBeforeUnload` in [`beforeStart`](#beforestart)) is `true`, a `onbeforeunload` listener will be created.\n\n```html\n<!-- some-component.svelte -->\n<script>\n  import { preventNavigation } from 'sapper-navigation-enhancer';\n\n  let preventing;\n  function togglePrevention() {\n    if (preventing) {\n      preventing();\n      preventing = null;\n    } else {\n      preventing = preventNavigation();\n    }\n  }\n</script>\n\n<button on:click={togglePrevention}>Toggle navigation prevention</button>\n```\n\n\n### redirect\n\n```ts\nimport type { PreloadContext } from '@sapper/common';\nfunction redirect(preloadContext: PreloadContext, statusCode: number, location: string): void;\n```\n\nYou need to use this function instead of Sappers `this.redirect()` inside your `preload` functions.\n\n```diff\n<!-- some-route-or-layout.svelte -->\n<script context=\"module\">\n+  import { redirect } from 'sapper-navigation-enhancer';\n\n  export function preload() {\n-    this.redirect(302, '/');\n+    redirect(this, 302, '/');\n  }\n</script>\n```\n\n\n### state\n\n```ts\nfunction state(state: Record<string, any>): void;\n```\n\nUpdate the `history.state` of the current history entry.\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 1],
		[3610, 8],
		[3617, 2],
		[3631, 1],
		[3638, 9],
		[3645, 7],
		[3652, 2],
		[3659, 1],
		[3666, 8],
		[3680, 1],
		[3701, 1],
		[3708, 1],
		[3729, 1],
		[3736, 6],
		[3743, 6],
		[3750, 1],
		[3757, 1],
		[3764, 4],
		[3771, 3],
		[3778, 2],
		[3785, 1],
		[3792, 2],
		[3799, 1],
		[3806, 2],
		[3834, 3],
		[3841, 1],
		[3855, 36],
		[3883, 2],
		[3890, 9],
		[3904, 2],
		[3911, 1],
		[3918, 1],
		[3932, 1],
		[3960, 1],
		[3967, 1],
		[3981, 1],
		[3988, 1],
		[4016, 7],
		[4023, 1],
		[4030, 7],
		[4037, 12],
		[4044, 13],
		[4051, 1],
		[4058, 1],
		[4065, 2],
		[4086, 1],
		[4093, 10],
		[4100, 10],
		[4107, 3],
		[4114, 6],
		[4121, 9],
		[4128, 3]
	]
}
