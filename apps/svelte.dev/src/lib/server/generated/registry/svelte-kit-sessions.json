{
	"name": "svelte-kit-sessions",
	"description": "Provides user-friendly session management for SvelteKit applications.",
	"repo_url": "https://github.com/yutak23/svelte-kit-sessions",
	"authors": ["yutak23"],
	"homepage": "https://github.com/yutak23/svelte-kit-sessions#readme",
	"downloads": 324,
	"updated": "2024-11-13T04:51:52.547Z",
	"tags": ["server", "auth"],
	"github_stars": 16,
	"typescript": true,
	"version": "0.4.0",
	"svelte_range": "^5.1.13",
	"kit_range": "^1.0.0 || ^2.0.0",
	"last_rune_check_version": "0.4.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-kit-sessions",
				"version": "0.4.0",
				"size": 55814
			},
			{
				"name": "@isaacs/ttlcache",
				"version": "1.4.1",
				"size": 25201
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# svelte-kit-sessions\n\n[![npm](https://img.shields.io/npm/v/svelte-kit-sessions.svg)](https://www.npmjs.com/package/svelte-kit-sessions)\n[![unit test](https://github.com/yutak23/svelte-kit-sessions/actions/workflows/unit-test.yaml/badge.svg)](https://github.com/yutak23/svelte-kit-sessions/actions/workflows/unit-test.yaml)\n[![integration test](https://github.com/yutak23/svelte-kit-sessions/actions/workflows/integration-test.yaml/badge.svg)](https://github.com/yutak23/svelte-kit-sessions/actions/workflows/integration-test.yaml)\n![style](https://img.shields.io/badge/code%20style-airbnb-ff5a5f.svg)\n\n**svelte-kit-sessions** is user-friendly session management module for SvelteKit. Effortlessly integrate efficient session handling into your projects.  \nSession is stored in the store (ex. Redis, Cloudflare KV, etc.), not in a cookie.\n\n## Features\n\n- **Easy Session Management:**  \n  Use `svelte-kit-sessions` for various scenarios, including authentication and issuing sessions with OpenID Connect. It's flexible, allowing user info storage in sessions or using JWTs.\n- **Customizable Store:**  \n  Choose the ideal storage for your needs. Options range from the default MemoryStore to Redis and Cloudflare KV.\n- **Edge Environment Support:**  \n  `svelte-kit-sessions` is compatible with Edge environments like Cloudflare Pages Functions (Cloudflare Workers).\n\nEnhance your SvelteKit development with **svelte-kit-sessions**, the ideal solution for modern web apps.\n\n## Installation\n\n```console\n$ npm i svelte-kit-sessions\n\n$ yarn add svelte-kit-sessions\n\n$ pnpm add svelte-kit-sessions\n```\n\n## Usage\n\n`svelte-kit-sessions` stores session data in a store, so a store is need (Store is optional and defaults to [_MemoryStore_](https://github.com/yutak23/svelte-kit-sessions/blob/main/src/lib/memory-store.ts) if omitted). You can find a list of compatible stores at [Compatible Session Stores](#compatible-session-stores).\n\n```ts\n// src/hooks.server.ts\nimport type { Handle } from '@sveltejs/kit';\nimport { sveltekitSessionHandle } from 'svelte-kit-sessions';\nimport RedisStore from 'svelte-kit-connect-redis';\nimport { Redis } from 'ioredis';\n\nconst client = new Redis({\n\thost: '{your redis host}',\n\tport: 6379\n});\n\nexport const handle: Handle = sveltekitSessionHandle({\n\tsecret: 'secret',\n\tstore: new RedisStore({ client }) // other compatible stores are available\n});\n```\n\nor if you want to use it with your own handle, you can use [sequence](https://kit.svelte.dev/docs/modules#sveltejs-kit-hooks-sequence).\n\n```ts\n// src/hooks.server.ts\nimport type { Handle } from '@sveltejs/kit';\nimport { sequence } from '@sveltejs/kit/hooks';\nimport { sveltekitSessionHandle } from 'svelte-kit-sessions';\nimport RedisStore from 'svelte-kit-connect-redis';\nimport { Redis } from 'ioredis';\n\nconst client = new Redis({\n\thost: '{your redis host}',\n\tport: 6379\n});\n\nconst yourOwnHandle: Handle = async ({ event, resolve }) => {\n\t// `event.locals.session` is available\n\t// your code here\n\tconst result = await resolve(event);\n\treturn result;\n};\n\nexport const handle: Handle = sequence(\n\tsveltekitSessionHandle({ secret: 'secret', store: new RedisStore({ client }) }),\n\tyourOwnHandle\n);\n```\n\nAfter the above implementation, you can use the following in Actions, API routes and Server hooks(handle).\n\n### Actions\n\nFor example, \"authenticate the user and create a session\".\n\n```ts\n// src/routes/login/+page.server.ts\nimport type { ServerLoad, Actions } from '@sveltejs/kit';\nimport db from '$lib/server/db.ts';\n\nexport const load: ServerLoad = async ({ locals }) => {\n\tconst { session } = locals; // you can access `locals.session`\n\tconst user = await db.getUserFromId(session.data.userId);\n\treturn { user };\n};\n\nexport const actions: Actions = {\n\tlogin: async ({ request, locals }) => {\n\t\tconst { session } = locals; // you can access `locals.session`\n\n\t\tconst data = await request.formData();\n\t\tconst email = data.get('email');\n\t\tconst password = data.get('password');\n\t\tconst user = await db.getUser(email, password);\n\n\t\tawait session.setData({ userId: user.id, name: user.name }); // set data to session\n\t\tawait session.save(); // session saveand session create(session data is stored and set-cookie)\n\n\t\treturn { success: true };\n\t},\n\t...\n};\n```\n\n### API route\n\nFor example, \"when creating a TODO with a user who has a session, create the TODO with the session's userId as the creator of the TODO\".\n\n```ts\n// src/routes/api/todo/+server.ts\nimport { json, type RequestEvent, type RequestHandler } from '@sveltejs/kit';\nimport db from '$lib/server/db.ts';\n\ninterface TodoBody {\n\ttitle: string;\n\tmemo: string;\n}\n\nexport const POST: RequestHandler = async (event: RequestEvent) => {\n\tconst { session } = event.locals; // you can access `event.locals.session`\n\n\tconst { title, memo } = (await event.request.json()) as TodoBody;\n\tconst todoId = await db.createTodo({ title, memo, userId: session.data.userId });\n\n\treturn json({ id: todoId }, { status: 200 });\n};\n```\n\n### Server hooks(handle)\n\nFor example, \"redirect to login if access does _not_ have a session after authentication\".\n\n```ts\n// src/hooks.server.ts\nimport { redirect, type Handle } from '@sveltejs/kit';\nimport { sequence } from '@sveltejs/kit/hooks';\nimport { sveltekitSessionHandle } from 'svelte-kit-sessions';\nimport RedisStore from 'svelte-kit-connect-redis';\nimport { Redis } from 'ioredis';\n\nconst client = new Redis({\n\thost: '{your redis host}',\n\tport: 6379\n});\n\nconst checkAuthorizationHandle: Handle = async ({ event, resolve }) => {\n\t// `event.locals.session` is available\n\tif (!event.locals.session.data.userId) throw redirect(302, '/login');\n\n\tconst result = await resolve(event);\n\treturn result;\n};\n\n// make sure to set sveltekitSessionHandle first\nexport const handle: Handle = sequence(\n\tsveltekitSessionHandle({ secret: 'secret', store: new RedisStore({ client }) }),\n\tcheckAuthorizationHandle\n);\n```\n\n<details>\n\n<summary>For example, \"authenticate with OpenID Connect and create a session\".</summary>\n\n**Note** The below is a sample code implementation of Authorization Code Flow in `hooks.server.ts`, but in practice, it should be cut out properly in API Rotes, etc.\n\n```ts\n// src/hooks.server.ts\nimport { redirect, type Handle } from '@sveltejs/kit';\nimport { sequence } from '@sveltejs/kit/hooks';\nimport { sveltekitSessionHandle } from 'svelte-kit-sessions';\nimport RedisStore from 'svelte-kit-connect-redis';\nimport { Redis } from 'ioredis';\nimport oauthClient from '$lib/server/oauth-client.js'; // Be a library for OpenID Connect (OAuth2.0)\n\nconst client = new Redis({\n\thost: '{your redis host}',\n\tport: 6379\n});\n\nconst checkAuthHandle: Handle = async ({ event, resolve }) => {\n\t// Callback endpoints, use temporary tokens to get ID tokens, etc.\n\tif (event.url.pathname === '/oauth/callback' && event.request.method === 'GET') {\n\t\tif (event.locals.session.data.state !== event.params.state) throw new Error('Invalid state.');\n\n\t\tconst data = await oauthClient.callback({\n\t\t\trequest: event.request,\n\t\t\tstate: event.locals.session.data.state,\n\t\t\tcodeVerifier: event.locals.session.data.codeVerifier\n\t\t});\n\n\t\tconst newSession = await session.regenerate();\n\t\tawait newSession.setData({ userId: data.sub, email: data.email, name: data.name });\n\t\tawait newSession.save();\n\t\tthrow redirect(302, '/');\n\t}\n\n\t// Start Authorization Code Flow with no session\n\tif (!event.locals.session.data.userId) {\n\t\tconst { authUri, state, codeVerifier } = oauthClient.start();\n\t\tawait event.locals.session.setData({ state, codeVerifier });\n\t\tawait event.locals.session.save();\n\t\tthrow redirect(302, authUri);\n\t}\n\n\tconst result = await resolve(event);\n\treturn result;\n};\n\nexport const handle: Handle = sequence(\n\tsveltekitSessionHandle({ secret: 'secret', store: new RedisStore({ client }) }),\n\tcheckAuthHandle\n);\n```\n\n</details>\n\n### Typing your session data\n\nYou can use [declaration merging](https://www.typescriptlang.org/docs/handbook/declaration-merging.html) to define types as follows.\n\n```ts\n// src/hooks.server.ts\ndeclare module 'svelte-kit-sessions' {\n\tinterface SessionData {\n\t\tuserId: string;\n\t\tname: string;\n\t}\n}\n```\n\n<details>\n\n<summary>Click here to see how to use in JavaScript</summary>\n\n### JavaScript\n\n```js\n// src/hooks.server.js\nimport { sveltekitSessionHandle } from 'svelte-kit-sessions';\n\nexport const handle = sveltekitSessionHandle({ secret: 'secret' });\n```\n\nor if you want to use it with your own handle, you can use [sequence](https://kit.svelte.dev/docs/modules#sveltejs-kit-hooks-sequence).\n\n```js\n// src/hooks.server.js\nimport { sequence } from '@sveltejs/kit/hooks';\nimport { sveltekitSessionHandle } from 'svelte-kit-sessions';\n\nconst yourOwnHandle = async ({ event, resolve }) => {\n\t// `event.locals.session` is available\n\t// your code here\n\tconst result = await resolve(event);\n\treturn result;\n};\n\nexport const handle = sequence(sveltekitSessionHandle({ secret: 'secret' }), yourOwnHandle);\n```\n\n</details>\n\n## API\n\n```ts\nimport { sveltekitSessionHandle } from 'svelte-kit-sessions';\n\nsveltekitSessionHandle(options);\n```\n\n### sveltekitSessionHandle(options)\n\nCreate a server hooks handle with the given `options`. This allows access to `event.locals.session` in hooks handles, Actions and API route.\n\n**Note** Session data is _not_ saved in the cookie itself, just the session ID. Session data is stored server-side.\n\n**Warning:** The default `MemoryStore` for server-side sessions is not suitable for production. It tends to leak memory, can't scale beyond a single process, and is only for debugging and development. For production-ready stores, see the list of [Compatible Session Stores](#compatible-session-stores).\n\n### Apis(class methods)\n\nA summary of the `event.locals.session` class methods is as follows.\n\n| Name       | Arguments                                          | Return          | Description                                              |\n| ---------- | -------------------------------------------------- | --------------- | -------------------------------------------------------- |\n| setData    | 1. data ([SessionData](#typing-your-session-data)) | Promise\\<void\\> | Set data in the session.                                 |\n| save       | _nothing_                                          | Promise\\<void\\> | Save the session (save session to store) and set cookie. |\n| regenerate | _nothing_                                          | Promise\\<void\\> | Regenerate the session simply invoke the method.         |\n| destroy    | _nothing_                                          | Promise\\<void\\> | Destroy the session.                                     |\n\n#### session.setData(data)\n\nSet data in the session.\n\n**Note** If `saveUninitialized` is `true`, the session is saved without calling `save()`.\nConversely, if `saveUninitialized` is `false`, call `save()` to explicitly save the session.\n\n##### arguments\n\n1. SessionData  \n   Data to be stored in the session.  \n   In TypeScript, you can declare additional properties on your session object using [declaration merging](https://www.typescriptlang.org/docs/handbook/declaration-merging.html) for interface `SessionData`.\n\n##### return\n\nPromise\\<void\\>\n\n#### session.save()\n\nSave the session (save session to store) and set cookie.\n\n##### arguments\n\n_nothing_\n\n##### return\n\nPromise\\<void\\>\n\n#### session.regenerate()\n\nRegenerate the session simply invoke the method. Once complete, a new Session and `Session` instance will be initialized.\n\n##### arguments\n\n_nothing_\n\n##### return\n\nPromise\\<void\\>\n\n#### session.destroy()\n\nDestroy the session.\n\n##### arguments\n\n_nothing_\n\n##### return\n\nPromise\\<void\\>\n\n### Property(class fields)\n\nA summary of the `event.locals.session` class fields is as follows.\n\n| Name       | Type                                                                                                       | Description                                                                                            |\n| ---------- | ---------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------ |\n| id         | string                                                                                                     | Session ID.                                                                                            |\n| cookieName | string                                                                                                     | Session cookie name. The value of `options.name`.                                                      |\n| cookie     | [CookieSerializeOptions](https://github.com/jshttp/cookie?tab=readme-ov-file#options-1) & { path: string } | Session cookie options. The value of `options.cookie`.                                                 |\n| data       | [SessionData](#typing-your-session-data)                                                                   | Session data. Data stored in the session can be referenced from this property.                         |\n| store      | [Store](#session-store-implementation)                                                                     | Session store instance. If you want to manipulate the store directly, you can use this store property. |\n\n### Options\n\nA summary of the `options` is as follows.\n\n| Name              | Type                                                                                    | required/optional | Description                                                                                                                                                  |\n| ----------------- | --------------------------------------------------------------------------------------- | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| name              | string                                                                                  | _optional_        | The name of the session ID cookie to set in the response. The default value is `connect.sid`.                                                                |\n| cookie            | [CookieSerializeOptions](https://github.com/jshttp/cookie?tab=readme-ov-file#options-1) | _optional_        | Cookie settings object. See [link](https://github.com/jshttp/cookie?tab=readme-ov-file#options-1) for details.                                               |\n| rolling           | boolean                                                                                 | _optional_        | Force the session identifier cookie to be set on every response. The default value is `false`. If `cookie.maxAge` is not set, this option is ignored.        |\n| store             | [Store](https://github.com/yutak23/svelte-kit-sessions/blob/main/src/lib/index.ts#L120) | _optional_        | The session store instance. The default value is [_MemoryStore_](https://github.com/yutak23/svelte-kit-sessions/blob/main/src/lib/memory-store.ts) instance. |\n| secret            | string \\| string[]                                                                      | _required_        | This is the secret used to sign the session cookie.                                                                                                          |\n| saveUninitialized | boolean                                                                                 | _optional_        | Forces a session that is \"uninitialized\" to be saved to the store. A session is uninitialized when it is new but not modified. The default value is `false`. |\n\n#### name\n\nThe name of the session ID cookie to set in the response (and read from in the request). The default value is `connect.sid`.\n\n**Note** If you have multiple apps running on the same hostname (this is just the name, i.e. `localhost` or `127.0.0.1`; different schemes and ports do not name a different hostname), then you need to separate the session cookies from each other. The simplest method is to simply set different names per app.\n\n#### cookie\n\nCookie settings object. Exactly the same options that can be specified in `cookie.serialize` of the [cookie npm package](https://www.npmjs.com/package/cookie).\n\n**Note** The default value of the cookie matches the behavior of SvelteKit. For more details, please check https://kit.svelte.dev/docs/types#public-types-cookies. However, for the `cookie.path`, it is implemented so that `/` is set on the svelte-kit-sessions side.\n\nThe following are options that can be set in this object.\n\n##### cookie.domain\n\nSpecifies the value for the [`Domain` `Set-Cookie` attribute][rfc-6265-5.2.3]. By default, no domain is set, and most clients will consider the cookie to apply to only the current domain.\n\n##### cookie.encode\n\nSpecifies a function that will be used to encode a cookie's value. Since value of a cookie has a limited character set (and must be a simple string), this function can be used to encode a value into a string suited for a cookie's value.\n\nThe default function is the global `encodeURIComponent`, which will encode a JavaScript string into UTF-8 byte sequences and then URL-encode any that fall outside of the cookie range.\n\n##### cookie.expires\n\nSpecifies the `Date` object to be the value for the [`Expires` `Set-Cookie` attribute][rfc-6265-5.2.1]. By default, no expiration is set, and most clients will consider this a \"non-persistent cookie\" and will delete it on a condition like exiting a web browser application.\n\n**Note** the [cookie storage model specification][rfc-6265-5.3] states that if both `expires` and `maxAge` are set, then `maxAge` takes precedence, but it is possible not all clients by obey this, so if both are set, they should point to the same date and time.\n\n##### cookie.httpOnly\n\nSpecifies the `boolean` value for the [`HttpOnly` `Set-Cookie` attribute][rfc-6265-5.2.6]. When truthy, the `HttpOnly` attribute is set, otherwise it is not. By default, the `HttpOnly` attribute is not set.\n\n**Note** be careful when setting this to `true`, as compliant clients will not allow client-side JavaScript to see the cookie in `document.cookie`.\n\n##### cookie.maxAge\n\nSpecifies the `number` (in seconds) to be the value for the [`Max-Age` `Set-Cookie` attribute][rfc-6265-5.2.2]. The given number will be converted to an integer by rounding down. By default, no maximum age is set.\n\n**Note** the [cookie storage model specification][rfc-6265-5.3] states that if both `expires` and `maxAge` are set, then `maxAge` takes precedence, but it is possible not all clients by obey this, so if both are set, they should point to the same date and time.\n\n##### cookie.partitioned\n\nSpecifies the `boolean` value for the [`Partitioned` `Set-Cookie`](rfc-cutler-httpbis-partitioned-cookies) attribute. When truthy, the `Partitioned` attribute is set, otherwise it is not. By default, the `Partitioned` attribute is not set.\n\n**Note** This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\nMore information about can be found in [the proposal](https://github.com/privacycg/CHIPS).\n\n##### cookie.path\n\nSpecifies the value for the [`Path` `Set-Cookie` attribute][rfc-6265-5.2.4]. By default, the path is considered the [\"default path\"][rfc-6265-5.1.4].\n\n##### cookie.priority\n\nSpecifies the `string` to be the value for the [`Priority` `Set-Cookie` attribute][rfc-west-cookie-priority-00-4.1].\n\n- `'low'` will set the `Priority` attribute to `Low`.\n- `'medium'` will set the `Priority` attribute to `Medium`, the default priority when not set.\n- `'high'` will set the `Priority` attribute to `High`.\n\nMore information about the different priority levels can be found in [the specification][rfc-west-cookie-priority-00-4.1].\n\n**Note** This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\n##### cookie.sameSite\n\nSpecifies the `boolean` or `string` to be the value for the [`SameSite` `Set-Cookie` attribute][rfc-6265bis-09-5.4.7].\n\n- `true` will set the `SameSite` attribute to `Strict` for strict same site enforcement.\n- `false` will not set the `SameSite` attribute.\n- `'lax'` will set the `SameSite` attribute to `Lax` for lax same site enforcement.\n- `'none'` will set the `SameSite` attribute to `None` for an explicit cross-site cookie.\n- `'strict'` will set the `SameSite` attribute to `Strict` for strict same site enforcement.\n\nMore information about the different enforcement levels can be found in [the specification][rfc-6265bis-09-5.4.7].\n\n**Note** This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\n##### cookie.secure\n\nSpecifies the `boolean` value for the [`Secure` `Set-Cookie` attribute][rfc-6265-5.2.5]. When truthy, the `Secure` attribute is set, otherwise it is not. By default, the `Secure` attribute is not set.\n\n**note** be careful when setting this to `true`, as compliant clients will not send the cookie back to the server in the future if the browser does not have an HTTPS connection.\n\n#### rolling\n\nForce the session identifier cookie to be set on every response. The expiration is reset to the original `maxAge`, resetting the expiration countdown. The default value is `false`. If `cookie.maxAge` is not set, this option is ignored.\n\nWith this enabled, the session identifier cookie will expire in `maxAge` _since the last response was sent_ instead of in `maxAge` _since the session was last modified by the server_.\nThis is typically used in conjuction with short, non-session-length `maxAge` values to provide a quick timeout of the session data\nwith reduced potential of it occurring during on going server interactions.\n\n**Note** When this option is set to `true` but the `saveUninitialized` option is set to `false`, the cookie will not be set on a response with an uninitialized session.\nThis option only modifies the behavior when an existing session was loaded for the request.\n\n#### store\n\nThe session store instance. The default value is `MemoryStore` instance.\n\n**Note** See the chapter [Session Store Implementation](#session-store-implementation) for more information on the store.\n\n#### secret\n\nThis is the secret for signing session ID cookies. It can be a string or an array string of secrets.  \nFor signing, only the first secret in the array is used; for verification, all secrets are considered.  \nThe secret should be a complex, random string, not easily guessed.\n\nBest practices include:\n\n- Storing the secret in environment variables, not in your repository\n- Regularly updating the secret and keeping old ones in the array\n\nTo change the secret without invalidating existing sessions, add the new secret as the first element in the array and include the old ones after it.\n\n#### saveUninitialized\n\nForces a session that is \"uninitialized\" to be saved to the store. A session is uninitialized when it is new but not modified. The default value is `false`.\n\nChoosing `false` is useful for implementing login sessions, reducing server storage usage, or complying with laws that require permission before setting a cookie. Choosing `false` will also help with race conditions where a client makes multiple parallel requests without a session.\n\n## Compatible Session Stores\n\n- [![★][svelte-kit-connect-redis-image] svelte-kit-connect-redis][svelte-kit-connect-redis-url] A Redis based session store. **Note**: Not available in the Edge environment (At least in Cloudflare Workers).\n\n[svelte-kit-connect-redis-url]: https://www.npmjs.com/package/svelte-kit-connect-redis\n[svelte-kit-connect-redis-image]: https://badgen.net/github/stars/yutak23/svelte-kit-connect-redis?label=%E2%98%85\n\n- [![★][svelte-kit-connect-upstash-redis-image] svelte-kit-connect-upstash-redis][svelte-kit-connect-upstash-redis-url] A Upstash Redis based session store. This can also be used in edge environments such as Cloudflare Pages Functions(Cloudflare Workers).\n\n[svelte-kit-connect-upstash-redis-url]: https://www.npmjs.com/package/svelte-kit-connect-upstash-redis\n[svelte-kit-connect-upstash-redis-image]: https://badgen.net/github/stars/yutak23/svelte-kit-connect-upstash-redis?label=%E2%98%85\n\n- [![★][svelte-kit-connect-cloudflare-kv-image] svelte-kit-connect-cloudflare-kv][svelte-kit-connect-cloudflare-kv-url] A Cloudflare Workers KV based session store. This only can be used in Cloudflare Pages Functions(Cloudflare Workers).\n\n[svelte-kit-connect-cloudflare-kv-url]: https://www.npmjs.com/package/svelte-kit-connect-cloudflare-kv\n[svelte-kit-connect-cloudflare-kv-image]: https://badgen.net/github/stars/yutak23/svelte-kit-connect-cloudflare-kv?label=%E2%98%85\n\n_You can implement your own store by referring to the chapter [Session Store Implementation](#session-store-implementation)._\n\n## Session Store Implementation\n\nEvery session store _must_ be implement specific methods.\n\n| method  | Arguments                                                                                                                                                                                                                                                                                                                                 | Description                            |\n| ------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------- |\n| get     | 1. id (string) : session ID                                                                                                                                                                                                                                                                                                               | Returns JSON data stored in the store. |\n| set     | 1. id (string) : session ID<br> 2. storeData ([SessionStoreData](https://github.com/yutak23/svelte-kit-sessions/blob/main/src/lib/index.ts#L108)) : JSON data to be stored in the store<br> 3. ttl (number) : ttl milliseconds calculated from cookie options expires, maxAge(if neither is set, the ttl value passed will be _Infinity_) | Stores JSON data in the store.         |\n| destroy | 1. id (string) : session ID                                                                                                                                                                                                                                                                                                               | Deletes a session from the store.      |\n| touch   | 1. id (string) : session ID<br> 2. ttl (number) : ttl milliseconds calculated from cookie options expires, maxAge(if neither is set, the ttl value passed will be _Infinity_)                                                                                                                                                             | Update expiration with ttl.            |\n\n<details>\n\n<summary>Click here to see TypeScript interface definition.</summary>\n\n```ts\n/**\n * Session store interface.\n * When implementing a custom store, implement it so that it has the following methods.\n *\n * MemoryStore would be helpful.\n * @see MemoryStore\n */\nexport interface Store {\n\t/**\n\t * Returns JSON data stored in the store.\n\t * @param id The session ID\n\t * @returns JSON data stored in the store\n\t */\n\tget(id: string): Promise<SessionStoreData | null>;\n\t/**\n\t * Stores JSON data in the store.\n\t * @param id The session ID\n\t * @param storeData JSON data to store\n\t * @param ttl Time to live in milliseconds. This ttl is calculated with a priority of maxAge > expires,\n\t *              which is useful for store implementation. If no maxAge and expires, ttl is *Infinity*.\n\t *            But can also be calculated independently in the store by referring to the `storeData.cookie`.\n\t *\n\t * @returns Promise fulfilled with undefined\n\t */\n\tset(id: string, storeData: SessionStoreData, ttl: number): Promise<void>;\n\t/**\n\t * Deletes a session from the store.\n\t * @param id The session ID\n\t * @returns Promise fulfilled with undefined\n\t */\n\tdestroy(id: string): Promise<void>;\n\t/**\n\t * Update expiration with ttl.\n\t * @param id The session ID\n\t * @param ttl Time to live in milliseconds.\n\t * @returns Promise fulfilled with undefined\n\t */\n\ttouch(id: string, ttl: number): Promise<void>;\n}\n```\n\n</details>\n\nFor an example implementation view the [_MemoryStore_](https://github.com/yutak23/svelte-kit-sessions/blob/main/src/lib/memory-store.ts).\n\n## Contributing\n\nWe're open to all community contributions! If you'd like to contribute in any way, please first read\nour [Contributing Guide](./CONTRIBUTING.md).\n\n## License\n\n[MIT licensed](./LICENSE)\n\n[rfc-west-cookie-priority-00-4.1]: https://tools.ietf.org/html/draft-west-cookie-priority-00#section-4.1\n[rfc-6265bis-09-5.4.7]: https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-09#section-5.4.7\n[rfc-6265]: https://tools.ietf.org/html/rfc6265\n[rfc-6265-5.1.4]: https://tools.ietf.org/html/rfc6265#section-5.1.4\n[rfc-6265-5.2.1]: https://tools.ietf.org/html/rfc6265#section-5.2.1\n[rfc-6265-5.2.2]: https://tools.ietf.org/html/rfc6265#section-5.2.2\n[rfc-6265-5.2.3]: https://tools.ietf.org/html/rfc6265#section-5.2.3\n[rfc-6265-5.2.4]: https://tools.ietf.org/html/rfc6265#section-5.2.4\n[rfc-6265-5.2.5]: https://tools.ietf.org/html/rfc6265#section-5.2.5\n[rfc-6265-5.2.6]: https://tools.ietf.org/html/rfc6265#section-5.2.6\n[rfc-6265-5.3]: https://tools.ietf.org/html/rfc6265#section-5.3\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3652, 549],
		[3659, 592],
		[3666, 113],
		[3673, 37],
		[3680, 61],
		[3687, 76],
		[3694, 73],
		[3701, 50],
		[3708, 66],
		[3715, 62],
		[3722, 52],
		[3729, 29],
		[3736, 77],
		[3743, 20],
		[3750, 23],
		[3757, 26],
		[3764, 10],
		[3771, 43],
		[3778, 67],
		[3785, 11],
		[3792, 12],
		[3799, 19],
		[3806, 42],
		[3813, 144],
		[3820, 108],
		[3827, 74],
		[3834, 169],
		[3841, 69],
		[3848, 119],
		[3855, 86],
		[3862, 56],
		[3869, 41],
		[3876, 70],
		[3883, 122],
		[3890, 97],
		[3897, 84],
		[3904, 183],
		[3911, 80],
		[3918, 130],
		[3925, 137],
		[3932, 121],
		[3939, 79],
		[3946, 70],
		[3953, 203],
		[3960, 173],
		[3967, 291],
		[3974, 176],
		[3981, 220],
		[3988, 161],
		[3995, 119],
		[4002, 136],
		[4009, 137],
		[4016, 65],
		[4023, 89],
		[4030, 129],
		[4037, 173],
		[4044, 167],
		[4051, 166],
		[4058, 151],
		[4065, 187],
		[4072, 121],
		[4079, 134],
		[4086, 92],
		[4093, 127],
		[4100, 189],
		[4107, 331],
		[4114, 324],
		[4121, 333],
		[4128, 263]
	],
	"esm": true,
	"cjs": false
}
