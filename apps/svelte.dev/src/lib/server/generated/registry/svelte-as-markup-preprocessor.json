{
	"name": "svelte-as-markup-preprocessor",
	"description": "Runs Svelte preprocessors in markup phase.",
	"repo_url": "https://github.com/firefish5000/svelte-as-markup-preprocessor",
	"authors": ["firefish5000", "bluwy"],
	"homepage": "https://github.com/firefish5000/svelte-as-markup-preprocessor#readme",
	"downloads": 182,
	"updated": "2022-02-25T05:42:55.936Z",
	"tags": ["tooling"],
	"github_stars": 5,
	"typescript": true,
	"version": "0.3.0",
	"svelte_range": "^3.29",
	"last_rune_check_version": "0.3.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-as-markup-preprocessor",
				"version": "0.3.0",
				"size": 6474
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# asMarkupPreprocessor\n\nRun any svelte preprocessor in the markup phase.\nUseful anytime you have a markup preprocessor that needs to run\nafter a style or script preprocessor.\n\n# Usage\nTo use, simply wrap all preprocessors above the\nthe dependent preprocessor like so\n```js\n// svelte.config.js\nimport {asMarkupPreprocessor} from 'svelte-as-markup-preprocessor'\nmodule.exports = {\n  preprocess: [\n    asMarkupPreprocessor([\n      sveltePreprocess(),\n      someOtherPreprocessor()\n    ]),\n    dependentMarkupPreprocessor()\n  ]\n}\n```\n\n`asMarkupPreprocessor` is a simple wrapper around [svelte.preprocess](https://svelte.dev/docs#svelte_preprocess), and accepts the same `preprocessors` array as it. In other words, anything you could put in [svelte.config.js](https://github.com/sveltejs/language-tools/blob/master/docs/preprocessors/in-general.md)'s `preprocess` field, you can pass into us.\n\n\n# Motivation\n\nThis was initially written for a preprocessor that walks svelte's ast using\n`svelte.parse` and `svelte.walk`. As those only work on pure svelte files, this was needed to run the all other preprocessors to completion first.\n\n\n# Why is this needed?\n\nNormally, svelte runs its preprocessors in 2 phases. The markup phase, and the script/style phase. The markup phase runs first, and\n*all markup preprocessors run before any script/style preprocessors!*\n\nThis means with this setup\n```js\n// svelte.config.js\nmodule.exports = {\n  preprocess: [\n    preprocessor_1(),\n    preprocessor_2(),\n    preprocessor_3()\n  ]\n}\n```\nThe preprocessors will run in this order\n```js\nawait preprocessor_1.markup()\nawait preprocessor_2.markup()\nawait preprocessor_3.markup()\nawait Promise.all([\n  (async()=>{\n    await preprocessor_1.style()\n    await preprocessor_2.style()\n    await preprocessor_3.style()\n  })(),\n  (async()=>{\n    await preprocessor_1.script()\n    await preprocessor_2.script()\n    await preprocessor_3.script()\n  })()\n])\n```\nAs you can see, preprocessor_2 and preprocessor_3's markup preprocessor ran *before* preprocessor_1's script and style preprocessors.\n\nWe act as a wrapper and change the run order.\nAll preprocessors passed into us finish in our markup phase,\nguaranteeing that they have run before the any preprocessors that run after us. For example\n\n```js\n// svelte.config.js\nmodule.exports = {\n  preprocess: [\n    asMarkupPreprocessor([\n      preprocessor_1(),\n      preprocessor_2()\n    ]),\n    preprocessor_3()\n  ]\n}\n```\nWill changing the run order to\n```js\nawait ({async markup() {\n  await preprocessor_1.markup()\n  await preprocessor_2.markup() \n  await Promise.all([\n    (async()=>{\n      await preprocessor_1.style()\n      await preprocessor_2.style()\n    })(),\n    (async()=>{\n      await preprocessor_1.script()\n      await preprocessor_2.script()\n    })()\n  ])\n}}).markup()\nawait preprocessor_3.markup()\nawait Promise.all([\n  (async()=>{\n    await preprocessor_3.style()\n  })(),\n  (async()=>{\n    await preprocessor_3.script()\n  })()\n])\n```\nNow preprocessor_3 does not run until after both preprocessor_1 and preprocessor_2 have finished preprocessing the markup, script, and style!",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 464],
		[3596, 429],
		[3603, 529],
		[3610, 654],
		[3617, 539],
		[3624, 368],
		[3631, 494],
		[3638, 335],
		[3645, 45],
		[3652, 384],
		[3659, 292],
		[3666, 672],
		[3673, 240],
		[3680, 512],
		[3687, 163],
		[3694, 157],
		[3701, 112],
		[3708, 375],
		[3715, 113],
		[3722, 162],
		[3729, 187],
		[3736, 60],
		[3743, 139],
		[3750, 179],
		[3757, 113],
		[3764, 144],
		[3771, 290],
		[3778, 284],
		[3785, 190],
		[3792, 200],
		[3799, 377],
		[3806, 152],
		[3813, 175],
		[3820, 202],
		[3827, 191],
		[3834, 244],
		[3841, 267],
		[3848, 332],
		[3855, 146],
		[3862, 366],
		[3869, 119],
		[3876, 209],
		[3883, 209],
		[3890, 338],
		[3897, 173],
		[3904, 162],
		[3911, 175],
		[3918, 183],
		[3925, 337],
		[3932, 171],
		[3939, 158],
		[3946, 148],
		[3953, 230],
		[3960, 283],
		[3967, 131],
		[3974, 87],
		[3981, 194],
		[3988, 88],
		[3995, 136],
		[4002, 112],
		[4009, 6],
		[4016, 195],
		[4023, 40],
		[4030, 51],
		[4037, 126],
		[4044, 201],
		[4051, 308],
		[4058, 213],
		[4065, 90],
		[4072, 192],
		[4079, 124],
		[4086, 123],
		[4093, 172],
		[4100, 113],
		[4107, 119],
		[4114, 182],
		[4121, 89],
		[4128, 58]
	],
	"esm": true,
	"cjs": true
}
