{
	"name": "svelte-formify",
	"description": "Manage, validate forms using decorators in Svelte.",
	"repo_url": "https://github.com/nodify-at/svelte-formify",
	"authors": ["nodify_at"],
	"homepage": "https://github.com/nodify-at/svelte-formify#readme",
	"downloads": 38,
	"updated": "2022-04-10T22:08:32.153Z",
	"tags": ["miscellaneous"],
	"github_stars": 11,
	"typescript": true,
	"version": "1.1.16",
	"svelte_range": "^3.47.0",
	"kit_range": "next",
	"last_rune_check_version": "1.1.16",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-formify",
				"version": "1.1.16",
				"size": 34899
			},
			{
				"name": "@abraham/reflection",
				"version": "0.10.0",
				"size": 31168
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# svelte-formify\nA library to manage and validate the forms. This library uses decorators to define validations.\n\n#### This project is still under development, be careful if you decide to use on a production environment \n\n## Installation\n```shell\nnpm i svelte-formify\n```\n\n## Components\nThis library provides 3 main core components:\n\n* ``` @Field ``` to define properties and validations\n* ``` SvelteForm ``` to manage form state, get errors and the validated input values\n* ``` <FormField> ``` a simple input field to use and prevents boilerplate codes while create input fields\n\n### @Field\nField decorator expects the declarations from `yup` library, you can nest any yup validation function while creating\na Field.\n\n> Important: We must pass the Type explicitly for nested types. ESBuild does not support emitDecoratorMetadata yet.\n\n#### Usage example:\n```typescript\nimport { number, object, string } from 'yup'\nimport { Field }                  from 'svelte-formify'\n\nexport class Role {\n    @Field(string().required().oneOf(['admin', 'test'])) name: string\n}\n\nexport class User {\n    @Field(string().required()) username: string\n    @Field(string().required()) password: string\n    @Field(string().required()) firstName: string\n    @Field(string().required()) lastName: string\n    @Field(object(), Role) role: Role // due to a restriction on ESBuild we can not emit decorator metadata for now, therefore we must pass the type for nested values explicitly\n}\n```\n\n### SvelteForm\nSvelteForm class encapsulates the validations, listens for input changes and updates the errors so you can\nshow validates states interactively to the user.\n\nSvelteForm expect 2 parameters while constructing it.\n\n1. target: class defines the validation properties\n2. initialValues: initial values for this class\n\nSvelteForm stores all data in a ```Context ``` class. A context contains the properties described as below:\n* **error** : ValidationError thrown by yup validation\n* **touched** true on blur otherwise false\n* **dirty** if user is typing\n* **value** the value typed by user\n\n#### How get raw values\nYou can call `getRawValues` function if you need the raw values (e.g. : sending the form)\n\n```typescript\nconst values = form.getRawValues()\n```\n\n#### Listening validation result\nYou can use `isValid` property which is a Writable to get validation status each time after user changes something.\n\nExample: you want to enable/disable a button depends on validation status:\n\n```sveltehtml\n<script lang=\"ts\">\n    import { SvelteForm } from 'svelte-formify'\n    import { User }       from './models/user' // your model classes\n\n    const {isValid,...form} = new SvelteForm<User>(User, {\n        firstName: '',\n        lastName: '',\n        password: '',\n        role: {\n            name: 'test'\n        },\n        username: 'hasan'\n    })\n</script>\n\n<button disabled={!$isValid}>Login</button>\n```\n\n\n### General usage example\n```html\n<script lang=\"ts\">\n    import { SvelteForm } from 'svelte-formify'\n    import { User }       from './models/user' // your model classes\n\n    const {values,...form} = new SvelteForm<User>(User, {\n        firstName: '',\n        lastName: '',\n        password: '',\n        role: {\n            name: 'test'\n        },\n        username: 'hasan'\n    })\n    \n    // calling validate manually\n    form.validate().then(rawValue => {}).catch(validationError => {})\n\n    // e.g. usage of listener to get username while user types \n    $: console.log($values.username.value) // returns the typed value\n    $: console.log($values.username.error) // returns the error\n    $: console.log($values.username.touched) // true after onBlur\n    $: console.log($values.username.dirty) // true while user is typing\n</script>\n\n{#if $values.username.error }\n    <small>show some error</small>\n{/if}\n<FormField form={form} property={$values.username} classes=\"w-full p-2\" placeholder=\"Username *\" />\n<!-- e.g. nested object usage -->\n<FormField form={form} property={$values.role.name} classes=\"w-full p-2\" placeholder=\"Role *\" />\n```\n\n\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 28],
		[3603, 27],
		[3610, 29],
		[3617, 1],
		[3624, 3],
		[3631, 1],
		[3638, 2],
		[3659, 1],
		[3666, 28],
		[3673, 28],
		[3680, 1],
		[3708, 29],
		[3722, 1],
		[3729, 30],
		[3743, 1],
		[3750, 1],
		[3757, 2],
		[3764, 1],
		[3771, 27],
		[3778, 56],
		[3785, 1],
		[3792, 3],
		[3799, 1],
		[3806, 3],
		[3813, 2],
		[3827, 1],
		[3834, 11],
		[3841, 5],
		[3848, 4],
		[3855, 143],
		[3862, 6],
		[3869, 2],
		[3876, 5],
		[3883, 9],
		[3890, 58],
		[3897, 6],
		[3904, 2],
		[3911, 12],
		[3918, 18],
		[3925, 12],
		[3932, 5],
		[3939, 7],
		[3953, 6],
		[3960, 6],
		[3967, 2],
		[3974, 3],
		[3981, 6],
		[3988, 1],
		[3995, 1],
		[4002, 6],
		[4009, 28],
		[4016, 9],
		[4023, 2],
		[4030, 58],
		[4037, 39],
		[4044, 16],
		[4051, 2],
		[4058, 4],
		[4065, 9],
		[4079, 1],
		[4093, 14],
		[4100, 30],
		[4107, 9],
		[4114, 38],
		[4121, 73],
		[4128, 13]
	]
}
