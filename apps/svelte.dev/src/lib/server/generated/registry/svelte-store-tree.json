{
	"name": "svelte-store-tree",
	"description": "Provide nested stores that zoom into store value parts.",
	"repo_url": "https://github.com/igrep/svelte-store-tree",
	"authors": ["igrep"],
	"homepage": "https://github.com/igrep/svelte-store-tree#readme",
	"downloads": 4,
	"updated": "2023-10-12T08:51:56.120Z",
	"tags": ["miscellaneous"],
	"github_stars": 11,
	"typescript": true,
	"version": "0.5.2",
	"svelte_range": "^4.0.5",
	"last_rune_check_version": "0.5.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-store-tree",
				"version": "0.5.2",
				"size": 252740
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-store-tree\n\n[![npm version](https://badge.fury.io/js/svelte-store-tree.svg)](https://badge.fury.io/js/svelte-store-tree)\n[![License](https://img.shields.io/badge/License-BSD_3--Clause-blue.svg)](https://opensource.org/licenses/BSD-3-Clause)\n![CI](https://github.com/igrep/svelte-store-tree/actions/workflows/ci.yaml/badge.svg)\n\nCurrent status: Experimental.\n\nProvides writable/readable stores that can 'zoom' into a part of the store\nvalue (so-called \"nested stores\"). It enables us to manage the state of the app\nin a single object while keeping the independence of every child component.\n\n# Example\n\n<!-- BEGIN README TEST -->\n\n```typescript\nimport { writableTree, Refuse, into, isPresent } from 'svelte-store-tree';\nimport type { WritableTree } from 'svelte-store-tree';\n\ntype SomeRecord = {\n  id: number;\n  name: string;\n  contact: {\n    phone: string;\n    urls: string[];\n  };\n  favoriteColor: Color | undefined;\n};\n\ntype Color = [number, number, number];\n\n// Create a `WritableTree`\nconst someRecord: WritableTree<SomeRecord> = writableTree({\n  id: 0,\n  name: 'Y. Y',\n  contact: {\n    phone: '+81-00-0000-0000',\n    urls: [\n      'https://the.igreque.info',\n      'https://github.com/igrep',\n    ],\n  },\n  favoriteColor: undefined\n});\n\n// Subscribe as an ordinary store.\nsomeRecord.subscribe((newUser) => {\n  console.log('Updated the user', newUser);\n});\n\n// `zoom` with the `into` Accessor;\n//    Create a store that subscribes only a specific field of the object\nconst name = someRecord.zoom(into('name'));\nconst contact = someRecord.zoom(into('contact'));\nconst favoriteColor = someRecord.zoom(into('favoriteColor'));\n\nname.subscribe((newName) => {\n  console.log('Updated the name', newName);\n});\ncontact.subscribe((newContact) => {\n  console.log('Updated the contact', newContact);\n});\nfavoriteColor.subscribe((newColor) => {\n  console.log('Updated the color', newColor);\n});\n\n// We can apply `zoom` deeper:\nconst urls = contact.zoom(into('urls'));\n\n// Notifies the subscribers of `someRecord`, `contact`, and `urls`.\n// ** Changes are propagated only to the direct subscribers, and the ancestors'. **\n// ** Not to the the siblings' to avoid extra rerendering of the subscribing components. **\nurls.update((u) => [...u, 'https://twitter.com/igrep']);\n\n// If your record contains a union type, the `choose` method is useful.\n// Pass a function that returns a `Refuse` (a unique symbol provided by this library)\n// if the value doesn't satisfy the condition.\nconst favoriteColorNonUndefined =\n  favoriteColor.choose((color) => color ?? Refuse);\n\n// Now, favoriteColorNonUndefined is typed as `WritableTree<Color>`,\n// while favoriteColor is `WritableTree<Color | undefined>`.\n\n// As a shortcut for a nullable type, svelte-store-tree provides\n// the `isPresent` function used with `choose`:\nconst favoriteColorNonUndefined2 = favoriteColor.choose(isPresent);\n\nfavoriteColorNonUndefined.subscribe((newColor) => {\n  console.log('Updated the color', newColor);\n});\n\n// Notifies the subscribers of `someRecord`, `favoriteColor`, and `favoriteColorNonUndefined`.\nfavoriteColor.set([0xC0, 0x10, 0x10]);\n\n// Notifies the subscribers of `someRecord`, and `favoriteColor` (not `favoriteColorNonUndefined`).\nfavoriteColor.set(undefined);\n```\n\n<!-- END README TEST -->\n\n# Working Example App\n\n<a href=\"https://codesandbox.io/p/github/igrep/svelte-store-tree/draft/floral-sound?workspace=%257B%2522activeFileId%2522%253Anull%252C%2522openFiles%2522%253A%255B%255D%252C%2522sidebarPanel%2522%253A%2522EXPLORER%2522%252C%2522gitSidebarPanel%2522%253A%2522COMMIT%2522%252C%2522sidekickItems%2522%253A%255B%257B%2522type%2522%253A%2522PREVIEW%2522%252C%2522taskId%2522%253A%2522dev%2522%252C%2522port%2522%253A5173%252C%2522key%2522%253A%2522cl84b20px00942a69505zsdx2%2522%252C%2522isMinimized%2522%253Afalse%252C%2522path%2522%253A%2522%252Fexample%252F%2522%257D%252C%257B%2522type%2522%253A%2522TASK_LOG%2522%252C%2522taskId%2522%253A%2522dev%2522%252C%2522key%2522%253A%2522cl84b1zcx00452a69im60ktrw%2522%252C%2522isMinimized%2522%253Afalse%257D%255D%257D\">\nRun on CodeSandbox\n\n![Example App running on CodeSandbox](./docs/codesandbox.png \"Example App running on CodeSandbox\")\n</a>\n\n# Installation\n\n```bash\n$ npm install --save svelte-store-tree\n```\n\n# API\n\n```typescript\n// Core API\nexport function writableTree<P>(\n  value: P,\n  start: StartStopNotifier<P> = noop,\n): WritableTree<P>;\n\nexport function readableTree<P>(\n  value: P,\n  start: StartStopNotifier<P> = noop,\n): ReadableTree<P>\n\n/// Types related to the Core API\nexport type StoreTreeCore<P> = {\n  zoom<C>(accessor: Accessor<P, C>): WritableTree<C>;\n  zoomNoSet<C>(readChild: (parent: P) => C | Refuse): ReadableTree<C>;\n  choose<P_ extends P>(readChild: (parent: P) => P_ | Refuse): WritableTree<P_>;\n};\nexport type ReadableTree<P> = Readable<P> & StoreTreeCore<P>;\nexport type WritableTree<P> = Writable<P> & StoreTreeCore<P>;\n\nexport const Refuse: unique symbol = Symbol();\nexport type Refuse = typeof Refuse;\n\n/// Utility function to help the `StoreTreeCore.prototype.choose` method\nexport function isPresent<P>(parent: P): NonNullable<P> | Refuse;\n\n// Accessor API\nexport class Accessor<P, C> {\n  constructor(readChild: (parent: P) => C | Refuse, writeChild: (parent: P, newChild: C) => void);\n  readChild: (parent: P) => C | Refuse;\n  writeChild: (parent: P, newChild: C) => void;\n  and<GC>(other: Accessor<C, GC>): Accessor<P, GC>;\n};\n\n/// Various Utility Accessors\nexport function into<P, K extends keyof P>(key: K): Accessor<P, P[K]>;\nexport function intoMap<K extends string | number | symbol, V>(key: K): Accessor<Map<K, V>, V>;\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 11],
		[3603, 7],
		[3610, 7],
		[3617, 1],
		[3624, 2],
		[3631, 1],
		[3645, 3],
		[3659, 3],
		[3666, 12],
		[3694, 1],
		[3708, 1],
		[3715, 2],
		[3722, 4],
		[3729, 8],
		[3743, 3],
		[3757, 1],
		[3771, 1],
		[3778, 3],
		[3785, 1],
		[3792, 4],
		[3799, 1],
		[3806, 2],
		[3820, 1],
		[3841, 36],
		[3848, 1],
		[3855, 1],
		[3862, 1],
		[3869, 1],
		[3876, 1],
		[3890, 9],
		[3897, 1],
		[3904, 8],
		[3911, 5],
		[3918, 5],
		[3925, 5],
		[3932, 2],
		[3939, 1],
		[3946, 2],
		[3967, 1],
		[3988, 10],
		[3995, 9],
		[4002, 1],
		[4009, 6],
		[4016, 4],
		[4023, 4],
		[4030, 1],
		[4037, 16],
		[4044, 6],
		[4051, 17],
		[4058, 3],
		[4065, 4],
		[4079, 8],
		[4086, 15],
		[4093, 7],
		[4100, 22],
		[4107, 10],
		[4114, 4],
		[4121, 7],
		[4128, 6],
		[4135, 5]
	]
}
