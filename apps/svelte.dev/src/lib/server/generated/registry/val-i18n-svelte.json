{
	"name": "val-i18n-svelte",
	"description": "Integrate val-i18n for internationalization in Svelte apps.",
	"repo_url": "https://github.com/crimx/val-i18n-svelte",
	"authors": ["straybugs"],
	"homepage": "https://github.com/crimx/val-i18n-svelte#readme",
	"downloads": 7,
	"updated": "2024-02-22T08:57:27.290Z",
	"tags": ["integration"],
	"github_stars": 2,
	"typescript": true,
	"version": "0.2.5",
	"svelte_range": "^3.54.0",
	"kit_range": "^1.0.0",
	"last_rune_check_version": "0.2.5",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "val-i18n-svelte",
				"version": "0.2.5",
				"size": 13087
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# [val-i18n-svelte](https://github.com/crimx/val-i18n-svelte)\n\n<p align=\"center\">\n  <img width=\"200\" src=\"https://raw.githubusercontent.com/crimx/val-i18n/main/assets/val-i18n.svg\">\n</p>\n\n[![Build Status](https://github.com/crimx/val-i18n-svelte/actions/workflows/build.yml/badge.svg)](https://github.com/crimx/val-i18n-svelte/actions/workflows/build.yml)\n[![npm-version](https://img.shields.io/npm/v/val-i18n-svelte.svg)](https://www.npmjs.com/package/val-i18n-svelte)\n[![Coverage Status](https://img.shields.io/coveralls/github/crimx/val-i18n-svelte/master)](https://coveralls.io/github/crimx/val-i18n-svelte?branch=master)\n[![minified-size](https://img.shields.io/bundlephobia/minzip/val-i18n-svelte)](https://bundlephobia.com/package/val-i18n-svelte)\n\n[![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg?maxAge=2592000)](http://commitizen.github.io/cz-cli/)\n[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-brightgreen.svg?maxAge=2592000)](https://conventionalcommits.org)\n[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier)\n\nSvelte goodies for [val-i18n](https://github.com/crimx/val-i18n).\n\n## Install\n\n```bash\nnpm add val-i18n-svelte val-i18n value-enhancer\n```\n\n## API\n\n- `<I18nProvide>` to set i18n context automatically (supports async loading).\n- `setI18n` to set i18n context manually.\n\n- `useTranslate` to get updated `i18n.t$` observable.\n- `useLang` to get updated `i18n.lang$` observable.\n- `useI18n` to get `i18n$` observable.\n- `<Trans>` component to insert Svelte element into the translation message.\n\nYou can run the example in this repo by `pnpm dev`.\n\n## Usage\n\nSee live example on [Svelte REPL](https://svelte.dev/repl/99f393b7a8a04914a6a369c774aa436b).\n\n### With static locales:\n\nSet `i18n` context in root component:\n\n```svelte\n<script>\n  import { setI18n, useTranslate } from \"val-i18n-svelte\";\n  import { I18n } from \"val-i18n\";\n\n  const locales = { en: { apple: \"apple\" } };\n  const i18n = new I18n(\"en\", locales);\n  setI18n(i18n);\n</script>\n\n<div>....</div>\n```\n\nAccess i18n in descendent components (any level):\n\n```svelte\n<script>\n  import { useTranslate, useLang, useI18n } from \"val-i18n-svelte\";\n\n  const t = useTranslate();\n  const lang = useLang();\n  const i18n = useI18n();\n</script>\n\n<div>{$t(\"apple\")}</div>\n<button on:click={() => $i18n.switchLang(\"zh\")}>{$lang}</button>\n```\n\n### With dynamic locales:\n\nSet `i18n` context in root component:\n\n```svelte\n<script>\n  import { I18nProvider } from \"val-i18n-svelte\";\n  import { I18n } from \"val-i18n\";\n\n  const loader = I18n.preload(\"en\", (lang) => import(`../locales/${lang}.json`));\n</script>\n\n<I18nProvider i18n={loader}>.....</I18nProvider>\n```\n\nAccess i18n in descendent components (any level):\n\n```svelte\n<script>\n  import { useTranslate, useLang, useI18n } from \"val-i18n-svelte\";\n\n  const t = useTranslate();\n  const lang = useLang();\n  const i18n = useI18n();\n</script>\n\n<div>{$t(\"apple\")}</div>\n<button on:click={() => $i18n.switchLang(\"zh\")}>{$lang}</button>\n```\n\nIf you need to access i18n in root component:\n\n```svelte\n<I18nProvider let:t let:i18n let:lang>\n  <div>{t(\"apple\")}</div>\n  <button on:click={() => i18n.switchLang(\"zh\")}>{lang}</button>\n</I18nProvider>\n```\n\n### Trans Component\n\nTo insert Svelte elements into the translation message:\n\n```svelte\n<script>\n  import { useTranslate, Trans } from \"val-i18n-svelte\";\n  /*\n    with locale:\n    {\n      visit: \"Visit this address {{fruit}}.\",\n    }\n  */\n  const t = useTranslate();\n</script>\n\n<Trans message={$t(\"visit\")}>\n  <a href=\"https://github.com/crimx/val-i18n-svelte\">val-i18n-svelte</a>\n</Trans>\n```\n\n↓Outputs:\n\n```html\nVisit this address <a href=\"https://github.com/crimx/val-i18n-svelte\">val-i18n-svelte</a>.\n```\n\nTo inset multiple Svelte elements into the translate message, due to the limitation of Svelte ([without dynamic slot name support](https://github.com/sveltejs/svelte/issues/3480)), you need to use `let:key` to access the key of the placeholder. The `key` is the name of the placeholder in the translation message.\n\n```svelte\n<script>\n  import { useTranslate, Trans } from \"val-i18n-svelte\";\n  /*\n    with locale:\n    {\n      author: \"CRIMX\",\n      fruit: \"apple\",\n      eat: \"{{name}} eats {{fruit}}.\",\n    }\n  */\n  const t = useTranslate();\n</script>\n\n<Trans message={$t(\"eat\")} let:key>\n  {#if key === \"name\"}\n    <strong>{$t(\"author\")}</strong>\n  {:else if key === \"fruit\"}\n    <i>{$t(\"fruit\")}</i>\n  {/if}\n</Trans>\n```\n\n↓Outputs:\n\n```html\n<strong>CRIMX</strong> eats <i>apple</i>.\n```\n\n### Sub-context With Nested I18n\n\nYou can add extra `setI18n` or `<Ii18nProvider />` in descendent components to override the context. Only the descendent components of the new context will be affected.\n\n## Developing\n\nThis project is created by [`create-svelte`](https://github.com/sveltejs/kit/tree/master/packages/create-svelte).\n\nOnce you've created a project and installed dependencies with `npm install` (or `pnpm install` or `yarn`), start a development server:\n\n```bash\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n## Building\n\nTo create a production version of your app:\n\n```bash\nnpm run build\n```\n\nYou can preview the production build with `npm run preview`.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 1],
		[3603, 8],
		[3610, 6],
		[3617, 2],
		[3624, 5],
		[3631, 8],
		[3638, 69],
		[3645, 9],
		[3652, 5],
		[3659, 3],
		[3666, 18],
		[3673, 2],
		[3687, 27],
		[3694, 5],
		[3701, 60],
		[3708, 12],
		[3715, 6],
		[3722, 4],
		[3729, 5],
		[3736, 5],
		[3743, 3],
		[3750, 4],
		[3757, 2],
		[3764, 2],
		[3771, 9],
		[3778, 5],
		[3792, 2],
		[3799, 2],
		[3806, 8],
		[3813, 10],
		[3827, 1],
		[3834, 11],
		[3841, 26],
		[3848, 3],
		[3869, 2],
		[3876, 4],
		[3883, 2],
		[3890, 12],
		[3897, 15],
		[3904, 2],
		[3911, 8],
		[3918, 8],
		[3925, 1],
		[3932, 3],
		[3939, 5],
		[3946, 3],
		[3953, 5],
		[3960, 1],
		[3974, 2],
		[3981, 7],
		[3995, 1],
		[4009, 1],
		[4016, 1],
		[4023, 8],
		[4030, 1],
		[4037, 13],
		[4044, 19],
		[4051, 3],
		[4058, 5],
		[4065, 1],
		[4072, 2],
		[4093, 1],
		[4100, 21],
		[4107, 1],
		[4114, 7],
		[4121, 10],
		[4128, 1],
		[4135, 6]
	]
}
