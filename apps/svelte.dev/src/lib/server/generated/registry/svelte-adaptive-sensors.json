{
	"name": "svelte-adaptive-sensors",
	"description": "Access device and network information for adaptive Svelte apps.",
	"repo_url": "https://github.com/pngwn/svelte-adaptive-sensors",
	"authors": ["evilpingwin"],
	"homepage": "https://github.com/pngwn/svelte-adaptive-sensors#readme",
	"downloads": 6,
	"updated": "2019-11-12T23:35:41.516Z",
	"tags": ["miscellaneous"],
	"github_stars": 50,
	"typescript": false,
	"version": "0.1.2",
	"svelte_range": "^3.14.0",
	"last_rune_check_version": "0.1.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-adaptive-sensors",
				"version": "0.1.2",
				"size": 12969
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-adaptive-sensors\n\nSensors to help you deliver adaptive sensors to users depending on their network-type, memory, cpu, and saveData settings. A svelte version of [`react-adaptive-hooks`](https://github.com/GoogleChromeLabs/react-adaptive-hooks/) although there are very few differences between the two libraries currently.\n\nThis library makes it easier to get information about a user's device, settings and network and alter your app's behaviour using these metrics.\n\nCurrently 4 APIs are supported:\n\n- [Network via effective connection type](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/effectiveType)\n- [Data Saver preferences](https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/saveData)\n- [Device memory](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/deviceMemory)\n- [Logical CPU cores](https://developer.mozilla.org/en-US/docs/Web/API/NavigatorConcurrentHardware/hardwareConcurrency)\n\n## Install\n\nWith `npm`:\n\n```bash\nnpm install --save-dev svelte-adaptive-sensors\n```\n\nOr `yarn`:\n\n```bash\nyarn add --dev svelte-adaptive-sensors\n```\n\n## Use\n\nImport them:\n\n```js\nimport {\n\tgetCpuInfo,\n\tgetMemoryInfo,\n\tgetNetworkInfo,\n\tgetSaveDataInfo,\n} from 'svelte-adaptive-sensors';\n```\n\nAnd then use them.\n\n## API\n\nAll functions (or stores, in the case of `getNetworkInfo`) return an object with a `supported` property. This value is `false` if the API is not supported and `true` if it is.\n\n### `getCpuInfo`\n\nA simple function that returns information about a user's logical processor cores using the `navigator.hardwareConcurrency` API.\n\nThis value is static and will never change. User don't routinely swap out their CPU when using an app and if they do then I wnat to hear about it.\n\n```ts\ngetCpuInfo() = {\n  supported: Boolean,\n  processors:? Number\n};\n```\n\nIf `supported` is `false` then the `processors` property will not be present.\n\n```svelte\n<script>\n  import { getCpuInfo } from 'svelte-adaptive-sensors';\n\n  const { processors, supported } = getCpuInfo();\n</script>\n\n{#if supported && processors > 4}\n  <Video src={video_src} />\n{:else}\n  <Image src={image_src}>\n{/if}\n```\n\n### `getNetworkInfo`\n\nA function that returns a store containing information about a user's effect network speed using the `navigator.connection.effectiveType` API.\n\nThis is the only value that can update and as such it returns a `readable` store instead of a static value. The store has the following contents:\n\n```ts\ngetNetworkInfo() = readable<{\n  supported: Boolean,\n  effectiveType:? Number\n}>;\n```\n\nIf `supported` is `false` then the `effectiveType` property will not be present.\n\n```svelte\n<script>\n  import { getNetworkInfo } from 'svelte-adaptive-sensors';\n\n  const network = getNetworkInfo();\n\n  function getProps(network_type) {\n    let props;\n    switch(network_type) {\n      case 'slow-2g':\n        media = { src: low_res, alt: 'low resolution' };\n        break;\n      case '2g':\n        media = { src: med_res, alt: 'medium resolution' };\n        break;\n      case '3g':\n        media = { src: hi_res, alt: 'high resolution' };\n        break;\n      case '4g':\n        media = { src: very_hi_res, alt: 'very high resolution' };\n        break;\n      default:\n        media = { src: med_res, alt: 'medium resolution' };\n        break;\n    }\n\n    return props;\n  }\n\n  $: media_props = getProps($network.effectiveType);\n</script>\n\n<img {...media_props} />\n```\n\n### `getMemoryInfo`\n\nA simple function that returns information about a user's deviceMemory using the `navigator.deviceMemory` and `performance.memory` APIs.\n\nThis value is static and will never change.\n\n```ts\ngetMemoryInfo() = {\n  supported: Boolean,\n  deviceMemory:? Number,\n  totalJSHeapSize:? Number,\n  usedJSHeapSize:? Number,\n  jsHeapSizeLimit:? Number,\n}\n```\n\nIf `supported` is `false` then the `deviceMemory`, `totalJSHeapSize`, `usedJSHeapSize`, `jsHeapSizeLimit` properties will not be present.\n\n```svelte\n<script>\n  import { getMemoryInfo } from 'svelte-adaptive-sensors';\n\n  const { deviceMemory, supported } = getMemoryInfo();\n</script>\n\n{#if supported && deviceMemory > 4}\n  <Video src={video_src} />\n{:else}\n  <Image src={image_src}>\n{/if}\n```\n\n### `getSaveDataInfo`\n\nA simple function that returns a user's current Save Data status\n\n```ts\ngetSaveDataInfo() = {\n  supported: Boolean,\n  saveData:? Boolean,\n};\n```\n\nIf `supported` is `false` then the `saveData`property will not be present.\n\n```svelte\n<script>\n  import { getMemoryInfo } from 'svelte-adaptive-sensors';\n\n  const { saveData, supported } = getSaveDataInfo();\n</script>\n\n{#if supported && !saveData}\n  <Video src={video_src} />\n{:else}\n  <Image src={image_src}>\n{/if}\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 11],
		[3603, 12],
		[3610, 5],
		[3617, 1],
		[3624, 1],
		[3631, 7],
		[3645, 16],
		[3652, 1],
		[3659, 1],
		[3666, 3],
		[3673, 18],
		[3680, 1],
		[3687, 6],
		[3694, 3],
		[3701, 12],
		[3708, 2],
		[3715, 9],
		[3722, 12],
		[3729, 30],
		[3757, 14],
		[3764, 1],
		[3771, 2],
		[3778, 13],
		[3785, 10],
		[3792, 13],
		[3799, 1],
		[3806, 3],
		[3820, 10],
		[3827, 12],
		[3834, 1],
		[3841, 6],
		[3848, 26],
		[3855, 8],
		[3862, 15],
		[3869, 1],
		[3876, 1],
		[3883, 2],
		[3890, 4],
		[3897, 1],
		[3904, 4],
		[3911, 2],
		[3932, 2],
		[3946, 2],
		[3953, 6],
		[3960, 4],
		[3981, 1],
		[3995, 3],
		[4002, 9],
		[4016, 3],
		[4023, 4],
		[4030, 6],
		[4037, 12],
		[4044, 8],
		[4051, 5],
		[4058, 6],
		[4065, 10],
		[4072, 2],
		[4093, 10],
		[4100, 4],
		[4107, 3],
		[4114, 6],
		[4121, 7],
		[4128, 2]
	],
	"esm": false,
	"cjs": true
}
