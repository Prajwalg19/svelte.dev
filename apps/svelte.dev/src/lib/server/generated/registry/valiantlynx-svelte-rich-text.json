{
	"name": "@valiantlynx/svelte-rich-text",
	"description": "Create rich text editor as Svelte component.",
	"repo_url": "https://github.com/valiantlynx/svelte-rich-text",
	"authors": ["valiantlynx"],
	"homepage": "https://svelte-rich-text.valiantlynx.com",
	"downloads": 99,
	"updated": "2024-04-09T16:34:48.511Z",
	"tags": ["ui"],
	"github_stars": 4,
	"typescript": false,
	"version": "0.2.8",
	"svelte_range": "^4.0.0",
	"kit_range": "^2.0.0",
	"last_rune_check_version": "0.2.8",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@valiantlynx/svelte-rich-text",
				"version": "0.2.8",
				"size": 11887
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Valiant Rich Text Svelte Component\n\n![valiantlynx logo](./static/valiantlynx.jpg)\n\n## Introduction\n\nThe **Valiant Rich Text Svelte Component** is a powerful and versatile rich text editor for Svelte applications. It allows users to create, edit, and manage structured text content by adding various blocks with associated data. This component is designed to be highly customizable, responsive on mobile devices, and supportive of both editing and viewing modes.\n\n## Installation\n\nTo get started with the Valiant Rich Text Svelte Component, you can install it via your package manager of choice:\n\n```bash\nnpm install @valiantlynx/svelte-rich-text\n# or\nyarn add @valiantlynx/svelte-rich-text\n# or\npnpm i @valiantlynx/svelte-rich-text\n```\n\n## Basic Usage\n\nTo use the valiantlynx Rich Text editor, import the `ValiantRichText` component and include it in your Svelte application.\n\n```svelte\n<script>\n  import { ValiantRichText } from '@valiantlynx/svelte-rich-text';\n</script>\n\n<ValiantRichText />\n```\n\n## Data Structure\n\nThe rich text editor works with a specific data structure known as `dataBlock`. This type includes:\n\n- `image`: Represents image blocks with data such as base64 representation, name, and caption.\n- `paragraph`: Basic text blocks.\n- `code`: Code blocks with text content and a specified programming language.\n- `quote`: Text quotes with owner attribution.\n- `header`: Header blocks with different levels (1 to 4) and associated text.\n- `space`: Empty space blocks with a specified size.\n- `list`: List blocks with items and an ordered or unordered list type.\n\n```ts\ntype dataBlock =\n\t| { name: 'image'; id: string; data: { base64: string; name: string; caption: string } }\n\t| { name: 'paragraph'; id: string; data: { text: string } }\n\t| { name: 'code'; id: string; data: { text: string; lang: languages } }\n\t| { name: 'quote'; id: string; data: { text: string; owner: string } }\n\t| { name: 'header'; id: string; data: { text: string; level: 1 | 2 | 3 | 4 } }\n\t| { name: 'space'; id: string; data: { size: number } }\n\t| { name: 'list'; id: string; data: { items: string[]; type: 'ordered' | 'unordered' } };\n```\n\n### Block States\n\nEach block in the Valiant Rich Text editor can exist in one of three states:\n\n1. **View State:** In this state, the block displays its information based on its type and associated data.\n2. **Focus State:** When a user clicks on a block, it switches to the focus state. In this state, the block is wrapped with a wrapper that provides options for deleting the block and reordering it (moving it up or down).\n3. **Edit State:** Upon another click, the block enters the edit state, allowing the user to modify the block's information. ## Customization\n\n## Customization\n\nYou can customize various aspects of the rich text editor:\n\n- **Colors:**\n\n  - `primaryColor`: Used in both focus and view states.\n  - `secondaryColor`: Specifically used in the edit state.\n  - `textColor`: Defines the text color within the editor.\n  - `bgColor`: Specifies the background color of the editor.\n\n- **Fonts:**\n\n  - `headerFont`: Set the font for header elements (e.g., h1, h2, h3, h4).\n  - `bodyFont`: Define the font for general text elements (e.g., p, span, label, li, a).\n\n- **Font Sizes and Line Heights:**\n\n  - Customize font sizes using `h1`, `h2`, `h3`, `h4`, `body`, `small`.\n  - Set line heights for various text elements using `lh1`, `lh2`, `lh3`, `lh4`, and `lbody`.\n\n- **Custom Code Themes:** Uses themes from `prism.js` for code blocks and highlights.\n\n- **Initial Data:** You can prepopulate the editor with initial data by passing an array of `dataBlock` to the `initialData` prop.\n\n- **Custom Code Block Languages:** Define the list of languages users can use for code blocks with the `codeBlockLanguages` prop. By default, it includes JavaScript, Java, C, CSS, TypeScript, Python, and C#.\n\n- **Custom spacing:** By default **valiant** separate blocks with 10px gap and have **margin-block** set to 30px you can change that using **blocksGap** and **marginBlock** props .\n\n- **Custom Components:** You can replace the default view components for various block types with your custom components. For example:\n  - `customImage` for image blocks\n  - `customCode` for code blocks\n  - `customList` for list blocks\n  - `customHeader` for header blocks\n  - `customParagraph` for paragraph blocks\n  - `customQuote` for quote blocks\n\n```ts\nexport let customImage: ComponentType<\n\tSvelteComponent<{ base64: string; name: string; caption: string }>\n> = ViewImage;\n\nexport let customCode: ComponentType<SvelteComponent<{ text: string; lang: languages }>> = ViewCode;\n\nexport let customList: ComponentType<\n\tSvelteComponent<{ items: string[]; type: 'ordered' | 'unordered' }>\n> = ViewList;\n\nexport let customHeader: ComponentType<SvelteComponent<{ text: string; level: 1 | 2 | 3 | 4 }>> =\n\tViewHeader;\n\nexport let customParagraph: ComponentType<SvelteComponent<{ text: string }>> = ViewParagraph;\n\nexport let customQuote: ComponentType<SvelteComponent<{ text: string; owner: string }>> = ViewQuote;\n```\n\n## View Mode\n\nThe Valiant Rich Text editor includes a `viewMode` prop, which, when set to `true`, allows you to use the editor in a read-only mode. In this mode, you can display existing content without enabling editing.\n\n```svelte\n<script>\n  import { ValiantRichText } from '@valiantlynx/svelte-rich-text';\n</script>\n\n<ValiantRichText viewMode={true} />\n```\n\n## The getData Function\n\nThe package provides a function to retrieve the `dataBlock` at any given moment. Here is an example:\n\n```ts\n<script>\n  import { ValiantRichText, getData } from '@valiantlynx/svelte-rich-text';\n</script>\n\n<ValiantRichText viewMode={true} />\n<Button on:click={()=>{\n  const data = getData(); // returns dataBlock[] type\n  saveData(data);\n}}>Save</Button>\n```\n\n## Svelte Highlight\n\nThe package uses `prism.js` for code highlighting. To use it, you need to import the `prism.css` file in your application. You can do this by adding the following line to your `index.html` file:\n\n```html\n<svelte:head>\n    <!-- Include Prism.js and its CSS theme for syntax highlighting -->\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/prism.min.js\"></script>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/themes/prism-okaidia.min.css\" />\n</svelte:head>\n```\n\n## Props\n\nHere are all ValiantRichText props and their default values:\n\n```ts\nexport let initialData: dataBlock[] = [];\n\nexport let viewMode = false;\n\nexport let blocksGap = 10;\n\nexport let marginBlock = 30;\n\nexport let headerFont = `Verdana, sans-serif`;\n\nexport let bodyFont = `Helvetica, sans-serif`;\n\nexport let primaryColor = '#3366FF';\n\nexport let secondaryColor = '#1eeb36';\n\nexport let textColor = '#121212';\n\nexport let bgColor = '#ffffff';\n\nexport let h1 = 'clamp(1.8rem, calc(1.8rem + ((1vw - 0.48rem) * 0.9722)), 2.1rem)';\n\nexport let h2 = 'clamp(1.5rem, calc(1.5rem + ((1vw - 0.48rem) * 0.9722)), 1.8rem)';\n\nexport let h3 = 'clamp(1.2rem, calc(1.2rem + ((1vw - 0.48rem) * 0.9722)), 1.5rem)';\n\nexport let h4 = 'clamp(1.125rem, calc(1.15rem + ((1vw - 0.48rem) * 0.3472)), 1.2rem)';\n\nexport let body = 'clamp(1rem, calc(1rem + ((1vw - 0.48rem) * 0.1736)), 1.125rem)';\n\nexport let small = 'clamp(0.875rem, calc(0.875rem + ((1vw - 0.48rem) * 0.1736)), 1rem)';\n\nexport let lh1 = '1.3';\n\nexport let lh2 = '1.35';\n\nexport let lh3 = '1.4';\n\nexport let lh4 = '1.5';\n\nexport let lbody = '1.6';\n\nexport let codeTheme: string = nightOwl;\n\nexport let customImage: ComponentType<\n\tSvelteComponent<{ base64: string; name: string; caption: string }>\n> = ViewImage;\n\nexport let customCode: ComponentType<SvelteComponent<{ text: string; lang: languages }>> = ViewCode;\n\nexport let customList: ComponentType<\n\tSvelteComponent<{ items: string[]; type: 'ordered' | 'unordered' }>\n> = ViewList;\n\nexport let customHeader: ComponentType<SvelteComponent<{ text: string; level: 1 | 2 | 3 | 4 }>> =\n\tViewHeader;\n\nexport let customParagraph: ComponentType<SvelteComponent<{ text: string }>> = ViewParagraph;\n\nexport let customQuote: ComponentType<SvelteComponent<{ text: string; owner: string }>> = ViewQuote;\n\n\t\texport let codeBlockLanguages: languages[] = [\n    'actionscript',\n    'angular', // For Angular templates\n    'assembly',\n    'bash',\n    'c',\n    'clojure',\n    'cobol',\n    'cpp', // C++\n    'csharp', // C#\n    'css',\n    'dart',\n    'dockerfile',\n    'elixir',\n    'elm',\n    'erlang',\n    'fortran',\n    'fsharp', // F#\n    'graphql',\n    'groovy',\n    'haskell',\n    'html',\n    'java',\n    'javascript',\n    'json',\n    'julia',\n    'kotlin',\n    'less',\n    'lua',\n    'markdown',\n    'matlab',\n    'nim',\n    'nodejs',\n    'objective-c',\n    'ocaml',\n    'pascal',\n    'perl',\n    'php',\n    'plaintext',\n    'powershell',\n    'python',\n    'r',\n    'react', // JSX\n    'reason', // ReasonML\n    'ruby',\n    'rust',\n    'sass',\n    'scala',\n    'scheme',\n    'shell', // General shell scripting\n    'sql',\n    'stylus',\n    'svelte',\n    'swift',\n    'toml',\n    'typescript',\n    'vbnet', // Visual Basic .NET\n    'vue',\n    'wasm', // WebAssembly\n    'xml',\n    'yaml'\n];\n\n```\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 366],
		[3603, 21],
		[3610, 5],
		[3617, 143],
		[3624, 48],
		[3631, 22],
		[3638, 9],
		[3645, 773],
		[3652, 111],
		[3659, 83],
		[3666, 106],
		[3673, 51],
		[3680, 32],
		[3687, 38],
		[3694, 35],
		[3701, 61],
		[3708, 242],
		[3715, 132],
		[3722, 18],
		[3729, 21],
		[3736, 14],
		[3743, 40],
		[3750, 320],
		[3757, 42],
		[3764, 29],
		[3771, 82],
		[3778, 35],
		[3785, 126],
		[3792, 22],
		[3799, 10],
		[3806, 21],
		[3813, 12],
		[3820, 11],
		[3827, 11],
		[3834, 143],
		[3841, 79],
		[3848, 61],
		[3855, 13],
		[3862, 110],
		[3869, 224],
		[3876, 79],
		[3883, 119],
		[3890, 66],
		[3897, 17],
		[3904, 38],
		[3911, 35],
		[3918, 13],
		[3925, 30],
		[3932, 20],
		[3939, 18],
		[3946, 23],
		[3953, 11],
		[3960, 10],
		[3967, 10],
		[3974, 7],
		[3981, 10],
		[3988, 8],
		[3995, 10],
		[4002, 20],
		[4009, 25],
		[4016, 27],
		[4023, 8],
		[4030, 37],
		[4037, 30],
		[4044, 34],
		[4051, 16],
		[4058, 51],
		[4065, 6],
		[4072, 5],
		[4079, 4],
		[4086, 9],
		[4093, 27],
		[4100, 48],
		[4107, 10],
		[4114, 99],
		[4121, 86],
		[4128, 33],
		[4135, 17]
	],
	"esm": true,
	"cjs": false
}
