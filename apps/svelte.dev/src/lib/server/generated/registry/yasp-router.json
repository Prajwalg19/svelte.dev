{
	"name": "yasp-router",
	"description": "Implement routing for Svelte applications.",
	"repo_url": "",
	"authors": ["dievardump"],
	"homepage": "https://github.com/dievardump/yasp-router",
	"downloads": 22,
	"updated": "2020-08-23T15:51:24.067Z",
	"tags": ["router"],
	"typescript": false,
	"version": "1.1.2",
	"svelte_range": "3.x",
	"last_rune_check_version": "1.1.2",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "yasp-router",
				"version": "1.1.2",
				"size": 135594
			},
			{
				"name": "path-to-regexp",
				"version": "6.3.0",
				"size": 112042
			},
			{
				"name": "query-string",
				"version": "6.14.1",
				"size": 37300
			},
			{
				"name": "filter-obj",
				"version": "1.1.0"
			},
			{
				"name": "split-on-first",
				"version": "1.1.0",
				"size": 3820
			},
			{
				"name": "strict-uri-encode",
				"version": "2.0.0"
			},
			{
				"name": "decode-uri-component",
				"version": "0.2.2",
				"size": 6093
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2],
			[2, 3],
			[2, 4],
			[2, 5],
			[2, 6]
		],
		"circular": []
	},
	"readme": "# Yet Another Svelte Package: Router\n\nRouter for Svelte 3\n\n## Features\n\n- Nesting\n- All matching routes render (and not only the first match)\n- Routes using URI or Hash\n- Grouped routes with fallback\n- Dynamically imported component (using a function that importss)\n- Default Router so you don't need a top-level Router\n- Several Routers can be used at the same time\n- Auto detection of basename and if path starts with a #\n- Seemlessly forces hashtag use in env without location.origin\n- Uses [path-to-regexp](https://www.npmjs.com/package/path-to-regexp) for path matching, building and parameters matching\n- Decodes location query string with [query-string](https://www.npmjs.com/package/query-string)\n\n## Installing\n\n> npm install --save-dev yasp-router\n\n## Very quick example\n\nView live there : https://svelte.dev/repl/59f64208d7584e918749ddc4c6094af6?version=3.20.1\n\n```html\n<script>\n  import {Router, Route, Link} from 'yasp-router';\n\n  async function loadAbout() {\n    return (await import('./pages/About.Svelte')).default;\n  }\n</script>\n\n<style>\n  main,\n  .content {\n    margin-top: 30px;\n  }\n</style>\n\n<Link to=\"/\">Home</Link>\n<!-- link to route by its name -->\n<Link route=\"landing\">Landing Page</Link>\n<Link route=\"about\">About</Link>\n<main>\n  <!-- exact=true else \"/\" matches all routes -->\n  <Route path=\"/\" exact={true}>Home Content</Route>\n  <!--named route, link can point to it using route=\"landing\" -->\n  <Route path=\"/landing\" is=\"landing\" let:match>\n    Landing Page\n    <!-- just for info so you know what match contains -->\n    <pre>match: {JSON.stringify(match)}</pre>\n    <Link to=\"/landing/post-1\">Post 1</Link>\n    <Link to=\"/landing/post-2\">Post 2</Link>\n    <Route path=\"/landing/:slug\" let:match>\n      <div class=\"content\">\n        Content with slug \"{match.params.slug}\"\n        <!-- just for info so you know what match contains -->\n        <pre>match: {JSON.stringify(match)}</pre>\n      </div>\n    </Route>\n  </Route>\n  <!--named route, link can point to it using route=\"about\" -->\n  <Route path=\"/about\" is=\"about\" dynamicComponent={loadAbout}>Loading...</Route>\n</main>\n\n```\n\n## Components & methods\n\nThis package provides 3 Components, 4 methods and one store to use\n\nComponents :\n\n- Link\n- Route\n- Router\n\nMethods:\n\n- configure\n- goto\n- gotoPath\n- gotoRoute\n\nStore:\n\n- router\n\n### `<Link ({to:string} or {route:string} or {action:string}) {params?:object} {navigateOptions?:object}>`\n\n> Either {to}, {route} or {action} must be defined. At least one of them and ONLY one of them.\n\nWhen a link is active, it will have two html properties (`aria-current=\"page\"` and `data-active=\"active\"`) that you can use to target this element for styling\n\n#### Parameters\n\n| Parameter         | Optional | Description                                                                                  | Default |\n| ----------------- | -------- | -------------------------------------------------------------------------------------------- | ------- |\n| `to`              |          | Path the link navigates to. (only if `route` is not defined)                                 |         |\n| `route`           |          | Name of the route it navigates to. (only if `to` is not defined)                             |         |\n| `action`          |          | Action to perform when the Link is clicked: `forward`, `back`, or `go` using params.go value |         |\n| `params`          | optional | Parameters used to build the the path.                                                       | `false` |\n| `navigateOptions` | optional | Options to use when changing location. See method `goTo` to see the options.                 | `false` |\n\n> Any prop given to Link not part of the parameters listed here will be added to the anchor using `{...props}`.\n\n#### How `{params}` is used\n\nLink's path are build using `path-to-regexp` and therefore supports parameters.\n\n```html\n<Link path=\"/blog/:slug\" params={{slug: 'post-1' }}>\n```\n\nwill construct a link to `/blog/post-1`\n\n### `<Route {path:string} {component?:Component} {exact?:boolean} {is?:string} {group?:string} {order?:number} {fallback?:boolean}>`\n\n### Parameters\n\n| Parameter          | Optional | Description                                                                   | Default |\n| ------------------ | -------- | ----------------------------------------------------------------------------- | ------- |\n| `path`             |          | the path for this Route to match                                              |         |\n| `component`        | optional | The component to render if the Route matches.                                 |         |\n| `dynamicComponent` | optional | A function that will dynamically load the component (returns a promise)       |         |\n| `exact`            | optional | if the path must be exactly matched                                           | `false` |\n| `is`               | optional | name of the route that you can use to target this route path with `Link`      |         |\n| `group`            | optional | Name of the group this route is in.                                           |         |\n| `order`            | optional | Only if in a group. Order of the Route in its group. Used to sort the routes. |         |\n| `fallback`         | optional | Only if in a group. Declare this route as group fallback if none matches in.  | `false` |\n\n> Any prop given to Route not part of the parameters listed here will be added to to the `component` using `{...props}` (or to the slot using `{props}` and accessible with `let:props`).\n\n> if several route in the same group are set as fallback, the first one met according to order will be rendered\n\n#### Properties\n\nAdded to the remaining properties, Route will pass two objects: `routeInfos` and `match`\n\n- `routeInfos` contains some of the property of this route that the component might wish to use.\n  - `path`\n  - `is`\n  - `exact`\n  - `group` if in a group\n  - `fallback` if in a group\n- `match` contains information about the current matching state.\n  - `is_matching` if the route is matching or not. It can actually be `false`, if this route is shown because of fallback\n  - `is_exact` if the match is exact\n  - `path` the actual part of the path that was matched for this route to render\n  - `params` if the match contains parameters\n  - `location` window.location that triggered the match\n  - `is_fallback` only if a grouped route, will be true if this route is shown only as fallback route\n\n#### examples\n\n```html\n<Route path=\"/blog/:slug\" component=\"{Blog}\" {blogInfos} />\n```\n\nWith the URL `/blog/post-1` is equivalent to :\n\n```\n<Blog\n  routeInfos={{\n    path: '/blog/:slug',\n    exact: false,\n    is: null\n  }}\n\n  match={{\n      is_matching:true,\n      is_exact: true,\n      path: '/blog/post-1',\n      params: { slug: 'post-1' },\n      location: { pathname: '/blog/post-1', hash: '#', query: '' },\n  }}\n\n  {blogInfos} />\n```\n\n### `<Router {basename?:string}>`\n\nDeclares a `Router` context. Most of the time you won't have to use it, as Routes and Groups will be added to a default Router if none is declared.\n\nYou will use it if you need to have Routers with differents `basename`\n\n#### Parameters\n\n| Parameter  | Optional | Description                                                                                  | Default |\n| ---------- | -------- | -------------------------------------------------------------------------------------------- | ------- |\n| `basename` | optional | When Link and Routes are added to a router, their path will be prefixed with its `basename`. |         |\n\n> If `basename` is not set, the Router will guess the basename using the `<base>` html tag, or if not here, `location.pathname` at the first page load\n\n### `configure(options:object)`\n\nAllow you to set default values for all routers.\n\n- `options`\n  - `forceHash` (default: false) - force links' and routes' paths to start with a `#` (add it automatically at the start of paths if not present)\n  - `basename` - force the default basename used when creating a Router without `basename` property.\n\n### `goto(href:string, options?:object)`\n\nNavigates to the given href and triggers the Routes matching process.\n\n- `options`\n  - `reload` if true uses `location.href` to set the new location\n  - `replaceState` if true uses `history.replaceState` to change location\n  - `scrollToTop` if true, calls `window.scrollTo(0, 0)` when changing location\n\n### `gotoPath(path:string, params?:object, options?:object)`\n\nConstruct a new href using path and params, then calls `goto(href, options)`.\n\n### `gotoRoute(name:string, params?:object, options?:object)`\n\nLook if there is a `Route` with the given name, and if yes calls `gotoPath(route.path, params, options)`\nIf no route with this name exists, throws an `Error`\n\n## Store\n\n### `router`\n\n`router` is a readable store that is updated every time the `pathname`, `hash` or `search` changes because of the router (click on a `Link`, use of a `goto` method, ...)\n\n## Other examples Shipped with this package\n\nThe directory `examples` contains examples of different usage of this package. To list some :\n\n- Simple Routing (URI or Hash)\n- Route Nesting\n- Routes with parameters\n- Named routes\n- ...\n\nThe best way to test those is to clone this repository and launch the examples directory's server that's in it\n\n```\ngit clone git@gitlab.com:dievardump/yasp-router.git\ncd yasp-router/examples\nnpm install\nnpm run dev\n```\n\nThis should create a local server accessible to http://localhost:3333 (if you kept the default port)\n\n## Author\n\nSimon Fremaux / dievardump (dievardump@gmail.com)\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 2],
		[3603, 2],
		[3610, 19],
		[3638, 18],
		[3645, 17],
		[3659, 3],
		[3666, 18],
		[3673, 3],
		[3680, 4],
		[3687, 4],
		[3701, 2],
		[3708, 1],
		[3715, 1],
		[3722, 1],
		[3736, 1],
		[3743, 1],
		[3750, 3],
		[3757, 15],
		[3764, 12],
		[3771, 9],
		[3778, 1],
		[3785, 1],
		[3792, 2],
		[3799, 2],
		[3806, 5],
		[3813, 2],
		[3820, 4],
		[3834, 2],
		[3841, 2],
		[3848, 1],
		[3855, 13],
		[3862, 81],
		[3869, 1],
		[3876, 1],
		[3883, 3],
		[3890, 34],
		[3897, 2],
		[3904, 4],
		[3911, 4],
		[3925, 1],
		[3932, 1],
		[3939, 5],
		[3953, 4],
		[3960, 4],
		[3967, 1],
		[3974, 1],
		[3981, 1],
		[3988, 1],
		[3995, 2],
		[4009, 14],
		[4016, 3],
		[4023, 13],
		[4030, 28],
		[4037, 20],
		[4044, 10],
		[4051, 2],
		[4058, 1],
		[4065, 2],
		[4072, 1],
		[4093, 8],
		[4100, 20],
		[4107, 4],
		[4114, 22],
		[4121, 67],
		[4128, 8],
		[4135, 14]
	],
	"esm": true,
	"cjs": false
}
