{
	"name": "sveltejs-forms",
	"description": "Build declarative forms with validation for Svelte.",
	"repo_url": "https://github.com/mdauner/sveltejs-forms",
	"authors": ["mdauner"],
	"homepage": "https://mdauner.github.io/sveltejs-forms/",
	"downloads": 1128,
	"updated": "2020-09-05T16:46:05.508Z",
	"tags": ["ui"],
	"github_stars": 197,
	"typescript": false,
	"version": "2.1.2",
	"svelte_range": "~3.20.0",
	"last_rune_check_version": "2.1.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "sveltejs-forms",
				"version": "2.1.2",
				"size": 327970
			},
			{
				"name": "lodash-es",
				"version": "4.17.21",
				"size": 636080
			},
			{
				"name": "svelte-writable-derived",
				"version": "2.0.1",
				"size": 15451
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2]
		],
		"circular": []
	},
	"readme": "# sveltejs-forms\n\n![npm](https://img.shields.io/npm/v/sveltejs-forms)\n![npm bundle size](https://img.shields.io/bundlephobia/minzip/sveltejs-forms)\n![npm](https://img.shields.io/npm/dm/sveltejs-forms)\n\n![GitHub](https://img.shields.io/github/license/mdauner/sveltejs-forms)\n![Actions Status](https://github.com/mdauner/sveltejs-forms/workflows/CI/badge.svg)\n[![codecov](https://codecov.io/gh/mdauner/sveltejs-forms/branch/master/graph/badge.svg)](https://codecov.io/gh/mdauner/sveltejs-forms)\n\nDeclarative forms for [Svelte](https://svelte.dev/).\n\n[DEMO](https://svelte.dev/repl/8e7deaa261364b4f8b2c0caff1982eeb?version=3.23.0)\n\n## Features\n\n- optional schema-based validation through [Yup](https://github.com/jquense/yup)\n- access to nested properties using paths\n- supports custom components\n- provides `Input`, `Select`, `Choice` components to reduce boilerplate\n\n## Install\n\n```shell\n$ npm i sveltejs-forms\n```\n\nor\n\n```shell\n$ yarn add sveltejs-forms\n```\n\n## How to use\n\n### With provided `Input`, `Select`, `Choice` helper components\n\n```html\n<script>\n  import { Form, Input, Select, Choice } from 'sveltejs-forms';\n  import yup from 'yup@0.27';\n\n  function handleSubmit({ detail: { values, setSubmitting, resetForm } }) {\n    setTimeout(() => {\n      console.log(values);\n      setSubmitting(false);\n      resetForm({\n        user: { email: 'test@user.com' }, // optional\n      });\n    }, 2000);\n\n    /**\n     * {\n     *   user: {\n     *    email: 'email@example.com'\n     *   },\n     *   password: '123456',\n     *   language: 'svelte',\n     *   os: 'osx,linux'\n     * }\n     */\n  }\n\n  function handleReset() {\n    console.log('form has been reset');\n  }\n\n  const schema = yup.object().shape({\n    user: yup.object().shape({\n      email: yup\n        .string()\n        .required()\n        .email(),\n    }),\n    password: yup.string().min(4),\n    language: yup.string().required(),\n    os: yup.string(),\n  });\n\n  const langOptions = [\n    { id: 'svelte', title: 'Svelte' },\n    { id: 'react', title: 'React' },\n    { id: 'angular', title: 'Angular' },\n  ];\n\n  const osOptions = [\n    { id: 'macos', title: 'macOS' },\n    { id: 'linux', title: 'Linux üêß' },\n    { id: 'windows', title: 'Windows' },\n  ];\n\n  const initialValues = {\n    language: 'svelte',\n  };\n</script>\n\n<style>\n  :global(.sveltejs-forms) {\n    background-color: #f8f8f8;\n    display: inline-block;\n    padding: 1rem;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n  }\n\n  :global(label) {\n    font-size: 0.8rem;\n    color: #888;\n    margin-bottom: 0.2rem;\n  }\n\n  :global(.message) {\n    font-size: 0.8rem;\n    color: #888;\n    margin: 0.2rem 0;\n    color: #f56565;\n  }\n\n  :global(input[type='text']),\n  :global(textarea),\n  :global(select) {\n    width: 100%;\n    background-color: white;\n    margin: 0;\n  }\n\n  :global(input[type='checkbox'] + label) {\n    display: inline-block;\n    margin-right: 2rem;\n  }\n\n  :global(.field) {\n    margin-bottom: 1rem;\n  }\n\t\n  button {\n    border-radius: 5px;\n    padding: 0.5rem 1rem;\n    margin-right: 1rem;\n    color: white;\n  }\n\n  button[type='reset'] {\n    background-color: #f56565;\n  }\n\n  button[type='submit'] {\n    background-color: #48bb78;\n    width: 80px;\n  }\n</style>\n\n<Form\n  {schema}  <!-- optional -->\n  {initialValues} <!-- optional -->\n  validateOnBlur={false} <!-- optional, default: true -->\n  validateOnChange={false} <!-- optional, default: true -->\n  on:submit={handleSubmit}\n  on:reset={handleReset}\n  let:isSubmitting\n  let:isValid\n>\n  <Input\n    name=\"user.email\" <!-- nested field -->\n    label=\"Email Address\"\n    value=\"test@user.com\" <!-- initial value -->\n    placeholder=\"e.g. user@example.com\" />\n  <Input name=\"password\" type=\"password\" placeholder=\"Password\" />\n  <Select name=\"language\" options={langOptions} />\n  <Choice\n    name=\"os\"\n    options={osOptions}\n    disabled\n    multiple />\n  <button type=\"reset\">Reset</button>\n  <button type=\"submit\" disabled={isSubmitting}>Sign in</button>\n  <div>The form is valid: {isValid}</div>\n</Form>\n```\n\n### With custom component:\n\n```html\n<script>\n  import { Form } from 'sveltejs-forms';\n  import Select from 'svelte-select';\n  import yup from 'yup@0.27';\n\n  let svelteSelect;\n\n  function handleSubmit({ detail: { values, setSubmitting, resetForm } }) {\n    setTimeout(() => {\n      console.log(values);\n      setSubmitting(false);\n      svelteSelect.handleClear();\n      resetForm();\n    }, 2000);\n  }\n\n  const schema = yup.object().shape({\n    food: yup.string().required()\n  });\n\n  let items = [\n    { value: 'chocolate', label: 'Chocolate' },\n    { value: 'pizza', label: 'Pizza' },\n    { value: 'cake', label: 'Cake' },\n    { value: 'chips', label: 'Chips' },\n    { value: 'ice-cream', label: 'Ice Cream' },\n  ];\n</script>\n\n<Form\n  {schema}\n  on:submit={handleSubmit}\n  let:isSubmitting\n  let:setValue\n  let:values\n  let:errors\n  let:touched>\n\n  <Select\n    {items}\n    bind:this={svelteSelect}\n    inputAttributes=\"{{ name: 'food' }}\"\n    hasError=\"{touched['food'] && errors['food']}\"\n    on:select=\"{({ detail }) => setValue('food', detail.value)}\"\n    on:clear=\"{() => setValue('food', '')}\"\n    selectedValue=\"{items.find(item => item.value === values['food'])}\"/>\n\n  <button type=\"submit\" disabled={isSubmitting}>Submit</button>\n</Form>\n```\n\n## Slot props\n\n| Name | Type |\n|------|------|\n| isSubmitting | `boolean`\n| isValid | `boolean`\n| setValue(path, value) | `function`\n| touchField(path) | `function`\n| validate() | `function`\n| values |  `object`\n| errors |  `object`\n| touched |  `object`\n\n## Contributions\n\n**All contributions are welcome.**\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 140],
		[3603, 236],
		[3610, 158],
		[3617, 106],
		[3624, 180],
		[3631, 136],
		[3638, 110],
		[3645, 180],
		[3652, 225],
		[3659, 126],
		[3666, 277],
		[3673, 290],
		[3680, 215],
		[3687, 235],
		[3694, 288],
		[3701, 152],
		[3708, 244],
		[3715, 589],
		[3722, 312],
		[3729, 557],
		[3736, 326],
		[3743, 463],
		[3750, 325],
		[3757, 476],
		[3764, 651],
		[3771, 536],
		[3778, 909],
		[3785, 992],
		[3792, 781],
		[3799, 692],
		[3806, 438],
		[3813, 391],
		[3820, 633],
		[3827, 1017],
		[3834, 650],
		[3841, 1186],
		[3848, 971],
		[3855, 1399],
		[3862, 1565],
		[3869, 2215],
		[3876, 909],
		[3883, 1566],
		[3890, 1150],
		[3897, 1004],
		[3904, 1094],
		[3911, 758],
		[3918, 1102],
		[3925, 1017],
		[3932, 1135],
		[3939, 1043],
		[3946, 1338],
		[3953, 1052],
		[3960, 1432],
		[3967, 1506],
		[3974, 1597],
		[3981, 1899],
		[3988, 1359],
		[3995, 1553],
		[4002, 1338],
		[4009, 722],
		[4016, 1295],
		[4023, 1682],
		[4030, 1522],
		[4037, 461],
		[4044, 542],
		[4051, 609],
		[4058, 466],
		[4065, 470],
		[4072, 950],
		[4079, 1007],
		[4086, 480],
		[4093, 775],
		[4100, 1613],
		[4107, 1250],
		[4114, 1128],
		[4121, 1457],
		[4128, 1320],
		[4135, 922]
	],
	"esm": true,
	"cjs": false
}
