{
	"name": "formulatte",
	"description": "Manage forms with type safety and Yup validation in Svelte 5.",
	"repo_url": "",
	"authors": ["nathabonfim59"],
	"downloads": 7,
	"updated": "2025-03-24T05:00:14.442Z",
	"tags": ["miscellaneous"],
	"typescript": true,
	"version": "0.0.1",
	"svelte_range": "^5.0.0",
	"kit_range": "^2.16.0",
	"last_rune_check_version": "0.0.1",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "formulatte",
				"version": "0.0.1",
				"size": 5639
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Formulatte ‚òï\n\n![Formulatte Banner](design/banner.png)\n\nA modern, type-safe form management library for Svelte 5+.\n\n[![npm version](https://badge.fury.io/js/formulatte.svg)](https://badge.fury.io/js/formulatte)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n## Features\n\n- üéØ Built specifically for Svelte 5's runes\n- üí™ Full TypeScript support\n- üîÑ Built-in Yup validation\n- ‚ö° Lightweight and performant\n- üé® Zero styling opinions\n- üì¶ Simple API\n- üîç Detailed validation states\n- üõ†Ô∏è Flexible field handling\n\n## Installation\n\n```bash\nnpm install formulatte\n# or\npnpm add formulatte\n# or\nbun add formulatte\n```\n\n## Quick Start\n\n```svelte\n<script lang=\"ts\">\n  import { Form } from 'formulatte';\n  import * as yup from 'yup';\n\n  const schema = yup.object({\n    email: yup.string().email().required(),\n    password: yup.string().min(6).required()\n  });\n\n  const initialValues = {\n    email: '',\n    password: ''\n  };\n\n  async function handleSubmit(values) {\n    console.log('Form submitted:', values);\n  }\n</script>\n\n<Form {initialValues} validationSchema={schema} onSubmit={handleSubmit}>\n  {#snippet default(form)}\n    <div>\n      <input \n        bind:value={form.state.values.email}\n        onblur={() => form.validate('email')}\n      />\n      {#if form.state.errors.email}\n        <span class=\"error\">{form.state.errors.email}</span>\n      {/if}\n    </div>\n\n    <button type=\"submit\" disabled={!form.state.isValid}>\n      Submit\n    </button>\n  {/snippet}\n</Form>\n```\n\n## API Reference\n\n### Form Component\n\nThe main component that manages form state and validation.\n\n```typescript\ninterface FormProps<T> {\n  initialValues: T;\n  validationSchema?: Schema;\n  onSubmit: (values: T) => Promise<void> | void;\n  validateOnBlur?: boolean;\n  validateOnChange?: boolean;\n}\n```\n\n### Form State\n\nAvailable through the form snippet parameter:\n\n```typescript\ninterface FormState<T> {\n  values: T;\n  errors: Partial<Record<keyof T, string>>;\n  touched: Partial<Record<keyof T, boolean>>;\n  isSubmitting: boolean;\n  isValid: boolean;\n  isDirty: boolean;\n}\n```\n\n### Form Methods\n\n- `validate(field?: string)`: Validate entire form or specific field\n- `submit()`: Submit the form\n- `reset()`: Reset form to initial values\n- `setFieldValue(field, value)`: Set field value\n- `setFieldTouched(field, touched)`: Mark field as touched\n\n## Examples\n\n### With Field Validation\n\n```svelte\n<Form {initialValues} validationSchema={schema}>\n  {#snippet default(form)}\n    <input\n      bind:value={form.state.values.email}\n      onblur={() => form.validate('email')}\n      class:error={form.state.errors.email && form.state.touched.email}\n    />\n  {/snippet}\n</Form>\n```\n\n### With Custom Validation\n\n```svelte\n<Form\n  initialValues={initialValues}\n  onSubmit={async (values) => {\n    const isValid = await customValidation(values);\n    if (isValid) {\n      // proceed\n    }\n  }}\n>\n  {#snippet default(form)}\n    <!-- form fields -->\n  {/snippet}\n</Form>\n```\n\n## Contributing\n\nWe welcome contributions! Please see our [contributing guidelines](CONTRIBUTING.md) for details.\n\n1. Fork it\n2. Create your feature branch (`git checkout -b feature/amazing`)\n3. Commit your changes (`git commit -am 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing`)\n5. Create a new Pull Request\n\n## Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Run development server\nnpm run dev\n\n# Run tests\nnpm test\n\n# Build library\nnpm run package\n```\n\n## License\n\nMIT ¬© [Nathanael Bonfim]\n\nSee [LICENSE](LICENSE) for more information.\n\n## Acknowledgments\n\n- Inspired by Formik's API\n- Built with Svelte 5's runes\n- Created using [`sv`](https://npmjs.com/package/sv)\n\n---\n\nMade with lots of ‚òï \n",
	"legacy_svelte": false,
	"downloads_history": [
		[4100, 58],
		[4107, 1],
		[4114, 7],
		[4121, 6],
		[4128, 4]
	]
}
