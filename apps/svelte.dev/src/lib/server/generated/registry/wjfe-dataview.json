{
	"name": "@wjfe/dataview",
	"description": "Svelte v5 table component for examining tabular data.",
	"repo_url": "https://github.com/WJSoftware/wjfe-dataview",
	"authors": ["webjose"],
	"homepage": "https://wjsoftware.github.io/wjfe-dataview/",
	"downloads": 14,
	"updated": "2025-01-12T17:04:00.549Z",
	"tags": ["ui"],
	"github_stars": 15,
	"typescript": true,
	"version": "0.13.0",
	"svelte_range": "^5.0.0",
	"kit_range": "^2.9.1",
	"last_rune_check_version": "0.13.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@wjfe/dataview",
				"version": "0.13.0",
				"size": 105637
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# @wjfe/dataview\r\n\r\n> Svelte v5 table component suitable for examination of extensive tabular data.\r\n\r\n## Overview\r\n\r\nThe data view component renders a table with functionality suitable for close examination of the presented data.  It \r\nprovides conveniences like pinnable columns and row highlighting on hover, useful to users when following data with \r\ntheir eyes.\r\n\r\n> **[Demo Website](https://wjsoftware.github.io/wjfe-dataview)**\r\n\r\nThe component tries to be as unopinionated as possible in terms of styling and tries to provide as little styling as \r\npossible.  Certain features, however, impose some appearance requirements.  For example, pinning columns in the grid \r\nrequires opaque background colors or else the data from other columns will be seen through the pinned columns when \r\nthe data view is scrolled horizontally.\r\n\r\nTo theme the table to your needs or otherwise make it play well with your styling framework of choice (Bootstrap, \r\nTailwind CSS, Bulma, etc.), you may style it in accordance to what is shown in the \r\n**[Theming the Data View](#theming-the-data-view)** section.\r\n\r\n## Quickstart\r\n\r\nInstall the package:\r\n\r\n```powershell\r\nnpm i @wjfe/dataview\r\n```\r\n\r\nNow import the data view component and use it:\r\n\r\n```typescript\r\nimport { WjDataView } from '@wjfe/dataview';\r\n```\r\n\r\nThe only two required properties are `columns` and `data`.  The former defines the columns in the data view; the \r\nlatter provides the data that shows in each column.  By default, the `key` property of each column is treated as the \r\nkey to retrieve data from the data row, but this can be overridden by providing `get` functions.\r\n\r\nEach column must have the `key` and the `text` properties.  Any other property is optional.\r\n\r\nEach data object (the rows) must have an `id` property of type `number` or `string`, and the `wjdv` property, which is \r\nan object that holds operational data for each row.  The `defineData()` function is a helper function that helps you \r\nfulfill these 2 requirements.  The `id` values are meant to be unique amongst the data set.\r\n\r\n> **IMPORTANT**:  Always bind `columns` and `data`.  The data view control will mutate properties inside this data, \r\n> so the best practice is to bind.\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n    import { WjDataView, defineData } from '@wjfe/dataview';\r\n    import { type MyDataModel } from 'path/to/my-model-types.js';\r\n\r\n    type MyColumn = WjDvColumn<MyDataModel>;\r\n    const columns = $state<MyColumn[]>([\r\n        {\r\n            key: 'id',\r\n            text: 'ID'\r\n        },\r\n        {\r\n            key: 'tagName',\r\n            text: 'Tag'\r\n        }\r\n    ]);\r\n    // Obtain the data somehow.  This could be part of the results of the universal or server load() SvelteKit \r\n    // function, or could be obtained in non-SvelteKit projects with a fetch() call.\r\n    const dataFromApi = getDataSomehow();\r\n    // Now ensure the data fulfills the component requirements using \"defineData\":\r\n    let data = $state(defineData<MyDataModel>(dataFromApi));\r\n    // The model type here ------^^^^^^^^^^^ may not be needed if you have properly typed the `getDataSomehow()` \r\n    // function or the `dataFromApi` variable.\r\n</script>\r\n\r\n...\r\n<WjDataView bind:columns bind:data>\r\n    <!-- snippets go here -->\r\n</WjDataView>\r\n```\r\n\r\nThis example would render the data view with two columns, whose captions will read `ID` and `Tag`.  The data shown in \r\neach column will be extracted from the `MyDataModel.id` and `MyDataModel.tagName` properties of each of the data \r\nobjects in the `data` array.\r\n\r\n> The `defineData()` function mutates the data for performance reasons.  It works the items directly as opposed to \r\n> cloning them.  Also, the same array is returned for the same performance reasons.\r\n\r\n## Theming the Data View\r\n\r\nAs stated in the overview, the data view's appearance can be customized.  The component has been styled using CSS \r\nvariables with some defaults.  If you wish, you may redefine the variables at will (the variables are listed at the \r\nend of the section), but it is best to use the theme component `WjDataViewTheme` that provides a friendlier way than \r\ndirectly defining the CSS variables.\r\n\r\n### The WjDataViewTheme Component\r\n\r\nThis component is a mere convenience to setting up themes for data view components.  It works by defining the CSS \r\nvariables in a `<div>` element with its CSS `display` attribute set to `contents` that wraps the target `WjDataView` \r\ncomponent.\r\n\r\n> **TIP**:  The `WjDataViewTheme` component doesn't have to be the immediate parent of a `WjDataView`.  It can be \r\n> placed higher in the hierarchy to, for example, cover more than one `WjDataView` component.\r\n\r\nThe theme component has a single `theme` property of type `Theme`:\r\n\r\n```typescript\r\nexport type ComponentColor = {\r\n    backgroundColor?: string;\r\n    opacity?: number;\r\n    color?: string;\r\n};\r\n\r\nexport type ResizerColor = {\r\n    backgroundColor?: string;\r\n    borderColor?: string;\r\n};\r\n\r\nexport type BorderDefinition = {\r\n    width?: string;\r\n    style?: 'dashed' | 'dotted' | 'double' | 'groove' | 'inset' | 'outset' | 'ridge' | 'solid' | 'unset';\r\n    color?: string;\r\n};\r\n\r\nexport type Theme = {\r\n    table?: ComponentColor;\r\n    stripes?: ComponentColor;\r\n    rowTracking?: ComponentColor;\r\n    rowSelection?: ComponentColor;\r\n    pinnedColumnsDivider?: BorderDefinition,\r\n    resizer?: {\r\n        width?: string;\r\n        overlay?: {\r\n            opacity?: number;\r\n            item?: ResizerColor;\r\n            positiveDelta?: ResizerColor;\r\n            negativeDelta?: ResizerColor;\r\n        }\r\n    };\r\n    gridBorders?: BorderDefinition;\r\n};\r\n```\r\n\r\nWhile the amount of properties is large, each one of them are optional.  Simply set the properties that you wish to \r\ncustomize.  The properties that aren't set will take the default value documented in the table further down.\r\n\r\nFor example, Bootstrap consumers might want to ensure that the data view always uses the body's background color.  In \r\nthis case, we could create the following theme in a `dataViewThemes.ts` (potential) file:\r\n\r\n```typescript\r\nimport { type Theme } from '@wjfe/dataview';\r\n\r\nexport const bootstrapTheme: Theme = {\r\n    table: {\r\n        backgroundColor: 'var(--bs-body-bg-rgb)'\r\n    },\r\n    stripes: {\r\n        backgroundColor: 'var(--bs-emphasis-color-rgb)'\r\n    },\r\n    rowTracking: {\r\n        backgroundColor: 'var(--bs-primary-rgb)',\r\n        opacity: 0.2\r\n    },\r\n    rowSelection: {\r\n        backgroundColor: 'var(--bs-row-selection-bg-color-rgb)',\r\n    }\r\n};\r\n```\r\n\r\n> This is the actual modification set in the demonstration page.  The first three variables are provided by Bootstrap, \r\n> while the last one (`--bs-row-selection-bg-color-rgb`) is defined inside the demo project.\r\n\r\nAs seen, one can take advantage of CSS variables to define values.  Bootstrap provides light and dark modes, and these \r\nvariables have different definitions depending on the mode, making the data view's theme immediately responsive to \r\nmode selection changes.\r\n\r\nThis is not perfect, however, because Bootstrap doesn't have `-rgb` variables for every color, so not everything goes \r\nas smoothly.  Create CSS variables that adjust to the color mode to perfect the theme.  For example, the last one has \r\nbeen defined as:\r\n\r\n```scss\r\n.theme-def {\r\n    --bs-row-selection-bg-color-rgb: 221, 235, 255;\r\n    \r\n    :global([data-bs-theme=\"dark\"]) & {\r\n        --bs-row-selection-bg-color-rgb: 21, 35, 55;\r\n    }\r\n}\r\n```\r\n\r\nWith this technique, we can create fully responsive themes for the data view component.\r\n\r\n> **IMPORTANT**:  All background colors are composed using the provided color and an opacity value.  This is why the \r\n> color must be specified in RGB format, or with a CSS variable that defines it in RGB format.  Formats like `#rrggbb` \r\n> simply won't work.\r\n\r\nUse the `WjDataViewTheme` component as a wrapper for any `WjDataView` components that you may have.  This wrapper \r\ndoesn't have to be the immediate parent, so put it wherever is best according to your needs.\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n    import { bootstrapTheme } from '../dataViewThemes.js';\r\n</script>\r\n\r\n<WjDataViewTheme theme={bootstrapTheme}>\r\n    <WjDataView ...>\r\n        <!-- Snippets go here -->\r\n    </WjDataView>\r\n</WjDataViewTheme>\r\n```\r\n\r\nThe complete list of CSS variables that can be set for the data view component are:\r\n\r\n| CSS Variable | Light Default | Dark Default | Description |\r\n| - | - | - | - |\r\n| `--wjdv-bg-color-rgb` | `255, 255, 255` | `0, 0, 0` | Data view's background color. |\r\n| `--wjdv-bg-opacity` | `1` | `1` | Background's opacity. |\r\n| `--wjdv-fg-color` | `inherit` | `inherit` | Foreground (or text) color.  Usually this one doesn't need to be set. |\r\n| `--wjdv-striping-bg-color-rgb` | `0, 0, 0` | `255, 255, 255` | Striping background color.  Set the opacity as well. |\r\n| `--wjdv-striping-bg-opacity` | `0.04` | `0.07` | Striping background color's opacity. |\r\n| `--wjdv-striping-fg-color` | `inherit` | `inherit` | Foreground (or text) color for striped rows. |\r\n| `--wjdv-rowtracking-bg-color-rgb` | `0, 0, 0` | `255, 255, 255` | Background color for row tracking. |\r\n| `--wjdv-rowtracking-bg-opacity` | `0.07` | `0.15` | Opacity for row tracking.  Usually set higher than the striping one or the effect doesn't look very good. |\r\n| `--wjdv-rowtracking-fg-color` | `inherit` | `inherit` | Foreground (or text) color for tracked rows. |\r\n| `--wjdv-sticky-divider-width` | `0.1em` | `0.1em` | Width of the border that divides pinned columns from unpinned ones. |\r\n| `--wjdv-sticky-divider-style` | `solid` | `solid` | Style of the border that divides pinned columns from unpinned ones. |\r\n| `--wjdv-sticky-divider-color` | `darkgray` | `lightgray` | Color of the border that divides pinned columns from unpinned ones. |\r\n| `--wjdv-resizer-width` | `0.4em` | `0.4em` | Column resizer's width. |\r\n| `--wjdv-resizer-overlay-opacity` | `0.7` | `0.7` | Opacity of the entire resizer overlay. |\r\n| `--wjdv-resizer-overlay-bg-color` | `lightblue` | `#0578ea` | Background color of the overlay section that represents the original column's size. |\r\n| `--wjdv-resizer-overlay-border-color` | `blue` | `#13aeff` | Border color of the overlay section that represents the original column's size. |\r\n| `--wjdv-resizer-deltapos-bg-color` | `lightgreen` | `lightgreen` | Background color of the overlay section that represents the column's size increase. |\r\n| `--wjdv-resizer-deltapos-border-color` | `green` | `green` | Border color of the overlay section that represents the column's size increase. |\r\n| `--wjdv-resizer-deltaneg-bg-color` | `pink` | `pink` | Background color of the overlay section that represents the column's size reduction. |\r\n| `--wjdv-resizer-deltaneg-border-color` | `red` | `red` | Border color of the overlay section that represents the column's size reduction. |\r\n| `--wjdv-selected-bg-color-rgb` | `227, 240, 254` | `15, 25, 74` | Background color of rows that have been selected. |\r\n| `--wjdv-selected-bgopacity` | `1` | `1` | Background opacity of rows that have been selected. |\r\n| `--wjdv-selected-fg-color` | `inherit` | `inherit` | Foreground color of rows that have been selected. |\r\n| `--wjdv-grid-line-width` | `0.01em` | `0.01em` | Width of the table's border lines. |\r\n| `--wjdv-grid-line-style` | `solid` | `solid` | Style used in the table's border lines. |\r\n| `--wjdv-grid-line-color` | `currentColor` | `currentColor` | Color used in the table's border lines. |\r\n| `--wjdv-i-filler-color` | `#ddd` | `#ddd` | Color used to render the pattern in filler columns. |\r\n| `--wjdv-filler-pattern-size` | `5px` | `5px` | Size of the pattern in filler columns. |\r\n\r\n### Styling the Header Row\r\n\r\nThe header row, as row, cannot be styled.  What can be styled is the individual header cells.  This is due to the \r\nnature of the structure around the pinnable columns feature.\r\n\r\nThe most common thing to do here is to add some background coloring to the header cells, so they appear different to the \r\ndata cells.  This in itself is complicated because pinned cells must be guaranteed a fully opaque background color or \r\nelse the non-pinned columns will be seen through them when scrolling horizontally.\r\n\r\nBut when there's will there's a way:  I learned from the Bootstrap team that one can simulate a background color using \r\n`box-shadow` (this technique is revealed in Intellisense on the `headerClass` property of the component):\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n    import { bootstrapTheme } from '../dataViewThemes.js';\r\n</script>\r\n\r\n<WjDataViewTheme theme={bootstrapTheme} headerClass=\"header-background\">\r\n    <WjDataView ...>\r\n        <!-- Snippets go here -->\r\n    </WjDataView>\r\n</WjDataViewTheme>\r\n\r\n<style>\r\n    :global(.header-background) {\r\n        box-shadow: 0 9999px 9999px rgba(0, 0, 0, 0.07) inset;\r\n    }\r\n</style>\r\n```\r\n\r\nThis will shade the header cells darker.  On a white background, this will make the cells look gray; on a black \r\nbackground the color selection must be a light one (not black as in the example) so the cells are shaded lighter and \r\ncan stand out.\r\n\r\nIf you **must** set `background-color`, you'll have to fight the component using `!important`:\r\n\r\n```svelte\r\n<style>\r\n    :global(.header-background) {\r\n        background-color: #ddd !important;\r\n    }\r\n</style>\r\n```\r\n\r\nRemember:  If you set the background color, it must be opaque so pinned columns work as expected.\r\n\r\n## Cross Column Synchronization\r\n\r\n> Since **v0.13.0**\r\n\r\nIt is possible to synchronize any property of a column with the same property in the column object of another dataview \r\ninstance, up to the point where they can be visually aligned.  This is a desirable feature in master-child scenarios \r\nbecause users can have related columns perfectly aligned between master and child tables.  See \r\n[this detailed README](./docs/ColSync.md) to learn how to make use of this one-in-a-kind feature.\r\n\r\n## Reference\r\n\r\n### Props\r\n\r\n| Property | Type | Default Value | Bindable | Description |\r\n| - | - | - | - | - |\r\n| `columns` | `WjDvColumn<TCol, TRow>[]` | (none) | Yes | Defines the columns the data view component will create. |\r\n| `data` | `WjDvRow<TRow>[]` | (none) | Yes | The data that is shown by the data view component. |\r\n| `get` | `(row: TRow, key: string) => any` | (function) | | Function that retrieves a column's value using the row and provided key for columns that don't provide one. |\r\n| `defaultWidth` | `number` | `10` | | The width for colums that don't specify its own width, in `em`'s. |\r\n| `rowTracking` | `boolean` | `true` | | Turns the row tracking feature on and off. |\r\n| `rowSelectionBg` | `boolean` | `true` | | Turns the row-highlighting-on-selection feature on and off. |\r\n| `striped` | `boolean` | `true` | | Turns the striping of rows on and off. |\r\n| `pinnedDivider` | `boolean` | `true` | | Turns the divider between pinned and unpinned columns on and off. |\r\n| `class` | `string` | `undefined` | | Additional CSS classes that are applied to the data view's viewport (the top-level element). |\r\n| `headerClass` | `string` | `undefined` | | Adds additional CSS classes to the individual header cells. |\r\n| `controlColumn` | `ControlColumn<TRow, TCol>` | `undefined` | Yes | Specifies the shape of the control column, which an extra column that is always the first pinned column. |\r\n| `noViewport` | `boolean` | `false` | | Allows the exclusion of the component's viewport. |\r\n `propSpreadingTarget` | `PropSpreadingTarget` | `root` | | Establishes the target for property spreading. |\r\n| `fillerPattern` | `'checkered' \\| 'diagstriped' \\| 'triangles'` | `'diagstriped'` | | Sets the desired pattern for the filler columns that may appear when columns are cross-synchronized. |\r\n\r\n### Snippets\r\n\r\n| Name | Parameters | Description |\r\n| - | - | - |\r\n| `headerCell` | `ColumnContext<TRow, TCol>` | Renders header cells' content.  The snippet is passed the column definition. |\r\n| `dataCell` | `DataCellContext<TRow, TCol>` | Renders data cells' content.  The snippet is passed the column definition and the data object for the row being rendered. |\r\n| `rowExpansion` | `RowContext<TRow>` | Renders arbitrary content immediately below the data cells of the row.  It is only rendered when `WjDvRow<TRow>.wjdv.expanded` is `true`. |\r\n| `controlHeaderCell` | (none) | Renders the contents of the control column's header cell. |\r\n| `controlDataCell` | `RowContext<TRow>` | Renders the contents of the control column's data cells. |\r\n| `caption` | (none) | Renders the content of the data view's caption. |\r\n\r\n### Events\r\n\r\nNone.\r\n\r\n## Roadmap\r\n\r\n- [x] Scrollable viewport\r\n- [x] Striped look\r\n- [x] Row highlighting effect on hover\r\n- [x] Column alignment\r\n- [x] Text wrap control\r\n- [x] Hideable columns\r\n- [x] Pinnable columns\r\n- [x] Customizable appearance\r\n- [x] Theme component\r\n- [x] headerCell snippet\r\n- [x] dataCell snippet\r\n- [x] Resizable columns\r\n- [x] Expansible rows\r\n- [x] Row selection\r\n- [x] Control column\r\n- [x] Header styling\r\n- [x] Cross Column Synchronization\r\n- [ ] Make cell/row/column padding themeable\r\n- [ ] dataRow snippet (complex)\r\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3792, 165],
		[3799, 24],
		[3806, 67],
		[3813, 10],
		[3820, 3],
		[3827, 6],
		[3834, 66],
		[3841, 10],
		[3848, 75],
		[3855, 410],
		[3862, 143],
		[3869, 120],
		[3876, 100],
		[3883, 56],
		[3890, 34],
		[3897, 37],
		[3904, 49],
		[3911, 44],
		[3918, 62],
		[3925, 44],
		[3932, 44],
		[3939, 74],
		[3946, 116],
		[3953, 55],
		[3960, 51],
		[3967, 24],
		[3974, 117],
		[3981, 84],
		[3988, 71],
		[3995, 65],
		[4002, 38],
		[4009, 25],
		[4016, 74],
		[4023, 118],
		[4030, 84],
		[4037, 60],
		[4044, 47],
		[4051, 28],
		[4058, 55],
		[4065, 92],
		[4072, 63],
		[4079, 33],
		[4086, 29],
		[4093, 37],
		[4100, 19],
		[4107, 4],
		[4114, 14],
		[4121, 20],
		[4128, 12],
		[4135, 8]
	]
}
