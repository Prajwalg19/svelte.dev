{
	"name": "svelte-rc-knob",
	"description": "Implement highly customizable knob component for Svelte.",
	"repo_url": "https://github.com/rjt-rockx/svelte-rc-knob",
	"authors": ["rjt_rockx"],
	"homepage": "https://github.com/rjt-rockx/svelte-rc-knob#readme",
	"downloads": 7,
	"updated": "2025-03-12T10:05:23.223Z",
	"tags": ["ui"],
	"github_stars": 0,
	"typescript": true,
	"version": "0.1.4",
	"svelte_range": "^5.0.0",
	"kit_range": "^2.0.0",
	"last_rune_check_version": "0.1.4",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-rc-knob",
				"version": "0.1.4",
				"size": 102019
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-rc-knob\n\nA highly customizable and accessible knob component for Svelte applications.\n\nPorted from [rc-knob](https://github.com/vallsv/rc-knob) originally created by [eskimoblood](https://github.com/eskimoblood) and updated by [vallsv](https://github.com/vallsv).\n\n## Overview\n\nThe component architecture separates user interaction and value calculation from the visual rendering. This separation allows for maximum flexibility and customization:\n\n- `<Knob>`: The root component that handles all user interactions and logic\n- Visual UI components (all rendered as SVG):\n  - `<Arc>`: Renders the knob's arc\n  - `<Pointer>`: Displays the knob's pointer\n  - `<Scale>`: Shows the knob's scale\n  - `<Value>`: Renders the current value\n\n### State Management\n\nThe component uses Svelte 5's runes and a dedicated state store created via `createKnobState`. The `<Knob>` component provides state and configuration to child components through Svelte's context system with the following structure:\n\n```typescript\ninterface KnobContext {\n\tstate: {\n\t\tisActive: boolean;\n\t\tmin: number;\n\t\tmax: number;\n\t\tvalue: number | null;\n\t\tpercentage: number | null;\n\t\tmouseAngle: number | null;\n\t\tstartPercentage: number | null;\n\t\tstartValue: number | null;\n\t\tmultiRotation: boolean;\n\t\tangleOffset: number;\n\t\tangleRange: number;\n\t\ttracking: boolean;\n\t\tsize: number;\n\t\tsteps?: number;\n\t};\n\tconfig: {\n\t\tsize: number;\n\t\tangleOffset: number;\n\t\tangleRange: number;\n\t\tsteps?: number;\n\t};\n}\n```\n\n### Child Components\n\nInstead of passing callback functions directly to child components, we use Svelte 5's snippet feature. Each visual component accepts a snippet that receives the necessary props for custom rendering. All components render SVG elements and must be placed within the `<Knob>`'s SVG container.\n\n### Basic Example\n\n```svelte\n<script>\n\timport { Knob, Pointer, Value } from 'svelte-knob';\n\n\tlet value = $state(0);\n</script>\n\n<Knob bind:value min={0} max={100} size={200}>\n\t<Value />\n\t<Pointer width={1} height={2}>\n\t\t{#snippet pointer(props)}\n\t\t\t<!-- Custom pointer implementation -->\n\t\t\t<rect {...props} />\n\t\t{/snippet}\n\t</Pointer>\n</Knob>\n```\n\n## Component API\n\n### `<Knob>`\n\nThe root component that handles all user interactions. It renders a `<div>` with ARIA slider attributes containing an SVG element where all child components are rendered. The knob supports:\n\n- Mouse, scroll wheel, and keyboard arrow key interactions\n- Keyboard accessibility via `tab`\n- Two modes of operation:\n  - Controlled: using the `value` prop\n  - Uncontrolled: using the `initialValue` prop\n\n#### Props\n\n| Prop                  | Type     | Default | Required | Description                                                           |\n| --------------------- | -------- | ------- | -------- | --------------------------------------------------------------------- |\n| `min`                 | number   |         | Yes      | Minimum value                                                         |\n| `max`                 | number   |         | Yes      | Maximum value                                                         |\n| `size`                | number   |         | Yes      | Width and height in pixels                                            |\n| `angleOffset`         | number   | 0       | No       | Starting angle offset in degrees (0° is at top, clockwise)            |\n| `angleRange`          | number   | 360     | No       | Total rotation range in degrees (clockwise)                           |\n| `ariaLabelledBy`      | string   |         | No       | Sets the `aria-labelledby` attribute                                  |\n| `ariaValueText`       | string   |         | No       | Sets the `aria-valuetext` attribute                                   |\n| `class`               | string   |         | No       | CSS class for the container div                                       |\n| `svgClass`            | string   |         | No       | CSS class for the SVG element                                         |\n| `initialValue`        | number   | null    | No       | Starting value for uncontrolled mode                                  |\n| `value`               | number   | null    | No       | Current value for controlled mode                                     |\n| `interactiveHook`     | function |         | No       | Customizes knob behavior during mouse interaction (see details below) |\n| `multiRotation`       | boolean  | false   | No       | Enables unlimited rotation (ignores min/max limits)                   |\n| `onChange`            | function | noop    | No       | Callback for value changes (after interaction ends)                   |\n| `onEnd`               | function | noop    | No       | Callback when dragging ends                                           |\n| `onInteractiveChange` | function | noop    | No       | Callback during dragging                                              |\n| `onStart`             | function | noop    | No       | Callback when dragging starts                                         |\n| `readOnly`            | boolean  | false   | No       | Disables user interaction                                             |\n| `snap`                | boolean  | false   | No       | Enables snapping to steps (requires `steps` to be set)                |\n| `steps`               | number   |         | No       | Number of snap points                                                 |\n| `tracking`            | boolean  | true    | No       | Controls when `onChange` fires during dragging                        |\n| `useMouseWheel`       | boolean  | true    | No       | Enables mouse wheel interaction                                       |\n\n#### Interactive Hook\n\nThe `interactiveHook` function allows fine-grained control over knob behavior based on mouse position. It receives an event object with:\n\n```typescript\ninterface InteractiveHookEvent {\n\tmouseRadius: number; // Distance from knob center\n\tmouseAngle: number; // Angle in degrees (0-360, 0° at top, clockwise)\n\tmouseX: number; // X position relative to center\n\tmouseY: number; // Y position relative to center\n\tctrlKey: boolean; // Ctrl key state\n\taltKey: boolean; // Alt key state\n\tmetaKey: boolean; // Meta key state\n\tshiftKey: boolean; // Shift key state\n}\n```\n\nThe function should return an object that can include:\n\n```typescript\ninterface InteractiveHookResult {\n\treadOnly?: boolean; // Disables interaction when true\n\tsteps?: number; // Number of snap points\n}\n```\n\nExample:\n\n```typescript\nfunction interactiveHook(e: InteractiveHookEvent): InteractiveHookResult {\n\tif (e.mouseRadius < 20) {\n\t\treturn { readOnly: true }; // Disable interaction near center\n\t}\n\treturn {};\n}\n```\n\n### `<Arc>`\n\nRenders an arc showing the current value of the knob. Uses the `<Range>` component internally to render both the value arc and an optional background arc.\n\n#### Props\n\n| Prop          | Type   | Default        | Required | Description                                                            |\n| ------------- | ------ | -------------- | -------- | ---------------------------------------------------------------------- |\n| `arcWidth`    | number |                | Yes      | Width of the arc in pixels                                             |\n| `percentage`  | number | context value  | No       | Current percentage (0-1) to display                                    |\n| `color`       | string | 'currentColor' | No       | Color of the value arc                                                 |\n| `background`  | string | undefined      | No       | Color of the background arc. If not set, no background arc is rendered |\n| `radius`      | number | context size/2 | No       | Outer radius of the arc in pixels                                      |\n| `class`       | string | undefined      | No       | CSS class for the value arc                                            |\n| `activeClass` | string | undefined      | No       | CSS class for the background arc                                       |\n\n### `<Range>`\n\nLow-level component that renders an SVG path representing a range between two percentages. Used internally by the `<Arc>` component but can also be used directly for custom range visualizations.\n\nThe path is generated using SVG arc commands and handles special cases for full circles and tiny angles. It automatically clamps angles to prevent rendering issues at exact 360/-360 degrees.\n\n#### Props\n\n| Prop             | Type   | Default        | Description                  |\n| ---------------- | ------ | -------------- | ---------------------------- |\n| `arcWidth`       | number | Required       | Width of the arc in pixels   |\n| `color`          | string | 'currentColor' | Color of the range arc       |\n| `percentage`     | number | context value  | Current percentage value     |\n| `percentageFrom` | number | null           | Starting percentage of range |\n| `percentageTo`   | number | null           | Ending percentage of range   |\n| `radius`         | number | knob size / 2  | Outer radius of the arc      |\n| `class`          | string | ''             | CSS class for the range      |\n\nThe component uses the following logic to determine the actual range to render:\n\n1. If both `percentageFrom` and `percentageTo` are provided, uses them directly\n2. If only `percentageFrom` is provided, uses it as start and `percentage` as end\n3. If only `percentageTo` is provided, uses `percentage` as start and `percentageTo` as end\n4. If neither is provided, uses 0 as start and `percentage` as end\n\n### `<Spiral>`\n\nRenders a spiral path between two points with varying radius. Particularly useful for multi-rotation knobs to show winding progression. The spiral is rendered as an SVG path with smooth transitions between points.\n\n#### Props\n\n| Prop             | Type   | Default        | Description                                       |\n| ---------------- | ------ | -------------- | ------------------------------------------------- |\n| `arcWidth`       | number | Required       | Width of the spiral line                          |\n| `color`          | string | 'currentColor' | Color of the spiral                               |\n| `percentage`     | number | context value  | Current percentage value                          |\n| `percentageFrom` | number | null           | Starting percentage (defaults to 0 or percentage) |\n| `percentageTo`   | number | null           | Ending percentage (defaults to percentage)        |\n| `radiusFrom`     | number | null           | Starting radius                                   |\n| `radiusTo`       | number | null           | Ending radius                                     |\n\nThe component uses the following logic to determine the actual range:\n\n1. `percentageFrom` defaults to 0 if `percentageTo` is set, otherwise uses `percentage`\n2. `percentageTo` defaults to `percentage`\n3. Both `radiusFrom` and `radiusTo` must be provided for the spiral to render\n\n### `<Pointer>`\n\nVisual indicator component that shows the current value of the knob. Supports different shapes and custom SVG elements.\n\n#### Props\n\n| Prop          | Type    | Default        | Required | Description                                          |\n| ------------- | ------- | -------------- | -------- | ---------------------------------------------------- |\n| `width`       | number  |                | Yes      | Width of the pointer                                 |\n| `height`      | number  | width          | No       | Height of the pointer                                |\n| `useRotation` | boolean | true           | No       | Use rotation transform instead of position transform |\n| `type`        | string  |                | No       | Shape type: 'rect', 'circle', or 'triangle'          |\n| `color`       | string  | 'currentColor' | No       | Fill color of the pointer                            |\n| `radius`      | number  | size / 2       | No       | Distance from center to pointer                      |\n| `center`      | number  | size / 2       | No       | Center point of rotation                             |\n| `class`       | string  | ''             | No       | Additional CSS class                                 |\n| `percentage`  | number  | context value  | No       | Percentage value to display                          |\n\n#### Shape Types\n\n- `rect`: Rectangular pointer centered on rotation point\n- `circle`: Circular pointer with radius equal to width\n- `triangle`: Triangular pointer pointing outward\n- Custom: Provided via snippet that receives `{ width, height, percentage }`\n\n#### Positioning\n\nThe pointer can be positioned in two ways, controlled by the `useRotation` prop:\n\n- `true`: Rotates pointer around center point using a rotation transform\n- `false`: Positions pointer at calculated x,y coordinates using a translation transform\n\nExample with custom pointer:\n\n```svelte\n<Pointer width={10} height={20}>\n\t{#snippet pointer({ width, height, percentage })}\n\t\t<!-- Custom pointer implementation -->\n\t\t<rect x={-width * 0.5} {width} {height} fill=\"currentColor\" />\n\t{/snippet}\n</Pointer>\n```\n\n### `<Label>`\n\nDisplays text labels around the knob at specified angles. Labels are positioned in polar coordinates and automatically rotated to maintain readability.\n\n#### Props\n\n| Prop         | Type   | Default        | Required | Description                      |\n| ------------ | ------ | -------------- | -------- | -------------------------------- |\n| `label`      | string |                | Yes      | Text to display                  |\n| `radius`     | number |                | Yes      | Distance from center             |\n| `percentage` | number |                | Yes      | Position around the circle (0-1) |\n| `center`     | number | context size/2 | No       | Center point                     |\n| `color`      | string | 'currentColor' | No       | Text color                       |\n| `class`      | string | ''             | No       | CSS class for the text element   |\n| `userSelect` | string | 'none'         | No       | CSS user-select property value   |\n\n### `<Scale>`\n\nRenders a radial scale with configurable tick marks around the knob. Supports circle and rect tick shapes, or custom rendered ticks.\n\n#### Props\n\n| Prop          | Type   | Default                         | Required | Description                         |\n| ------------- | ------ | ------------------------------- | -------- | ----------------------------------- |\n| `tickWidth`   | number |                                 | Yes      | Width of each tick                  |\n| `tickHeight`  | number |                                 | Yes      | Height of each tick (for rect type) |\n| `type`        | string | 'rect'                          | No       | Shape type: 'rect' or 'circle'      |\n| `radius`      | number | context size/2                  | No       | Distance from center to ticks       |\n| `color`       | string | 'currentColor'                  | No       | Default tick color                  |\n| `activeColor` | string | color                           | No       | Color for active tick               |\n| `class`       | string | ''                              | No       | Default tick class                  |\n| `activeClass` | string | class                           | No       | Class for active tick               |\n| `steps`       | number | context steps → prop steps → 10 | No       | Number of ticks                     |\n\nThe scale can be customized using a snippet that receives:\n\n```typescript\ninterface RenderCustomProps {\n\ttickWidth: number; // Width of tick\n\ttickHeight: number; // Height of tick\n\ttranslateX: number; // X position\n\ttranslateY: number; // Y position\n\tangleOffset: number; // Starting angle\n\tstepSize: number; // Angle between ticks\n\tcenter: number; // Center point\n\tcolor: string; // Default color\n\tclassName?: string; // Default class\n\tactive: number; // Index of active tick\n\tactiveColor: string; // Active tick color\n\tactiveClassName: string; // Active tick class\n\ti: number; // Current tick index\n\tsteps: number; // Total number of steps\n\tpercentage: number; // Current percentage\n}\n```\n\nExample with custom ticks:\n\n```svelte\n<Scale tickWidth={2} tickHeight={10}>\n\t{#snippet custom(props)}\n\t\t<!-- Custom tick implementation -->\n\t\t<rect\n\t\t\tclass={[props.i === props.active ? props.activeClassName : props.className]}\n\t\t\tfill={props.i === props.active ? props.activeColor : props.color}\n\t\t\tstroke=\"none\"\n\t\t\twidth={props.tickWidth}\n\t\t\theight={props.tickHeight}\n\t\t\ttransform={`\n        rotate(${props.angleOffset + props.stepSize * props.i} ${props.center} ${props.center}) \n        translate(${props.translateX} ${props.translateY})\n      `}\n\t\t/>\n\t{/snippet}\n</Scale>\n```\n\n### `<Value>`\n\nDisplays the current value of the knob as text. Supports decimal places formatting and vertical positioning.\n\n#### Props\n\n| Prop           | Type   | Default        | Required | Description                    |\n| -------------- | ------ | -------------- | -------- | ------------------------------ |\n| `value`        | number | context value  | No       | Value to display               |\n| `radius`       | number | context size/2 | No       | Distance from center           |\n| `decimalPlace` | number | 0              | No       | Number of decimal places       |\n| `marginBottom` | number | 0              | No       | Bottom margin in pixels        |\n| `color`        | string | 'currentColor' | No       | Text color                     |\n| `class`        | string | ''             | No       | CSS class for the text element |\n\nThe component automatically handles negative zero values by removing the negative sign.\n\nNote: All components require being children of a `<Knob>` component as they rely on its context for default values and state management.\n",
	"legacy_svelte": false,
	"downloads_history": [
		[4037, 50],
		[4044, 73],
		[4051, 6],
		[4058, 5],
		[4065, 7],
		[4072, 4],
		[4079, 2],
		[4086, 213],
		[4093, 11],
		[4100, 7],
		[4107, 1],
		[4114, 7],
		[4121, 15],
		[4128, 3]
	],
	"esm": true,
	"cjs": false
}
