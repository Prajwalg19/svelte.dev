{
	"name": "svelte-render",
	"description": "Manage complex Svelte behaviors outside templates with type safety.",
	"repo_url": "https://github.com/bryanmylee/svelte-render",
	"authors": ["bryanmylee"],
	"homepage": "https://github.com/bryanmylee/svelte-render#readme",
	"downloads": 12956,
	"updated": "2024-02-02T15:24:28.108Z",
	"tags": ["miscellaneous"],
	"github_stars": 26,
	"typescript": true,
	"version": "2.0.1",
	"svelte_range": "^4.0.0",
	"kit_range": "^2.0.0",
	"last_rune_check_version": "2.0.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-render",
				"version": "2.0.1",
				"size": 14503
			},
			{
				"name": "svelte-subscribe",
				"version": "2.0.1",
				"size": 7144
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# svelte-render\n\n[![npm version](http://img.shields.io/npm/v/svelte-render.svg)](https://www.npmjs.com/package/svelte-render)\n[![npm downloads](https://img.shields.io/npm/dm/svelte-render.svg)](https://www.npmjs.com/package/svelte-render)\n![license](https://img.shields.io/npm/l/svelte-render)\n![build](https://img.shields.io/github/actions/workflow/status/bryanmylee/svelte-render/publish.yml)\n[![coverage](https://coveralls.io/repos/github/bryanmylee/svelte-render/badge.svg?branch=main)](https://coveralls.io/github/bryanmylee/svelte-render?branch=main)\n[![size](https://img.shields.io/bundlephobia/min/svelte-render)](https://bundlephobia.com/result?p=svelte-render)\n\nManage complex Svelte behaviors outside of templates with full type safety.\n\n```svelte\n<script>\n  import {Render, createRender} from 'svelte-render';\n  import Avatar from './Avatar.svelte';\n  // ...\n  const avatar = createRender(Avatar, {name: 'Ada Lovelace'})\n    .on('click', handleClick)\n    .on('launch', handleLaunch);\n</script>\n\n<Render of={avatar} />\n```\n\n## Installation\n\n```bash\n$ npm i -D svelte-render\n```\n\n## API\n\nSvelte Render was primarily built to support complex rendering definitions for [Svelte Headless Table](https://github.com/bryanmylee/svelte-headless-table). You can find full documentation on `createRender` on the [documentation site](https://svelte-headless-table.bryanmylee.com/docs/api/create-render).\n\n### `<Render />`\n\n`<Render />` handles props and automatically registers the event handlers defined with `.on` as well as slot data defined with `.slot`.\n\n`of` accepts:\n\n- primitive data such as `number` and `string`\n- `Writable<number>` and `Writable<string>` for dynamic primitive data\n- `ComponentRenderConfig` returned by `createRender`\n\n```svelte\n<script>\n  const avatar = createRender(Avatar, {name: 'Ada Lovelace'});\n</script>\n\n<Render of={avatar} />\n```\n\nbecomes\n\n```svelte\n<Avatar name=\"Ada Lovelace\" />\n```\n\n### `createRender: (component, props)`\n\n`createRender` accepts a Svelte component and its props as arguments.\n\n`props` can be omitted if the component does not receive props but must be included otherwise.\n\n```ts\nconst icon = createRender(TickIcon); // ✅\nconst avatar = createRender(Avatar); // ❌ Type error.\nconst avatar = createRender(Avatar, {name: 'Ada Lovelace'}); // ✅\n```\n\nIf you need prop reactivity, `props` must be a [Svelte store](https://svelte.dev/tutorial/writable-stores).\n\n```ts\nconst avatarProps = writable({name: 'Ada Lovelace'});\nconst avatar = createRender(Avatar, avatarProps);\n```\n\n### `.on(event, handler)`\n\nSvelte Render supports the Svelte event system by chaining `.on` calls on `createRender()`. Multiple event handlers can be registered for the same event type like the Svelte `on:` directive.\n\n```ts\nconst button = createRender(Button)\n  .on('click', handleClick)\n  .on('click', (ev) => console.log(ev));\n```\n\n`<Render of={button} />` becomes:\n\n```svelte\n<Button on:click={handleClick} on:click={(ev) => console.log(ev)} />\n```\n\nHowever, note that the callback handler passed into `.on(event, handler)` is not dynamic and will only capture references to variables as they were when the render configuration is created.\n\nIf you need a handler to access dynamic data, use a dynamic system like Svelte Stores.\n\n```ts\nconst counter = writable(0);\nconst button = createRender(Button)\n  .on('click', (ev) => counter.update(c => c + 1));\n```\n\n### `.slot(...config)`\n\nSvelte Render also supports Svelte's default slot system.\n\n`.slot` receives any number of arguments with the same type as `of`, including `ComponentRenderConfig` returned by `createRender`, primitive data, and `Writable`. This makes it useful for rendering wrapper components such as `<Button />` and `<Label />`.\n\n_Due to technical limitations with Svelte 4, it is not possible to assign render configurations to named slots._\n\n```ts\nconst button = createRender(Button).slot(createRender(Icon, {name: 'user'}), 'Log in');\n```\n\n`<Render of={button} />` becomes:\n\n```svelte\n<Button>\n  <Icon name=\"user\" />\n  Log in\n</Button>\n```\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 2408],
		[3596, 3789],
		[3603, 3510],
		[3610, 3106],
		[3617, 4073],
		[3624, 3660],
		[3631, 4226],
		[3638, 4344],
		[3645, 2175],
		[3652, 3850],
		[3659, 4994],
		[3666, 5145],
		[3673, 6616],
		[3680, 7092],
		[3687, 6730],
		[3694, 7829],
		[3701, 7388],
		[3708, 7843],
		[3715, 7912],
		[3722, 7688],
		[3729, 8078],
		[3736, 8347],
		[3743, 9815],
		[3750, 10146],
		[3757, 10915],
		[3764, 11567],
		[3771, 10437],
		[3778, 10807],
		[3785, 12715],
		[3792, 10701],
		[3799, 11048],
		[3806, 12265],
		[3813, 13653],
		[3820, 13196],
		[3827, 14617],
		[3834, 14173],
		[3841, 14879],
		[3848, 15295],
		[3855, 13585],
		[3862, 15117],
		[3869, 14827],
		[3876, 16888],
		[3883, 17053],
		[3890, 19210],
		[3897, 19588],
		[3904, 20439],
		[3911, 19327],
		[3918, 19237],
		[3925, 17735],
		[3932, 19226],
		[3939, 19459],
		[3946, 20264],
		[3953, 20364],
		[3960, 18408],
		[3967, 16347],
		[3974, 16666],
		[3981, 15813],
		[3988, 17842],
		[3995, 16775],
		[4002, 14278],
		[4009, 5175],
		[4016, 7183],
		[4023, 13706],
		[4030, 16262],
		[4037, 16526],
		[4044, 17374],
		[4051, 19971],
		[4058, 20236],
		[4065, 16139],
		[4072, 15745],
		[4079, 16137],
		[4086, 17808],
		[4093, 17507],
		[4100, 17814],
		[4107, 15678],
		[4114, 12956],
		[4121, 11063],
		[4128, 11383]
	],
	"esm": true,
	"cjs": false
}
