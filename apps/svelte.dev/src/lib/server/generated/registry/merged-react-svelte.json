{
	"name": "@merged/react-svelte",
	"description": "Use Svelte components inside React applications.",
	"repo_url": "https://github.com/merged-js/react-svelte",
	"authors": ["torsten4385"],
	"homepage": "https://github.com/merged-js/react-svelte",
	"downloads": 4,
	"updated": "2021-09-02T09:36:26.781Z",
	"tags": ["integration"],
	"typescript": true,
	"version": "0.0.5",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "0.0.5",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@merged/react-svelte",
				"version": "0.0.5",
				"size": 20664
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# @merged/react-svelte\n\nYet another way to use Svelte components inside React\n\nThis project is heavily inspired by [svelte-adapter](https://github.com/pngwn/svelte-adapter).\nActually, I more or less copied the whole eventhandling / watching idea from svelte-adapter, so credit where credit's due.\n\n## Difference to other svelte react adapters\n\n* Typescript!\n* Provide the wrapping container as react node instead of a tag name\n* Slots! \n\n## Limitation\n\n* Slot content (e.g. children) will be wrapped in an extra `<div />` by default (can be configured, see blow)\n\n## Basic Example \n\n*SvelteComponent.svelte*\n```html\n<script lang=\"ts\">\n  export let name: string\n</script>\n\n<div>\n  <h1>Hello {name}!</h1>\n</div>\n```\n\n*ReactComponent.tsx*\n```jsx\nimport React from 'react'\nimport { Svelte } from '@merged/react-svelte'\nimport SvelteComponent from './SvelteComponent.svelte'\n\nexport const ReactComponent = () => {\n  return (\n    <Svelte\n        component={SvelteComponent}\n        name=\"Tester\"\n    />\n  )\n}\n```\n\n## Example with typescript\n\n*ReactComponent.tsx*\n```tsx\nimport React from 'react'\nimport { Svelte } from '@merged/react-svelte'\nimport SvelteComponent from './SvelteComponent.svelte'\n\ninterface SvelteComponentProps {\n  name: string\n}\n\nexport const ReactComponent = () => {\n  return (\n    <Svelte<SvelteComponentProps>\n        component={SvelteComponent}\n        name=\"Tester\"\n    />\n  )\n}\n```\n\n## Example with events\n\n*SvelteComponent.svelte*\n```html\n<script lang=\"ts\">\n  export let name: string\n</script>\n\n<div>\n  <h1 on:click>Hello {name}!</h1>\n</div>\n```\n\n*ReactComponent.tsx*\n```jsx\nimport React from 'react'\nimport { Svelte } from '@merged/react-svelte'\nimport SvelteComponent from './SvelteComponent.svelte'\n\nexport const ReactComponent = () => {\n  return (\n    <Svelte\n        component={SvelteComponent}\n        name=\"Tester\"\n        onClick={event => console.log('clicked!', event)}\n    />\n  )\n}\n```\n\n## Example with slot\n\n*SvelteComponent.svelte*\n```jtml\n<script lang=\"ts\">\n  export let name: string\n</script>\n\n<div>\n  <h1 on:click>Hello {name}!</h1>\n  <slot>This is the default slot content</slot>\n</div>\n```\n\n*ReactComponent.tsx*\n```jsx\nimport React from 'react'\nimport { Svelte } from '@merged/react-svelte'\nimport SvelteComponent from './SvelteComponent.svelte'\n\nexport const ReactComponent = () => {\n  return (\n    <Svelte\n        component={SvelteComponent}\n        name=\"Tester\"\n        onClick={event => console.log('clicked!', event)}\n    >\n      This is the new slot content\n    </Svelte>\n  )\n}\n```\n\n## Example with custom container, custom slot and custom slot container\n\n*SvelteComponent.svelte*\n```html\n<script lang=\"ts\">\n  export let name: string\n</script>\n\n<div>\n  <h1 on:click>Hello {name}!</h1>\n  <slot>This is the default slot content</slot>\n  <p>Some content</p>\n  <slot name=\"footer\">This is the default footer slot content</slot>\n</div>\n```\n\n*ReactComponent.tsx*\n```jsx\nimport React from 'react'\nimport { Svelte } from '@merged/react-svelte'\nimport SvelteComponent from './SvelteComponent.svelte'\n\nexport const ReactComponent = () => {\n  return (\n    <Svelte\n        component={SvelteComponent}\n        name=\"Tester\"\n        onClick={event => console.log('clicked!', event)}\n        container={<div style={{border: '1px solid red'}} />}\n        slotFooter={<div>This is the new footer slot content</div>}\n        createSlotContainer={name => {\n          if (name === 'footer') {\n            return document.createElement('span')\n          }\n\n          return document.createElement('div')\n        }}\n    >\n      This is the new slot content\n    </Svelte>\n  )\n}\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 2],
		[3596, 2],
		[3617, 1],
		[3631, 1],
		[3638, 2],
		[3645, 1],
		[3652, 1],
		[3659, 10],
		[3666, 17],
		[3673, 11],
		[3680, 2],
		[3687, 7],
		[3694, 12],
		[3701, 7],
		[3708, 7],
		[3715, 12],
		[3722, 7],
		[3729, 9],
		[3736, 7],
		[3743, 9],
		[3750, 6],
		[3757, 6],
		[3764, 7],
		[3771, 5],
		[3778, 6],
		[3785, 7],
		[3792, 16],
		[3799, 12],
		[3806, 18],
		[3813, 15],
		[3820, 18],
		[3827, 12],
		[3834, 10],
		[3841, 12],
		[3848, 12],
		[3855, 15],
		[3862, 19],
		[3869, 21],
		[3876, 14],
		[3883, 10],
		[3890, 12],
		[3897, 14],
		[3904, 16],
		[3911, 12],
		[3918, 8],
		[3925, 1],
		[3932, 1],
		[3939, 2],
		[3967, 1],
		[3995, 1],
		[4016, 3],
		[4023, 1],
		[4030, 1],
		[4037, 2],
		[4044, 8],
		[4051, 1],
		[4058, 2],
		[4072, 1],
		[4093, 11],
		[4100, 1],
		[4114, 4],
		[4121, 5],
		[4128, 3]
	],
	"esm": true,
	"cjs": true
}
