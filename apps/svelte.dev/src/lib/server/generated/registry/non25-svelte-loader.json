{
	"name": "@non25/svelte-loader",
	"description": "Offers a Webpack loader for Svelte with bug fixes.",
	"repo_url": "https://github.com/non25/svelte-loader",
	"authors": ["non25"],
	"homepage": "https://github.com/non25/svelte-loader#readme",
	"downloads": 6,
	"updated": "2021-06-03T23:36:44.625Z",
	"tags": ["tooling"],
	"github_stars": 2,
	"typescript": false,
	"version": "3.1.3",
	"svelte_range": ">3.0.0",
	"last_rune_check_version": "3.1.3",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@non25/svelte-loader",
				"version": "3.1.3",
				"size": 20528
			},
			{
				"name": "loader-utils",
				"version": "2.0.4",
				"size": 36329
			},
			{
				"name": "json5",
				"version": "2.2.3",
				"size": 235198
			},
			{
				"name": "big.js",
				"version": "5.2.2",
				"size": 63868
			},
			{
				"name": "emojis-list",
				"version": "3.0.0",
				"size": 53575
			},
			{
				"name": "svelte-dev-helper",
				"version": "1.1.9",
				"size": 25281
			},
			{
				"name": "svelte-hmr",
				"version": "0.14.12",
				"size": 79767
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[1, 3],
			[1, 4],
			[0, 5],
			[0, 6]
		],
		"circular": []
	},
	"readme": "# @non25/svelte-loader\n\nFork of a [webpack](https://webpack.js.org) loader for [svelte](https://svelte.dev) with bugs fixed.\n\nWebpack 4 & 5 are supported.\n\n## Install\n\nOn the existing project, make sure to have following packages:\n\n```\nnpm install -D svelte @non25/svelte-loader svelte-preprocess postcss postcss-import postcss-load-config\n```\n\n## Usage\n\nHere's full-featured configuration with hot module replacement:\n\n```javascript\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst sveltePreprocess = require('svelte-preprocess');\nconst mode = process.env.NODE_ENV || 'development';\nconst prod = mode === 'production';\n  ...\n  resolve: {\n    // include only one version of svelte runtime\n    alias: {\n      svelte: path.resolve('node_modules', 'svelte')\n    },\n\n    // import .svelte files without extension\n    extensions: ['.mjs', '.js', '.svelte'],\n\n    // use sources of third-party svelte packages\n    mainFields: ['svelte', 'browser', 'module', 'main']\n  },\n  module: {\n    rules: [\n      ...\n      {\n        test: /\\.svelte$/,\n        use: {\n          loader: '@non25/svelte-loader',\n          options: {\n            compilerOptions: {\n              // required by hot module replacement (HMR)\n              dev: !prod,\n            },\n\n            // enable emitCss only for production\n            emitCss: prod,\n\n            // enable HMR only for development\n            hotReload: !prod,\n\n            // inline css imports in svelte components for equal dev/prod using postcss\n            preprocess: sveltePreprocess({\n              postcss: true\n            })\n          },\n        },\n      },\n      {\n        test: /\\.css$/,\n        use: [\n          // make separate css bundle\n          MiniCssExtractPlugin.loader,\n          'css-loader'\n        ]\n      },\n      ...\n    ]\n  },\n  ...\n  // enable sourcemaps in devmode\n  devtool: prod ? false : 'source-map',\n  ...\n  plugins: [\n    // make separate css bundle\n    new MiniCssExtractPlugin({\n      filename: '[name].css',\n    }),\n    ...\n  ]\n  ...\n```\n\nCreate `postcss.config.js` for inlining css `@import`s:\n\n```javascript\nmodule.exports = {\n  plugins: [\n    require('postcss-import')\n  ]\n}\n```\n\nIf you have `postcss.config.js` already, then you may want to prevent emitted svelte component's css from getting processed twice. Read more [here](#css-import-in-components).\n\nCheck out the [example project](https://github.com/sveltejs/template-webpack).\n\n### resolve.alias\n\nThe [`resolve.alias`](https://webpack.js.org/configuration/resolve/#resolvealias) option is used to make sure that only one copy of the Svelte runtime is bundled in the app, even if you are `npm link`ing in dependencies with their own copy of the `svelte` package. Having multiple copies of the internal scheduler in an app, besides being inefficient, can also cause various problems.\n\n### resolve.mainFields\n\nWebpack's [`resolve.mainFields`](https://webpack.js.org/configuration/resolve/#resolve-mainfields) option determines which fields in package.json are used to resolve identifiers. If you're using Svelte components installed from npm, you should specify this option so that your app can use the original component source code, rather than consuming the already-compiled version (which is less efficient).\n\n### Svelte Compiler options\n\nYou can pass [available options](https://svelte.dev/docs#svelte_compile) directly to the svelte compiler in `compilerOptions`.\n\n`dev` option is used in the development mode to improve debugging and because HMR requires it.\n\n### emitCss\n\nBy default css from component's `<style>` tag will be injected by compiler-generated JavaScript when component is rendered. `emitCss` creates a virtual css file for each svelte component with `<style>` tag and adds corresponding import, which then gets processed by `css-loader`. [MiniCssExtractPlugin](https://github.com/webpack-contrib/mini-css-extract-plugin/) then makes separate css bundle from all css imports in your project, allowing to fetch style & code in parallel.\n\nWarning: in production, if you have set `sideEffects: false` in your `package.json`, `MiniCssExtractPlugin` has a tendency to drop CSS, regardless of whether it's included in your svelte components.\n\nAlternatively, if you're handling styles in some other way and just want to prevent the CSS being added to your JavaScript bundle, put `css: false` in `compilerOptions`.\n\n### Source maps\n\nJavaScript source maps are enabled by default, you just have to use an appropriate [webpack devtool](https://webpack.js.org/configuration/devtool/).\n\nTo enable CSS source maps, you'll need to use `emitCss` and pass the `sourceMap` option to the `css-loader`. \n\nYou'll have to choose to either opt out from HMR or from css source maps in dev mode, because HMR is incompatible with `emitCss`.\n\n```javascript\n      ...\n      {\n        test: /\\.css$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          {\n            loader: 'css-loader',\n            options: {\n              // this will work with HMR, source maps in production\n              sourceMap: prod\n            }\n          }\n        ]\n      },\n      ...\n```\n\nThis should create an additional `[name].css.map` file.\n\n### Hot Module Replacement\n\nThis loader supports component-level HMR via the community supported [svelte-hmr](https://github.com/rixo/svelte-hmr) package. This package serves as a testbed and early access for Svelte HMR, while we figure out how to best include HMR support in the compiler itself (which is tricky to do without unfairly favoring any particular dev tooling). Feedback, suggestion, or help to move HMR forward is welcomed at [svelte-hmr](https://github.com/rixo/svelte-hmr/issues) (for now).\n\nHMR expects that you use either [HotModuleReplacementPlugin](https://webpack.js.org/plugins/hot-module-replacement-plugin) or [devServer](https://webpack.js.org/configuration/dev-server).\n\nConfigure inside your `webpack.config.js`:\n\n```javascript\n          ...\n          options: {\n            ...\n            hotReload: !prod,\n            hotOptions: {\n              // put options for svelte-hmr here\n            }\n            ...\n          }\n  ...\n  // either this\n  plugins: [\n    new webpack.HotModuleReplacementPlugin(),\n    ...\n  ],\n  ...\n  // or this\n  devServer: {\n    hot: true\n  }\n}\n```\n\n### CSS @import in components\n\nIt is advised to inline any css `@import` in component's style tag before it hits `css-loader`.\n\nThis ensures equal css behavior when using HMR with `emitCss: false` and production.\n\nIf you are using autoprefixer for `.css`, then it is better to exclude emitted css, because it was already processed with `postcss` through `svelte-preprocess` before emitting.\n\n```javascript\n  ...\n  module: {\n    rules: [\n      ...\n      {\n        test: /\\.css$/,\n        exclude: /svelte\\.\\d+\\.css/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          'css-loader',\n          'postcss-loader'\n        ]\n      },\n      {\n        test: /\\.css$/,\n        include: /svelte\\.\\d+\\.css/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          'css-loader'\n        ]\n      },\n      ...\n    ]\n  },\n  ...\n```\n\nThis ensures that global css is being processed with `postcss` through webpack rules, and svelte component's css is being processed with `postcss` through `svelte-preprocess`.\n\n## License\n\nMIT\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 2],
		[3596, 3],
		[3603, 2],
		[3617, 1],
		[3645, 1],
		[3652, 1],
		[3659, 1],
		[3666, 4],
		[3694, 1],
		[3708, 1],
		[3715, 2],
		[3729, 1],
		[3736, 1],
		[3743, 1],
		[3764, 3],
		[3778, 1],
		[3792, 1],
		[3799, 1],
		[3806, 1],
		[3820, 2],
		[3834, 1],
		[3841, 2],
		[3848, 1],
		[3855, 11],
		[3862, 4],
		[3869, 3],
		[3876, 1],
		[3883, 2],
		[3890, 4],
		[3904, 2],
		[3918, 1],
		[3932, 1],
		[3939, 1],
		[3967, 1],
		[3995, 1],
		[4002, 2],
		[4016, 3],
		[4023, 4],
		[4030, 3],
		[4037, 2],
		[4044, 7],
		[4051, 2],
		[4058, 2],
		[4072, 2],
		[4079, 1],
		[4093, 18],
		[4100, 1],
		[4114, 6],
		[4121, 4],
		[4128, 4]
	],
	"esm": false,
	"cjs": true
}
