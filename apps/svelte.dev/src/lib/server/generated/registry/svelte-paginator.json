{
	"name": "svelte-paginator",
	"description": "Create unopinionated pagination components for Svelte.",
	"repo_url": "https://github.com/mpdaugherty/svelte-paginator",
	"authors": ["mpdaugherty"],
	"homepage": "https://github.com/mpdaugherty/svelte-paginator#readme",
	"downloads": 5,
	"updated": "2020-11-21T14:42:40.808Z",
	"tags": ["ui", "miscellaneous"],
	"github_stars": 3,
	"typescript": false,
	"version": "1.0.0",
	"svelte_range": "^3.29.0",
	"last_rune_check_version": "1.0.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-paginator",
				"version": "1.0.0",
				"size": 66034
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-paginator\n\nAn unopinionated paginator component for Svelte.\n\n![Svelte-Paginator Example](https://github.com/mpdaugherty/svelte-paginator/raw/main/README_images/example.png \"Svelte Paginator Example\")\n\n## Example\n\n```svelte\n<script>\n import Paginator from 'svelte-paginator'\n\n // Create test data\n let letters = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('')\n\n // Function to that loads the test data\n const loadLetters = (page, perPage) => {\n   const start = perPage * (page-1)\n   const end = start + perPage\n   return {\n     items: letters.slice(start, end), // The items to display for `page`\n     numItems: letters.length // The total number of items available across all pages\n   }\n }\n</script>\n\n<Paginator loadItems={loadLetters} let:items let:loading>\n  <!-- Write code here for whatever you want to do with items, e.g. a list, a table, etc. -->\n\n  <div>\n    {#if loading}\n      Loading...\n    {:else}\n      {#each items as letter}\n        {letter}&nbsp;\n      {:else}\n        None\n      {/each}\n    {/if}\n  </div>\n</Paginator>\n```\n\n## Usage\n\n### Required\n\nThere are two required elements for using `svelte-paginator`.\n\n#### `async loadItems(page, perPage)`\n\n`loadItems` should calculate an object of the form\n\n```javascript\n{\n  item: ['...'], // an array of items to display on this page\n  numItems: 99 // the total number of items available\n}\n```\n\nIf you're loading these from a server, `loadItems` can also be an async function or return a promise that resolves to the object.\n\n#### `let:items`\n\n`svelte-paginator` doesn't define anything to do with the items that you're paginating. That's up to you.\n\nTo make use of this, add `let:items` to your paginator instance. `items` will be an array of items to display on the current page (it's returned from `loadItems()` above).\n\n### Optional\n\n| Parameter | Definition | Example |\n| --- | --- | --- |\n| `perPage` | How many items to display per page; defaults to 40 | `<Paginator loadItems perPage={4}>` |\n| `numPageLinks` | How many links to display (does not include left & right buttons). Minimum 5. Defaults to 9. | `<Paginator loadItems numPageLinks={7}>` |\n| `currentPage` | The current / initial page to load. Defaults to 1. | `<Paginator loadItems bind:currentPage>` |\n| `bind:reset` | Exposed function that lets you reset the paginator. | `<Paginator loadItems bind:reset>` |\n| `let:loading` | Within the component slot, the value is true if actively loading | `<Paginator loadItems let:loading>{#if loading}...{/if}</Paginator>` |\n\n#### Example with all options\n\nYou can see this in action at https://github.com/mpdaugherty/svelte-paginator-test\n\n```svelte\n<script>\n import Paginator from 'svelte-paginator'\n\n let letters = '1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('')\n const loadLetters = async (page=1, perPage=10) => {\n   await new Promise(resolve => setTimeout(resolve, 1500)) // Simulate a delay, e.g. loading from a server\n   const start = perPage * (page-1)\n   const end = start + perPage\n   return {\n     items: letters.slice(start, end),\n     numItems: letters.length\n   }\n }\n\n let reset = null\n const switchToGreek = () => {\n   letters = 'αβγδεζηθικλμνξοπρστυφχψωΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ'\n   reset()\n }\n</script>\n\n<button on:click={switchToGreek}>Switch to Greek</button>\n\n<Paginator loadItems={loadLetters} perPage={4} numPageLinks={12} currentPage={2} let:items let:loading bind:reset>\n  <div>\n    {#if loading}\n      Loading...\n    {:else}\n      {#each items as letter}\n        {letter}&nbsp;\n      {:else}\n        None\n      {/each}\n    {/if}\n  </div>\n</Paginator>\n```\n\n## Styles\n\nIf the default styles of `svelte-paginator` are not to your taste, you can override the classes that are used. If you do this, none of the default styles will survive.\n\nAvailable classes are:\n\n * `class_button`\n * `class_current_page`\n * `class_button_group`\n\nFor example, if you'd like to use Bootstrap classes, you might do something like this:\n\n```svelte\n<Paginator loadItems let:items\n  class_button=\"btn btn-outline-secondary\"\n  class_current_page=\"btn btn-secondary\"\n  class_button_group=\"btn-group\">\n  ...\n</Paginator>\n```\n\n# Developing `svelte-paginator`\n\nThere is an accompanying test project at [svelte-paginator-test](https://github.com/mpdaugherty/svelte-paginator-test). That project will both test installing this npm module & allow you to set up a dev server that automatically reloads as you update your code.\n\n```shell\ngit clone git@github.com:mpdaugherty/svelte-paginator.git\ngit clone git@github.com:mpdaugherty/svelte-paginator-test.git\n\ncd svelte-paginator\nnpm install\n\ncd ../svelte-paginator-test\nnpm install\nnpm run dev\n```\n\nThen visit [http://localhost:5000](http://localhost:5000)\n\n## Project structure\n\n### `src/Component.svelte`\n\nThis is the file that defines the `Paginator` component. As with all Svelte components, this file is divided into three sections, `<script>`, `<style>`, and the element definition itself.\n\n### [svelte-paginator-test](https://github.com/mpdaugherty/svelte-paginator-test)`/src/App.svelte`\n\nThis is an example page that imports & uses `Paginator`. You can modify this to quickly test your work.\n\n## Issues & Dev Process\n\nIssues are tracked with Github Issues. When completing issues, please develop on a branch and create a pull request linked to the issue you are working on.\n\nFor issue discussions, generally use comments on the Github issues so we have documentation of the decisions we've made - but SMS or email is fine as well if you need a response quickly.\n\n## Publishing to npm\n\n```shell\nnpm publish\n```\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 1],
		[3596, 7],
		[3603, 7],
		[3610, 4],
		[3617, 9],
		[3631, 1],
		[3645, 3],
		[3652, 1],
		[3659, 7],
		[3666, 11],
		[3673, 2],
		[3680, 5],
		[3687, 5],
		[3694, 4],
		[3701, 3],
		[3708, 11],
		[3715, 3],
		[3722, 5],
		[3729, 5],
		[3736, 2],
		[3743, 6],
		[3750, 1],
		[3757, 3],
		[3764, 5],
		[3778, 5],
		[3785, 3],
		[3792, 6],
		[3799, 9],
		[3806, 7],
		[3813, 9],
		[3820, 2],
		[3827, 4],
		[3834, 3],
		[3841, 10],
		[3848, 10],
		[3855, 13],
		[3862, 5],
		[3869, 1],
		[3876, 10],
		[3883, 7],
		[3890, 8],
		[3897, 5],
		[3904, 7],
		[3911, 6],
		[3918, 17],
		[3925, 19],
		[3932, 17],
		[3939, 17],
		[3946, 5],
		[3953, 3],
		[3960, 9],
		[3967, 4],
		[3974, 5],
		[3981, 4],
		[3988, 2],
		[3995, 12],
		[4002, 7],
		[4009, 1],
		[4016, 4],
		[4023, 2],
		[4030, 2],
		[4037, 5],
		[4044, 13],
		[4051, 4],
		[4058, 11],
		[4065, 8],
		[4072, 2],
		[4079, 1],
		[4086, 4],
		[4093, 7],
		[4100, 4],
		[4107, 1],
		[4114, 5],
		[4121, 10],
		[4128, 3]
	],
	"esm": true,
	"cjs": false
}
