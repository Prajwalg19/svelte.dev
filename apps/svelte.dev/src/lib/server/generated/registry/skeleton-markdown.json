{
	"name": "skeleton-markdown",
	"description": "Parse Markdown into Svelte components, designed for Skeleton.js.",
	"repo_url": "",
	"authors": ["safwansamsudeen"],
	"downloads": 8,
	"updated": "2023-06-27T10:04:22.972Z",
	"tags": ["content"],
	"typescript": false,
	"version": "0.1.4",
	"svelte_range": "^4.0.0",
	"last_rune_check_version": "0.1.4",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "skeleton-markdown",
				"version": "0.1.4",
				"size": 44962
			},
			{
				"name": "marked",
				"version": "5.1.2",
				"size": 445171
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# Skeleton Markdown\nA markdown parser that renders into Svelte Components, made for Skeleton.js. \n\nNotably, code blocks are generated using the Code Block utility.\n\nOriginal idea and code from [Svelte Markdown](https://github.com/pablo-abc/svelte-markdown).\n\n## Installation\n\nYou can install it with:\n\n```console\n$ npm i -S skeleton-markdown\n```\n\n\n## Usage\n\n```html\n<script>\n  import SkeletonMarkdown from 'skeleton-markdown'\n  const source = `\n  # This is a header\n\nThis is a paragraph.\n\n* This is a list\n* With two items\n  1. And a sublist\n  2. That is ordered\n    * With another\n    * Sublist inside\n\n| And this is | A table |\n|-------------|---------|\n| With two    | columns |`\n</script>\n\n<SkeletonMarkdown {source} />\n```\n\nThis would render something like\n\n```html\n<h1 class=\"h1\">This is a header</h1>\n<p>This is a paragraph.</p>\n<ul class=\"list\">\n  <li>This is a list</li>\n  <li>\n    With two items\n    <ol start=\"1\" class=\"list\">\n      <li>And a sublist</li>\n      <li>\n        That is ordered\n        <ul>\n          <li>With another</li>\n          <li>Sublist inside</li>\n        </ul>\n      </li>\n    </ol>\n  </li>\n</ul>\n<div class=\"table-container\">\n  <table class=\"table table-hover\">\n      <thead>\n        <tr>\n          <th>And this is</th>\n          <th>A table</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>With two</td>\n          <td>columns</td>\n        </tr>\n      </tbody>\n    </table>\n</div>\n```\n\n## Note\n\nJust like with Svelte Markdown, this package doesn't use `{@html ...}` unless you need to render HTML.\n\n## Props\n\nThe SkeletonMarkdown component accepts the following props:\n\n- `source`, _string_ or _array_ : the Markdown source to be parsed, or an array of tokens to be rendered directly.\n- `renderers`, _object (optional)_: an object where the keys represent a node type and the value is a Svelte component. This object will be merged with the default renderers. For now, you can check how the default renderers are written in the source code at `src/renderers`.\n- `options`, _object (optional)_: an object containing [options for Marked](https://marked.js.org/using_advanced#options).\n\n## Renderers\n\nTo create custom renderer for an element, you can create a Svelte component with the [default props](https://marked.js.org/using_pro#renderer), for example:\n\n_`ImageComponent.svelte`_\n```svelte\n<script>\n  export let href = \"\";\n  export let title = undefined;\n  export let text = \"\";\n</script>\n\n<img\n  src={href}\n  {title}\n  alt={text}\n/>\n```\n\nSo you can import the component and pass to the `renderers` props:\n\n```svelte\n<script>\n  import SkeletonMarkdown from \"skeleton-markdown\";\n  import ImageComponent from \"./renderers/ImageComponent.svelte\";\n  export let content;\n</script>\n\n<SkeletonMarkdown source={content} \n  renderers={{ image: ImageComponent }} \n/>\n```\n\n## Rendering From Tokens\n\nFor greater flexibility, an array of tokens may be given as `source`, in which case parsing is skipped and the tokens will be rendered directly. This alows you to generate and transform the tokens freely beforehand. Example:\n\n```html\n<script>\n  import SkeletonMarkdown from 'skeleton-markdown'\n  import { marked } from 'marked'\n\n  const tokens = marked.lexer('this is an **example**')\n\n  marked.walkTokens(tokens, token=> {\n    if (token.type == 'strong') token.type = 'em'\n    token.raw = token.raw.toUpperCase()\n  })\n</script>\n\n<SkeletonMarkdown source={tokens} />\n```\n\nThis will render the following:\n\n```html\n<p>THIS IS AN <em>EXAMPLE</em></p>\n```\n\n## Events\n\nA `parsed` event will be fired when the final tokens have been calculated, allowing you to access the raw token array if needed for things like generating Table of Contents from headings.\n\n```html\n<script>\n  import SkeletonMarkdown from 'skeleton-markdown'\n\n  const source = `# This is a header`\n\n  function handleParsed(event) {\n    //access tokens via event.detail.tokens\n    console.log(event.detail.tokens);\n  }\n</script>\n\n<SkeletonMarkdown {source} on:parsed={handleParsed}>\n```\n\n## Available renderers\n\nThese would be the property names expected by the `renderers` option.\n\n- `text` - Text rendered inside of other elements, such as paragraphs\n- `paragraph` - Paragraph (`<p>`)\n- `em` - Emphasis (`<em>`)\n- `strong` - Strong/bold (`<strong>`)\n- `hr` - Horizontal rule / thematic break (`<hr>`)\n- `blockquote` - Block quote (`<blockquote>`)\n- `del` - Deleted/strike-through (`<del>`)\n- `link` - Link (`<a>`)\n- `image` - Image (`<img>`)\n- `table` - Table (`<table>`)\n- `tablehead` - Table head (`<thead>`)\n- `tablebody` - Table body (`<tbody>`)\n- `tablerow` - Table row (`<tr>`)\n- `tablecell` - Table cell (`<td>`/`<th>`)\n- `list` - List (`<ul>`/`<ol>`)\n- `listitem` - List item (`<li>`)\n- `heading` - Heading (`<h1>`-`<h6>`)\n- `codespan` - Inline code (`<code>`)\n- `code` - Block of code (`<pre><code>`)\n- `html` - HTML node\n\n### Optional List Renderers\n\nFor fine detail styling of lists, it can be useful to differentiate between ordered and un-ordered lists.\nIf either key is missing, the default `listitem` will be used. There are two\noptional keys in the `renderers` option which can provide this:\n\n- `orderedlistitem` - A list item appearing inside an ordered list\n- `unorderedlistitem` A list item appearing inside an un-ordered list\n\nAs an example, if we have an `orderedlistitem`:\n\n```html\n<style>\n  li::marker {\n    color: blue;\n  }\n</style>\n\n<li><slot></slot></li>\n```\n\nThen numbers at the start of ordered list items would be colored blue. Bullets at the start of unordered list items\nwould remain the default text color.\n\n### Inline Markdown\n\nTo use [inline markdown](https://marked.js.org/using_advanced#inline), you can assign the prop `isInline` to the component.\n\n```html\n<SkeletonMarkdown {source} isInline />\n```\n\n## HTML rendering\n\nWhile the most common flavours of markdown let you use HTML in markdown paragraphs, due to how Svelte handles plain HTML it is currently not possible to do this with this package. A paragraph must be either _all_ HTML or _all_ markdown.\n\n```markdown\nThis is a **markdown** paragraph.\n\n<p>This is an <strong>HTML</strong> paragraph</p>\n```\n\nNote that the HTML paragraph must be enclosed within `<p>` tags.\n\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 1],
		[3596, 6],
		[3603, 4],
		[3610, 5],
		[3617, 4],
		[3638, 1],
		[3659, 1],
		[3666, 6],
		[3687, 1],
		[3708, 1],
		[3715, 4],
		[3736, 1],
		[3750, 1],
		[3757, 3],
		[3764, 1],
		[3771, 3],
		[3778, 2],
		[3785, 1],
		[3792, 1],
		[3799, 1],
		[3806, 1],
		[3813, 1],
		[3834, 1],
		[3841, 22],
		[3862, 1],
		[3876, 4],
		[3883, 1],
		[3890, 4],
		[3911, 1],
		[3925, 1],
		[3932, 5],
		[3939, 1],
		[3946, 1],
		[3960, 1],
		[3974, 1],
		[3988, 1],
		[3995, 2],
		[4030, 1],
		[4037, 14],
		[4044, 8],
		[4051, 2],
		[4065, 2],
		[4100, 13],
		[4114, 8],
		[4121, 7],
		[4128, 3]
	]
}
