{
	"name": "svelte-persisted-state",
	"description": "Persist Svelte state using local or session storage.",
	"repo_url": "https://github.com/oMaN-Rod/svelte-persisted-state",
	"authors": ["i_am_o"],
	"homepage": "https://github.com/oMaN-Rod/svelte-persisted-state#readme",
	"downloads": 183,
	"updated": "2025-02-01T12:00:33.070Z",
	"tags": ["miscellaneous"],
	"github_stars": 33,
	"typescript": true,
	"version": "1.0.0",
	"svelte_range": "^5.0.0-next.1",
	"kit_range": "^2.15.1",
	"last_rune_check_version": "1.0.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-persisted-state",
				"version": "1.0.0",
				"size": 9138
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-persisted-state\n\nSvelte 5 persisted states, [svelte-persisted-store](https://github.com/joshnuss/svelte-persisted-store), but implemented with Svelte 5 Runes.\n\n## Requirements\n\nThis package requires Svelte 5. It is not compatible with Svelte 4 or earlier versions.\n\n## Installation\n\n```bash\nnpm install svelte-persisted-state\n```\n\n## API\n\nThe `persistedState` function creates a persisted state that automatically syncs with local or session storage.\n\n### Parameters\n\n- `key`: A string key used for storage.\n- `initialValue`: The initial value of the state.\n- `options`: An optional object with the following properties:\n  - `storage`: 'local' (default) or 'session'\n  - `serializer`: Custom serializer object with `parse` and `stringify` methods\n  - `syncTabs`: Boolean to sync state across tabs (default: true)\n  - `onWriteError`: Function to handle write errors\n  - `onParseError`: Function to handle parse errors\n  - `beforeRead`: Function to process value before reading\n  - `beforeWrite`: Function to process value before writing\n\n### Return Value\n\nThe `persistedState` function returns an object with the following properties:\n\n- `current`: Get or set the current state value.\n- `reset()`: Reset the state to its initial value.\n\n## Usage\n\n### Basic Usage\n\n```javascript\nimport { persistedState } from 'svelte-persisted-state';\n\nconst myState = persistedState('myKey', 'initialValue');\n\n// Use myState.current to get or set the state\nconsole.log(myState.current);\nmyState.current = 'newValue';\n\n// Reset to initial value\nmyState.reset();\n```\n\n### Typed Usage\n\n```typescript\nimport { persistedState } from 'svelte-persisted-state';\n\ninterface UserPreferences {\n\ttheme: 'light' | 'dark';\n\tfontSize: number;\n\tnotifications: boolean;\n}\n\nconst userPreferences = persistedState<UserPreferences>(\n\t'userPreferences',\n\t{\n\t\ttheme: 'light',\n\t\tfontSize: 16,\n\t\tnotifications: true\n\t},\n\t{\n\t\tstorage: 'local',\n\t\tsyncTabs: true,\n\t\tbeforeWrite: (value) => {\n\t\t\tconsole.log('Saving preferences:', value);\n\t\t\treturn value;\n\t\t},\n\t\tonWriteError: (error) => {\n\t\t\tconsole.error('Failed to save preferences:', error);\n\t\t}\n\t}\n);\n\n// Set a new value\nfunction toggleTheme() {\n\tuserPreferences.current = {\n\t\t...userPreferences.current,\n\t\ttheme: userPreferences.current.theme === 'light' ? 'dark' : 'light'\n\t};\n}\n\nfunction toggleTheme() {\n\tuserPreferences.current.theme = userPreferences.current.theme === 'light' ? 'dark' : 'light';\n}\n\n// Using $derived for reactive computations\nconst theme = $derived(userPreferences.current.theme);\n\n// The UI will automatically update when the state changes\n```\n\n## Example\n\n```svelte\n<script lang=\"ts\">\n\timport { persistedState } from 'svelte-persisted-state';\n\n\tinterface UserPreferences {\n\t\ttheme: 'light' | 'dark';\n\t\tfontSize: number;\n\t}\n\n\tconst preferences = persistedState<UserPreferences>('preferences', {\n\t\ttheme: 'light',\n\t\tfontSize: 16\n\t});\n\n\tconst theme = $derived(preferences.current.theme);\n\tconst fontSize = $derived(preferences.current.fontSize);\n</script>\n\n<div style=\"font-size: {fontSize}px\">\n\t<button onclick={() => (preferences.current.theme = theme === 'light' ? 'dark' : 'light')}>\n\t\tSwitch to {theme === 'light' ? 'dark' : 'light'} theme\n\t</button>\n\t<button onclick={() => (preferences.current.fontSize -= 1)}> Decrease font size </button>\n\t<button onclick={() => (preferences.current.fontSize += 1)}> Increase font size </button>\n\t<p>Current theme: {theme}</p>\n\t<p>Current font size: {fontSize}px</p>\n</div>\n```\n\n## License\n\nMIT\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3918, 67],
		[3925, 14],
		[3939, 3],
		[3946, 112],
		[3953, 67],
		[3960, 72],
		[3967, 118],
		[3974, 120],
		[3981, 141],
		[3988, 98],
		[3995, 108],
		[4002, 120],
		[4009, 49],
		[4016, 169],
		[4023, 204],
		[4030, 276],
		[4037, 115],
		[4044, 223],
		[4051, 190],
		[4058, 128],
		[4065, 216],
		[4072, 330],
		[4079, 308],
		[4086, 228],
		[4093, 186],
		[4100, 512],
		[4107, 275],
		[4114, 183],
		[4121, 165],
		[4128, 221]
	],
	"esm": true,
	"cjs": false
}
