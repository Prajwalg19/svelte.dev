{
	"name": "golte",
	"description": "Render Svelte components in Go HTTP handlers.",
	"repo_url": "https://github.com/nichady/golte",
	"authors": ["nichady"],
	"homepage": "https://github.com/nichady/golte#README.md",
	"downloads": 7,
	"updated": "2024-12-16T00:15:36.132Z",
	"tags": ["server"],
	"github_stars": 234,
	"typescript": true,
	"version": "0.1.2",
	"svelte_range": "^4.2.7",
	"last_rune_check_version": "0.1.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "golte",
				"version": "0.1.2",
				"size": 72804
			},
			{
				"name": "@rollup/plugin-replace",
				"version": "5.0.7",
				"size": 26414
			},
			{
				"name": "magic-string",
				"version": "0.30.17",
				"size": 467464
			},
			{
				"name": "@jridgewell/sourcemap-codec",
				"version": "1.5.0",
				"size": 112815
			},
			{
				"name": "@rollup/pluginutils",
				"version": "5.1.4",
				"size": 58354
			},
			{
				"name": "@types/estree",
				"version": "1.0.7",
				"size": 26147
			},
			{
				"name": "estree-walker",
				"version": "2.0.2",
				"size": 50243
			},
			{
				"name": "picomatch",
				"version": "4.0.2",
				"size": 85237
			},
			{
				"name": "@sveltejs/vite-plugin-svelte",
				"version": "3.1.2",
				"size": 126232
			},
			{
				"name": "debug",
				"version": "4.4.0",
				"size": 42798
			},
			{
				"name": "ms",
				"version": "2.1.3",
				"size": 6721
			},
			{
				"name": "kleur",
				"version": "4.1.5",
				"size": 20250
			},
			{
				"name": "vitefu",
				"version": "0.2.5",
				"size": 19174
			},
			{
				"name": "deepmerge",
				"version": "4.3.1",
				"size": 31157
			},
			{
				"name": "svelte-hmr",
				"version": "0.16.0",
				"size": 75417
			},
			{
				"name": "@sveltejs/vite-plugin-svelte-inspector",
				"version": "2.1.0",
				"size": 25824
			},
			{
				"name": "esbuild",
				"version": "0.19.12",
				"size": 133381
			},
			{
				"name": "fast-glob",
				"version": "3.3.3",
				"size": 98396
			},
			{
				"name": "@nodelib/fs.stat",
				"version": "2.0.5",
				"size": 11845
			},
			{
				"name": "@nodelib/fs.walk",
				"version": "1.2.8",
				"size": 26377
			},
			{
				"name": "fastq",
				"version": "1.19.1",
				"size": 45922
			},
			{
				"name": "reusify",
				"version": "1.1.0",
				"size": 11696
			},
			{
				"name": "@nodelib/fs.scandir",
				"version": "2.1.5",
				"size": 22155
			},
			{
				"name": "run-parallel",
				"version": "1.2.0",
				"size": 6563
			},
			{
				"name": "queue-microtask",
				"version": "1.2.3",
				"size": 8367
			},
			{
				"name": "glob-parent",
				"version": "5.1.2",
				"size": 12134
			},
			{
				"name": "is-glob",
				"version": "4.0.3",
				"size": 13609
			},
			{
				"name": "is-extglob",
				"version": "2.1.1"
			},
			{
				"name": "merge2",
				"version": "1.4.1",
				"size": 8897
			},
			{
				"name": "micromatch",
				"version": "4.0.8",
				"size": 56599
			},
			{
				"name": "braces",
				"version": "3.0.3",
				"size": 44635
			},
			{
				"name": "fill-range",
				"version": "7.1.1",
				"size": 16743
			},
			{
				"name": "to-regex-range",
				"version": "5.0.1",
				"size": 22939
			},
			{
				"name": "is-number",
				"version": "7.0.0",
				"size": 9615
			},
			{
				"name": "picomatch",
				"version": "2.3.1",
				"size": 89952
			},
			{
				"name": "vite",
				"version": "5.4.19",
				"size": 3278469
			},
			{
				"name": "rollup",
				"version": "4.40.1",
				"size": 2727114
			},
			{
				"name": "esbuild",
				"version": "0.21.5",
				"size": 133372
			},
			{
				"name": "postcss",
				"version": "8.5.3",
				"size": 201969
			},
			{
				"name": "nanoid",
				"version": "3.3.11",
				"size": 32583
			},
			{
				"name": "picocolors",
				"version": "1.1.1",
				"size": 6373
			},
			{
				"name": "source-map-js",
				"version": "1.2.1",
				"size": 139872
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[1, 4],
			[4, 5],
			[4, 6],
			[4, 7],
			[0, 8],
			[8, 9],
			[9, 10],
			[8, 11],
			[8, 12],
			[8, 13],
			[8, 14],
			[8, 2],
			[8, 15],
			[15, 9],
			[0, 13],
			[0, 16],
			[0, 17],
			[17, 18],
			[17, 19],
			[19, 20],
			[20, 21],
			[19, 22],
			[22, 23],
			[23, 24],
			[22, 18],
			[17, 25],
			[25, 26],
			[26, 27],
			[17, 28],
			[17, 29],
			[29, 30],
			[30, 31],
			[31, 32],
			[32, 33],
			[29, 34],
			[0, 35],
			[35, 36],
			[36, 5],
			[35, 37],
			[35, 38],
			[38, 39],
			[38, 40],
			[38, 41]
		],
		"circular": []
	},
	"readme": "# Golte\n\n`golte` is a library for Go that allows you to render Svelte components in your http handlers, supporting SSR+hydration capabilities without requiring NodeJS.\n\n## Features\n- SSR + Hydration\n- NodeJS not required in production\n- Layouts as middleware (they can be nested)\n- Custom error pages\n- Works with Go stdlib, `gorilla/mux`, `chi`, `gin`, `echo`, or any router that allows access to the underlying `http.ResponseWriter` and `*http.Request`\n- Can compile to single, self-contained executable\n\n## How does it work?\n\n1. Svelte source files are first compiled to client and server JavaScript code (requires NodeJS during development only).\n\n2. The generated code is embedded using Go's `embed` package. A middleware is created from this which can then be registered in your router.\n\n3. From there, functions like `golte.RenderPage` and `golte.AddLayout` can be called to render components.\n\n4. After running `go build`, the end result is a single binary that houses a full web app, with complete support for SSR and hydration.\n\n## Installing\n\n### Prerequisites\n\nMake sure [Go](https://go.dev) and [NodeJS](https://nodejs.org) are installed (NodeJS is only needed during development).\n\n### Setting up project\n\nInitialize go.mod and package.json if not done so already:\n```sh\ngo mod init <projectname>\nnpm init\n```\n\nSet `{\"type\": \"module\"}` in `package.json`.\n\nInstall Golte:\n\n```sh\ngo get github.com/nichady/golte@latest\nnpm install golte@latest\n# Make sure that the Go module and npm package are the same version.\n```\n\n## Example\n\nSuppose we have the following file structure:\n```\nweb/\n    page/\n        home.svelte\n        about.svelte\n        contact.svelte\n        login.svelte\n\t\tprofile.svelte\n    layout/\n        main.svelte\n    app.html\nmain.go\n...(any other files)\n```\n\nWe can run `npx golte` to generate a `build/` directory.\nBy default, Golte will use `web/app.html` as the template file and search for `.svelte` files inside the `web/` directory (this can be changed in the config file).\n\nEach `.svelte` file will be able to be rendered inside Go code by name. The name of the components are path of the file relative to the source directory (`web/`), without the file extension.\n\nFor example:\n-  `web/page/home.svelte` => `page/home`\n-  `web/layout/main.svelte` => `layout/main`\n-  etc...\n\nSuppose we want to make a program with the following requirements:\n1. Five routes: `/`, `/about`, `/contact`, `/login`, and `/profile`.\n2. `/`, `/about`, and `/contact` will have a layout; `/login`, and `/profile` will not.\n3. `/profile` will have props passed to it, which can be accessed with \"export let\".\n\nThis is what `main.go` would look like, using `chi` as the router:\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/go-chi/chi/v5\"\n\t\"github.com/nichady/golte\"\n\n\t\"example/build\" // this package will be generated by golte\n)\n\nfunc main() {\n\tr := chi.NewRouter()\n\n\t// register the main Golte middleware\n\tr.Use(build.Golte)\n\n\tr.Group(func(r chi.Router) {\n\t\tr.Use(golte.Layout(\"layout/main\"))\n\n\t\t// these routes will have a layout\n\t\tr.Get(\"/\", golte.Page(\"page/home\"))\n\t\tr.Get(\"/about\", golte.Page(\"page/about\"))\n\t\tr.Get(\"/contact\", golte.Page(\"page/contact\"))\n\t})\n\n\tr.Get(\"/login\", golte.Page(\"page/login\"))\n\n\t// this route will have props passed to it\n\tr.Get(\"/profile\", func(w http.ResponseWriter, r *http.Request) {\n\t\tusername := \"john123\"\n\t\tage := 22\n\n\t\tgolte.RenderPage(w, r, \"page/profile\", map[string]any{\n\t\t\t\"username\": username,\n\t\t\t\"age\":      age,\n\t\t})\n\t})\n\n\thttp.ListenAndServe(\":8000\", r)\n}\n```\n\nFor more comprehensive examples using other routers, passing props, and nesting layouts, see [_examples](_examples/).\n\nFor a list of all the possible functions, see the [package docs](https://pkg.go.dev/github.com/nichady/golte).\n\n## Configuration\n\nThe build process of `golte` can be configured to change things like the source or build directory.\n\nGolte will recognize one of the following files in the root directory of your project:\n```\ngolte.config.js\ngolte.config.mjs\ngolte.config.ts\ngolte.config.mts\n```\n\nHere is an example for `golte.config.ts`:\n```typescript\nimport { Config } from \"golte/config\"\n\nexport default {\n\ttemplate: \"web/template.html\",\n\tsrcDir: \"web/components/\",\n\toutDir: \"dist/\",\n} satisfies Config;\n```\n\nFor all of the possible configuration options, see [`golte/config`](ts/public/config/index.ts).<br>\n**Note: You must set `{\"type\": \"module\"}` in your `package.json` for config file to work.**\n\nIf you wish to use TypeScript or other preprocessors in your Svelte files, you can add a normal `svelte.config.js` file to your project root.\n\n## JavaScript Exports \n\nThe `golte` npm package provides some exports that you can use in your components:\n\n### [`golte`](ts/public/index.ts)\n\n```typescript\nimport { preload } from \"golte\";\n```\n```svelte\n<a href=\"route1\" use:preload>Route1</a>\n<a href=\"route2\" use:preload={\"mount\"}>Route2</a>\n```\n\n`preload` - a Svelte action that can be used in `<a>` tags. Using this turns the `<a>` into a Golte link, stopping the page from reloading when clicked.\n\n### [`golte/stores`](ts/public/stores/index.ts)\n\n```typescript\nimport { url } from \"golte/stores\";\n```\n```svelte\n<p>The current url is {$url.href}</p>\n```\n\n`url` - a Svelte store that describes the current URL of the page\n\n## Why?\n\nI wanted a way to create web apps in Svelte while using Go as the backend language to create a single, self-contained binary. One option would be to embed a Svelte SPA into a Go binary. However, that solution lacks SSR capabilities and won't work when JavaScript is disabled.\n\nI discovered [Bud](https://github.com/livebud/bud), but it forces you to structure your project in a specific way rather than treating your program as a normal Go app with a main() function and your own router. It also requires you to install their own cli. It also doesn't support layouts (I think).\n\nThere is also [Inertia.js](https://github.com/inertiajs/inertia), but it requires NodeJS for SSR, and I don't like how layouts need to specified inside the page components.\n\nSo, I created Golte to solve these problems.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 1],
		[3596, 3],
		[3603, 4],
		[3610, 1],
		[3617, 2],
		[3624, 1],
		[3631, 1],
		[3645, 6],
		[3652, 2],
		[3666, 4],
		[3680, 164],
		[3687, 102],
		[3694, 9],
		[3701, 10],
		[3708, 9],
		[3715, 4],
		[3722, 12],
		[3729, 7],
		[3736, 2],
		[3743, 7],
		[3757, 6],
		[3771, 1],
		[3778, 8],
		[3785, 4],
		[3792, 3],
		[3799, 3],
		[3806, 3],
		[3813, 2],
		[3820, 17],
		[3827, 20],
		[3834, 17],
		[3841, 20],
		[3848, 8],
		[3855, 18],
		[3862, 8],
		[3869, 165],
		[3876, 18],
		[3883, 65],
		[3890, 10],
		[3897, 6],
		[3904, 4],
		[3911, 1],
		[3925, 4],
		[3939, 5],
		[3946, 5],
		[3953, 9],
		[3960, 6],
		[3967, 3],
		[3974, 8],
		[3981, 8],
		[3995, 5],
		[4002, 77],
		[4009, 18],
		[4016, 13],
		[4023, 12],
		[4030, 7],
		[4037, 11],
		[4044, 18],
		[4051, 4],
		[4058, 19],
		[4065, 4],
		[4072, 4],
		[4079, 5],
		[4086, 4],
		[4093, 6],
		[4100, 1],
		[4107, 16],
		[4114, 7],
		[4121, 9],
		[4128, 14]
	]
}
