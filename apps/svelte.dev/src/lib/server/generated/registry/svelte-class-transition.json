{
	"name": "svelte-class-transition",
	"description": "Transition Svelte components using CSS classes.",
	"repo_url": "https://github.com/gawlk/svelte-class-transition",
	"authors": ["gawlk"],
	"homepage": "https://github.com/gawlk/svelte-class-transition#readme",
	"downloads": 174,
	"updated": "2020-06-25T11:53:54.118Z",
	"tags": ["ui"],
	"typescript": false,
	"version": "1.0.4",
	"svelte_range": "^3.21.0",
	"last_rune_check_version": "1.0.4",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-class-transition",
				"version": "1.0.4",
				"size": 10352
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-class-transition\n\n`svelte-class-transition` is a very simple Svelte 3 component that allows you to do transitions using CSS classes.\n\nYou can find multiple examples with different use cases here: https://svelte-class-transition-examples.now.sh/\n\n## Install\n\nUsing `yarn`:\n\n```\nyarn add svelte-class-transition\n```\n\nUsing `npm`:\n\n```\nnpm install svelte-class-transition\n```\n\n## Usage\n\n### Implementation\n\nHere's how it should be used:\n\n```html\n<script>\n    import Transition from 'svelte-class-transition';\n\n    export let toggle;\n</script>\n\n<Transition\n    {toggle}\n    transitions=\"transition transform\"\n    inTransition=\"ease-out duration-1000\"\n    inState=\"opacity-0 -translate-x-16\"\n    onState=\"opacity-100 translate-x-0\"\n    outState=\"opacity-0 translate-x-16\"\n    outTransition=\"ease-in duration-1000\"\n>\n    <!-- All the classes will be applied to the slot's main element, in this case, the div below -->\n    <div>\n        ...\n    </div>\n</Transition>\n```\n\n### Props\n\n`svelte-class-transition` has several props for different use cases. All of them are optionnal but without any, the component won't do anything.\n\n#### `toggle`\n\nType: `boolean | undefined`\n\nDefault value: `undefined`\n\nThe `toggle` property is where you'll store your toggling variable. If set to `true` the `slot` will be first visible, if set to `false` it will start hidden, you should note that there is **no animation for the first state**. On change of the property, the `slot` will animate according to the other props.\n\nThere is a possiblity to not set this property:\n\n- If the component has a parent (or grand*-parent) transition component, it will listen to its changes and react according to them. The parent (or grand*-parent) transition component will wait until all the animations are finished before being hidden.\n- If the component doesn't have a parent (or grand*-parent) transition component, it will show the slot **with an animation once the DOM has fully loaded**.\n\n#### `inState`\n\nType: `string`\n\nDefault value: `''`\n\nThe `inState` property is the state from which the `slot` while come from when setting the `toggle` to `true`. If you want your component to go from `opacity-0` to `opacity-100`, you should set `inState` to `opacity-0`.\n\n#### `onState`\n\nType: `string`\n\nDefault value: `''`\n\nThe `onState` property is the state from which the `slot` while go to when setting the `toggle` to `true`. If you want your component to go from `opacity-0` to `opacity-100`, you should set `onState` to `opacity-100`.\n\n#### `outState`\n\nType: `string`\n\nDefault value: `inState`\n\nThe `outState` property is the state from which the `slot` while go to when setting the `toggle` to `false`. If you want your component to go from `opacity-100` to `opacity-0`, you should set `outState` to `opacity-0`. If you want the same `inState` and `outState`, you can skip this prop.\n\n#### `inTransition`\n\nType: `string`\n\nDefault value: `''`\n\nThe `inTransition` property is the transition the `slot` will use after `toggle` has been set to `true`. You'll want to set here the transition, the easing, the duration and eventually the delay. For example it could be: `transition ease-out duration-300`.\n\n#### `outTransition`\n\nType: `string`\n\nDefault value: `inTransition`\n\nThe `outTransition` property is the transition the `slot` will use after `toggle` has been set to `false`. You'll want to set here the transition, the easing, the duration and eventually the delay. For example it could be: `transform ease-in duration-200`. If you want the same `inTransition` and `outTransition`, you can skip this prop.\n\n#### `transitions`\n\nType: `string`\n\nDefault value: `''`\n\nThe `transitions` property is where you'll regroup your common classes from `inTranstion` and `outTransition`, like for example the transition property. It's totally optionnal and doesn't change anything inside the component, it's here to make your code look cleaner.\n\n#### `offVisible`\n\nType: `boolean`\n\nDefault value: `false`\n\nThe `offVisible` property is where you'll define if the `slot` should be `hidden` when off or not.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 206],
		[3596, 268],
		[3603, 386],
		[3610, 210],
		[3617, 246],
		[3624, 218],
		[3631, 298],
		[3638, 157],
		[3645, 91],
		[3652, 180],
		[3659, 213],
		[3666, 204],
		[3673, 144],
		[3680, 133],
		[3687, 212],
		[3694, 253],
		[3701, 227],
		[3708, 200],
		[3715, 168],
		[3722, 176],
		[3729, 184],
		[3736, 156],
		[3743, 104],
		[3750, 134],
		[3757, 125],
		[3764, 178],
		[3771, 210],
		[3778, 157],
		[3785, 219],
		[3792, 338],
		[3799, 299],
		[3806, 304],
		[3813, 255],
		[3820, 273],
		[3827, 346],
		[3834, 245],
		[3841, 313],
		[3848, 197],
		[3855, 210],
		[3862, 285],
		[3869, 296],
		[3876, 272],
		[3883, 180],
		[3890, 248],
		[3897, 271],
		[3904, 212],
		[3911, 212],
		[3918, 199],
		[3925, 160],
		[3932, 182],
		[3939, 187],
		[3946, 214],
		[3953, 204],
		[3960, 300],
		[3967, 376],
		[3974, 467],
		[3981, 418],
		[3988, 426],
		[3995, 408],
		[4002, 396],
		[4009, 237],
		[4016, 136],
		[4023, 228],
		[4030, 198],
		[4037, 191],
		[4044, 269],
		[4051, 231],
		[4058, 310],
		[4065, 345],
		[4072, 293],
		[4079, 293],
		[4086, 197],
		[4093, 373],
		[4100, 253],
		[4107, 202],
		[4114, 174],
		[4121, 147],
		[4128, 220]
	]
}
