{
	"name": "svelte-navaid",
	"description": "Implement navaid-based routing in Svelte applications.",
	"repo_url": "",
	"authors": ["jacwright"],
	"downloads": 17,
	"updated": "2019-08-26T15:30:57.833Z",
	"tags": ["router"],
	"typescript": false,
	"version": "0.1.1",
	"svelte_range": "^3.9.1",
	"last_rune_check_version": "0.1.1",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-navaid",
				"version": "0.1.1",
				"size": 11981
			},
			{
				"name": "navaid",
				"version": "1.2.0",
				"size": 16492
			},
			{
				"name": "regexparam",
				"version": "1.3.0",
				"size": 10257
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2]
		],
		"circular": []
	},
	"readme": "# svelte-navaid\n\nNavaid-based routing components for Svelte. Does not work with Sapper. Yet. I donâ€™t think. Contributions welcome.\n\n## Getting Started\n\n```bash\nnpm i --save svelte-navaid\n```\n\n```svelte\n<script>\n  import Router from 'svelte-navaid/Router.svelte';\n  import Route from 'svelte-navaid/Route.svelte';\n  import Link from 'svelte-navaid/Link.svelte';\n  import SomeComponent from './SomeComponent.svelte';\n</script>\n\n<Router>\n  <h1>Hello World!</h1>\n\n  <Link href=\"/\">Home</Link> | <Link href=\"foo/sub1\">Foo</Link> | <Link href=\"/bar?abc=def\">Bar</Link>\n\n  <Route path=\"/\">\n    <h2>Home</h2>\n  </Route>\n\n  <!-- Supports navaid wildcards -->\n  <Route path=\"/foo/*\">\n    <h2>Foo</h2>\n\n    <!-- Supports subroutes with relative URLs (prefixed with /foo/ here) -->\n    <Router>\n\n      <!-- Links are relative to the subroute they appear in -->\n      <Link href=\"sub1\">Sub 1</Link> | <Link href=\"/sub2\">Sub 2</Link>\n\n      <Route path=\"/sub1\">\n        <h3>Sub Foo 1</h3>\n      </Route>\n\n      <Route path=\"/sub2\">\n        <h3>Sub Foo 2</h3>\n      </Route>\n\n    </Router>\n  </Route>\n\n  <!-- Supports slots or component prop, a prop \"params\" will be passed to it -->\n  <Route path=\"/bar\" component={SomeComponent}/>\n\n  <!-- Supports passing params -->\n  <Route path=\"/things/:id\" let:params>\n    id: {params.id}\n  </Route>\n\n  <!-- Supports 404 pages -->\n  <Route>\n    <h2>Page Not Found</h2>\n  </Route>\n</Router>\n```\n\nUse hash-based routing for single-page apps that are hosted on a server which doesn't support it.\n\n```svelte\n<script>\n  import Router from 'svelte-navaid/Router.svelte';\n  import Route from 'svelte-navaid/Route.svelte';\n  import Link from 'svelte-navaid/Link.svelte';\n  import navaidHash from 'svelte-navaid/navaid-hash';\n</script>\n\n<Router library={navaidHash}>\n  <h1>Hello World!</h1>\n\n  <!-- links will be converted to their hash equivalent (e.g. #/foo/sub1) -->\n  <Link href=\"/\">Home</Link> | <Link href=\"foo/sub1\">Foo</Link> | <Link href=\"/bar?abc=def\">Bar</Link>\n\n  <Route path=\"/\">\n    <h2>Home</h2>\n  </Route>\n\n  <Route path=\"/foo/*\">\n    <h2>Foo</h2>\n\n    <!-- Supports subroutes with relative URLs (prefixed with /foo/ here) -->\n    <Router>\n\n      <!-- Links are relative to the subroute they appear in -->\n      <Link href=\"sub1\">Sub 1</Link> | <Link href=\"/sub2\">Sub 2</Link>\n\n      <Route path=\"/sub1\">\n        <h3>Sub Foo 1</h3>\n      </Route>\n\n      <Route path=\"/sub2\">\n        <h3>Sub Foo 2</h3>\n      </Route>\n\n    </Router>\n  </Route>\n\n  <Route path=\"/bar\">\n    <h2>bar</h2>\n  </Route>\n</Router>\n```\n\nNavigate to paths programmatically. The first 2 options are recommended because they will use the context of the router.\nThis allows using the path relative to the nearest router vs the whole application.\n\n```svelte\n<script>\n  import Router from 'svelte-navaid/Router.svelte';\n  import Route from 'svelte-navaid/Route.svelte';\n\n  let navigate;\n</script>\n\n<Router bind:navigate>\n  <h1>Hello World!</h1>\n\n  <Route path=\"/\">\n    <button on:click={() => navigate('bar')}>Go To Bar</button>\n  </Route>\n\n  <Route path=\"/bar\">\n    <button on:click={() => navigate('/')}>Go Home</button>\n  </Route>\n</Router>\n```\n\n\n```svelte\n<script>\n  import { getContext } from 'svelte';\n\n  const navigate = getContext('navigate');\n</script>\n\n<button on:click={() => navigate('bar')}>Go To Bar</button>\n```\n\nWhen using the following method, you must use the full path, even if within nested routes (e.g. \"/blog/articles/23\"). It\ndoes not know the base URL. If using the hash library this method will also require you use the hash (e.g. \"#/blog/articles/23\").\nIf you write your components using one of the previous two methods, they will be more portable and maintainable.\n\n```svelte\n<script>\n  import { navigate } from 'svelte-navaid';\n</script>\n\n<button on:click={() => navigate('bar')}>Go To Bar</button>\n```\n\n## Testing\n\n```bash\nnpm run dev\n```\n\nThis will start a server where you can view a simple demo app which shows off the router and its features.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 3],
		[3596, 40],
		[3603, 9],
		[3610, 6],
		[3617, 10],
		[3624, 1],
		[3631, 6],
		[3638, 22],
		[3645, 7],
		[3652, 6],
		[3659, 6],
		[3666, 9],
		[3673, 4],
		[3680, 6],
		[3687, 4],
		[3694, 5],
		[3701, 5],
		[3708, 3],
		[3715, 3],
		[3722, 5],
		[3729, 6],
		[3736, 2],
		[3743, 15],
		[3750, 13],
		[3757, 7],
		[3764, 22],
		[3771, 5],
		[3778, 15],
		[3785, 16],
		[3792, 10],
		[3799, 5],
		[3806, 12],
		[3813, 18],
		[3820, 4],
		[3827, 11],
		[3834, 6],
		[3841, 1],
		[3848, 3],
		[3855, 4],
		[3862, 12],
		[3869, 1],
		[3876, 3],
		[3883, 7],
		[3890, 6],
		[3897, 6],
		[3904, 14],
		[3911, 7],
		[3918, 2],
		[3925, 6],
		[3932, 9],
		[3939, 3],
		[3946, 6],
		[3953, 2],
		[3960, 10],
		[3967, 6],
		[3974, 9],
		[3981, 8],
		[3988, 9],
		[3995, 29],
		[4002, 16],
		[4009, 6],
		[4016, 2],
		[4023, 13],
		[4030, 14],
		[4037, 12],
		[4044, 13],
		[4051, 12],
		[4058, 4],
		[4065, 5],
		[4072, 6],
		[4079, 5],
		[4086, 2],
		[4093, 12],
		[4100, 6],
		[4107, 7],
		[4114, 17],
		[4121, 13],
		[4128, 3]
	]
}
