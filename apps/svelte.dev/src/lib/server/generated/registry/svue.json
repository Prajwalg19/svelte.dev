{
	"name": "svue",
	"description": "Adds Vue-style reactive stores with data and computed properties.",
	"repo_url": "https://github.com/freedmand/svue",
	"authors": ["freedmand"],
	"homepage": "https://github.com/freedmand/svue#readme",
	"downloads": 12,
	"updated": "2020-02-14T17:57:58.525Z",
	"tags": ["miscellaneous"],
	"github_stars": 8,
	"typescript": false,
	"version": "1.5.3",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "1.5.3",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svue",
				"version": "1.5.3",
				"size": 17616
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svue\n\nSvue is a small (~2kb) library bringing Vue-style reactive stores with data and computed properties into Svelte.\n\nThe concise format leverages Svelte’s built-in store capabilities, allowing you to create structures like:\n\n```javascript\nexport const sv = new Svue({\n  data() {\n    return {\n      x: 2,\n      y: 3\n    }\n  },\n  computed: {\n    z(x, y) {\n      return x + y;\n    },\n  }\n});\n```\n\nYou can then bring these simple reactive stores into your Svelte components:\n\n```html\n<script>\n  import { sv } from \"./example.js\";\n</script>\n\n<div>x: {$sv.x}</div>\n<div>y: {$sv.y}</div>\n<div>z (x + y): {$sv.z}</div>\n\n<div>\n  <button on:click={() => ($sv.x += 1)}>Increment X</button>\n  <button on:click={() => ($sv.y += 1)}>Increment Y</button>\n</div>\n```\n\nYou can also mess around with the Svue store in plain JavaScript:\n\n```javascript\nsv.x = 10;\nsv.y = 15;\nconsole.log(sv.z); // logs 25\nsv.y = 0;\nconsole.log(sv.z); // logs 10\n```\n\n# Installation\n\nInstall simply with:\n\n```bash\nnpm install svue\n```\n\nThen in a JavaScript file you can create a new store with:\n\n```javascript\nimport { Svue } from 'svue';\n\nexport const store = new Svue({\n  data() {\n    return {\n      ...\n    }\n  },\n  computed: {\n    ...\n  }\n```\n\nAnd use the store in your Svelte component, using the traditional `$`-prefix:\n\n```html\n<script>\n  import {store} from './store.js';\n</script>\n\n<div>$store.x</div>\n```\n\n# Example\n\nClone this repository and run:\n\n```bash\nnpm install\nnpm run dev\n```\n\nBrowse to the files `src/App.svelte` and `src/example.js` in this repository. Navigate your browser to port 8080 and open up the console. Following the code should give an example of how Svue works in practice.\n\n# Guide\n\nSvue leverages Svelte’s `writable` and `derived` wrappers from `svelte/store`, providing a more convenient syntax for declaring complex webs of dependencies.\n\nYou initialize a Svue object with a JavaScript object that currently supports two properties, `data()` and `computed`.\n\nThe `data()` property is a function that returns the initial data for the Svue store. We treat `data()` as a function so that objects/arrays are returned fresh each time.\n\n```javascript\nconst car = new Svue({\n  data() {\n    return {\n      make: \"Nissan\",\n      model: \"Rogue\",\n      year: 2015,\n    }\n  }\n});\n```\n\nThe `computed` property is an object that is used to return derived values based on the store’s properties. Each field of `computed` is a function that returns a value based on parameters.\n\nFor example, we can extend our Svue store in the previous example to auto-calculate a car’s name based on its make and model.\n\n```javascript\nconst car = new Svue({\n  data() {\n    return {\n      make: \"Nissan\",\n      model: \"Rogue\",\n      year: 2015,\n    }\n  },\n  computed: {\n    name(make, model) {\n      return `${make} ${model}`;\n    }\n  },\n});\n```\n\nHere, `name(make, model) { ... }` means we are creating a new derived property on the Svue store called `name` that depends on the `make` and `model` properties. Any time the `make` or `model` change, the `name` will auto-update.\n\nComputed properties can also depend on each other. Let’s extend our example to have a `nameWithYear` field that depends on `name` and `year`:\n\n```javascript\nconst car = new Svue({\n  data() {\n    return {\n      make: \"Nissan\",\n      model: \"Rogue\",\n      year: 2015,\n    }\n  },\n  computed: {\n    nameWithYear(name, year) {\n      return `${name} (${year})`;\n    },\n    name(make, model) {\n      return `${make} ${model}`;\n    }\n  },\n});\n```\n\nNotice how the order of computed properties does not matter, even though `nameWithYear` depends on `name` which comes after it.\n\nUnder the hood, this is all implemented as `writable` (data) and `derived` (computed) objects from `svelte/store`. Getter and setter methods are instantiated dynamically allowing simple JavaScript interaction with Svue stores. The entire Svue store has a subscription function per the Svelte store contract, allowing it to be used in any Svelte component prefixed with `$` (see examples above).\n\n# License\n\n[MIT](https://github.com/freedmand/svue/blob/master/LICENSE)\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 5],
		[3603, 16],
		[3610, 20],
		[3617, 2],
		[3624, 6],
		[3631, 1],
		[3638, 17],
		[3645, 21],
		[3652, 9],
		[3659, 2],
		[3666, 22],
		[3673, 2],
		[3680, 13],
		[3687, 2],
		[3694, 1],
		[3701, 5],
		[3708, 7],
		[3715, 1],
		[3722, 2],
		[3729, 3],
		[3736, 4],
		[3743, 18],
		[3750, 6],
		[3757, 7],
		[3764, 10],
		[3771, 16],
		[3778, 9],
		[3785, 12],
		[3792, 3],
		[3799, 3],
		[3806, 19],
		[3813, 5],
		[3820, 10],
		[3827, 5],
		[3834, 8],
		[3841, 3],
		[3848, 3],
		[3855, 5],
		[3862, 77],
		[3869, 3],
		[3876, 4],
		[3883, 4],
		[3890, 19],
		[3897, 6],
		[3904, 16],
		[3911, 2],
		[3918, 6],
		[3925, 1],
		[3932, 2],
		[3939, 8],
		[3946, 17],
		[3953, 7],
		[3960, 1],
		[3967, 21],
		[3974, 12],
		[3981, 2],
		[3988, 18],
		[3995, 4],
		[4002, 1],
		[4009, 3],
		[4016, 7],
		[4023, 4],
		[4030, 20],
		[4037, 20],
		[4044, 25],
		[4051, 6],
		[4058, 4],
		[4065, 17],
		[4079, 10],
		[4093, 9],
		[4100, 16],
		[4107, 9],
		[4114, 12],
		[4121, 10],
		[4128, 2],
		[4135, 8]
	]
}
