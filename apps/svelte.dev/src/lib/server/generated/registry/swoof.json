{
	"name": "swoof",
	"description": "Integrate Google Firebase Firestore, Auth, Storage, Functions.",
	"repo_url": "https://github.com/ampatspell/swoof",
	"authors": ["ampatspell"],
	"homepage": "https://github.com/ampatspell/swoof#readme",
	"downloads": 42,
	"updated": "2020-10-24T01:36:36.586Z",
	"tags": ["integration"],
	"github_stars": 0,
	"typescript": false,
	"version": "0.1.9",
	"svelte_range": "^3.29.4",
	"last_rune_check_version": "0.1.9",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "swoof",
				"version": "0.1.9",
				"size": 2611464
			},
			{
				"name": "firebase",
				"version": "7.24.0",
				"size": 19007469
			},
			{
				"name": "@firebase/app",
				"version": "0.6.11",
				"size": 453412
			},
			{
				"name": "tslib",
				"version": "1.14.1",
				"size": 33965
			},
			{
				"name": "dom-storage",
				"version": "2.1.0",
				"size": 17490
			},
			{
				"name": "@firebase/util",
				"version": "0.3.2",
				"size": 662454
			},
			{
				"name": "xmlhttprequest",
				"version": "1.8.0"
			},
			{
				"name": "@firebase/logger",
				"version": "0.2.6",
				"size": 75126
			},
			{
				"name": "@firebase/app-types",
				"version": "0.6.1",
				"size": 9460
			},
			{
				"name": "@firebase/component",
				"version": "0.1.19",
				"size": 109825
			},
			{
				"name": "@firebase/auth",
				"version": "0.15.0",
				"size": 5540927
			},
			{
				"name": "@firebase/auth-types",
				"version": "0.10.1",
				"size": 15175
			},
			{
				"name": "@firebase/storage",
				"version": "0.3.43",
				"size": 1076451
			},
			{
				"name": "@firebase/storage-types",
				"version": "0.3.13",
				"size": 4758
			},
			{
				"name": "@firebase/database",
				"version": "0.6.13",
				"size": 6423115
			},
			{
				"name": "faye-websocket",
				"version": "0.11.3",
				"size": 30705
			},
			{
				"name": "websocket-driver",
				"version": "0.7.4",
				"size": 67439
			},
			{
				"name": "http-parser-js",
				"version": "0.5.10",
				"size": 26471
			},
			{
				"name": "safe-buffer",
				"version": "5.2.1",
				"size": 32101
			},
			{
				"name": "websocket-extensions",
				"version": "0.1.4",
				"size": 55037
			},
			{
				"name": "@firebase/database-types",
				"version": "0.5.2",
				"size": 5702
			},
			{
				"name": "@firebase/auth-interop-types",
				"version": "0.1.5",
				"size": 2053
			},
			{
				"name": "@firebase/polyfill",
				"version": "0.3.36",
				"size": 4414
			},
			{
				"name": "core-js",
				"version": "3.6.5",
				"size": 663758
			},
			{
				"name": "promise-polyfill",
				"version": "8.1.3",
				"size": 42465
			},
			{
				"name": "whatwg-fetch",
				"version": "2.0.4",
				"size": 23102
			},
			{
				"name": "@firebase/analytics",
				"version": "0.6.0",
				"size": 388397
			},
			{
				"name": "@firebase/installations",
				"version": "0.4.17",
				"size": 556897
			},
			{
				"name": "idb",
				"version": "3.0.2",
				"size": 198860
			},
			{
				"name": "@firebase/installations-types",
				"version": "0.3.4",
				"size": 2326
			},
			{
				"name": "@firebase/analytics-types",
				"version": "0.4.0",
				"size": 8161
			},
			{
				"name": "@firebase/firestore",
				"version": "1.18.0",
				"size": 26214242
			},
			{
				"name": "node-fetch",
				"version": "2.6.1",
				"size": 157766
			},
			{
				"name": "@grpc/grpc-js",
				"version": "1.13.3",
				"size": 1967741
			},
			{
				"name": "@grpc/proto-loader",
				"version": "0.7.15",
				"size": 121381
			},
			{
				"name": "lodash.camelcase",
				"version": "4.3.0"
			},
			{
				"name": "long",
				"version": "5.3.2",
				"size": 139458
			},
			{
				"name": "protobufjs",
				"version": "7.5.0",
				"size": 2878515
			},
			{
				"name": "@protobufjs/aspromise",
				"version": "1.1.2"
			},
			{
				"name": "@protobufjs/base64",
				"version": "1.1.2"
			},
			{
				"name": "@protobufjs/codegen",
				"version": "2.0.4"
			},
			{
				"name": "@protobufjs/eventemitter",
				"version": "1.1.0"
			},
			{
				"name": "@protobufjs/fetch",
				"version": "1.1.0"
			},
			{
				"name": "@protobufjs/inquire",
				"version": "1.1.0"
			},
			{
				"name": "@protobufjs/float",
				"version": "1.0.2"
			},
			{
				"name": "@protobufjs/path",
				"version": "1.1.2"
			},
			{
				"name": "@protobufjs/pool",
				"version": "1.1.0"
			},
			{
				"name": "@protobufjs/utf8",
				"version": "1.1.0"
			},
			{
				"name": "@types/node",
				"version": "22.15.3",
				"size": 2350386
			},
			{
				"name": "undici-types",
				"version": "6.21.0",
				"size": 83680
			},
			{
				"name": "yargs",
				"version": "17.7.2",
				"size": 292421
			},
			{
				"name": "y18n",
				"version": "5.0.8",
				"size": 23435
			},
			{
				"name": "cliui",
				"version": "8.0.1",
				"size": 32314
			},
			{
				"name": "wrap-ansi",
				"version": "7.0.0",
				"size": 10648
			},
			{
				"name": "ansi-styles",
				"version": "4.3.0",
				"size": 16978
			},
			{
				"name": "color-convert",
				"version": "2.0.1",
				"size": 27189
			},
			{
				"name": "color-name",
				"version": "1.1.4",
				"size": 6693
			},
			{
				"name": "string-width",
				"version": "4.2.3",
				"size": 5161
			},
			{
				"name": "strip-ansi",
				"version": "6.0.1",
				"size": 4029
			},
			{
				"name": "ansi-regex",
				"version": "5.0.1",
				"size": 5609
			},
			{
				"name": "emoji-regex",
				"version": "8.0.0",
				"size": 48255
			},
			{
				"name": "is-fullwidth-code-point",
				"version": "3.0.0",
				"size": 4994
			},
			{
				"name": "escalade",
				"version": "3.2.0",
				"size": 12385
			},
			{
				"name": "yargs-parser",
				"version": "21.1.1",
				"size": 128470
			},
			{
				"name": "get-caller-file",
				"version": "2.0.5",
				"size": 4719
			},
			{
				"name": "require-directory",
				"version": "2.1.1"
			},
			{
				"name": "@js-sdsl/ordered-map",
				"version": "4.4.2",
				"size": 400201
			},
			{
				"name": "@grpc/proto-loader",
				"version": "0.5.6",
				"size": 29479
			},
			{
				"name": "protobufjs",
				"version": "6.11.4",
				"size": 14657694
			},
			{
				"name": "long",
				"version": "4.0.0"
			},
			{
				"name": "@types/long",
				"version": "4.0.2",
				"size": 13261
			},
			{
				"name": "@firebase/firestore-types",
				"version": "1.14.0",
				"size": 14264
			},
			{
				"name": "@firebase/webchannel-wrapper",
				"version": "0.4.0",
				"size": 3209694
			},
			{
				"name": "@firebase/functions",
				"version": "0.5.1",
				"size": 256458
			},
			{
				"name": "@firebase/functions-types",
				"version": "0.3.17",
				"size": 5745
			},
			{
				"name": "@firebase/messaging-types",
				"version": "0.5.0",
				"size": 4088
			},
			{
				"name": "@firebase/messaging",
				"version": "0.7.1",
				"size": 536467
			},
			{
				"name": "@firebase/performance",
				"version": "0.4.2",
				"size": 502571
			},
			{
				"name": "@firebase/performance-types",
				"version": "0.0.13",
				"size": 4448
			},
			{
				"name": "@firebase/remote-config",
				"version": "0.1.28",
				"size": 399199
			},
			{
				"name": "@firebase/remote-config-types",
				"version": "0.1.9",
				"size": 5918
			},
			{
				"name": "observable-membrane",
				"version": "1.1.5",
				"size": 94384
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[2, 4],
			[2, 5],
			[5, 3],
			[2, 6],
			[2, 7],
			[2, 8],
			[2, 9],
			[9, 3],
			[9, 5],
			[1, 10],
			[10, 11],
			[1, 5],
			[1, 12],
			[12, 3],
			[12, 5],
			[12, 9],
			[12, 13],
			[1, 14],
			[14, 3],
			[14, 5],
			[14, 15],
			[15, 16],
			[16, 17],
			[16, 18],
			[16, 19],
			[14, 7],
			[14, 9],
			[14, 20],
			[20, 8],
			[14, 21],
			[1, 22],
			[22, 23],
			[22, 24],
			[22, 25],
			[1, 26],
			[26, 3],
			[26, 5],
			[26, 7],
			[26, 9],
			[26, 27],
			[27, 28],
			[27, 3],
			[27, 5],
			[27, 9],
			[27, 29],
			[26, 30],
			[1, 8],
			[1, 31],
			[31, 3],
			[31, 32],
			[31, 33],
			[33, 34],
			[34, 35],
			[34, 36],
			[34, 37],
			[37, 38],
			[37, 39],
			[37, 40],
			[37, 41],
			[37, 42],
			[42, 38],
			[42, 43],
			[37, 44],
			[37, 43],
			[37, 45],
			[37, 46],
			[37, 47],
			[37, 48],
			[48, 49],
			[37, 36],
			[34, 50],
			[50, 51],
			[50, 52],
			[52, 53],
			[53, 54],
			[54, 55],
			[55, 56],
			[53, 57],
			[57, 58],
			[58, 59],
			[57, 60],
			[57, 61],
			[53, 58],
			[52, 58],
			[52, 57],
			[50, 62],
			[50, 57],
			[50, 63],
			[50, 64],
			[50, 65],
			[33, 66],
			[31, 5],
			[31, 7],
			[31, 67],
			[67, 68],
			[68, 69],
			[68, 70],
			[68, 48],
			[68, 45],
			[68, 46],
			[68, 47],
			[68, 42],
			[68, 44],
			[68, 39],
			[68, 40],
			[68, 43],
			[68, 38],
			[68, 41],
			[67, 35],
			[31, 9],
			[31, 71],
			[31, 72],
			[1, 73],
			[73, 3],
			[73, 32],
			[73, 9],
			[73, 74],
			[73, 75],
			[1, 76],
			[76, 28],
			[76, 3],
			[76, 5],
			[76, 9],
			[76, 27],
			[76, 75],
			[1, 77],
			[77, 3],
			[77, 5],
			[77, 7],
			[77, 9],
			[77, 27],
			[77, 78],
			[1, 27],
			[1, 79],
			[79, 3],
			[79, 5],
			[79, 7],
			[79, 9],
			[79, 27],
			[79, 80],
			[0, 81]
		],
		"circular": []
	},
	"readme": "# Swoof\n\nSwoof is Google Firebase Firestore, Auth, Storage, Functions library for Svelte.\n\n> Docs are coming.\n\nSee `/dummy` for some examples.\n\n<!-- TOC depthFrom:2 -->\n\n- [Setting up](#setting-up)\n- [API](#api)\n  - [swoof](#swoof)\n    - [configure(name, config): undefined](#configurename-config-undefined)\n    - [create(identifier, name): store](#createidentifier-name-store)\n    - [store(identifier): store or undefined](#storeidentifier-store-or-undefined)\n    - [destroy(): undefined](#destroy-undefined)\n  - [Model](#model)\n    - [writable(model): svelte/writable](#writablemodel-sveltewritable)\n    - [Properties](#properties)\n    - [load()](#load)\n  - [Store](#store)\n    - [doc(path): DocumentReference](#docpath-documentreference)\n    - [collection(path): CollectionReference](#collectionpath-collectionreference)\n    - [serverTimestamp(): firestore.FieldValue.ServerTimestamp](#servertimestamp-firestorefieldvalueservertimestamp)\n  - [DocumentReference](#documentreference)\n    - [id: string](#id-string)\n    - [path: string](#path-string)\n    - [collection(path): CollectionReference](#collectionpath-collectionreference-1)\n    - [new(props): Document](#newprops-document)\n    - [existing(): Document](#existing-document)\n    - [async load({ optional: false }): Document or undefined](#async-load-optional-false--document-or-undefined)\n  - [CollectionReference](#collectionreference)\n    - [id: string](#id-string-1)\n    - [path: string](#path-string-1)\n    - [doc(path): DocumentReference](#docpath-documentreference-1)\n    - [conditions](#conditions)\n    - [query({ type: 'array' }): ArrayQuery or SingleQuery](#query-type-array--arrayquery-or-singlequery)\n    - [async load(): Array<Document>](#async-load-arraydocument)\n    - [first({ optional: false }): Document or undefined](#first-optional-false--document-or-undefined)\n  - [Document extends Model](#document-extends-model)\n    - [store: Store](#store-store)\n    - [ref: DocumentReference](#ref-documentreference)\n    - [id: string](#id-string-2)\n    - [path: string](#path-string-2)\n    - [promise: Promise<Document>](#promise-promisedocument)\n    - [data: ObjectProxy](#data-objectproxy)\n    - [merge(props): undefined](#mergeprops-undefined)\n    - [async load({ force: false }): Document](#async-load-force-false--document)\n    - [async reload(): Document](#async-reload-document)\n    - [async save({ force: false, merge: false }): Document](#async-save-force-false-merge-false--document)\n    - [async delete(): Document](#async-delete-document)\n    - [serialized: Object](#serialized-object)\n    - [toJSON(): Object](#tojson-object)\n  - [Query extends Model](#query-extends-model)\n    - [promise: Promise<Query>](#promise-promisequery)\n    - [async load({ force: false }): Query](#async-load-force-false--query)\n    - [reload(): Query](#reload-query)\n    - [string: string](#string-string)\n    - [serialized: object](#serialized-object)\n    - [content](#content)\n  - [Auth](#auth)\n    - [Sign in](#sign-in)\n    - [Link anonymous to credentials](#link-anonymous-to-credentials)\n    - [User](#user)\n  - [Storage](#storage)\n    - [Task extends Model](#task-extends-model)\n  - [Functions](#functions)\n- [Issues](#issues)\n  - [process is not defined](#process-is-not-defined)\n  - ['registerComponent' of undefined](#registercomponent-of-undefined)\n- [TODO](#todo)\n\n<!-- /TOC -->\n\n## Setting up\n\n```\n$ npm install swoof --save-dev\n```\n\n``` svelte\n// App.svete\n<script>\n  import { swoof, state, setGlobal, User } from 'swoof';\n  import SomethingNice from './SomethingNice.svelte';\n\n  class FancyUser extends User {\n  }\n\n  let { firebase } = process.env.CONFIG;\n\n  let config = {\n    firebase: {\n      apiKey: \"...\",\n      authDomain: \"...\",\n      databaseURL: \"...\",\n      projectId: \"...\",\n      storageBucket: \"...\",\n      messagingSenderId: \"...\",\n      appId: \"...\"\n    },\n    firestore: {\n      enablePersistence: true\n    },\n    swoof: {\n      auth: {\n        User: FancyUser\n      },\n      // override default region for store.functions\n      // functions: {\n      //   region: 'us-central1'\n      // }\n    }\n  };\n\n  // internally creates FirebaseApp named main\n  swoof.configure('main', config);\n\n  // creates store named `main` using firebase app named `main`\n  // swoof supports multiple firebase apps\n  let store = swoof.create('main', 'main');\n\n  // Optional tools for playing around in console\n  setGlobal({ store });\n  setGlobal({ state });\n</script>\n\n<SomethingNice/>\n\n<style>\n</style>\n```\n\n``` javascript\n// console\nawait store.doc('message/hello').new({ text: 'hey there' }).save();\n```\n\nIf you're getting weird build or runtime errors, see below.\n\n## API\n\n### swoof\n\n``` javascript\nimport { swoof } from 'swoof';\n```\n\n#### configure(name, config): undefined\n\nCreates FirebaseApp and links it to the name.\n\n#### create(identifier, name): store\n\nCreates and returns swoof store with given identifier and configuration name.\n\n#### store(identifier): store or undefined\n\nReturns existing store for identifier.\n\n``` javascript\nswoof.create('main', 'production'); // once\n\n// somewhere else\nlet store = swoof.store('main');\n```\n\n#### destroy(): undefined\n\nDestroys internal FirebaseApp instances\n\n### Model\n\n> Soon. See /dummy for examples\n\n``` javascript\n// lib/messages.js\nimport { Model, properties } from 'swoof';\n\nconst {\n  attr,\n  models,\n  tap\n} = properties;\n\nclass Message extends Model {\n\n  constructor(message) {\n    super();\n    // tap doesn't bind, just forwards change notifications in this context\n    this.property('doc', tap(doc));\n  }\n\n  get data() {\n    return this.doc.data;\n  }\n\n  get text() {\n    return this.data.text;\n  }\n\n  async save() {\n    await this.doc.save();\n  }\n\n}\n\nexport default class Messages extends Model {\n\n  constructor(store) {\n    super();\n    this.store = this;\n    this.coll = store.collection('messages');\n\n    // query autosubscribes to ref.onSnapshot\n    this.property('query', attr(this.coll.orderBy('createdAt').query()));\n\n    // Message models are automatically created for each document.\n    // then added/removed based on snapshot.docChanges\n    this.property('messages', models('query.content', doc => new Message(doc)));\n  }\n\n  async add(text) {\n    let { store } = this;\n    let doc = this.coll.doc().new({\n      text,\n      createdAt: store.serverTimestamp();\n    });\n    await doc.save();\n  }\n\n}\n```\n\n``` svelte\n<script>\n  import { store } from 'swoof';\n  import Messages from './lib/messages';\n\n  // Writable when subscribed starts all onSnapshot listeners and\n  // property change notifications\n  // Everything is torn down when last subscriber unsubscribes.\n  let messages = writable(new Messages(store));\n</script>\n\n<!-- use \"$\" only for `messages` - first level -->\n\n<div>{$messages.count} messages.</div>\n<div>\n  {#each $messages.message as message}\n    <div>{message.text}</div>\n  {/each}\n</div>\n```\n\n#### writable(model): svelte/writable\n\nCreates Svelte writable for sfoof model instance or tree.\n\n#### Properties\n\n* attr\n* array\n* models\n* tap\n* alias\n* logger\n\n#### load()\n\n``` javascript\nawait load(....modelsOrPromises);\n```\n\n### Store\n\n``` javascript\nimport { swoof } from 'swoof';\nlet store = swoof.store('main');\n```\n\n#### doc(path): DocumentReference\n\nCreates swoof firestore document reference.\n\n``` javascript\nlet ref = store.doc('messages/first');\n```\n\n#### collection(path): CollectionReference\n\nCreates swoof firestore collection reference.\n\n``` javascript\nlet ref = store.doc('messages/first/comments');\n```\n\n#### serverTimestamp(): firestore.FieldValue.ServerTimestamp\n\n``` javascript\nlet doc = store.doc('messages/first').new({\n  text: 'hey there',\n  createdAt: store.serverTimestamp()\n});\nawait doc.save();\n```\n\n### DocumentReference\n\n``` javascript\nlet ref = store.doc('messages/first');\nlet ref = store.collection('messages').doc('first');\nlet ref = store.collection('messages').doc(); // generated id\n```\n\n#### id: string\n\nDocument id\n\n#### path: string\n\nDocument path\n\n#### collection(path): CollectionReference\n\nCreates nested Collection Reference\n\n``` javascript\nlet coll = store.doc('messages/first').collection('comments');\n```\n\n#### new(props): Document\n\nCreates Document instance which is not automatically subscribed to onSnapshot listener.\n\nSubscription to onSnapshot happens right after `save` or `load`.\n\n``` javascript\nlet doc = store.doc('messages/first').new({\n  ok: true\n});\n\n// doc.isNew === true\n// doc.isSaved === false\n\nawait doc.save();\n\n// doc.isNew === false\n// now doc is subscribed to onSnashot listener\n```\n\n#### existing(): Document\n\nCreates Document instance which is automatically subscribed to onSnapshot listener.\n\n``` javascript\nlet doc = store.doc('messages/first').existing();\n// doc.isNew === false\n```\n\n#### async load({ optional: false }): Document or undefined\n\nLoads document and creates Document instance for it.\n\n``` javascript\nlet doc = await store.doc('messages/first').load({ optional: true });\n```\n\nIf document doesn't exist and optional is:\n* `true`: `undefined` is returned\n* `false`: `SwoofError` with `{ code: 'document/missing' }` is thrown\n\n### CollectionReference\n\n#### id: string\n\nDollection id\n\n#### path: string\n\nCollection full path\n\n#### doc(path): DocumentReference\n\nCreates nested document reference\n\n``` javascript\nlet ref = store.collection('messages').doc(); // generated id\nlet ref = store.collection('messages').doc('first');\n```\n\n#### conditions\n\nThere are also all firestore condition operators which all also return `QueryableReference` for further conditions and `query()`, `load()` methods.\n\n* where()\n* orderBy()\n* limit()\n* limitToLast()\n* startAt()\n* startAfter()\n* endAt()\n* endBefore()\n\n#### query({ type: 'array' }): ArrayQuery or SingleQuery\n\nCreates `onSnapshot` supporting Query instance. There are two types: `array`, `single`.\n\n* array query has `content` property which is array of Document instances\n* single query has `content` property which is Document instance or null\n\n``` javascript\nlet array = store.collection('messages').query();\nlet single = store.collection('messages').orderBy('createdAt', 'asc').limit(1).query({ type: 'single' });\n```\n\n#### async load(): Array<Document>\n\nLoads documents from firestore and creates Document instances for each of them.\n\n``` javascript\nlet ref = store.collection('messages').load();\nlet array = await ref.lod(); // [ <Document>, ... ]\n```\n\n#### first({ optional: false }): Document or undefined\n\nLoads first document from firestore and creates Document instance\n\n``` javascript\nlet zeeba = await store.collection('messages').where('name', '==', 'zeeba').limit(1).first();\n```\n\nIf document doesn't exist and optional is:\n* `true`: `undefined` is returned\n* `false`: `SwoofError` with `{ code: 'document/missing' }` is thrown\n\n### Document extends Model\n\nDocument instance represents one firestore document.\n\n``` javascript\nlet doc = store.doc('messages/first').new({\n  ok: true\n});\n```\n\n#### store: Store\n\nStore for which this document is created.\n\n#### ref: DocumentReference\n\nDocumentReference for this document\n\n#### id: string\n\nDocument id\n\n#### path: string\n\nDocument full path\n\n#### promise: Promise<Document>\n\nPromise which is resolved after 1st load or 1st onSnapshot call\n\n#### data: ObjectProxy\n\nDocument's data.\n\n``` javascript\nlet doc = await store.doc('messages/first').load();\ndoc.data.name = 'new name';\n// or\ndoc.data = { name: 'new name' };\n```\n\nBoth editing properties directly or replacing data will trigger Svelte component renders.\n\n#### merge(props): undefined\n\nDeep merge document data\n\n``` javascript\nlet doc = store.doc('messages/first').new({\n  name: 'zeeba',\n  thumbnail: {\n    size: {\n      width: 100,\n      height: 100\n    },\n    url: null\n  }\n});\n\ndoc.merge({\n  thumbnail: {\n    url: 'https:/....'\n  }\n});\n```\n\n#### async load({ force: false }): Document\n\nLoads document if it's not already loaded.\n\n``` javascript\nlet doc = await store.doc('messages/first').existing();\nawait doc.load(); // loads\nawait doc.load(); // ignores. already loade\nawait doc.load({ force: true }); // loads or reloads\n```\n\n#### async reload(): Document\n\nReloads document. The same as `doc.load({ force: true })`\n\n#### async save({ force: false, merge: false }): Document\n\nSaves document if `isDirty` is `true`.\n\n``` javascript\nlet doc = await store.doc('messages/first').new({\n  ok: true\n});\n\nawait doc.save(); // saves\nawait doc.save(); // ignores. not dirty\ndoc.data.name = 'zeeba';\nawait doc.save(); // saves\nawait doc.save({ force: true }); // saves even if not dirty\nawait doc.save({ merge: true }) // does `ref.set(data, { merge: true });\n```\n\n#### async delete(): Document\n\nDeletes a document\n\n``` javascript\nlet doc = await store.doc('messages/first');\nawait doc.delete();\n```\n\n#### serialized: Object\n\nReturns JSON debugish representation of document.\n\n``` javascript\nlet doc = await store.doc('messages/first').load();\n```\n\n``` javascript\n{\n  id: \"first\",\n  path: \"messages/first\",\n  exists: true,\n  isNew: false,\n  isDirty: false,\n  isLoading: false,\n  isSaving: false,\n  isLoaded: true,\n  isError: false,\n  error: null,\n  data: {\n    name: \"Zeeba\"\n  }\n}\n```\n\n#### toJSON(): Object\n\nBasically same as serialized with additional data\n\n### Query extends Model\n\nonSnapshot aware query.\n\n``` javascript\nlet array = store.collection('messages').where('status', '==', 'sent').query({ type: 'array' });\nlet single = store.collection('messages').limit(1).query({ type: 'single' });\n```\n\n#### promise: Promise<Query>\n\nPromise which is resolved after 1st load or 1st onSnapshot call.\n\n``` javascript\nlet query = store.collection('messages').query();\nawait query.promise; // resolves after 1st load or onSnapshot\n```\n\n#### async load({ force: false }): Query\n\nLoads query if it is not already loaded. See `Document.load` for details on `force`.\n\n``` javascript\nlet query = store.collection('messages').query();\nawait query.load();\n// isLoaded === true\nawait query.load(); // doesn't do anything\nawait query.load({ force: true }); // loads\n```\n\n#### reload(): Query\n\nRelaods query. Same as `load({ force: true })`\n\n#### string: string\n\nMore or less readable query as a string.\n\n#### serialized: object\n\nDebugish query status representation\n\n``` javascript\n{\n  error: null\n  isError: false\n  isLoaded: false\n  isLoading: false\n  string: \"messages.where(status, ==, sent).limit(10)\"\n}\n```\n\n#### content\n\nif `{ type }` is:\n\n* `array` (default): array of Document instances\n* `single`: single (first) Document instance or null\n\n### Auth\n\n``` javascript\nlet auth = store.auth;\n```\n\n#### Sign in\n\n``` javascript\nawait auth.methods.anonymous.signIn();\nawait auth.methods.email.signIn(email, password);\n```\n\n#### Link anonymous to credentials\n\n``` javascript\nawait auth.methods.anonymous.signIn();\nlet user = auth.user;\nawait user.link('email', email, password);\n```\n\n#### User\n\n``` javascript\nlet user = auth.user;\nawait user.delete();\nawait user.signOut();\n```\n\n``` javascript\nimport { User, toString } from 'swoof';\n\nexport default class DummyUser extends User {\n\n  constructor(store, user) {\n    super(store, user);\n  }\n\n  // restoe is called with user arg only if\n  // user.uid === this.user.uid\n  async restore(user) {\n    if(user) {\n      this.user = user;\n    }\n  }\n\n  toString() {\n    let { uid, email } = this;\n    return toString(this, `${email || uid}`);\n  }\n\n}\n```\n\n### Storage\n\n``` javascript\nlet storage = store.storage;\n```\n\n``` javascript\nlet ref = storage.ref(`users/${uid}/avatar`);\n\nlet task = ref.put({\n  type: 'data',\n  data: file,\n  metadata: {\n    contentType: file.type\n  }\n});\n\nawait task.promise;\n```\n\n``` javascript\nlet ref = storage.ref(`users/${uid}/avatar`);\nawait ref.url();\nawait ref.metadata();\nawait ref.update({ contentType: 'image/png' });\n```\n\n#### Task extends Model\n\n``` javascript\nimport { Model, writable, properties, objectToJSON } from 'swoof';\n\nconst {\n  attr\n} = properties;\n\nclass Storage extends Model {\n\n  constructor() {\n    super();\n    this.property('task', attr(null))\n  }\n\n  async upload() {\n    let task = store.storage.ref('hello').put({\n      type: 'string',\n      format: 'raw',\n      data: 'hey there',\n      metadata: {\n        contentType: 'text/plain'\n      }\n    });\n    this.task = task;\n  }\n\n  get serialized() {\n    let { task } = this;\n    return {\n      task: objectToJSON(task)\n    };\n  }\n\n}\n\nlet model = writable(new Storage());\n```\n\n### Functions\n\n``` javascript\nawait store.functions.call('hey-there', { ok: true });\nawait store.functions.region('us-central1').call('hey-there', { ok: true });\n```\n\n## Issues\n\n### process is not defined\n\n```\nUncaught ReferenceError: process is not defined\n```\n\nadd `plugin-replace` to rollup config:\n\n``` javascript\n// rollup.config.js\nimport replace from '@rollup/plugin-replace';\n\nplugins([\n  //...\n  svelte({\n    // ...\n  }),\n  replace({\n    'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV)\n  }),\n  // ...\n])\n```\n\n### 'registerComponent' of undefined\n\n```\nUncaught TypeError: Cannot read property 'registerComponent' of undefined\n```\n\nupdate `plugin-commonjs`:\n\n``` javascript\n// package.json\n\"devDependencies\": {\n    // ...\n    \"@rollup/plugin-commonjs\": \"^15.0.0\"\n}\n```\n\n## TODO\n\n- [ ] alias() property\n- [ ] diff doc onSnapshot changes + state and do writable.set(this) only if there are changes present\n- [x] models() property\n- [x] tap: needs some kind of tool to forward change notifications to nested models\n- [x] add basic auth support (sign up, sign in (email, anon), forgot password, link account, sign out)\n- [x] add basic storage support\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 28],
		[3603, 25],
		[3610, 24],
		[3617, 2],
		[3624, 1],
		[3631, 1],
		[3645, 2],
		[3659, 2],
		[3666, 24],
		[3680, 1],
		[3708, 3],
		[3729, 2],
		[3736, 1],
		[3757, 9],
		[3764, 21],
		[3771, 16],
		[3778, 1],
		[3785, 1],
		[3792, 2],
		[3799, 1],
		[3806, 7],
		[3820, 4],
		[3827, 2],
		[3834, 4],
		[3841, 3],
		[3848, 3],
		[3855, 16],
		[3862, 113],
		[3869, 1],
		[3876, 1],
		[3883, 2],
		[3890, 24],
		[3897, 1],
		[3904, 1],
		[3911, 2],
		[3925, 1],
		[3932, 2],
		[3946, 2],
		[3953, 1],
		[3960, 3],
		[3967, 6],
		[3974, 5],
		[3981, 1],
		[3988, 25],
		[3995, 5],
		[4002, 6],
		[4009, 14],
		[4016, 5],
		[4023, 42],
		[4030, 27],
		[4037, 10],
		[4044, 19],
		[4051, 9],
		[4058, 1],
		[4065, 2],
		[4072, 1],
		[4093, 10],
		[4100, 24],
		[4107, 6],
		[4114, 42],
		[4121, 48],
		[4128, 7],
		[4135, 9]
	]
}
