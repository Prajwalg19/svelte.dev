{
	"name": "svelte-virtual-table",
	"description": "Provides sortable, virtual table component for Svelte.",
	"repo_url": "https://github.com/BernhardWebstudio/SvelteVirtualTable",
	"authors": ["bernhard_webstudio"],
	"downloads": 37,
	"updated": "2025-04-28T08:58:54.343Z",
	"tags": ["ui"],
	"typescript": true,
	"version": "2.0.3",
	"svelte_range": "^5.20.0",
	"kit_range": "^2.5.27",
	"last_rune_check_version": "2.0.3",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-virtual-table",
				"version": "2.0.3",
				"size": 18568
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Svelte: Virtual Table\n\nA sortable, virtual table for Svelte.\nExample App is available here: [bernhardwebstudio.github.io/svelte-virtual-table/](https://bernhardwebstudio.github.io/svelte-virtual-table/).\n\n- [Svelte: Virtual Table](#svelte-virtual-table)\n\t- [Installation](#installation)\n\t- [Useage](#useage)\n\t- [Styling](#styling)\n\t- [Development Notes](#development-notes)\n\t- [Inspiration/Compatibility](#inspirationcompatibility)\n\n## Installation\n\nInstall this component using\n\n```bash\nyarn install svelte-virtual-table\n```\n\nor\n\n```bash\nnpm install svelte-virtual-table\n```\n\n, respectively.\n\n## Useage\n\nYou can then, after the installation, import it in your app:\n\n```js\nimport VirtualTable from 'svelte-virtual-table';\n```\n\nand use it, for example like so:\n\n```js\nlet items = $state([]);\n\nasync function getData() {\n\tlet dataItems = [];\n\tfor (let page = 1; page < 5; page++) {\n\t\tlet res = await fetch(`https://node-hnapi.herokuapp.com/news?page=${page}`);\n\t\tlet data = await res.json();\n\t\tdataItems = dataItems.concat(data);\n\t}\n\titems = dataItems;\n\treturn items;\n}\n\nconst dataPromise = getData();\n\n// TWO variables that can be bound to the VirtualTable\nlet start = $state(0); // the index of the first visible item\nlet end = $state(0); // the index of the last visible item\n```\n\n```svelte\n{#await dataPromise}\n\tLoading...\n{:then}\n\t<VirtualTable items={items} className=\"anyClassIWantToAdd\" bind:start bind:end>\n\t\t{#snippet thead()}\n\t\t\t<tr>\n\t\t\t\t<th data-sort=\"title\">Title</th>\n\t\t\t\t<th data-sort=\"user\">User</th>\n\t\t\t\t<th data-sort=\"domain\">Domain</th>\n\t\t\t\t<th data-sort=\"time\" data-sort-initial=\"descending\">Time ago</th>\n\t\t\t\t<th data-sort=\"comments_count\">Comments</th>\n\t\t\t</tr>\n\t\t{/snippet}\n\t\t{#snippet trow(item, index)}\n\t\t\t<tr>\n\t\t\t\t<td>\n\t\t\t\t\t<a href={item.url} target=\"_blank\">{item.title}</a>\n\t\t\t\t</td>\n\t\t\t\t<td>{item.user}</td>\n\t\t\t\t<td>{item.domain}</td>\n\t\t\t\t<td>{item.time_ago}</td>\n\t\t\t\t<td>{item.comments_count}</td>\n\t\t\t</tr>\n\t\t{/snippet}\n\t</VirtualTable>\n{:catch error}\n\t<p style=\"color: red\">{error.message}</p>\n{/await}\n```\n\nAdditionally, you should make sure that you set a height on the parent element of the table,\nsince it might either (a) collapse, or (b) have a complete height determined by the table rows, not needing to be virtual otherwise.\n\nPay attention to the `role` attributes: those are highly recommended if you want to have the table behave as such also in accessibility contexts.\nWhile this is not necessarily needed for ordinary tables, this one is required to use `display: block` on the table element (see Development Notes](#development-notes)), which in turn makes these role attributes necessary, still.\n\nYou can find an example-app in the [GitHub Repo](https://github.com/BernhardWebstudio/svelte-virtual-table/tree/main/src/routes).\n\n## Styling\n\nAs written in the [Development Notes](#development-notes), there are a few drawbacks to consider from the current implementation relying on actual `<table>` markup.\nUse the property `requireBorderCollapse` to switch between one or the other mode depending on your styling needs.\n\n`<table>` is unfortunately currently required to have `display: block` set (please, feel free to open a PR with a better implementation, or wait until the approach using native `<table>` elements is finally given up on).\n\nOne other thing that has to be considered: as the table might not have loaded all rows, the width of the rows might be different, depending on which rows are currently displayed. That is why `table-layout: fixed` is used.\nMake sure to assign widths to your table cells (see the example-app for a possible solution).\n\n## Development Notes\n\nOne of the objectives was to use native HTML `<table>`, `<thead>`, `<tbody>` etc.\nAs these are not block-type elements, the original intention to use padding as a means to indicate the table's \"scrollability\" of the inner table is not possible.\n\nThere are numerous workarounds, that were attempted:\n\n- apply a border to `<tbody>`,\n- use `::before`- and `::after`-pseudo elements,\n- increase the height of `<tbody>`'s last- and first-child,\n- use `display: block` on `<table>` and `display: table` on `<tbody>, <tfoot>, <thead>`\n- or use `<tfoot>` and `<thead>` as the elements whose height is changed (and which are kept in the document, no matter if they even have content).\n\nAs an example, the pseudo-element approach would work e.g. like this:\n\n```css\ntbody::before {\n\tbox-sizing: border-box;\n\tcontent: ' ';\n\tdisplay: block;\n\theight: var(--p-top);\n}\ntbody::after {\n\tbox-sizing: border-box;\n\tcontent: ' ';\n\tdisplay: block;\n\theight: var(--p-bottom);\n}\n```\n\nUnfortunately, with the first three workarounds, when scrolling down, it can happen that the table continues scrolling without user intervention (though the scrolling can be stopped manually).\nThis is not the case when scrolling up.\n\nSome observations related to this problem:\n\n- scrollTop increases with the --p-top\n- changing --p-top and --p-bottom triggers a scroll event\n- scrolling up is not affected\n- unstopped scrolling starts after removing an item from viewport\n\nThe reason is with high probability, that the current calculations are incorrect. Refer to [this codepen](https://codepen.io/BernhardWebstudio/pen/NWggLyG) for some calculation-analysis possibilities.\n\nWhen the table has `display` set to `block` and the padding of the `<tbody>` is used for the scroll length, the new table (`<tbody>` with `display: table`) cannot accept a `border-collapse: collapse` style, as otherwise, the scrolling behaviour is nonexistent.\n\nThe last method is special too, since it only shows the auto-scrolling behaviour when `border-collapse` is set to `collapse`.\n\nYou, as a user, have the choice between two methods:\n\nYou can pass the prop `requireBorderCollapse` with a value that evaluates to true if you want the method using `<tfoot>` and `<thead>` heights, and a value that evaluates to false if you want to use a table being set to `display: block` and `tbody`'s padding.\n\n```svelte\n<VirtualTable\n    requireBorderCollapse=false\n      ...\n```\n\n## Inspiration/Compatibility\n\n- https://svelte.dev/repl/a138b0c8579b4fc8bdde842a9d922b1f?version=3.17.1\n- https://github.com/mattiash/svelte-tablesort\n- https://github.com/sveltejs/svelte-virtual-list\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 63],
		[3603, 18],
		[3610, 6],
		[3617, 10],
		[3624, 13],
		[3631, 16],
		[3638, 29],
		[3645, 76],
		[3652, 9],
		[3659, 28],
		[3666, 58],
		[3673, 40],
		[3680, 30],
		[3687, 48],
		[3694, 33],
		[3701, 33],
		[3708, 16],
		[3715, 30],
		[3722, 28],
		[3729, 37],
		[3736, 21],
		[3743, 30],
		[3750, 25],
		[3757, 42],
		[3764, 36],
		[3771, 19],
		[3778, 20],
		[3785, 51],
		[3792, 55],
		[3799, 50],
		[3806, 53],
		[3813, 43],
		[3820, 57],
		[3827, 43],
		[3834, 94],
		[3841, 134],
		[3848, 65],
		[3855, 88],
		[3862, 35],
		[3869, 62],
		[3876, 48],
		[3883, 42],
		[3890, 44],
		[3897, 40],
		[3904, 51],
		[3911, 31],
		[3918, 33],
		[3925, 92],
		[3932, 39],
		[3939, 75],
		[3946, 18],
		[3953, 34],
		[3960, 24],
		[3967, 65],
		[3974, 68],
		[3981, 152],
		[3988, 45],
		[3995, 31],
		[4002, 19],
		[4009, 32],
		[4016, 36],
		[4023, 30],
		[4030, 14],
		[4037, 21],
		[4044, 15],
		[4051, 21],
		[4058, 6],
		[4065, 9],
		[4072, 4],
		[4079, 5],
		[4086, 4],
		[4093, 16],
		[4100, 29],
		[4107, 127],
		[4114, 37],
		[4121, 25],
		[4128, 34],
		[4135, 71]
	]
}
