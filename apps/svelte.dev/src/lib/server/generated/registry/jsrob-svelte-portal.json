{
	"name": "@jsrob/svelte-portal",
	"description": "Render children into different part of DOM using Svelte.",
	"repo_url": "https://github.com/wobsoriano/svelte-portal",
	"authors": ["wobsoriano"],
	"homepage": "https://github.com/wobsoriano/svelte-portal#readme",
	"downloads": 272,
	"updated": "2024-10-21T21:24:37.566Z",
	"tags": ["ui"],
	"github_stars": 12,
	"typescript": true,
	"version": "0.2.1",
	"svelte_range": "^5.0.0",
	"kit_range": "^2.7.2",
	"last_rune_check_version": "0.2.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@jsrob/svelte-portal",
				"version": "0.2.1",
				"size": 7329
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-portal\n\nA Svelte 5 component that lets you render some children into a different part of the DOM.\n\n## Installation\n\n```bash\nnpm install @jsrob/svelte-portal\n```\n\n## Usage\n\nTo create a portal, use the `<Portal>` component and pass in a target and children:\n\n```svelte\n<script>\n\timport { Portal } from '@jsrob/svelte-portal';\n</script>\n\n<Portal target=\"body\">\n\t<p>This child is placed in the document body.</p>\n</Portal>\n```\n\nAnother example, a modal that is rendered into the body when a button is clicked:\n\n```svelte\n<script>\n\timport { Portal } from '@jsrob/svelte-portal';\n\n\tlet open = $state(false);\n</script>\n\n<button onclick={() => (open = true)}>Open Modal</button>\n\n<Portal target=\"body\">\n\t{#if open}\n\t\t<div class=\"modal\">\n\t\t\t<p>Hello from the modal!</p>\n\t\t\t<button onclick={() => (open = false)}>Close</button>\n\t\t</div>\n\t{/if}\n</Portal>\n\n<style>\n\t.modal {\n\t\tposition: fixed;\n\t\tz-index: 999;\n\t\ttop: 20%;\n\t\tleft: 50%;\n\t\twidth: 300px;\n\t\tmargin-left: -150px;\n\t}\n</style>\n```\n\nYou can also pass components as children:\n\n```svelte\n<script>\n\timport { Portal } from '@jsrob/svelte-portal';\n\timport Component from './Component.svelte';\n</script>\n\n<Portal target=\"#element\">\n\t<Component />\n</Portal>\n```\n\n### Props\n\nAll props can be changed dynamically.\n\n| Prop       | Type                    | Description                                                                                               | Required |\n| ---------- | ----------------------- | --------------------------------------------------------------------------------------------------------- | -------- |\n| `target`   | `string \\| HTMLElement` | Specify target container. Can either be a selector or an actual element.                                  | Yes      |\n| `disabled` | `boolean`               | When `true`, the content will remain in its original location instead of moved into the target container. | No       |\n\n### Caveats\n\nWhen updating the `target` or `disabled` prop value, components in the default snippet are unmounted and re-mounted, which means any changes to their local state are lost.\n\nIf you need to persist state, use some sort of state management.\n\n## License\n\nMIT\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3932, 232],
		[3939, 92],
		[3946, 236],
		[3953, 161],
		[3960, 192],
		[3967, 234],
		[3974, 231],
		[3981, 243],
		[3988, 233],
		[3995, 242],
		[4002, 215],
		[4009, 63],
		[4016, 144],
		[4023, 169],
		[4030, 163],
		[4037, 201],
		[4044, 181],
		[4051, 162],
		[4058, 296],
		[4065, 222],
		[4072, 315],
		[4079, 270],
		[4086, 193],
		[4093, 376],
		[4100, 254],
		[4107, 280],
		[4114, 272],
		[4121, 296],
		[4128, 214]
	],
	"esm": true,
	"cjs": false
}
