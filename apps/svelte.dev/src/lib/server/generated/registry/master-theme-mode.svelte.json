{
	"name": "@master/theme-mode.svelte",
	"description": "Switch CSS theme modes with this lightweight Svelte utility.",
	"repo_url": "https://github.com/master-co/theme-mode",
	"authors": ["benseage0", "1aron"],
	"homepage": "https://css.master.co",
	"downloads": 7,
	"updated": "2024-06-09T00:49:23.168Z",
	"tags": ["ui"],
	"github_stars": 10,
	"typescript": true,
	"version": "1.1.1",
	"svelte_range": "^4.0.0",
	"kit_range": "^2.5.2",
	"last_rune_check_version": "1.1.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@master/theme-mode.svelte",
				"version": "1.1.1",
				"size": 17045
			},
			{
				"name": "theme-mode",
				"version": "1.1.1",
				"size": 22607
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "<br>\n<div align=\"center\">\n\n<p align=\"center\">\n    <picture>\n        <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://user-images.githubusercontent.com/33840671/205238939-3cf526f7-8d92-4fa0-8ca3-6c7e4c545f9c.svg\">\n        <source media=\"(prefers-color-scheme: light)\" srcset=\"https://user-images.githubusercontent.com/33840671/205238945-3295c4f5-a88a-4b58-bca9-770fe7bf894e.svg\">\n        <img alt=\"Master\" src=\"https://user-images.githubusercontent.com/33840671/205238945-3295c4f5-a88a-4b58-bca9-770fe7bf894e.svg\" width=\"100%\">\n    </picture>\n</p>\n<p align=\"center\">A lightweight utility for switching CSS theme modes</p>\n\n<p align=\"center\">\n    <a aria-label=\"GitHub release (latest by date including pre-releases)\" href=\"https://github.com/master-co/theme-mode/releases\">\n        <picture>\n            <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://img.shields.io/github/v/release/master-co/theme-mode?include_prereleases&color=212022&label=&style=for-the-badge&logo=github&logoColor=fff\">\n            <source media=\"(prefers-color-scheme: light)\" srcset=\"https://img.shields.io/github/v/release/master-co/theme-mode?include_prereleases&color=f6f7f8&label=&style=for-the-badge&logo=github&logoColor=%23000\">\n            <img alt=\"NPM Version\" src=\"https://img.shields.io/github/v/release/master-co/theme-mode?include_prereleases&color=f6f7f8&label=&style=for-the-badge&logo=github\">\n        </picture>\n    </a>\n    <a aria-label=\"NPM Package\" href=\"https://www.npmjs.com/package/theme-mode\">\n        <picture>\n            <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://img.shields.io/npm/dm/theme-mode?color=212022&label=%20&logo=npm&style=for-the-badge\">\n            <source media=\"(prefers-color-scheme: light)\" srcset=\"https://img.shields.io/npm/dm/theme-mode?color=f6f7f8&label=%20&logo=npm&style=for-the-badge\">\n            <img alt=\"NPM package ( download / month )\" src=\"https://img.shields.io/npm/dm/theme-mode?color=f6f7f8&label=%20&logo=npm&style=for-the-badge\">\n        </picture>\n    </a>\n    <a aria-label=\"Discord Community\" href=\"https://discord.gg/sZNKpAAAw6\">\n        <picture>\n            <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://img.shields.io/discord/917780624314613760?color=212022&label=%20&logo=discord&style=for-the-badge\">\n            <source media=\"(prefers-color-scheme: light)\" srcset=\"https://img.shields.io/discord/917780624314613760?color=f6f7f8&label=%20&logo=discord&style=for-the-badge\">\n            <img alt=\"Discord online\" src=\"https://img.shields.io/discord/917780624314613760?color=f6f7f8&label=%20&logo=discord&style=for-the-badge\">\n        </picture>\n    </a>\n    <a aria-label=\"Follow @mastercorg\" href=\"https://twitter.com/mastercorg\">\n        <picture>\n            <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://img.shields.io/static/v1?label=%20&message=twitter&color=212022&logo=twitter&style=for-the-badge\">\n            <source media=\"(prefers-color-scheme: light)\" srcset=\"https://img.shields.io/static/v1?label=%20&message=twitter&color=f6f7f8&logo=twitter&style=for-the-badge\">\n            <img alt=\"Follow @mastercorg\" src=\"https://img.shields.io/static/v1?label=%20&message=twitter&color=f6f7f8&logo=twitter&style=for-the-badge\">\n        </picture>\n    </a>\n    <a aria-label=\"Github Actions\" href=\"https://github.com/master-co/theme-mode/actions/workflows/release.yml\">\n        <picture>\n            <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://img.shields.io/github/actions/workflow/status/master-co/theme-mode/release.yml?branch=rc&label=%20&message=twitter&color=212022&logo=githubactions&style=for-the-badge\">\n            <source media=\"(prefers-color-scheme: light)\" srcset=\"https://img.shields.io/github/actions/workflow/status/master-co/theme-mode/release.yml?branch=rc&label=%20&message=twitter&color=f6f7f8&logo=githubactions&style=for-the-badge&logoColor=%23000\">\n            <img alt=\"Github release actions\" src=\"https://img.shields.io/github/actions/workflow/status/master-co/theme-mode/release.yml?branch=rc&label=%20&message=twitter&color=f6f7f8&logo=githubactions&style=for-the-badge&logoColor=%23000\">\n        </picture>\n    </a>\n</p>\n\n</div>\n\n<br>\n\n![theme-mode](https://github.com/master-co/theme-mode/assets/33840671/cf65624d-d757-4638-8ff2-f0c299851caf)\n\n[Try it out on the Master CSS documentation site.](https://rc.css.master.co/docs)\n\n## Features\nVanilla, Next, React, Vue, Svelte, and Master CSS are available:\n\n* ‚ö°Ô∏è Ultra-lightweight **~1.2KB**\n* üåà Switch between `light`, `dark`, and `system`\n* üíñ Sync with system theme preferences\n* üíæ Store the user's preference in `localStorage`\n* üí´ Access theme preferences and modes through context\n* üß© Built-in `\"use client\"` directive\n\n## Why should I use this?\nThe `prefers-color-scheme` cannot force override to the specified color mode. Once you want to switch themes, you cannot use `@media (prefers-color-scheme: dark)`.\n\nhttps://stackoverflow.com/questions/56300132/how-to-override-css-prefers-color-scheme-setting\n\n## How does this work?\nThis package automatically switches themes using `class=\"\"` and `color-scheme:`; that's it.\n```html\n<html class=\"dark\" style=\"color-scheme: dark\">\n    <body>\n        <h1 class=\"bg:black@dark bg:white@light\">Hello World</h1>\n    </body>\n</html>\n```\nTo view the source code examples:\n\n- React: https://github.com/master-co/theme-mode/tree/main/examples/react\n- Vue: https://github.com/master-co/theme-mode/tree/main/examples/vue\n- Svelte: https://github.com/master-co/theme-mode/tree/main/examples/svelte\n\n## Getting Started\nInstall the package depending on your framework.\n\n### Vanilla\n```bash\nnpm install theme-mode\n```\n```js\nimport ThemeMode from 'theme-mode'\n\nconst themeMode = new ThemeMode().init()\n\n// Set `preference` anywhere to switch theme modes.\nthemeMode.preference = 'dark'\n```\n\n### React\n```bash\nnpm install @master/theme-mode.react\n```\n```tsx\nimport ThemeModeProvider from '@master/theme-mode.react'\n\nexport default function App({ children }) {\n    return (\n        <ThemeModeProvider preference='system'>\n            {children}\n        </ThemeModeProvider>\n    )\n}\n```\n\n### Vue\n```bash\nnpm install @master/theme-mode.vue\n```\n```vue\n<script setup lang=\"ts\">\nimport ThemeModeProvider from '@master/theme-mode.vue'\n</script>\n\n<template>\n    <ThemeModeProvider preference=\"system\">\n        <slot></slot>\n    </ThemeModeProvider>\n</template>\n```\n\n### Svelte\n```bash\nnpm install @master/theme-mode.svelte\n```\n```svelte\n<script lang=\"ts\">\n    import ThemeModeProvider from '@master/theme-mode.svelte';\n</script>\n\n<ThemeModeProvider preference=\"system\">\n    ...\n</ThemeModeProvider>\n```\n\n## Basic usage\n### Default to light or dark mode\nYou can set the default theme mode when the user has not set a theme preference, such as common `light` or `dark` mode.\n```tsx\n<ThemeModeProvider preference=\"dark\">...</ThemeModeProvider>\n```\nRendered as:\n```html\n<html class=\"dark\" style=\"color-scheme: dark\">‚Ä¶</html>\n```\n\n### Default based on the system preference\nAutomatically switches modes based on the user's system preference.\n```tsx\n<ThemeModeProvider preference=\"system\">...</ThemeModeProvider>\n```\nRendered as:\n```html\n<html class=\"light\" style=\"color-scheme: light\">‚Ä¶</html>\n<!-- or -->\n<html class=\"dark\" style=\"color-scheme: dark\">‚Ä¶</html>\n```\n> Note: CSS only supports light and dark modes for system preferences.\n\n### Sync the user's preference to `localStorage`\nBy default `options.store` is set to `'theme-preference'`, which uses this key to set local storage when the preference is changed.\n\nIn this way, the theme preference set last time will be applied when the user visits or refreshes the website again.\n\nTo disable local storage, set it to `false`.\n```tsx\n<ThemeModeProvider store={false}>...</ThemeModeProvider>\n```\n\n## Apply styles based on theme modes\nYou can now create selector-driven CSS themes using tools like [Master CSS](https://rc.css.master.co/docs/variables-and-modes).\n```html\n<html class=\"light\" style=\"color-scheme: light\">\n    <body>\n        <div class=\"block@dark\" hidden>Dark</div>\n        <div class=\"block@light\" hidden>Light</div>\n        <div class=\"block@christmas\" hidden>Christmas</div>\n    </body>\n</html>\n```\n\n## Create a theme-switching select\n### React\n```tsx\nimport { useThemeMode } from '@master/theme-mode.react'\n\nexport default function ThemeModeSelect() {\n    const themeMode = useThemeMode()\n    return (\n        <button>\n            {themeMode.value === 'dark' ? 'üåú' : '‚òÄÔ∏è'} {themeMode.preference}\n            <select className=\"abs full inset:0 opacity:0\"\n                value={themeMode.preference}\n                onChange={(event) => themeMode.preference = event.target.value}>\n                <option value=\"light\">‚òÄÔ∏è Light</option>\n                <option value=\"dark\">üåú Dark</option>\n                <option value=\"system\">System</option>\n            </select>\n        </button>\n    )\n}\n```\n\n### Vue\n```vue\n<script setup lang=\"ts\">\nimport { inject } from 'vue'\nconst themeMode = inject<any>('theme-mode')\n</script>\n\n<template>\n    <button class=\"px:5x r:2x font:18 h:48 bg:slate-10@light bg:gray-80@dark fg:strong rel\">\n        {{ themeMode.value === 'dark' ? 'üåú' : '‚òÄÔ∏è' }} {{ themeMode.preference }}\n        <select class=\"abs full inset:0 opacity:0\" v-model=\"themeMode.preference\">\n            <option value=\"light\">‚òÄÔ∏è Light</option>\n            <option value=\"dark\">üåú Dark</option>\n            <option value=\"system\">System</option>\n        </select>\n    </button>\n</template>\n```\n\n### Svelte\n```svelte\n<script lang=\"ts\">\n    import { getThemeMode } from \"@master/theme-mode.svelte\";\n    const themeMode = getThemeMode();\n</script>\n\n<span id=\"value\">{$themeMode.value}</span>\n<span id=\"preference\">{$themeMode.preference}</span>\n<select class=\"abs full inset:0 opacity:0\" bind:value={$themeMode.preference}>\n    <option value=\"light\">‚òÄÔ∏è Light</option>\n    <option value=\"dark\">üåú Dark</option>\n    <option value=\"system\">System</option>\n</select>\n```\n\n## Avoid FOUC\nIf you've pre-rendered your CSS styles to the page to improve the page loading and first-render experience, it's crucial to initialize the theme mode in advance.\n\nBy default, three modules of minified advanced initial scripts for different default themes are exported:\n\n- `theme-mode/pre-init`: https://github.com/master-co/theme-mode/tree/main/packages/core/src/pre-init.iife.min.ts\n- `theme-mode/pre-init-light`: https://github.com/master-co/theme-mode/tree/main/packages/core/src/pre-init-light.iife.min.ts\n- `theme-mode/pre-init-dark`: https://github.com/master-co/theme-mode/tree/main/packages/core/src/pre-init-dark.iife.min.ts\n\nYou have to use the build tool to inject these original scripts into HTML `<head>`, taking Next.js as an example:\n```tsx\nimport PRE_INIT_THEME_MODE_SCRIPT from '!!raw-loader!theme-mode/pre-init';\n\nexport default async function RootLayout({ children }: {\n    children: JSX.Element\n}) {\n    return (\n        <html suppressHydrationWarning>\n            <head>\n                <script dangerouslySetInnerHTML={{ __html: PRE_INIT_THEME_MODE_SCRIPT }}></script>\n                ...\n            </head>\n            ...\n        </html>\n    )\n}\n```\n\nOr copy them directly:\n```js\nconst preference = localStorage.getItem('theme-preference') || 'system';\nconst value = preference === 'system'\n    ? matchMedia('(prefers-color-scheme:dark)').matches ? 'dark' : 'light'\n    : preference;\n\ndocument.documentElement.classList.add(value);\nif (['dark', 'light'].includes(value)) document.documentElement.style.colorScheme = value;\n```\n\nThose JS resources cannot be loaded from external because this is a critical script for the first painting of the page.\n\n## Options\n### `.preference`\nSpecify the default theme preference.\n- Default: `undefined`\n- Value: `'dark'` | `'light'` | `'system'` | `string`\n\n### `.store`\nEnable local storage and specify the key for `localStorage`.\n- Default: `'theme-preference'`\n- Value: `'theme-preference'` | `string` | `false`\n\n## Properties\n### `themeMode.preference`\nSet or get the current theme preference.\n- Default: `undefined`\n- Value: `'dark'` | `'light'` | `'system'` | `string`\n\n### `themeMode.value`\nSet or get the current theme mode.\n- Default: `undefined`\n- Value: `'dark'` | `'light'` | `string`\n\n### `themeMode.storage`\nGet the currently stored theme preference.\n- Default: `undefined`\n- Value: `'dark'` | `'light'` | `string`\n\n### `themeMode.systemPreference`\nGet the theme mode of the current system\n- Default: `undefined`\n- Value: `'dark'` | `'light'` | `string`\n\n## Methods\n### `themeMode.init()`\nInitialize the default theme mode. This is usually performed after the DOM has been initialized.\n\n### `themeMode.destroy()`\nDestroy the theme mode, including removing media query listeners.\n\n## Community\nThe Master community can be found here:\n\n- [Discuss on GitHub](https://github.com/master-co/theme-mode/discussions) - Ask questions, voice ideas, and do any other discussion\n- [Join our Discord Server](https://discord.com/invite/sZNKpAAAw6) - Casually chat with other people using the language <sup><sub>‚úì ‰∏≠Êñá</sub></sup>\n\n<sub>Our [„Ää Code of Conduct „Äã](https://github.com/master-co/theme-mode/blob/main/.github/CODE_OF_CONDUCT.md) applies to all Master community channels.</sub>\n\n## Contributing\nPlease see our [CONTRIBUTING](https://github.com/master-co/theme-mode/blob/main/.github/CONTRIBUTING.md) for workflow.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3708, 56],
		[3715, 13],
		[3722, 4],
		[3729, 3],
		[3736, 2],
		[3743, 2],
		[3750, 5],
		[3757, 3],
		[3764, 3],
		[3771, 1],
		[3778, 3],
		[3785, 1],
		[3792, 3],
		[3799, 2],
		[3806, 57],
		[3813, 33],
		[3820, 6],
		[3827, 3],
		[3834, 14],
		[3841, 2],
		[3848, 7],
		[3855, 17],
		[3862, 7],
		[3869, 3],
		[3876, 1],
		[3883, 4],
		[3890, 1],
		[3897, 4],
		[3904, 3],
		[3911, 7],
		[3925, 1],
		[3932, 2],
		[3939, 4],
		[3946, 2],
		[3953, 2],
		[3960, 2],
		[3967, 1],
		[3974, 3],
		[3981, 3],
		[3988, 2],
		[4002, 1],
		[4009, 2],
		[4016, 2],
		[4023, 8],
		[4030, 4],
		[4037, 6],
		[4044, 10],
		[4051, 2],
		[4058, 2],
		[4065, 4],
		[4072, 5],
		[4079, 1],
		[4086, 1],
		[4093, 3],
		[4107, 4],
		[4114, 7],
		[4121, 7],
		[4128, 8]
	],
	"esm": true,
	"cjs": false
}
