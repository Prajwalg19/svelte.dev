{
	"name": "@cloudscript.live/svelte-cloudkit",
	"description": "Provide lightweight Svelte UI components and utilities.",
	"repo_url": "https://github.com/ImL0w/Svelte-CloudKit",
	"authors": ["the-cloudscript"],
	"homepage": "https://github.com/ImL0w/Svelte-CloudKit#readme",
	"downloads": 7,
	"updated": "2023-10-14T17:56:06.600Z",
	"tags": ["ui"],
	"typescript": true,
	"version": "3.9.11",
	"svelte_range": "^3.55.1",
	"kit_range": "1.19.0",
	"last_rune_check_version": "3.9.11",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@cloudscript.live/svelte-cloudkit",
				"version": "3.9.11",
				"size": 216226
			}
		],
		"dependencies": [],
		"circular": []
	},
	"legacy_svelte": false,
	"readme": "# CloudKit\n\n## Open source lightweight library for svelte/kit projects!\n## ![npm package size](https://img.shields.io/bundlephobia/min/@cloudscript.live/svelte-cloudkit)\n*Created and used by [CloudScript](https://www.cloudscript.live/en/). Currently **under development!***\n\n## **Disclaimer** ‚ö†Ô∏è\n`This package is not meant for production for now`. Many things are still missing and the docs still are not done. Anyways, it's fairly stable.\n\n<br />\n\n## **What is included?** üßê\n\n#### `Svelte components`\n* Context-menu\n* Date\n* Data-table\n* Input-area\n* Input-field\n* Input-password\n* Button\n* Checkbox\n* Dropdown\n* RadioButton\n* Popup big\n* Popup small\n* Progressbar\n* CircularProgressbar\n* Tag\n* SwitchMode\n\n#### `Typescript`\n* **Utilities**\n  * **Observers**\n    * observeMutations \n  * **array functions**\n    * extractObjValues\n    * concatClasses\n  * **async functions**\n    * pause\n  * **myScreen**\n    * isMobile \n    * isTablet\n    * isDesktop\n  * **random**\n    * randomInteger\n    * randomString\n  * **string**\n    * capitalize\n  * **time**\n    * currentTime\n* **Constants**\n  * **screen**\n    * mobile\n    * desktop\n* **Clipboard**\n  * writeToClipboard\n  * readFromClipboard\n\n#### `SCSS ecosystem`\n* Auto layout [?](#auto-layout)\n* Global themes (every element inherits corresponding theme)\n* Global font responsiveness\n* Reusable classes (like bootsrap)\n* Fully customizable\n* _PostCSS will be implemented in future_\n\n<br />\n\n## **Reusable Components**\nThe built-in scss already give responsiveness and custom stylings to html elements, but they get ehanced even more! CloudKit components are just basic html elements wrapped with special features or stylings. These components are highly configurable and are alle type-safe due to typescript.\n\n[Examples](#usage-of-some-components)\n\n<br />\n\n## **Ecosystem & SCSS**\n\n### What are we talking about?\nCloudKit has a so called 'ecosystem', where everything works together with the purpose of giving the best user experience. Everything can be customized by you! You can give custom preferences like the color-theme, or which reusable class should be compiled or not. CloudKit has already a default configuration which you can use of course.\n\n### Docs\nAll classes and mixins are documented in detail at the following [page (todo)](#link)\n\n### How to include the global styles\nWith svelte-kit, a good idea would to include it in your root __layout.svelte. This way every page/component will inherit the stylings. With normal svelte it works the same, put it in your root entry-point. Important is that it can process scss.\n\n*Make shure to add the **global** flag. Otherwise the stylings will be scoped in that file.*\n\n```html\n// __layout.svelte\n<style lang=\"scss\" global>\n    @use '@cloudscript.live/svelte-cloudkit/scss/base';\n</style>\n```\n\nIt is also possible to import the scss in your `svelte.config.js`. Like this:\n```js\n...\n/** @type {import('@sveltejs/kit').Config} */\nconst config = {\n\tpreprocess: preprocess({\n\t\tscss: { prependData: '@use \"@cloudscript.live/svelte-cloudkit/scss/base\";' }\n\t}),\n\t...\n};\n\nexport default config;\n```\n\n### How to configure the ecosystem\nAs mentioned before, you could use CloudKit without any further configurations, but of course everybody has different needs.\n\nAfter you imported all global stylings, you can override $variables using the `with` key.\n  \n  *@forward would work too but it's not recommended, since it has a different purpose*\n\n```html\n// __layout.svelte\n<style lang=\"scss\" global>\n\t@use '@cloudscript.live/svelte-cloudkit/scss/base' with (\n      \t$boxed: 9% 9% // This will override the variable var(--boxed)\n\t);\n</style>\n```\n\nPretty easy, right? A full documentation of all possibile configurations can be found [here (todo)](#lol)\n\n<br />\n\n## **Usage of some components**\n*Note. that I wont document every component here. All components already use jsdoc and are pretty self explaining. Anyways, in the future I will do a full documentation + examples.*\n\nFor the first example let's use a simple one, the `<button>`.\n```typescript\n<script lang=\"ts\">\n    // Import the button component\n\timport { Button } from '@cloudscript.live/svelte-cloudkit';\n\n\t// Define onClick function\n\tfunction onClick() {\n    \talert(\"Clicked!\");\n\t}\n</script>\n\n<Button uppercase size=\"lg\" func={onClick}>click me</Button>\n```\n\nNow let's try the `context-menu`:\n```typescript\n<script lang=\"ts\">\n\t// Import the ContextMenu component\n\timport { ContextMenu } from '@cloudscript.live/svelte-cloudkit';\n \n\t// For the image an absolute path is needed (any img format).\n\tconst contextMenuConfig: CloudKit.ContextMenu.config = {\n\t\titems: [\n\t\t\t{ value: 'rename', img: '{image_path}' },\n\t\t\t{ value: 'alert', img: '{image_path}', func: () => alert(1) },\n\t\t\t{ value: 'close', img: '{image_path}' }\n\t\t]\n\t};\n</script>\n\n/*  \nIt is recomanded to put the component in the same file where you need it, but it isn't necessary since it attaches to an element by selector.\n*/\n\n<TableContextMenu\n\titems={contextMenuConfig.items}\n\ttargetsSelector=\"#target\"\n/>\n\n<div id=\"target\" style=\"width: 200px; height: 200px\">\n    Hi\n</div>\n```\n\n<br />\n\n## **Auto layout**\nBy using this structure, you can take advantage of paddings and fixed sizes. Everything inside #app-content will be inside the padding `var(--fluid)` (default: `padding: 3.5% 5.5%`) and everything inside the #index div won't be affected by anything (full width).\n\nThis is how you could use it:\n```html\n<html>\n\t<body>\n\t\t<div id=\"index\">\n            <Header />\n            <div id=\"app-content\">\n                <h1>Welcome!</h1>\n            </div>\n\t\t\t<Footer />\n        </div>\n\t</body>\n</html>\n```\nIn this case the index page is 100vh and the app-content has a padding that as default is **3.5% 5.5%**\n\n#### Styles\n```scss\nbody {\n    // ...body styles\n    #index {\n\t    height: 100vh;\n\n\t    #app-content {\n\t\t    @extend .fluid-content; // padding: 3.5% 5.5% !default\n\t\t    @extend .h-100; // height: 100%\n\t    \t@extend .overflow-h; // Hide overflow\n        }\n    }\n}\n\n```\n#### This is a graphical representation.\n<img src=\"./CloudKit/static/overview.png\" />\n\n<br />\n\n### Not using auto page\nIn this case, the only body will receive some helpful styles:\n```scss\nbody {\n\tbackground-color: var(--background);\n\tmargin: 0;\n\tmax-width: 100vw;\n\tmin-height: 100vh;\n\t@extend .overflow-x; /* Hide horizontal overflow */\n\n\n\t&,\n\t*,\n\t*::after,\n\t*::before {\n\t\t-webkit-box-sizing: border-box !important;\n\t\t-moz-box-sizing: border-box !important;\n\t\t-ms-box-sizing: border-box !important;\n\t\tbox-sizing: border-box !important;\n\t}\n}\n```\n\n<br />\n\n## Theme & Font\nThere exist 4 component themes.\n### Types\n```typescript\ndeclare namespace Theme {\n\ttype Colors = 'dark' | 'primary' | 'light' | 'special';\n    ...\n}\n```\n### Default colors\nMost of the colors are from boostrap but there are some extras. These color **have to be defined** when overwritten, because all components inherit at least one of these colors.\n\n*I'm sorry if the colors are not showing :( . Working on it.*\n\n- ![#202123](https://via.placeholder.com/15/202123/000000?text=+) `#202123 background`\n- ![#0d6efd](https://via.placeholder.com/15/0d6efd/000000?text=+) `#0d6efd blue`\n- ![#ffffff30](https://via.placeholder.com/15/ffffff30/000000?text=+) `#ffffff30 borders`\n- ![#6f42c1](https://via.placeholder.com/15/6f42c1/000000?text=+) `#6f42c1 purple`\n- ![#d1a8ff](https://via.placeholder.com/15/d1a8ff/000000?text=+) `#d1a8ff purple-light`\n- ![#d63384](https://via.placeholder.com/15/d63384/000000?text=+) `#d63384 pink`\n- ![#dc3545](https://via.placeholder.com/15/dc3545/000000?text=+) `#dc3545 red`\n- ![#fd7e14](https://via.placeholder.com/15/fd7e14/000000?text=+) `#fd7e14 orange`\n- ![#daff0f](https://via.placeholder.com/15/daff0f/000000?text=+) `#daff0f yellow`\n- ![#198754](https://via.placeholder.com/15/198754/000000?text=+) `#198754 green`\n- ![#20c997](https://via.placeholder.com/15/20c997/000000?text=+) `#20c997 teal`\n- ![#d1d1d1](https://via.placeholder.com/15/d1d1d1/000000?text=+) `#d1d1d1 text`\n- ![#8e8e8e](https://via.placeholder.com/15/8e8e8e/000000?text=+) `#8e8e8e text-gray`\n- ![#0dcaf0](https://via.placeholder.com/15/0dcaf0/000000?text=+) `#0dcaf0 cyan`\n- ![#fff](https://via.placeholder.com/15/fff/000000?text=+) `#fff white`\n- ![#6c757d](https://via.placeholder.com/15/6c757d/000000?text=+) `#6c757d gray`\n- ![#343a40](https://via.placeholder.com/15/343a40/000000?text=+) `#343a40 component-bg`\n- ![#2c9060](https://via.placeholder.com/15/2c9060/000000?text=+) `#2c9060 primary`\n- ![#6c757d](https://via.placeholder.com/15/6c757d/000000?text=+) `#6c757d secondary`\n- ![#9747ff](https://via.placeholder.com/15/9747ff/000000?text=+) `#9747ff special`\n- ![#198754](https://via.placeholder.com/15/198754/000000?text=+) `#198754 success`\n- ![#0dcaf0](https://via.placeholder.com/15/0dcaf0/000000?text=+) `#0dcaf0 info`\n- ![#ffc107](https://via.placeholder.com/15/ffc107/000000?text=+) `#ffc107 warning`\n- ![#dc3545](https://via.placeholder.com/15/dc3545/000000?text=+) `#dc3545 danger`\n- ![#f8f9fa](https://via.placeholder.com/15/f8f9fa/000000?text=+) `#f8f9fa light`\n- ![#1d1e20](https://via.placeholder.com/15/1d1e20/000000?text=+) `#1d1e20 dark`\n\nIf one of these colors is missing in the color theme, then you probably will run into components that don't have colors applied.The rest of the [shown colors](#default-colors) are not used by any component.\nThe necessary colors are the following:\n* **background** *applied on the body*\n* **borders** *borders of most components*\n* **text** *default text color*\n* **text-gray** *gray text*\n* **primary** *can be a component's background*\n* **special** *can be a component's background*\n* **success** *used for span*\n* **warning** *used for span*\n* **danger** *used for span*\n\n### Default font & responsiveness\nThe default families are:\n* **Inter** *all text*\n  * fallback: sans-serif \n* **Fira Code** *text with the class mono `<h3 class=\"mono\">...</h3>`*\n  * fallback: monospace\n\nFor now the h3 and h5 tag are default set to monospace. In the future it will be possible to decide which tag should have specific font styles.\n\nCloudKit makes your text elements responsive, based on their tag and screen size. All text elements such as: `<h1-h5>,<p>,<a>` and so on... These are the hard-coded values for each screen size:\n\n*`<h1>` and `<h2>` get their own size*\n\n```scss\n:root {\n\t// XS\n\t--fs-h1: 2rem;\n\t--fs-h2: 1.3rem;\n\t--fs-lg: 1.1rem;\n\t--fs-md: 0.9rem;\n\t--fs-sm: 0.75rem;\n\t--fs-xs: 0.55rem;\n\n  /*\n    $mobile: 37em !default;\n    $tablet: 50em !default;\n    $pc: 80em !default;\n  */\n\n\t@include mediaMin($mobile) {\n\t\t--fs-h1: 3rem;\n\t\t--fs-h2: 2.8rem;\n\t\t--fs-lg: 1.4rem;\n\t\t--fs-md: 1.13rem;\n\t\t--fs-sm: 1rem;\n\t\t--fs-xs: 0.67rem;\n\t}\n\n\t@include mediaMin($tablet) {\n\t\t--fs-h1: 4rem;\n\t\t--fs-h2: 2.8rem;\n\t\t--fs-lg: 1.4rem;\n\t\t--fs-md: 1.13rem;\n\t\t--fs-sm: 1rem;\n\t\t--fs-xs: 0.67rem;\n\t}\n\n\t@include mediaMin($pc) {\n\t\t--fs-h1: 4rem;\n\t\t--fs-h2: 2.8rem;\n\t\t--fs-lg: 1.5rem;\n\t\t--fs-md: 1.3rem;\n\t\t--fs-sm: 1.13rem;\n\t\t--fs-xs: 0.8rem;\n\t}\n}\n```\n\n*Note. that the screen sizes used here, can be overitten trough configuration as well.*\n",
	"downloads_history": [
		[3589, 3],
		[3596, 39],
		[3603, 5],
		[3610, 2],
		[3617, 1],
		[3631, 5],
		[3638, 3],
		[3645, 45],
		[3659, 14],
		[3666, 34],
		[3673, 2],
		[3680, 4],
		[3687, 27],
		[3694, 6],
		[3715, 10],
		[3722, 9],
		[3729, 1],
		[3736, 2],
		[3743, 8],
		[3750, 1],
		[3757, 1],
		[3764, 1],
		[3771, 34],
		[3778, 1],
		[3785, 3],
		[3792, 1],
		[3799, 8],
		[3806, 3],
		[3813, 4],
		[3820, 1],
		[3834, 1],
		[3841, 170],
		[3848, 1],
		[3855, 1],
		[3862, 69],
		[3869, 3],
		[3876, 37],
		[3883, 3],
		[3890, 1],
		[3897, 5],
		[3904, 90],
		[3911, 3],
		[3918, 3],
		[3925, 3],
		[3932, 11],
		[3939, 34],
		[3946, 4],
		[3953, 1],
		[3960, 70],
		[3967, 1],
		[3974, 3],
		[3981, 1],
		[3995, 3],
		[4002, 15],
		[4009, 19],
		[4016, 6],
		[4023, 4],
		[4030, 1],
		[4037, 64],
		[4044, 23],
		[4051, 10],
		[4058, 2],
		[4072, 2],
		[4086, 69],
		[4100, 102],
		[4107, 53],
		[4114, 7],
		[4121, 16],
		[4128, 5]
	]
}
