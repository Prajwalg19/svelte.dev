{
	"name": "@macfja/svelte-oauth2",
	"description": "Implement OAuth2 authorization in Svelte and SvelteKit apps.",
	"repo_url": "https://github.com/macfja/svelte-oauth2",
	"authors": ["macfja"],
	"homepage": "https://github.com/macfja/svelte-oauth2#readme",
	"downloads": 7,
	"updated": "2021-09-23T11:37:47.583Z",
	"tags": ["auth"],
	"github_stars": 41,
	"typescript": true,
	"version": "1.1.0",
	"svelte_range": "^3.42.3",
	"kit_range": "^1.0.0-next.162",
	"last_rune_check_version": "1.1.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@macfja/svelte-oauth2",
				"version": "1.1.0",
				"size": 238041
			},
			{
				"name": "cookie",
				"version": "0.4.2",
				"size": 19721
			},
			{
				"name": "js-base64",
				"version": "3.7.7",
				"size": 38601
			},
			{
				"name": "js-cookie",
				"version": "3.0.5",
				"size": 26158
			},
			{
				"name": "pkce",
				"version": "1.0.0-beta2",
				"size": 4005
			},
			{
				"name": "crypto-js",
				"version": "3.3.0",
				"size": 430350
			},
			{
				"name": "secure-random",
				"version": "1.1.2",
				"size": 7528
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2],
			[0, 3],
			[0, 4],
			[4, 5],
			[4, 6]
		],
		"circular": []
	},
	"readme": "# Svelte (and SvelteKit) OAuth2\n\nAdd OAuth2 authorization in Svelte \n\n## Installation\n\n```\nnpm install @macfja/svelte-oauth2\n```\n\n## Examples\n\n### Svelte\n\n```html\n<script>\n    import Auth, { init, browserStrategy, AuthorizationCodePKCE, addAuthHeader } from \"@macfja/svelte-oauth2\"\n\n    init(\n        browserStrategy,\n        new AuthorizationCodePKCE(\n            browserStrategy,\n            '$$gitlab client id$$',\n            'http://localhost:5000/',\n            'https://gitlab.com/oauth/token',\n            'https://gitlab.com/oauth/authorize',\n            'http://localhost:5000/',\n        )\n    )\n\n    let username\n    const getUserName = () => {\n        addAuthHeader().then(headers => {\n            fetch('https://gitlab.com/api/v4/user', { headers })\n                .then(response => response.json())\n                .then(response => username = response.username)\n        })\n    }\n</script>\n\n<Auth scopes={['read_user']} on:authenticated={getUserName}>\n    <div slot=\"loading\">Loading...</div>\n    <div slot=\"error\" let:error>{error.message}</div>\n    Hello {username}!\n</Auth>\n```\n\n### SvelteKit\n\n`src/hooks.js`\n```javascript\nimport { svelteKitStrategy } from \"@macfja/svelte-oauth2\"\n\nexport async function handle({ request, resolve }) {\n    return svelteKitStrategy.handleHook({request, resolve})\n}\n```\n`src/routes/index.html`\n```html\n<script context=\"module\">\n    import { init, svelteKitStrategy, AuthorizationCodePKCE, runOAuth2Process } from \"@macfja/svelte-oauth2\"\n\n    const scopes = ['read_user'];\n\n    export const load = async ({fetch, page}) => {\n        svelteKitStrategy.setFetch(fetch)\n        svelteKitStrategy.setQuery(page.query)\n        init(\n            svelteKitStrategy,\n            new AuthorizationCodePKCE(\n                svelteKitStrategy,\n                '$$gitlab client id$$',\n                'http://localhost:3000/',\n                'https://gitlab.com/oauth/token',\n                'https://gitlab.com/oauth/authorize',\n                'http://localhost:3000/',\n            )\n        )\n        try {\n            return {\n                props: { authentication: await runOAuth2Process(scopes) }\n            }\n        } catch (e) {\n            return {\n                props: { authentication: Promise.reject(e) }\n            }\n        }\n    }\n</script>\n<script>\n    import Auth, { addAuthHeader } from \"@macfja/svelte-oauth2\"\n\n    export let authentication\n    /*\n     For the example purpose this is done in the browser, but can also be done in SSR\n     See below.\n     */\n    let username\n    const getUserName = () => {\n        addAuthHeader().then(headers => {\n            fetch('https://gitlab.com/api/v4/user', { headers })\n                .then(response => response.json())\n                .then(response => username = response.username)\n        })\n    }\n</script>\n\n<h1>Welcome to SvelteKit</h1>\n<p>Visit <a href=\"https://kit.svelte.dev\">kit.svelte.dev</a> to read the documentation</p>\n\n<Auth scopes={['read_user']} on:authenticated={getUserName}>\n    <div slot=\"loading\">Loading...</div>\n    <div slot=\"error\" let:error>{error.message}</div>\n    Hello {username}!\n</Auth>\n```\n\n### SvelteKit full SSR\n`src/hooks.js`\n```javascript\nimport { svelteKitStrategy } from \"@macfja/svelte-oauth2\"\n\nexport async function handle({ request, resolve }) {\n    return svelteKitStrategy.handleHook({request, resolve})\n}\n```\n`src/routes/index.html`\n```html\n<script context=\"module\">\n    import { init, svelteKitStrategy, AuthorizationCodePKCE, runOAuth2Process, addAuthHeader, isAuthorized } from \"@macfja/svelte-oauth2\"\n\n    const scopes = ['read_user'];\n\n    export const load = async ({fetch, page}) => {\n        svelteKitStrategy.setFetch(fetch)\n        svelteKitStrategy.setQuery(page.query)\n        init(\n            svelteKitStrategy,\n            new AuthorizationCodePKCE(\n                svelteKitStrategy,\n                '$$gitlab client id$$',\n                'http://localhost:3000/',\n                'https://gitlab.com/oauth/token',\n                'https://gitlab.com/oauth/authorize',\n                'http://localhost:3000/',\n            )\n        )\n        try {\n            const auth = await runOAuth2Process(scopes)\n            let username;\n            if (await isAuthorized(scopes)) {\n                username = await getUserName()\n            }\n            return {\n                props: { authentication: auth, username }\n            }\n        } catch (e) {\n            return {\n                props: { authentication: Promise.reject(e) }\n            }\n        }\n    }\n\n    const getUserName = () => {\n        return addAuthHeader().then(headers => {\n            return fetch('https://gitlab.com/api/v4/user', { headers })\n                    .then(response => response.json())\n                    .then(response => response.username)\n        })\n    }\n</script>\n<script>\n    import Auth from \"@macfja/svelte-oauth2\"\n\n    export let authentication\n    export let username\n    const onAuth = () => {\n        if (username !== undefined) return\n        getUserName().then(value => username = value)\n    }\n</script>\n\n<h1>Welcome to SvelteKit</h1>\n<p>Visit <a href=\"https://kit.svelte.dev\">kit.svelte.dev</a> to read the documentation</p>\n\n<Auth scopes={['read_user']} on:authenticated={onAuth}>\n    <div slot=\"loading\">Loading...</div>\n    <div slot=\"error\" let:error>{error.message}</div>\n    Hello {username}!\n</Auth>\n```\n\n## Available Grant\n\n### Client Credential\n\nImplementation of [Client Credential](https://oauth.net/2/grant-types/client-credentials/) flow\n```javascript\nimport { ClientCredentials } from \"@macfja/svelte-oauth2\"\nnew ClientCredentials(\n    contextStrategy, // The context strategy to use (How the auth integrate with the app), Svelte/Browser or SvelteKit\n    'Client Id', // The OAuth2 Client Id\n    'Client Secret', // The OAuth2 Client Secret\n    'Token Uri', // The Auth Server URI where to get the access token.\n    'Post Authenticate Uri', // The application URI to go when the user is authenticated.\n    credentialMode, // Where to put credential (Client Id and Client Secret). \"request\" or \"header\"\n)\n```\n\n### Authorization Code\n\nImplementation of [Authorization Code](https://oauth.net/2/grant-types/authorization-code/) flow\n```javascript\nimport { AuthorizationCode } from \"@macfja/svelte-oauth2\"\nnew AuthorizationCode(\n    contextStrategy, // The context strategy to use (How the auth integrate with the app), Svelte/Browser or SvelteKit\n    'Client Id', // The OAuth2 Client Id\n    'Client Secret', // The OAuth2 Client Secret\n    'Post Login Redirect Uri', // The application URI to go when the user is authenticated.\n    'Token Uri', // The Auth Server URI where to get the access token.\n    'Post Authenticate Uri', // The application URI to go when the user is authenticated.\n    'Authorization Redirect Uri', // The application URI to go back from the Auth Server\n    credentialMode, // Where to put credential (Client Id and Client Secret). \"request\" or \"header\"\n)\n```\n\n### Authorization Code With PKCE\n\nImplementation of [PKCE](https://oauth.net/2/pkce/) flow\n```javascript\nimport { AuthorizationCodePKCE } from \"@macfja/svelte-oauth2\"\nnew AuthorizationCodePKCE(\n    contextStrategy, // The context strategy to use (How the auth integrate with the app), Svelte/Browser or SvelteKit\n    'Client Id', // The OAuth2 Client Id\n    'Post Login Redirect Uri', // The application URI to go when the user is authenticated.\n    'Token Uri', // The Auth Server URI where to get the access token.\n    'Post Authenticate Uri', // The application URI to go when the user is authenticated.\n    'Authorization Redirect Uri', // The application URI to go back from the Auth Server\n)\n```\n\n## Contributing\n\nContributions are welcome. Please open up an issue or create PR if you would like to help out.\n\nRead more in the [Contributing file](CONTRIBUTING.md)\n\n## License\n\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 2],
		[3596, 28],
		[3603, 4],
		[3610, 2],
		[3617, 5],
		[3624, 1],
		[3631, 3],
		[3638, 20],
		[3645, 9],
		[3652, 7],
		[3659, 7],
		[3666, 9],
		[3673, 5],
		[3680, 4],
		[3687, 3],
		[3694, 6],
		[3701, 2],
		[3708, 2],
		[3715, 3],
		[3722, 2],
		[3729, 1],
		[3736, 1],
		[3743, 3],
		[3750, 1],
		[3757, 1],
		[3764, 3],
		[3771, 3],
		[3778, 3],
		[3785, 1],
		[3792, 2],
		[3799, 3],
		[3806, 4],
		[3813, 2],
		[3820, 2],
		[3827, 1],
		[3834, 3],
		[3841, 2],
		[3848, 2],
		[3855, 12],
		[3862, 6],
		[3869, 3],
		[3876, 3],
		[3883, 3],
		[3890, 5],
		[3897, 6],
		[3904, 2],
		[3911, 3],
		[3918, 4],
		[3925, 1],
		[3932, 3],
		[3939, 3],
		[3946, 1],
		[3953, 2],
		[3960, 4],
		[3967, 5],
		[3974, 2],
		[3981, 1],
		[3988, 1],
		[3995, 2],
		[4002, 2],
		[4009, 1],
		[4016, 2],
		[4023, 5],
		[4030, 6],
		[4037, 3],
		[4044, 9],
		[4051, 2],
		[4058, 2],
		[4065, 1],
		[4072, 3],
		[4079, 1],
		[4086, 2],
		[4093, 17],
		[4100, 3],
		[4107, 3],
		[4114, 7],
		[4121, 6],
		[4128, 4]
	],
	"esm": true,
	"cjs": true
}
