{
	"name": "@gira-de/t9n-svelte",
	"description": "Translate Svelte applications using t9n library.",
	"repo_url": "https://github.com/gira-de/t9n",
	"authors": ["zeekrey", "bztes", "daniel.albuschat"],
	"homepage": "https://github.com/gira-de/t9n#readme",
	"downloads": 77,
	"updated": "2024-08-12T07:23:26.204Z",
	"tags": ["miscellaneous"],
	"github_stars": 5,
	"typescript": true,
	"version": "2.1.0",
	"svelte_range": "^4.2.18",
	"last_rune_check_version": "2.1.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@gira-de/t9n-svelte",
				"version": "2.1.0",
				"size": 30452
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# t9n Lib\n\n> A Svelte translation (t9n) solution for @gira-de/t9n.\n\nSee a working example here: [t9n@Stackblitz](https://stackblitz.com/github/gira-de/t9n/tree/dev/examples/svelte-t9n).\n\n## Installation\n\n```bash\nnpm install @gira-de/t9n-svelte\n```\n\n## Initialization\n\nTo get started, the following files are required:\n\n_./locale/meta.json: This json describes the structure of the actual language files. Every possible translation key needs to be described here._\n\n```json\n{\n  \"pageOne\": {\n    \"headline\": \"This is a fancy headline written by a developer. Don't trust this! ü¶π‚Äç‚ôÄÔ∏èü¶π‚Äç‚ôÇÔ∏è\"\n  }\n}\n```\n\n_./locale/de.json: The actual language file_\n\n```json\n{\n  \"pageOne\": {\n    \"headline\": \"Das ist die √úberschrift von einem echten √úbersetzer. Echt. üë©‚Äçüè´üë®‚Äçüè´\"\n  }\n}\n```\n\nNow _de.json_ can be referenced during initialization of the t9n library:\n\n\\_./src/App.svelte\n\n```svelte\n<script lang=\"ts\">\n  import de from '../locale/de.json';\n  import meta from '../locale/meta.json';\n  import type { TranslationArgs } from '../locale/types';\n  import t9n from '@gira-de/t9n-svelte';\n\n  // dictionary with all languages\n  const languages = [\n    {\n      locale: 'meta',\n      name: 'Developer',\n      dictionary: meta,\n    },\n    {\n      locale: 'de',\n      name: 'German',\n      dictionary: de,\n    },\n    {\n      locale: 'en',\n      name: 'English',\n      dictionary: {},\n    },\n  ] as const;\n\n  // default language\n  const translationFallback= languages[0];\n\n  // logging functions\n  const logFallback = (translationKey: string, currentLanguage: string) =>\n    console.warn(\n      `[t9n] The translationKey ¬´${translationKey}¬ª is missing within ¬´${currentLanguage}¬ª. Using the translation fallback: ¬´${translationFallback.locale}¬ª.`,\n    );\n\n  const logMissing = (translationKey: string, currentLanguage: string) =>\n    console.warn(\n      `[t9n] The translationKey ¬´${translationKey}¬ª is missing within ¬´${currentLanguage}¬ª. Neither does the fallback language.`,\n    );\n\n  // locale, t and ti are Svelte Stores. Use the locale Store to change the language and t/ti to get the translation.\n  const { locale, t, ti } = t9n<TranslationArgs>()({\n    languages,\n    translationFallback,\n    logFallback,\n    logMissing,\n  });\n\n  let selected: 'meta' | 'de' | 'en';\n</script>\n```\n\n## Usage\n\n### Get translations\n\nTo finally get translation by keys, you can use `t` or `ti` Svelte Stores:\n\n```typescript\nconst { locale, t, ti } = t9n<TranslationArgs>()({\n  languages,\n  translationFallback,\n  logFallback,\n  logMissing,\n});\n\n// Returns the translated string\n$t(['pageOne.headline']);\n\n// Returns an object with the hit information and the actual text\n$ti(['pageOne.headline']);\n```\n\nIf you like you can turn these command into a Svelte component and print styles based on the hit information. See [Create a T component](##Create-a-T-component) for more.\n\n### Translate numbers and dates\n\n```typescript\ngetLocaleDateString(new Date()),\ngetLocaleTimeString(new Date()),\ngetLocaleStringFromNumber(1.2),\n```\n\nThose functions are derived from `Date.prototype.toLocal...` functions: [MDN Web Docs](https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString).\n\n### Set the language\n\nTo set the language use the `locale` method. If you want to detect the language automatically use the following code:\n\n```typescript\nconst { locale } = t9n<TranslationArgs>()({...});\n\n// Tries to set the language according to the current browser settings.\n// If the current browser language is not supported by the list of translations available,\n// use one of the defined languages as fallback (in this case 'en').:\nlocale.trySet(navigator.language, 'en');\n```\n\n### Create a T component\n\nIf you like you can turn the `t` and `ti` Svelte Stores into a Svelte component and print styles based on the hit information.\n\n```svelte\n<script lang=\"ts\">\n  import { t, ti } from './locale';\n  import type { TranslationArgs } from './locale-types';\n\n  export let args: TranslationArgs;\n</script>\n\n{#if process.env.MODE === 'development'}\n  {@const transInfo = $ti(...args)}\n  <span\n    class:isFallback={translationInfo.hit === 'fallbackDictionary'}\n    class:isNone={translationInfo.hit === 'none'}>{translationInfo.text}</span\n  >\n{:else}\n  <span>{$t(...args)}</span>\n{/if}\n\n<style>\n  .isNone {\n    text-decoration-line: underline;\n    text-decoration-style: wavy;\n    text-decoration-color: rgb(252, 69, 37);\n  }\n\n  .isFallback {\n    text-decoration-line: underline;\n    text-decoration-style: wavy;\n    text-decoration-color: rgb(110, 167, 214);\n  }\n</style>\n```\n\n## RFC 5646\n\nAs described in [RFC 5646: Tags for Identifying Languages (also known as BCP 47)](https://datatracker.ietf.org/doc/html/rfc5646) language tags with subtags are allow. For example:\n\n```typescript\nconst languages = [\n  //...\n  {\n    locale: 'en',\n    name: 'English',\n    dictionary: en,\n  },\n  {\n    locale: 'en-US',\n    name: 'English (US)',\n    dictionary: enUS,\n  },\n] as const;\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 89],
		[3596, 307],
		[3603, 215],
		[3610, 149],
		[3617, 67],
		[3624, 158],
		[3631, 87],
		[3645, 4],
		[3652, 115],
		[3659, 121],
		[3666, 143],
		[3673, 121],
		[3680, 135],
		[3687, 163],
		[3694, 182],
		[3701, 27],
		[3708, 175],
		[3715, 17],
		[3722, 274],
		[3729, 224],
		[3736, 182],
		[3743, 260],
		[3750, 253],
		[3757, 290],
		[3764, 346],
		[3771, 192],
		[3778, 141],
		[3785, 196],
		[3792, 156],
		[3799, 13],
		[3806, 28],
		[3813, 21],
		[3820, 9],
		[3827, 7],
		[3834, 22],
		[3841, 82],
		[3848, 36],
		[3855, 80],
		[3862, 141],
		[3869, 46],
		[3876, 217],
		[3883, 47],
		[3890, 86],
		[3897, 50],
		[3904, 32],
		[3911, 67],
		[3918, 50],
		[3925, 43],
		[3932, 49],
		[3939, 37],
		[3946, 22],
		[3953, 23],
		[3960, 53],
		[3967, 34],
		[3974, 59],
		[3981, 15],
		[3988, 18],
		[3995, 40],
		[4002, 64],
		[4009, 21],
		[4016, 46],
		[4023, 78],
		[4030, 31],
		[4037, 56],
		[4044, 56],
		[4051, 24],
		[4058, 31],
		[4065, 43],
		[4072, 37],
		[4079, 54],
		[4086, 134],
		[4093, 59],
		[4100, 98],
		[4107, 109],
		[4114, 77],
		[4121, 66],
		[4128, 50]
	]
}
