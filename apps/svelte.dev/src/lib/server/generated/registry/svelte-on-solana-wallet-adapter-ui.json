{
	"name": "@svelte-on-solana/wallet-adapter-ui",
	"description": "Integrate Solana wallets into Svelte apps.",
	"repo_url": "https://github.com/svelte-on-solana/wallet-adapter",
	"authors": ["silvestrevivo", "c_ogoo"],
	"homepage": "https://github.com/svelte-on-solana/wallet-adapter#readme",
	"downloads": 40,
	"updated": "2022-12-10T10:58:17.836Z",
	"tags": ["integration"],
	"github_stars": 65,
	"typescript": true,
	"version": "1.0.21-alpha.0",
	"svelte_range": "^3.46.2",
	"kit_range": "next",
	"last_rune_check_version": "1.0.21-alpha.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@svelte-on-solana/wallet-adapter-ui",
				"version": "1.0.21-alpha.0",
				"size": 50781
			},
			{
				"name": "eventemitter3",
				"version": "4.0.7",
				"size": 37967
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# `@svelte-on-solana/wallet-adapter-ui`\n\nPre-built components for integrating with Solana wallets using Svelte\n\n## Getting Started\n\nThe UI components need to be installed into a project that is already set up with `@solana/web3.js` and the base wallet adapters. Therefore, it cannot work standalone.\n\nDuring this process, you will:\n\n-   ðŸ“¦ Install the base wallet adapters\n-   ðŸ“¦ Install the svelte adapter and svelte UI\n-   ðŸ”¨ Add the `ConnectionProvider` ([`AnchorConnectionProvider`](https://github.com/svelte-on-solana/wallet-adapter/blob/master/packages/anchor/README.md) if you're using Anchor)\n-   ðŸ”¨ Add the `WalletProvider` component\n-   ðŸ”¨ Add the `WalletMultiButton` component\n\n## Installing\n\nYou have already installed the core package to run the wallet Svelte Store [@svelte-on-solana/wallet-adapter-core](github.com/svelte-on-solana/wallet-adapter/blob/master/packages/core/README.md). Then install the UI components contained in this package\n\n```shell\nnpm i @svelte-on-solana/wallet-adapter-ui\n```\n\n## Set Up\n\nThere are three components that you need to get set up:\n\n-   `WalletProvider`\n-   `ConnectionProvider` (`[AnchorConnectionProvider](https://github.com/svelte-on-solana/wallet-adapter/blob/master/packages/anchor/README.md)` if you're using Anchor)\n-   `WalletMultiButton`\n\n`WalletProvider` is a component used to initialize the wallet stores and add event listeners\n\n| prop             | type        | default           |\n| ---------------- | ----------- | ----------------- |\n| localStorageKey? | `string`    | `'walletAdapter'` |\n| wallets          | `Wallets[]` |                   |\n| autoConnect?     | `boolean`   | `false`           |\n\n`ConnectionProvider` is a component used to establish a connection with the network.\n\n| prop    | type     | default |\n| ------- | -------- | ------- |\n| network | `string` |         |\n\nAlternatively you can use `AnchorConnectionProvider` for Anchor Dapps.\n\n| prop    | type     | default |\n| ------- | -------- | ------- |\n| network | `string` |         |\n| idl     | `Idl`    |         |\n\n`WalletMultiButton` is a component used as the entry point to connect/disconnect a wallet.\n\n| prop               | type     | default |\n| ------------------ | -------- | ------- |\n| maxNumberOfWallets | `number` | `3`     |\n\n## SvelteKit\n\nFirst you need to install some additional packages to make the Torus implementation compatible with SvelteKit.\n\n```shell\nnpm install -D @esbuild-plugins/node-globals-polyfill @rollup/plugin-inject rollup-plugin-node-polyfills\n```\n\nThen you have to adjust the **vite.config.js** file to prepare the project for all the Solana packages previously installed.\n\n```javascript\nimport { sveltekit } from '@sveltejs/kit/vite'\n\nconst config = {\n\tplugins: [sveltekit()],\n\toptimizeDeps: {\n\t\tinclude: ['@solana/web3.js', 'buffer'],\n\t\tesbuildOptions: {\n\t\t\t\ttarget: 'esnext',\n\t\t\t\tplugins: [NodeGlobalsPolyfillPlugin({ buffer: true })],\n\t\t},\n\t},\n\tresolve: {\n\t\talias: {\n\t\t\t$utils: path.resolve('src/utils/'),\n\t\t\tstream: 'rollup-plugin-node-polyfills/polyfills/stream',\n\t\t},\n\t},\n\tdefine: {\n\t\t'process.env.BROWSER': true,\n\t\t'process.env.NODE_DEBUG': JSON.stringify(''),\n\t},\n\tbuild: {\n\t\ttarget: 'esnext',\n\t\tcommonjsOptions: {\n\t\t\ttransformMixedEsModules: true\n\t\t},\n\t\trollupOptions: {\n\t\t\tplugins: [inject({ Buffer: ['buffer', 'Buffer'] }), nodePolyfills({ crypto: true })],\n\t\t},\n\t}\n}\n\nexport default config\n```\n\nAnd then in the **\\_\\_layout.svelte** component you can import the wallets and setup the UI components.\n\n```html\n<script lang=\"ts\">\n\timport { onMount } from 'svelte';\n\timport { clusterApiUrl } from '@solana/web3.js';\n\timport {\n\t\tworkSpace,\n\t\tWalletProvider,\n\t\tWalletMultiButton,\n\t\tConnectionProvider\n\t} from '@svelte-on-solana/wallet-adapter-ui';\n\n\tconst localStorageKey = 'walletAdapter';\n\tconst network = clusterApiUrl('devnet'); // localhost or mainnet\n\n\tlet wallets;\n\n\tonMount(async () => {\n\t\tconst {\n\t\tPhantomWalletAdapter,\n\t\tSlopeWalletAdapter,\n\t\tSolflareWalletAdapter,\n\t\tSolletExtensionWalletAdapter,\n\t\tTorusWalletAdapter,\n\t\t} = await import('@solana/wallet-adapter-wallets');\n\n\t\tconst walletsMap = [\n\t\t\tnew PhantomWalletAdapter(),\n\t\t\tnew SlopeWalletAdapter(),\n\t\t\tnew SolflareWalletAdapter(),\n\t\t\tnew SolletExtensionWalletAdapter(),\n\t\t\tnew TorusWalletAdapter(),\n\t\t];\n\n\t\twallets = walletsMap;\n\t});\n</script>\n\n<WalletProvider {localStorageKey} {wallets} autoConnect />\n<ConnectionProvider {network} />\n<div>\n\t<slot />\n</div>\n<WalletMultiButton />\n```\n\n## Svelte Template\n\nYou have to adjust some stuff in the configuration in your project.\n\n> Enable JSON module resolving in `app/tsconfig.json`\n\n```json\n{\n\t\"extends\": \"@tsconfig/svelte/tsconfig.json\",\n\t\"compilerOptions\": {\n\t\t\"resolveJsonModule\": true\n\t},\n\n\t\"include\": [\"src/**/*\"],\n\t\"exclude\": [\"node_modules/*\", \"__sapper__/*\", \"public/*\"]\n}\n```\n\n> Install a few plugins to take care about JSON imports and built-on Node.js modules not available in the browser.\n\n```shell\nnpm install -D @rollup/plugin-json rollup-plugin-node-builtins rollup-plugin-node-globals\n```\n\n> Adjust `rollup.config.js` to import those plugins\n\n```javascript\n// ... other imports\nimport json from '@rollup/plugin-json';\nimport builtins from 'rollup-plugin-node-builtins';\nimport globals from 'rollup-plugin-node-globals';\n\nexport default {\n\t// ... other configs\n\tplugins: [\n\t\t// ... other rollup plugins\n\t\tresolve({\n\t\t\tbrowser: true,\n\t\t\tdedupe: ['svelte'],\n\t\t\tpreferBuiltins: false\n\t\t}),\n\t\t// ... more rollup plugins\n\t\tjson(),\n\t\tglobals(),\n\t\tbuiltins()\n\t]\n};\n```\n\n> Then in `App.svelte` or the entry point of your SPA, you can setup the wallet and components like this.\n\n```html\n<script lang=\"ts\">\n\timport { walletStore } from '@svelte-on-solana/wallet-adapter-core';\n\timport {\n\t\tworkSpace,\n\t\tWalletProvider,\n\t\tWalletMultiButton,\n\t\tConnectionProvider\n\t} from '@svelte-on-solana/wallet-adapter-ui';\n\timport { clusterApiUrl } from '@solana/web3.js';\n\timport { PhantomWalletAdapter, SolflareWalletAdapter } from '@solana/wallet-adapter-wallets';\n\n\tconst localStorageKey = 'walletAdapter';\n\tconst network = clusterApiUrl('devnet'); // localhost or mainnet\n\n\tlet wallets = [new PhantomWalletAdapter(), new SolflareWalletAdapter()];\n</script>\n\n<WalletProvider {localStorageKey} {wallets} autoConnect />\n<ConnectionProvider {network} />\n<WalletMultiButton />\n\n{#if $walletStore?.connected}\n<div>My wallet is connected</div>\n{/if}\n```\n\n## Working with Anchor\n\nIf you work with Anchor you will need the `AnchorConnectionProvider` component and its workSpace [@svelte-on-solana/wallet-adapter-anchor](https://github.com/svelte-on-solana/wallet-adapter/blob/master/packages/anchor/README.md)\n\n## Example Implementation\n\nSee example implementations of the `@svelte-on-solana/wallet-adapter-ui` library.\n\n-   [Demo site][1]\n\n[1]: https://github.com/silvestrevivo/solana-svelte-counter/tree/master/app\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 65],
		[3596, 92],
		[3603, 98],
		[3610, 19],
		[3617, 26],
		[3624, 48],
		[3631, 37],
		[3638, 33],
		[3645, 33],
		[3652, 95],
		[3659, 97],
		[3666, 90],
		[3673, 82],
		[3680, 103],
		[3687, 25],
		[3694, 33],
		[3701, 59],
		[3708, 74],
		[3715, 50],
		[3722, 81],
		[3729, 94],
		[3736, 67],
		[3743, 178],
		[3750, 124],
		[3757, 215],
		[3764, 111],
		[3771, 83],
		[3778, 247],
		[3785, 261],
		[3792, 176],
		[3799, 189],
		[3806, 197],
		[3813, 269],
		[3820, 234],
		[3827, 237],
		[3834, 197],
		[3841, 183],
		[3848, 235],
		[3855, 169],
		[3862, 155],
		[3869, 185],
		[3876, 164],
		[3883, 143],
		[3890, 93],
		[3897, 116],
		[3904, 41],
		[3911, 41],
		[3918, 79],
		[3925, 37],
		[3932, 100],
		[3939, 127],
		[3946, 43],
		[3953, 112],
		[3960, 79],
		[3967, 200],
		[3974, 176],
		[3981, 180],
		[3988, 183],
		[3995, 204],
		[4002, 109],
		[4009, 146],
		[4016, 139],
		[4023, 212],
		[4030, 201],
		[4037, 104],
		[4044, 140],
		[4051, 150],
		[4058, 92],
		[4065, 66],
		[4072, 76],
		[4079, 138],
		[4086, 77],
		[4093, 62],
		[4100, 70],
		[4107, 34],
		[4114, 40],
		[4121, 40],
		[4128, 62]
	]
}
