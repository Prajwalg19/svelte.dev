{
	"name": "sveltekit-flash-message",
	"description": "Send temporary data to next request after redirect in SvelteKit.",
	"repo_url": "https://github.com/ciscoheat/sveltekit-flash-message",
	"authors": ["ciscoheat"],
	"homepage": "https://github.com/ciscoheat/sveltekit-flash-message#readme",
	"downloads": 6034,
	"updated": "2025-01-23T11:43:38.078Z",
	"tags": ["miscellaneous"],
	"github_stars": 315,
	"typescript": true,
	"version": "2.4.6",
	"svelte_range": "3.x || 4.x || >=5.0.0-next.51",
	"kit_range": "1.x || 2.x",
	"last_rune_check_version": "2.4.6",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "sveltekit-flash-message",
				"version": "2.4.6",
				"size": 50497
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# sveltekit-flash-message ⚡\r\n\r\nThis [Sveltekit](https://svelte.dev/docs/kit/) library passes temporary data to the next request, usually in [form actions](https://kit.svelte.dev/docs/form-actions) and [endpoints](https://kit.svelte.dev/docs/routing#server). It's useful for displaying a success or failure message after a POST, which should not always be displayed at the form, rather as a message on the page that the request was redirected to.\r\n\r\nSince it's a temporary message it's also known as a \"flash message\", especially known from PHP apps, since it's easy to add this functionality with PHP's built-in session handling. With SvelteKit it's a bit harder, but this library was made to alleviate that, encouraging well-behaved web apps that [Redirects after Post](https://www.theserverside.com/news/1365146/Redirect-After-Post).\r\n\r\n## Installation\r\n\r\n```\r\npnpm i -D sveltekit-flash-message\r\n```\r\n\r\n```\r\nnpm i -D sveltekit-flash-message\r\n```\r\n\r\n## How to use\r\n\r\n### 1. Add the flash message to app.d.ts (Typescript only)\r\n\r\nIn `src/app.d.ts`, add the type for the flash message to `App.PageData` as an optional property called `flash`. It can be as simple as a `string`, or something more advanced. It has to be serializable though, so only JSON-friendly data structures. For example:\r\n\r\n**src/app.d.ts**\r\n\r\n```ts\r\n// See https://svelte.dev/docs/kit/types#app.d.ts\r\n// for information about these interfaces\r\ndeclare global {\r\n  namespace App {\r\n    // interface Error {}\r\n    // interface Locals {}\r\n    interface PageData {\r\n      flash?: { type: 'success' | 'error'; message: string };\r\n    }\r\n    // interface PageState {}\r\n    // interface Platform {}\r\n  }\r\n}\r\n\r\nexport {};\r\n```\r\n\r\n### 2. Wrap the load function of a top-level +layout or +page route\r\n\r\nIf you're not using any [load functions](https://kit.svelte.dev/docs/load), this is a simple step. Create a `src/routes/+layout.server.ts` file with the following content:\r\n\r\n**src/routes/+layout.server.ts**\r\n\r\n```ts\r\nexport { load } from 'sveltekit-flash-message/server';\r\n```\r\n\r\nBut most likely you already have a top-level `load` function, in which case you can import `loadFlash` and wrap your load function with it:\r\n\r\n**src/routes/+layout.server.ts**\r\n\r\n```ts\r\nimport { loadFlash } from 'sveltekit-flash-message/server';\r\n\r\nexport const load = loadFlash(async (event) => {\r\n  const data = { someOther: 'data' };\r\n  return data;\r\n});\r\n```\r\n\r\n**Note:** There cannot be any additional `loadFlash` calls in routes below, as the flash cookie is deleted when it is found the first time.\r\n\r\n### 3. Display the flash message\r\n\r\nImport `getFlash` in a layout or page component to display the flash message. `getFlash` will return a store that you'll use to access the message:\r\n\r\n**src/routes/+layout.svelte**\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n  import { getFlash } from 'sveltekit-flash-message';\r\n  import { page } from '$app/state';\r\n\r\n  const flash = getFlash(page);\r\n</script>\r\n\r\n{#if $flash}\r\n  {@const bg = $flash.type == 'success' ? '#3D9970' : '#FF4136'}\r\n  <div style:background-color={bg} class=\"flash\">{$flash.message}</div>\r\n{/if}\r\n```\r\n\r\n## 4. Send flash messages\r\n\r\n### Server-side\r\n\r\nTo send a flash message from the server, import `redirect` from `sveltekit-flash-message/server` and use it in [load functions](https://kit.svelte.dev/docs/load#redirects) and [form actions](https://kit.svelte.dev/docs/form-actions#anatomy-of-an-action-redirects).\r\n\r\n**Note:** With SvelteKit 2, you don't need to [throw the redirect](https://kit.svelte.dev/docs/migrating-to-sveltekit-2#redirect-and-error-are-no-longer-thrown-by-you), just call `redirect`. If you're still on SvelteKit 1, `throw` the function call.\r\n\r\n```ts\r\nimport { redirect } from 'sveltekit-flash-message/server'\r\n\r\n// The most specific: Redirect with a specific HTTP status to a specific location.\r\nredirect(\r\n  status: number,\r\n  location: string,\r\n  message: App.PageData['flash'],\r\n  event: RequestEvent | Cookies\r\n)\r\n\r\n// Makes a 303 redirect to a specific location.\r\nredirect(\r\n  location: string,\r\n  message: App.PageData['flash'],\r\n  event: RequestEvent | Cookies\r\n)\r\n\r\n// Makes a 303 redirect to the current location.\r\nredirect(\r\n  message: App.PageData['flash'],\r\n  event: RequestEvent\r\n)\r\n\r\n// For compatibility, the sveltekit signature can also be used, which will send no flash message.\r\nredirect(\r\n  status: number,\r\n  location: string,\r\n)\r\n```\r\n\r\n#### Form action example\r\n\r\n**src/routes/todos/+page.server.ts**\r\n\r\n```ts\r\nimport { redirect } from 'sveltekit-flash-message/server';\r\n\r\nexport const actions = {\r\n  default: async ({ request, locals, cookies }) => {\r\n    const form = await request.formData();\r\n\r\n    await api('POST', `/todos/${locals.userid}`, {\r\n      text: form.get('text')\r\n    });\r\n\r\n    redirect('/', { type: 'success', message: \"That's the entrepreneur spirit!\" }, cookies);\r\n  }\r\n};\r\n```\r\n\r\n#### Endpoint example\r\n\r\n**src/routes/todos/+server.ts**\r\n\r\n```ts\r\nimport type { RequestEvent } from '@sveltejs/kit';\r\nimport { redirect } from 'sveltekit-flash-message/server';\r\n\r\nexport const POST = async ({ cookies }) => {\r\n  redirect('/', { type: 'success', message: 'Endpoint POST successful!' }, cookies);\r\n};\r\n```\r\n\r\n#### Setting without redirecting\r\n\r\nIf you want to display a flash message without redirecting, as an error message when validation fails for example, you can use the `setFlash` function:\r\n\r\n```ts\r\nimport { fail } from '@sveltejs/kit';\r\nimport { setFlash } from 'sveltekit-flash-message/server';\r\n\r\nexport const actions = {\r\n  default: async ({ request, cookies }) => {\r\n    const form = await request.formData();\r\n\r\n    if (!form.get('text')) {\r\n      setFlash({ type: 'error', message: 'Please enter text.' }, cookies);\r\n      return fail(400);\r\n    }\r\n  }\r\n};\r\n```\r\n\r\n### Client-side\r\n\r\nIf you want to update the flash message on the client, use `getFlash` in any component:\r\n\r\n**src/routes/some-route/+page.svelte**\r\n\r\n```svelte\r\n<script>\r\n  import { getFlash } from 'sveltekit-flash-message';\r\n  import { page } from '$app/state';\r\n\r\n  const flash = getFlash(page);\r\n\r\n  function showMessage() {\r\n    $flash = { type: 'success', message: 'Updated from other component!' };\r\n  }\r\n</script>\r\n\r\n<button on:click={showMessage}>Show flash message</button>\r\n```\r\n\r\nThis will of course not set a cookie for the next request, it'll only update the flash message on the client.\r\n\r\n## Client-side fetching and redirecting\r\n\r\nThe flash message will update automatically on redirect or navigation, but when using [fetch](https://kit.svelte.dev/docs/web-standards#fetch-apis), you must call `updateFlash` afterwards:\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n  import { updateFlash } from 'sveltekit-flash-message';\r\n  import { page } from '$app/state';\r\n\r\n  async function submitForm(e: Event) {\r\n    const form = e.target as HTMLFormElement;\r\n    const body = new FormData(e.target as HTMLFormElement);\r\n\r\n    await fetch(form.action, { method: 'POST', body });\r\n    await updateFlash(page);\r\n  }\r\n</script>\r\n\r\n<form method=\"POST\" action=\"/test\" on:submit|preventDefault={submitForm}>\r\n  <input type=\"text\" name=\"test\" value=\"TEST\" />\r\n  <button>Submit with fetch</button>\r\n</form>\r\n```\r\n\r\n`updateFlash` can take a second parameter, which is used to run a function **before** updating, so navigation events will pass through before showing the flash message. This is useful when you want to redirect based on the fetch response:\r\n\r\n```ts\r\nasync function submitForm(e: Event) {\r\n  const response = await fetch(new URL('/logout', $page.url), { method: 'POST' });\r\n  if (response.redirected) {\r\n    await updateFlash(page, () => goto(response.url, { invalidateAll: true }));\r\n  }\r\n}\r\n```\r\n\r\n## Toast messages, event-style\r\n\r\nA common use case for flash messages is to show a toast notification, but a toast is more like an event than data that should be displayed on the page, as we've done previously. But you can use the `flash` store as an event handler with a reactive statement:\r\n\r\n**src/routes/+layout.svelte**\r\n\r\n```ts\r\nimport { getFlash } from 'sveltekit-flash-message';\r\nimport { page } from '$app/state';\r\nimport toast, { Toaster } from 'svelte-french-toast';\r\n\r\nconst flash = getFlash(page);\r\n\r\n$: if ($flash) {\r\n  toast($flash.message, {\r\n    icon: $flash.type == 'success' ? '✅' : '❌'\r\n  });\r\n\r\n  // Clear the flash message to avoid double-toasting.\r\n  $flash = undefined;\r\n}\r\n```\r\n\r\n## Flash message options\r\n\r\nWhen calling `getFlash`, you can specify options, which will be inherited for the current route and the ones below.\r\n\r\n```ts\r\nconst flash = getFlash(page, {\r\n  clearOnNavigate: true,\r\n  clearAfterMs: undefined,\r\n  clearArray: false,\r\n  flashCookieOptions: CookieSerializeOptions\r\n});\r\n```\r\n\r\nYou can also use `initFlash`, if you don't display a flash message in a certain layout but still want to set options for the routes below:\r\n\r\n```ts\r\nimport { initFlash } from 'sveltekit-flash-message';\r\nimport { page } from '$app/state';\r\n\r\ninitFlash(page, {\r\n  clearAfterMs: 10000\r\n});\r\n```\r\n\r\n### clearOnNavigate\r\n\r\nIf `true` (the default), the flash message will be removed when navigating to a different route.\r\n\r\n### clearAfterMs\r\n\r\nCan be set to a number of milliseconds before the flash message is automatically set to `undefined`.\r\n\r\n### clearArray\r\n\r\nIf you specify `App.PageData['flash']` as an array, the library will concatenate messages into the array instead of replacing them. But if you always want to clear the previous messages for arrays, set the `clearArray` option to `true`. If your flash message isn't an array, this option will have no effect.\r\n\r\n### flashCookieOptions\r\n\r\nYou can change the options for the cookie being sent, like this on the server:\r\n\r\n```ts\r\nimport { loadFlash, flashCookieOptions } from 'sveltekit-flash-message/server';\r\n\r\nflashCookieOptions.sameSite = 'lax';\r\n\r\nexport const load = loadFlash(async (event) => {\r\n  // ...load function...\r\n});\r\n```\r\n\r\nAnd correspondingly, on the client (in a top-level component):\r\n\r\n```ts\r\nimport { initFlash } from 'sveltekit-flash-message';\r\n\r\ninitFlash(page, {\r\n  flashCookieOptions: { sameSite: 'lax' }\r\n});\r\n```\r\n\r\nAll options can be found in the [cookie npm package](https://github.com/jshttp/cookie#options-1). Default options for the flash cookie are:\r\n\r\n```ts\r\n{\r\n  path: '/',\r\n  maxAge: 120,\r\n  sameSite: 'strict',\r\n  httpOnly: false // Setting this to true will most likely break things client-side.\r\n}\r\n```\r\n\r\nThe name of the cookie, `flash`, cannot be changed currently, let me know if that's inconvenient. ⚡\r\n\r\n## Securing the flash message\r\n\r\nSince the flash message is transferred in a cookie, it can be easily tampered with, so don't trust its content. Treat it like you do with any user data - hanging from a ten-foot pole over a fiery pit. 🔥 So never use `{@html}` to display it, and if you need to persist it for some reason, make sure you validate it.\r\n\r\n## Together with Superforms\r\n\r\nThe sister library to sveltekit-flash-message is [Superforms](https://superforms.rocks), the all-in-one solution for forms in SvelteKit. You can use them together without any extra work, but there are options for closer integration, [found here](https://superforms.rocks/flash-messages) on the Superforms website.\r\n\r\n# Notes\r\n\r\n## When setting cookies in a response\r\n\r\nIf you're using `+hooks.server.ts/js`, or anywhere you have access to `response`, calling `response.headers.set('set-cookie', ...)` will discard the flash message cookie. You must use `response.headers.append` instead.\r\n\r\n## Redirecting in the load function\r\n\r\nIn SvelteKit, links are [preloaded on hover](https://kit.svelte.dev/docs/link-options#data-sveltekit-preload-data) for increased responsiveness of the app. This can have the side-effect of accidentally setting a flash cookie, if a flash message redirect is made in a load function, and the user hovers over a link leading to it, so it is preloaded. To prevent this, set the `data-sveltekit-preload-data=\"tap\"` attribute on links where a redirect could happen in the load function.\r\n\r\n# Migration guides\r\n\r\n## From 0.x to 1.x\r\n\r\nThe only thing you need to do when upgrading to 1.x is to remove all calls to `updateFlash` in `use:enhance`.\r\n\r\n```diff\r\n <form\r\n    method=\"POST\"\r\n-   use:enhance={() =>\r\n-     ({ update }) =>\r\n-       updateFlash(page, update)}\r\n+   use:enhance\r\n >\r\n```\r\n\r\n## From 1.x to 2.x\r\n\r\n1. Rename functions:\r\n\r\n- `loadFlashMessage` is deprecated and renamed to `loadFlash`.\r\n- `initFlash` is only needed for configuration, `getFlash` can be used directly in most cases.\r\n\r\n2. If you've added the `beforeNavigate` snippet that clears the flash message after navigation, it's now automatic and can be removed. (It can be prevented by setting the `clearOnNavigate` option to `false`.)\r\n\r\n3. If you're using the snippet for clearing the message after a certain amount of time, you can remove it and use the `clearAfterMs` option instead.\r\n\r\n## Feedback and issues\r\n\r\nPlease [open a github issue](https://github.com/ciscoheat/sveltekit-flash-message/issues) for suggestions, if you find a bug or have feedback in general!\r\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 966],
		[3603, 1225],
		[3610, 1012],
		[3617, 938],
		[3624, 1015],
		[3631, 1373],
		[3638, 1281],
		[3645, 731],
		[3652, 1317],
		[3659, 1612],
		[3666, 1534],
		[3673, 2129],
		[3680, 1544],
		[3687, 1544],
		[3694, 2349],
		[3701, 2187],
		[3708, 2572],
		[3715, 2616],
		[3722, 2361],
		[3729, 2636],
		[3736, 1899],
		[3743, 2365],
		[3750, 2342],
		[3757, 2377],
		[3764, 2912],
		[3771, 2303],
		[3778, 2368],
		[3785, 2848],
		[3792, 2531],
		[3799, 2574],
		[3806, 3035],
		[3813, 3724],
		[3820, 2947],
		[3827, 3928],
		[3834, 3475],
		[3841, 3581],
		[3848, 3529],
		[3855, 3109],
		[3862, 2886],
		[3869, 3191],
		[3876, 3249],
		[3883, 3242],
		[3890, 3658],
		[3897, 3223],
		[3904, 3123],
		[3911, 3373],
		[3918, 3737],
		[3925, 4045],
		[3932, 3771],
		[3939, 4715],
		[3946, 4745],
		[3953, 5473],
		[3960, 3641],
		[3967, 3663],
		[3974, 4721],
		[3981, 4811],
		[3988, 5001],
		[3995, 4034],
		[4002, 4849],
		[4009, 2477],
		[4016, 2644],
		[4023, 4361],
		[4030, 4538],
		[4037, 4802],
		[4044, 4649],
		[4051, 4632],
		[4058, 4227],
		[4065, 4826],
		[4072, 7346],
		[4079, 5306],
		[4086, 5759],
		[4093, 5743],
		[4100, 6031],
		[4107, 5276],
		[4114, 6034],
		[4121, 5483],
		[4128, 4932],
		[4135, 4833]
	]
}
