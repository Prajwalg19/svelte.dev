{
	"name": "styled-svelte",
	"description": "Create Svelte components with attached styles using CSS-in-JS.",
	"repo_url": "https://github.com/vanzinvestor/styled-svelte",
	"authors": ["vanzinvestor"],
	"homepage": "https://github.com/vanzinvestor/styled-svelte",
	"downloads": 9,
	"updated": "2022-12-20T06:55:43.561Z",
	"tags": ["ui"],
	"github_stars": 3,
	"typescript": true,
	"version": "1.2.0",
	"svelte_range": "^3.53.1",
	"last_rune_check_version": "1.2.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "styled-svelte",
				"version": "1.2.0",
				"size": 172112
			},
			{
				"name": "@emotion/css",
				"version": "11.13.5",
				"size": 272952
			},
			{
				"name": "@emotion/babel-plugin",
				"version": "11.13.5",
				"size": 152334
			},
			{
				"name": "@babel/helper-module-imports",
				"version": "7.27.1",
				"size": 63724
			},
			{
				"name": "@babel/traverse",
				"version": "7.27.1",
				"size": 689113
			},
			{
				"name": "@babel/code-frame",
				"version": "7.27.1",
				"size": 33160
			},
			{
				"name": "@babel/helper-validator-identifier",
				"version": "7.27.1",
				"size": 48330
			},
			{
				"name": "js-tokens",
				"version": "4.0.0"
			},
			{
				"name": "picocolors",
				"version": "1.1.1",
				"size": 6373
			},
			{
				"name": "@babel/generator",
				"version": "7.27.1",
				"size": 560098
			},
			{
				"name": "@babel/parser",
				"version": "7.27.1",
				"size": 1859876
			},
			{
				"name": "@babel/types",
				"version": "7.27.1",
				"size": 2597469
			},
			{
				"name": "@babel/helper-string-parser",
				"version": "7.27.1",
				"size": 31816
			},
			{
				"name": "@jridgewell/gen-mapping",
				"version": "0.3.8",
				"size": 81596
			},
			{
				"name": "@jridgewell/set-array",
				"version": "1.2.1",
				"size": 17945
			},
			{
				"name": "@jridgewell/sourcemap-codec",
				"version": "1.5.0",
				"size": 112815
			},
			{
				"name": "@jridgewell/trace-mapping",
				"version": "0.3.25",
				"size": 169330
			},
			{
				"name": "@jridgewell/resolve-uri",
				"version": "3.1.2",
				"size": 53153
			},
			{
				"name": "jsesc",
				"version": "3.1.0",
				"size": 32280
			},
			{
				"name": "@babel/template",
				"version": "7.27.1",
				"size": 70675
			},
			{
				"name": "debug",
				"version": "4.4.0",
				"size": 42798
			},
			{
				"name": "ms",
				"version": "2.1.3",
				"size": 6721
			},
			{
				"name": "globals",
				"version": "11.12.0",
				"size": 39779
			},
			{
				"name": "@babel/runtime",
				"version": "7.27.1",
				"size": 246647
			},
			{
				"name": "@emotion/hash",
				"version": "0.9.2",
				"size": 9928
			},
			{
				"name": "@emotion/memoize",
				"version": "0.9.0",
				"size": 4009
			},
			{
				"name": "@emotion/serialize",
				"version": "1.3.3",
				"size": 52736
			},
			{
				"name": "@emotion/unitless",
				"version": "0.10.0",
				"size": 6026
			},
			{
				"name": "@emotion/utils",
				"version": "1.4.2",
				"size": 19952
			},
			{
				"name": "csstype",
				"version": "3.1.3",
				"size": 1246074
			},
			{
				"name": "babel-plugin-macros",
				"version": "3.1.0",
				"size": 37983
			},
			{
				"name": "cosmiconfig",
				"version": "7.1.0",
				"size": 92011
			},
			{
				"name": "@types/parse-json",
				"version": "4.0.2",
				"size": 2946
			},
			{
				"name": "import-fresh",
				"version": "3.3.1",
				"size": 4693
			},
			{
				"name": "parent-module",
				"version": "1.0.1",
				"size": 3922
			},
			{
				"name": "callsites",
				"version": "3.1.0",
				"size": 6332
			},
			{
				"name": "resolve-from",
				"version": "4.0.0"
			},
			{
				"name": "parse-json",
				"version": "5.2.0",
				"size": 5409
			},
			{
				"name": "error-ex",
				"version": "1.3.2",
				"size": 9035
			},
			{
				"name": "is-arrayish",
				"version": "0.2.1"
			},
			{
				"name": "lines-and-columns",
				"version": "1.2.4",
				"size": 5386
			},
			{
				"name": "json-parse-even-better-errors",
				"version": "2.3.1",
				"size": 10426
			},
			{
				"name": "path-type",
				"version": "4.0.0",
				"size": 5407
			},
			{
				"name": "yaml",
				"version": "1.10.2",
				"size": 448149
			},
			{
				"name": "resolve",
				"version": "1.22.10",
				"size": 145619
			},
			{
				"name": "is-core-module",
				"version": "2.16.1",
				"size": 33475
			},
			{
				"name": "hasown",
				"version": "2.0.2",
				"size": 8765
			},
			{
				"name": "function-bind",
				"version": "1.1.2",
				"size": 31427
			},
			{
				"name": "path-parse",
				"version": "1.0.7",
				"size": 4511
			},
			{
				"name": "supports-preserve-symlinks-flag",
				"version": "1.0.0",
				"size": 9178
			},
			{
				"name": "convert-source-map",
				"version": "1.9.0",
				"size": 11434
			},
			{
				"name": "escape-string-regexp",
				"version": "4.0.0",
				"size": 3790
			},
			{
				"name": "find-root",
				"version": "1.1.0"
			},
			{
				"name": "source-map",
				"version": "0.5.7"
			},
			{
				"name": "stylis",
				"version": "4.2.0",
				"size": 134152
			},
			{
				"name": "@emotion/cache",
				"version": "11.14.0",
				"size": 244106
			},
			{
				"name": "@emotion/sheet",
				"version": "1.4.0",
				"size": 29483
			},
			{
				"name": "@emotion/weak-memoize",
				"version": "0.4.0",
				"size": 5807
			},
			{
				"name": "color",
				"version": "4.2.3",
				"size": 16806
			},
			{
				"name": "color-string",
				"version": "1.9.1",
				"size": 10115
			},
			{
				"name": "color-name",
				"version": "1.1.4",
				"size": 6693
			},
			{
				"name": "simple-swizzle",
				"version": "0.2.2"
			},
			{
				"name": "is-arrayish",
				"version": "0.3.2",
				"size": 54720
			},
			{
				"name": "color-convert",
				"version": "2.0.1",
				"size": 27189
			},
			{
				"name": "svelte",
				"version": "3.59.2",
				"size": 10624206
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[3, 4],
			[4, 5],
			[5, 6],
			[5, 7],
			[5, 8],
			[4, 9],
			[9, 10],
			[10, 11],
			[11, 12],
			[11, 6],
			[9, 11],
			[9, 13],
			[13, 14],
			[13, 15],
			[13, 16],
			[16, 17],
			[16, 15],
			[9, 16],
			[9, 18],
			[4, 10],
			[4, 19],
			[19, 5],
			[19, 10],
			[19, 11],
			[4, 11],
			[4, 20],
			[20, 21],
			[4, 22],
			[3, 11],
			[2, 23],
			[2, 24],
			[2, 25],
			[2, 26],
			[26, 24],
			[26, 25],
			[26, 27],
			[26, 28],
			[26, 29],
			[2, 30],
			[30, 23],
			[30, 31],
			[31, 32],
			[31, 33],
			[33, 34],
			[34, 35],
			[33, 36],
			[31, 37],
			[37, 38],
			[38, 39],
			[37, 5],
			[37, 40],
			[37, 41],
			[31, 42],
			[31, 43],
			[30, 44],
			[44, 45],
			[45, 46],
			[46, 47],
			[44, 48],
			[44, 49],
			[2, 50],
			[2, 51],
			[2, 52],
			[2, 53],
			[2, 54],
			[1, 55],
			[55, 25],
			[55, 56],
			[55, 28],
			[55, 57],
			[55, 54],
			[1, 26],
			[1, 56],
			[1, 28],
			[0, 58],
			[58, 59],
			[59, 60],
			[59, 61],
			[61, 62],
			[58, 63],
			[63, 60],
			[0, 64]
		],
		"circular": []
	},
	"readme": "# styled-svelte\r\n\r\n`styled-svelte` is a way to create Svelte components that have styles attached to them. It's available from [styled-svelte](https://www.npmjs.com/package/styled-svelte). styled was heavily inspired by [@emotion/styled](https://www.npmjs.com/package/@emotion/styled) and [styled-components](https://www.npmjs.com/package/styled-components)\r\n\r\n## Table of Contents\r\n\r\n- [Quick Start](#quick-start)\r\n- [API](#api)\r\n  - [Styles with html tag — `styled`](#styled)\r\n  - [Styled with component tag — `styled`](#styled-with-component-tag)\r\n  - [Styled with props — `styled` `props`](#styles-with-props)\r\n  - [Styles with props in component — `build in`](#styles-with-props-in-component)\r\n  - [Styles with styledSystem — `styledSystem` `build in`](#styles-with-styledsystem)\r\n  - [Forwarding Refs Events — `build in`](#forwarding-refs-events)\r\n  - [Action Events — `build in` `action props`](#action-events)\r\n  - [Theme — `ThemeProvider` `props.theme` `useTheme`](#theme)\r\n  - [Global Styles — `injectGlobal`](#global-styles)\r\n  - [Color Utility — `alpha` `darker` `lighten` and more](#color-utility)\r\n  - [Other Api — `css` `cx` `cache` and more](#other-api)\r\n- [Example App](#example-app)\r\n- [Thanks](#thanks-to-inspire-me)\r\n\r\n## Quick Start\r\n\r\nGet up and running with a single import.\r\n\r\n```bash\r\nnpm install --save styled-svelte\r\n```\r\n\r\n```ts\r\nimport styled from 'styled-svelte';\r\n\r\nconst Div = styled.div`\r\n  padding: 10px 20px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  color: #333;\r\n  border: none;\r\n  outline: none;\r\n  padding: 10px 20px;\r\n  cursor: pointer;\r\n  backgroundcolor: #e8e8e8;\r\n  &:hover {\r\n    backgroundcolor: #d8d8d8;\r\n  }\r\n`;\r\n```\r\n\r\nUse them like any other Svelte component – except they're styled!\r\n\r\n```svelte\r\n<Div>\r\n  <Button>Click</Button>\r\n</Div>\r\n```\r\n\r\n## API\r\n\r\n### styled\r\n\r\nThe `styled` function accepts tag and styles as a object or template string and returns a svelte component.\r\n\r\n#### Styles with html tag\r\n\r\n`styled` with html tag or component. and used object styles.\r\n\r\n```ts\r\nimport styled from 'styled-svelte';\r\n\r\nconst Button = styled('button', {\r\n  color: '#333',\r\n  border: 'none',\r\n  outline: 'none',\r\n  padding: '10px 20px',\r\n  cursor: 'pointer',\r\n  backgroundColor: '#e8e8e8',\r\n  '&:hover': {\r\n    backgroundColor: '#d8d8d8',\r\n  },\r\n});\r\n```\r\n\r\n`styled` with **object styles**. except you call it with an html tag\r\n\r\n```ts\r\nconst Button = styled.button({\r\n  color: '#333',\r\n  border: 'none',\r\n  outline: 'none',\r\n  padding: '10px 20px',\r\n  cursor: 'pointer',\r\n  backgroundColor: '#e8e8e8',\r\n  '&:hover': {\r\n    backgroundColor: '#d8d8d8',\r\n  },\r\n});\r\n```\r\n\r\n`styled` with **css styles**, except you call it with an html tag\r\n\r\n```ts\r\nimport styled from 'styled-svelte';\r\n\r\nconst Button = styled.button`\r\n  color: #333;\r\n  border: none;\r\n  outline: none;\r\n  padding: 10px 20px;\r\n  cursor: pointer;\r\n  backgroundcolor: #e8e8e8;\r\n  &:hover: {\r\n    backgroundcolor: #d8d8d8;\r\n  }\r\n`;\r\n```\r\n\r\n### Styled with Component tag\r\n\r\n```javascript\r\nimport styled from 'styled-svelte';\r\n\r\nconst Button = styled('button', {\r\n  color: '#333',\r\n  border: 'none',\r\n  outline: 'none',\r\n  padding: '10px 20px',\r\n  cursor: 'pointer',\r\n  backgroundColor: '#e8e8e8',\r\n  '&:hover': {\r\n    backgroundColor: '#d8d8d8',\r\n  },\r\n});\r\n\r\nconst NewButton = styled(Button, {\r\n  color: '#fff',\r\n  padding: '10px 32px',\r\n  backgroundColor: '#333',\r\n  '&:hover': {\r\n    backgroundColor: '#444',\r\n  },\r\n});\r\n```\r\n\r\n### Styles with props\r\n\r\n#### Object Styles\r\n\r\n```ts\r\nimport styled, { type AnyProperties } from 'styled-svelte';\r\n\r\n// Object Styles function return object\r\nconst Button = styled('button', (props: AnyProperties) => ({\r\n  color: props.color,\r\n  border: 'none',\r\n  outline: 'none',\r\n  padding: '10px 20px',\r\n  cursor: 'pointer',\r\n  backgroundColor: '#e8e8e8',\r\n  '&:hover': {\r\n    backgroundColor: '#d8d8d8',\r\n  },\r\n}));\r\n\r\n// OR\r\nconst Button = styled.button((props: AnyProperties) => ({\r\n  color: props.color,\r\n  border: 'none',\r\n  outline: 'none',\r\n  padding: '10px 20px',\r\n  cursor: 'pointer',\r\n  backgroundColor: '#e8e8e8',\r\n  '&:hover': {\r\n    backgroundColor: '#d8d8d8',\r\n  },\r\n}));\r\n\r\n// Object Styles function return string (look like css)\r\nconst Button = styled(\r\n  'button',\r\n  (props: AnyProperties) => `\r\n  color: ${props.color};\r\n  border: none;\r\n  outline: none;\r\n  padding: 10px 20px;\r\n  cursor: pointer;\r\n  background-color: #e8e8e8;\r\n  &:hover {\r\n    background-color: #d8d8d8;\r\n  }\r\n`\r\n);\r\n\r\n// OR\r\nconst Button = styled.button(\r\n  (props: AnyProperties) => `\r\n  color: ${props.color};\r\n  border: none;\r\n  outline: none;\r\n  padding: 10px 20px;\r\n  cursor: pointer;\r\n  background-color: #e8e8e8;\r\n  &:hover {\r\n    background-color: #d8d8d8;\r\n  }\r\n`\r\n);\r\n```\r\n\r\n#### CSS Styles\r\n\r\n```ts\r\nimport styled, { type AnyProperties } from 'styled-svelte';\r\n\r\n// Css Styles with Props (function return props)\r\nconst Button = styled.button`\r\n  color: ${(props: AnyProperties) => props.color};\r\n  border: none;\r\n  outline: none;\r\n  padding: 10px 20px;\r\n  cursor: pointer;\r\n  backgroundcolor: #e8e8e8;\r\n  &:hover: {\r\n    backgroundcolor: #d8d8d8;\r\n  }\r\n`;\r\n```\r\n\r\nUse\r\n\r\n```svelte\r\n<Button color=\"#333\">Click</Button>\r\n```\r\n\r\nOutput in HTML\r\n\r\n```html\r\n<button class=\"styled-1hfd8np\">Click</button>\r\n```\r\n\r\n### Styles with props in Component\r\n\r\n\\*_Overide `styled` API_\r\n\r\n\\*_Build in props for every component_\r\n\r\n\\*_Padding and Margin multiply by 8_\r\n\r\n#### Padding Props\r\n\r\n`p` props `p={2}` eq. `padding: 16px;`\r\n\r\n`p={[2]}` eq. `padding: 16px;`\r\n\r\n`p={[2,4]}` eq. `padding: 16px 32px;`\r\n\r\n`p={[2,4,1]}` eq. `padding: 16px 32px 8px;`\r\n\r\n`p={[2,4,1,0]}` eq. `padding: 16px 32px 8px 0px;`\r\n\r\n`pt` props `pt={2}` eq. `padding-top: 16px;`\r\n\r\n`pr` props `pr={2}` eq. `padding-right: 16px;`\r\n\r\n`pb` props `pb={2}` eq. `padding-bottom: 16px;`\r\n\r\n`pl` props `pl={2}` eq. `padding-left: 16px;`\r\n\r\n`px` props `px={2}` eq. `padding-left: 16px; padding-right: 16px;`\r\n\r\n`py` props `py={2}` eq. `padding-top: 16px; padding-bottom: 16px;`\r\n\r\n#### Margin Props\r\n\r\n`m` props `m={2}` eq. `margin: 16px;`\r\n\r\n`m={[2]}` eq. `margin: 16px;`\r\n\r\n`m={[2,4]}` eq. `margin: 16px 32px;`\r\n\r\n`m={[2,4,1]}` eq. `margin: 16px 32px 8px;`\r\n\r\n`m={[2,4,1,0]}` eq. `margin: 16px 32px 8px 0px;`\r\n\r\n`mt` props `mt={2}` eq. `margin-top: 16px;`\r\n\r\n`mr` props `mr={2}` eq. `margin-right: 16px;`\r\n\r\n`mb` props `mb={2}` eq. `margin-bottom: 16px;`\r\n\r\n`ml` props `ml={2}` eq. `margin-left: 16px;`\r\n\r\n`mx` props `mx={2}` eq. `margin-left: 16px; margin-right: 16px;`\r\n\r\n`my` props `my={2}` eq. `margin-top: 16px; margin-bottom: 16px;`\r\n\r\n#### className Props\r\n\r\n`className` props `className=\"btn\"`\r\n\r\n#### Sx Props js-in-css\r\n\r\n\\*_(Styles Object OR Styles Object with Props)_\r\n\r\n`sx` props `sx={{color:'#333',padding:'16px'}}` eq. `color: #333; padding: '16px';`\r\n\r\n`sx` props `sx={(props)=>({color:props.theme[props.theme.mode].color.primary,padding:'16px'})}` eq. `color: #1976d2; padding: '16px';`\r\n\r\nRemark: `props.theme` work with [ThemeProvider](#theme) only\r\n\r\n#### Example Styles with props in Componenent\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\nimport styled from 'styled-svelte';\r\n\r\nconst Button = styled('button', {\r\n  color: '#333',\r\n  border: 'none',\r\n  outline: 'none',\r\n  padding: '10px 20px',\r\n  cursor: 'pointer',\r\n  backgroundColor: '#e8e8e8',\r\n  '&:hover': {\r\n    backgroundColor: '#d8d8d8',\r\n  },\r\n});\r\n</script>\r\n\r\n<!-- Default use-->\r\n<Button>Click<Button>\r\n\r\n<!-- You can do this: Styles in Component -->\r\n<Button p={[2,4]} m={0.5} sx={{color:'#fff',backgroundColor:'#333',\r\n'&:hover':{backgroundColor:'#555'}}}>Click Me</Button>\r\n\r\n<!-- OR Sx with Props -->\r\n<Button p={[2,4]} m={0.5} sx={(props)=>({color:props.theme[props.theme.mode].color.primary,backgroundColor:'#333',\r\n'&:hover':{backgroundColor:'#555'}})}>Click Me</Button>\r\n```\r\n\r\n#### Add subffix\r\n\r\n```svelte\r\n<Button subffix=\"mybtn\">Click</Button>\r\n```\r\n\r\nOutput in HTML\r\n\r\n```html\r\n<button class=\"styled-1hfd8np-mybtn\">Click</button>\r\n```\r\n\r\n#### Combining class names\r\n\r\n```svelte\r\n<Button className=\"btn\">Click</Button>\r\n```\r\n\r\nOutput in HTML\r\n\r\n```html\r\n<button class=\"btn styled-1hfd8np\">Click</button>\r\n```\r\n\r\nRemark: `btn` class from other css library (if you want to overide)\r\n\r\n#### Styles with styledSystem\r\n\r\n```svelte\r\n<Button\r\n  styledSystem\r\n  color=\"#333\"\r\n  border=\"none\"\r\n  outline=\"none\"\r\n  padding=\"10px 20px\"\r\n  cursor=\"pointer\"\r\n  backgroundColor=\"#e8e8e8\">Click\r\n</Button>\r\n```\r\n\r\nThe other props you can used theme. please see [Other props in Component](#other-props-in-component)\r\n\r\n#### Other props in Component\r\n\r\n\\*_If `styledSystem={true}`, the other props you can used. build in, require `string`_\r\n\r\n`alignItems` `alignSelf` `background` `backgroundColor` `backgroundImage` `backgroundPosition` `backgroundRepeat` `border` `borderColor` `borderWidth` `borderStyle` `borderRadius` `bottom` `boxShadow` `boxSizing` `color` `columns` `columnGap` `columnSpan` `cursor` `direction` `display` `flexBasis` `flexDirection` `flexGrow` `flexShrink` `flexWrap` `float` `font` `fontFamily` `fontStyle` `fontWeight` `gap` `grid` `gridArea` `gridAutoColumns` `gridAutoFlow` `gridAutoRows` `gridGap` `gridRow` `gridTemplateAreas` `gridTemplateColumns` `gridTemplateRows` `height` `justifyContent` `justifyItems` `justifySelf` `left` `letterSpacing` `listStyle` `lineHeight` `margin` `marginTop` `marginRight` `marginBottom` `marginLeft` `maxHeight` `maxWidth` `minHeight` `minWidth` `objectFit` `objectPosition` `opacity` `outline` `overflow` `overflowX` `overflowY` `padding` `paddingTop` `paddingRight` `paddingBottom` `paddingLeft` `position` `pointerEvents` `right` `rotate` `rowGap` `scale` `scrollBehavior` `textAlign` `textDecoration` `textIndent` `textJustify` `textOverflow` `textShadow` `textTransform` `top` `transform` `transition` `translate` `verticalAlign` `visibility` `whiteSpace` `width` `wordBreak` `wordSpacing` `zIndex`\r\n\r\n### Forwarding Refs Events\r\n\r\nBuild in `forwordRefEvents` for every component created by `styled` api\r\n\r\n### Action Events\r\n\r\nBuild in `action` events props for every component created by `styled` api\r\n\r\n```svelte\r\n<MyComponent action={myAction}/>\r\n```\r\n\r\n### Theme\r\n\r\n#### Wrapped component with `<ThemeProvider {theme}></ThemeProvider>`\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n// src/Main.svelte\r\nimport { ThemeProvider } from 'styled-svelte';\r\nimport App from './App.svelte';\r\nimport { themePallete } from './theme/themePallete';\r\n</script>\r\n\r\n<ThemeProvider theme={themePallete}>\r\n  <App />\r\n</ThemeProvider>\r\n```\r\n\r\n```ts\r\n// src/main.ts\r\nimport Main from './Main.svelte';\r\n\r\nconst main = new Main({\r\n  target: document.getElementById('app'), // vite\r\n  // target: document.body, // rollup\r\n});\r\n\r\nexport default main;\r\n```\r\n\r\n```ts\r\n// src/theme/themePallete.ts\r\n// Example theme pallete\r\nexport type ThemePallete = {\r\n  light: Pallete;\r\n  dark: Pallete;\r\n  mode: string;\r\n};\r\n\r\ntype Pallete = {\r\n  color: {\r\n    primary: string;\r\n    secondary: string;\r\n    error: string;\r\n    warning: string;\r\n    info: string;\r\n    success: string;\r\n  };\r\n  background: {\r\n    primary: string;\r\n    secondary: string;\r\n  };\r\n  text: {\r\n    primary: string;\r\n    secondary: string;\r\n    disable: string;\r\n  };\r\n};\r\n\r\nexport const themePallete: ThemePallete = {\r\n  light: {\r\n    color: {\r\n      primary: '#1976d2',\r\n      secondary: '#9c27b0',\r\n      error: '#df2f2f',\r\n      warning: '#ed6c02',\r\n      info: '#0288d1',\r\n      success: '#2e7d36',\r\n    },\r\n    background: {\r\n      primary: '#fff',\r\n      secondary: '#f8f8f8',\r\n    },\r\n    text: {\r\n      primary: '#000000de',\r\n      secondary: '#00000099',\r\n      disable: '#00000061',\r\n    },\r\n  },\r\n  dark: {\r\n    color: {\r\n      primary: '#90caf9',\r\n      secondary: '#ce93d8',\r\n      error: '#f44336',\r\n      warning: '#ffa726',\r\n      info: '#29b6f6',\r\n      success: '#66bb6a',\r\n    },\r\n    background: {\r\n      primary: '#121212',\r\n      secondary: '#1f1f1f',\r\n    },\r\n    text: {\r\n      primary: '#fff',\r\n      secondary: '#ffffffb3',\r\n      disable: '#ffffff80',\r\n    },\r\n  },\r\n  mode: 'light',\r\n};\r\n```\r\n\r\n#### Use in components by `props.theme` or `useTheme()`\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\nimport styled, { type Props, useTheme, alpha } from 'styled-svelte';\r\nimport type { ThemePallate } from './theme/themePallete';\r\n\r\n// Object Styles, access theme from Props and assign Types on styled\r\nconst Button = styled<ThemePallete>('button', (props) => ({\r\n  color: props.theme[props.theme.mode].color.primary,\r\n  border: 'none',\r\n  outline: 'none',\r\n  padding: '10px 20px',\r\n  cursor: 'pointer',\r\n  backgroundColor: alpha(props.theme[props.theme.mode].color.primary,  0.6),\r\n  '&:hover': {\r\n    backgroundColor: alpha(props.theme[props.theme.mode].color.primary, 0.5),\r\n  },\r\n}));\r\n\r\n// OR Access theme from Props and assign Types on props\r\nconst Button = styled('button', (props: Props<ThemePallete>) => ({\r\n  //\r\n}));\r\n\r\n// Css Styles, access theme from Props and assign Types on props\r\nconst Button = styled.button`\r\n  color: ${(props:Props<ThemePallete>) => props.theme[props.theme.mode].color.primary};\r\n  border: none;\r\n  outline: none;\r\n  padding: 10px 20px;\r\n  cursor: pointer;\r\n  backgroundColor: ${(props/*:Props<ThemePallete>*/) => alpha(props.theme[props.theme.mode].color.primary,  0.6)};\r\n  &:hover {\r\n    backgroundColor: ${(props/*:Props<ThemePallete>*/) => alpha(props.theme[props.theme.mode].color.primary,  0.5)};\r\n  }\r\n}`;\r\n\r\n// OR useTheme() API\r\nconst theme = useTheme();\r\n\r\nconst Button = styled('button', {\r\n  color: $theme[$theme.mode].color.primary,\r\n  border: 'none',\r\n  outline: 'none',\r\n  padding: '10px 20px',\r\n  cursor: 'pointer',\r\n  backgroundColor: $theme[$theme.mode].color.primary,\r\n  '&:hover': {\r\n    backgroundColor: alpha($theme[$theme.mode].color.primary, 0.2),\r\n  },\r\n});\r\n</script>\r\n```\r\n\r\nRemark: `props.theme` work with `ThemeProvider` only\r\n\r\n#### Toggle Dark Mode\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\nconst theme = useTheme();\r\n\r\nconst toggleMode = () => {\r\n  theme.update((t) => {\r\n    t.mode = t.mode === 'light' ? 'dark' : 'light';\r\n\r\n    return t;\r\n  });\r\n};\r\n\r\n</script>\r\n\r\n<Button on:click={toggleMode}>Toggle dark mode</Button>;\r\n```\r\n\r\n### Global Styles\r\n\r\n`injectGlobal` injects styles into the global scope and is useful for applications such as css resets or font faces.\r\n\r\n```ts\r\nimport { injectGlobal } from 'styled-svelte';\r\n\r\ninjectGlobal({\r\n  '*': {\r\n    padding: 0,\r\n    margin: 0,\r\n    boxSizing: 'border-box',\r\n  },\r\n});\r\n```\r\n\r\n### Color Utility\r\n\r\n```ts\r\nimport {\r\n  alpha,\r\n  darker,\r\n  lighten,\r\n  lightness,\r\n  saturate,\r\n  grayscale,\r\n  whiten,\r\n  blacken,\r\n  fade,\r\n  opaquer,\r\n} from 'styled-svelte';\r\n\r\nalpha('#1976d2', 0.8); // #1976d2cc\r\ndarker('#1976d2', 0.2); // #145EA8\r\nlighten('#1976d2', 0.2); // #338DE7\r\nlightness('#1976d2', 0.2); // ##000101\r\nsaturate('#1976d2', 0.5); // ##0076FF\r\ngrayscale('#1976d2'); // #646464\r\nwhiten('#1976d2', 0.8); // #2D80D2\r\nblacken('#1976d2', 0.8); // #1964AE\r\nfade('#1976d2', 0.2); // #0576d2cc\r\nopaquer('#1976d2', 0.8); // #1976d2\r\n```\r\n\r\n### Other Api\r\n\r\nsuch as `css` `cx` `injectGlobal` `flush` `hydrate` `merge` `getRegisteredStyles` `keyframes` `sheet` `cache` can read from [@emotion/css](https://www.npmjs.com/package/@emotion/css)\r\n\r\n```ts\r\nimport {\r\n  flush,\r\n  hydrate,\r\n  cx,\r\n  merge,\r\n  getRegisteredStyles,\r\n  injectGlobal,\r\n  keyframes,\r\n  css,\r\n  sheet,\r\n  cache\r\n} =  from 'styled-svelte';\r\n\r\n```\r\n\r\n### Example App\r\n\r\n[Theme switcher](https://stackblitz.com/edit/demo-styled-svelte?file=src%2Fpages%2FShop.svelte,src%2Fpages%2FBlog.svelte,src%2Fpages%2FContact.svelte,src%2Fpages%2FHome.svelte&terminal=dev)\r\n\r\n### Thanks to inspire me\r\n\r\n[@emotion/styled](https://www.npmjs.com/package/@emotion/styled)\r\n[styled-components](https://www.npmjs.com/package/styled-components)\r\n[@emotion/css](https://www.npmjs.com/package/@emotion/css)\r\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 2],
		[3610, 9],
		[3624, 5],
		[3631, 1],
		[3645, 14],
		[3652, 34],
		[3659, 2],
		[3666, 14],
		[3673, 1],
		[3680, 1],
		[3694, 1],
		[3701, 1],
		[3715, 1],
		[3722, 2],
		[3736, 6],
		[3743, 1],
		[3750, 2],
		[3757, 2],
		[3764, 1],
		[3771, 1],
		[3778, 3],
		[3785, 1],
		[3792, 2],
		[3799, 2],
		[3806, 2],
		[3820, 4],
		[3827, 1],
		[3834, 19],
		[3841, 53],
		[3848, 3],
		[3855, 2],
		[3862, 1],
		[3869, 1],
		[3876, 2],
		[3890, 10],
		[3897, 1],
		[3904, 1],
		[3911, 2],
		[3925, 3],
		[3946, 2],
		[3953, 2],
		[3967, 1],
		[3974, 3],
		[3988, 2],
		[3995, 1],
		[4023, 2],
		[4037, 17],
		[4044, 9],
		[4051, 2],
		[4058, 8],
		[4065, 2],
		[4072, 1],
		[4079, 2],
		[4093, 1],
		[4100, 29],
		[4107, 2],
		[4114, 9],
		[4121, 8],
		[4128, 4]
	],
	"esm": false,
	"cjs": true
}
