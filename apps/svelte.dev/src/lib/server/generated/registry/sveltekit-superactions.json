{
	"name": "sveltekit-superactions",
	"description": "Call server code from SvelteKit client components.",
	"repo_url": "https://github.com/kumpmati/sveltekit-superactions",
	"authors": ["kumpmati"],
	"homepage": "https://github.com/kumpmati/sveltekit-superactions#readme",
	"downloads": 49,
	"updated": "2024-10-20T20:08:12.370Z",
	"tags": ["server"],
	"github_stars": 23,
	"typescript": true,
	"version": "0.8.0",
	"svelte_range": "^5.0.0",
	"kit_range": "^2.0.0",
	"last_rune_check_version": "0.8.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "sveltekit-superactions",
				"version": "0.8.0",
				"size": 15516
			},
			{
				"name": "devalue",
				"version": "5.1.1",
				"size": 31833
			},
			{
				"name": "proxy-deep",
				"version": "4.0.1",
				"size": 15477
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2]
		],
		"circular": []
	},
	"readme": "<img src=\"https://raw.githubusercontent.com/kumpmati/superactions-docs/main/public/logo.webp\" width=\"64px\" align=\"center\" alt=\"Superactions logo\" /> \n<h1>SvelteKit Superactions</h1>\n\n[![Test](https://github.com/kumpmati/sveltekit-superactions/actions/workflows/test.yml/badge.svg)](https://github.com/kumpmati/sveltekit-superactions/actions/workflows/test.yml)\n\nCall your server code from the client like normal functions.\n\n**ðŸš§ This library is in an early state, and breaking changes will likely happen before the API is stabilised for a v1.0 release! ðŸš§**\n\n[Documentation](https://superactions.matsku.dev)\n\n## Why?\n\nWhile SvelteKit's data fetching patterns are great, but the ease-of-use of React Server Actions doesn't seem to have an equivalent in SvelteKit. The ability to just 'call a function' in the client-side, have it perform logic on the server and return the result to the client is sometimes very useful.\n\nSvelteKit's [form actions](https://kit.svelte.dev/docs/form-actions) are a great fit for many cases, but they can be clunky when you want to call an endpoint without a form element, or when you need to send data that is too complex to be represented in FormData.\n\nThis library aims to provide additional tools alongside SvelteKit's API routes:\n\n## Features\n\n- [x] Type satefy between server and client\n- [x] Automatic JSON conversion (request/response)\n- [x] Schema validation\n  - [x] `zod` helper function\n  - [x] `joi` helper function\n\n## Installation\n\nInstall Superactions with your favourite package manager:\n\n```bash\n# npm, yarn, pnpm, bun, etc\nnpm i sveltekit-superactions\n```\n\n## Usage\n\nA minimal setup requires the following.\n\nIn a `+server.ts` file, define the actions that you want to use:\n\n```ts\n// src/routes/api/+server.ts\nimport { endpoint } from 'sveltekit-superactions';\nimport { db } from '$lib/server/db';\nimport { deleteTodo, findTodo, type TodoUpdate } from '$lib/server/handlers';\n\n// Always attach the endpoint as a POST handler\nexport const POST = endpoint({\n\t// e is the RequestEvent provided by SvelteKit,\n\t// and the second argument is the request body decoded as JSON.\n\teditTodo: async (e, body: TodoUpdate) => {\n\t\t// The returned value is automatically serialized as JSON.\n\t\t// The client-side function gets its return type directly from the return type of its server action\n\t\treturn await db.update(body.id, body);\n\t},\n\n\t// You can also just import handlers from other files and group them here.\n\tdeleteTodo,\n\n\t// Or give them custom names\n\tmy_handler: findTodo\n});\n\n// export the type of the endpoint, so that we get types in the client\nexport type API = typeof POST;\n```\n\nAnd in any Svelte component import the `superActions` function and the exported types to instantiate the client.\n\n```svelte\n<!-- src/routes/+page.svelte -->\n<script lang=\"ts\">\n\timport { superActions } from 'sveltekit-superactions';\n\timport type { API } from './api/+server.js'; // exported API type\n\n\t// give the client the path and API types to instantiate it.\n\tconst api = superActions<API>('/api');\n</script>\n\n{#await api.getTodos()}\n\t<p>Loading TODOs...</p>\n{:then todos}\n\t<ul>\n\t\t{#each todos as todo}\n\t\t\t<li>\n\t\t\t\t{todo.text}\n\t\t\t\t<input type=\"checkbox\" checked={todo.checked} />\n\t\t\t</li>\n\t\t{/each}\n\t</ul>\n{/await}\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3841, 626],
		[3848, 275],
		[3855, 37],
		[3862, 15],
		[3869, 77],
		[3876, 20],
		[3883, 1],
		[3890, 19],
		[3897, 19],
		[3904, 24],
		[3911, 19],
		[3918, 7],
		[3925, 4],
		[3932, 3],
		[3939, 58],
		[3946, 69],
		[3953, 14],
		[3960, 24],
		[3967, 106],
		[3974, 25],
		[3981, 12],
		[3988, 46],
		[3995, 44],
		[4002, 46],
		[4009, 43],
		[4016, 116],
		[4023, 22],
		[4030, 37],
		[4037, 15],
		[4044, 18],
		[4051, 14],
		[4058, 2],
		[4065, 4],
		[4072, 8],
		[4079, 10],
		[4086, 15],
		[4093, 2],
		[4100, 16],
		[4107, 40],
		[4114, 49],
		[4121, 22],
		[4128, 80],
		[4135, 63]
	],
	"esm": true,
	"cjs": false
}
