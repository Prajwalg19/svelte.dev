{
	"name": "svelte-algolia",
	"description": "Provides Algolia search integration for Svelte apps.",
	"repo_url": "https://github.com/janosh/svelte-algolia",
	"authors": ["janosh"],
	"homepage": "https://svelte-algolia.netlify.app",
	"downloads": 25,
	"updated": "2022-10-24T21:39:10.581Z",
	"tags": ["integration"],
	"github_stars": 36,
	"typescript": true,
	"version": "0.3.2",
	"svelte_range": "^3.52.0",
	"kit_range": "1.0.0-next.524",
	"last_rune_check_version": "0.3.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-algolia",
				"version": "0.3.2",
				"size": 29569
			},
			{
				"name": "algoliasearch",
				"version": "4.24.0",
				"size": 209761
			},
			{
				"name": "@algolia/recommend",
				"version": "4.24.0",
				"size": 85358
			},
			{
				"name": "@algolia/transporter",
				"version": "4.24.0",
				"size": 50106
			},
			{
				"name": "@algolia/cache-common",
				"version": "4.24.0",
				"size": 5577
			},
			{
				"name": "@algolia/logger-common",
				"version": "4.24.0",
				"size": 2157
			},
			{
				"name": "@algolia/requester-common",
				"version": "4.24.0",
				"size": 2762
			},
			{
				"name": "@algolia/client-common",
				"version": "4.24.0",
				"size": 10575
			},
			{
				"name": "@algolia/client-search",
				"version": "4.24.0",
				"size": 190339
			},
			{
				"name": "@algolia/logger-console",
				"version": "4.24.0",
				"size": 2371
			},
			{
				"name": "@algolia/cache-in-memory",
				"version": "4.24.0",
				"size": 3628
			},
			{
				"name": "@algolia/requester-node-http",
				"version": "4.24.0",
				"size": 9215
			},
			{
				"name": "@algolia/requester-browser-xhr",
				"version": "4.24.0",
				"size": 6246
			},
			{
				"name": "@algolia/cache-browser-local-storage",
				"version": "4.24.0",
				"size": 8153
			},
			{
				"name": "@algolia/client-account",
				"version": "4.24.0",
				"size": 6781
			},
			{
				"name": "@algolia/client-analytics",
				"version": "4.24.0",
				"size": 12282
			},
			{
				"name": "@algolia/client-personalization",
				"version": "4.24.0",
				"size": 6507
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[3, 4],
			[3, 5],
			[3, 6],
			[2, 4],
			[2, 7],
			[7, 3],
			[7, 6],
			[2, 8],
			[8, 3],
			[8, 7],
			[8, 6],
			[2, 5],
			[2, 9],
			[9, 5],
			[2, 10],
			[10, 4],
			[2, 6],
			[2, 11],
			[11, 6],
			[2, 12],
			[12, 6],
			[2, 13],
			[13, 4],
			[1, 3],
			[1, 4],
			[1, 7],
			[1, 8],
			[1, 5],
			[1, 14],
			[14, 7],
			[14, 8],
			[14, 3],
			[1, 9],
			[1, 10],
			[1, 15],
			[15, 3],
			[15, 7],
			[15, 8],
			[15, 6],
			[1, 6],
			[1, 11],
			[1, 12],
			[1, 16],
			[16, 3],
			[16, 7],
			[16, 6],
			[1, 13]
		],
		"circular": []
	},
	"readme": "<h1 align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/janosh/svelte-algolia/main/static/favicon.svg\" alt=\"Svelte Algolia\" height=60>\n  <br>&ensp;Svelte Algolia\n</h1>\n\n<h4 align=\"center\">\n\n[![Tests](https://github.com/janosh/svelte-algolia/actions/workflows/test.yml/badge.svg)](https://github.com/janosh/svelte-algolia/actions/workflows/test.yml)\n[![pre-commit.ci status](https://results.pre-commit.ci/badge/github/janosh/svelte-algolia/main.svg)](https://results.pre-commit.ci/latest/github/janosh/svelte-algolia/main)\n[![NPM version](https://img.shields.io/npm/v/svelte-algolia?color=blue&logo=NPM)](https://npmjs.com/package/svelte-algolia)\n[![Netlify Status](https://api.netlify.com/api/v1/badges/496f6094-b6b2-4929-ab16-ba2fdc61d57e/deploy-status)](https://app.netlify.com/sites/svelte-algolia/deploys)\n[![Open in StackBlitz](https://img.shields.io/badge/Open%20in-StackBlitz-darkblue?logo=stackblitz)](https://stackblitz.com/github/janosh/svelte-algolia)\n\n</h4>\n\n<div class=\"hide-in-docs\">\n\n[**Live Demo**](https://svelte-algolia.netlify.app)\n\n</div>\n\nUtility for server-side Algolia index updates plus a client-side search component for Svelte apps. Only adds a single dependency:\n\n- server-side: [`algoliasearch`](https://npmjs.com/package/algoliasearch)\n- client-side: [`algoliasearch/lite`](https://algolia.com/doc/api-client/getting-started/install/javascript?client=javascript#explanation-of-different-builds) (13 KB).\n\n<slot />\n\nThere are 3 steps to setting up `svelte-algolia`:\n\n1. `npm install --dev svelte-algolia`\n2. Setup your [server-side index updates](#2-server-side-index-updates).\n3. Integrate the [client-side search component](#3-client-side-ui) into your site.\n\n## 2. Server-Side Index Updates\n\n1. Create an `algoliaConfig` object:\n\n   ```js\n   import 'dotenv/config' // optional\n\n   async function loadPokedex() {\n     const json = await import('pokedex.json')\n     return json.default.map((el) => ({ ...el, id: el.someUniqAttribute }))\n   }\n\n   const algoliaConfig = {\n     appId: process.env.VITE_ALGOLIA_APP_ID,\n     // don't prefix admin key with VITE_ else it would get exposed to client-side code\n     apiKey: process.env.ALGOLIA_ADMIN_KEY,\n     indices: [\n       { name: `Pokedex`, getData: loadPokedex },\n       { name: `Hitchhiker's Guide`, getData: guideLoader },\n     ],\n     settings: {\n       attributesToHighlight: [`name`],\n     },\n   }\n   ```\n\n   The `getData` function is expected to return an array of objects containing the data you wish to index (a product catalog, blog posts, documentation pages, pok√©mons or whatever). Each object in the data array should have a key named `id`, `_id` or `objectID` for Algolia to recognize it and overwrite existing data where appropriate.\n\n   The settings object applies to all indices. You can also pass a settings object to each index individually which overrides the general one.\n\n2. Pass your config to `indexAlgolia`:\n\n   ```js\n   import { indexAlgolia } from 'svelte-algolia/server-side'\n\n   indexAlgolia(algoliaConfig)\n   ```\n\n   You can call this function wherever you'd like to update your indices, e.g. in `svelte.config.js` or in `src/hooks.ts` (as this demo site does). Typically, you would include this in every production build of your app.\n\n### Config Options\n\n```js\nconst defaultConfig = {\n  verbosity: 1, // 0, 1 or 2 for no/some/lots of logging\n  partialUpdates: false, // if true, figures out diffs between existing\n  // items and new ones and only uploads changes, otherwise, completely\n  // overwrites each index on every call to indexAlgolia()\n  matchFields: [], // (only used when partialUpdates is true) keys of fields to check\n  // for whether an item has changed; could e.g. be a timestamp, hash or an ID that's\n  // updated every time the item has changed; if not provided, items are checked for\n  // deep-equality to discover changes which can become slow for thousands of items\n  settings: {}, // an object of Algolia index settings that applies to all indices\n  // see https://algolia.com/doc/api-reference/settings-api-parameters for available options\n  // can be overridden for individual indices by passing a settings object as part of the indices array:\n  // indices = [{ name: `pokedex`, ..., settings: { foo: `bar` }}],\n}\n```\n\n### Auto-update Indices during Builds\n\nTo use this package as part of a build process (e.g. in a [SvelteKit](https://kit.svelte.dev) app), simply call `indexAlgolia` in your build config:\n\n```js\n// svelte.config.js\n\n// only update Algolia indices on production builds (saves API quota)\nif (process.env.NODE_ENV === `production`) {\n  const { indexAlgolia } = await import(`svelte-algolia/server-side`)\n\n  const algoliaConfig = {\n    // see above\n  }\n  indexAlgolia(algoliaConfig)\n}\n```\n\n## 3. Client Side UI\n\n`<Search />` needs your Algolia app's ID and search key to access its search indices as well as a mapping from index names to corresponding Svelte-component that should render search hits coming from that index. Each hit component receives a `hit` object as prop with all attributes stored in the Algolia index.\n\n```svelte\n<script>\n  import Search from 'svelte-algolia'\n  import PokemonHit from '../components/PokemonHit.svelte'\n\n  const appId = '0OJ5UL9OJX'\n  const searchKey = '63f563566cdd6de606e2bb0fdc291994'\n  // in a real app you'd get your credentials like this:\n  const appId = import.meta.env.VITE_ALGOLIA_APP_ID\n  const searchKey = import.meta.env.VITE_ALGOLIA_SEARCH_KEY\n</script>\n\n<header>\n  <nav>{...}</nav>\n  <Search\n    {appId}\n    {searchKey}\n    indices={{ Pokedex: PokemonHit }}\n    placeholder=\"Search Pokedex\" />\n</header>\n```\n\nFor example, the `PokemonHit.svelte` component on the [demo site](https://svelte-algolia.netlify.app) looks like this:\n\n```svelte\n<script>\n  export let hit\n</script>\n\n<h2>{@html hit.name}</h2>\n\n<div>\n  <ul>\n    <li>Type: {@html hit.type.join(`, `)}</li>\n    <li>Height: {@html hit.height}</li>\n    <li>Weight: {@html hit.weight}</li>\n    <li>Weaknesses: {@html hit.weaknesses.join(`, `)}</li>\n  </ul>\n  <img src={hit.img} alt={hit.nameOrig} />\n</div>\n\n<style>\n  /* highlights text matching the search string */\n  :global(em) {\n    color: darkcyan;\n    line-height: 1.2em;\n    border-radius: 3pt;\n    font-style: normal;\n  }\n  div {\n    display: flex;\n    justify-content: space-between;\n  }\n</style>\n```\n\nSubstrings in attributes matching the current search string will be wrapped in `<em>` which need the `{@html ...}` tag to be rendered correctly but can then be styled to highlight why a particular hit matches the current search string. The original value (i.e. without `<em>` tags) of every highlighted attribute is available as `hit.[attr]Orig`. See `hit.nameOrig` above.\n\n### Props\n\nFull list of props/bindable variables for this component:\n\n1. ```ts\n   appId: string\n   ```\n\n   [Algolia app ID](https://algolia.com/doc/tools/crawler/apis/configuration/app-id)\n\n1. ```ts\n   ariaLabel: string = `Search`\n   ```\n\n   Tells assistive technology how to announce the input element to the user.\n\n1. ```ts\n   hasFocus: boolean = false\n   ```\n\n   Bindable boolean indicating whether the text input or results pane currently has focus.\n\n1. ```ts\n   indices: Record<string, typeof SvelteComponent> | [string, typeof SvelteComponent][]\n   ```\n\n   Object mapping the name of each index the `Search` component should tap into for finding Search results to the Svelte component that should render those hits.\n\n1. ```ts\n   input: HTMLInputElement | null = null\n   ```\n\n   Handle to the <input type=\"text\" /> DOM node.\n\n1. ```ts\n   loadingMsg: string = `Searching...`\n   ```\n\n   String to display in the results pane while Search results are being fetched.\n\n1. ```ts\n   noResultMsg = (query: string): string => `No results for '${query}'`\n   ```\n\n   Function that returns the string to display when search returned no results.\n\n1. ```ts\n   placeholder: string = `Search`\n   ```\n\n   Placeholder shown in the text input before user starts typing.\n\n1. ```ts\n   query: string = ``\n   ```\n\n   Current value of the <input type=\"text\" /> DOM node.\n\n1. ```ts\n   resultCounter = (hits: SearchHit[]): string =>\n     hits.length > 0 ? `<span>Results: ${hits.length}<span>` : ``\n   ```\n\n   Function that returns a string which will be displayed next to the name of each index to show how many results were found in that index. Return empty string to show nothing.\n\n1. ```ts\n   searchKey: string\n   ```\n\n   [Search-only API key](https://algolia.com/doc/guides/security/api-keys/#search-only-api-key)\n\n### Events\n\n`Search.svelte` listens for **`on:close`** events on every hit component it renders and will set `hasFocus` to `false` to close itself when received. You can use this e.g. to close the search interface when the user clicks on a link in one of the search results and navigates to a different page on your site:\n\n```svelte\n<script>\n  import { createEventDispatcher } from 'svelte'\n\n  export let hit\n\n  const dispatch = createEventDispatcher()\n</script>\n\n<h3>\n  <a href={hit.slug} on:click={() => dispatch(`close`)}>{@html hit.title}</a>\n</h3>\n<p>{@html hit.body}</p>\n```\n\nIt also emits a **`focus`** event every the user clicks the search icon and focus enters the text input.\n\n```svelte\n<Search on:focus={() => console.log(\"Let's search!\")} />\n```\n\n### Styling\n\n`Search.svelte` offers the following CSS variables listed here with their defaults (if any) that can be [passed in directly as props](https://github.com/sveltejs/rfcs/pull/13):\n\n- `button`\n  - `color: var(--search-icon-color)`\n- `h2`\n  - `color: var(--search-heading-color)`\n- `input`\n  - `background: var(--search-input-bg)`\n  - `color: var(--search-input-color)`\n  - `font-size: var(--search-input-font-size, 1em)`\n- `input::placeholder`\n  - `color: var(--search-input-color)`\n- `input.hasFocus + button`\n  - `color: var(--search-input-color)`\n- `div.results`\n  - `background-color: var(--search-hits-bg-color, white)`\n  - `box-shadow: var(--search-hits-shadow, 0 0 2pt black)`\n\nFor example:\n\n```svelte\n<Search\n  indices={{ Pages: SearchHit, Posts: SearchHit }}\n  {appId}\n  {searchKey}\n  --hitsBgColor=\"var(--search-body-bg)\"\n  --inputColor=\"var(--search-text-color)\"\n  --iconColor=\"var(--search-link-color)\"\n/>\n```\n\nThe top level element is an `aside` with class `svelte-algolia`. So you can also style the entire DOM tree below it by defining global styles like\n\n```css\n:global(aside.svelte-algolia input button svg) {\n  /* this would target the search icon */\n}\n:global(aside.svelte-algolia div.results section h2) {\n  /* this would target the heading shown above the list of results for each index */\n}\n```\n\n## Examples\n\nSome sites using `svelte-algolia` in production:\n\n- [`studenten-bilden-schueler.de`](https://studenten-bilden-schueler.de) [[code](https://github.com/sbsev/svelte-site)]\n- [`afara.foundation`](https://afara.foundation) [[code](https://github.com/janosh/afara)]\n- [`ocean-artup.eu`](https://ocean-artup.eu) [[code](https://github.com/janosh/ocean-artup)]\n\nUsing `svelte-algolia` yourself? [Submit a PR](https://github.com/janosh/svelte-algolia/pulls) to add your site here!\n\n## Want to contribute?\n\n[PRs](https://github.com/janosh/svelte-algolia/pulls) are welcome but best [open an issue](https://github.com/janosh/svelte-algolia/issues/new) first to discuss changes.\n\nThe app ID and search key `.env` were intentionally committed so you can clone this repo and work on it without having to create your own index first. To try out your changes in a dev server running locally, use\n\n```sh\ngit clone https://github.com/janosh/svelte-algolia\ncd svelte-algolia\nsed -i.bak 's/name: `Pokedex`/name: `Pokedex Clone`/' svelte.config.js\nnpm install\nnpm run dev\n```\n\nNote the `sed` command that changes the index name in `site/svelte.config.js` from `'Pokedex'` to `'Pokedex Clone'` so you don't accidentally mess up the search index for [this demo site](https://svelte-algolia.netlify.app) while developing.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 43],
		[3596, 66],
		[3603, 70],
		[3610, 63],
		[3617, 59],
		[3624, 72],
		[3631, 35],
		[3638, 62],
		[3645, 69],
		[3652, 27],
		[3659, 10],
		[3666, 71],
		[3673, 43],
		[3680, 75],
		[3687, 12],
		[3694, 17],
		[3701, 8],
		[3708, 1],
		[3715, 14],
		[3722, 8],
		[3729, 39],
		[3736, 3],
		[3743, 14],
		[3750, 23],
		[3757, 19],
		[3764, 34],
		[3771, 31],
		[3778, 7],
		[3785, 12],
		[3792, 11],
		[3799, 4],
		[3806, 6],
		[3813, 1],
		[3820, 4],
		[3827, 4],
		[3834, 26],
		[3841, 25],
		[3848, 4],
		[3855, 110],
		[3862, 3],
		[3869, 8],
		[3883, 3],
		[3890, 30],
		[3897, 53],
		[3904, 10],
		[3911, 25],
		[3918, 14],
		[3925, 2],
		[3932, 10],
		[3939, 7],
		[3946, 5],
		[3953, 4],
		[3960, 4],
		[3967, 28],
		[3974, 3],
		[3981, 5],
		[3988, 5],
		[3995, 7],
		[4002, 2],
		[4009, 9],
		[4016, 8],
		[4023, 18],
		[4030, 32],
		[4037, 25],
		[4044, 33],
		[4051, 10],
		[4058, 8],
		[4065, 10],
		[4072, 3],
		[4079, 11],
		[4086, 26],
		[4093, 2],
		[4100, 83],
		[4107, 34],
		[4114, 25],
		[4121, 39],
		[4128, 29]
	]
}
