{
	"name": "svelte-paperscript",
	"description": "Write PaperScript directly in Svelte components.",
	"repo_url": "https://github.com/apple-phi/svelte-paperscript",
	"authors": ["apple-phi"],
	"homepage": "https://github.com/apple-phi/svelte-paperscript#readme",
	"downloads": 6,
	"updated": "2024-06-25T15:32:58.706Z",
	"tags": ["tooling"],
	"github_stars": 1,
	"typescript": true,
	"version": "0.1.1",
	"svelte_range": "^4.2.18",
	"last_rune_check_version": "0.1.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-paperscript",
				"version": "0.1.1",
				"size": 21106
			},
			{
				"name": "magic-string",
				"version": "0.30.17",
				"size": 467464
			},
			{
				"name": "@jridgewell/sourcemap-codec",
				"version": "1.5.0",
				"size": 112815
			},
			{
				"name": "paper",
				"version": "0.12.18",
				"size": 12321041
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[0, 3]
		],
		"circular": []
	},
	"readme": "# svelte-paperscript\r\n\r\nWrite [PaperScript](https://paperjs.org) code directly in your Svelte components! This preprocessor compiles PaperScript code to JavaScript, allowing you to use operator overloading and the global Paper.js API namespace in your Svelte components.\r\n\r\n## Installation\r\n\r\n```sh\r\nnpm install --save-dev svelte-paperscript@latest\r\n```\r\n\r\nAdd the preprocessor to your Svelte configuration. For example, in a project built with Vite, like a SvelteKit project, use spread-syntax to add the preprocessor to the `preprocess` array in `svelte.config.js`:\r\n\r\n```js\r\n// svelte.config.js\r\nimport { vitePreprocess } from \"@sveltejs/vite-plugin-svelte\";\r\nimport { paperscriptPreprocess } from \"svelte-paperscript\";\r\n\r\nexport default {\r\n  // https://svelte.dev/docs#compile-time-svelte-preprocess\r\n  preprocess: [\r\n    ...paperscriptPreprocess({\r\n      sourceMap: false, // default: true\r\n    }),\r\n    vitePreprocess(),\r\n  ],\r\n};\r\n```\r\n\r\n## Usage\r\n\r\nTo make a PaperScript component, create a `.svelte` file containing a `<script>` tag with `lang=\"paperscript\"` and a `<canvas>` tag. You can then write your PaperScript code in the `<script>` tag.\r\n\r\n```svelte\r\n<script lang=\"paperscript\">\r\n  // PaperScript code goes here\r\n  var path = new Path.Circle({\r\n    center: [80, 50],\r\n    radius: 30,\r\n    fillColor: 'red'\r\n  });\r\n</script>\r\n\r\n<canvas class=\"my-canvas\" resize></canvas>\r\n\r\n<style>\r\n  .my-canvas {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n</style>\r\n```\r\n\r\nWhen Svelte compiles the component, the preprocessor will compile the PaperScript code to JavaScript and bind it to the `canvas` element.\r\n\r\n> Yes, your linter will complain about everything in the `<script>` tag, as well as the optional `resize` attribute on the `<canvas>` tag.\r\n\r\nYou may not have more than one `canvas` per PaperScript component. If you need multiple canvases, you can use multiple components.\r\n\r\n## Canvas configuration\r\n\r\nAll Paper.js canvas configuration options (e.g. `resize`) can be set on the `<canvas>` tag as attributes. See the [Paper.js documentation](http://paperjs.org/tutorials/getting-started/working-with-paper-js/#canvas-configuration) for a list of available options.",
	"legacy_svelte": false,
	"downloads_history": [
		[3827, 105],
		[3834, 9],
		[3841, 5],
		[3848, 6],
		[3855, 4],
		[3862, 6],
		[3869, 3],
		[3876, 2],
		[3883, 1],
		[3890, 3],
		[3897, 3],
		[3904, 2],
		[3911, 2],
		[3918, 3],
		[3925, 2],
		[3932, 1],
		[3939, 1],
		[3946, 1],
		[3953, 3],
		[3960, 1],
		[3967, 1],
		[3974, 10],
		[3981, 1],
		[3988, 1],
		[3995, 1],
		[4002, 2],
		[4009, 2],
		[4016, 2],
		[4023, 4],
		[4030, 4],
		[4037, 6],
		[4044, 7],
		[4051, 3],
		[4058, 1],
		[4065, 2],
		[4072, 7],
		[4079, 1],
		[4086, 1],
		[4093, 2],
		[4100, 3],
		[4107, 15],
		[4114, 6],
		[4121, 8],
		[4128, 4]
	]
}
