{
	"name": "@tal500/cypress-svelte-unit-test",
	"description": "Unit test Svelte components using Cypress.",
	"repo_url": "https://github.com/flakolefluk/cypress-svelte-unit-test",
	"authors": ["tal500"],
	"homepage": "https://github.com/bahmutov/cypress-svelte-unit-test#readme",
	"downloads": 5,
	"updated": "2022-07-17T13:02:55.964Z",
	"tags": ["testing"],
	"github_stars": 1,
	"typescript": true,
	"version": "3.3.2",
	"svelte_range": "3.29.4",
	"last_rune_check_version": "3.3.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@tal500/cypress-svelte-unit-test",
				"version": "3.3.2",
				"size": 23803
			},
			{
				"name": "@bahmutov/cy-rollup",
				"version": "2.0.0",
				"size": 3785
			},
			{
				"name": "debug",
				"version": "4.1.1",
				"size": 81476
			},
			{
				"name": "ms",
				"version": "2.1.3",
				"size": 6721
			},
			{
				"name": "unfetch",
				"version": "4.1.0",
				"size": 30813
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[0, 4]
		],
		"circular": []
	},
	"readme": "# cypress-svelte-unit-test [![CI][ci image]][ci url] [![circle image]][circle url]\r\n\r\n[![renovate-app badge][renovate-badge]][renovate-app] ![cypress version](https://img.shields.io/badge/cypress-6.9.1-brightgreen) ![@bahmutov/cy-rollup version](https://img.shields.io/badge/@bahmutov/cy--rollup-2.0.0-brightgreen)\r\n\r\n> Component testing for Svelte apps using the open source [Cypress.io](https://www.cypress.io/) E2E test runner **v4.5.0+**\r\n\r\n![Keypad pin spec](images/pin.gif)\r\n\r\n## Videos\r\n\r\nI have recorded a series of short (3-4 minutes) videos showing Cypress + `cypress-svelte-unit-test` in action. See the [playlist](https://www.youtube.com/playlist?list=PLP9o9QNnQuAa50lwW3cUql5sgdKIWkapp)\r\n\r\n- [Writing the first component test](https://youtu.be/f2y8DOAIVXY)\r\n- [Pass props to the component](https://youtu.be/9PGqSON9cv8)\r\n- [Testing message dispatch](https://youtu.be/bx9vJMO0tdQ)\r\n- [Style component during testing](https://youtu.be/dchx_4Klyok)\r\n- [Stubbing window.fetch](https://youtu.be/zuyIVHcd8pQ)\r\n- [Using experimental fetch polyfill](https://youtu.be/F7uJ_ZhmrbE)\r\n\r\n## Install\r\n\r\nRequires [Node](https://nodejs.org/en/) version 8 or above and Cypress v4.5.0+\r\n\r\n```sh\r\n# Install this plugin and test spec preprocessor\r\nnpm install --save-dev cypress-svelte-unit-test\r\n# if Cypress is not installed already\r\nnpx install --save-dev cypress\r\n```\r\n\r\n1. Tell Cypress to use your `rollup.config.js` to bundle specs using [cypress/plugins/index.js](cypress/plugins/index.js):\r\n\r\n```js\r\nmodule.exports = (on) => {\r\n  // @bahmutov/cy-rollup is already a dependency of cypress-svelte-unit-test\r\n  const filePreprocessor = require('@bahmutov/cy-rollup')\r\n  on('file:preprocessor', filePreprocessor())\r\n}\r\n```\r\n\r\n2. ⚠️ Turn the experimental component support on in your `cypress.json`. You can also specify where component spec files are located. For example, to have them located in `src` folder use:\r\n\r\n```json\r\n{\r\n  \"experimentalComponentTesting\": true,\r\n  \"componentFolder\": \"src\",\r\n  \"testFiles\": \"**/*spec.js\"\r\n}\r\n```\r\n\r\nSee [cypress.json](cypress.json) in this project.\r\n\r\n3. Write a test!\r\n\r\n```js\r\nimport HelloWorld from './HelloWorld.svelte'\r\nimport { mount } from 'cypress-svelte-unit-test'\r\nit('shows greeting', () => {\r\n  mount(HelloWorld, {\r\n    props: {\r\n      name: 'World',\r\n    },\r\n  })\r\n  cy.contains('h1', 'Hello World!')\r\n})\r\n```\r\n\r\nWatch [Writing the first component test](https://youtu.be/f2y8DOAIVXY)\r\n\r\n## Known issues\r\n\r\n- need to load images differently to transform relative paths\r\n\r\n## Code coverage\r\n\r\n### Instrument your code\r\n\r\nSee [rollup.config.js](rollup.config.js) how you can instrument source files. In short:\r\n\r\n```js\r\n// npm i -D rollup-plugin-istanbul\r\nimport istanbul from 'rollup-plugin-istanbul'\r\nplugins: [\r\n  istanbul({\r\n    include: ['cypress/components/**'],\r\n    exclude: ['**/*spec.js'],\r\n  }),\r\n]\r\n```\r\n\r\nIn Cypress iframe you should see the code coverage object under `window.__coverage__`.\r\n\r\n![Window coverage object](images/window-coverage.png)\r\n\r\n### Coverage report\r\n\r\nTo merge coverage and generate reports we need to use [@cypress/code-coverage](https://github.com/cypress-io/code-coverage) plugin.\r\n\r\n```shell\r\nnpm i -D @cypress/code-coverage\r\n```\r\n\r\nAdd it to your [cypress/support/index.js](cypress/support/index.js) file\r\n\r\n```js\r\nimport '@cypress/code-coverage/support'\r\n```\r\n\r\nAdd the plugin to your [cypress/plugins/index.js](cypress/plugins/index.js) file\r\n\r\n```js\r\nmodule.exports = (on, config) => {\r\n  const filePreprocessor = require('@bahmutov/cy-rollup')\r\n  on('file:preprocessor', filePreprocessor())\r\n\r\n  require('@cypress/code-coverage/task')(on, config)\r\n  // IMPORTANT to return the config object\r\n  // with the any changed environment variables\r\n  return config\r\n}\r\n```\r\n\r\nAfter the tests finish, you should see messages in the Command Log\r\n\r\n![Coverage messages](images/coverage-messages.png)\r\n\r\nAnd find generated reports in `coverage` folder. For example, to open the HTML report\r\n\r\n```shell\r\nopen coverage/lcov-report/index.html\r\n```\r\n\r\n![Coverage report](images/coverage-report.png)\r\n\r\n**Warning:** I am not sure the coverage numbers are making 100% sense for Svelte files.\r\n\r\n## Svelte v3\r\n\r\nThis component adaptor is meant for [Svelte v3](https://svelte.dev/blog/svelte-3-rethinking-reactivity). If you need Svelte v2 support, check out branch [svelte-v2](https://github.com/bahmutov/cypress-svelte-unit-test/tree/svelte-v2)\r\n\r\n## Use\r\n\r\nImport your Svelte component and mount using the provided function. Pass [component options](https://svelte.dev/docs#Creating_a_component) and global document options (like a global CSS)\r\n\r\n### Props\r\n\r\n```js\r\n/// <reference types=\"cypress\" />\r\nimport App from '../components/ChainedBalls.svelte'\r\nimport { mount } from 'cypress-svelte-unit-test'\r\n\r\ndescribe('SVG animation', () => {\r\n  it('shows chained balls', () => {\r\n    cy.viewport(960, 500)\r\n    const style = `\r\n      line {\r\n        stroke: gray;\r\n        stroke-width: 2px;\r\n      }\r\n    `\r\n    mount(\r\n      App,\r\n      {\r\n        props: {\r\n          width: 960,\r\n          height: 500,\r\n        },\r\n      },\r\n      { style },\r\n    )\r\n    cy.get('circle').should('have.length', 50)\r\n  })\r\n})\r\n```\r\n\r\nWatch [Pass props to the component](https://youtu.be/9PGqSON9cv8)\r\n\r\n### Styles\r\n\r\nYou can use local styles, local CSS file path (relative to the the Cypress project root) or external stylesheets. See [styles example](cypress/components/styles). You can surround the component with HTML and mount the component into the element with ID \"here\", see [cypress/components/mount-html](cypress/components/mount-html)\r\n\r\n```js\r\nconst props = {...}\r\nmount(HelloWorld, props, {\r\n  html: `\r\n    <div class=\"test-page\">\r\n      this is a test\r\n      <div id=\"here\"></div>\r\n      this is after component\r\n    </div>\r\n  `,\r\n  style: `\r\n    body {\r\n      background: pink\r\n    }\r\n    .test-page {\r\n      background: cyan\r\n    }\r\n    #here {\r\n      background: yellow\r\n    }\r\n  `,\r\n})\r\n```\r\n\r\n![Mount HTML example](images/mount-html.png)\r\n\r\nWatch [Style component during testing](https://youtu.be/dchx_4Klyok)\r\n\r\n### Callbacks\r\n\r\nYou can listen for messages from the component by supplying an object of callbacks.\r\n\r\n```js\r\nmount(TodoItem, {\r\n  props: {\r\n    id: 'todo-id',\r\n    text: 'write a test',\r\n    complete: false,\r\n  },\r\n  callbacks: {\r\n    remove: cy.stub().as('remove'),\r\n    toggle: cy.stub().as('toggle'),\r\n    'inner-message': cy.stub().as('inner-message'),\r\n  },\r\n})\r\n```\r\n\r\nSee [cypress/components/callbacks](cypress/components/callbacks).\r\n\r\nWatch [Testing message dispatch](https://youtu.be/bx9vJMO0tdQ)\r\n\r\n## Examples\r\n\r\n### Basic examples\r\n\r\nSvelte components copied from [https://svelte.dev/examples](https://svelte.dev/examples)\r\n\r\nAll components and tests are in [cypress/components](cypress/components) folder\r\n\r\n<!-- prettier-ignore-start -->\r\nTest | Description\r\n--- | ---\r\n[animation](cypress/components/animation) | Chained balls SVG animation\r\n[callbacks](cypress/components/callbacks) | Listen for messages dispatched from the component\r\n[global-handlers](cypress/components/global-handlers) | Attaches event listeners to `document` and `window`\r\n[hello](cypress/components/hello) | Hello, component testing!\r\n[image](cypress/components/image) | Loading Rick-Roll image\r\n[named-exports](cypress/components/named-exports) | Nice Audio player test\r\n[nested](cypress/components/nested) | Checking nested components and local styles\r\n[pin](cypress/components/pin) | Keypad pin test\r\n[reactive](cypress/components/reactive) | Svelte reactive props, declarations and statements\r\n[rx](cypress/components/rx) | Fetching GitHub users as a reactive stream\r\n[styles](cypress/components/styles) | Shows inline, CSS and external stylesheet styles in spec\r\n[tutorial](cypress/components/tutorial) | A few components and tests from Svelte tutorial\r\n[mocking-fetch](cypress/components/mocking-fetch) | Mocking `window.fetch` before mounting the component\r\n[mocking-network](cypress/components/mocking-network) | Polyfills `window.fetch` [automatically](https://www.cypress.io/blog/2020/06/29/experimental-fetch-polyfill/) and tests the component\r\n<!-- prettier-ignore-end -->\r\n\r\n### External examples\r\n\r\nYou can find larger Svelte example application with component tests under GitHub topic [cypress-svelte-unit-test-example](https://github.com/topics/cypress-svelte-unit-test-example)\r\n\r\n<!-- prettier-ignore-start -->\r\nName | Description\r\n--- | ---\r\n[svelte-ts-example](https://github.com/bahmutov/svelte-ts-example) | Writing Svelte components and tests using TypeScript\r\n<!-- prettier-ignore-end -->\r\n\r\n## Related tools\r\n\r\nSame feature for unit testing components from other framesworks using Cypress\r\n\r\n- [cypress-vue-unit-test](https://github.com/bahmutov/cypress-vue-unit-test)\r\n- [cypress-react-unit-test](https://github.com/bahmutov/cypress-react-unit-test)\r\n- [cypress-cycle-unit-test](https://github.com/bahmutov/cypress-cycle-unit-test)\r\n- [cypress-svelte-unit-test](https://github.com/bahmutov/cypress-svelte-unit-test)\r\n- [cypress-angular-unit-test](https://github.com/bahmutov/cypress-angular-unit-test)\r\n- [cypress-hyperapp-unit-test](https://github.com/bahmutov/cypress-hyperapp-unit-test)\r\n- [cypress-angularjs-unit-test](https://github.com/bahmutov/cypress-angularjs-unit-test)\r\n\r\n### Small print\r\n\r\nAuthor: Gleb Bahmutov &lt;gleb.bahmutov@gmail.com&gt; &copy; 2018\r\n\r\n- [@bahmutov](https://twitter.com/bahmutov)\r\n- [glebbahmutov.com](https://glebbahmutov.com)\r\n- [blog](https://glebbahmutov.com/blog)\r\n\r\nLicense: MIT - do anything with the code, but don't blame me if it does not work.\r\n\r\nSupport: if you find any problems with this module, email / tweet /\r\n[open issue](https://github.com/bahmutov/cypress-svelte-unit-test/issues) on Github\r\n\r\n## MIT License\r\n\r\nCopyright (c) 2018 Gleb Bahmutov &lt;gleb.bahmutov@gmail.com&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person\r\nobtaining a copy of this software and associated documentation\r\nfiles (the \"Software\"), to deal in the Software without\r\nrestriction, including without limitation the rights to use,\r\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the\r\nSoftware is furnished to do so, subject to the following\r\nconditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\r\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\nOTHER DEALINGS IN THE SOFTWARE.\r\n\r\n[circle image]: https://circleci.com/gh/bahmutov/cypress-svelte-unit-test/tree/master.svg?style=svg\r\n[circle url]: https://circleci.com/gh/bahmutov/cypress-svelte-unit-test/tree/master\r\n[ci image]: https://github.com/bahmutov/cypress-svelte-unit-test/workflows/ci/badge.svg?branch=master\r\n[ci url]: https://github.com/bahmutov/cypress-svelte-unit-test/actions\r\n[renovate-badge]: https://img.shields.io/badge/renovate-app-blue.svg\r\n[renovate-app]: https://renovateapp.com/\r\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 1],
		[3603, 1],
		[3610, 2],
		[3617, 2],
		[3645, 2],
		[3652, 1],
		[3659, 1],
		[3666, 2],
		[3694, 2],
		[3701, 1],
		[3715, 1],
		[3736, 2],
		[3743, 1],
		[3757, 1],
		[3764, 1],
		[3778, 1],
		[3792, 1],
		[3799, 2],
		[3806, 2],
		[3820, 1],
		[3834, 1],
		[3841, 6],
		[3848, 1],
		[3862, 1],
		[3869, 1],
		[3883, 2],
		[3890, 1],
		[3897, 1],
		[3918, 2],
		[3939, 2],
		[3953, 2],
		[3967, 1],
		[3995, 1],
		[4002, 1],
		[4016, 2],
		[4023, 1],
		[4030, 1],
		[4037, 2],
		[4044, 9],
		[4051, 1],
		[4058, 3],
		[4072, 1],
		[4093, 1],
		[4100, 3],
		[4107, 1],
		[4114, 5],
		[4121, 5],
		[4128, 1],
		[4135, 5]
	],
	"esm": false,
	"cjs": true
}
