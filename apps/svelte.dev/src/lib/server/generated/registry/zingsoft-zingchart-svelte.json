{
	"name": "@zingsoft/zingchart-svelte",
	"description": "Integrate ZingChart charts into Svelte applications.",
	"repo_url": "https://github.com/zingchart/zingchart-svelte",
	"authors": ["jphungzs", "pjmercurio", "mmiraglia-zingsoft", "zingsoft-admin"],
	"homepage": "https://github.com/zingchart/zingchart-svelte",
	"downloads": 5,
	"updated": "2021-12-21T19:16:11.562Z",
	"tags": ["ui"],
	"github_stars": 0,
	"typescript": false,
	"version": "1.0.0",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "1.0.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@zingsoft/zingchart-svelte",
				"version": "1.0.0",
				"size": 12936
			},
			{
				"name": "zingchart",
				"version": "2.9.16-1",
				"size": 65859260
			},
			{
				"name": "zingchart-constants",
				"version": "1.0.5"
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2]
		],
		"circular": []
	},
	"readme": "![](https://img.shields.io/npm/v/zingchart-svelte)\n![](https://github.com/zingchart/zingchart-svelte/workflows/Build/badge.svg?branch=master)\n![](https://github.com/zingchart/zingchart-svelte/workflows/Test/badge.svg?branch=master)\n![](https://img.shields.io/npm/dw/zingchart-svelte)\n\n[![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)\n\n[![](https://github.com/zingchart/zingchart-svelte/blob/main/zingchart-demo.gif?raw=true)](https://codesandbox.io/s/zingchart-svelte-wrapper-example-dxfc9)\n\n## Quickstart Guide\n\nQuickly add charts to your Svelte application with our ZingChart component\n\nThis guide assumes some basic working knowledge of Svelte.\n\n\n## 1. Install\n\nInstall the `zingchart-svelte` package as a dev dependency via `npm`:\n\n`npm install -D zingchart-svelte`\n\nor via `yarn`:\n\n`yarn add -D zingchart-svelte`\n\n## 2. Include the component in your project \n\nYou should include the `zingchart-svelte` component to your project via modules:\n\n```js\nimport ZingChart from 'zingchart-svelte';\n```\n\n### `zingchart` Global Object\n\nThe `zingchart` module is a direct dependency of `zingchart-svelte` so, normally,\nyou don't need to explicitly import it. If you do want to import it, import\nthe `ES6` version via:\n\n```js\nimport 'zingchart/es6';\n```\n\nThis will create the global `zingchart` object. Again, this is already handled \nby importing the `ZingChart` Svelte component, but you may want to access the\n`zingchart` global outside of a component in order to configure it, set the \nlicense, etc.:\n\n```js\n// zingchart object used to set performance flags\nzingchart.DEV.KEEPSOURCE = 0; // prevents lib from storing the original data package\nzingchart.DEV.COPYDATA = 0; // prevents lib from creating a copy of the data package \n\n// ZC object used to set license key\nzingchart.LICENSE = ['abcdefghijklmnopqrstuvwxy'];\n```\n### Optional Modules\n\nYou will need to import optional ZingChart modules if you intend to\nuse them. For example, if you want to draw a USA map, you would add the maps\nand USA maps modules via:\n\n```js\nimport \"zingchart/modules-es6/zingchart-maps.min.js\";\nimport \"zingchart/modules-es6/zingchart-maps-usa.min.js\";\n```\n\n## Usage\n\nHere's an example of using the `ZingChart` component in one of your Svelte components:\n\n```svelte\n<script>\n  import ZingChart from 'zingchart-svelte';\n\n  const config = {\n    type: 'bar',\n    series: [\n      { values: [4,5,3,4,5,3,5,4,11] }\n    ]\n  }\n<script>\n\n<ZingChart data={config} />\n```\n\n## Properties\n\nThe properties, or parameters, you can pass to the `<ZingChart>` component:\n\n### data [object]\n\n```js\n\nconst myData = {\n    type: 'line',\n    series: [\n      { values: [1,2,4,5,6] }\n    ]\n};\n\n<ZingChart data={myData} />\n```\n\n### `id` [string] (optional)\nThe id for the DOM element for ZingChart to attach to. If no id is specified, the id\n will be autogenerated in the form of `zingchart-svelte-#`.\n\n### `series` [array] (optional)\nAccepts an array of series objects, and overrides a series if it was supplied into the\nconfig object. Varies according to the chart type used, refer to the ZingChart documentation for more details.\n\n```js\nconst myData = {\n    type: 'line',\n};\n\nconst mySeries = [\n  { values: [1,2,4,5,6] }\n];\n\n<ZingChart data={myData} series={mySeries} />\n\n```\n\n### `width` [string or number] (optional)\n\nThe width of the chart. **Defaults to 100%**.\n\n### `height` [string or number] (optional)\n\nThe height of the chart. **Defaults to 480px**.\n\n### `theme` [object] (optional)\n\nThe theme or 'defaults' object defined by ZingChart. More information available here: https://www.zingchart.com/docs/api/themes\n\n### modules [string] (optional)\nThe modules object to load additional modules. More information available here: https://www.zingchart.com/docs/api/zingchart-modules#modules-list\n\n### `output` [string] (optional)\n\nThe render type of the chart. **The default is `svg`** but you can also pass the string `canvas` to render the charts in canvas. \n\nNote: All other properties that are added to your `ZingChart` component will be added \nto the `zingchart` render object. This allows for settings such as 'customprogresslogo',\nor any other setting listed in the ZingChart documentation,\nto be set. Any unrecognized properties will be ignored.\n\n## Events\nAll zingchart events are readily available on the component to listen to. For example, to listen for the 'complete' event when the chart is finished rendering:\n\n```svelte\n<script>\n  import ZingChart from 'zingchart-svelte';\n\n  const config = {\n    type: 'line',\n    series: [\n      { values: [4,5,3,4,5,3,5,4,11] }\n    ]\n  }\n\n  function chartDone(event) {\n    console.log('Event \"Complete\" - The chart is rendered\\n');\n  }\n</script>\n\n<ZingChart data={config} complete={chartDone} />\n```\n\nFor a list of all the events that you can listen to, refer to the complete \ndocumentation at https://www.zingchart.com/docs/api/events\n\n### Methods\n\nAll `zingchart` methods can be invoked on a `ZingChart` component via the `exec()` \nmethod. Just bind a Svelte reference to the component and use it to call `exec()`,\nusing the same method name and argument parameters as specified in the ZingChart\ndocumentation (the chart `id` will be inserted for you). For example, to add  \nnew plot data to an existing chart:\n\n```svelte\n<script>\n  import ZingChart from 'zingchart-svelte';\n\n  let chart     // chart reference\n\n  const config = {\n    type: 'bar',\n    series: [\n      { values: [4,5,3,4,5,3,5,4,11] }\n    ]\n  }\n\n  function addData() {\n    chart.exec('addplot', {\n      data: {\n        values: [5,3,3,5,6,4,3,4,6]\n      }\n    });\n  }\n<script>\n\n<div>\n  <button on:click={addData}>Add data</button>\n  <ZingChart bind:this={chart} data={config} />\n</div>\n```\n\nFor a list of all the methods that you can call and the parameters each method can take, \nrefer to the complete documentation at https://www.zingchart.com/docs/api/methods\n\n## Working Example\n\nSee https://github.com/zingchart-demos/zingchart-svelte-demo for a demo that shows this component in action.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 3],
		[3603, 1],
		[3610, 10],
		[3617, 2],
		[3624, 11],
		[3631, 1],
		[3638, 1],
		[3645, 10],
		[3652, 19],
		[3659, 15],
		[3666, 10],
		[3680, 3],
		[3687, 1],
		[3694, 2],
		[3701, 1],
		[3708, 4],
		[3715, 1],
		[3722, 1],
		[3729, 3],
		[3736, 1],
		[3743, 19],
		[3750, 12],
		[3757, 9],
		[3764, 5],
		[3771, 11],
		[3778, 8],
		[3785, 4],
		[3792, 12],
		[3799, 4],
		[3806, 9],
		[3813, 5],
		[3820, 16],
		[3827, 4],
		[3834, 5],
		[3841, 7],
		[3848, 9],
		[3855, 7],
		[3862, 4],
		[3869, 7],
		[3876, 19],
		[3883, 5],
		[3890, 9],
		[3897, 4],
		[3904, 3],
		[3911, 4],
		[3918, 45],
		[3925, 8],
		[3932, 11],
		[3939, 23],
		[3946, 10],
		[3953, 4],
		[3960, 9],
		[3967, 5],
		[3974, 4],
		[3981, 5],
		[3988, 3],
		[3995, 4],
		[4002, 26],
		[4009, 7],
		[4016, 4],
		[4023, 4],
		[4030, 7],
		[4037, 5],
		[4044, 10],
		[4051, 15],
		[4058, 9],
		[4065, 7],
		[4072, 7],
		[4079, 3],
		[4093, 10],
		[4100, 13],
		[4107, 6],
		[4114, 5],
		[4121, 12],
		[4128, 6],
		[4135, 10]
	],
	"esm": false,
	"cjs": true
}
