{
	"name": "svelte-currency",
	"description": "Format currency input fields in Svelte applications.",
	"repo_url": "https://github.com/captaincodeman/svelte-currency",
	"authors": ["captaincodeman"],
	"homepage": "https://captaincodeman.github.io/svelte-currency/",
	"downloads": 8,
	"updated": "2024-07-30T19:22:55.239Z",
	"tags": ["ui"],
	"typescript": true,
	"version": "0.0.8",
	"svelte_range": "^4.0.0 || ^5.0.0",
	"kit_range": "^2.0.0",
	"last_rune_check_version": "0.0.8",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-currency",
				"version": "0.0.8",
				"size": 10334
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-currency\n\nA svelte currency input action with optimized UX\n\nWhile looking for a currency input component I found a number of issues with existing solutions:\n\n- included the currency symbol inside the input\n- allowed addional inputs beyond the decimal digit limit (often corrupting the entered value)\n- outright handle inputs wrong (e.g. entering \"1.23\" results in \"13\")\n- inputs were left formatted, when numbers are typically right aligned\n- formatting wasn't applied until the input loses focus\n- cursor position jumped around especially when dealing with grouping\n- showed input spinners / wrong keyboard on mobile\n\nThis is my attempt to create the currency input I wanted. It has the following features:\n\n- ✅ Tiny 2kb size, as a Svelte `use:action` (also usable without Svelte!)\n- ✅ Automatically configures the input type and inputmode attributes for best experience\n- ✅ Pass the ISO currency code to use, support popular crypto-currencies such as BTC\n- ✅ Automatically set an appropriate placeholder based on the currencies decimal points\n- ✅ Handle locale formatting, specifically the opposite decimal point and grouping symbols in Europe\n- ✅ Works with TailwindCSS / TailwindUI currency input layout (see example)\n\n## Usage\n\nInstall using your package manager of choice, which should be `pnpm`:\n\n    pnpm i -D svelte-currency\n\nImport it into the component you want to use it:\n\n```html\n<script lang=\"ts\">\n\timport { currency } from 'svelte-currency'\n</script>\n```\n\nAdd it to an HTML input element with the `use:` syntax:\n\n```html\n<input id=\"price\" name=\"price\" use:currency={{ currency: 'USD' }} />\n```\n\nSet the currency to have the input formatted appropriately. By default it will use the browser locale but you can override that by passing it in, and also set the decimals to use if dealing with non-traditional currencies (e.g. bitcoin)\n\n```html\n<input id=\"price\" name=\"price\" use:currency={{ currency: 'BTC', locale: 'en', digits: 8 }} />\n```\n\n## Vanilla JS\n\nAs it's a Svelte Action, there aren't _really_ any dependencies on Svelte itself - you can apply it to any HTML Input manually:\n\n```ts\nconst input: HTMLInputElement = document.querySelector('input')!\nconst action = currency(input, { currency: 'USD' })\n\n// update the options:\naction.update({ currency: 'CAD' })\n\n// remove it:\naction.destroy()\n```\n\n## Output Value\n\nBecause the input value is the _formatted_ string, you may have issues if you try to convert it to a numeric value using `parseFloat` because that _doesn't_ handle group separators or decimal commas. Use the `.valueAsNumber` property of the input to access the numberic value as a number that has been pre-normalized / parsed for you.\n\n## Example\n\nAn empty input for USD with an English locale will show a placeholder of `0.00`, a European local would show `0,00`\n\nEntering digits will fill them _ahead_ of the decimal point, with the cursor positioned before it. The current cursor position is indicated with `|`:\n\n| Key Entry |            Value |         European |\n| --------- | ---------------: | ---------------: |\n| Enter `1` |         `1\\|.00` |         `1\\|,00` |\n| Enter `2` |        `12\\|.00` |        `12\\|,00` |\n| Enter `3` |       `123\\|.00` |       `123\\|,00` |\n| Enter `4` |     `1,234\\|.00` |     `1.234\\|,00` |\n| Enter `5` |    `12,345\\|.00` |    `12.345\\|,00` |\n| Enter `6` |   `123,456\\|.00` |   `123.456\\|,00` |\n| Enter `7` | `1,234,567\\|.00` | `1.234.567\\|,00` |\n| Enter `.` | `1,234,567.\\|00` | `1.234.567,\\|00` |\n| Enter `8` | `1,234,567.8\\|0` | `1.234.567,8\\|0` |\n| Enter `9` | `1,234,567.89\\|` | `1.234.567,89\\|` |\n\nThe decimal point can be entered _at any point_ to position the input cursor to _after_ it which feels natural.\n\nOnce the input is filled, no more key presses will be allowed - the decimals won't be rounded as a result and the cursor won't jump to the main unit input as happens on many other currency inputs.\n\nPressing `+` or `-` at any point will change the sign of the input (`-` if negative will toggle it)\n\n`Backspace` will remove _digits_ to the left of the cursor, moving the cursor if it's to the right of the decimal point and pulling the input right when to the left. The decimal point is jumped as are any group separators.\n\n| Key Entry   |            Value |         European |\n| ----------- | ---------------: | ---------------: |\n|             | `1,234,567.89\\|` | `1.234.567,89\\|` |\n| `Backspace` | `1,234,567.8\\|0` | `1.234.567,8\\|0` |\n| `Backspace` | `1,234,567.\\|00` | `1.234.567,\\|00` |\n| `Backspace` |   `123,456\\|.00` |   `123.456\\|,00` |\n| `Backspace` |    `12,345\\|.00` |    `12.345\\|,00` |\n| `Backspace` |     `1,234\\|.00` |     `1.234\\|,00` |\n| `Backspace` |       `123\\|.00` |       `123\\|,00` |\n| `Backspace` |        `12\\|.00` |        `12\\|,00` |\n| `Backspace` |         `1\\|.00` |         `1\\|,00` |\n| `Backspace` |         `0.00\\|` |         `0,00\\|` |\n\n`Delete` will delete the _digit_ to the _right_ of the cursor, jumping grouping symbols and moving to the right when past the decimal point.\n\nEntering grouping character will be ignored. `ArrowLeft` and `ArrowRight` change the cursor position.\n\nPasted values will be parsed and formatted and the cursor positioned at the end.\n\nSelecting text and entering any digit or pressing `Backspace` or `Delete` will replace or remove the selected characters, positioning the cursor to the right of the selection or the decimal point.\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3855, 320],
		[3862, 174],
		[3869, 46],
		[3876, 11],
		[3883, 3],
		[3890, 8],
		[3897, 9],
		[3904, 11],
		[3911, 10],
		[3918, 3],
		[3925, 2],
		[3932, 2],
		[3939, 4],
		[3946, 4],
		[3953, 2],
		[3960, 1],
		[3967, 2],
		[3974, 7],
		[3981, 8],
		[3988, 1],
		[3995, 1],
		[4002, 1],
		[4016, 18],
		[4023, 10],
		[4030, 4],
		[4037, 8],
		[4044, 10],
		[4051, 4],
		[4065, 1],
		[4100, 8],
		[4107, 21],
		[4114, 8],
		[4121, 14],
		[4128, 3]
	],
	"esm": true,
	"cjs": false
}
