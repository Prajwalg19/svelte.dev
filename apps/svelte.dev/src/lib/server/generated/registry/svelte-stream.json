{
	"name": "svelte-stream",
	"description": "Stream audio, video, other data from browser to server.",
	"repo_url": "https://github.com/JacobLinCool/svelte-stream",
	"authors": ["jacoblincool"],
	"homepage": "https://github.com/JacobLinCool/svelte-stream",
	"downloads": 6,
	"updated": "2024-10-01T16:38:10.072Z",
	"tags": ["server"],
	"github_stars": 2,
	"typescript": true,
	"version": "0.1.1",
	"svelte_range": "^4.0.0",
	"kit_range": "^2.6.1",
	"last_rune_check_version": "0.1.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-stream",
				"version": "0.1.1",
				"size": 23771
			},
			{
				"name": "debug",
				"version": "4.4.0",
				"size": 42798
			},
			{
				"name": "ms",
				"version": "2.1.3",
				"size": 6721
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2]
		],
		"circular": []
	},
	"readme": "# Svelte Stream\n\nStreaming audio, video, and other data from the browser to the server without WebSockets or WebRTC.\n\n## Features\n\n- Real-time streaming of data (audio, video, etc.) from browser to server\n- Support for chunked data transfer\n- Easy-to-use client-side API\n- Flexible server-side handling\n- Support HTTP/1, no WebSockets or WebRTC required\n\n## Installation\n\n```sh\nnpm install svelte-stream\n```\n\n## Usage\n\n### Client Side\n\n```html\n<script lang=\"ts\">\n  import { StreamingClient } from 'svelte-stream/client';\n  import { onMount } from 'svelte';\n\n  let client: StreamingClient;\n  let stream: MediaStream;\n  let mediaRecorder: MediaRecorder;\n  let isRecording = false;\n\n  onMount(async () => {\n    client = new StreamingClient('/api');\n    stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n    mediaRecorder = new MediaRecorder(stream);\n  });\n\n  async function toggleRecording() {\n    if (isRecording) {\n      stopRecording();\n    } else {\n      startRecording();\n    }\n  }\n\n  async function startRecording() {\n    const readable = new ReadableStream({\n      start(controller) {\n        mediaRecorder.ondataavailable = (event) => {\n          controller.enqueue(event.data);\n        };\n        mediaRecorder.onstop = () => {\n          controller.close();\n        };\n        mediaRecorder.start(1000);\n      }\n    });\n\n    const id = await client.getStarted();\n    const res = await client.send(id, readable, callback);\n    const final = await res.json();\n    console.log(final);\n  }\n\n  function stopRecording() {\n    isRecording = false;\n    mediaRecorder.stop();\n  }\n\n  async function callback(res: Response) {\n    const data = await res.json();\n    console.log(data);\n  }\n</script>\n```\n\n### Server Side\n\n```ts\nimport { StreamingHandler, StreamingHandleError, FinalizedStreamingData } from 'svelte-stream';\nimport { error, json, type RequestHandler } from '@sveltejs/kit';\n\nconst handler = new StreamingHandler();\n\nexport const GET: RequestHandler = async () => {\n  return handler.start();\n};\n\nexport const POST: RequestHandler = async (evt) => {\n  try {\n    const data = await handler.handle(evt.request);\n    if (data instanceof FinalizedStreamingData) {\n      console.log('final', data.id);\n      return json({ message: `final ${data.id} (${data.all.byteLength} bytes)` });\n    } else {\n      console.log('partial', data.id, data.segment);\n      return json({\n        message: `partial ${data.id} ${data.segment} (${data.partial.byteLength} bytes)`\n      });\n    }\n  } catch (e) {\n    if (e instanceof StreamingHandleError) {\n      return e.response();\n    } else {\n      error(500, 'unknown error');\n    }\n  }\n};\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3925, 192],
		[3932, 9],
		[3939, 10],
		[3946, 2],
		[3953, 6],
		[3967, 1],
		[3974, 1],
		[3981, 1],
		[3988, 3],
		[3995, 1],
		[4002, 1],
		[4009, 2],
		[4016, 1],
		[4023, 4],
		[4030, 4],
		[4037, 6],
		[4044, 8],
		[4051, 2],
		[4065, 2],
		[4100, 3],
		[4107, 6],
		[4114, 6],
		[4121, 6],
		[4128, 2],
		[4135, 8]
	],
	"esm": true,
	"cjs": false
}
