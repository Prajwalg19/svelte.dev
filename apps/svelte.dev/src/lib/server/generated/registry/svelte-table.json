{
	"name": "svelte-table",
	"description": "Create minimal table component with sorting and filtering.",
	"repo_url": "https://github.com/dasDaniel/svelte-table",
	"authors": ["danipo"],
	"homepage": "https://github.com/dasDaniel/svelte-table#readme",
	"downloads": 2136,
	"updated": "2025-03-26T15:47:00.290Z",
	"tags": ["ui"],
	"github_stars": 544,
	"typescript": true,
	"version": "0.6.4",
	"svelte_range": "3.57.0",
	"last_rune_check_version": "0.6.4",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-table",
				"version": "0.6.4",
				"size": 682985
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-table\n\nA _relatively_ minimal table component. Allows sorting and filtering based on column values, and row selection/expanding.\n\n## Example\n\n[github pages IIFE example](https://dasdaniel.github.io/svelte-table/)\n\n## Install\n\n```sh\nnpm install -save svelte-table\n```\n\n## Usage\n\nThe package includes exports for raw svelte, ES Module(.mjs) and CJS (.js) exports. Your bundler will likely know which one to pick by using `import SvelteTable from \"svelte-table\"`\n\n```html\n<script>\n  import SvelteTable from \"svelte-table\";\n  const rows = [\n    /** data (example below) */\n  ];\n  const columns = [\n    /** columns config (example below) */\n  ];\n</script>\n\n<SvelteTable columns=\"{columns}\" rows=\"{rows}\"></SvelteTable>\n```\n\nAn iife version is also available in the `/dist/iife` folder. This allows for easy run-time use, such as a direct uncompiled dependency for a use outside of a svelte project.\n\n```html\n<script src=\"iife/SvelteTable.js\"></script>\n<div id=\"my-table\"></div>\n<script>\n  var rows = [\n    /** data (example below) */\n  ];\n  var columns = [\n    /** columns config (example below) */\n  ];\n  new SvelteTable({\n    target: document.querySelector(\"#my-table\"),\n    props: { rows, columns },\n  });\n</script>\n```\n\n## Sample Data and config\n\n```js\n// define some sample data...\nconst rows = [\n  { id: 1, first_name: \"Marilyn\", last_name: \"Monroe\", pet: \"dog\" },\n  { id: 2, first_name: \"Abraham\", last_name: \"Lincoln\", pet: \"dog\" },\n  { id: 3, first_name: \"Mother\", last_name: \"Teresa\", pet: \"\" },\n  { id: 4, first_name: \"John F.\", last_name: \"Kennedy\", pet: \"dog\" },\n  { id: 5, first_name: \"Martin Luther\", last_name: \"King\", pet: \"dog\" },\n  { id: 6, first_name: \"Nelson\", last_name: \"Mandela\", pet: \"cat\" },\n  { id: 7, first_name: \"Winston\", last_name: \"Churchill\", pet: \"cat\" },\n  { id: 8, first_name: \"George\", last_name: \"Soros\", pet: \"bird\" },\n  { id: 9, first_name: \"Bill\", last_name: \"Gates\", pet: \"cat\" },\n  { id: 10, first_name: \"Muhammad\", last_name: \"Ali\", pet: \"dog\" },\n  { id: 11, first_name: \"Mahatma\", last_name: \"Gandhi\", pet: \"bird\" },\n  { id: 12, first_name: \"Margaret\", last_name: \"Thatcher\", pet: \"cat\" },\n  { id: 13, first_name: \"Christopher\", last_name: \"Columbus\", pet: \"dog\" },\n  { id: 14, first_name: \"Charles\", last_name: \"Darwin\", pet: \"dog\" },\n  { id: 15, first_name: \"Elvis\", last_name: \"Presley\", pet: \"dog\" },\n  { id: 16, first_name: \"Albert\", last_name: \"Einstein\", pet: \"dog\" },\n  { id: 17, first_name: \"Paul\", last_name: \"McCartney\", pet: \"cat\" },\n  { id: 18, first_name: \"Queen\", last_name: \"Victoria\", pet: \"dog\" },\n  { id: 19, first_name: \"Pope\", last_name: \"Francis\", pet: \"cat\" },\n  // etc...\n];\n\n// define column configs\nconst columns = [\n  {\n    key: \"id\",\n    title: \"ID\",\n    value: v => v.id,\n    sortable: true,\n    filterOptions: rows => {\n      // generate groupings of 0-10, 10-20 etc...\n      let nums = {};\n      rows.forEach(row => {\n        let num = Math.floor(row.id / 10);\n        if (nums[num] === undefined)\n          nums[num] = { name: `${num * 10} to ${(num + 1) * 10}`, value: num };\n      });\n      // fix order\n      nums = Object.entries(nums)\n        .sort()\n        .reduce((o, [k, v]) => ((o[k] = v), o), {});\n      return Object.values(nums);\n    },\n    filterValue: (r, f) => f === Math.floor(r.id / 10),\n    headerClass: \"text-left\",\n  },\n  {\n    key: \"first_name\",\n    title: \"FIRST_NAME\",\n    value: v => v.first_name,\n    sortable: true,\n    filterOptions: rows => {\n      // use first letter of first_name to generate filter\n      let letrs = {};\n      rows.forEach(row => {\n        let letr = row.first_name.charAt(0);\n        if (letrs[letr] === undefined)\n          letrs[letr] = {\n            name: `${letr.toUpperCase()}`,\n            value: letr.toLowerCase(),\n          };\n      });\n      // fix order\n      letrs = Object.entries(letrs)\n        .sort()\n        .reduce((o, [k, v]) => ((o[k] = v), o), {});\n      return Object.values(letrs);\n    },\n    filterValue: (r, f) => f === r.first_name.charAt(0).toLowerCase(),\n  },\n  {\n    key: \"last_name\",\n    title: \"LAST_NAME\",\n    value: v => v.last_name,\n    sortable: true,\n    filterOptions: rows => {\n      // use first letter of last_name to generate filter\n      let letrs = {};\n      rows.forEach(row => {\n        let letr = row.last_name.charAt(0);\n        if (letrs[letr] === undefined)\n          letrs[letr] = {\n            name: `${letr.toUpperCase()}`,\n            value: letr.toLowerCase(),\n          };\n      });\n      // fix order\n      letrs = Object.entries(letrs)\n        .sort()\n        .reduce((o, [k, v]) => ((o[k] = v), o), {});\n      return Object.values(letrs);\n    },\n    filterValue: (r, f) => f === r.last_name.charAt(0).toLowerCase(),\n  },\n  {\n    key: \"pet\",\n    title: \"Pet\",\n    value: v => v.pet,\n    renderValue: v => v.pet.charAt(0).toUpperCase() + v.pet.substring(1), // capitalize\n    sortable: true,\n    filterOptions: [\"bird\", \"cat\", \"dog\"], // provide array\n  },\n];\n```\n\n## Props\n\n| Option                     | Type            | Description                                                             |\n| -------------------------- | --------------- | ----------------------------------------------------------------------- |\n| `columns`                  | Object[]        | column config (details below)                                           |\n| `rows`                     | Object[]        | row (data) array                                                        |\n| `sortBy`                   | String          | ‡ Sorting key                                                           |\n| `sortOrder`                | Number          | ‡ `1` = Ascending, `-1` Descending, `0` no filtering                    |\n| `sortOrders`               | Number[]        | availability of order options                                           |\n| `iconAsc`                  | String          | (_html_) override ascending order indication                            |\n| `iconDesc`                 | String          | (_html_) override descending order indication                           |\n| `iconFilterable`           | String          | (_html_) override filterable column indication                          |\n| `iconExpand`               | String          | row collapsed indicator/button                                          |\n| `iconExpanded`             | String          | row expanded indicator/button                                           |\n| `iconSortable`             | String          | indicate column is sortable                                             |\n| `classNameTable`           | String/Array    | _optional_ class name(s) for table element                              |\n| `classNameThead`           | String/Array    | _optional_ class name(s) for thead element                              |\n| `classNameTbody`           | String/Array    | _optional_ class name(s) for tbody element                              |\n| `classNameSelect`          | String/Array    | _optional_ class name(s) for filter select elements                     |\n| `classNameInput`           | String/Array    | _optional_ class name(s) for search input elements                      |\n| `classNameRow`             | String/function | _optional_ class name(s) for row elements. Supports passing function    |\n| `classNameRowExpanded`     | String/Array    | _optional_ class name(s) for expanded row                               |\n| `classNameExpandedContent` | String/Array    | _optional_ class name(s) for expanded row content                       |\n| `classNameRowSelected`     | String/Array    | _optional_ class name(s) for selected row                               |\n| `classNameCell`            | String/Array    | _optional_ class name(s) for cell elements                              |\n| `classNameCellExpand`      | String/Array    | _optional_ class name(s) for cell with expand icon                      |\n| `expanded`                 | String[]        | ‡ _optional_ array of key values of expanded rows                       |\n| `expandRowKey`             | String          | _optional_ **deprecated** use `rowKey`                                  |\n| `rowKey`                   | String          | _optional_ key for expanded or selected row (use unique values like id) |\n| `expandSingle`             | Boolean         | _optional_ default: `false` allow only one row to be selected           |\n| `selected`                 | String[]        | ‡ _optional_ array of key values of selected rows                       |\n| `selectSingle`             | Boolean         | _optional_ default: `false` allow only one row to be selected           |\n| `selectOnClick`            | Boolean         | _optional_ default: `false` will clicking on row will update selection  |\n| `filterSelections`         | Object[]        | ‡ _optional_ search or filter selection                                 |\n| `showExpandIcon`           | Boolean         | should a expand column be visible                                       |\n\n_‡_ field allows 2-way binding\n\n### Events\n\nEvents pass a CustomEvent object with the following params in the `detail` object\n\n| event         | detail parameters     | Description     |\n| ------------- | --------------------- | --------------- |\n| `clickCol`    | `event`, `col`, `key` | click on column |\n| `clickRow`    | `event`, `row`        | click on a row  |\n| `clickCell`   | `event`, `row`, `key` | click on a cell |\n| `clickExpand` | `event`, `row`        | click expand    |\n\n### Expanding Rows\n\n- Row expanding is tracked using the `expanded` property. (supports 2-way binding)\n- The keys are defined using the `rowKey` property (previously `expandRowKey` which is getting deprecated). It is recommended to use a key that is unique to each row like a dedicated id or key field, to prevent conflict.\n- The content for the field is passed through the `expanded` slot.\n- The expanding can be managed manually or by using the built-in column using `showExpandIcon` property\n- Expand events can be listened to using `on:clickExpand` which will include the `row` object in the `event.detail` object.\n- `expandSingle` can be set to true to only allow a single column open at a time\n- `expandSingle` does not inforce single row expansion when multiple keys are is passed to `expanded`\n- Row expanded status is available through the `$expanded` property of the row, but is consdered an internal and may be removed\n\nExample:\n\n```html\n<div class=\"row\">\n  <SvelteTable\n    columns=\"{cols}\"\n    rows=\"{data}\"\n    showExpandIcon=\"{true}\"\n    expandSingle=\"{true}\"\n    rowKey=\"id\"\n  >\n    <svelte:fragment slot=\"expanded\" let:row>{row.detail}</svelte:fragment>\n  </SvelteTable>\n</div>\n```\n\n### Selecting Rows\n\n- By default, selection functionality is disabled, enable through `selectOnClick`\n- Row selection is tracked by `selection` property and supports 2-way binding\n- Selection happens when user clicks on row\n- Use `classNameRowSelected` to assign class to a selected row\n- Selection is tracked using the key defined by the `rowKey` property\n- The selection prop is an array because it supports both single and multiple selections\n- Multiple vs. single selection is handled through `selectSingle`\n- `selectSingle` does not enforce single row selection when multiple keys are is passed to `selection`\n- Row selection status is available through the `$selected` property of the row, but is considered an internal and may be removed\n\n### Filtering order\n\nProviding `sortOrders` specifies the column filtering orders. `sortOrders = [1, -1, 0]` indicates that the row will be sorted ascending (`1`), then descending (`-1`), then going back without any filter (`0`),\n\n### `filterSelections`\n\nAllows getting and setting the search or filter value. The `filterSelections` will update as the filter and search selection changes.\nInside the object keys (matching row keys) will be used to get/set the filter and search values. Setting key to `undefined` or deleting\nit will remove filter or search setting.\n\nexample: (will preset column with key `first_name` to `a`)\n\n```html\n<script>\n  const selection = { first_name: \"A\" };\n</script>\n<SvelteTable\n  columns=\"{columns}\"\n  rows=\"{data}\"\n  bind:filterSelections=\"{selection}\"\n/>\n```\n\n## Column array object values\n\n| Option                | Type           | Description                                                                                            |\n| --------------------- | -------------- | ------------------------------------------------------------------------------------------------------ |\n| `key`                 | String         | Unique key identifying the column                                                                      |\n| `title`               | String         | Title for header                                                                                       |\n| `value`               | Function       | table cell value. The function is passed row data                                                      |\n| `[class]`             | String         | _optional_ table cell class name                                                                       |\n| `[sortable]`          | Boolean        | _optional_ Whether the table can be sorted on column                                                   |\n| `[searchValue]`       | Function       | _optional_ search value function. function is passed row data and serach term                          |\n| `[filterOptions]`     | Array/Function | _optional_ array of objects with `name` and `value`. Function is passed an array of rows               |\n| `[filterValue]`       | Function       | _optional_ filter value function, 1 or 2 parameter function                                            |\n| `[filterPlaceholder]` | String         | _optional_ placeholder attribute for the filter input or select dropdown                               |\n| `[hideFilterHeader]`  | Boolean        | _optional_ will hide search or filter input in header                                                  |\n| `[headerClass]`       | String         | _optional_ class to assign to header element                                                           |\n| `[headerFilterClass]` | String         | _optional_ class to assign to search/filter header element                                             |\n| `[renderValue]`       | Function       | _optional_ render function for rendering html content                                                  |\n| `[renderComponent]`   | Component      | _optional_ pass a Svelte component, it will receive `row` and `col` variables (replaces `renderValue`) |\n| `[parseHTML]`         | Boolean        | _optional_ if true, it will render the cell value with `@html`                                         |\n\n### `searchValue`\n\n#### Option 1: `searchValue(row, searchTerm):boolean`\n\nDefine a function that accepts a row and the searchTerm, the comparison is defined within the function and the match is returned in the form of a boolean.\n\nThis is the recommended way of using the search (added in v0.5.3)\n\n#### Option 2: `searchValue(row):string`\n\nDefine a function that accepts a row and returns a string. SveltTable does the comparison internally, but only supports case-insensitive compare using `includes`\n\nThis behaviour is set for deprecation and should not be used.\n\nIf you want to migrate the existing behaviour you can use this example:\n\n```js\nsearchValue: (v, s) =>\n  v[\"some_key\"].toString().toLowerCase().includes(s.toLowerCase()),\n```\n\n### `filterValue`\n\n#### Option 1: `(row, filterSelection)=>boolean`\n\nBy passing a 2 parameter function, the function can be used to define filter functionality. This allows filtering using things like `includes` on an array.  \nInstead of defining a set of preset filter functionalities, this allows more control\n\n#### Option 2: `(row)=>string`\n\nThis feature is set for deprication in favor of Option #1.\n\nBy passing a 1 parameter function, the table will filter based on the returned string matching the filter selection.\n\nAlso note that the functionality matches the passed `value` function, which it defaults to when not defined. There is an option to define both in case the value and filter value needs to be different.\n\n### `renderComponent`\n\nDefining a component can be done directly by passing the component as a value\n\n```js\n[\n  {\n    key: \"myColumn\",\n    //...\n    renderComponent: myComponent,\n  },\n];\n```\n\nOr, if props need to be passed, an object with `component` and `props` can be passed.\n\n```js\n[\n  {\n    key: \"myColumn\",\n    //...\n    renderComponent: {\n      component: myComponent,\n      props: {\n        myProp: \"someValue\",\n      },\n    },\n  },\n];\n```\n\n## Slots\n\n| Option     | Description                                                                                    |\n| ---------- | ---------------------------------------------------------------------------------------------- |\n| `header`   | slot for rendering the `tr` and `th` content. This will replace `title` in the header          |\n| `row`      | slot for rendering the `tr` and `td` content. This will replace the rendering of `renderValue` |\n| `expanded` | slot for rendering the content of the expanded row                                             |\n\n---\n\n### Conditional row and cell class names\n\nBy passing a function to `classNameRow` the rows can have class assigned for the tr element based on the row value.\nThe function is provided two arguments, the row value, and the row index.\n\n```js\n// classNameRow function type definition\n(row: Row, rowIndex?: number) => string | null;\n```\n\nThis is an example of using the row index make a striped table, which may be needed when rows are expandable.\n\n```js\n(row, rowIndex) => (rowIndex % 2 == 0 ? null : \"row-odd\");\n```\n\nIndividual cells can also be formatted by passing a function to the `class` prop in the column object.\nThe class function is provided three parameters. In addition to the row and rowIndex, it also provides the column index\n\n```js\n// classs function type definition\n(row: Row, rowIndex?: number, colIndex?: number) => string | null;\n```\n\nexample for a checker-board pattern:\n\n```js\n(row, rowIndex, colIndex) =>\n  (rowIndex + colIndex) % 2 == 0 ? null : \"cell-odd\";\n```\n\nexample using a value from the row object:\n\n```js\nrow => row.count > 10 && \"cell-valid\";\n```\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 2842],
		[3603, 2107],
		[3610, 1705],
		[3617, 1895],
		[3624, 1672],
		[3631, 1725],
		[3638, 1537],
		[3645, 1267],
		[3652, 1562],
		[3659, 1749],
		[3666, 1855],
		[3673, 1814],
		[3680, 2263],
		[3687, 2285],
		[3694, 2171],
		[3701, 2074],
		[3708, 2275],
		[3715, 1855],
		[3722, 2180],
		[3729, 2554],
		[3736, 1823],
		[3743, 1899],
		[3750, 2154],
		[3757, 2075],
		[3764, 2146],
		[3771, 2339],
		[3778, 2261],
		[3785, 2393],
		[3792, 2027],
		[3799, 2197],
		[3806, 2477],
		[3813, 2087],
		[3820, 1969],
		[3827, 1626],
		[3834, 1550],
		[3841, 1948],
		[3848, 1738],
		[3855, 1942],
		[3862, 1722],
		[3869, 1713],
		[3876, 1894],
		[3883, 1794],
		[3890, 2152],
		[3897, 1694],
		[3904, 1675],
		[3911, 1689],
		[3918, 1786],
		[3925, 1881],
		[3932, 1921],
		[3939, 1569],
		[3946, 1528],
		[3953, 1733],
		[3960, 1680],
		[3967, 1655],
		[3974, 1751],
		[3981, 1374],
		[3988, 1540],
		[3995, 1714],
		[4002, 1613],
		[4009, 898],
		[4016, 1283],
		[4023, 2020],
		[4030, 2094],
		[4037, 2174],
		[4044, 1670],
		[4051, 2733],
		[4058, 3089],
		[4065, 2828],
		[4072, 3476],
		[4079, 3182],
		[4086, 2242],
		[4093, 2723],
		[4100, 2650],
		[4107, 2247],
		[4114, 2136],
		[4121, 1812],
		[4128, 1580],
		[4135, 1734]
	]
}
