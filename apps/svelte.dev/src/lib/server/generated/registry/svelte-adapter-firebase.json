{
	"name": "svelte-adapter-firebase",
	"description": "Integrate SvelteKit apps with Firebase Hosting and Cloud Functions.",
	"repo_url": "https://github.com/jthegedus/svelte-adapter-firebase",
	"authors": ["jthegedus"],
	"homepage": "https://github.com/jthegedus/svelte-adapter-firebase#readme",
	"downloads": 90,
	"updated": "2023-01-17T02:32:22.230Z",
	"tags": ["adapter"],
	"github_stars": 288,
	"typescript": true,
	"version": "0.15.0",
	"kit_range": "^1.0.0-next.587",
	"last_rune_check_version": "0.15.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-adapter-firebase",
				"version": "0.15.0",
				"size": 38304
			},
			{
				"name": "esbuild",
				"version": "0.17.19",
				"size": 130127
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "<div align=\"center\">\n\n<!-- TODO: on 1.0.0 release, delete this section -->\n\n| :warning: WARNING: this project is considered to be in BETA until SvelteKit is available for general use and the Adapter API is stable! |\n| --------------------------------------------------------------------------------------------------------------------------------------- |\n\n<!-- END -->\n\n![SvelteKit adapter Firebase social preview](assets/github-preview-svelte-adapter-firebase.png)\n\n# svelte-adapter-firebase\n\n[![GitHub Release](https://img.shields.io/github/release/jthegedus/svelte-adapter-firebase.svg?color=green)](https://github.com/jthegedus/svelte-adapter-firebase/releases)\n[![npm](https://img.shields.io/npm/v/svelte-adapter-firebase?color=green)](https://www.npmjs.com/package/svelte-adapter-firebase)\n[![Tests](https://github.com/jthegedus/svelte-adapter-firebase/actions/workflows/test.yaml/badge.svg)](https://github.com/jthegedus/svelte-adapter-firebase/actions/workflows/test.yaml)\n[![CodeQL](https://github.com/jthegedus/svelte-adapter-firebase/actions/workflows/codeql-analysis.yaml/badge.svg)](https://github.com/jthegedus/svelte-adapter-firebase/actions/workflows/codeql-analysis.yaml)\n\n[Firebase](https://firebase.google.com/) adapter for\n[SvelteKit](https://github.com/sveltejs/kit).\n\nUtilise the Firebase Hosting CDN with dynamic content served by SvelteKit on\nCloud Functions!\n\n:heavy_check_mark: SSR on\n[Cloud Functions](https://firebase.google.com/docs/hosting/functions)</br>\n:heavy_check_mark: Integrates with existing Cloud Functions!</br>\n:heavy_check_mark: Local production testing with\n[Firebase Emulator](https://firebase.google.com/docs/emulator-suite)</br>\n:heavy_check_mark: Mitigate cold-starts with\n[minInstances](https://firebase.google.com/docs/functions/manage-functions#min-max-instances)</br>\n:heavy_check_mark:\n[Multiple Hosting Sites](https://firebase.google.com/docs/hosting/multisites#add_additional_sites)</br>\n\n</div>\n\n## Contents\n\n- [Contents](#contents)\n- [Setup](#setup)\n  - [Beta Adapter Version Compatibility](#beta-adapter-version-compatibility)\n- [Configuration Overview](#configuration-overview)\n- [Details](#details)\n  - [`firebase.json` Configurations](#firebasejson-configurations)\n  - [Adapter Configurations](#adapter-configurations)\n- [How it works](#how-it-works)\n- [Firebase Emulator local Testing](#firebase-emulator-local-testing)\n- [Deployment](#deployment)\n- [Caveats](#caveats)\n- [Non-goals](#non-goals)\n- [FAQ](#faq)\n- [Contributing](#contributing)\n  - [external contributions](#external-contributions)\n\n## Setup\n\nThe adapter reads `firebase.json` to determine output dirs for Server scripts &\nStatic assets, without this file the adapter cannot know how your Firebase app\nis configured. Hosting & Cloud Functions are required.\n\nIn your standard SvelteKit project:\n\n- `npm install --save-dev svelte-adapter-firebase`\n- add adapter to `svelte.config.js`:\n\n```diff\n+import firebase from \"svelte-adapter-firebase\";\n\n/** @type {import('@sveltejs/kit').Config} */\nexport default {\n  kit: {\n+   adapter: firebase(),\n  },\n};\n```\n\n- Setup `firebase.json` with `firebase init`.\n- `npm run build`. **Read and repeat, the output is meant as a guide. IE: after\n  your first build, you need to manually add the produced Cloud Function in\n  `index.js`**\n\n<!-- TODO: on 1.0.0 release, delete this section -->\n\n### Beta Adapter Version Compatibility\n\nSvelteKit is still in Beta and the Adapter API is in flux, this can result in\nthe Adapter and SvelteKit becoming incompatible. Here is a compatibility table:\n\n| Adapter Version | SvelteKit Version    |\n| --------------- | -------------------- |\n| `0.14.5`        | `1.0.0-next.587`     |\n| `0.14.4`        | `1.0.0-next.443`     |\n| `0.14.3`        | `1.0.0-next.443`     |\n| `0.14.2`        | `1.0.0-next.405`     |\n| `0.14.0`        | `1.0.0-next.330`     |\n| `0.13.1`        | `1.0.0-next.180`     |\n| `0.13.0`        | `1.0.0-next.168`     |\n| `0.12.x`        | `1.0.0-next.165`     |\n| `0.11.x`        | `1.0.0-next.155`     |\n| `NA`            | `1.0.0-next.152-154` |\n| `0.10.x`        | `1.0.0-next.132`     |\n| `0.9.1`         | `1.0.0-next.122`     |\n| `0.9.0`         | `1.0.0-next.120`     |\n| `0.8.x`         | `1.0.0-next.111`     |\n| `NA`            | `1.0.0-next.109-110` |\n| `0.7.x`         | `1.0.0-next.107`     |\n| `0.6.x`         | `1.0.0-next.103`     |\n| `0.5.x`         | `1.0.0-next.54`      |\n| `0.4.x`         | `1.0.0-next.46`      |\n| `0.3.x`         | `1.0.0-next.27`      |\n\n**Note**: only the versions listed have been tested together, if others happen\nto work, it is just coincidence. This is beta software after all.\n\n<!-- END -->\n\n## Configuration Overview\n\nAdapter options:\n\n- `esbuildBuildOptions`\n  - function to return an `esbuild.BuildOptions` object\n  - default: see `defaultOptions` object in [`src/index.js`](./src/index.js)\n- `firebaseJsonPath`\n  - path to your `firebase.json` file, **relative** from where `svelte build` is\n    called\n  - default: `./firebase.json`\n- `target`\n  - required when `firebase.json:hosting` is an array (contains many site\n    configurations)\n  - default: `undefined`\n- `sourceRewriteMatch`\n  - used to lookup the rewrite config to determine whether to output SSR code\n    for Cloud Functions. See\n    [Firebase Rewrite configuration docs](https://firebase.google.com/docs/hosting/full-config#rewrite-functions).\n  - default: `**`\n\nAdapter output:\n\n- static assets (images, CSS, Client-side JavaScript) of your SvelteKit app\n  output to the directory defined by `firebase.json:hosting.public`\n- server assets (SSR JavaScript) output alongside your Cloud Functions defined\n  by `firebase.json:functions.source`\n\n## Details\n\n[Setup](#setup) outlines the steps most commonly used with a single SvelteKit\napp. Here we go into the details of each configuration and how it interacts with\nthe `firebase.json` config.\n\nThe 3 step process is:\n\n1. select Hosting config from `firebase.json`. If more than one site present in\n   config, match `svelte.config.js:target` field with either\n   `firebase.json:hosting[].site` or `.target` fields.\n2. output static assets to the directory in the `public` field\n3. identify the rewrite rule for SSR to determine Cloud Function output. The\n   rewrite rule is determined by a lookup of the `rewrites.source` against\n   `sourceRewriteMatch`\n\n### `firebase.json` Configurations\n\nDue to the relaxed rules of `firebase.json` we can have many valid configs. At a\nminimum, one or more Hosting sites is required with an associated Functions\nconfig if a Cloud Function rewrite is used. These are the combintations:\n\n<details>\n<summary>single Hosting site with Cloud Function rewrite</summary>\n\n```json\n{\n  \"hosting\": {\n    \"public\": \"<someDir>\",\n    \"rewrites\": [\n      {\n        \"source\": \"**\",\n        \"function\": \"<functionName>\"\n      }\n    ]\n  },\n  \"functions\": {\n    \"source\": \"<anotherDir>\"\n  }\n}\n```\n\n</details>\n\n<details>\n<summary>multiple Hosting site with Cloud Function rewrite</summary>\n\n```json\n{\n  \"hosting\": [\n    {\n      \"site\": \"blog\",\n      \"public\": \"<someDir>\",\n      \"rewrites\": [\n        {\n          \"source\": \"**\",\n          \"function\": \"<functionName>\"\n        }\n      ]\n    },\n    {\n      // another site config\n    }\n  ],\n  \"functions\": {\n    \"source\": \"<anotherDir>\"\n  }\n}\n```\n\nTo correctly lookup the `blog` site, `target` will need to be set in\n`svelte.config.js`:\n\n```js\nimport firebase from \"svelte-adapter-firebase\";\n\n/** @type {import('@sveltejs/kit').Config} */\nexport default {\n  kit: {\n    adapter: firebase({ target: \"blog\" }),\n  },\n};\n```\n\n</details>\n\n### Adapter Configurations\n\nDetailed examples of the adapter configuration options.\n\nAll options:\n\n```js\nimport firebase from \"svelte-adapter-firebase\";\n\n/** @type {import('@sveltejs/kit').Config} */\nexport default {\n  kit: {\n    adapter: firebase({\n      esbuildBuildOptions: (defaultOptions: BuildOptions) => Promise<BuildOptions> | BuildOptions,\n      firebaseJsonPath: \"\",\n      target: \"svelte-func-single-site\",\n      sourceRewriteMatch: \"\",\n    }),\n  },\n};\n```\n\n<details>\n<summary><code>esbuildBuildOptions</code></summary>\n\nAs an escape hatch, you may optionally specify a function which will receive the\nfinal esbuild options generated by this adapter and returns a modified esbuild\nconfiguration. The result of this function will be passed as-is to esbuild. The\nfunction can be async.\n\nFor example, you may wish to add `plugins`, or configure the\n[`format`](https://esbuild.github.io/api/#format) to bundle to ESM (defaults to\nCJS):\n\n```js\nimport firebase from \"svelte-adapter-firebase\";\n\n/** @type {import('@sveltejs/kit').Config} */\nexport default {\n  kit: {\n    adapter: firebase({\n      target: \"svelte-func-single-site\",\n      esbuildBuildOptions(defaultOptions) {\n        return {\n          ...defaultOptions,\n          target: \"esm\"\n          plugins: [],\n        };\n      },\n    })\n  },\n};\n```\n\nThe default options for this version are as follows:\n\n```js\n{\n\tentryPoints: ['.svelte-kit/firebase/handler.js'],\n\toutfile: `pathToOutputDir/index.js`,\n\tbundle: true,\n\tinject: ['pathTo/shims.js'],\n\tplatform: 'node',\n  target: `node${functionRuntimeVersion}`\n}\n```\n\nwhere esbuild `target` is computed from the Node.js runtime version defined for\nyour Cloud Functions.\n\n</details>\n\n<details>\n<summary><code>firebaseJsonPath</code></summary>\n\nIf the `firebase.json` file is not in the directory you run `svelte build`, then\nyou can set a relative path in `svelte.config.js`:\n\n```\n.gitignore\nfirebase.json\napp/                    <-- svelte build run in this dir\n\tpackage.json\n\tsvelte.config.js\n\tsrc/\nanotherApp/\n\tindex.html\n\tindex.css\nfunctions/\n\tpackage.json\n\tindex.js\n```\n\n```js\nimport firebase from \"svelte-adapter-firebase\";\n\n/** @type {import('@sveltejs/kit').Config} */\nexport default {\n  kit: {\n    adapter: firebase({\n      target: \"svelte-func-single-site\",\n      firebaseJsonPath: \"../firebase.json\",\n    }),\n  },\n};\n```\n\n</details>\n\n<details>\n<summary><code>target</code></summary>\n\nIf `firebase.json:hosting` is an array of sites, then each hosting config must\nlist a `site` or `target` field that matches the adatper's `target` option. For\nexample:\n\n```json\n// firebase.json\n{\n  \"hosting\": [\n    {\n      \"site\": \"blog\",\n      // or\n      // \"target\": \"blog\",\n      \"public\": \"<someDir>\",\n      \"rewrites\": [\n        {\n          \"source\": \"**\",\n          \"run\": {\n            \"serviceId\": \"<cloudRunServiceId>\"\n          }\n        }\n      ]\n    },\n    {\n      \"site\": \"adminPanel\",\n      // or\n      // \"target\": \"adminPanel\",\n      \"public\": \"<anotherDir>\"\n    }\n  ]\n}\n```\n\n```js\nimport firebase from \"svelte-adapter-firebase\";\n\n/** @type {import('@sveltejs/kit').Config} */\nexport default {\n  kit: {\n    adapter: firebase({ target: \"blog\" }),\n    target: \"#svelte\",\n  },\n};\n```\n\nThe Firebase config & adapter config match (`firebase.json:hosting[0].site` ===\nadapter `target`), so therefore we know which Firebase Hosting site you want to\nbuild the SvelteKit site for.\n\n</details>\n\n<details>\n<summary><code>sourceRewriteMatch</code></summary>\n\nIf the rewrite `source` pattern is not `**`, then `svelte.config.js`\n`sourceRewriteMatch` will need to be set to match your desired rewrite rule. For\nexample:\n\n```json\n// firebase.json\n{\n  \"hosting\": {\n    \"public\": \"<someDir>\",\n    \"rewrites\": [\n      {\n        \"source\": \"/blog/**\",\n        \"run\": {\n          \"serviceId\": \"<cloudRunServiceId>\"\n        }\n      }\n    ]\n  }\n}\n```\n\n```js\nimport firebase from \"svelte-adapter-firebase\";\n\n/** @type {import('@sveltejs/kit').Config} */\nexport default {\n  kit: {\n    adapter: firebase({ sourceRewriteMatch: \"/blog/**\" }),\n    target: \"#svelte\",\n  },\n};\n```\n\n</details>\n\n## How it works\n\nGiven\n\n- the following `firebase.json` configuration\n- a standard SvelteKit app structure\n- the default `svelte-adapter-firebase` config\n\n```json\n// firebase.json\n{\n  \"hosting\": {\n    \"public\": \"myApp\",\n    \"rewrites\": [\n      {\n        \"source\": \"**\",\n        \"function\": \"ssrServer\"\n      }\n    ],\n    \"predeploy\": [\"npm run build\"]\n  },\n  \"functions\": {\n    \"source\": \"functions\"\n  }\n}\n```\n\nthe following Server & Static assets dirs are created:\n\n```\nfirebase.json (\"public\": \"myApp\")\npackage.json\nsvelte.config.js\nsrc/\n\tapp.html\n\troutes/\n\t\tindex.svelte\nfunctions/\n\tpackage.json (\"main\": \"index.js\")\n\tindex.js\n\tsveltekit/\t\t<-- Server Assets dir (code to be imported to you Cloud Function)\nmyApp/\t\t\t\t<-- Static Assets to go to Firebase Hosting CDN\n```\n\n- `firebase.json:functions.source` dir is used to find `functions/package.json`\n  whose `main` field is used to find the Cloud Function build dir. This is used\n  as the server asset output dir.\n\n<details>\n  <summary>TypeScript Cloud Functions</summary>\n\nBecause we use the above method to determine the output dir, the server assets\nare output to the correct place when using TypeScript.\n\n```\nfirebase.json (\"public\": \"myApp\")\npackage.json\nsvelte.config.js\nsrc/\n  app.html\n  routes/\n    index.svelte\nfunctions/\n  package.json (\"main\": \"lib/index.js\")\n  index.ts\n  lib/\n    index.js\n    sveltekit/\t<-- Server assets output to functions/lib\nmyApp/\t\t\t\t<-- Static assets to go to Firebase Hosting CDN\n```\n\n</details>\n\n<details>\n<summary>Output with Multiple Sites</summary>\n\nIn a multi-site setup, the `site` or `target` field from hosting config in\n`firebase.json` is used as the server output dir:\n\n```\nfirebase.json (\"site\": \"myCoolSite\",\"public\": \"myApp\")\npackage.json\nsvelte.config.js\nsrc/\n\tapp.html\n\troutes/\n\t\tindex.svelte\nfunctions/\n\tpackage.json\n\tindex.js\n\tmyCoolSite/\t\t<-- Server assets\nmyApp/\t\t\t\t<-- Static assets to go to Firebase Hosting CDN\n```\n\n</details>\n\nThe final piece is to write the actual Cloud Function source code to reference\nthe output server assets. The code is printed during `svelte build` and should\nbe placed in your `index.js` or `index.ts` manually.\n\nThis is a flexible solution that allows integrating with other Cloud Functions\nin your project. You can edit the provided code as you see fit. The\nimport/require of the generated code will not change unless you change the\n`firebase.json:hosting.site` or `package.json:main` fields, so you shouldn't\nneed to update this code after adding it.\n\n## Firebase Emulator local Testing\n\nTest your production build locally before pushing to git or deploying!\n\n- build your app: `svelte-kit build`\n- install Function dependencies: `pnpm install --prefix functions`\n- start the emulator: `firebase emulators:start`\n\n## Deployment\n\n`firebase deploy` :tada:\n\n## Caveats\n\n- Using `firebase.json:hosting[].site` is preferred to\n  `firebase.json:hosting[].target` as\n  [Firebase Deploy Targets](https://firebase.google.com/docs/cli/targets) only\n  supports Hosting, Storage & Databases and not Functions. This means you can\n  use Deploy targets `target` field to identify your site for the adapter to\n  **build**, but you **CANNOT use Deploy Targes when deploying** as you need to\n  deploy the Hosting _& Functions_ at the same time for this solution to work as\n  expected.\n- [Firebase Hosting Preview Channels](https://firebase.google.com/docs/hosting/test-preview-deploy)\n  currently lacks first-party support for SSR applications. This adapter doesn't\n  attempt to remedy this issue and doesn't produce a different SSR Function for\n  preview channel deployments.\n- :warning: Cloud Function rewrites only support **us-central1**, other regions\n  will error. The official warning about this can be found in\n  [these docs](https://firebase.google.com/docs/hosting/functions).\n\n## Non-goals\n\n> Write Cloud Function code directly into `.js` file instead of printing in\n> console.\n\nFirebase Cloud Functions have a long history of people configuring their index\nfiles completely differently, some even generating them from directories.\nAccommodating these would be a headache. Instead, all we look for is a match\nagainst this string, `${name} =`, where `name` is your Cloud Functions name. We\nmay make this configurable to a specific file in future.\n\nAdditionally, this allows for users to customise their Firebase Cloud Function\nAPI like `runWith()` options for memory/CPU, min/max Instances and\nVPC/Ingress/Egress configuration settings, without complex support for options\nin the adapter. This keeps the Function config where it should, close to the\nuserland code.\n\n> Handle the deployment of the app to Firebase.\n\nFirebase apps consist of many different services with the CLI providing optional\ndeployments. We do not want to dictate full deployments with your frontend nor\nperform partial deployments if it does not fit your app. The only option then is\nto leave it to you :tada:\n\n## FAQ\n\n> Why is the Cloud Function code output to the terminal for me to add manually\n> instead of being written to `functions/index.js`?\n\nSee [non-goals](#non-goals) _Write Cloud Function code directly into `.js` file\ninstead of printing in console._\n\n> Firebase libs in SvelteKit\n\nAs recommended in the [SvelteKit FAQ](https://kit.svelte.dev/faq), please use\n[Firebase JS SDK v9](https://firebase.google.com/docs/web/learn-more#modular-version)\nas the older version of the SDK has issues and a larger bundle size.\n\n> Cold Starts\n\nSince the purpose of using this adapter is to leverage the Firebase Hosting CDN,\nyou should consider improving the user experience with targetted caching/TTLs.\n\nIf cold start are still an issue for your application, Cloud Functions has\nsupport for `minInstances` which will keep `X` number of instances warm. From\nthe docs:\n\n> A minimum number of instances kept running incur billing costs at idle rates.\n> Typically, to keep one idle function instance warm costs less than $6.00 a\n> month. The Firebase CLI provides a cost estimate at deployment time for\n> functions with reserved minimum instances. Refer to Cloud Functions Pricing to\n> calculate costs.\n>\n> -[Firebase docs](https://firebase.google.com/docs/functions/manage-functions#min-max-instances)\n\nTo implement this, configure your\n[`runWith`](https://github.com/firebase/firebase-functions/blob/d46ec6191e61f560f3f21f13333e0f3285d3de90/src/function-configuration.ts#L101)\noptions like so:\n\n```diff\nconst myRuntimeOptions = {\n\tmemory: \"1GB\",\n+\tminInstances: 1,\n}\nexports.myFunc = functions.runWith(myRuntimeOptions).https.onRequest(async (request, response) => {\n\t...\n});\n```\n\nNote: this is still single concurrency (if an instance does not exist to handle\na request when it hits the backend a new Function instance is created). Watch\nthis space!\n\n<!-- TODO: on 1.0.0 release, delete this section -->\n\n- `1.0.0` will not be published until the SvelteKit Adapter API is declared\n  stable and SvelteKit is released for general use.\n\n<!-- END -->\n\n## Contributing\n\n[Contributions of any kind welcome, just follow the\nguidelines](CONTRIBUTING.md)!\n\nShort version:\n\n```\ngit clone https://github.com/jthegedus/svelte-adapter-firebase.git\nasdf install\npnpm i\n```\n\nSee [asdf](https://asdf-vm.com) to install set it up.\n\n### external contributions\n\nWhile building this adapter some issues were found with upstream components,\nthese are captured here should someone wish to contribute them:\n\n- Cloud Function validation code linked in `utils.js` is from two different\n  sources which indicates that it is being validated by `firebase-tools` in two\n  separate places. PR a fix there.\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 228],
		[3596, 359],
		[3603, 251],
		[3610, 383],
		[3617, 303],
		[3624, 337],
		[3631, 263],
		[3638, 250],
		[3645, 215],
		[3652, 161],
		[3659, 258],
		[3666, 200],
		[3673, 222],
		[3680, 194],
		[3687, 136],
		[3694, 119],
		[3701, 118],
		[3708, 131],
		[3715, 158],
		[3722, 156],
		[3729, 184],
		[3736, 120],
		[3743, 180],
		[3750, 173],
		[3757, 239],
		[3764, 116],
		[3771, 181],
		[3778, 144],
		[3785, 205],
		[3792, 142],
		[3799, 131],
		[3806, 171],
		[3813, 199],
		[3820, 127],
		[3827, 110],
		[3834, 154],
		[3841, 140],
		[3848, 127],
		[3855, 421],
		[3862, 117],
		[3869, 177],
		[3876, 80],
		[3883, 66],
		[3890, 167],
		[3897, 69],
		[3904, 92],
		[3911, 70],
		[3918, 218],
		[3925, 128],
		[3932, 97],
		[3939, 67],
		[3946, 122],
		[3953, 79],
		[3960, 109],
		[3967, 35],
		[3974, 183],
		[3981, 76],
		[3988, 74],
		[3995, 102],
		[4002, 63],
		[4009, 43],
		[4016, 111],
		[4023, 49],
		[4030, 102],
		[4037, 152],
		[4044, 138],
		[4051, 131],
		[4058, 56],
		[4065, 111],
		[4072, 232],
		[4079, 67],
		[4086, 41],
		[4093, 21],
		[4100, 182],
		[4107, 43],
		[4114, 90],
		[4121, 109],
		[4128, 69]
	]
}
