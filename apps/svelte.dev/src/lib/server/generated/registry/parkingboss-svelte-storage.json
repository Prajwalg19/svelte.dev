{
	"name": "@parkingboss/svelte-storage",
	"description": "Provide cross-platform persistent storage for Svelte.",
	"repo_url": "https://github.com/parkingboss/svelte-storage",
	"authors": ["crisfole", "jpfohl", "nlemesurier"],
	"homepage": "https://github.com/parkingboss/svelte-storage#readme",
	"downloads": 11,
	"updated": "2020-04-17T14:28:49.691Z",
	"tags": ["miscellaneous"],
	"github_stars": 4,
	"typescript": false,
	"version": "1.0.5",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "1.0.5",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@parkingboss/svelte-storage",
				"version": "1.0.5",
				"size": 28338
			},
			{
				"name": "store",
				"version": "2.0.12"
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# Svelte Storage\n\nThis gives you a svelte store used exactly like\n`import { writable, readable } from 'svelte/store'` that is persisted longer\nthan your session by using store.js.\n\n## Usage\n\n 1. Install it: `npm i @parkingboss/svelte-storage`\n 2. Import it: `import { readable, writable } from '@parkingboss/svelte-storage'`.\n 3. Use them.\n\n## API\n\nThe api was designed to be as similar to `svelte/storage` as possible, but using\nstorage keys intead of functions to back the store.\n\n### readable\n\n`readable(initial: any, storageKey: string): Readable<any>;`\n\nThe signature of `readable` is almost the same as the signature of `readable`\nfrom Svelte. Unlike Svelte, however, this function just takes a string as its\nsecond parameter. It uses that key with store.js to fetch and set longer term\nstorage for your store.\n\n```\nexport const fromStorage = readable([], storageKey: 'app-readable');\n\nfromStorage.subscribe(newVal => {\n  console.log(newVal); // Logs `[]`\n});\n\nstore.set('app-readable', [ 1, 2 3 ]); // Logs `[ 1, 2, 3 ]`\nstore.remove('app-readable'); // Logs `null`\n```\n\n### writable\n\n`writable(initial: any, storageKey: string): Writable<any>`\n\nThe signature of `writable` is almost the same as the signature of `writable`\nfrom Svelte, except the second parameter is required, and must be a string.\nUnder the hood this uses `readable` to create the subscription function and adds\nhelpers for setting and updating (like Svelte does). This is more redundant than\nSvelte's `writable` because here you can just use `store.js` to update the value\nand `readable` will pick up the changes.\n\n```\nexport const fromStorage = writable([], storageKey: 'app-writable');\n\nfromStorage.subscribe(newVal => {\n  console.log(newVal); // Logs `[]`\n});\n\nfromStorage.update(x => x.concat([ 1, 2 3 ])); // Logs `[ 1, 2, 3 ]`\nfromStorage.set([]); // Logs `null`\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 3],
		[3596, 14],
		[3603, 5],
		[3610, 1],
		[3617, 11],
		[3624, 2],
		[3638, 1],
		[3645, 1],
		[3652, 6],
		[3659, 9],
		[3666, 7],
		[3673, 3],
		[3694, 7],
		[3701, 10],
		[3715, 3],
		[3729, 3],
		[3736, 1],
		[3743, 1],
		[3750, 3],
		[3757, 2],
		[3764, 8],
		[3771, 2],
		[3778, 1],
		[3792, 4],
		[3799, 1],
		[3806, 1],
		[3820, 1],
		[3834, 3],
		[3841, 1],
		[3848, 9],
		[3862, 37],
		[3869, 2],
		[3876, 1],
		[3883, 2],
		[3890, 2],
		[3897, 8],
		[3904, 6],
		[3911, 1],
		[3918, 2],
		[3925, 1],
		[3932, 3],
		[3939, 1],
		[3946, 1],
		[3960, 6],
		[3967, 1],
		[3988, 3],
		[3995, 2],
		[4016, 4],
		[4023, 23],
		[4030, 3],
		[4037, 8],
		[4044, 10],
		[4051, 2],
		[4058, 1],
		[4065, 1],
		[4072, 4],
		[4093, 40],
		[4100, 4],
		[4107, 2],
		[4114, 11],
		[4121, 15],
		[4128, 3]
	]
}
