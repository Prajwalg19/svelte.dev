{
	"name": "filedrop-svelte",
	"description": "Create drag-and-drop file upload zones in Svelte applications.",
	"repo_url": "https://github.com/chanced/filedrop-svelte",
	"authors": ["chance--"],
	"homepage": "https://github.com/chanced/filedrop-svelte#readme",
	"downloads": 718,
	"updated": "2022-05-09T16:14:11.728Z",
	"tags": ["miscellaneous"],
	"github_stars": 112,
	"typescript": true,
	"version": "0.1.2",
	"svelte_range": "^3.44.2",
	"kit_range": "next",
	"last_rune_check_version": "0.1.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "filedrop-svelte",
				"version": "0.1.2",
				"size": 46920
			},
			{
				"name": "file-selector",
				"version": "0.2.4",
				"size": 137610
			},
			{
				"name": "tslib",
				"version": "2.8.1",
				"size": 90359
			},
			{
				"name": "pretty-bytes",
				"version": "6.1.1",
				"size": 11276
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[0, 3]
		],
		"circular": []
	},
	"readme": "# FileDrop\n\nA file dropzone action & component for [Svelte](https://svelte.dev/).\n\n## Install\n\n```bash\nnpm i filedrop-svelte -D\n\n# yarn add filedrop-svelte -dev\n```\n\n## Usage\n\nfiledrop-svelte comes with both a component and an action. The component is basically a wrapper around the action with some some default styling.\n\n### Component\n\nSee [this REPL for minmimal usage](https://svelte.dev/repl/511ad04931514bcf98f7408edb08d075?version=3.41.0).\n\n```html\n<script>\n\timport FileDrop from \"filedrop-svelte\";\n\timport type { Files } from \"filedrop-svelte\";\n\timport fileSize from \"filesize\";\n\tlet files: Files;\n</script>\n\n<FileDrop on:filedrop={(e) => { files = e.detail.files }}>\n        Upload files\n</FileDrop>\n\n{#if files}\n\t<h3>Accepted files</h3>\n\t<ul>\n\t\t{#each files.accepted as file}\n\t\t\t<li>{file.name} - {fileSize(file.size)}</li>\n\t\t{/each}\n\t</ul>\n\t<h3>Rejected files</h3>\n\t<ul>\n\t\t{#each files.rejected as rejected}\n\t\t\t<li>{rejected.file.name} - {rejected.error.message}</li>\n\t\t{/each}\n\t</ul>\n{/if}\n```\n\n### Action\n\nSee this [REPL for minimal usage](https://svelte.dev/repl/645841f327b8484093f94b84de8a7e64?version=3.41.0).\n\n```html\n<script>\n\timport { filedrop } from \"filedrop-svelte\";\n\timport type { Files, FileDropOptions } from \"filedrop-svelte\";\n\tlet options: FileDropOptions = {};\n\tlet files: Files;\n</script>\n\n<div use:filedrop={options} on:filedrop={(e) => {files = e.detail.files}}>\n\t<!-- you can add your input[type=\"file\"] here if you want.\n\tor you can omit it and it'll be appended -->\n\tDrag &amp; drop files\n</div>\n```\n\n## Reference\n\n### Options\n\n| parameter       | purpose                                                                                                                                                                                                                                                   | type                | default     |\n| --------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------- | ----------- |\n| `accept`        | specify file types to accept. See [HTML attribute: accept on MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept) for more information.                                                                                     | `string` `string[]` | `undefined` |\n| `maxSize`       | the maximum size a file can be in bytes.                                                                                                                                                                                                                  | `number`            | `undefined` |\n| `minSize`       | the minimum size a file can be in bytes.                                                                                                                                                                                                                  | `number`            | `undefined` |\n| `fileLimit`     | total number of files allowed in a transaction. A value of 0 disables the action/component, 1 turns multiple off, and any other value enables multiple. Any attempt to upload more files than allowed will result in the files being placed in rejections | `numer`             | `undefined` |\n| `multiple`      | sets the file input to `multiple`. See [HTML attribute: multiple on MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/multiple) for more information.                                                                            | `boolean`           | `true`      |\n| `disabled`      | disables the action/component, removing all event listeners                                                                                                                                                                                               | `boolean`           | `false`     |\n| `windowDrop`    | determines whether or not files can be dropped anywhere in the window. A value of `false` would require that the files be droppped within the `<FileDrop>` component or the element with `use:filedrop`.                                                  | `boolean`           | `true`      |\n| `clickToUpload` | causes the containing element to be treated as the input. If hideInput is true or undefined, disabling this does not change the `tabindex` of the container or remove the `keydown` eventListener                                                         | `boolean`           | `true`      |\n| `tabIndex`      | tab index of the container. if `disabled` is `true` then this is set to `-1`. If `clickToUpload` is `true` or `undefined`, this defaults to 0.                                                                                                            | `number`            | `0`         |\n| `hideInput`     | if true or undefined, input[type='file'] will be set to display:none                                                                                                                                                                                      | `boolean`           | `true`      |\n| `input`         | allows you to explicitly pass a reference to the file `HTMLInputElement` as a parameter. If `undefined`, the action will search for `input[type=\"file\"]`. If one is not found, it will be appeneded to the element with `use:filedrop`                    | `HTMLInputElement`  | `undefined` |\n\n### Events\n\n| event                 | description                                                                                                              | `event.detail`        |\n| --------------------- | ------------------------------------------------------------------------------------------------------------------------ | --------------------- |\n| `filedrop`            | one or more files has been selected in the file dialog or drag-and-dropped                                               | `FileDropSelectEvent` |\n| `filedragenter`       | a dragenter event has occurred on the container element containnig one or more files                                     | `FileDropDragEvent`   |\n| `filedragleave`       | a dragleave event has occurred on the container element containing one or more files                                     | `FileDropDragEvent`   |\n| `filedragover`        | a dragover event has occurred on the container element containing one or more files                                      | `FileDropDragEvent`   |\n| `filedialogcancel`    | the file dialog has been canceled without selecting files                                                                | `FileDropEvent`       |\n| `filedialogclose`     | the file dialog has been closed with files selected                                                                      | `FileDropEvent`       |\n| `filedialogopen`      | the file dialog has been opened                                                                                          | `FileDropEvent`       |\n| `windowfiledragenter` | a dragenter event has occurred on the document (event is named windowfiledragenter so not to confuse document with file) | `FileDropDragEvent`   |\n| `windowfiledragleave` | a dragleave event has occurred on the document (event is named windowfiledragleave so not to confuse document with file) | `FileDropDragEvent`   |\n| `windowfiledragover`  | a dragover event has occurred on the document (event is named windowfiledragover so not to confuse document with file)   | `FileDropDragEvent`   |\n\n### Errors\n\n| class                          | reason                                                        | code                              |\n| ------------------------------ | ------------------------------------------------------------- | --------------------------------- |\n| `InvalidFileTypeError`         | file type does not satisfy `accept`                           | `InvalidFileType` (**0**)         |\n| `FileCountExceededError`       | total number of files selected or dropped exceeds `fileLimit` | `FileCountExceeded` (**1**)       |\n| `FileSizeMinimumNotMetError`   | file does not satisify `minSize`                              | `FileSizeMinimumNotMet` (**2**)   |\n| `FileSizeMaximumExceededError` | file does not satisify `maxSize`                              | `FileSizeMaximumExceeded` (**3**) |\n\n### Typescript\n\nIn order for typings to work properly, you'll need to add the following to\n`global.d.ts` [until this issue is\nresolved](https://github.com/sveltejs/language-tools/issues/431):\n\n```typescript\ndeclare type FileDropEvent = import(\"filedrop-svelte/lib/event\").FileDropEvent;\ndeclare type FileDropSelectEvent = import(\"filedrop-svelte/lib/event\").FileDropSelectEvent;\ndeclare type FileDropDragEvent = import(\"filedrop-svelte/lib/event\").FileDropDragEvent;\ndeclare namespace svelte.JSX {\n    interface HTMLAttributes<T> {\n        onfiledrop?: (event: CustomEvent<FileDropSelectEvent> & { target: EventTarget & T }) => void;\n        onfiledrop?: (event: CustomEvent<FileDropSelectEvent> & { target: EventTarget & T }) => void;\n        onfiledragenter?: (event: CustomEvent<FileDropDragEvent> & { target: EventTarget & T }) => void;\n        onfiledragleave?: (event: CustomEvent<FileDropDragEvent> & { target: EventTarget & T }) => void;\n        onfiledragover?: (event: CustomEvent<FileDropDragEvent> & { target: EventTarget & T }) => void;\n        onfiledialogcancel?: (event: CustomEvent<FileDropEvent> & { target: EventTarget & T }) => void;\n        onfiledialogclose?: (event: CustomEvent<FileDropEvent> & { target: EventTarget & T }) => void;\n        onfiledialogopen?: (event: CustomEvent<FileDropEvent> & { target: EventTarget & T }) => void;\n        onwindowfiledragenter?: (event: CustomEvent<FileDropDragEvent> & { target: EventTarget & T }) => void;\n        onwindowfiledragleave?: (event: CustomEvent<FileDropDragEvent> & { target: EventTarget & T }) => void;\n        onwindowfiledragover?: (event: CustomEvent<FileDropDragEvent> & { target: EventTarget & T }) => void;\n    }\n}\n```\n\nYou may need to edit `tsconfig.json` to include `global.d.ts` if it isn't already.\n\n### Alternatives\n\n-   [svelte-file-dropzone](https://github.com/thecodejack/svelte-file-dropzone)\n\n### Previous art\n\n-   [react-dropzone](https://github.com/react-dropzone/react-dropzone)\n-   [svelte-file-dropzone](https://github.com/thecodejack/svelte-file-dropzone)\n\n### Dependencies\n\n-   [file-selector](https://github.com/react-dropzone/file-selector)\n\n## Todo\n\n-   tests\n-   better documentation\n-   demo website\n\n## License\n\nMIT\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 697],
		[3596, 1198],
		[3603, 1236],
		[3610, 928],
		[3617, 775],
		[3624, 835],
		[3631, 953],
		[3638, 1002],
		[3645, 506],
		[3652, 757],
		[3659, 782],
		[3666, 831],
		[3673, 895],
		[3680, 1150],
		[3687, 820],
		[3694, 891],
		[3701, 936],
		[3708, 1064],
		[3715, 925],
		[3722, 866],
		[3729, 817],
		[3736, 613],
		[3743, 895],
		[3750, 708],
		[3757, 939],
		[3764, 657],
		[3771, 973],
		[3778, 1061],
		[3785, 1065],
		[3792, 892],
		[3799, 922],
		[3806, 711],
		[3813, 663],
		[3820, 884],
		[3827, 887],
		[3834, 777],
		[3841, 909],
		[3848, 907],
		[3855, 878],
		[3862, 1029],
		[3869, 955],
		[3876, 912],
		[3883, 733],
		[3890, 678],
		[3897, 653],
		[3904, 782],
		[3911, 820],
		[3918, 1111],
		[3925, 1089],
		[3932, 969],
		[3939, 1421],
		[3946, 1162],
		[3953, 942],
		[3960, 987],
		[3967, 973],
		[3974, 927],
		[3981, 1007],
		[3988, 956],
		[3995, 980],
		[4002, 891],
		[4009, 411],
		[4016, 410],
		[4023, 1372],
		[4030, 1335],
		[4037, 1085],
		[4044, 1514],
		[4051, 1396],
		[4058, 976],
		[4065, 843],
		[4072, 1113],
		[4079, 870],
		[4086, 963],
		[4093, 1180],
		[4100, 988],
		[4107, 879],
		[4114, 718],
		[4121, 996],
		[4128, 973]
	],
	"esm": true,
	"cjs": false
}
