{
	"name": "@techbiz/svelte-preprocess-cssmodules",
	"description": "Generate CSS Modules classnames on Svelte components.",
	"repo_url": "https://github.com/techbiz100/-techbiz-svelte-preprocess-cssmodules",
	"authors": ["techbiz"],
	"homepage": "https://github.com/techbiz100/-techbiz-svelte-preprocess-cssmodules",
	"downloads": 14,
	"updated": "2024-06-17T09:51:45.935Z",
	"tags": ["tooling"],
	"typescript": false,
	"version": "1.0.21",
	"svelte_range": "^3.20.0",
	"last_rune_check_version": "1.0.21",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@techbiz/svelte-preprocess-cssmodules",
				"version": "1.0.21",
				"size": 93921
			},
			{
				"name": "acorn",
				"version": "8.14.1",
				"size": 547473
			},
			{
				"name": "big.js",
				"version": "6.2.2",
				"size": 58665
			},
			{
				"name": "magic-string",
				"version": "0.25.9",
				"size": 373056
			},
			{
				"name": "sourcemap-codec",
				"version": "1.4.8",
				"size": 31802
			},
			{
				"name": "@types/node",
				"version": "20.17.32",
				"size": 2231317
			},
			{
				"name": "undici-types",
				"version": "6.19.8",
				"size": 84225
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2],
			[0, 3],
			[3, 4],
			[0, 5],
			[5, 6]
		],
		"circular": []
	},
	"readme": "# Svelte preprocess CSS Modules\n\nGenerate CSS Modules classnames on Svelte components\n\n```bash\nnpm install --save-dev svelte-preprocess-cssmodules\n```\n\n## Table of Content\n\n- [Usage](#usage)\n  - [Approach](#approach)\n  - [Class directive](#class-directive)\n  - [Local selector](#local-selector)\n  - [CSS binding](#css-binding)\n  - [Scoped class on child components](#scoped-class-on-child-components)\n- [Import styles from an external stylesheet](#import-styles-from-an-external-stylesheet)\n  - [Destructuring import](#destructuring-import)\n  - [kebab-case situation](#kebab-case-situation)\n  - [Unnamed import](#unnamed-import)\n  - [Directive and dynamic class](#directive-and-dynamic-class)\n- [Preprocessor Modes](#preprocessor-modes)\n  - [Native](#native)\n  - [Mixed](#mixed)\n  - [Scoped](#scoped)\n  - [Comparative](#comparative)\n- [Why CSS Modules over Svelte scoping?](#why-css-modules-over-svelte-scoping)\n- [Configuration](#configuration)\n  - [Rollup](#rollup)\n  - [Webpack](#webpack)\n  - [SvelteKit](#sveltekit)\n  - [Svelte Preprocess](#svelte-preprocess)\n  - [Options](#options)\n- [Migrating from v1](#migrating-from-v1)\n- [Code example](#code-example)\n\n## Usage\n\nAdd the `module` attribute to `<style>`\n\n```html\n<style module>\n  .red { color: red; }\n</style>\n\n<p class=\"red\">My red text</p>\n```\n\nThe component will be compiled to\n\n```html\n<style>\n  .red-30_1IC { color: red; }\n</style>\n\n<p class=\"red-30_1IC\">My red text</p>\n```\n\n### Approach\n\nThe default svelte scoping appends every css selectors with a unique class to only affect the elements of the component.\n\n[CSS Modules](https://github.com/css-modules/css-modules) **scopes each class name** with a unique id/name in order to affect the elements of the component. As the other selectors are not scoped, it is recommended to write each selector with a class.\n\n```html\n<!-- Component A -->\n<p>lorem ipsum tut moue</p>\n<p class=\"red\">lorem ipsum tut moue</p>\n\n<style module>\n  p { font-size: 14px; }\n  .red { color: red; }\n</style>\n```\n```html\n<!-- Component B -->\n<p class=\"text\">lorem ipsum tut moue</p>\n<p class=\"text red\">lorem ipsum tut moue</p>\n\n<style module>\n  .text { font-size: 14px; }\n  .red { color: red; }\n</style>\n```\n\n_transformed to_\n\n```html\n<!-- Component A -->\n<p>lorem ipsum tut moue</p>\n<p class=\"red-123qwe\">lorem ipsum tut moue</p>\n\n<style module>\n  p { font-size: 14px; } /* global rule */\n  .red-123qwe { color: red; }\n</style>\n```\n\n```html\n<!-- Component B -->\n<p class=\"text-456rty\">lorem ipsum tut moue</p>\n<p class=\"text-456rty red-123qwe\">lorem ipsum tut moue</p>\n\n<style> /* all scoped to component */\n  .text-456rty { font-size: 14px; }\n  .red-123qwe { color: red; }\n</style>\n```\n\n### Class directive\n\nToggle a class on an element.\n\n```html\n<script>\n  let route = 'home';\n  $: isActive = route === 'home';\n</script>\n\n<style module>\n  .active { font-weight: bold; }\n</style>\n\n<a class:active={isActive} href=\"/\">Home</a>\n<!-- or -->\n<a class=\"{isActive ? 'active' : ''}\" href=\"/\">Home</a>\n```\n\n_generating_\n\n```html\n<style>\n  .active-2jIMhI { font-weight: bold; }\n</style>\n\n<a class=\"active-2jIMhI\" href=\"/\">Home</a>\n```\n\n#### Use of shorthand\n\n```html\n<script>\n  let route = 'home';\n  $: active = route === 'home';\n</script>\n\n<style module>\n  .active { font-weight: bold; }\n</style>\n\n<a class:active href=\"/\">Home</a>\n```\n\n_generating_\n\n```html\n<style>\n  .active-2jIMhI { font-weight: bold; }\n</style>\n\n<a class=\"active-2jIMhI\" href=\"/\">Home</a>\n```\n\n### Local selector\n\nForce a selector to be scoped within its component to prevent style inheritance on child components.\n\n`:local()` is doing the opposite of `:global()` and can only be used with the `native` and `mixed` modes ([see preprocessor modes](#preprocessor-modes)). The svelte scoping is applied to the selector inside `:local()`.\n\n```html\n<!-- Parent Component -->\n\n<style module>\n  .main em { color: grey; }\n  .main :local(strong) { font-weight: 900; }\n</style>\n\n<div class=\"main\">\n  <p>My <em>main</em> lorem <strong>ipsum tuye</strong></p>\n  <ChildComponent />\n</div>\n```\n```html\n<!-- Child Component-->\n\n<style module>\n  /** Rule to override parent style **/\n  .child em { color: black; }\n\n  /** \n   * Unnecessary rule because of the use of :local()\n   .child strong { font-weight: 700 }\n   */\n</style>\n\n<p class=\"child\">My <em>secondary</em> lorem <strong>ipsum tuye</strong></p>\n```\n\n*generating*\n\n```html\n<!-- Parent Component-->\n\n<style>\n  .main-Yu78Wr em { color: grey; }\n  .main-Yu78Wr strong.svelte-ery8ts { font-weight: 900; }\n</style>\n\n<div class=\"main-Yu78Wr\">\n  <p>My <em>main</em> lorem <strong class=\"svelte-ery8ts\">ipsum tuye</strong></p>\n  <ChildComponent />\n</div>\n```\n```html\n<!-- Child Component-->\n\n<style>\n  .child-uhRt2j em { color: black; }\n</style>\n\n<p class=\"child-uhRt2j\">My <em>secondary</em> lorem <strong>ipsum tuye</strong></p>\n```\n\nWhen used with a class, `:local()` cssModules is replaced by the svelte scoping system. This could be useful when targetting global classnames.\n\n```html\n<style module>\n  .actions {\n    padding: 10px;\n  }\n  /* target a css framework classname without replacing it*/\n  :local(.btn-primary) {\n    margin-right: 10px;\n  }\n</style>\n\n<div class=\"actions\">\n  <button class=\"btn btn-primary\">Ok</button>\n  <button class=\"btn btn-default\">Cancel</button>\n</div>\n```\n\n*generating*\n\n```html\n<style>\n  .actions-7Fhti9 {\n    padding: 10px;\n  }\n  .btn-primary.svelte-saq8ts {\n    margin-right: 10px;\n  }\n</style>\n\n<div class=\"actions-7Fhti9\">\n  <button class=\"btn btn-primary svelte-saq8ts\">Ok</button>\n  <button class=\"btn btn-default\">Cancel</button>\n</div>\n```\n\n### CSS binding\n\nLink the value of a CSS property to a dynamic variable by using `bind()`.\n\n```html\n<script>\n  let color = 'red';\n</script>\n\n<p class=\"text\">My lorem ipsum text</p>\n\n<style module>\n  .text {\n    font-size: 18px;\n    font-weight: bold;\n    color: bind(color);\n  }\n</style>\n```\n\nA scoped css variable, binding the declared statement, will be created on the component **root** elements which the css property will inherit from.\n\n```html\n<script>\n  let color = 'red';\n</script>\n\n<p class=\"text-t56rwy\" style=\"--color-eh7sp:{color}\">\n  My lorem ipsum text\n</p>\n\n<style>\n  .text-t56rwy {\n    font-size: 18px;\n    font-weight: bold;\n    color: var(--color-eh7sp);\n  }\n</style>\n```\n\nAn object property can also be targetted and must be wrapped with quotes.\n\n```html\n<script>\n  const style = {\n    opacity: 0;\n  };\n</script>\n\n<div class=\"content\">\n  <h1>Heading</h1>\n  <p class=\"text\">My lorem ipsum text</p>\n</div>\n\n<style module>\n  .content {\n    padding: 10px 20px;\n    background-color: #fff;\n  }\n  .text {\n    opacity: bind('style.opacity');\n  }\n</style>\n```\n\n_generating_\n\n```html\n<script>\n  const style = {\n    opacity: 0;\n  };\n</script>\n\n<div class=\"content-dhye8T\" style=\"--opacity-r1gf51:{style.opacity}\">\n  <h1>Heading</h1>\n  <p class=\"text-iTsx5A\">My lorem ipsum text</p>\n</div>\n\n<style>\n  .content-dhye8T {\n    padding: 10px 20px;\n    background-color: #fff;\n  }\n  .text-iTsx5A {\n    opacity: var(--opacity-r1gf51);\n  }\n</style>\n```\n\n### Scoped class on child components\n\nCSS Modules allows you to pass a scoped classname to a child component giving the possibility to style it from its parent. (Only with the `native` and `mixed` modes â€“ [See preprocessor modes](#preprocessor-modes)).\n\n```html\n<!-- Child Component Button.svelte -->\n<script>\n  let className;\n  export { className as class };\n</script>\n\n<button class=\"btn {className}\">\n  <slot />\n</button>\n\n<style module>\n  .btn {\n    background: red;\n    color: white;\n  }\n</style>\n```\n\n```html\n<!-- Parent Component -->\n\n<script>\n  import Button from './Button.svelte';\n</script>\n\n<div class=\"wrapper\">\n  <h1>Welcome</h1>\n  <p>Lorem ipsum tut ewou tu po</p>\n  <Button class=\"btn\">Start</Button>\n</div>\n\n<style module>\n  .wrapper {\n    margin: 0 auto;\n    padding: 16px;\n    max-width: 400px;\n  }\n  .btn {\n    margin-top: 30px;\n  }\n</style>\n```\n\n_generating_\n\n```html\n<div class=\"wrapper-tyaW3\">\n  <h1>Welcome</h1>\n  <p>Lorem ipsum tut ewou tu po</p>\n  <button class=\"btn-dtg87W btn-rtY6ad\">Start</button>\n</div>\n\n<style>\n  .wrapper-tyaW3 {\n    margin: 0 auto;\n    padding: 16px;\n    max-width: 400px;\n  }\n  .btn-dtg87W {\n    margin-top: 30px;\n  }\n  .btn-rtY6ad {\n    background: red;\n    color: white;\n  }\n</style>\n```\n\n\n## Import styles from an external stylesheet\n\nAlternatively, styles can be created into an external file and imported onto a svelte component. The name referring to the import can then be used on the markup to target any existing classname of the stylesheet.\n\n- The option `parseExternalStylesheet` need to be enabled.\n- The css file must follow the convention `[FILENAME].module.css` in order to be processed.\n\n**Note:** *That import is only meant for stylesheets relative to the component. You will have to set your own bundler in order to import *node_modules* css files.*\n\n```css\n/** style.module.css **/\n.red { color: red; }\n.blue { color: blue; }\n```\n```html\n<!-- Svelte component -->\n<script>\n  import style from './style.module.css';\n</script>\n\n<p class={style.red}>My red text</p>\n<p class={style.blue}>My blue text</p>\n```\n\n*generating*\n\n```html\n<style>\n  .red-en-6pb { color: red; }\n  .blue-oVk-n1 { color: blue; }\n</style>\n\n<p class=\"red-en-6pb\">My red text</p>\n<p class=\"blue-oVk-n1\">My blue text</p>\n```\n\n### Destructuring import\n\n```css\n/** style.module.css **/\nsection { padding: 10px; }\n.red { color: red; }\n.blue { color: blue; }\n.bold { font-weight: bold; }\n```\n```html\n<!-- Svelte component -->\n<script>\n  import { red, blue } from './style.module.css';\n</script>\n\n<section>\n  <p class={red}>My <span class=\"bold\">red</span> text</p>\n  <p class=\"{blue} bold\">My blue text</p>\n</section>\n```\n\n*generating*\n\n```html\n<style>\n  section { padding: 10px; }\n  .red-1sPexk { color: red; }\n  .blue-oVkn13 { color: blue; }\n  .bold-18te3n { font-weight: bold; }\n</style>\n\n<section>\n  <p class=\"red-1sPexk\">My <span class=\"bold-18te3n\">red</span> text</p>\n  <p class=\"blue-oVkn13 bold-18te3n\">My blue text</p>\n</section>\n```\n\n### kebab-case situation\n\nThe kebab-case class names are being transformed to a camelCase version to facilitate their use on Markup and Javascript.\n\n```css\n/** style.module.css **/\n.success { color: green; }\n.error-message {\n  color: red;\n  text-decoration: line-through;\n}\n```\n```html\n<script>\n  import css from './style.module.css';\n</script>\n\n<p class={css.success}>My success text</p>\n<p class=\"{css.errorMessage}\">My error message</p>\n\n<!-- OR -->\n\n<script>\n  import { success, errorMessage } from './style.module.css';\n</script>\n\n<p class={success}>My success message</p>\n<p class={errorMessage}>My error message</p>\n```\n\n*generating*\n\n```html\n<style>\n  .success-3BIYsG { color: green; }\n  .error-message-16LSOn {\n    color: red;\n    text-decoration: line-through;\n  }\n</style>\n\n<p class=\"success-3BIYsG\">My success messge</p>\n<p class=\"error-message-16LSOn\">My error message</p>\n```\n\n### Unnamed import\n\nIf a css file is being imported without a name, CSS Modules will still apply to the classes of the stylesheet.\n\n```css\n/** style.module.css **/\np { font-size: 18px; }\n.success { color: green; }\n```\n```html\n<script>\n  import './style.module.css'\n</script>\n\n<p class=\"success\">My success message</p>\n<p>My another message</p>\n```\n\n*generating*\n\n```html\n<style>\n  p { font-size: 18px; }\n  .success-vg78j0 { color: green; }\n</style>\n\n<p class=\"success-vg78j0\">My success messge</p>\n<p>My error message</p>\n```\n\n### Directive and Dynamic class\n\nUse the Svelte's builtin `class:` directive or javascript template to display a class dynamically.  \n**Note**: the *shorthand directive* is **NOT working** with imported CSS Module identifiers.\n\n```html\n<script>\n  import { success, error } from './style.module.css';\n\n  let isSuccess = true;\n  $: notice = isSuccess ? success : error;\n</script>\n\n<button on:click={() => isSuccess = !isSuccess}>Toggle</button>\n\n<!-- Error -->\n<p class:success>Success</p>\n\n<!-- Ok -->\n<p \n  class:success={isSuccess}\n  class:error={!isSuccess}>Notice</p>\n\n<p class={notice}>Notice</p>\n<p class={isSuccess ? success : error}>Notice</p>\n```\n\n## Preprocessor Modes\n\nThe mode can be **set globally from the config** or **locally to override the global setting**.\n\n### Native\n\nScopes classes with CSS Modules, anything else is unscoped.\n\nPros:\n\n- uses default [CSS Modules](https://github.com/css-modules/css-modules) approach\n- creates unique ID to avoid classname conflicts and unexpected inheritances\n- passes scoped class name to child components\n\nCons:\n\n- does not scope non class selectors.\n- forces to write selectors with classes.\n- needs to consider third party plugins with `useAsDefaultScoping` on â€“ [Read more](#useasdefaultscoping).\n\n### Mixed\n\nScopes non-class selectors with svelte scoping in addition to `native` (same as preprocessor `v1`)\n\n```html\n<style module=\"mixed\">\n  p { font-size: 14px; }\n  .red { color: red; }\n</style>\n\n<p class=\"red\">My red text</p>\n```\n\n_generating_\n\n```html\n<style>\n  p.svelte-teyu13r { font-size: 14px; }\n  .red-30_1IC { color: red; }\n</style>\n\n<p class=\"red-30_1IC svelte-teyu13r\">My red text</p>\n```\n\nPros:\n\n- creates class names with unique ID to avoid conflicts and unexpected inheritances\n- uses svelte scoping on non class selectors\n- passes scoped class name to child components\n\nCons:\n\n- adds more weight to tag selectors than class selectors (because of the svelte scoping)\n\n```html\n<ul>\n <li>Home</li>\n <li class=\"active\">About</li>\n</ul>\n\n<style module=\"mixed\">\n li {\n   color: gray; \n }\n /* this will never be applied */\n .active {\n   color: blue;\n }\n /* forcing us to write that instead */\n li.active {\n   color: blue;\n }\n</style>\n\n<!-- or rewriting the component -->\n\n<ul>\n <li class=\"item\">Home</li>\n <li class=\"item active\">About</li>\n</ul>\n\n<style module=\"mixed\">\n .item {\n   color: gray; \n }\n .active {\n   color: blue;\n }\n</style>\n```\n\n### Scoped\n\nScopes classes with svelte scoping in addition to `mixed`.\n\n```html\n<style module=\"scoped\">\n  p { font-size: 14px; }\n  .red { color: red; }\n</style>\n\n<p class=\"red\">My red text</p>\n```\n\n_generating_\n\n```html\n<style>\n  p.svelte-teyu13r { font-size: 14px; }\n  .red-30_1IC.svelte-teyu13r { color: red; }\n</style>\n\n<p class=\"red-30_1IC svelte-teyu13r\">My red text</p>\n```\n\nPros:\n\n- creates class names with unique ID to avoid conflicts and unexpected inheritances\n- scopes every selectors at equal weight\n\nCons:\n\n- does not pass scoped classname to child components\n\n### Comparative\n\n| | Svelte scoping | Preprocessor Native | Preprocessor Mixed | Preprocessor Scoped |\n| -------------| ------------- | ------------- | ------------- | ------------- |\n| Scopes classes  | O | O | O | O |\n| Scopes non class selectors | O | X | O | O |\n| Creates unique class ID | X | O | O | O |\n| Has equal selector weight | O | O | X | O |\n| Passes scoped classname to a child component | X | O | O | X |\n\n## Why CSS Modules over Svelte scoping?\n\n- **On a full svelte application**: it is just a question of taste as the default svelte scoping is largely enough. Component styles will never inherit from other styling.\n\n- **On a hybrid project** (like using svelte to enhance a web page): the default scoping may actually inherits from a class of the same name belonging to the style of the page. In that case using CSS Modules to create a unique ID and to avoid class inheritance might be advantageous.\n\n## Configuration\n\n### Rollup\n\nTo be used with the plugin [`rollup-plugin-svelte`](https://github.com/sveltejs/rollup-plugin-svelte).\n\n```js\nimport svelte from 'rollup-plugin-svelte';\nimport { cssModules } from 'svelte-preprocess-cssmodules';\n\nexport default {\n  ...\n  plugins: [\n    svelte({\n      preprocess: [\n        cssModules(),\n      ]\n    }),\n  ]\n  ...\n}\n```\n\n### Webpack\n\nTo be used with the loader [`svelte-loader`](https://github.com/sveltejs/svelte-loader).\n\n```js\nconst { cssModules } = require('svelte-preprocess-cssmodules');\n\nmodule.exports = {\n  ...\n  module: {\n    rules: [\n      {\n        test: /\\.svelte$/,\n        exclude: /node_modules/,\n        use: [\n          {\n            loader: 'svelte-loader',\n            options: {\n              preprocess: [\n                cssModules(),\n              ]\n            }\n          }\n        ]\n      }\n    ]\n  }\n  ...\n}\n```\n\n### SvelteKit\n\nAs the module distribution is targetting `esnext`, `Node.js 14` or above is required \nin order to work. \n\n```js\n// svelte.config.js\n\nimport { cssModules } from 'svelte-preprocess-cssmodules';\n\nconst config = {\n  ...\n  preprocess: [\n    cssModules(),\n  ]\n};\n\nexport default config;\n```\n\n### Svelte Preprocess\n\nSvelte is running the preprocessors by phases, going through all *markup* first, followed by *script* and then *style*.\n\nThe CSS Modules preprocessor is doing all its work on the markup phase via `svelte.parse()` which requires the compoment to be a valid standard svelte component (using vanilla js and vanilla css). if any other code (such as typescript or sass) is encountered, an error will be thrown. \n\n```js\nimport { typescript, scss } from 'svelte-preprocess';\nimport { cssModules } from 'svelte-preprocess-cssmodules';\n\n...\n// svelte config:  NOT working!\n  preprocess: [\n    typescript(), // 2 run second on script phase\n    scss(), // 3 run last on style phase\n    cssModules(), // 1 run first on markup phase\n  ],\n...\n```\n\nAs it is extremely common for developers to use `svelte-preprocess` in their application, CSS Modules provides a small utility to easily be incorporated with. `linearPreprocess` will ensure a linear process with the list of preprocessors.\n\n```js\nimport { typescript, scss } from 'svelte-preprocess';\nimport { cssModules, linearPreprocess } from 'svelte-preprocess-cssmodules';\n\n...\n// svelte config: OK, processing one after another!\n  preprocess: linearPreprocess([\n    typescript(), // 1 run first\n    scss(), // 2 run second\n    cssModules(), // 3 run last\n  ]),\n...\n```\n\n### Options\nPass an object of the following properties\n\n| Name | Type | Default | Description |\n| ------------- | ------------- | ------------- | ------------- |\n| `cssVariableHash` | `{String}` | `[hash:base64:6]`  | The hash type ([see locatonIdentName](#localidentname)) |\n| [`getLocalIdent`](#getlocalident) | `Function` | `undefined`  | Generate the classname by specifying a function instead of using the built-in interpolation |\n| [`hashSeeder`](#hashseeder) | `{Array}` | `['style', 'filepath', 'classname']` | An array of keys to base the hash on |\n| [`includeAttributes`](#includeattributes) | `{Array}` | `[]` | An array of attributes to parse along with `class` |\n| `includePaths` | `{Array}` | `[]` (Any) | An array of paths to be processed |\n| [`localIdentName`](#localidentname) | `{String}` | `\"[local]-[hash:base64:6]\"` |  A rule using any available token |\n| `mode`  | `native\\|mixed\\|scoped` | `native` | The preprocess mode to use\n| `parseExternalStylesheet` | `{Boolean}` | `false` | Enable parsing on imported external stylesheet |\n| `parseStyleTag` | `{Boolean}` | `true` | Enable parsing on style tag |\n| [`useAsDefaultScoping`](#useasdefaultscoping) | `{Boolean}` | `false` | Replace svelte scoping globally |\n\n#### `getLocalIdent`\n\nCustomize the creation of the classname instead of relying on the built-in function.\n\n```ts\nfunction getLocalIdent(\n  context: {\n    context: string, // the context path\n    resourcePath: string, // path + filename\n  },\n  localIdentName: {\n    template: string, // the template rule\n    interpolatedName: string, // the built-in generated classname\n  },\n  className: string, // the classname string\n  content: { \n    markup: string, // the markup content\n    style: string,  // the style content\n  }\n): string {\n  return `your_generated_classname`;\n}\n```\n\n\n*Example of use*\n\n```bash\n# Directory\nSvelteApp\nâ””â”€ src\n   â”œâ”€ App.svelte\n   â””â”€ components\n      â””â”€ Button.svelte\n```\n```html\n<!-- Button.svelte -->\n<button class=\"red\">Ok</button>\n\n<style>\n  .red { background-color: red; }\n</style>\n```\n\n```js\n// Preprocess config\n...\npreprocess: [\n  cssModules({\n    localIdentName: '[path][name]__[local]',\n    getLocalIdent: (context, { interpolatedName }) => {\n      return interpolatedName.toLowerCase().replace('src_', '');\n      // svelteapp_components_button__red;\n    }\n  })\n],\n...\n```\n\n#### `hashSeeder`\n\nSet the source of the hash (when using `[hash]` / `[contenthash]`).\n\nThe list of available keys are:\n\n- `style` the content of the style tag (or the imported stylesheet)\n- `filepath` the path of the component \n- `classname` the local classname\n\n*Example of use: creating a common hash per component*\n```js\n// Preprocess config\n...\npreprocess: [\n  cssModules({\n    hashSeeder: ['filepath', 'style'],\n  })\n],\n...\n```\n```html\n<button class=\"success\">Ok</button>\n<button class=\"cancel\">Cancel</button>\n<style module>\n  .success { background-color: green; }\n  .cancel { background-color: gray; }\n</style>\n```\n\n_generating_\n\n```html\n<button class=\"success-yr6RT\">Ok</button>\n<button class=\"cancel-yr6RT\">Cancel</button>\n<style>\n  .success-yr6RT { background-color: green; }\n  .cancel-yr6RT { background-color: gray; }\n</style>\n```\n\n#### `includeAttributes`\n\nAdd other attributes than `class` to be parsed by the preprocesser\n\n```js\n// Preprocess config\n...\npreprocess: [\n  cssModules({\n    includeAttributes: ['data-color', 'classname'],\n  })\n],\n...\n```\n```html\n<button class=\"red\" data-color=\"red\">Red</button>\n<button class=\"red\" classname=\"blue\">Red or Blue</button>\n<style module>\n  .red { background-color: red; }\n  .blue { background-color: blue; }\n</style>\n```\n\n_generating_\n\n```html\n<button class=\"red-yr6RT\" data-color=\"red-yr6RT\">Red</button>\n<button class=\"red-yr6RT\" classname=\"blue-aE4qW\">Red or Blue</button>\n<style>\n  .red-yr6RT { background-color: red; }\n  .blue-aE4qW { background-color: blue; }\n</style>\n```\n\n#### `localIdentName`\n\nInspired by [webpack interpolateName](https://github.com/webpack/loader-utils#interpolatename), here is the list of tokens:\n\n- `[local]` the targeted classname\n- `[ext]` the extension of the resource\n- `[name]` the basename of the resource\n- `[path]` the path of the resource\n- `[folder]` the folder the resource is in\n- `[contenthash]` or `[hash]` *(they are the same)* the hash of the resource content (by default it's the hex digest of the md5 hash)\n- `[<hashType>:contenthash:<digestType>:<length>]` optionally one can configure\n  - other hashTypes, i. e. `sha1`, `md5`, `sha256`, `sha512`\n  - other digestTypes, i. e. `hex`, `base26`, `base32`, `base36`, `base49`, `base52`, `base58`, `base62`, `base64`\n  - and `length` the length in chars\n\n#### `useAsDefaultScoping`\n\nGlobally replace the default svelte scoping by the CSS Modules scoping. As a result, the `module` attribute to `<style>` becomes unnecessary.\n\n\n```js\n// Preprocess config\n...\npreprocess: [\n  cssModules({\n    useAsDefaultScoping: true\n  }),\n],\n...\n```\n\n```html\n<h1 class=\"title\">Welcome</h1>\n<style>\n  .title { color: blue }\n</style>\n```\n\n_generating_\n\n```html\n<h1 class=\"title-erYt1\">Welcome</h1>\n<style>\n  .title-erYt1 { color: blue }\n</style>\n```\n\n**Potential issue with third party plugins**   \n\nThe preprocessor requires you to add the `module` attribute to `<style>` in order to apply CSS Modules to a component. When enabling `useAsDefaultScoping` the `module` attribute is not required anymore and CSS Modules will apply to all svelte components of your application, including plugins. If a third party component is relying on svelte scoping and non class selectors, its styling will apply globally and may cause unexpected results.\n\nTo prevent any scoping conflict, it is recommended to set the `includePaths` option to your source folder in order to target your components only.\n\n```js\n// Preprocess config\n...\npreprocess: [\n  cssModules({\n    useAsDefaultScoping: true,\n    includePaths: ['./src'],\n  }),\n],\n...\n```\n\n## Migrating from v1\nIf you want to migrate an existing project to `v2` keeping the approach of the 1st version, follow the steps below:\n\n- Set the `mixed` mode from the global settings.\n   ```js\n   // Preprocess config\n   ...\n   preprocess: [\n    cssModules({\n      mode: 'mixed',\n    }),\n   ],\n   ...\n   ```\n- Remove all `$style.` prefix from the html markup\n- Add the attribute `module` to `<style>` within your components.\n   ```html\n   <style module>\n   ...\n   </style>\n   ```\n\n## Code Example\n\n*Rollup Config*\n\n```js\nexport default {\n  ...\n  plugins: [\n    svelte({\n      preprocess: [\n        cssModules({\n          includePaths: ['src'],\n          localIdentName: '[hash:base64:10]',\n        }),\n      ]\n    }),\n  ]\n  ...\n}\n```\n\n*Svelte Component*\n\n```html\n<style module>\n  .modal {\n    position: fixed;\n  }\n  .wrapper {\n    padding: 0.5rem 1rem;\n  }\n  .body {\n    flex: 1 0 0;\n  }\n  .modal button {\n    background-color: white;\n  }\n  .cancel {\n    background-color: #f2f2f2;\n  }\n</style>\n\n<section class=\"modal\">\n  <header class=\"wrapper\">My Modal Title</header>\n  <div class=\"body wrapper\">\n    <p>Lorem ipsum dolor sit, amet consectetur.</p>\n  </div>\n  <footer class=\"wrapper\">\n    <button>Ok</button>\n    <button class=\"cancel\">Cancel</button>\n  </footer>\n</section>\n```\n\n*Final html code generated by svelte*\n\n```html\n<style>\n  ._329TyLUs9c {\n    position: fixed;\n  }\n  .Re123xDTGv {\n    padding: 0.5rem 1rem;\n  }\n  ._1HPUBXtzNG {\n    flex: 1 0 0;\n  }\n  ._329TyLUs9c button {\n    background-color: white;\n  }\n  ._1xhJxRwWs7 {\n    background-color: #f2f2f2;\n  }\n</style>\n\n<section class=\"_329TyLUs9c\">\n  <header class=\"Re123xDTGv\">My Modal Title</header>\n  <div class=\"_1HPUBXtzNG Re123xDTGv\">\n    <p>Lorem ipsum dolor sit, amet consectetur.</p>\n  </div>\n  <footer class=\"Re123xDTGv\">\n    <button>Ok</button>\n    <button class=\"_1xhJxRwWs7\">Cancel</button>\n  </footer>\n</section>\n```\n## License\n\n[MIT](https://opensource.org/licenses/MIT)\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3813, 190],
		[3820, 760],
		[3827, 141],
		[3834, 38],
		[3841, 13],
		[3848, 37],
		[3855, 25],
		[3862, 30],
		[3869, 7],
		[3876, 1],
		[3883, 2],
		[3890, 1],
		[3897, 29],
		[3904, 18],
		[3911, 9],
		[3918, 25],
		[3925, 14],
		[3932, 2],
		[3939, 35],
		[3946, 66],
		[3953, 6],
		[3960, 12],
		[3967, 4],
		[3974, 7],
		[3981, 26],
		[3995, 7],
		[4002, 11],
		[4009, 7],
		[4016, 27],
		[4023, 106],
		[4030, 16],
		[4037, 38],
		[4044, 25],
		[4051, 64],
		[4058, 34],
		[4065, 53],
		[4072, 129],
		[4079, 30],
		[4086, 36],
		[4093, 71],
		[4100, 33],
		[4107, 51],
		[4114, 14],
		[4121, 93],
		[4128, 99],
		[4135, 22]
	]
}
