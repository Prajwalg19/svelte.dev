{
	"name": "svelte-simple-modal",
	"description": "Create simple, content-agnostic modal windows in Svelte.",
	"repo_url": "https://github.com/flekschas/svelte-simple-modal",
	"authors": ["flekschas"],
	"homepage": "https://github.com/flekschas/svelte-simple-modal#readme",
	"downloads": 6169,
	"updated": "2025-01-10T18:29:47.938Z",
	"tags": ["ui"],
	"github_stars": 426,
	"typescript": true,
	"version": "2.0.0",
	"svelte_range": "^5.0.0",
	"last_rune_check_version": "2.0.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-simple-modal",
				"version": "2.0.0",
				"size": 79536
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "<h1 align=\"center\">\n  Svelte Simple Modal\n</h1>\n\n<div align=\"center\">\n  \n  **A simple, small, and content-agnostic modal for [Svelte](https://svelte.dev).**\n  \n</div>\n\n<br/>\n\n<div align=\"center\">\n  \n  [![NPM Version](https://img.shields.io/npm/v/svelte-simple-modal.svg?style=flat-square&color=7f99ff)](https://npmjs.org/package/svelte-simple-modal)\n  [![Build Status](https://img.shields.io/github/actions/workflow/status/flekschas/svelte-simple-modal/build.yml?branch=master&color=a17fff&style=flat-square)](https://github.com/flekschas/svelte-simple-modal/actions?query=workflow%3Abuild)\n  [![File Size](http://img.badgesize.io/https://unpkg.com/svelte-simple-modal/src/Modal.svelte?compression=gzip&style=flat-square&color=e17fff)](https://bundlephobia.com/result?p=svelte-simple-modal)\n  [![Code Style Prettier](https://img.shields.io/badge/code%20style-prettier-ff7fe1.svg?style=flat-square)](https://github.com/prettier/prettier#readme)\n  [![Demo](https://img.shields.io/badge/demo-üëç-ff7fa5.svg?style=flat-square)](https://svelte.dev/repl/033e824fad0a4e34907666e7196caec4?version=3.18.2)\n  \n</div>\n\n<div id=\"teaser-matrices\" align=\"center\">\n  \n  ![simple-modal](https://user-images.githubusercontent.com/932103/57642565-9d335d00-7585-11e9-80c6-e4b835f02428.gif)\n  \n</div>\n\n**Live demo:** https://svelte.dev/playground/b95ce66b0ef34064a34afc5c0249f313?version=5.17.3\n\n**Works with:** Svelte `>=v5`!\n\n> [!NOTE]  \n> If you want to use Svelte Simple Modal with Svelte v3 or v4, check out [version 1](https://github.com/flekschas/svelte-simple-modal/tree/v1).\n\n## Table of Contents\n\n- [Install](#install)\n  - [Rollup Setup](#rollup-setup)\n- [Usage](#usage)\n  - [TypeScript Example](#usage-with-typescript)\n  - [Svelte Store Example](#usage-with-a-svelte-store)\n  - [Styling](#styling)\n  - [SSR](#server-side-rendering)\n  - [Accessibility](#accessibility)\n- [API](#api)\n  - [Component](#component-api)\n  - [Events](#component-events)\n  - [Context API](#context-api)\n  - [Store API](#store-api)\n- [FAQ](#faq)\n\n## Install\n\n```bash\nnpm install --save svelte-simple-modal\n```\n\n#### Rollup Setup\n\nMake sure that the main application's version of `svelte` is used for bundling by setting `rollup-plugin-node-resolve`'s `dedupe` option as follows:\n\n```js\nimport resolve from 'rollup-plugin-node-resolve';\n\nexport default {\n  plugins: [\n    resolve({\n      dedupe: ['svelte', 'svelte/transition', 'svelte/internal'], // important!\n    }),\n  ],\n};\n```\n\n## Usage\n\nImport the `Modal` component into your main app component (e.g., `App.svelte`).\n\nThe modal is exposing [two context functions](#context-api):\n\n- [`open()`](#open) opens a component as a modal.\n- [`close()`](#close) simply closes the modal.\n\n```svelte\n<!-- App.svelte -->\n<script>\n  import Content from './Content.svelte';\n  import Modal from 'svelte-simple-modal';\n</script>\n\n<Modal><Content /></Modal>\n\n\n<!-- Content.svelte -->\n<script>\n  import { getContext } from 'svelte';\n  import Popup from './Popup.svelte';\n  const { open } = getContext('simple-modal');\n  const showSurprise = () => open(Popup, { message: \"It's a modal!\" });\n</script>\n\n<p><button on:click={showSurprise}>Show me a surprise!</button></p>\n\n\n<!-- Popup.svelte -->\n<script>\n  export let message = 'Hi';\n</script>\n\n<p>üéâ {message} üçæ</p>\n```\n\n**Demo:** https://svelte.dev/repl/52e0ade6d42546d8892faf8528c70d30\n\n### Usage with TypeScript\n\nYou can use the `Context` type exported by the package to validate the `getContext` function:\n\n```ts\nimport type { Context } from 'svelte-simple-modal';\nconst { open } = getContext<Context>('simple-modal');\n// ...\n```\n\n### Usage With a Svelte Store\n\nAlternatively, you can use a [Svelte store](#store-api) to show/hide a component as a modal.\n\n```svelte\n<!-- App.svelte -->\n<script>\n  import { writable } from 'svelte/store';\n  import Modal, { bind } from 'svelte-simple-modal';\n  import Popup from './Popup.svelte';\n  const modal = writable(null);\n  const showModal = () => modal.set(bind(Popup, { message: \"It's a modal!\" }));\n</script>\n\n<Modal show={$modal}>\n  <button on:click={showModal}>Show modal</button>\n</Modal>\n```\n\n**Demo:** https://svelte.dev/repl/aec0c7d9f5084e7daa64f6d0c8ef0209\n\nThe `<Popup />` component is the same as in the example above.\n\nTo hide the modal programmatically, simply unset the store. E.g., `modal.set(null)`.\n\n### Styling\n\nThe modal comes pre-styled for convenience but you can easily extent or replace the styling using either custom CSS classes or explicit CSS styles.\n\nCustom CSS classes can be applied via the `classBg`, `classWindow`, `classWindowWrap`, `classContent`, and `classCloseButton` properties. For instance, you could customize the styling with [TailwindCSS](https://tailwindcss.com/) as follows:\n\n```svelte\n<Modal\n  show={$modal}\n  unstyled={true}\n  classBg=\"fixed top-0 left-0 w-screen h-screen flex flex-col justify-center bg-orange-100/[.9]\"\n  classWindowWrap=\"relative m-2 max-h-full\"\n  classWindow=\"relative w-40 max-w-full max-h-full my-2 mx-auto text-orange-200 rounded shadow-md bg-indigo-900\"\n  classContent=\"relative p-2 overflow-auto\"\n  closeButton={false}\n>\n  <button on:click={showModal}>Show modal</button>\n</Modal>\n```\n\n**Demo:** https://svelte.dev/repl/f2a988ddbd5644f18d7cd4a4a8277993\n\n> Note: to take full control over the modal styles with CSS classes you have to reset existing styles via `unstyled={true}` as internal CSS classes are always applied last due to Svelte's class scoping.\n\nAlternatively, you can also apply CSS styles directly via the `styleBg`, `styleWindow`, `styleWindowWrap`, `styleContent`, and `styleCloseButton` properties. For instance:\n\n```svelte\n<Modal\n  show={$modal}\n  styleBg={{ backgroundColor: 'rgba(255, 255, 255, 0.85)' }}\n  styleWindow={{ boxShadow: '0 2px 5px 0 rgba(0, 0, 0, 0.15)' }}\n>\n  <button on:click={showModal}>Show modal</button>\n</Modal>\n```\n\n**Demo:** https://svelte.dev/repl/50df1c694b3243c1bd524b27f86eec51\n\n### Server-Side Rendering\n\nWith [SvelteKit](https://kit.svelte.dev/) you can enable [SSR](https://www.google.com/search?q=server+side+rendering) using the `browser` environmental variable as follows:\n\n```svelte\n<script>\n  import Modal from 'svelte-simple-modal';\n  import { browser } from '$app/env';\n</script>\n\n{#if browser}\n  <Modal>\n    <Content />\n  </Modal>\n{/if}\n```\n\nAlternatively, you can enable SSR by dynamically importing svelte-simple-modal in `onMount()` as follows:\n\n```js\nimport { onMount } from 'svelte';\n\nonMount(async () => {\n  const svelteSimpleModal = await import('svelte-simple-modal');\n  Modal = svelteSimpleModal.default;\n});\n```\n\n### Accessibility\n\nThe library applies the following WAI-ARIA guidelines for modal dialogs\nautomtically:\n\n- `aria-modal=\"true\"` and `role=\"dialog\"` are applied automatically\n- The tab focus is trapped in the modal\n- The modal is closed on pressing the `esc` key\n\nTo further improve the accessibility you'll have to either provide a label via\n[`ariaLabel`](https://www.w3.org/TR/wai-aria-1.1/#aria-label) or reference a\ntitle element via [`ariaLabelledBy`](https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby).\nThe `ariaLabel` is automatically omitted when `ariaLabelledBy` is specified.\n\n## API\n\n### Component API\n\nThe `<Modal />` component accepts the following optional properties:\n\n| Property                  | Type                                                 | Default             | Description                                                                                                                                                                                                                                                 |\n| ------------------------- | ---------------------------------------------------- | ------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **show**                  | Component \\| null                                    | `null`              | A Svelte component to show as the modal. See [Store API](#store-api) for details.                                                                                                                                                                           |\n| **id**                    | string \\| null                                       | `null`              | Element ID to be assigned to the modal's root DOM element.                                                                                                                                                                                                  |\n| **ariaLabel**             | string \\| null                                       | `null`              | Accessibility label of the modal. See [W3C WAI-ARIA](https://www.w3.org/TR/wai-aria-1.1/#aria-label) for details.                                                                                                                                           |\n| **ariaLabelledBy**        | string \\| null                                       | `null`              | Element ID holding the accessibility label of the modal. See [W3C WAI-ARIA](https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby) for details.                                                                                                               |\n| **closeButton**           | Component \\| boolean                                 | `true`              | If `true` a button for closing the modal is rendered. You can also pass in a [custom Svelte component](#custom-close-button) to have full control over the styling.                                                                                         |\n| **closeOnEsc**            | boolean                                              | `true`              | If `true` the modal will close when pressing the escape key.                                                                                                                                                                                                |\n| **closeOnOuterClick**     | boolean                                              | `true`              | If `true` the modal will close when clicking outside the modal window.                                                                                                                                                                                      |\n| **transitionBg**          | function                                             | `svelte.fade`       | Transition function for the background.                                                                                                                                                                                                                     |\n| **transitionBgProps**     | BlurParams \\| FadeParams \\| FlyParams \\| SlideParams | `{}`                | Properties of the transition function for the background.                                                                                                                                                                                                   |\n| **transitionWindow**      | function                                             | `svelte.fade`       | Transition function for the window.                                                                                                                                                                                                                         |\n| **transitionWindowProps** | BlurParams \\| FadeParams \\| FlyParams \\| SlideParams | `{}`                | Properties of the transition function for the window.                                                                                                                                                                                                       |\n| **classBg**               | string \\| null                                       | `null`              | Class name for the background element.                                                                                                                                                                                                                      |\n| **classWindowWrap**       | string \\| null                                       | `null`              | Class name for the modal window wrapper element.                                                                                                                                                                                                            |\n| **classWindow**           | string \\| null                                       | `null`              | Class name for the modal window element.                                                                                                                                                                                                                    |\n| **classContent**          | string \\| null                                       | `null`              | Class name for the modal content element.                                                                                                                                                                                                                   |\n| **classCloseButton**      | string \\| null                                       | `null`              | Class name for the built-in close button.                                                                                                                                                                                                                   |\n| **styleBg**               | Record<string, string \\| number>                     | `{}`                | Style properties of the background.                                                                                                                                                                                                                         |\n| **styleWindowWrap**       | Record<string, string \\| number>                     | `{}`                | Style properties of the modal window wrapper element.                                                                                                                                                                                                       |\n| **styleWindow**           | Record<string, string \\| number>                     | `{}`                | Style properties of the modal window.                                                                                                                                                                                                                       |\n| **styleContent**          | Record<string, string \\| number>                     | `{}`                | Style properties of the modal content.                                                                                                                                                                                                                      |\n| **styleCloseButton**      | Record<string, string \\| number>                     | `{}`                | Style properties of the built-in close button.                                                                                                                                                                                                              |\n| **unstyled**              | boolean                                              | `false`             | When `true`, the default styles are not applied to the modal elements.                                                                                                                                                                                      |\n| **disableFocusTrap**      | boolean                                              | `false`             | If `true` elements outside the modal can be in focus. This can be useful in certain edge cases.                                                                                                                                                             |\n| **isTabbable**            | (node: Element): boolean                             | internal function   | A function to determine if an HTML element is tabbable.                                                                                                                                                                                                     |\n| **key**                   | string                                               | `\"simple-modal\"`    | The context key that is used to expose `open()` and `close()`. Adjust to avoid clashes with other contexts.                                                                                                                                                 |\n| **setContext**            | function                                             | `svelte.setContent` | You can normally ingore this property when you have [configured Rollup properly](#rollup-setup). If you want to bundle simple-modal with its own version of Svelte you have to pass `setContext()` from your main app to simple-modal using this parameter. |\n\n### Component Events\n\nThe `<Modal />` component dispatches the following events:\n\n- `open`: dispatched when the modal window starts to open.\n- `opened`: dispatched when the modal window opened.\n- `close`: dispatched when the modal window starts to close.\n- `closed`: dispatched when the modal window closed.\n\nAlternatively, you can listen to those events via callbacks passed to [`open()`](#open) and [`close()`](#close).\n\n### Context API\n\nSvelte Simple Modal uses [Svelte's context API](https://svelte.dev/tutorial/context-api) to expose the `open()` and `close()` methods. You can get these methods as follows:\n\n```js\nconst { open, close } = getContext('simple-modal');\n```\n\n<a name=\"open\" href=\"#open\">#</a> <b>open</b>(<i>Component</i>, <i>props = {}</i>, <i>options = {}</i>, <i>callbacks = {}</i>)\n\nOpens the modal with `<Component {props}>` rendered as the content. `options` can be used to adjust the modal behavior once for the modal that is about to be opened. The `options` allows to customize all [parameters](#parameters) except `key` and `setContext`:\n\n```javascript\n{\n  closeButton: false,\n  closeOnEsc: false,\n  closeOnOuterClick: false,\n  transitionBg: fade,\n  transitionBgProps: {\n    duration: 5000\n  },\n  transitionWindow: fly,\n  transitionWindowProps: {\n    y: 100,\n    duration: 250\n  },\n  styleBg: { backgroundImage: 'http://example.com/my-background.jpg' },\n  styleWindow: { fontSize: '20em' },\n  styleContent: { color: 'yellow' },\n  styleCloseButton: { width: '3rem', height: '3rem' },\n  disableFocusTrap: true\n}\n```\n\n<a name=\"close\" href=\"#close\">#</a> <b>close</b>(<i>callbacks = {}</i>)\n\nCloses the modal. Similar to `open()`, this method supports adding callbacks for the closing transition:\n\n```javascript\n{\n  onClose: () => { /* modal window starts to close */ },\n  onClosed: () => { /* modal window closed */ },\n}\n```\n\nCallbacks are triggered at the beginning and end of the opening and closing transition. The following callbacks are supported:\n\n```javascript\n{\n  onOpen: () => { /* modal window starts to open */ },\n  onOpened: () => { /* modal window opened */ },\n  onClose: () => { /* modal window starts to close */ },\n  onClosed: () => { /* modal window closed */ },\n}\n```\n\n### Store API\n\nYou can also use [Svelte stores](https://svelte.dev/tutorial/writable-stores) to open a modal using the `<Modal />`'s [`show` property](#properties) as follows:\n\n```svelte\n<!-- App.svelte -->\n<script>\n  import { writable } from 'svelte/store';\n  import Modal from 'svelte-simple-modal';\n  import Popup from './Popup.svelte';\n  const modal = writable(null);\n  const showModal = () => modal.set(Popup);\n</script>\n\n<Modal show={$modal}>\n  <button on:click={showModal}>Show modal</button>\n</Modal>\n\n<!-- Popup.svelte -->\n<p>üéâ Hi üçæ</p>\n```\n\n**Demo:** https://svelte.dev/repl/6f55b643195646408e780ceeb779ac2a\n\nAn added benefit of using stores is that the component opening the modal does not have to be a parent of `<Modal />`. For instance, in the example above, `App.svelte` is toggling `Popup.svelte` as a modal even though `App.svelte` is not a child of `<Modal />`.\n\n#### Bind Props to a Component Shown as a Modal\n\nSometimes you want to pass properties to the component shown as a modal. To accomplish this, you can use our `bind()` helper function as follows:\n\n```svelte\n<script>\n  import { bind } from 'svelte-simple-modal';\n  import Popup from './Popup.svelte';\n  import { modal } from './App.svelte';\n\n  modal.set(bind(Popup, { name: 'custom name' }));\n</script>\n```\n\nIf you've worked with React/JSX then think of `const c = bind(Component, props)` as the equivalent of `const c = <Component ...props />`.\n\n## FAQ\n\n#### Custom Close Button\n\n**This feature requires Svelte >=v3.19!**\n\nUnfortunately, it's not possible to adjust all styles of the built-in close button via the `styleCloseButton` option. If you need full control you can implement your own Svelte component and use that as the close button. To do so pass your component via the `closeButton` option to `<Modal />` or `open()`.\n\nFor example, your close button might look as follows:\n\n```svelte\n<!-- CloseButton.svelte -->\n<script>\n  // This property is used by Modal.svelte to pass down the close function\n  export let onClose;\n</script>\n\n<button on:click={onClose}>Custom Close Button</button>\n\n<style>\n  /* Customize to your liking */\n  button {\n    position: absolute;\n    top: -3rem;\n    right: 0;\n  }\n</style>\n```\n\nNow you can set it as the default close button by passing it to `<Modal />` as follows:\n\n```svelte\n<!-- App.svelte -->\n<script>\n  import Content from './Content.svelte';\n  import CloseButton from './CloseButton.svelte';\n  import Modal from 'svelte-simple-modal';\n</script>\n\n<Modal closeButton={CloseButton}>\n  <Content />\n</Modal>\n```\n\nOr you can pass `CloseButton` to `open()` as shown below:\n\n```svelte\n<!-- Content.svelte -->\n<script>\n  import { getContext } from 'svelte';\n  import Surprise from './Surprise.svelte';\n  import CloseButton from './CloseButton.svelte';\n\n  const { open } = getContext('simple-modal');\n\n  const showSurprise = () => {\n    open(Surprise, { message: \"It's a modal!\" }, { closeButton: CloseButton });\n  };\n</script>\n\n<p><button on:click={showSurprise}>Show me a surprise!</button></p>\n```\n\n## License\n\n[MIT](LICENSE)\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 6454],
		[3603, 5510],
		[3610, 4610],
		[3617, 5515],
		[3624, 5600],
		[3631, 5506],
		[3638, 5058],
		[3645, 2442],
		[3652, 4335],
		[3659, 5491],
		[3666, 6548],
		[3673, 6847],
		[3680, 7373],
		[3687, 7178],
		[3694, 7120],
		[3701, 6919],
		[3708, 6987],
		[3715, 7736],
		[3722, 7361],
		[3729, 8207],
		[3736, 6623],
		[3743, 6854],
		[3750, 7224],
		[3757, 6840],
		[3764, 7917],
		[3771, 6815],
		[3778, 6716],
		[3785, 7586],
		[3792, 6780],
		[3799, 7737],
		[3806, 7196],
		[3813, 6890],
		[3820, 6579],
		[3827, 6826],
		[3834, 6403],
		[3841, 7577],
		[3848, 7125],
		[3855, 7128],
		[3862, 7608],
		[3869, 6859],
		[3876, 6892],
		[3883, 7411],
		[3890, 8600],
		[3897, 7949],
		[3904, 7812],
		[3911, 8005],
		[3918, 8314],
		[3925, 7463],
		[3932, 7410],
		[3939, 7286],
		[3946, 7990],
		[3953, 7580],
		[3960, 8865],
		[3967, 13931],
		[3974, 17178],
		[3981, 10381],
		[3988, 6361],
		[3995, 6107],
		[4002, 5246],
		[4009, 1811],
		[4016, 2779],
		[4023, 6366],
		[4030, 6355],
		[4037, 5508],
		[4044, 5361],
		[4051, 5048],
		[4058, 6487],
		[4065, 6032],
		[4072, 5997],
		[4079, 5980],
		[4086, 5919],
		[4093, 5896],
		[4100, 7240],
		[4107, 7124],
		[4114, 6169],
		[4121, 5073],
		[4128, 5776],
		[4135, 4643]
	],
	"esm": true,
	"cjs": false
}
