{
	"name": "svelte-store-class",
	"description": "Wrap Svelte stores inside classes for better organization.",
	"repo_url": "https://github.com/yeori/svelte-store-class",
	"authors": ["yeori"],
	"homepage": "https://github.com/yeori/svelte-store-class#readme",
	"downloads": 5,
	"updated": "2024-11-05T11:44:22.678Z",
	"tags": ["miscellaneous"],
	"github_stars": 0,
	"typescript": true,
	"version": "0.0.3",
	"svelte_range": "^4.0.0",
	"kit_range": "^2.0.0",
	"last_rune_check_version": "0.0.3",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-store-class",
				"version": "0.0.3",
				"size": 10204
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Svelte Store Class\n\nIt provides a wrapper for Svelte store.\n\n## Installation\n\n```\nnpm install svelte-store-class\n```\n\n## Example\n\nThis is a simple example of a **store class for a todo app**\n\n```typescript\n// todo.store.ts\nimport { writable } from 'svelte/store';\nimport { SvelteStore } from 'svelte-store-class';\n\nexport class TodoModel extends SvelteStore<TodoModel> {\n\tprotected store = writable(this as TodoModel);\n\tconstructor() {\n\t\tsuper();\n\t}\n}\n```\n\n- As shown above, we prepare a class to store the state of a typical `Todo app`.\n- This is the minimum implementation required to function as a Svelte Store.\n\nWe add implementations necessary to manage TODO items.\n\n```typescript\n// todo.store.ts\nimport { writable } from 'svelte/store';\n\nexport class TodoItem {\n\tconstructor(readonly label: string) {}\n}\n\nexport class TodoModel extends SvelteStore<TodoModel> {\n\tprotected store = writable(this as TodoModel);\n\tconstructor(readonly items: TodoItem[] = []) {\n\t\tsuper();\n\t}\n}\n```\n\n## View\n\nIn a Svelte component, use it as follows:\n\n```html\n<script>\n\timport { TodoModel } from './todo.store.js';\n\n\tconst todo = new TodoModel();\n</script>\n\n<ul>\n\t{#each $todo.items as item}\n\t<li>{item.label}</li>\n\t{/each}\n</ul>\n```\n\n- The variable `todo` is an instance of the class and also acts as a svelte store.\n\nImplement the functionality to add a Todo item.\n\n```typescript\n// todo.store.ts\n...\n\nexport class TodoModel extends SvelteStore<TodoModel> {\n\tprotected store = writable(this as TodoModel);\n\tconstructor(readonly items: TodoItem[] = []) {\n\t\tsuper();\n\t}\n\taddItem(itemLabel: string) {\n\t\tthis.items.push(new TodoItem(itemLabel));\n\t\tthis.update(); // (+)\n\t}\n}\n```\n\n- `this.update()` - Internally calls `store.update(...)`.\n\nImplement the functionality to add a Todo item in the UI.\n\n```html\n<script>\n\timport { TodoModel } from './todo.store.js';\n\n\tconst todo = new TodoModel();\n\n\tfunction addItem() {\n\t\tconst label = 'This is a todo item';\n\t\ttodo.addItem(label);\n\t}\n</script>\n\n<button on:click=\"{addItem}\">New Item</button>\n<ul>\n\t{#each $todo.items as item}\n\t<li>{item.label}</li>\n\t{/each}\n</ul>\n```\n\nBy inheriting from **SvelteStore**, the custom store instance hides the store object and increases programming flexibility.\n\n---\n\nTranlated by chatgpt\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3925, 265],
		[3932, 15],
		[3939, 6],
		[3946, 2],
		[3953, 3],
		[3960, 152],
		[3967, 17],
		[3981, 8],
		[3988, 6],
		[4002, 2],
		[4009, 2],
		[4016, 6],
		[4023, 3],
		[4030, 5],
		[4037, 11],
		[4044, 9],
		[4051, 4],
		[4065, 1],
		[4093, 1],
		[4100, 7],
		[4107, 16],
		[4114, 5],
		[4121, 10],
		[4128, 6],
		[4135, 9]
	],
	"esm": true,
	"cjs": false
}
