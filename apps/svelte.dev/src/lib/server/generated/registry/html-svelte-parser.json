{
	"name": "html-svelte-parser",
	"description": "Parses HTML into Svelte components.",
	"repo_url": "https://github.com/PatrickG/html-svelte-parser",
	"authors": ["pehgeh"],
	"homepage": "https://github.com/PatrickG/html-svelte-parser#readme",
	"downloads": 159,
	"updated": "2024-01-11T10:14:34.087Z",
	"tags": ["tooling"],
	"github_stars": 16,
	"typescript": true,
	"version": "1.0.0",
	"svelte_range": "^3.47.0 || ^4.0.0 || ^5.0.0-next.0",
	"kit_range": "^2.0.0",
	"last_rune_check_version": "1.0.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "html-svelte-parser",
				"version": "1.0.0",
				"size": 66164
			},
			{
				"name": "dom-serializer",
				"version": "2.0.0",
				"size": 28813
			},
			{
				"name": "domelementtype",
				"version": "2.3.0",
				"size": 11359
			},
			{
				"name": "domhandler",
				"version": "5.0.3",
				"size": 75339
			},
			{
				"name": "entities",
				"version": "4.5.0",
				"size": 412892
			},
			{
				"name": "esm-env",
				"version": "1.2.2",
				"size": 3784
			},
			{
				"name": "html-dom-parser",
				"version": "5.0.13",
				"size": 131668
			},
			{
				"name": "htmlparser2",
				"version": "10.0.0",
				"size": 488506
			},
			{
				"name": "domutils",
				"version": "3.2.2",
				"size": 166738
			},
			{
				"name": "entities",
				"version": "6.0.0",
				"size": 540419
			},
			{
				"name": "htmlparser2",
				"version": "9.0.0",
				"size": 245932
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[1, 3],
			[3, 2],
			[1, 4],
			[0, 3],
			[0, 5],
			[0, 6],
			[6, 3],
			[6, 7],
			[7, 2],
			[7, 3],
			[7, 8],
			[8, 1],
			[8, 2],
			[8, 3],
			[7, 9],
			[0, 10],
			[10, 8],
			[10, 4],
			[10, 3],
			[10, 2]
		],
		"circular": []
	},
	"readme": "# <img alt=\"html-svelte-parser Logo\" src=\"./static/logo.svg\" width=\"64px\" /> html-svelte-parser\n\nHTML to Svelte parser that works on both the server (Node.js) and the client (browser).\n\nTo replace an element with a svelte component, check out the [`processNode`](#processnode) option.\n\n#### Example\n\n_Paragraph.svelte_\n\n```svelte\n<p><slot /></p>\n```\n\n_App.svelte_\n\n```svelte\n<script>\n\timport { Html, isTag } from 'html-svelte-parser';\n\timport Paragraph from './Paragraph.svelte';\n</script>\n\n<Html\n\thtml=\"<p>Hello, World!</p>\"\n\tprocessNode={node => {\n\t\tif (isTag(node) && node.name === 'p') {\n\t\t\treturn { component: Paragraph };\n\t\t}\n\t}}\n/>\n\n<!--\n\tEquivalent to:\n\n\t<Paragraph>Hello, World!</Paragraph>\n-->\n```\n\n---\n\n<details>\n<summary>Table of Contents</summary>\n\n- [Install](#install)\n- [Usage](#usage)\n  - [processNode](#processnode)\n    - [Modify/remove nodes](#modifyremove-nodes)\n    - [Replace nodes](#replace-nodes)\n  - [Usage with sveltekit](#usage-with-sveltekit)\n  - [Named slots](#named-slots)\n- [Credits](#credits)\n\n</details>\n\n## Install\n\nInstall the [NPM package _html-svelte-parser_](https://www.npmjs.com/package/html-svelte-parser) with your favorite package manager:\n\n```sh\nnpm install html-svelte-parser\n# pnpm add html-svelte-parser\n# yarn add html-svelte-parser\n```\n\n## Usage\n\n```svelte\n<script>\n\timport { Html } from 'html-svelte-parser';\n</script>\n\n<!-- Single element: -->\n<Html html=\"<h1>single</h1>\" />\n\n<!-- Multiple elements: -->\n<ul>\n\t<Html html=\"<li>Item 1</li><li>Item 2</li>\" />\n</ul>\n\n<!-- Nested elements: -->\n<Html html=\"<div><p>Lorem ipsum</p></div>\" />\n\n<!-- Element with attributes: -->\n<Html\n\thtml={`<hr id=\"foo\" class=\"bar\" data-attr=\"baz\" custom=\"qux\" style=\"top:42px;\">`}\n/>\n```\n\n### processNode\n\nThe `processNode` option is a function that allows you to modify or remove a DOM node or replace it with a svelte component. It receives one argument which is [domhandler](https://github.com/fb55/domhandler)'s node (either [`Element`](https://github.com/fb55/domhandler/blob/88fb7a71446e221f5a09cd3c41713c51043be2a7/src/node.ts#L271) or [`Text`](https://github.com/fb55/domhandler/blob/88fb7a71446e221f5a09cd3c41713c51043be2a7/src/node.ts#L155)):\n\n```svelte\n<Html\n\thtml=\"<br>\"\n\tprocessNode={domNode => {\n\t\tconsole.dir(domNode, { depth: null });\n\t}}\n/>\n```\n\nConsole output:\n\n```js\nElement {\n  type: 'tag',\n  parent: null,\n  prev: null,\n  next: null,\n  startIndex: null,\n  endIndex: null,\n  children: [],\n  name: 'br',\n  attribs: {}\n}\n```\n\n#### Modify/remove nodes\n\nYou can directly modify the DOM nodes or remove them by returning `false`:\n\n```svelte\n<script>\n\timport { Html, isTag, Text } from 'html-svelte-parser';\n\n\tconst html = `\n\t\t<p id=\"remove\">remove me</p>\n\t\t<p id=\"keep\">keep me</p>\n\t`;\n\n\t/** @type {import('html-svelte-parser').ProcessNode} */\n\tconst processNode = domNode => {\n\t\tif (isTag(domNode)) {\n\t\t\tif (domNode.attribs.id === 'remove') {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (domNode.attribs.id === 'keep') {\n\t\t\t\tdomNode.attribs.id = 'i-stay';\n\t\t\t\tdomNode.children = [new Text('i stay!')];\n\t\t\t}\n\t\t}\n\t};\n</script>\n\n<Html {html} {processNode} />\n\n<!--\n\tEquivalent to:\n\n\t<p id=\"i-stay\">i stay!</p>\n-->\n```\n\n#### Replace nodes\n\nTo replaced a DOM node with a svelte component return an object with a `component` property.\\\nAdditionally the object can have a `props` property.\n\n_Span.svelte_\n\n```svelte\n<span {...$$props}><slot /></span>\n```\n\n_App.svelte_\n\n```svelte\n<script>\n\timport { Html, isTag, Text } from 'html-svelte-parser';\n\timport Span from './Span.svelte';\n\n\tconst html = `<p id=\"replace\">text</p>`;\n\n\t/** @type {import('html-svelte-parser').ProcessNode} */\n\tconst processNode = domNode => {\n\t\tif (isTag(domNode) && domNode.attribs.id === 'replace') {\n\t\t\tdomNode.children = [new Text('replaced')];\n\t\t\treturn { component: Span, props: { class: 'my-span' } };\n\t\t}\n\t};\n</script>\n\n<Html {html} {processNode} />\n\n<!--\n\tEquivalent to:\n\n\t<span class=\"my-span\">replaced</span>\n-->\n```\n\n### Usage with sveltekit\n\n`html-svelte-parser` exports more than just the `Html` component, which makes it possible to delegate the work of parsing and processing to the server. An added bonus, you ship less code to the client.\n\n<details>\n<summary>Other files</summary>\n\n_components/Button.svelte_\n\n```svelte\n<script>\n\t/** @type {string | undefined} */\n\texport let href = undefined;\n\n\t/** @type {'button' | 'submit' | 'reset'}*/\n\texport let type = 'button';\n</script>\n\n{#if href}\n\t<a {...$$restProps} {href}><slot /></a>\n{:else}\n\t<button {...$$restProps} {type}><slot /></button>\n{/if}\n```\n\n</details>\n\n_+page.server.js_\n\n```js\nimport { isTag, parse } from 'html-svelte-parser';\n\n/** @type {import('./$types').PageServerLoad} */\nexport const load = () => {\n\treturn {\n\t\tcontent: parse(\n\t\t\t`<p><a class=\"btn\" href=\"https://svelte.dev/\">Svelte</a> rocks</p>`,\n\t\t\t{\n\t\t\t\tprocessNode(node) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tisTag(node) &&\n\t\t\t\t\t\tnode.name === 'a' &&\n\t\t\t\t\t\tnode.attribs.class?.split(/\\s/).includes('btn')\n\t\t\t\t\t) {\n\t\t\t\t\t\t// We use a `string` for the `component` property.\n\t\t\t\t\t\treturn { component: 'Button', props: node.attribs };\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t),\n\t};\n};\n```\n\n_+page.js_\n\n```js\nimport { loadComponents } from 'html-svelte-parser';\n\n/** @type {import('./$types').PageLoad} */\nexport const load = ({ data }) => ({\n\tcontent: loadComponents(data.content, componentName => {\n\t\t// `componentName` is the `component` we returned in `+page.server.js`\n\t\treturn import(`./components/${componentName}.svelte`);\n\t}),\n});\n```\n\n_+page.svelte_\n\n```svelte\n<script>\n\timport { Renderer } from 'html-svelte-parser';\n\n\t/** @type {import('./$types').PageData} */\n\texport let data;\n</script>\n\n<Renderer {...data.content} />\n\n<!--\n\tEquivalent to:\n\n\t<p><Button class=\"btn\" href=\"https://svelte.dev/\">Svelte</Button> rocks</p>\n-->\n```\n\n### Named slots\n\nWhat if your component has named slots? Unfortunately it is currently not possible to render named slots dynamically with svelte.\\\nFortunately, we can work around the problem with a wrapper component and the `Renderer` component.\n\n<details>\n<summary>Other files</summary>\n\n_Button.svelte_\n\n```svelte\n<script>\n\t/** @type {string | undefined} */\n\texport let href = undefined;\n\n\t/** @type {'button' | 'submit' | 'reset'}*/\n\texport let type = 'button';\n</script>\n\n{#if href}\n\t<a {...$$restProps} {href}><slot /></a>\n{:else}\n\t<button {...$$restProps} {type}><slot /></button>\n{/if}\n```\n\n_Card.svelte_\n\n```svelte\n<div class=\"card\">\n\t{#if $$slots.title}\n\t\t<div class=\"title\"><slot name=\"title\" /></div>\n\t{/if}\n\n\t<div class=\"content\"><slot /></div>\n\n\t{#if $$slots.actions}\n\t\t<div class=\"actions\"><slot name=\"actions\" /></div>\n\t{/if}\n</div>\n```\n\n</details>\n\n_CardWrapper.svelte_\\\nThis is our wrapper component.\n\n```svelte\n<script>\n\timport { Renderer } from 'html-svelte-parser';\n\timport Card from './Card.svelte';\n\n\t/** @type {import('html-svelte-parser').RendererProps} */\n\texport let title;\n\n\t/** @type {import('html-svelte-parser').RendererProps} */\n\texport let content;\n\n\t/** @type {import('html-svelte-parser').RendererProps} */\n\texport let actions;\n</script>\n\n<Card>\n\t<Renderer slot=\"title\" {...title} />\n\t<Renderer {...content} />\n\t<Renderer slot=\"actions\" {...actions} />\n</Card>\n```\n\n_App.svelte_\n\n```svelte\n<script>\n\timport { Html, isTag } from 'html-svelte-parser';\n\timport Button from './Button.svelte';\n\timport CardWrapper from './CardWrapper.svelte';\n\n\tconst html = `\n\t\t<div class=\"card\">\n\t\t\t<h1 class=\"card--title\">My Card</h1>\n\n\t\t\t<div class=\"card--content\">\n\t\t\t\t<p>This gets replaced with a nice Card component</p>\n\t\t\t\t<p><a href=\"https://svelte.dev/\">Svelte</a> is cool.</p>\n\t\t\t</div>\n\n\t\t\t<div class=\"card--actions\">\n\t\t\t\t<a class=\"btn\" href=\"/whatever\">Call to action</a>\n\t\t\t</div>\n\t\t</div>\n\t`;\n\n\t// lets define some helpers\n\n\tconst hasClass = (\n\t\t/** @type {import('domhandler').Element} */ node,\n\t\t/** @type {string} */ className,\n\t) => node.attribs.class?.split(/\\s/).includes(className);\n\n\tconst findChildWithClass = (\n\t\t/** @type {import('domhandler').ParentNode} */ node,\n\t\t/** @type {string} */ className,\n\t) =>\n\t\t/** @type {import('domhandler').Element | undefined} */ (\n\t\t\tnode.children.find(child => isTag(child) && hasClass(child, className))\n\t\t);\n\n\t/** @type {import('html-svelte-parser').ProcessNode} */\n\tconst processNode = node => {\n\t\tif (!isTag(node)) return;\n\n\t\t// add attributes to external links\n\t\tif (node.name === 'a' && !node.attribs.href?.startsWith('/')) {\n\t\t\tnode.attribs.target = '_blank';\n\t\t\tnode.attribs.rel = 'noreferrer nofollow';\n\t\t}\n\n\t\tif (hasClass(node, 'card')) {\n\t\t\treturn {\n\t\t\t\tcomponent: CardWrapper,\n\n\t\t\t\t// don't process child nodes / no \"default\" slot for `CardWrapper`\n\t\t\t\tnoChildren: true,\n\n\t\t\t\t// transform specific child nodes into props that get passed to\n\t\t\t\t// `CardWrapper` and can be rendered in a named slot with `Renderer`\n\t\t\t\trendererProps: {\n\t\t\t\t\t// even if `findChildWithClass` returns undefined, `CardWrapper`\n\t\t\t\t\t// still gets a `title` prop\n\t\t\t\t\ttitle: findChildWithClass(node, 'card--title'),\n\n\t\t\t\t\t// for `content` and `actions`, we want only the children of the\n\t\t\t\t\t// selected element to be rendered\n\t\t\t\t\tcontent: findChildWithClass(node, 'card--content')?.children,\n\t\t\t\t\tactions: findChildWithClass(node, 'card--actions')?.children,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tif (hasClass(node, 'btn')) {\n\t\t\treturn { component: Button, props: node.attribs };\n\t\t}\n\t};\n</script>\n\n<Html {html} {processNode} />\n\n<!--\n\tEquivalent to\n\n\t<Card>\n\t\t<svelte:fragment slot=\"title\">\n\t\t\t<h1 class=\"card--title\">My Card</h1>\n\t\t</svelte:fragment>\n\n\t\t<p>This gets replaced with a nice Card component</p>\n\t\t<p><a href=\"https://svelte.dev/\" target=\"_blank\" rel=\"noreferrer nofollow\">Svelte</a> is cool.</p>\n\n\t\t<svelte:fragment slot=\"actions\">\n\t\t\t<Button class=\"btn\" href=\"/whatever\">Call to action</Button>\n\t\t</svelte:fragment>\n\t</Card>\n-->\n```\n\n## TODO\n\n- API docs\n- cleanup tests & more tests\n- GH page\n\n## Credits\n\n- [html-dom-parser](https://github.com/remarkablemark/html-dom-parser)\n- [htmlparser2](https://github.com/fb55/htmlparser2)\n- [domhandler](https://github.com/fb55/domhandler)\n- [dom-serializer](https://github.com/cheeriojs/dom-serializer)\n\nInspired by [html-react-parser](https://github.com/remarkablemark/html-react-parser) and [html-to-react](https://github.com/aknuds1/html-to-react).\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 68],
		[3596, 308],
		[3603, 186],
		[3610, 192],
		[3617, 155],
		[3624, 102],
		[3631, 208],
		[3638, 98],
		[3645, 128],
		[3652, 177],
		[3659, 129],
		[3666, 39],
		[3673, 93],
		[3680, 82],
		[3687, 49],
		[3694, 208],
		[3701, 65],
		[3708, 223],
		[3715, 164],
		[3722, 153],
		[3729, 215],
		[3736, 175],
		[3743, 284],
		[3750, 71],
		[3757, 88],
		[3764, 81],
		[3771, 45],
		[3778, 121],
		[3785, 154],
		[3792, 286],
		[3799, 177],
		[3806, 117],
		[3813, 227],
		[3820, 200],
		[3827, 135],
		[3834, 170],
		[3841, 115],
		[3848, 114],
		[3855, 142],
		[3862, 86],
		[3869, 170],
		[3876, 130],
		[3883, 124],
		[3890, 142],
		[3897, 202],
		[3904, 110],
		[3911, 198],
		[3918, 150],
		[3925, 147],
		[3932, 147],
		[3939, 169],
		[3946, 141],
		[3953, 67],
		[3960, 112],
		[3967, 55],
		[3974, 50],
		[3981, 118],
		[3988, 240],
		[3995, 239],
		[4002, 292],
		[4009, 146],
		[4016, 100],
		[4023, 80],
		[4030, 85],
		[4037, 195],
		[4044, 57],
		[4051, 113],
		[4058, 181],
		[4065, 85],
		[4072, 106],
		[4079, 55],
		[4086, 147],
		[4093, 217],
		[4100, 146],
		[4107, 142],
		[4114, 159],
		[4121, 94],
		[4128, 153]
	]
}
