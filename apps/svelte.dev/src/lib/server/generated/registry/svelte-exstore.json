{
	"name": "svelte-exstore",
	"description": "Connects Redux Devtools to monitor Svelte state, supports primitive values.",
	"repo_url": "https://github.com/noney1412/svelte-exstore",
	"authors": ["nonpanpila"],
	"homepage": "https://github.com/noney1412/svelte-exstore",
	"downloads": 16,
	"updated": "2022-10-05T07:51:09.913Z",
	"tags": ["miscellaneous"],
	"github_stars": 0,
	"typescript": true,
	"version": "2.1.5",
	"svelte_range": "^3.50.1",
	"kit_range": "next",
	"last_rune_check_version": "2.1.5",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-exstore",
				"version": "2.1.5",
				"size": 27633
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "[![Node.js CI](https://github.com/noney1412/svelte-exstore/actions/workflows/node.js.yml/badge.svg)](https://github.com/noney1412/svelte-exstore/actions/workflows/node.js.yml)\r\n\r\n\r\n# Svelte ExStore \r\nThis package basically acts as a wrapper for writable stores.\r\n\r\n### Features\r\n1. Connects Redux Devtools to monitor your state. multiple stores in the same `+page` is also supported.\r\n2. An action uses `this` keyword to manage your state.\r\n3. Supports [primitive value](#primitive-value), if you assign primitive value using `$init`  eg. `$init: 0`, then `get(store)` return `0`.\r\n4. When the state is reference type by default, you can simply access it by `this` keyword. read [reference type](#reference-value), for more details...\r\n\r\n### Contents\r\n1. [Installation](#installation)\r\n2. [Basic Example](#basic-example)\r\n3. [State Management](#state-management)\r\n4. [For Vitest support](#for-vitest-support)\r\n\r\n### Installation\r\n```tsx\r\nnpm install svelte-exstore\r\n```\r\n\r\n```tsx\r\nyarn add svelte-exstore\r\n```\r\n\r\n```tsx\r\npnpm add svelte-exstore\r\n```\r\n\r\n## Basic Example\r\n### 1. Create a store\r\n`src/lib/store/count.ts`\r\n```typescript\r\nimport { ex } from \"svelte-exstore\";\r\n  \r\ninterface Count {\r\n  $init: number;\r\n  increase(): void;\r\n  decrease(): void;\r\n  increaseBy(by: number): void;\r\n  reset(): void;\r\n}\r\n\r\nexport const count = ex<Count>({\r\n  $name: 'count', // store name displayed in devtools, must be unique.\r\n  $init: 0,\r\n  increase() {\r\n    this.$init += 1; // retrieve your current state with `this` keyword.\r\n  },\r\n  increaseBy(by) {\r\n    this.$init += by;\r\n  },\r\n  decrease() {\r\n    this.$init -= 1;\r\n  },\r\n  reset() {\r\n    this.$init = 0;\r\n  }\r\n});\r\n```\r\n### 2. Bind the store to your component.\r\n`src/routes/+page.svelte`\r\n```svelte\r\n<script lang=\"ts\">\r\n  import { count } from '$lib/store/count';\r\n</script>\r\n\r\n\r\n<h1>{$count}</h1>\r\n<!--  $count is an alias for count.$init  -->\r\n\r\n<button on:click={() => count.increase()}>+</button>\r\n\r\n<button on:click={() => count.increaseBy(5)}>increase by 5</button>\r\n\r\n<button on:click={() => count.reset()}>reset</button>\r\n```\r\n### 3. Monitor your state with Redux Devtools.\r\n\r\n<p align=\"center\">\r\n  <img src=\"/docs/screenshots/Screenshot_2.png\"  title=\"hover text\">\r\n</p>\r\n\r\n<p align=\"center\">\r\n  <img src=\"/docs/screenshots/Screenshot_3.png\"  title=\"hover text\">\r\n</p>\r\n\r\n## State Management\r\n### Primitive Value\r\n#### with `$init` -- `get(store)` will return `$init`\r\n`count.ts`\r\n```typescript\r\ninterface Count {\r\n  $init: number;\r\n  increase: () => void;\r\n}\r\n\r\nconst count = ex<Count>({\r\n  $name: 'count-test-store',\r\n  $init: 0,\r\n  increase() {\r\n    this.$init += 1;\r\n  }\r\n});\r\n```\r\n`Count.svelte`\r\n```svelte\r\n<h1>{$count}</h1>\r\n<!--  $count is an alias for count.$init  -->\r\n```\r\n#### if the state is `primitive type`, the action can also return the value like this.\r\n`count.ts`\r\n```typescript\r\ninterface Count {\r\n  $init: number;\r\n  increase: () => void;\r\n}\r\n\r\nconst count = ex<Count>({\r\n  $name: 'count-test-store',\r\n  $init: 0,\r\n  increase() {\r\n    return this.$init + 1; // support only primitive type.\r\n  }\r\n});\r\n```\r\n### Reference Value\r\n#### When the state is reference type by default, you can simply access it by `this` keyword.\r\n`profile.ts`\r\n```ts\r\ninterface Profile {\r\n  name: string;\r\n  age: number;\r\n  description?: string;\r\n  increaseAgeBy: (value:number) => void;\r\n}\r\n\r\nconst profile = ex<Profile>({\r\n  $name: 'profile-test-store',\r\n  name: '',\r\n  age: 20,\r\n  increaseAgeBy(value){\r\n    this.age += value;\r\n  }\r\n})\r\n```\r\n`Profile.svelte`\r\n```svelte\r\n<h1>{$profile.name}</h1>\r\n<h2>{$profile.age}</h2>\r\n<h2>{$profile.description ?? ''}</h2>\r\n```\r\n### the default function `store.subscribe()`, `store.set()` and `store.update()` are also available.\r\n```ts\r\nprofile.update((state) => {\r\n  state = { name: 'Jack', age: 30 };\r\n  return state;\r\n});\r\n\r\nprofile.set({});\r\n```\r\n`Profile.svelte`\r\n```svelte\r\n<button on:click={() => { profile.set({}); }}> Reset Name </button>\r\n```\r\n#### the `store.subscribe()` now provide readonly state by default to prevent unpredictable state change.\r\n```typescript\r\nprofile.subscribe((value) => {\r\n  console.log('stage 9: readonly reference', value);\r\n\r\n  // if uncomment this, it should throw an error. because the state is readonly.\r\n  // value.name = 'Jane';\r\n});\r\n```\r\n\r\n\r\n## For Vitest support\r\n#### add this to `setupTests.ts`\r\n```ts\r\nvi.mock('$app/stores', async () => {\r\n\tconst { readable, writable } = await import('svelte/store');\r\n\t/**\r\n\t * @type {import('$app/stores').getStores}\r\n\t */\r\n\tconst getStores = () => ({\r\n\t\tnavigating: readable(null),\r\n\t\tpage: readable({ url: new URL('http://localhost'), params: {} }),\r\n\t\tsession: writable(null),\r\n\t\tupdated: readable(false)\r\n\t});\r\n\t/** @type {typeof import('$app/stores').page} */\r\n\tconst page = {\r\n\t\tsubscribe(fn: () => void) {\r\n\t\t\treturn getStores().page.subscribe(fn);\r\n\t\t}\r\n\t};\r\n\t/** @type {typeof import('$app/stores').navigating} */\r\n\tconst navigating = {\r\n\t\tsubscribe(fn: () => void) {\r\n\t\t\treturn getStores().navigating.subscribe(fn);\r\n\t\t}\r\n\t};\r\n\t/** @type {typeof import('$app/stores').session} */\r\n\tconst session = {\r\n\t\tsubscribe(fn: () => void) {\r\n\t\t\treturn getStores().session.subscribe(fn);\r\n\t\t}\r\n\t};\r\n\t/** @type {typeof import('$app/stores').updated} */\r\n\tconst updated = {\r\n\t\tsubscribe(fn: () => void) {\r\n\t\t\treturn getStores().updated.subscribe(fn);\r\n\t\t}\r\n\t};\r\n\treturn {\r\n\t\tgetStores,\r\n\t\tnavigating,\r\n\t\tpage,\r\n\t\tsession,\r\n\t\tupdated\r\n\t};\r\n});\r\n\r\nvi.mock('$app/environment', async () => {\r\n\t/** @type {typeof import('$app/environment').browser} */\r\n\tconst browser = true;\r\n\t/** @type {typeof import('$app/environment').dev} */\r\n\tconst dev = true;\r\n\t/** @type {typeof import('$app/environment').prerendering} */\r\n\tconst prerendering = false;\r\n\r\n\treturn {\r\n\t\tbrowser,\r\n\t\tdev,\r\n\t\tprerendering\r\n\t};\r\n});\r\n```\r\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 29],
		[3603, 42],
		[3610, 42],
		[3617, 3],
		[3624, 6],
		[3631, 1],
		[3638, 17],
		[3645, 56],
		[3652, 10],
		[3659, 4],
		[3666, 53],
		[3673, 5],
		[3680, 4],
		[3687, 8],
		[3694, 3],
		[3701, 2],
		[3708, 1],
		[3715, 2],
		[3722, 2],
		[3729, 2],
		[3736, 6],
		[3743, 2],
		[3750, 1],
		[3757, 2],
		[3764, 1],
		[3771, 41],
		[3778, 4],
		[3785, 1],
		[3792, 3],
		[3799, 4],
		[3806, 15],
		[3813, 1],
		[3820, 2],
		[3827, 1],
		[3834, 3],
		[3841, 204],
		[3848, 8],
		[3855, 27],
		[3862, 8],
		[3869, 3],
		[3876, 3],
		[3883, 3],
		[3890, 43],
		[3897, 43],
		[3904, 2],
		[3911, 3],
		[3918, 5],
		[3925, 2],
		[3932, 4],
		[3939, 5],
		[3946, 5],
		[3953, 4],
		[3960, 4],
		[3967, 5],
		[3974, 2],
		[3981, 5],
		[3988, 6],
		[3995, 17],
		[4002, 12],
		[4009, 10],
		[4016, 9],
		[4023, 53],
		[4030, 57],
		[4037, 14],
		[4044, 35],
		[4051, 10],
		[4058, 7],
		[4065, 6],
		[4072, 1],
		[4079, 2],
		[4086, 1],
		[4093, 1],
		[4100, 122],
		[4107, 5],
		[4114, 16],
		[4121, 41],
		[4128, 13]
	],
	"esm": true,
	"cjs": false
}
