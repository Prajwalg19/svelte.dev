{
	"name": "@bolduh/svelte-nested-accordion",
	"description": "Display nested tree data structures in Svelte accordions.",
	"repo_url": "https://github.com/b3b00/svelte-nested-accordion",
	"authors": ["bolduh"],
	"homepage": "https://github.com/b3b00/svelte-nested-accordion",
	"downloads": 9,
	"updated": "2024-10-17T12:19:00.156Z",
	"tags": ["ui"],
	"github_stars": 0,
	"typescript": true,
	"version": "0.2.1",
	"svelte_range": "^4.2.10",
	"last_rune_check_version": "0.2.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@bolduh/svelte-nested-accordion",
				"version": "0.2.1",
				"size": 38318
			},
			{
				"name": "@fortawesome/free-solid-svg-icons",
				"version": "6.7.2",
				"size": 5170494
			},
			{
				"name": "@fortawesome/fontawesome-common-types",
				"version": "6.7.2",
				"size": 105292
			},
			{
				"name": "sirv-cli",
				"version": "2.0.2",
				"size": 18393
			},
			{
				"name": "sade",
				"version": "1.8.1",
				"size": 31545
			},
			{
				"name": "mri",
				"version": "1.2.0",
				"size": 13261
			},
			{
				"name": "sirv",
				"version": "2.0.4",
				"size": 20745
			},
			{
				"name": "mrmime",
				"version": "2.0.1",
				"size": 33008
			},
			{
				"name": "totalist",
				"version": "3.0.1",
				"size": 7459
			},
			{
				"name": "@polka/url",
				"version": "1.0.0-next.29",
				"size": 4815
			},
			{
				"name": "kleur",
				"version": "4.1.5",
				"size": 20250
			},
			{
				"name": "semiver",
				"version": "1.1.0",
				"size": 5444
			},
			{
				"name": "get-port",
				"version": "3.2.0"
			},
			{
				"name": "tinydate",
				"version": "1.3.0",
				"size": 7410
			},
			{
				"name": "local-access",
				"version": "1.1.0",
				"size": 4960
			},
			{
				"name": "console-clear",
				"version": "1.1.1",
				"size": 2457
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[0, 3],
			[3, 4],
			[4, 5],
			[3, 6],
			[6, 7],
			[6, 8],
			[6, 9],
			[3, 10],
			[3, 11],
			[3, 12],
			[3, 13],
			[3, 14],
			[3, 15]
		],
		"circular": []
	},
	"legacy_svelte": true,
	"readme": "\r\n\r\n# This is not relevant !\r\n\r\nwait for a real release and readme\r\n\r\n\r\n## demo\r\n\r\n[svelte-nested-accordion](https://svelte-nested-accordion.pages.dev/)\r\n\r\n\r\n## installation\r\n\r\n`npm i @bolduh/svelte-Accordion`\r\n\r\n## usage\r\n\r\n```js\r\n<Accordion emptyTreeMessage=\"nothing to show\" selectable root={root} childrenAccessor={accessor} nodeTemplate={Node} filter={nodefilter} ></Accordion>\r\n```\r\n\r\nThe Accordion display a tree data structure that must inherit from TVNode\r\n```ts\r\nexport interface TVNode {\r\n    children : TVNode[]; // list of children (may be undefined if no children)\r\n    id:any; // unique identifier\r\n}\r\n```\r\n\r\nWe will assume that `NodeType` is the node type of our Accordion for now on.\r\n\r\n### Accordion attributes:\r\n\r\n- root (`NodeType`): the full tree datastructure\r\n- emptyTreeMessage (`string`) : message to display when filter do not return any node\r\n- selectable (`boolean`, default is false) : if set add checkbox in front of every node/leaf\r\n- nodeTemplate : a svelte component used to render nodes and leafs. it must accept an attribute `data` of the node type (`NodeType`)\r\n- filter (`(node:NodeType, filter:string ) => boolean `): a function used to filter nodes on a simple text input. if not set no search widget is displayed. returns true if the `node` matches the `filter`.  \r\n- for custom filters. The Accordion can accept custom filters. A filter must be mapped to a typescript interface, there is no constraint on the type. for now on this class will be `customFilter` \r\n  - complexFilter(`(node:NodeType, filter:CustomFilter) => boolean`). A function that returns true if the `node` matches the `filter`\r\n  - filterTemplate : a svelte component displaying the custom filter. It must throw a `filterChanged` event whenever the filter change. the event payload must be an object of type `CustomFilter`\r\n\r\n\r\n### Accordion events: \r\n\r\nThe Accordion could raise a `selectionChanged` event whenever a node is selected / deselected (when node selection is enabled with `selectable` attribute). The event payload contains a list of `NodeType` : `NodeType[]`\r\n\r\n\r\n```typescript\r\n\r\nconst onSelectionChanged = (e:CustomEvent<Disney[]>) => {\t\t\t\t\r\n\t\tselectedNodes = e.detail;\r\n\t}\r\n\r\n<Accordion  emptyTreeMessage=\"no data\" on:selectionChanged={onSelectionChanged} selectable {root} nodeTemplate={Node2} {filter} ></Accordion>\r\n\r\n```\r\n\r\n## styling an Accordion\r\n\r\nStyling accordion node may be done using : \r\n   - the `nodeClass` attribute that set a CSS class for accordion nodes.\r\n   - the `style` slot that embed the CSS class.\r\n\r\n```js\r\n<Accordion emptyTreeMessage=\"Mikey Mouse\" ref=\"style2\" {root} nodeTemplate={Node2} {filter} disposition=\"left\" nodeClass=\"reddy\">\r\n  <style slot=\"style\">\r\n    .reddy {\r\n      border-bottom: thin solid red;\r\n      border-left:thin dotted red;\t\t\r\n      border-right:thin dashed red;\r\n      border-top:solid 5px red;\r\n      padding:10px;\r\n      border-radius:8px;\r\n    }\r\n    .reddy:hover{\r\n      background-color:lightgreen;\r\n    }\r\n  </style>\r\n</Accordion>\r\n```",
	"downloads_history": [
		[3694, 331],
		[3701, 35],
		[3708, 11],
		[3715, 2],
		[3722, 159],
		[3729, 86],
		[3736, 125],
		[3743, 20],
		[3750, 10],
		[3757, 21],
		[3764, 1],
		[3771, 27],
		[3778, 5],
		[3785, 4],
		[3792, 1],
		[3799, 1],
		[3806, 3],
		[3813, 2],
		[3820, 1],
		[3827, 14],
		[3834, 62],
		[3848, 1],
		[3855, 3],
		[3862, 23],
		[3869, 6],
		[3876, 2],
		[3883, 1],
		[3890, 1],
		[3904, 12],
		[3911, 1],
		[3932, 7],
		[3939, 81],
		[3946, 18],
		[3953, 1],
		[3960, 2],
		[3967, 2],
		[3974, 5],
		[3988, 3],
		[3995, 12],
		[4009, 12],
		[4016, 4],
		[4023, 2],
		[4030, 1],
		[4037, 10],
		[4044, 12],
		[4051, 7],
		[4058, 1],
		[4065, 1],
		[4072, 2],
		[4086, 37],
		[4100, 19],
		[4107, 34],
		[4114, 9],
		[4121, 17],
		[4128, 2]
	]
}
