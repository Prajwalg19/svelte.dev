{
	"name": "sveltick",
	"description": "Lightweight performance and traffic tracking library for Svelte.",
	"repo_url": "https://github.com/Adam014/sveltick",
	"authors": ["kindast"],
	"homepage": "https://github.com/Adam014/sveltick#readme",
	"downloads": 20,
	"updated": "2024-10-18T01:19:12.584Z",
	"tags": ["miscellaneous"],
	"github_stars": 40,
	"typescript": false,
	"version": "1.7.1",
	"svelte_range": "^3.38.2",
	"last_rune_check_version": "1.7.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "sveltick",
				"version": "1.7.1",
				"size": 96270
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# ⚡️ Sveltick\n\nWelcome to **Sveltick**! This is a super lightweight 🦋 and fun **performance**&**traffic**-tracking library for your Svelte apps.\n\n✅ **v5 Svelte support**\n\n## 📦 Latest Version 1.7.1\n\n- Adding tracking of Web traffic - 👁️ pageViews, 🧑‍🤝‍🧑 uniqueUsers, 🛣️ visitedRoutes and 🔗 trafficSources\n- Also possible to get each of them only\n- For the best experience we need to use `onMount` but also `afterUpdate` and use this code in our `src/+layout.svelte` for tracking traffic.\n- Fixing documentation\n\n## 📥 Installation\n\nInstall **Sveltick** via npm:\n\n```bash\nnpm install sveltick\n```\n\nInstall **Sveltick** via yarn:\n\n```bash\nyarn add sveltick\n```\n\n---\n\n## 🔥 Quick Start\n\nImport **Sveltick** into your Svelte app and start tracking your app's performance!\n\n### 📈 Track **everything** you need and configure what metrics you want to see\n\n```svelte\n  import { onMount } from 'svelte';\n  import { runPerformanceTracker } from 'sveltick';\n\n  onMount(() => {\n    // Run the performance tracker with custom options\n    runPerformanceTracker({\n      trackMetrics: true,     // Track all metrics\n      showAlerts: true,       // Enable alerts\n      enableGamification: true, // Enable gamification\n      thresholds:  {\n        fcp: 1800,  // Custom threshold for FCP\n        lcp: 2300,  // Custom threshold for LCP\n        tti: 2800,  // Custom threshold for TTI\n        cls: 0.15,  // Custom threshold for CLS\n        fid: 100, // Custom threshold for FID\n        inp: 200, // Custom threshold for INP\n        ttfb: 800, // Custom threshold for TTFB\n        componentRenderTime: 400 // Custom threshold for component render time\n      }\n    });\n  });\n```\n\n📌 Note:\nThe `thresholds` object is optional, and each metric has a default value. If you don't provide a custom threshold for a particular metric, the following default values will be used:\n\n- First Contentful Paint (FCP): 2000ms\n- Largest Contentful Paint (LCP): 2500ms\n- Time to Interactive (TTI): 3000ms\n- Cumulative Layout Shift (CLS): 0.1\n- First Input Delay (FID): 100ms _(User must interact with the page to track this metric)_\n- Interaction to Next Paint (INP): 200ms _(User must interact with the page to track this metric)_\n- Time to First Byte (TTFB): 800ms\n- Component Render Time: 500ms\n\n### Tracking ⚡️ `First Contentful Paint`, 🕒`Time to Interactive`, 📏`Largest Contentful Paint` & 📊 `Cumulative Layout Shift`, 🖱️ `First Input Delay`, 🖌️ `Interaction to Next Paint`, 📡 `Time to First Byte`\n\n```svelte\n<script>\n  import { onMount } from 'svelte';\n  import { trackFirstContentfulPaint, trackTimeToInteractive, trackLargestContentfulPaint, trackCumulativeLayoutShift, trackFirstInputDelay, trackInteractionToNextPaint, trackTimeToFirstByte } from 'sveltick';\n\n  onMount(async () => {\n    const ftp = await trackFirstContentfulPaint()\n    const tti = await trackTimeToInteractive()\n    const lcp = await trackLargestContentfulPaint();\n    const cls = await trackCumulativeLayoutShift();\n    const fid = await trackFirstInputDelay();\n    const inp = await trackInteractionToNextPaint();\n    const ttfb = await trackTimeToFirstByte();\n\n    console.log(ftp, tti, lcp, cls, fid, inp, ttfb)\n  });\n\n</script>\n```\n\n### 🔧 Tracking `Component` Render Times\n\n```svelte\n  import { onMount } from 'svelte';\n  import { trackComponentRender } from 'sveltick';\n\n\tonMount(() => {\n\t\tconst now = performance.now();  // Measure render time\n\t\tconst { name, renderTime } = trackComponentRender('YourComponent', now);  // Get the name and render time\n\t\tconsole.log(name, renderTime);\n\t});\n```\n\n### 🛠 Performance Report\n\nYou can access all performance metrics (including components one) at any point using:\n\n```svelte\n  import { onMount } from 'svelte';\n  import { trackComponentRender, getPerformanceMetrics } from 'sveltick';\n\n  onMount(async () => {\n    const now = performance.now();  // Measure render time\n    trackComponentRender('YourComponent', now);  // Get the name and render time\n    const metrics = await getPerformanceMetrics();\n    console.log(metrics)\n  });\n```\n\n### ⚠️ Checking for all performance with custom threshold alerts\n\n```svelte\n  import { onMount } from 'svelte';\n  import { getPerformanceMetrics, checkPerformanceAlerts } from 'sveltick';\n\n  onMount(async () => {\n    const metrics = await getPerformanceMetrics();\n    console.log('Updated Performance Metrics:', metrics);\n\n    // Check for any performance alerts with custom thresholds\n    checkPerformanceAlerts({\n      fcp: 1800,  // Custom threshold for FCP\n      lcp: 2300,  // Custom threshold for LCP\n      tti: 2800,  // Custom threshold for TTI\n      cls: 0.15,  // Custom threshold for CLS\n      fid: 100, // Custom threshold for FID\n      inp: 200, // Custom threshold for INP\n      ttfb: 800, // Custom threshold for TTFB\n      componentRenderTime: 400 // Custom threshold for component render time\n    });\n  });\n```\n\n### 🎯 Checking the score of your web based by the performance\n\n```svelte\n  import { onMount } from 'svelte';\n  import { runGamification } from 'sveltick';\n\n  onMount(() => {\n    // Run the gamification logic\n    runGamification();\n  });\n```\n\n### Checking all traffic metrics\n\nFor the best experience we need to use `onMount` but also `afterUpdate` and use this code in our `src/+layout.svelte`.\n\n```svelte\n  import { onMount, afterUpdate } from 'svelte';\n  import { trackAllActivities } from 'sveltick';\n\n\t// Track all activities on component mount and update\n\tlet trackedData = {};\n\n\t// This function will track and log activities when the component is mounted\n\tonMount(() => {\n\t\ttrackedData = trackAllActivities();\n\t\tconsole.log('Tracked Data on Mount:', trackedData);\n\t});\n\n\t// This function will track and log activities every time the component is updated\n\tafterUpdate(() => {\n\t\ttrackedData = trackAllActivities();\n\t\tconsole.log('Tracked Data after Update:', trackedData);\n\t});\n```\n\n### Track Page Views\n\n```svelte\n  import { onMount, afterUpdate } from 'svelte';\n  import { trackAllActivities, getPageViews } from 'sveltick';\n\n\tlet pageViews = 0;\n  let trackedData = {};\n\n\t// This function will track and log activities when the component is mounted\n\tonMount(() => {\n\t\ttrackedData = trackAllActivities();\n\t\tpageViews = getPageViews();\n\t\tconsole.log(pageViews)\n\t});\n\n\t// This function will track and log activities every time the component is updated\n\tafterUpdate(() => {\n\t\ttrackedData = trackAllActivities();\n\t\tpageViews = getPageViews();\n\t\tconsole.log(pageViews)\n\t});\n```\n\n### Track Unique Users\n\n```svelte\n  import { onMount, afterUpdate } from 'svelte';\n  import { trackAllActivities, getUniqueVisitors } from 'sveltick';\n\n\tlet uniqueVisitors = 0;\n  let trackedData = {};\n\n\t// This function will track and log activities when the component is mounted\n\tonMount(() => {\n\t\ttrackedData = trackAllActivities();\n\t\tuniqueVisitors = getUniqueVisitors();\n\t\tconsole.log(uniqueVisitors)\n\t});\n\n\t// This function will track and log activities every time the component is updated\n\tafterUpdate(() => {\n\t\ttrackedData = trackAllActivities();\n\t\tuniqueVisitors = getUniqueVisitors();\n\t\tconsole.log(uniqueVisitors)\n\t});\n```\n\n### Track Route Visited\n\n```svelte\n  import { onMount, afterUpdate } from 'svelte';\n  import { trackAllActivities, getRouteViews } from 'sveltick';\n\n  let routeViews = [];\n  let trackedData = {};\n\n\t// This function will track and log activities when the component is mounted\n\tonMount(() => {\n\t\ttrackedData = trackAllActivities();\n\t\trouteViews = getRouteViews();\n\t\tconsole.log(routeViews)\n\t});\n\n\t// This function will track and log activities every time the component is updated\n\tafterUpdate(() => {\n\t\ttrackedData = trackAllActivities();\n\t\trouteViews = getRouteViews();\n\t\tconsole.log(routeViews)\n\t});\n```\n\n### Track Traffic Sources\n\n- We have for now 4 sources from user comes and we differ it out - `Direct`, `Facebook`, `Google` and `Others`\n\n```svelte\n  import { onMount, afterUpdate } from 'svelte';\n  import { trackAllActivities, getTrafficSources} from 'sveltick';\n\n  let trafficSources = {};\n  let trackedData = {};\n\n\t// This function will track and log activities when the component is mounted\n\tonMount(() => {\n\t\ttrackedData = trackAllActivities();\n\t\ttrafficSources = getTrafficSources();\n\t\tconsole.log(trafficSources)\n\t});\n\n\t// This function will track and log activities every time the component is updated\n\tafterUpdate(() => {\n\t\ttrackedData = trackAllActivities();\n    trafficSources = getTrafficSources();\n\t\tconsole.log(trafficSources)\n\t});\n```\n\n---\n\n## 📊 Metrics to check:\n\n### Performance\n\n- **First Contentful Paint** ⚡️\n- **Time to Interactive** 🕒\n- **Component Render Time** 🔧\n- **Largest Contentful Paint** 📏\n- **Cumulative Layout Shift** 📊\n- **First Input Delay** 🖱️ _(Click-based)_\n- **Interaction to Next Paint** 🖌️ _(Click-based)_\n- **Time to First Byte** 📡\n\n### 🚦 Traffic\n\n- **Page Views** 👁️\n- **Unique Users** 🧑‍🤝‍🧑\n- **Visited Routes** 🛣️\n- **Traffic Sources** 🔗\n\n#### 🖱️ First Input Delay (FID) & 🖌️ Interaction to Next Paint (INP)\n\n📌 Note:\n\n- FID and INP metrics are triggered by user interactions like clicks. These metrics depend on actual user interaction events.\n- If no interaction occurs within 5 seconds, the FID and INP values will be set to null and won't impact the performance alerts or gamification score.\n\n## ⏳ Coming up in next releases:\n\n1. Any events in page as page views, clicks per view etc...\n2. Plugin system - users can integrate other performance functions from other providers like Web Vitals or Lighthouse\n3. Integration with analytics platforms, like Google Analytics, Sentry or DataDog - data can be send to these providers\n4. Dashboard perfomance-tracker (docs website + dashboard)\n5. Visual showcase of the metrics (graphs)(probably on the dashboard web dont know yet)\n\n## Output example screenshot:\n\n![Sveltick Example](https://storage.googleapis.com/sveltick_assets/screenshot_sveltick.png)\n\nFor now it is just this simple console info about the project (of course you could implement it into something bigger!). But in the **upcoming days I will create a dashboard performance-tracking webapp for this library**, where you could use `Sveltick` from anywhere around the globe! So stay tuned guys!\n\n## 📜 License\n\nMIT ©️ Adam Stadnik\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3932, 979],
		[3939, 1559],
		[3946, 325],
		[3953, 39],
		[3960, 8],
		[3967, 7],
		[3981, 5],
		[3988, 9],
		[3995, 11],
		[4002, 10],
		[4009, 88],
		[4016, 87],
		[4023, 105],
		[4030, 13],
		[4037, 27],
		[4044, 69],
		[4051, 56],
		[4058, 55],
		[4065, 79],
		[4072, 120],
		[4079, 9],
		[4086, 10],
		[4093, 12],
		[4100, 49],
		[4107, 91],
		[4114, 20],
		[4121, 44],
		[4128, 17],
		[4135, 16]
	],
	"esm": true,
	"cjs": true
}
