{
	"name": "svelte-final-form",
	"description": "Provides subscription-based form state management for Svelte.",
	"repo_url": "https://github.com/jetrockets/svelte-final-form",
	"authors": ["solilin"],
	"homepage": "https://github.com/jetrockets/svelte-final-form#readme",
	"downloads": 231,
	"updated": "2020-12-22T16:33:08.780Z",
	"tags": ["miscellaneous"],
	"github_stars": 43,
	"typescript": true,
	"version": "1.2.3",
	"svelte_range": "^3.29.7",
	"last_rune_check_version": "1.2.3",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-final-form",
				"version": "1.2.3",
				"size": 11149
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# üèÅ Svelte Final Form\n\nSvelte Final Form is a thin Svelte wrapper for [Final Form](https://final-form.org)\n\n‚úÖ Zero dependencies\n\n‚úÖ Only peer dependencies: Svelte and [üèÅ Final Form](https://github.com/final-form/final-form#-final-form)\n\n‚úÖ Opt-in subscriptions - only update on the state you need!\n\n---\n\nBefore we jump right into code, you might want to learn a little bit about the [philosophy](https://final-form.org/docs/react-final-form/philosophy) and origin story of Final Form.\n\n## Installation\n\n```bash\nnpm install --save final-form svelte-final-form\n```\n\nor\n\n```bash\nyarn add final-form svelte-final-form\n```\n\n### Architecture\n\nSvelte Final Form is a thin Svelte wrapper for Final Form, which is a subscriptions-based form state management library that uses the Observer pattern.\n\nBy default, Svelte Final Form subscribes to all changes, but if you want to fine tune your form to optimized blazing-fast perfection, you may specify only the form state that you care about for rendering your gorgeous UI. You can think of it a little like GraphQL's feature of only fetching the data your component needs to render, and nothing else.\n\n```html\n<script>\n  import { Form, Field } from \"svelte-final-form\";\n\n  // Just for example\n  import Select from \"svelte-select\";\n  // Your custom form group adapter\n  import FormGroup from \"components/FormGroup\";\n\n  const selectItems = [\"Green\", \"Red\", \"Black\"];\n\n  const initialValues = {\n    firstName: \"Alexey\",\n    lastName: \"Solilin\",\n    color: \"Red\",\n  };\n\n  const onSubmit = async (values) => {\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n    console.log(JSON.stringify(values, undefined, 2));\n  };\n\n  const validate = (values) => {\n    const errors = {};\n    if (!values.firstName) {\n      errors.firstName = \"Required\";\n    }\n    if (!values.lastName) {\n      errors.lastName = \"Required\";\n    }\n    return errors;\n  };\n</script>\n\n<Form {onSubmit} {validate} {initialValues} let:form let:state>\n  <form on:submit|preventDefault={form.submit}>\n    <Field name=\"firstName\" let:input let:meta>\n      <label for=\"firstName\">First Name</label>\n      <input\n        name={input.name}\n        on:blur={input.onBlur}\n        on:focus={input.onFocus}\n        on:input={(e) => input.onChange(e.target.value)}\n        type=\"text\"\n        placeholder=\"Last Name\"\n        value={input.value} />\n      {#if meta.touched && meta.error}\n        <div>{meta.error}</div>\n      {/if}\n    </Field>\n\n    <!-- You can prepare you Form Group Adapter with Label, Input, Errors -->\n    <Field name=\"lastName\" let:input let:meta>\n      <FormGroup label=\"Last Name\" type=\"text\" {...input} {...meta} />\n    </Field>\n\n    <!-- Example for svelte-select -->\n    <Field name=\"color\" let:input let:meta>\n      <Select\n        items={selectItems}\n        on:blur={input.onBlur}\n        on:focus={input.onFocus}\n        on:select={({ detail }) => input.onChange(detail.value)}\n        selectedValue={input.value}\n        name=\"color\"\n        />\n    </Field>\n\n    <button type=\"submit\" disabled={state.submitting}>Submit</button>\n    or\n    <button disabled={state.pristine} on:click={() => form.reset(initialValues)}>Reset</button>\n  </form>\n</Form>\n```\n\n### TODO\n\n- [ ] Write tests\n- [ ] Final Form Arrays\n- [ ] More docs and CodeSandbox examples for\n  - [ ] Conditional Fields\n  - [ ] Mutators\n  - [ ] Decorators\n  - [ ] Validation\n  - [ ] Custom Form Adapters\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 988],
		[3596, 2059],
		[3603, 2312],
		[3610, 2292],
		[3617, 2007],
		[3624, 2521],
		[3631, 1740],
		[3638, 1595],
		[3645, 305],
		[3652, 1369],
		[3659, 1793],
		[3666, 2384],
		[3673, 2221],
		[3680, 2224],
		[3687, 2185],
		[3694, 1944],
		[3701, 2157],
		[3708, 1593],
		[3715, 2834],
		[3722, 2054],
		[3729, 2292],
		[3736, 1784],
		[3743, 1186],
		[3750, 1361],
		[3757, 995],
		[3764, 1813],
		[3771, 1344],
		[3778, 917],
		[3785, 2588],
		[3792, 1570],
		[3799, 2518],
		[3806, 1227],
		[3813, 939],
		[3820, 1215],
		[3827, 1716],
		[3834, 1159],
		[3841, 1397],
		[3848, 1134],
		[3855, 1355],
		[3862, 1242],
		[3869, 1640],
		[3876, 540],
		[3883, 416],
		[3890, 359],
		[3897, 409],
		[3904, 389],
		[3911, 426],
		[3918, 352],
		[3925, 180],
		[3932, 220],
		[3939, 297],
		[3946, 383],
		[3953, 337],
		[3960, 299],
		[3967, 117],
		[3974, 258],
		[3981, 342],
		[3988, 217],
		[3995, 155],
		[4002, 209],
		[4009, 11],
		[4016, 62],
		[4023, 241],
		[4030, 224],
		[4037, 291],
		[4044, 243],
		[4051, 185],
		[4058, 203],
		[4065, 263],
		[4072, 203],
		[4079, 331],
		[4086, 206],
		[4093, 138],
		[4100, 198],
		[4107, 108],
		[4114, 231],
		[4121, 274],
		[4128, 211]
	]
}
