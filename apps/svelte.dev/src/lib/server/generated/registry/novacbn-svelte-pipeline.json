{
	"name": "@novacbn/svelte-pipeline",
	"description": "Provide custom Javascript contexts and Svelte compiler as stores.",
	"repo_url": "",
	"authors": ["novacbn"],
	"downloads": 7,
	"updated": "2022-03-07T09:33:56.866Z",
	"tags": ["tooling"],
	"typescript": true,
	"version": "0.3.1",
	"svelte_range": "^3.39.0",
	"kit_range": "^1.0.0-next.134",
	"last_rune_check_version": "0.3.1",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@novacbn/svelte-pipeline",
				"version": "0.3.1",
				"size": 42472
			},
			{
				"name": "svelte",
				"version": "3.59.2",
				"size": 10624206
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# svelte-pipeline\n\n## Description\n\nProvides custom Javascript contexts and the Svelte Compiler as Svelte Stores, for REPLs, Editors, etc.\n\n> **IMPORTANT**: As this package includes the Svelte Compiler as a dependency, it seriously balloons the size of the distributables and bundles.\n\n## Demo\n\nSee a demo of the REPL Components at [kahi-ui.nbn.dev/playground](https://kahi-ui.nbn.dev/playground).\n\n## Usage\n\n### Javascript\n\n```javascript\nimport {pipeline_javascript} from \"@novacbn/svelte-pipeline\";\n\nfunction add(a, b) {\n    return a + b;\n}\n\n// `svelte-pipeline` allows us to define custom globals for scripts to access\nconst CONTEXT = {\n    add: add,\n};\n\n// `svelte-pipeline` also allows us to define an import map so scripts can import via `require`\nconst IMPORTS = {\n    mymath: {\n        add: add,\n    },\n};\n\n// Here we can define the script source code we want to pass through the pipeline\nconst SCRIPT = `// First, we need to import our custom import\nconst mymath = require(\"mymath\");\n\n// Next, use the exposed context and export the sum\nexports.sum = add(1, 2);\n\n// Then, use the imported module to also export a sum\nexports.sum_import = mymath.add(2, 2);`;\n\n// Finally, we can use all the options we defined to create our pipeline as a Svelte Store\nconst store_javascript = pipeline_javascript({\n    // Pass in our custom globals\n    context: CONTEXT,\n\n    // And pass in our custom import map\n    imports: IMPORTS,\n});\n\n// Next we can listen for everytime our script is passed through the pipeline\nstore_javascript.subscribe((result) => {\n    if (result.type === PIPELINE_RESULT_TYPES.error) {\n        // If we get the result and it turns out to be an error, we always get\n        // back a descriptive error from the Javascript environment / Svelte Compiler\n        console.log(result.message);\n        return;\n    }\n\n    // Whenever the pipeline had a successful result, we can get the resulting module context\n    const {module} = result;\n\n    // And then of course, we can also access the exported members of the script\n    const {sum, sum_import} = module.exports;\n    console.log({sum, sum_import}); // prints `{sum: 3, sum_import: 4}`\n});\n\n// And finally, to pass our script into the pipeline. We just set the value like any other Svelte Store\nstore_javascript.set(SCRIPT);\n```\n\n### Svelte\n\n```javascript\nimport {pipeline_svelte} from \"@novacbn/svelte-pipeline\";\n\n// First we need to define the Svelte Component source code we want to pass through the pipeline\nconst COMPONENT = `<script>\n    export let count = 0;\n\n    function on_click(event) {\n        count += 1;\n    }\n</script>\n\n<h1>Count: {count}</h1>\n<button on:click={on_click}>Add +1</button>`;\n\n// Just like the Javascript sample, we can pass in all the sample configuration options\nconst store_svelte = pipeline_svelte({\n    compiler: {\n        // We can also use the `.compiler` member to pass options into the Svelte Compiler\n        // See `svelte.compile` options at: https://svelte.dev/docs#svelte_compile\n    },\n});\n\nstore_svelte.subscribe((result) => {\n    if (result.type === PIPELINE_RESULT_TYPES.error) {\n        console.log(result.message);\n        return;\n    }\n\n    // Unlike the Javascript pipeline however, successful Svelte pipeline results have the\n    // compiled Svelte Components export to `module.exports.default`\n    const {module} = result;\n    const Component = module.exports.default;\n\n    // Which we can use programatically like any other Svelte Component\n    const component = new Component({\n        target: document.body,\n        props: {\n            count: \"42\",\n        },\n    });\n\n    // If available, successful Svelte results also supply their compiled CSS Stylesheets\n    if (result.stylesheet) {\n        const stylesheet = document.createElement(\"style\");\n        stylesheet.innerText = result.stylesheet;\n\n        document.head.appendChild(stylesheet);\n    }\n});\n\n// And same as Javascript sample, we just set the Svelte Store\nstore_svelte.set(COMPONENT);\n```\n\n## Components\n\n...\n\n## Developer\n\n### Installation\n\nOpen your terminal and install via `npm`:\n\n```bash\nnpm install @novacbn/svelte-pipeline\n```\n\n### Main API\n\n> `import {...} from \"@novacbn/svelte-pipeline\";`\n\n-   Actions\n\n    -   `component`\n    -   `stylesheet`\n\n-   Stores\n\n    -   `pipeline_javascript`\n    -   `pipeline_svelte`\n\n-   Enumerations\n\n    -   `PIPELINE_RESULT_TYPES`\n\n-   Utilities\n\n    -   `evaluate_code`\n    -   `make_require`\n    -   `validate_code`\n    -   `validate_svelte`\n\n### Components API\n\n> `import {...} from \"@novacbn/svelte-pipeline/components\";`\n\n-   Components\n\n    -   `PipelineRenderComponent`\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 2],
		[3596, 6],
		[3610, 2],
		[3617, 10],
		[3624, 1],
		[3631, 3],
		[3638, 3],
		[3645, 8],
		[3652, 5],
		[3659, 1],
		[3666, 6],
		[3673, 6],
		[3687, 4],
		[3694, 1],
		[3701, 2],
		[3708, 5],
		[3715, 3],
		[3729, 2],
		[3736, 1],
		[3743, 3],
		[3750, 1],
		[3764, 2],
		[3771, 5],
		[3778, 6],
		[3792, 1],
		[3799, 3],
		[3806, 3],
		[3813, 1],
		[3820, 2],
		[3827, 2],
		[3834, 4],
		[3841, 3],
		[3855, 22],
		[3862, 5],
		[3869, 13],
		[3876, 1],
		[3883, 3],
		[3890, 6],
		[3897, 5],
		[3904, 7],
		[3911, 2],
		[3918, 2],
		[3925, 1],
		[3932, 4],
		[3939, 3],
		[3967, 1],
		[3995, 1],
		[4016, 1],
		[4023, 6],
		[4030, 4],
		[4037, 9],
		[4044, 8],
		[4051, 2],
		[4058, 1],
		[4072, 3],
		[4079, 1],
		[4093, 23],
		[4100, 3],
		[4114, 7],
		[4121, 8],
		[4128, 1]
	],
	"esm": true,
	"cjs": false
}
