{
	"name": "svelte-micro",
	"description": "Provides a light and reactive client-side router for Svelte.",
	"repo_url": "https://github.com/ayndqy/svelte-micro",
	"authors": ["ayndqy"],
	"homepage": "https://github.com/ayndqy/svelte-micro#readme",
	"downloads": 231,
	"updated": "2024-07-13T23:25:16.789Z",
	"tags": ["router"],
	"github_stars": 98,
	"typescript": true,
	"version": "2.5.7",
	"svelte_range": "^3.54.0 || ^4.0.0",
	"kit_range": "^2.5.0",
	"last_rune_check_version": "2.5.7",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-micro",
				"version": "2.5.7",
				"size": 27003
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Svelte Micro\n\nLight & reactive client-side router for Svelte\n\n[Announcement of svelte-micro v3](./Announcement.md)\n\n## Table of content\n\n- [Installation](#installation)\n- [Example](#example)\n- [API](#api)\n  - [Imports reference](#imports-reference)\n  - [`router` object](#router-object)\n  - [`options` store](#options-store)\n  - [`path` store](#path-store)\n  - [`query` store](#query-store)\n  - [`hash` store](#hash-store)\n  - [`Route` component](#route-component)\n  - [`Link` component](#link-component)\n  - [`linkHandle` action](#linkhandle-action)\n  - [`getPathSegments` function](#getpathsegments-function)\n- [Tips](#tips)\n  - [`path`, `query`, `hash` usage](#path-query-hash-usage)\n  - [Scroll behavior control](#scroll-behavior-control)\n  - [Redirect](#redirect)\n  - [Guarded route](#guarded-route)\n\n## Installation\n\n```\nnpm i svelte-micro\n```\n\n## Example\n\n```svelte\n<script>\n  import { Route, Link, linkHandle } from \"svelte-micro\"\n</script>\n\n<!-- Root component path always have to be equal to '/' -->\n<Route>\n  <!-- Always will be shown -->\n  <nav use:linkHandle>\n    <a href=\"/\">Home</a>\n    <a href=\"/portfolio\">Portfolio</a>\n    <a href=\"/about-us/story\">Our story</a>\n    <a href=\"https://github.com/ayndqy/svelte-micro\">Github</a>\n  </nav>\n\n  <!-- Will be shown only when $path is equal to '/' -->\n  <Route path=\"/\">\n    <h1>Home page</h1>\n    <p>Make yourself at home.</p>\n  </Route>\n\n  <Route path=\"/portfolio\">\n    <h1>Portfolio</h1>\n\n    <!-- Will be shown only when $path is equal to '/portfolio' -->\n    <Route path=\"/\">\n      <h2>Portfolio main page</h2>\n      <Link href=\"/portfolio/sites\">Sites</Link>\n      <Link href=\"/portfolio/apps\">Apps</Link>\n    </Route>\n\n    <Route path=\"/sites\">\n      <h2>Sites</h2>\n      <Link href=\"/portfolio\">Back to portfolio main page</Link>\n    </Route>\n\n    <Route path=\"/apps\">\n      <h2>Apps</h2>\n      <Link href=\"/portfolio\">Back to portfolio main page</Link>\n    </Route>\n\n    <Route fallback>\n      <h2>The route is not found in /portfolio</h2>\n      <Link href=\"/portfolio\">Back to portfolio main page</Link>\n    </Route>\n  </Route>\n\n  <Route path=\"/about-us/story\">\n    <h1>Our story</h1>\n  </Route>\n\n  <Route fallback>\n    <h1>The route is not found</h1>\n    <Link href=\"/\">Back to home</Link>\n  </Route>\n</Route>\n```\n\nThis code shows the capabilities of the `svelte-micro` routing system.\\\nSpend a minute analyzing this example to understand the approach.\n\nFor advanced examples see the [Tips](#tips) section.\n\n## API\n\n### Imports reference\n\n| Entity                                                  | Related imports                                                           |\n| ------------------------------------------------------- | ------------------------------------------------------------------------- |\n| [`router` object](#router-object)                       | `import { router, type Router } from 'svelte-micro'`                      |\n| [`options` store](#options-store)                       | `import { options, type OptionsStore, type Options } from 'svelte-micro'` |\n| [`path` store](#path-store)                             | `import { path, type PathStore, type Path } from 'svelte-micro'`          |\n| [`query` store](#query-store)                           | `import { query, type QueryStore, type Query } from 'svelte-micro'`       |\n| [`hash` store](#hash-store)                             | `import { hash, type HashStore, type Hash } from 'svelte-micro'`          |\n| [`Route` component](#route-component)                   | `import { Route } from 'svelte-micro'`                                    |\n| [`Link` component](#link-component)                     | `import { Link } from 'svelte-micro'`                                     |\n| [`linkHandle` action](#linkhandle-action)               | `import { linkHandle, type LinkHandle } from 'svelte-micro'`              |\n| [`getPathSegments` function](#getpathsegments-function) | `import { getPathSegments, type GetPathSegments } from 'svelte-micro'`    |\n\n### `router` object\n\n#### Type definition\n\n```typescript\ntype Router = {\n  go: (delta?: number) => void\n  push: (url?: string | URL | null, state?: any) => void\n  replace: (url?: string | URL | null, state?: any) => void\n}\n```\n\n#### Description\n\nThe `router` object is an object whose methods allow to manipulate history.\n\n- `router.go`\\\n  Move on `delta` steps through the history.\n\n- `router.push`\\\n  Push new `url` and [`state`](https://developer.mozilla.org/en-US/docs/Web/API/History/state) to the history.\n\n- `router.replace`\\\n  Replace current `url` and [`state`](https://developer.mozilla.org/en-US/docs/Web/API/History/state) in the history.\n\n### `options` store\n\n#### Type definition\n\n```typescript\ntype OptionsStore = {\n  subscribe: import('svelte/store').Readable<Options>['subscribe']\n  set: (changedOptions: Partial<Options>) => void\n}\n```\n\n```typescript\ntype Options = {\n  mode: 'window' | 'hash'\n  basePath: null | string\n}\n```\n\n#### Description\n\nThe `options` store provides `subscribe` and `set` methods to access and modify router options.\n\n- `$options.mode`\\\n  Default: `'window'`\\\n  Set the `mode` for the router.\n\n- `$options.basePath`\\\n  Default: `null`\\\n  Set the `basePath` for the router.\\\n  If a `basePath` value is not found at the beginning of `$path`, the router will continue to operate properly, ignoring the `basePath` option for this state of `$path`. Be aware that if `mode` is set to `'hash'`, the router will try to find the `basePath` value in the hash location fragment, since the hash location fragment is already separated from the path location fragment.\n\n### `path` store\n\n#### Type definition\n\n```typescript\ntype Path = string\n```\n\n```typescript\ntype PathStore = import('svelte/store').Readable<Path>\n```\n\n#### Description\n\nThe store which contains current path.\n\n### `query` store\n\n#### Type definition\n\n```typescript\ntype Query = string\n```\n\n```typescript\ntype QueryStore = import('svelte/store').Readable<Query>\n```\n\n#### Description\n\nThe store which contains current query.\n\n### `hash` store\n\n#### Type definition\n\n```typescript\ntype Hash = string\n```\n\n```typescript\ntype HashStore = import('svelte/store').Readable<Hash>\n```\n\n#### Description\n\nThe store which contains current hash.\n\n### `Route` component\n\n#### Type definition\n\n```svelte\n<!--\n  props: { fallback: boolean; path: string; };\n  slots: { default: {}; };\n-->\n<Route fallback={false} path=\"/\"> <slot /> </Route>\n```\n\n#### Description\n\nThe `Route` component defines a route. The props of `Route` are reactive. A nested `Route` component works in context of its parental `Route` component, so you don't need to define its full `path`.\n\n- `fallback`\\\n  Default: `{false}`\n  The property which defines if the route is fallback. A fallback route is active when there is no active routes on its depth.\n\n- `path`\\\n  Default: `'/'`\n  The property which defines route path. `path` must start from `'/'`.\n\nThe top-level (root) `Route` must have `path` equal to `'/'` and `fallback` equal to `false`.\\\nThese values are set by default, so you can leave them unchanged (see [Example](#example) section).\n\n### `Link` component\n\n#### Type definition\n\n```svelte\n<!--\n  props: { href: string; [x: string]: any; };\n  slots: { default: {}; };\n-->\n<Link href=\"/\" {...restProps}> <slot /> </Link>\n```\n\n#### Description\n\nThe `<Link />` component is built on top of [`linkHandle`](#linkhandle-action) and should be used for the internal application navigation.\\\nIt automatically prevents the window from refreshing.\n\n- `href`\\\n  Default: `'/'`\n  The property which defines link href.\n\n- `{...restProps}`\\\n  Any other property is attached on the inner `a` element.\n\nIf the [`basePath` option](#options-store) isn't set to `null`, the `<Link />` component will append the `basePath` value to the `href` attribute.\\\nIf the [`mode` option](#options-store) is set to `\"hash\"`, the `<Link />` component will append a `#` to the beginning of the `href` attribute.\n\n### `linkHandle` action\n\n#### Type definition\n\n```typescript\ntype LinkHandle = import('svelte/action').Action<HTMLElement>\n```\n\n#### Description\n\nThe `linkHandle` action prevents window from refreshing when the click event occurs on a handled `a[href]` element.\\\n`linkHandle` can be applied on a parental element to handle nested `a[href]` elements.\n\n`linkHandle` ignores an `a[href]` element if:\n\n- `a[href]` has `data-handle-ignore` attribute\n- `a[href]` has `target` attribute which isn't equal to `'_self'`\n- `a[href]` has external href (`new URL(href).origin !== document.location.origin`)\n- `(event.ctrlKey || event.metaKey || event.altKey || event.shiftKey) === true` during the click event\n\n### `getPathSegments` function\n\n#### Type definition\n\n```typescript\nexport type GetPathSegments = (path: string) => string[]\n```\n\n#### Description\n\nThe `getPathSegments` function divides `path` into segments.\n\nFor example: `getPathSegments('/about-us/story') => ['/about-us', '/story']`.\n\n## Tips\n\n### `path`, `query`, `hash` usage\n\n```svelte\n<script>\n  import { path, query, hash } from 'svelte-micro'\n\n  // For example current location equals to '/somepath?text=Hello#modal'\n  // $path  === '/somepath'\n  // $query === '?text=Hello'\n  // $hash  === '#modal'\n\n  $: text = new URLSearchParams($query)?.get('text') ?? 'Fallback value'\n</script>\n\n<!-- Query usage example -->\n{text}\n\n<!-- Hash usage example -->\n{#if $hash === '#modal'}\n  <div class=\"modal\">Hello from modal!</div>\n{/if}\n```\n\n### Scroll behavior control\n\n```javascript\nimport { path } from 'svelte-micro'\n\n// Disable browser scroll behavior control\nif ('scrollRestoration' in history) {\n  history.scrollRestoration = 'manual'\n}\n\n// On path change reset scroll position\npath.subscribe(() => window.scrollTo(0, 0))\n```\n\nBy default `svelte-micro` doesn't control scroll behavior, but it's easy to do on your own.\n\n### Redirect\n\n```svelte\n<script>\n  import { router, Route } from 'svelte-micro'\n</script>\n\n<Route>\n  <Route path=\"/redirect\">\n    {router.replace('/redirect-target')}\n  </Route>\n\n  <Route path=\"/redirect-target\">\n    <h1>You have been redirected</h1>\n  </Route>\n</Route>\n```\n\n### Guarded route\n\n```svelte\n<script>\n  import { Route } from 'svelte-micro'\n\n  let isUserAuthenticated = false\n  const toggleAuth = () => (isUserAuthenticated = !isUserAuthenticated)\n</script>\n\n<Route>\n  <Route path=\"/auth\">\n    <button on:click={toggleAuth}>{isUserAuthenticated ? \"Log out\" : \"Log in\"}</button>\n  </Route>\n\n  {#if isUserAuthenticated}\n    <Route path=\"/profile\">\n      <h1>Welcome!</h1>\n      <button on:click={toggleAuth}>Log out</button>\n    </Route>\n  {/if}\n</Route>\n```\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 45],
		[3596, 218],
		[3603, 143],
		[3610, 72],
		[3617, 21],
		[3624, 128],
		[3631, 101],
		[3638, 31],
		[3645, 24],
		[3652, 30],
		[3659, 13],
		[3666, 89],
		[3673, 204],
		[3680, 16],
		[3687, 16],
		[3694, 30],
		[3701, 82],
		[3708, 54],
		[3715, 20],
		[3722, 44],
		[3729, 129],
		[3736, 243],
		[3743, 244],
		[3750, 59],
		[3757, 65],
		[3764, 88],
		[3771, 243],
		[3778, 155],
		[3785, 166],
		[3792, 142],
		[3799, 157],
		[3806, 199],
		[3813, 127],
		[3820, 50],
		[3827, 217],
		[3834, 353],
		[3841, 226],
		[3848, 181],
		[3855, 422],
		[3862, 196],
		[3869, 96],
		[3876, 68],
		[3883, 289],
		[3890, 285],
		[3897, 106],
		[3904, 168],
		[3911, 232],
		[3918, 42],
		[3925, 91],
		[3932, 43],
		[3939, 167],
		[3946, 105],
		[3953, 100],
		[3960, 112],
		[3967, 202],
		[3974, 269],
		[3981, 54],
		[3988, 236],
		[3995, 122],
		[4002, 153],
		[4009, 163],
		[4016, 177],
		[4023, 183],
		[4030, 340],
		[4037, 157],
		[4044, 126],
		[4051, 171],
		[4058, 171],
		[4065, 278],
		[4072, 182],
		[4079, 242],
		[4086, 232],
		[4093, 280],
		[4100, 252],
		[4107, 248],
		[4114, 231],
		[4121, 155],
		[4128, 81]
	],
	"esm": true,
	"cjs": false
}
