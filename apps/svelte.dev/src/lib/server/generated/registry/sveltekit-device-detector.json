{
	"name": "sveltekit-device-detector",
	"description": "Detects device type and renders components accordingly.",
	"repo_url": "https://github.com/bhaskarGyan/sveltekit-device-detector",
	"authors": ["bhaskargyan"],
	"homepage": "https://github.com/bhaskarGyan/sveltekit-device-detector#readme",
	"downloads": 605,
	"updated": "2025-01-16T14:23:42.892Z",
	"tags": ["miscellaneous"],
	"github_stars": 25,
	"typescript": true,
	"version": "2.0.1",
	"svelte_range": "^3.54.0 || ^4.0.0 || ^5.0.0",
	"kit_range": "^1.5.0",
	"last_rune_check_version": "2.0.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "sveltekit-device-detector",
				"version": "2.0.1",
				"size": 54814
			},
			{
				"name": "ua-parser-js",
				"version": "1.0.40",
				"size": 118884
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "## sveltekit-device-detector\n\n![npm](https://img.shields.io/npm/dm/sveltekit-device-detector?label=npm%20downloads)\n\nDetect device, and render view according to the detected device type.\n\n## When to use this library\n\nThis library uses a technique called [user agent sniffing](https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent) to detect device information. That means it works by examining the [User Agent string](https://en.wikipedia.org/wiki/User_agent) given by a browser and comparing it to a list of browser and device names it knows about. This technique works, but [has drawbacks](https://css-tricks.com/browser-detection-is-bad/) and may or may not be the right approach, depending on what you're trying to achieve. If you need to detect a specific browser type (e.g. Chrome, Safari, Internet Explorer) or specific category of device (e.g. all iPods), this library can do that.\n\n## Flags\n\nYou can use these flags to detect the device type.\n\n```js\ninterface DeviceType {\n\tisMobile: boolean;\n\tisBrowser: boolean;\n\tisAndroid: boolean;\n\tisIOS: boolean;\n\tisSmartTV: boolean;\n\tisConsole: boolean;\n\tisWearable: boolean;\n\tisEmbedded: boolean;\n\tisMobileSafari: boolean;\n\tisChromium: boolean;\n\tisTablet: boolean;\n\tisDesktop: boolean;\n\tisWinPhone: boolean;\n\tisChrome: boolean;\n\tisFirefox: boolean;\n\tisSafari: boolean;\n\tisOpera: boolean;\n\tisIE: boolean;\n\tosVersion: string;\n\tfullBrowserVersion: string;\n\tbrowserVersion: string;\n\tmobileVendor: string;\n\tmobileModel: string;\n\tgetUA: string;\n\tisEdge: boolean;\n\tisYandex: boolean;\n\tisIOS13: boolean;\n\tisIPad13: boolean;\n\tisIPhone13: boolean;\n\tisIPod13: boolean;\n\tisElectron: boolean;\n\tisEdgeChromium: boolean;\n\tisLegacyEdge: boolean;\n\tisWindows: boolean;\n\tisMacOs: boolean;\n\tisMIUI: boolean;\n\tisSamsungBrowser: boolean;\n\tisWebView: boolean;\n\tisCrawler: boolean;\n}\n\ninterface DevicePayload extends DeviceType {\n\tbrowserMajorVersion?: string;\n\tbrowserFullVersion?: string;\n\tbrowserName?: string;\n\tengineName?: string;\n\tengineVersion?: string;\n\tosName?: string;\n\tosVersion: string;\n\tuserAgent?: string;\n\tvendor?: string;\n\tmodel?: string;\n\tos?: string;\n\tua?: string;\n}\n```\n\n## Installation\n\nTo install, you can use npm or yarn:\n\n```\nnpm install sveltekit-device-detector --save\n\nor\n\nyarn add sveltekit-device-detector\n```\n\nUpdate your `app.d.ts` file to look something like:\n\n```ts\nimport type { DevicePayload } from 'sveltekit-device-detector/dist/types';\n// See https://kit.svelte.dev/docs#typescript\n// for information about these interfaces\ndeclare namespace App {\n\tinterface Locals {\n\t\tdeviceType: DevicePayload;\n\t}\n\n\tinterface PageData {\n\t\tdeviceType: DevicePayload;\n\t}\n\n\tinterface Platform {}\n\n\tinterface PrivateEnv {}\n\n\tinterface PublicEnv {}\n}\n```\n\nCreate a +layout.server.js file at the root and returning the DeviceType from there.\n\n```js\n/** @type {import('./$types').LayoutServerLoad} */\nexport const load = ({ locals }) => {\n\treturn {\n\t\tdeviceType: locals.deviceType\n\t};\n};\n```\n\nYou'll now have access to the `deviceType` data by using `$page.data.deviceType` or via the `parent` function from other `+page.server.js` load functions.\n\n```svelte\n<script>\n\timport { page } from '$app/stores';\n\t$: deviceType = $page.data.deviceType;\n</script>\n```\n\n### Initializing\n\n> src/hooks.server.ts\n\n```js\nimport { handleDeviceDetector } from 'sveltekit-device-detector';\n\n// You can do it like this, without passing a own handle function\nexport const handle = handleDeviceDetector({});\n\n// Or pass your handle function as second argument to handleDeviceDetector\n\nexport const handle = handleSession({}, ({ event, resolve }) => {\n\t// event.locals is populated with the deviceType `event.locals.deviceType`\n\n\t// Do anything you want here\n\treturn resolve(event);\n});\n```\n\nIn case you're using [sequence()](https://kit.svelte.dev/docs/modules#sveltejs-kit-hooks-sequence), do this\n\n```js\nconst deviceDetector = handleDeviceDetector({});\nexport const handle = sequence(deviceDetector, ({ resolve, event }) => {\n\t// event.locals is populated with the deviceType `event.locals.deviceType`\n\t// Do anything you want here\n\treturn resolve(event);\n});\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 9],
		[3603, 7],
		[3610, 6],
		[3617, 1],
		[3624, 77],
		[3631, 9],
		[3638, 3],
		[3645, 5],
		[3652, 8],
		[3659, 5],
		[3666, 19],
		[3673, 7],
		[3680, 5],
		[3687, 7],
		[3694, 2],
		[3701, 8],
		[3708, 2],
		[3715, 12],
		[3722, 17],
		[3729, 13],
		[3736, 13],
		[3743, 29],
		[3750, 32],
		[3757, 27],
		[3764, 24],
		[3771, 22],
		[3778, 27],
		[3785, 23],
		[3792, 15],
		[3799, 14],
		[3806, 42],
		[3813, 15],
		[3820, 24],
		[3827, 26],
		[3834, 29],
		[3841, 36],
		[3848, 17],
		[3855, 90],
		[3862, 49],
		[3869, 32],
		[3876, 34],
		[3883, 17],
		[3890, 52],
		[3897, 39],
		[3904, 23],
		[3911, 61],
		[3918, 132],
		[3925, 107],
		[3932, 139],
		[3939, 63],
		[3946, 27],
		[3953, 133],
		[3960, 47],
		[3967, 62],
		[3974, 51],
		[3981, 33],
		[3988, 27],
		[3995, 15],
		[4002, 362],
		[4009, 416],
		[4016, 423],
		[4023, 590],
		[4030, 643],
		[4037, 606],
		[4044, 525],
		[4051, 544],
		[4058, 673],
		[4065, 660],
		[4072, 573],
		[4079, 733],
		[4086, 600],
		[4093, 600],
		[4100, 548],
		[4107, 636],
		[4114, 605],
		[4121, 441],
		[4128, 589],
		[4135, 577]
	],
	"esm": true,
	"cjs": false
}
