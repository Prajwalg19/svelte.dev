{
	"name": "swheel",
	"description": "Create declarative component-based routing for Svelte.",
	"repo_url": "https://github.com/qutran/swheel",
	"authors": ["dmitry.kutran"],
	"homepage": "https://github.com/qutran/swheel",
	"downloads": 6,
	"updated": "2019-09-05T14:20:54.973Z",
	"tags": ["router"],
	"github_stars": 43,
	"typescript": true,
	"version": "1.1.3",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "1.1.3",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "swheel",
				"version": "1.1.3",
				"size": 1005600
			},
			{
				"name": "path-to-regexp",
				"version": "3.3.0",
				"size": 25834
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "<p align=\"center\">\n  <img width=\"256\" height=\"256\" src=\"logo.svg\">\n</p>\n\n# Swheel\n\nDeclarative component-based [**svelte 3**](https://github.com/sveltejs/svelte) router.\n\n[Examples](/src/examples)\n\n\n## Install\n\n`npm i --save swheel`\n\n<!-- ## Usage\n\nSee [examples page](http://test.com/exampels 'examples page') -->\n\n## API\n\n- [&lt;Router /&gt;](#router-)\n- [&lt;MemoryRouter /&gt;](#memoryrouter-)\n- [getHistory()](#gethistory-function)\n  - [history methods](#methods)\n  - [history stores](#stores)\n- [navLink](#navlink-function)\n- [&lt;Route /&gt;](#route-)\n- [&lt;Layout /&gt;](#layout-)\n- [&lt;HashRoute /&gt;](#hashroute-)\n- [&lt;Fallback /&gt;](#fallback-)\n- [&lt;Redirect /&gt;](#redirect-)\n- [&lt;BeforeLeave /&gt;](#beforeleave-)\n- [&lt;Protected /&gt;](#protected-)\n\n### &lt;Router /&gt;\n\n<p>Should be placed on the top of your application. Applies special listener for every <code>&lt;a&gt;</code> element and initializes routing state for application's tree.</p>\n<p>Uses browser history API.</p>\n\n### &lt;MemoryRouter /&gt;\n\n<p>The same as <code>&lt;Router&gt;</code> but uses in-memory history API.</p>\n\n### getHistory: <code>Function</code>\n\n<p>\n  Function that returns object of helper functions to work with history.\n</p>\n\n<p>This function should be called in the component's initialization step bacause <code>Router</code> and <code>MemoryRouter</code> uses svelte's context API as a core approach</p>\n\n#### Methods:\n\n<table>\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Arguments</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>push</code></td>\n      <td><code>path: String</code></td>\n      <td>Push path to the history</td>\n    </tr>\n    <tr>\n      <td><code>replace</code></td>\n      <td><code>path: String</code></td>\n      <td>Replace path in the current state of the history</td>\n    </tr>\n    <tr>\n      <td><code>back</code></td>\n      <td>-</td>\n      <td>Move back in the history</td>\n    </tr>\n    <tr>\n      <td><code>forward</code></td>\n      <td>-</td>\n      <td>Move forward in the history</td>\n    </tr>\n  </tbody>\n</table>\n\n#### Stores:\n\n<table>\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Subject</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>currentPath</code></td>\n      <td><code>currentPath: String</code></td>\n      <td>Current path in history</td>\n    </tr>\n    <tr>\n      <td><code>stack</code><br />(<code>&lt;MemoryRouter&gt;</code> only)</td>\n      <td><code>{ stack, hasNext, hasPrev }</code></td>\n      <td>Set of fields with memory histories' metadata</td>\n    </tr>\n  </tbody>\n</table>\n\n### navLink: <code>Function</code>\n\n<p>\n  Svelte action. Allows to control <code>active</code> class (show/hide it) in case of matching <code>href</code> attribute with current path of history. Active class name should be defined explicitly to be compiled with svelte.\n</p>\n\n<p>\n  Ex. <code>&lt;a use:navLink={{ exact: true, activeClass: 'active' }} class=\"active\" href=\"/path\" /&gt;</code>\n</p>\n\n#### Parameters:\n\n<table>\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Type</th>\n      <th>Default / required</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>exact</td>\n      <td><code>Boolean</code></td>\n      <td><code>false</code></td>\n      <td>If pathes should have exactly matches</td>\n    </td>\n    <tr>\n      <td>activeClass</td>\n      <td><code>String</code></td>\n      <td><code>'active'</code></td>\n      <td>Class name that will be assigned in case of pathes matches</td>\n    </td>\n  </tbody>\n</table>\n\n### &lt;Route /&gt;\n\n<p>\n  Specifies your route configuration.\n</p>\n\n<p>\n  It is possible to define nested to routes.<br/>\n  In this case all pathes will calculate relatively the parent path.<br />\n  Ex. If parent route defined as <code>&lt;Route path=\"/parent\" /&gt;</code> and child as <code>&lt;Route path=\"/child\" /&gt;</code> - in this case nested route will be resolved by path <code>/parent/child</code>.\n</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Prop</th>\n      <th>Type</th>\n      <th>Default / required</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td align=\"center\">\n        <code>path</code>\n      </td>\n      <td align=\"center\"><code>String</code></td>\n      <td align=\"center\">required</td>\n      <td>\n        <p>Path to access the route.</p>\n        <p>Could be defined as template with required and optional parameters (ex. <code>/pokemon/:id</code>).</p>\n        <p>\n          If <code>path</code> matched than parameters passing inside components from <code>lazy</code> or <code>component</code> as property (ex. <code>export let id</code>) or could be accessed from <code>let:params</code> and passed to the slot.\n        </p>\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\">\n        <code>let:params</code>\n      </td>\n      <td align=\"center\"><code>Object</code></td>\n      <td align=\"center\"><code>null</code></td>\n      <td><p>Parameters resolved from <code>path</code></p></td>\n    </tr>\n    <tr>\n      <td align=\"center\"><code>exact</code></td>\n      <td align=\"center\"><code>Boolean</code></td>\n      <td align=\"center\"><code>false</code></td>\n      <td>\n        <p>Detects if path should have exactly matches</p>\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\"><code>when</code></td>\n      <td align=\"center\"><code>Boolean</code></td>\n      <td align=\"center\"><code>true</code></td>\n      <td>\n        <p>Detects if route is using in current flow</p>\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\"><code>component</code></td>\n      <td align=\"center\"><code>SvelteComponent</code></td>\n      <td align=\"center\"><code>null</code></td>\n      <td>\n        <p>Renders in case if <code>path</code> matched</p>\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\"><code>lazy</code></td>\n      <td align=\"center\"><code>() => Promise&lt;SvelteComponent&gt;</code></td>\n      <td align=\"center\"><code>null</code></td>\n      <td>\n        <p>Function that returns promise that resolving the Svelte component</p>\n        <p>Loading starts only on the first route matching and after that component will cache</p>\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\"><code>throttle</code></td>\n      <td align=\"center\"><code>Number</code></td>\n      <td align=\"center\"><code>0</code></td>\n      <td>\n        <p>Uses in a couple with <code>lazy</code>.<p>\n        <p>Determines minimal time (in ms) which component will not be displayed.</p>\n        <p>Necessary for preventing flash effect when switching pending state to component.</p>\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\"><code>&lt;slot /&gt;</code></td>\n      <td align=\"center\"><code>SvelteSlot</code></td>\n      <td align=\"center\"><code>-</code></td>\n      <td>\n        <p>Renders in the case if <code>lazy</code> or <code>component</code> props was't defined</p>\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\"><code>&lt;slot name=\"pending\" /&gt;</code></td>\n      <td align=\"center\"><code>SvelteSlot</code></td>\n      <td align=\"center\"><code>-</code></td>\n      <td>\n        <p>Renders when component from <code>lazy</code> field is loading</p>\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\"><code>&lt;slot name=\"catch\" /&gt;</code></td>\n      <td align=\"center\"><code>SvelteSlot</code></td>\n      <td align=\"center\"><code>-</code></td>\n      <td>\n        <p>Renders when component from <code>lazy</code> field is failed to load</p>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n### &lt;Layout /&gt;\n\n<p>\n  Provides the possibility to declaratively define layouts around the group of routes and will be rendered only in the case if any path of these routes matches.\n</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Prop</th>\n      <th>Type</th>\n      <th>Default / required</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td align=\"center\"><code>component</code></td>\n      <td align=\"center\"><code>SvelteComponent</code></td>\n      <td align=\"center\">required</td>\n      <td>\n        Layout component that wraps the group of routes. <code>&lt;slot/&gt;</code> content of <code>&lt;Layout&gt;</code> will be passed to it.\n        Renders only in case if any path of inner routes matches.\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\"><code>when</code></td>\n      <td align=\"center\"><code>Boolean</code></td>\n      <td align=\"center\"><code>true</code></td>\n      <td>\n        <p>Detects if layout and it routes' group is using in current flow</p>\n      </td>\n    </tr>\n    <tr>\n      <td align=\"center\"><code>&lt;slot /&gt;</code></td>\n      <td align=\"center\"><code>SvelteSlot</code></td>\n      <td align=\"center\"><code>-</code></td>\n      <td>\n        <p>Will be passed to the <code>component</code>.</p>\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n### &lt;HashRoute /&gt;\n\n<p>\n  Extends <code>&lt;Route&gt;</code> without <code>path</code> property and expands with own ones.\n</p>\n<p>\n  Route that displays content, when history hash (#) matches.\n</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Prop</th>\n      <th>Type</th>\n      <th>Default / required</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>hash</code></td>\n      <td><code>String</code></td>\n      <td>required</td>\n      <td>Should start with <code>#</code></td>\n    </tr>\n    <tr>\n      <td><code>let:removeHash</code></td>\n      <td><code>Function</code></td>\n      <td>-</td>\n      <td>\n        Passes to <code>component</code> or <code>lazy</code> as property.<br/>\n        Function that allows to remove hash from history.<br/>\n        Usefull in a couple with modals etc.\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n### &lt;Fallback /&gt;\n\n<p>\n  Extends <code>&lt;Route&gt;</code> without <code>path</code> property.\n</p>\n<p>\n  Renders component from <code>lazy</code>, <code>component</code> or <code>&lt;slot /&gt;</code> if any defined route wasn't rendered.<br/>\n  Usefull for <code>404 (NotFound)</code> pages.\n</p>\n\n### &lt;Redirect /&gt;\n\n<p>\n  Determines overriding of current location. <br />\n  Nested redirect will define <code>from</code> path relatively to the parent route's <code>path</code>.\n</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Prop</th>\n      <th>Type</th>\n      <th>Default / required</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>to</code></td>\n      <td><code>String</code></td>\n      <td>required</td>\n      <td>\n        Defines path to which redirect in case of <code>from</code> matched\n      </td>\n    </tr>\n    <tr>\n      <td><code>from</code></td>\n      <td><code>String</code></td>\n      <td><code>'*'</code></td>\n      <td>\n        Determines the path that should be overrided.<br/>\n        If <code>*</code> specified than redirect will be triggered from path that doesn't matched for any route.\n      </td>\n    </tr>\n    <tr>\n      <td><code>exact</code></td>\n      <td><code>Boolean</code></td>\n      <td><code>false</code></td>\n      <td>\n        Detects if path of <code>from</code> property should have exactly matches\n      </td>\n    </tr>\n  </tbody>\n</table>\n\n### &lt;BeforeLeave /&gt;\n\n<p>\n  Provides possibility to prevent leaving from the page.\n</p>\n<p>\n  Usefull if there is a form on the page and in the case of it's filled to prevent leaving.\n</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Prop</th>\n      <th>Type</th>\n      <th>Default / required</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>shouldDetectLeave</code></td>\n      <td><code>Boolean</code></td>\n      <td><code>true</code></td>\n      <td>Detects if leaving should be detected</td>\n    </tr>\n    <tr>\n      <td><code>let:isLeaving</code></td>\n      <td><code>Boolean</code></td>\n      <td><code>true</code></td>\n      <td>Detects if user trying to leave the page</td>\n    </tr>\n    <tr>\n      <td><code>let:cancelLeave</code></td>\n      <td><code>Function</code></td>\n      <td>-</td>\n      <td>Cancel transition from the page</td>\n    </tr>\n    <tr>\n      <td><code>let:acceptLeave</code></td>\n      <td><code>Function</code></td>\n      <td>-</td>\n      <td>Accept transition from the page. User will be moved to the page where he tried to go before.</td>\n    </tr>\n    <tr>\n      <td><code>&lt;slot /&gt;</code></td>\n      <td><code>SvelteSlot</code></td>\n      <td>-</td>\n      <td>Child content of the component</td>\n    </tr>\n  </tbody>\n</table>\n\n### &lt;Protected /&gt;\n\n<p>\n  Protects displaying of nested routes. If routes was wrapped with some content before - it (content) will be displayed in any case. Uses as an abstraction for <code><a href=\"#layout-\">&lt;Layout /&gt;</a></code> but could be usefull in some special cases.\n</p>\n\n<table>\n  <thead>\n    <tr>\n      <th>Prop</th>\n      <th>Type</th>\n      <th>Default / required</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td><code>when</code></td>\n      <td><code>Boolean</code></td>\n      <td><code>true</code></td>\n      <td>Detects if routes should be displayed in the subtree</td>\n    </td>\n  </tbody>\n</table>\n\n# TODO\n\n1. Recipe for SSR\n2. Unit tests\n3. Typings\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 39],
		[3603, 11],
		[3610, 11],
		[3617, 3],
		[3624, 1],
		[3631, 3],
		[3638, 18],
		[3645, 14],
		[3652, 6],
		[3659, 5],
		[3666, 12],
		[3673, 5],
		[3680, 7],
		[3687, 3],
		[3694, 5],
		[3701, 8],
		[3708, 6],
		[3715, 3],
		[3722, 3],
		[3729, 5],
		[3736, 14],
		[3743, 8],
		[3750, 2],
		[3757, 5],
		[3764, 3],
		[3771, 19],
		[3778, 5],
		[3785, 3],
		[3792, 4],
		[3799, 2],
		[3806, 5],
		[3813, 3],
		[3820, 6],
		[3827, 2],
		[3834, 5],
		[3841, 3],
		[3848, 7],
		[3855, 4],
		[3862, 42],
		[3869, 8],
		[3876, 4],
		[3883, 3],
		[3890, 10],
		[3897, 2],
		[3904, 3],
		[3911, 24],
		[3918, 14],
		[3925, 32],
		[3932, 26],
		[3939, 53],
		[3946, 160],
		[3953, 178],
		[3960, 95],
		[3967, 38],
		[3974, 8],
		[3981, 9],
		[3988, 5],
		[3995, 17],
		[4002, 4],
		[4009, 4],
		[4016, 4],
		[4023, 6],
		[4030, 10],
		[4037, 6],
		[4044, 16],
		[4051, 4],
		[4058, 2],
		[4065, 3],
		[4072, 1],
		[4079, 37],
		[4086, 15],
		[4093, 10],
		[4100, 12],
		[4107, 3],
		[4114, 6],
		[4121, 21],
		[4128, 16],
		[4135, 12]
	],
	"esm": true,
	"cjs": true
}
