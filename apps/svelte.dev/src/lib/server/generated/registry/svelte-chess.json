{
	"name": "svelte-chess",
	"description": "Implement fully playable chess component for Svelte.",
	"repo_url": "",
	"authors": ["gtim"],
	"homepage": "https://github.com/gtim/svelte-chess#readme",
	"downloads": 25,
	"updated": "2023-08-13T12:54:50.425Z",
	"tags": ["ui"],
	"typescript": true,
	"version": "0.11.1",
	"svelte_range": "^3.54.0",
	"kit_range": "^1.22.5",
	"last_rune_check_version": "0.11.1",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-chess",
				"version": "0.11.1",
				"size": 45046
			},
			{
				"name": "chess.js",
				"version": "1.2.0",
				"size": 396016
			},
			{
				"name": "svelte-chessground",
				"version": "2.0.3",
				"size": 93962
			},
			{
				"name": "chessground",
				"version": "8.4.0",
				"size": 333656
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2],
			[2, 3]
		],
		"circular": []
	},
	"readme": "# Svelte-chess: Playable chess component \n\nFully playable chess component for Svelte.\nPowered by\n[Chess.js](https://github.com/jhlywa/chess.js) logic,\n[Chessground](https://github.com/lichess-org/chessground) chessboard\nand optionally [Stockfish](https://github.com/official-stockfish/Stockfish) chess AI.\n\n![Svelte-chess screenshots](https://github.com/gtim/svelte-chess/blob/main/static/screenshot.png?raw=true)\n\n## Features\n\n* Track game state via props or detailed events\n* Play against Stockfish\n* Undo moves\n* Pawn promotion dialog\n* Fully restylable\n* Move history\n* Typed\n\n## Usage \n\nInstallation:\n\n    npm install svelte-chess\n\nBasic playable chessboard ([REPL](https://svelte.dev/repl/b1a489538165489aa2720a65b476a58b?version=3.59.1)):\n\n    <script>\n        import {Chess} from 'svelte-chess';\n    </script>    \n    <Chess />\n\nInteract with the game via [props](#props), [methods](#methods) or [events](#events).\n\n### Props\n\nGame state can be observed by binding to props. \n\n| Prop         | Bindable and readable | Writable | Value                                                                                |\n| ------------ | :-------------------: | :------: | ------------------------------------------------------------------------------------ |\n| `turn`       |           ✓           |          | Current color to move: `w` or `b`                                                    |\n| `moveNumber` |           ✓           |          | Current move number (whole moves)                                                    |\n| `history`    |           ✓           |          | Array of all moves as SAN strings, e.g. `['d4','Nf6']`                               |\n| `inCheck`    |           ✓           |          | True if the player to move is in check.                                              |\n| `isGameOver` |           ✓           |          | True if the game is over. See also the [gameOver event](#events).                    |\n| `fen`        |           ✓           |    ✓     | Current position in [FEN](https://www.chessprogramming.org/Forsyth-Edwards_Notation) |\n| `orientation`|           ✓           |    ✓     | Orientation of the board: `w` or `b`.                                                |\n| `engine`     |                       |    ✓     | Options for the Stockfish chess AI. See [Engine](#engine--stockfish).               |\n| `class`      |                       |    ✓     | CSS class applied to children instead of default (see [Styling](#styling)).          |\n\nAll readable props are bindable and updated whenever the game state changes.\nWritable props are only used when the component is created.\n\nExample using bindable props to monitor state ([REPL](https://svelte.dev/repl/d0ec69dde1f84390ac8b4d5746db9505?version=3.59.1)):\n\n    <script>\n        import {Chess} from 'svelte-chess';\n        let moveNumber, turn, history;\n    </script>    \n\t<Chess bind:moveNumber bind:turn bind:history/>\n    <p>\n        It's move {moveNumber}, with {turn} to move.\n        Moves played: {history?.join(' ')}.\n    </p>\n\nStarting from a specific FEN ([REPL](https://svelte.dev/repl/ebce18a71d774b2db987abc71f45648a?version=3.59.1)):\n\n    <Chess fen=\"rnbqkb1r/1p2pppp/p2p1n2/8/3NP3/2N5/PPP2PPP/R1BQKB1R w KQkq - 0 6\" />\n\n### Methods\n\nThe board state can be read and manipulated via method calls to the Chess component itself. \n\nMethods for reading game/board state:\n\n* `getHistory()`: Same as the `history` prop. All moves played in the game, as an array of SAN strings, e.g. `['d4','Nf6','Bg5']`.\n* `getHistory({verbose: true})`: All moves played in the game, as an array of [Move objects](#move).\n* `getBoard()`: An 8x8 array of the current position. Each element is null (empty square) or an object on the form `{ square: 'd8', type: 'q', color: 'b' }`.\n\nMethods for manipulating game/board state:\n\n* `move( san )`: Make a move programmatically. Argument is the move in [short algebraic notation](https://en.wikipedia.org/wiki/Algebraic_notation_(chess)), e.g. `Nf3`. Throws an error if the move is illegal or malformed.\n* `load( fen )`: Loads a position from FEN. Throws an error if the FEN could not be parsed.\n* `reset()`: Resets the game to the initial position.\n* `undo()`: Undoes the last move and returns it.\n* `toggleOrientation()`: Flips the board.\n* `makeEngineMove()`: Make the best move according to the engine. See [Engine / Stockfish](#engine--stockfish) for loading the engine.\n\nExample implementing undo/reset buttons ([REPL](https://svelte.dev/repl/7dd7b6454b12466e90ac78a842151311?version=3.59.1)):\n\n    <script>\n        import {Chess} from 'svelte-chess';\n        let chess;\n    </script>    \n    <Chess bind:this={chess}/>\n    <button on:click={()=>chess?.reset()}>Reset</button>\n    <button on:click={()=>chess?.undo()}>Undo</button>\n\n### Events\n\nA `ready` event is dispatched when the Chess component is ready for interaction,\nwhich is generally immediately on mount. If an [engine](#engine--stockfish) was\nspecified, the event is dispatched after engine initialisation, which might take\na second.\n\nA `move` event is dispatched after every move, containing the corresponding [Move object](#move).\n\nA `gameOver` event is emitted after a move that ends the game. The GameOver object has two keys:\n* `reason`: `checkmate`, `stalemate`, `repetition`, `insufficient material` or `fifty-move rule`.\n* `result`: 1 for White win, 0 for Black win, or 0.5 for a draw.\n\nA `uci` event is emitted when Stockfish, if enabled, sends a UCI message.\n\nExample listening for `move` and `gameOver` events ([REPL](https://svelte.dev/repl/6fc2874d1a594d76aede4834722e4f83?version=3.59.1)):\n\n    <script>\n        import {Chess} from 'svelte-chess';\n        function moveListener(event) {\n            const move = event.detail;\n            console.log( `${move.color} played ${move.san}` );\n        }\n        function gameOverListener(event) {\n            console.log( `The game ended due to ${event.detail.reason}` );\n        }\n    </script>\n    <Chess on:move={moveListener} on:gameOver={gameOverListener} />\n\nSvelte-chess exports the MoveEvent, GameOverEvent, ReadyEvent and UciEvent types.\n\n### Engine / Stockfish\n\nSvelte-chess can be used to play against the chess AI Stockfish 14. You need to download the Stockfish web worker script separately: [stockfish.js web worker (1.6MB)](https://raw.githubusercontent.com/gtim/svelte-chess/stockfish/static/stockfish.js) and serve it at `/stockfish.js`. If you're using SvelteKit, do this by putting it in the static folder.\n\nExample playing Black versus Stockfish ([live](https://gtim.github.io/svelte-chess/stockfish)):\n\n    <script>\n        import Chess, { Engine } from 'svelte-chess';\n        // Note: stockfish.js must be manually downloaded (see Readme)\n    </script>\n    <Chess engine={new Engine({depth: 20, moveTime: 1500, color: 'w'})} />\n\nThe `engine` prop is an object with the following keys, all optional:\n\n| Key         | Default | Description                                                                 |\n| ----------- | ------- | --------------------------------------------------------------------------- |\n| `color`     | `b`     | Color the engine plays: `w` or `b`, or `both` for an engine-vs-engine game, or `none` if the engine should only make a move when `makeEngineMove()` is called. | \n| `moveTime`  | 2000    | Max time in milliseconds for the engine to spend on a move.                 |\n| `depth`     | 40      | Max depth in ply for the engine to search.                                  |\n\nTo inspect Stockfish's current evaluation and other engine details, you can listen to `uci` events from the Chess component to read all [UCI](https://www.chessprogramming.org/UCI) messages sent by Stockfish.\n\n### Styling\n\nThe stylesheet shipped with Chessground is used by default. To restyle the \nboard, pass the `class` prop and import a stylesheet.\n\nExample with custom stylesheet:\n\n    <script>\n        import { Chess } from 'svelte-chess';\n    </script>\n    <link rel=\"stylesheet\" href=\"/my-style.css\" />\n    <Chess class=\"my-class\" />\n\nA sample stylesheet can be found in [/static/style-paper.css](https://github.com/gtim/svelte-chess/blob/main/static/style-paper.css).\n\n## Types\n\n### Move\n\nA `Move` describes a chess move. Properties:\n  - `color`: `w` for White move or `b` for Black move.\n  - `from` and `to`: Origin and destination squares, e.g. `g1` and `f3`.\n  - `piece`: Piece symbol, one of `pnbrqk` (pawn, knight, bishop, rook, queen, king).\n  - `captured` and `promotion`: Piece symbol of a capture or promotion, if applicable.\n  - `san`: Standard algebraic notation, e.g. `Nf3`.\n  - `lan`: Long algebraic notation, e.g. `g1f3`.\n  - `before` and `after`: FEN of positions before and after the move.\n  - `flags`: String of letters for each flag that applies to the move: `c` for standard capture, `e` for en passant capture, `n` for non-capture, `b` for two-square pawn move, `p` for promotion, `k` for kingside castling and `q` for queenside castling.\n  - `check`: True if the move put the opponent in check (or checkmate).\n  - `checkmate`: True if the move put the opponent in checkmate.\n\n\n## Future\n\n* Programmatically draw arrows/circles on the board\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 61],
		[3596, 69],
		[3603, 81],
		[3610, 50],
		[3617, 25],
		[3624, 44],
		[3631, 27],
		[3638, 39],
		[3645, 38],
		[3652, 95],
		[3659, 108],
		[3666, 116],
		[3673, 56],
		[3680, 90],
		[3687, 59],
		[3694, 39],
		[3701, 68],
		[3708, 40],
		[3715, 57],
		[3722, 41],
		[3729, 50],
		[3736, 67],
		[3743, 31],
		[3750, 43],
		[3757, 38],
		[3764, 36],
		[3771, 43],
		[3778, 62],
		[3785, 24],
		[3792, 23],
		[3799, 106],
		[3806, 42],
		[3813, 29],
		[3820, 40],
		[3827, 23],
		[3834, 62],
		[3841, 223],
		[3848, 42],
		[3855, 28],
		[3862, 66],
		[3869, 18],
		[3876, 63],
		[3883, 33],
		[3890, 71],
		[3897, 33],
		[3904, 63],
		[3911, 19],
		[3918, 63],
		[3925, 36],
		[3932, 71],
		[3939, 21],
		[3946, 26],
		[3953, 36],
		[3960, 44],
		[3967, 27],
		[3974, 25],
		[3981, 12],
		[3988, 87],
		[3995, 41],
		[4002, 45],
		[4009, 48],
		[4016, 39],
		[4023, 82],
		[4030, 56],
		[4037, 108],
		[4044, 86],
		[4051, 27],
		[4058, 47],
		[4065, 42],
		[4072, 27],
		[4079, 82],
		[4086, 55],
		[4093, 37],
		[4100, 116],
		[4107, 15],
		[4114, 25],
		[4121, 46],
		[4128, 17]
	]
}
