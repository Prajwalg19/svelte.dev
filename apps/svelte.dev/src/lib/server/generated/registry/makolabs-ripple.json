{
	"name": "@makolabs/ripple",
	"description": "Build UI components for Svelte 5 with Ripple UI.",
	"repo_url": "https://github.com/makolabsai/mako-ui-components",
	"authors": ["bishwasbh", "sharktu"],
	"homepage": "https://github.com/makolabsai/mako-ui-components#readme",
	"downloads": 220,
	"updated": "2025-04-30T04:23:28.959Z",
	"tags": ["ui"],
	"typescript": true,
	"version": "0.0.1-dev.58",
	"svelte_range": "^5.0.0",
	"kit_range": "^2.16.0",
	"last_rune_check_version": "0.0.1-dev.58",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@makolabs/ripple",
				"version": "0.0.1-dev.58",
				"size": 322327
			},
			{
				"name": "dayjs",
				"version": "1.11.13",
				"size": 670277
			},
			{
				"name": "echarts",
				"version": "5.6.0",
				"size": 53164582
			},
			{
				"name": "tslib",
				"version": "2.3.0",
				"size": 39032
			},
			{
				"name": "zrender",
				"version": "5.6.1",
				"size": 4116415
			},
			{
				"name": "svelte-sonner",
				"version": "0.3.28",
				"size": 71425
			},
			{
				"name": "tailwind-merge",
				"version": "3.2.0",
				"size": 898001
			},
			{
				"name": "tailwind-variants",
				"version": "1.0.0",
				"size": 30466
			},
			{
				"name": "tailwind-merge",
				"version": "3.0.2",
				"size": 824242
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2],
			[2, 3],
			[2, 4],
			[4, 3],
			[0, 5],
			[0, 6],
			[0, 7],
			[7, 8]
		],
		"circular": []
	},
	"readme": "# Ripple UI\n\nA modern, standardized Svelte 5 component library designed for simplicity, consistency, and AI-friendly usage patterns.\n\n## Key Features\n\n- **Standardized API** with consistent prop naming and patterns across components\n- **Enum-based properties** for predictable component customization\n- **Strong TypeScript support** with comprehensive type definitions\n- **Utility-first approach** built with TailwindCSS\n- **Accessible components** adhering to modern web standards\n- **Simplified component consumption** ideal for both human and AI developers\n\n## Getting started\n\nInstall the project\n\n```shell\nnpm i @makolabs/ripple\n```\n\n## Usage\n\nImport ripple UI components\n\n```svelte\n<script lang=\"ts\">\n\timport { Button, Card, Modal } from '@makolabs/ripple';\n</script>\n\n<div class=\"px-12 pt-12\">\n\t<Card title=\"Hello World\" color=\"warning\">\n\t\t<p>This is a card component</p>\n\t</Card>\n</div>\n```\n\nPaste the following CSS import code in `app.css`\n\n```css\n@source \"../node_modules/@makolabs/ripple\";\n\n@theme {\n\t/* Default (default) */\n\t--color-default-50: oklch(0.984 0.003 247.858);\n\t--color-default-100: oklch(0.96 0.006 247.858);\n\t--color-default-200: oklch(0.91 0.008 247.858);\n\t--color-default-300: oklch(0.85 0.01 247.858);\n\t--color-default-400: oklch(0.76 0.012 247.858);\n\t--color-default-500: oklch(0.65 0.015 247.858);\n\t--color-default-600: oklch(0.54 0.018 247.858);\n\t--color-default-700: oklch(0.45 0.015 247.858);\n\t--color-default-800: oklch(0.35 0.012 247.858);\n\t--color-default-900: oklch(0.25 0.01 247.858);\n\t--color-default-950: oklch(0.15 0.008 247.858);\n\n\t/* Primary (Blue) */\n\t--color-primary-50: oklch(0.97 0.025 250);\n\t--color-primary-100: oklch(0.94 0.035 250);\n\t--color-primary-200: oklch(0.89 0.055 250);\n\t--color-primary-300: oklch(0.82 0.075 250);\n\t--color-primary-400: oklch(0.74 0.095 250);\n\t--color-primary-500: oklch(0.65 0.115 250);\n\t--color-primary-600: oklch(0.55 0.125 250);\n\t--color-primary-700: oklch(0.45 0.115 250);\n\t--color-primary-800: oklch(0.35 0.095 250);\n\t--color-primary-900: oklch(0.25 0.075 250);\n\t--color-primary-950: oklch(0.15 0.055 250);\n\n\t/* Secondary (Slate) */\n\t--color-secondary-50: oklch(0.97 0.02 255);\n\t--color-secondary-100: oklch(0.94 0.03 255);\n\t--color-secondary-200: oklch(0.89 0.04 255);\n\t--color-secondary-300: oklch(0.82 0.05 255);\n\t--color-secondary-400: oklch(0.74 0.06 255);\n\t--color-secondary-500: oklch(0.65 0.07 255);\n\t--color-secondary-600: oklch(0.55 0.065 255);\n\t--color-secondary-700: oklch(0.45 0.055 255);\n\t--color-secondary-800: oklch(0.35 0.045 255);\n\t--color-secondary-900: oklch(0.25 0.035 255);\n\t--color-secondary-950: oklch(0.15 0.025 255);\n\n\t/* Info (Sky) */\n\t--color-info-50: oklch(0.97 0.025 220);\n\t--color-info-100: oklch(0.94 0.04 220);\n\t--color-info-200: oklch(0.89 0.06 220);\n\t--color-info-300: oklch(0.82 0.085 220);\n\t--color-info-400: oklch(0.74 0.105 220);\n\t--color-info-500: oklch(0.65 0.125 220);\n\t--color-info-600: oklch(0.55 0.115 220);\n\t--color-info-700: oklch(0.45 0.105 220);\n\t--color-info-800: oklch(0.35 0.085 220);\n\t--color-info-900: oklch(0.25 0.065 220);\n\t--color-info-950: oklch(0.15 0.045 220);\n\n\t/* Success (Green) */\n\t--color-success-50: oklch(0.97 0.025 145);\n\t--color-success-100: oklch(0.94 0.04 145);\n\t--color-success-200: oklch(0.89 0.06 145);\n\t--color-success-300: oklch(0.82 0.08 145);\n\t--color-success-400: oklch(0.74 0.1 145);\n\t--color-success-500: oklch(0.65 0.12 145);\n\t--color-success-600: oklch(0.55 0.11 145);\n\t--color-success-700: oklch(0.45 0.1 145);\n\t--color-success-800: oklch(0.35 0.08 145);\n\t--color-success-900: oklch(0.25 0.06 145);\n\t--color-success-950: oklch(0.15 0.04 145);\n\n\t/* Warning (Yellow) */\n\t--color-warning-50: oklch(0.97 0.025 90);\n\t--color-warning-100: oklch(0.94 0.045 90);\n\t--color-warning-200: oklch(0.89 0.065 90);\n\t--color-warning-300: oklch(0.82 0.085 90);\n\t--color-warning-400: oklch(0.74 0.105 90);\n\t--color-warning-500: oklch(0.65 0.125 90);\n\t--color-warning-600: oklch(0.55 0.115 90);\n\t--color-warning-700: oklch(0.45 0.105 90);\n\t--color-warning-800: oklch(0.35 0.085 90);\n\t--color-warning-900: oklch(0.25 0.065 90);\n\t--color-warning-950: oklch(0.15 0.045 90);\n\n\t/* Danger (Red) */\n\t--color-danger-50: oklch(0.97 0.025 25);\n\t--color-danger-100: oklch(0.94 0.045 25);\n\t--color-danger-200: oklch(0.89 0.065 25);\n\t--color-danger-300: oklch(0.82 0.085 25);\n\t--color-danger-400: oklch(0.74 0.105 25);\n\t--color-danger-500: oklch(0.65 0.125 25);\n\t--color-danger-600: oklch(0.55 0.115 25);\n\t--color-danger-700: oklch(0.45 0.105 25);\n\t--color-danger-800: oklch(0.35 0.085 25);\n\t--color-danger-900: oklch(0.25 0.065 25);\n\t--color-danger-950: oklch(0.15 0.045 25);\n}\n```\n\n## Design Philosophy\n\nRipple UI was built with a focus on consistency and standardization. Every component follows the same patterns for customization:\n\n### Standardized Enums\n\nComponents use standardized enums for colors, sizes, and variants:\n\n```typescript\n// Colors available for most components\nColor.DEFAULT    // 'default'\nColor.PRIMARY    // 'primary'\nColor.SECONDARY  // 'secondary'\nColor.INFO       // 'info'\nColor.SUCCESS    // 'success'\nColor.WARNING    // 'warning'\nColor.DANGER     // 'danger'\n\n// Sizes available for most components\nSize.XS    // 'xs'\nSize.SM    // 'sm'\nSize.BASE  // 'base'\nSize.LG    // 'lg'\nSize.XL    // 'xl'\nSize.XXL   // '2xl'\n```\n\n### Consistent Props Pattern\n\nAll components follow a consistent props pattern with predictable naming:\n\n- `color`: Component color theme (using the Color enum)\n- `size`: Component size (using the Size enum)\n- `class`: Custom CSS classes for the component\n- Event handlers with `on` prefix (e.g., `onclick`, `onchange`)\n- Element-specific class props named with component + 'class' (e.g., `titleclass`, `bodyclass`)\n\n## Component Variants\n\nMost components in Ripple UI support variants to customize their appearance. Here are some examples:\n\n### Button Variants\n\nButtons come with different variants, colors, sizes, and shapes:\n\n```svelte\n<script lang=\"ts\">\n\timport { Button, Color, Size } from '@makolabs/ripple';\n</script>\n\n<!-- Different button variants -->\n<Button variant=\"solid\" color={Color.PRIMARY}>Solid Button</Button>\n<Button variant=\"outline\" color={Color.SECONDARY}>Outline Button</Button>\n<Button variant=\"ghost\" color={Color.DANGER}>Ghost Button</Button>\n<Button variant=\"link\" color={Color.INFO}>Link Button</Button>\n\n<!-- Button with onclick handler -->\n<Button \n  color={Color.SUCCESS}\n  onclick={() => console.log('Button clicked')}\n>\n  Click Me\n</Button>\n\n<!-- Button as link -->\n<Button \n  href=\"https://example.com\" \n  target=\"_blank\"\n  color={Color.PRIMARY}\n>\n  Visit Website\n</Button>\n\n<!-- Button sizes -->\n<Button size={Size.XS}>Extra Small</Button>\n<Button size={Size.SM}>Small</Button>\n<Button size={Size.BASE}>Base</Button>\n<Button size={Size.LG}>Large</Button>\n<Button size={Size.XL}>Extra Large</Button>\n<Button size={Size.XXL}>2X Large</Button>\n\n<!-- Button variants with different colors -->\n<Button variant=\"solid\" color={Color.PRIMARY}>Primary Solid</Button>\n<Button variant=\"solid\" color={Color.DANGER}>Danger Solid</Button>\n<Button variant=\"outline\" color={Color.SUCCESS}>Success Outline</Button>\n<Button variant=\"ghost\" color={Color.WARNING}>Warning Ghost</Button>\n<Button variant=\"link\" color={Color.INFO}>Info Link</Button>\n```\n\n### Modal Variants\n\nModals with different sizes and custom content:\n\n```svelte\n<script lang=\"ts\">\n\timport { Modal, Button, Size } from '@makolabs/ripple';\n\tlet isOpen = false;\n</script>\n\n<Button onclick={() => isOpen = true}>Open Modal</Button>\n\n<!-- Basic modal -->\n<Modal \n  open={isOpen} \n  title=\"Basic Modal\"\n  size={Size.BASE}\n  onClose={() => isOpen = false}\n>\n  <p>Modal content goes here</p>\n</Modal>\n\n<!-- Modal with different size -->\n<Modal \n  open={isOpen} \n  title=\"Large Modal\"\n  size={Size.XL}\n  onClose={() => isOpen = false}\n>\n  <p>This modal is larger and provides more content space</p>\n</Modal>\n\n<!-- Modal with custom header and footer -->\n<Modal \n  open={isOpen} \n  onClose={() => isOpen = false}\n  size={Size.BASE}\n>\n  <svelte:fragment slot=\"header\">\n    <div class=\"flex items-center\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n        <path d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n      </svg>\n      <h3 class=\"text-lg font-medium\">Custom Header</h3>\n    </div>\n  </svelte:fragment>\n  \n  <p>Modal with custom header and footer</p>\n  \n  <svelte:fragment slot=\"footer\">\n    <div class=\"flex justify-end space-x-2\">\n      <Button variant=\"outline\" onclick={() => isOpen = false}>Cancel</Button>\n      <Button color={Color.PRIMARY}>Save Changes</Button>\n    </div>\n  </svelte:fragment>\n</Modal>\n\n<!-- TODO: Remove position prop from Modal component in future versions -->\n```\n\n### Drawer Component\n\nDrawers can slide in from different edges of the screen:\n\n```svelte\n<script lang=\"ts\">\n\timport { Drawer, Button } from '@makolabs/ripple';\n\tlet isDrawerOpen = false;\n</script>\n\n<Button onclick={() => isDrawerOpen = true}>Open Drawer</Button>\n\n<Drawer \n  open={isDrawerOpen} \n  position=\"right\"\n  onClose={() => isDrawerOpen = false}\n>\n  <div class=\"p-4\">\n    <h3 class=\"text-lg font-medium mb-4\">Drawer Title</h3>\n    <p class=\"mb-4\">This is a drawer that slides in from the side of the screen.</p>\n    <Button onclick={() => isDrawerOpen = false}>Close Drawer</Button>\n  </div>\n</Drawer>\n```\n\n### PageHeader Component\n\nA component for consistent page headers:\n\n```svelte\n<script lang=\"ts\">\n\timport { PageHeader, Button, Color } from '@makolabs/ripple';\n\t\n\tconst breadcrumbs = [\n\t  { label: 'Dashboard', href: '#' },\n\t  { label: 'Projects', href: '#' },\n\t  { label: 'Current Project' }\n\t];\n</script>\n\n<PageHeader \n  title=\"Project Dashboard\"\n  description=\"View and manage your project details\"\n  breadcrumbs={breadcrumbs}\n>\n  <svelte:fragment slot=\"actions\">\n    <Button color={Color.PRIMARY}>New Project</Button>\n  </svelte:fragment>\n</PageHeader>\n```\n\n### Card Variants\n\nCards can be customized with different styles:\n\n```svelte\n<script lang=\"ts\">\n\timport { Card, StatsCard, Color } from '@makolabs/ripple';\n</script>\n\n<Card title=\"Basic Card\" color={Color.PRIMARY}>\n  <p>Card content goes here</p>\n</Card>\n\n<StatsCard \n  label=\"Monthly Sales\"\n  value=\"$865,000\"\n  previousValue=\"$750,000\"\n  previousValuePrefix=\"vs\"\n  trend={15.3}\n  color={Color.SUCCESS}\n  chartData={[20, 25, 30, 22, 35, 40, 38, 45, 50]}\n  icon={\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n      <path d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n    </svg>\n  }\n/>\n```\n\n### Table Component\n\nTables for displaying structured data with pagination and sorting:\n\n```svelte\n<script lang=\"ts\">\n\timport { Table, Color, Size } from '@makolabs/ripple';\n\t\n\tlet data = [\n\t  { id: 1, name: 'John Doe', email: 'john@example.com', status: 'Active' },\n\t  { id: 2, name: 'Jane Smith', email: 'jane@example.com', status: 'Inactive' },\n\t  { id: 3, name: 'Robert Johnson', email: 'robert@example.com', status: 'Active' }\n\t];\n\t\n\tconst columns = [\n\t  { key: 'name', label: 'Name', sortable: true },\n\t  { key: 'email', label: 'Email', sortable: true },\n\t  { key: 'status', label: 'Status' }\n\t];\n\t\n\tlet selected = [];\n\tlet sort = { column: 'name', direction: 'asc' };\n</script>\n\n<Table \n  data={data} \n  {columns}\n  color={Color.PRIMARY}\n  size={Size.BASE}\n  pageSize={10}\n  selectable={true}\n  bind:selected={selected}\n  bind:sort={sort}\n  striped={true}\n/>\n```\n\n### Tab Component\n\nTabs for organizing content into different views:\n\n```svelte\n<script lang=\"ts\">\n\timport { TabGroup, TabContent, Color, Size } from '@makolabs/ripple';\n\t\n\tconst tabs = [\n\t  { value: 'overview', label: 'Overview' },\n\t  { value: 'details', label: 'Details' },\n\t  { value: 'settings', label: 'Settings' }\n\t];\n\t\n\tlet activeTab = 'overview';\n\t\n\tfunction handleTabChange(value) {\n\t  console.log(`Tab changed to ${value}`);\n\t}\n</script>\n\n<TabGroup \n  tabs={tabs} \n  bind:selected={activeTab}\n  onchange={handleTabChange}\n  color={Color.PRIMARY}\n  size={Size.BASE}\n>\n  <TabContent value=\"overview\" persisted>\n    <p>Overview content here</p>\n  </TabContent>\n  \n  <TabContent value=\"details\" persisted>\n    <p>Details content here</p>\n  </TabContent>\n  \n  <TabContent value=\"settings\" persisted>\n    <p>Settings content here</p>\n  </TabContent>\n</TabGroup>\n```\n\n### Badge Component\n\nBadges for displaying statuses and counts:\n\n```svelte\n<script lang=\"ts\">\n\timport { Badge, Color, Size } from '@makolabs/ripple';\n</script>\n\n<Badge color={Color.PRIMARY} size={Size.BASE}>New</Badge>\n<Badge color={Color.SUCCESS}>Success</Badge>\n<Badge color={Color.WARNING}>Warning</Badge>\n<Badge color={Color.DANGER}>43</Badge>\n```\n\n### Select Component\n\nDropdown selector for choosing from a list of options:\n\n```svelte\n<script lang=\"ts\">\n\timport { Select, Size } from '@makolabs/ripple';\n\t\n\tconst items = [\n\t  { label: 'Option 1', value: 'option1' },\n\t  { label: 'Option 2', value: 'option2' },\n\t  { label: 'Option 3', value: 'option3', disabled: true },\n\t  { label: 'Option 4', value: 'option4' }\n\t];\n\t\n\tlet selected = 'option1';\n\t\n\tfunction handleSelect(event) {\n\t  console.log('Selected:', event.value);\n\t}\n</script>\n\n<Select \n  {items} \n  bind:value={selected} \n  class=\"w-64\"\n  size={Size.BASE}\n  onselect={handleSelect}\n/>\n```\n\n### Dropdown Component\n\nMenu dropdown for actions and navigation:\n\n```svelte\n<script lang=\"ts\">\n\timport { Dropdown, Size } from '@makolabs/ripple';\n\timport FluentChevronDown16Filled from '$icons/FluentChevronDown16Filled.svelte';\n\t\n\tconst sections = [\n\t  {\n\t    items: [\n\t      { \n\t        label: 'Edit', \n\t        icon: FluentPen16Filled,\n\t        onclick: () => console.log('Edit clicked') \n\t      },\n\t      { \n\t        label: 'Duplicate', \n\t        icon: FluentPenSparkle24Filled,\n\t        onclick: () => console.log('Duplicate clicked') \n\t      }\n\t    ]\n\t  },\n\t  {\n\t    items: [\n\t      { \n\t        label: 'Delete', \n\t        icon: FluentDelete24Filled,\n\t        onclick: () => console.log('Delete clicked') \n\t      }\n\t    ]\n\t  }\n\t];\n</script>\n\n<Dropdown \n  sections={sections} \n  label=\"Actions\"\n  size={Size.BASE}\n  icon={FluentChevronDown16Filled}\n/>\n```\n\n## Component Composition\n\nRipple UI components are designed to work together seamlessly:\n\n```svelte\n<script lang=\"ts\">\n  import { Card, TabGroup, TabContent, Button, Color, Size } from '@makolabs/ripple';\n  \n  const tabs = [\n    { value: 'overview', label: 'Overview' },\n    { value: 'details', label: 'Details' },\n    { value: 'settings', label: 'Settings' }\n  ];\n  \n  let activeTab = 'overview';\n</script>\n\n<Card title=\"Project Information\" color={Color.PRIMARY}>\n  <TabGroup \n    tabs={tabs} \n    bind:selected={activeTab}\n    color={Color.INFO}\n    size={Size.BASE}\n  >\n    <TabContent value=\"overview\">\n      <p>Project overview content here...</p>\n      <Button variant=\"solid\" color={Color.SUCCESS} size={Size.SM}>\n        Take Action\n      </Button>\n    </TabContent>\n    \n    <TabContent value=\"details\">\n      <p>Project details content here...</p>\n    </TabContent>\n    \n    <TabContent value=\"settings\">\n      <p>Project settings content here...</p>\n    </TabContent>\n  </TabGroup>\n</Card>\n```\n\n## Latest Updates\n\nRipple UI now exports all components from a central entry point, making it easier to import components:\n\n```svelte\n<script lang=\"ts\">\n\timport { Button, Modal, Card, Table, Select, Dropdown } from '@makolabs/ripple';\n</script>\n```\n\nYou can still import specific component types when needed:\n\n```svelte\n<script lang=\"ts\">\n\timport { Button, type ButtonProps } from '@makolabs/ripple';\n\t\n\t// Create a custom button with specific props\n\tconst myButton: ButtonProps = {\n\t\tvariant: 'outline',\n\t\tcolor: 'primary',\n\t\tsize: 'lg',\n\t\trounded: 'xl'\n\t};\n</script>\n\n<Button {...myButton}>Custom Button</Button>\n",
	"legacy_svelte": false,
	"downloads_history": [
		[4086, 255],
		[4093, 215],
		[4100, 35],
		[4107, 11],
		[4114, 220],
		[4121, 94],
		[4128, 1186]
	],
	"esm": true,
	"cjs": false
}
