{
	"name": "@novacbn/svelte-codejar",
	"description": "Provides Svelte binding for the embeddable code editor CodeJar.",
	"repo_url": "https://github.com/novacbn/svelte-codejar",
	"authors": ["novacbn"],
	"homepage": "https://github.com/novacbn/svelte-codejar#readme",
	"downloads": 62,
	"updated": "2022-03-05T09:50:20.437Z",
	"tags": ["ui"],
	"github_stars": 23,
	"typescript": true,
	"version": "0.1.2",
	"svelte_range": "^3.42.3",
	"kit_range": "^1.0.0-next.292",
	"last_rune_check_version": "0.1.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@novacbn/svelte-codejar",
				"version": "0.1.2",
				"size": 15441
			},
			{
				"name": "codejar",
				"version": "3.7.0",
				"size": 45381
			},
			{
				"name": "svelte",
				"version": "3.59.2",
				"size": 10624206
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2]
		],
		"circular": []
	},
	"readme": "# `svelte-codejar`\n\n## Description\n\nSvelte Binding for the embeddable code editor CodeJar\n\n## Demo\n\nSee a demo at [novacbn.github.io/svelte-codejar/demo](https://novacbn.github.io/svelte-codejar/demo)\n\n## Sample\n\n```html\n<script>\n    import {CodeJar} from \"@novacbn/svelte-codejar\";\n\n    let value = `console.log(\"Hello World!\");`;\n</script>\n\n<!--\n    `CodeJar` options with their defaults\n    See more information at: https://github.com/antonmedv/codejar#getting-started\n-->\n\n<!--\n    **NOTE**: Syntax highlighting is optional and must be provided by you. See the\n    sample below on how to use it\n\n    **NOTE2**: When setting `CodeJar.tab`, if you're using escape characters such\n    as `\\t`, you need encapsulate it as a raw string (see below). Otherwise the Svelte\n    compiler will escape the value when it parses your code\n-->\n\n<CodeJar addClosing={true} indentOn={/{$/} spellcheck={false} tab={\"\\t\"} bind:value />\n```\n\n## Syntax Highlighting\n\n### highlight.js\n\n> **NOTE**: The sample below uses [highlight.js](https://highlightjs.org/), see the link for more information.\n\n```html\n<script context=\"module\">\n    // We need to configure highlight.js for Javascript, and then alias the\n    // exports to match the function signatures that `CodeJar` Component expects\n    import hljs from \"highlight.js/lib/core\";\n    import javascript from \"highlight.js/lib/languages/javascript\";\n\n    hljs.registerLanguage(\"javascript\", javascript);\n\n    // `highlight` takes the input code and returns the highlighted HTML markup\n    const highlight = (code, syntax) =>\n        hljs.highlight(code, {\n            language: syntax,\n        }).value;\n</script>\n\n<script>\n    import {CodeJar} from \"@novacbn/svelte-codejar\";\n\n    let value = `console.log(\"Hello World!\");`;\n</script>\n\n<!--\n    Now we pass `CodeJar` our syntax highlighting functions along with the\n    language syntax used for highlighting\n\n    We also need to pass the `hljs` class so highlight.js knows which element\n    to style\n-->\n\n<CodeJar class=\"hljs\" syntax=\"javascript\" {highlight} {value} />\n```\n\n### PrismJS\n\n> **NOTE**: The code is the same as above, but with [PrismJS](https://prismjs.com/) calls instead of highlight.js\n\n```html\n<script context=\"module\">\n    import Prism from \"prismjs\";\n\n    const highlight = (code, syntax) => Prism.highlight(code, Prism.languages[syntax], syntax);\n</script>\n\n<script>\n    import {CodeJar} from \"@novacbn/svelte-codejar\";\n\n    let value = `console.log(\"Hello World!\");`;\n</script>\n\n<CodeJar syntax=\"javascript\" {highlight} {value} />\n```\n\n## FAQ\n\n### SvelteKit â€” `ReferenceError: window is not defined`\n\nWhen using the library with [SvelteKit](https://kit.svelte.dev) with SSR (serverside rendering) enabled you might get this error:\n\n```\n[vite] Error when evaluating SSR module /node_modules/codejar/codejar.js?v=4f67a3d5:\nReferenceError: window is not defined\n```\n\nNothing much can do about that, CodeJar [makes a `window` assignment](https://github.com/antonmedv/codejar/blob/b037e29b6565269a2f797e62f51966d77cdf3978/codejar.ts#L1) in its module scope. However you can do a workaround via [`onMount`](https://svelte.dev/docs#onMount) or other similar workflows:\n\n```html\n<script>\n    import {onMount} from \"@novacbn/svelte-codejar\";\n\n    export let value = \"\";\n\n    // **NOTE:** Since `onMount` is only called on the client, we can just\n    // make our import there. And assign to our Component's scope\n    let CodeJar;\n    onMount(async () => {\n        ({CodeJar} = await import(\"@novacbn/svelte-codejar\"));\n    });\n</script>\n\n{#if CodeJar}\n<CodeJar bind:value />\n{:else}\n<!--\n    **NOTE:** Normally the `CodeJar` Svelte handles fall through for us, and\n    renders / syntax highlights without an editor during SSR / non-JS enabled clients\n-->\n<pre><code>{value}</code></pre>\n{/if}\n```\n\nOnly downside being you have to manually syntax highlight your code in the `{:else}` block for SSR / non-JS enabled clients.\n\n## Developer\n\n### Installation\n\nOpen your terminal and install via `npm`:\n\n```bash\nnpm install @novacbn/svelte-codejar\n```\n\n### Properties\n\n| Name       | Typing                                      | Default     | Description                                                                                                          |\n| ---------- | ------------------------------------------- | ----------- | -------------------------------------------------------------------------------------------------------------------- |\n| addClosing | `boolean`                                   | `true`      | Sets whether the Editor automatically adds closing delimiters, like brackets, quotes, etc...                         |\n| indentOn   | `RegExp`                                    | `/{$/`      | Represents what expression is used to detect when the Editor needs to auto indent with the configured tab characters |\n| spellcheck | `boolean`                                   | `false`     | Sets whether to enable the Browser's spellcheck or not                                                               |\n| tab        | `string`                                    | `\\t`        | Sets the characters inserted whenever the end-user pressed the tab key                                               |\n| highlight  | `(code: string, syntax?: string) => string` | `null`      | Callback is called to highlight the current code and return the rendered HTML markup                                 |\n| syntax     | `string`                                    | `undefined` | Sets the current language mode of the Editor                                                                         |\n| value      | `string`                                    | `\"\"`        | Sets the current text of the Editor                                                                                  |\n| class      | `string`                                    | `\"\"`        | Applies `class=\"\"` to the `<pre>` container element                                                                  |\n| style      | `string`                                    | `undefined` | Applies `style=\"\"` to the `<pre>` container element                                                                  |\n\n### Events\n\n| Name     | Typing                         | Description                                   |\n| -------- | ------------------------------ | --------------------------------------------- |\n| `change` | `CustomEvent<{value: string}>` | Fires whenever the end-user changes the input |\n\n### API\n\n-   Components\n\n    -   `CodeJar`\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 23],
		[3596, 59],
		[3603, 44],
		[3610, 44],
		[3617, 38],
		[3624, 80],
		[3631, 77],
		[3638, 50],
		[3645, 27],
		[3652, 52],
		[3659, 52],
		[3666, 73],
		[3673, 100],
		[3680, 128],
		[3687, 41],
		[3694, 88],
		[3701, 97],
		[3708, 59],
		[3715, 61],
		[3722, 104],
		[3729, 245],
		[3736, 149],
		[3743, 100],
		[3750, 229],
		[3757, 122],
		[3764, 70],
		[3771, 65],
		[3778, 50],
		[3785, 80],
		[3792, 66],
		[3799, 183],
		[3806, 104],
		[3813, 69],
		[3820, 75],
		[3827, 181],
		[3834, 74],
		[3841, 80],
		[3848, 56],
		[3855, 84],
		[3862, 31],
		[3869, 73],
		[3876, 58],
		[3883, 42],
		[3890, 52],
		[3897, 82],
		[3904, 96],
		[3911, 100],
		[3918, 92],
		[3925, 62],
		[3932, 75],
		[3939, 34],
		[3946, 67],
		[3953, 20],
		[3960, 88],
		[3967, 29],
		[3974, 24],
		[3981, 23],
		[3988, 36],
		[3995, 17],
		[4002, 14],
		[4009, 13],
		[4016, 11],
		[4023, 39],
		[4030, 62],
		[4037, 67],
		[4044, 68],
		[4051, 58],
		[4058, 74],
		[4065, 61],
		[4072, 70],
		[4079, 40],
		[4086, 36],
		[4093, 65],
		[4100, 97],
		[4107, 30],
		[4114, 62],
		[4121, 22],
		[4128, 36]
	]
}
