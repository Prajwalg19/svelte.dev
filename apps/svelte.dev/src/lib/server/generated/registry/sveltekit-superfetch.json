{
	"name": "sveltekit-superfetch",
	"description": "Fetch data from APIs with logging and caching in SvelteKit.",
	"repo_url": "https://github.com/pevey/sveltekit-superfetch",
	"authors": ["pevey"],
	"homepage": "https://pevey.com/sveltekit-superfetch",
	"downloads": 286,
	"updated": "2025-01-22T04:08:16.102Z",
	"tags": ["server"],
	"github_stars": 7,
	"typescript": true,
	"version": "4.0.0",
	"svelte_range": "^5.0.0",
	"kit_range": "^2.0.0",
	"last_rune_check_version": "4.0.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "sveltekit-superfetch",
				"version": "4.0.0",
				"size": 15481
			},
			{
				"name": "@isaacs/ttlcache",
				"version": "1.4.1",
				"size": 25201
			},
			{
				"name": "nanoid",
				"version": "5.1.5",
				"size": 12143
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2]
		],
		"circular": []
	},
	"readme": "# sveltekit-superfetch\n\nSvelteKit libary for interacting with APIs with support for optional logging of requests and responses\n\n## Usage\n\nUsage is similar to using the standard fetch API.  No options are required.  The fetcher will default to a timeout of 8 seconds and 3 retries if no values for those options are specified.\n\n(The examples below work with v2.0.0 and above.)\n\n### Creating a New Instance\n\nThis is often best done in a lib that creates a singleton that can be imported as needed elsewhere in your project.  If you just want to use the defaults for all options, you can do:\n\n`lib/superfetch.ts`\n```ts\nimport { SuperFetch } from 'sveltekit-superfetch'\nexport default const superFetch = new SuperFetch() \n```\n\nYou can also customize the fetcher.  Example options:\n\n`lib/superfetch.ts`\n```ts\nimport { SuperFetch } from 'sveltekit-superfetch'\nexport default const superFetch = new SuperFetch({\n   retry: 3,\n   timeout: 8000, // 8 seconds\n   ttl: 1000, // 1 second. Max age of cached responses.  Only individual queries with a 'key' specified in the options will be cached.\n   logger: logger, // injected logger instance, default is `console`, must implement info() and error()\n   logFormat: 'json', // text or json, default is json\n   logLevel: 'verbose' | 'limited' | 'silent', // default is 'limited' in dev mode, 'silent' in prod\n   excludedPaths: ['/api/auth'], // an array of strings, fetches to routes containing these strings will not be logged\n   limitedPaths: ['/'] // an array of strings, log entries will not contain headers, bodies, cookies, or url params\n})\n```\n\nUsing the root path ('/') in the array of limitedPaths will make all log entries contain only limited information.  This could be useful if you need to trace an error, but your data is sensitive.\n\n### Example fetch with POST method, headers, and body\n\n```ts\nimport superFetch from '$lib/superFetch'\nconst response = await superFetch.query({\n   url: 'https://example.org', \n   method: 'POST',\n   headers: {\n      'Content-Type': 'application/json'\n   },\n   body: JSON.stringify({ key: 'value' })\n   // ...any other properties supported in basic fetch request\n   // see https://developer.mozilla.org/en-US/docs/Web/API/fetch\n})\n```\n\n### Example fetch that will be cached server-side with optional ttl override\n\n```ts\nimport superFetch from '$lib/superFetch'\nconst response = await superFetch.query({\n   url: 'https://example.org/api/product', \n   key: 'products',\n   ttl: 10000 // 10 seconds\n})\n```\n\nEven a cache with a relatively short ttl, such as 1 second, can provide a large performance boost and reduce hits to third-party APIs on high-traffic sites.  Do not attempt to cache request types other than GET.  Do not cache sensitive or dynamic endpoints, such as customer profiles.\n\n### Basic example with no options\n\n``` ts\nimport superFetch from '$lib/superFetch'\nconst response = await superFetch.query(\"https://example.org\")\n```\n\nIf you create a new instance of SuperFetch without passing in a logger instance, it will use console (console.log() and console.error()) by default.\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 93],
		[3603, 92],
		[3610, 72],
		[3617, 90],
		[3624, 126],
		[3631, 107],
		[3638, 51],
		[3645, 74],
		[3652, 115],
		[3659, 69],
		[3666, 101],
		[3673, 62],
		[3680, 253],
		[3687, 120],
		[3694, 137],
		[3701, 104],
		[3708, 113],
		[3715, 157],
		[3722, 162],
		[3729, 103],
		[3736, 103],
		[3743, 126],
		[3750, 162],
		[3757, 114],
		[3764, 70],
		[3771, 79],
		[3778, 136],
		[3785, 93],
		[3792, 149],
		[3799, 158],
		[3806, 130],
		[3813, 183],
		[3820, 98],
		[3827, 183],
		[3834, 47],
		[3841, 98],
		[3848, 73],
		[3855, 53],
		[3862, 43],
		[3869, 43],
		[3876, 50],
		[3883, 79],
		[3890, 79],
		[3897, 102],
		[3904, 70],
		[3911, 103],
		[3918, 77],
		[3925, 69],
		[3932, 75],
		[3939, 50],
		[3946, 65],
		[3953, 24],
		[3960, 85],
		[3967, 38],
		[3974, 23],
		[3981, 49],
		[3988, 49],
		[3995, 66],
		[4002, 78],
		[4009, 51],
		[4016, 63],
		[4023, 64],
		[4030, 70],
		[4037, 141],
		[4044, 73],
		[4051, 41],
		[4058, 72],
		[4065, 94],
		[4072, 173],
		[4079, 129],
		[4086, 88],
		[4093, 45],
		[4100, 73],
		[4107, 69],
		[4114, 286],
		[4121, 186],
		[4128, 59],
		[4135, 78]
	]
}
