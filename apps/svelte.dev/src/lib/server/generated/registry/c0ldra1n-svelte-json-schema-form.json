{
	"name": "@c0ldra1n/svelte-json-schema-form",
	"description": "Generate forms from JSON schema in Svelte apps.",
	"repo_url": "",
	"authors": ["c0ldra1n"],
	"downloads": 7,
	"updated": "2020-04-18T13:30:00.444Z",
	"tags": ["ui"],
	"typescript": false,
	"version": "0.0.7-4",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "0.0.7-4",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@c0ldra1n/svelte-json-schema-form",
				"version": "0.0.7-4",
				"size": 177264
			}
		],
		"dependencies": [],
		"circular": []
	},
	"legacy_svelte": true,
	"readme": "# svelte-json-schema-form\n\n## Howto\n\n## Writing Custom Widgets\n\n### Importing widgets\n\nWhen importing widgets, you must use the `*`(general import) identifier.\n\nThis is to access both the component itself and its metadata.\n\n```html\n<script>\n  import JSONSchemaForm from \"@c0ldra1n/svelte-json-schema-form\";\n  import * as StringWidget from \"./string-widget.svlete\";\n</script>\n\n<JSONSchemaForm widgets=\"{[StringFormWidget]}\" />\n```\n\n### Priorities\n\nCustom widgets have priorities over default widgets. Prioritiies within them are determined by the order they are inserted in.\n\n### Assigning widgets\n\nIt is important that a widget is instantiated from the correct, designated property. The following methods are used to \"resolve\" the widget from each properties.\n\nIf both `type` and `resolveWidget` are exported, the widget resolver code will first match for type, then execute `resolveWidget`.\n\n#### Type\n\n```html\n<script context=\"module\">\n  export const type = \"string\";\n</script>\n```\n\ntype could also be an array if it can support multiple types\n\n```html\n<script context=\"module\">\n  export const type = [\"integer\", \"number\"];\n</script>\n```\n\n#### shouldResolve\n\n```html\n<script context=\"module\">\n  export const shouldResolve = (propertyID, schema) => {\n      if(/*some condition*/){\n          // the widget will be displayed.\n          return true;\n      }else{\n          // the widget will not be displayed.\n          return false;\n      }\n  }\n</script>\n```\n\n### Recursive widgets\n\nIt is possible to use the `resolveWidget`function within a custom widget. Use `getContext(\"@c0ldra1n/svelte-json-schema-form\")` to access the function.\n\n```html\n<script>\n  import { getContext } from \"svelte\";\n  const { resolveWidget } = getContext(\"@c0ldra1n/svelte-json-schema-form\");\n</script>\n```\n\n### A note about `default`\n\nThe `default` key in JSON schema is retained, but is renamed as `defaultValue` during property assignment.\n\nWhen exporting properties from your custom widget, you should export `defaultValue` instead of `default`, as shown in the example below.\n\n```html\n<script>\n  export let defaultValue;\n</script>\n```\n",
	"downloads_history": [
		[3589, 2],
		[3596, 24],
		[3603, 2],
		[3610, 4],
		[3631, 1],
		[3638, 1],
		[3645, 3],
		[3652, 11],
		[3659, 5],
		[3666, 11],
		[3673, 11],
		[3687, 1],
		[3708, 13],
		[3715, 2],
		[3722, 1],
		[3736, 1],
		[3757, 1],
		[3764, 8],
		[3771, 5],
		[3778, 12],
		[3785, 1],
		[3799, 2],
		[3806, 2],
		[3813, 1],
		[3834, 3],
		[3841, 2],
		[3848, 2],
		[3855, 1],
		[3862, 58],
		[3876, 12],
		[3883, 4],
		[3890, 1],
		[3897, 7],
		[3904, 19],
		[3911, 1],
		[3918, 11],
		[3925, 1],
		[3932, 3],
		[3939, 2],
		[3946, 1],
		[3960, 13],
		[3988, 1],
		[4002, 11],
		[4009, 19],
		[4016, 3],
		[4023, 4],
		[4030, 17],
		[4037, 6],
		[4044, 5],
		[4051, 2],
		[4058, 13],
		[4072, 1],
		[4086, 23],
		[4093, 39],
		[4100, 14],
		[4114, 7],
		[4121, 9],
		[4128, 4]
	],
	"esm": true,
	"cjs": false
}
