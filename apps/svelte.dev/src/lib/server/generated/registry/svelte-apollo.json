{
	"name": "svelte-apollo",
	"description": "Integrate Apollo GraphQL with Svelte applications.",
	"authors": ["timhall"],
	"downloads": 1234,
	"updated": "2022-02-21T22:26:28.006Z",
	"tags": ["integration"],
	"typescript": true,
	"version": "0.5.0",
	"svelte_range": "^3",
	"last_rune_check_version": "0.5.0",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-apollo",
				"version": "0.5.0",
				"size": 36566
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-apollo\n\nSvelte integration for Apollo GraphQL.\n\n## Example\n\nThe following simple example shows how to run a simple query with svelte-apollo.\n\n```svelte\n<!-- App.svelte -->\n<Books />\n\n<script>\n  import { ApolloClient } from \"@apollo/client\";\n  import { setClient } from \"svelte-apollo\";\n  import Books from \"./Books.svelte\";\n\n  // 1. Create an Apollo client and pass it to all child components\n  //    (uses svelte's built-in context)\n  const client = new ApolloClient({\n    /* ... */\n  });\n  setClient(client);\n</script>\n```\n\n```svelte\n<!-- Books.svelte -->\n<script>\n  import { query } from \"svelte-apollo\";\n  import { GET_BOOKS } from \"./queries\";\n\n  // 2. Execute the GET_BOOKS GraphQL query using the Apollo client\n  //    -> Returns a svelte store of promises that resolve as values come in\n  const books = query(GET_BOOKS);\n</script>\n\n<!-- 3. Use $books (note the \"$\"), to subscribe to query values -->\n{#if $books.loading}\n  Loading...\n{:else if $books.error}\n  Error: {$books.error.message}\n{:else}\n  {#each $books.data.books as book}\n    {book.title} by {book.author.name}\n  {/each}\n{/if}\n```\n\n## API\n\n<a href=\"#query\" name=\"query\">#</a> <b>query</b>(<i>document</i>[, <i>options</i>])\n\nQuery an Apollo client, returning a readable store of result values.\nUses Apollo's [`watchQuery`](https://www.apollographql.com/docs/react/api/apollo-client.html#ApolloClient.watchQuery),\nfor fetching from the network and watching the local cache for changes.\nIf the client is hydrating after SSR, it attempts a `readQuery` to synchronously check the cache for values.\n\n```svelte\n<script>\n  import { query } from \"svelte-apollo\";\n  import { GET_BOOKS } from \"./queries\";\n\n  const books = query(GET_BOOKS, {\n    // variables, fetchPolicy, errorPolicy, and others\n  });\n\n  function reload() {\n    books.refetch();\n  }\n</script>\n\n<ul>\n  {#if $books.loading}\n    <li>Loading...</li>\n  {:else if $books.error}\n    <li>ERROR: {$books.error.message}</li>\n  {:else}\n    {#each $books.data.books as book (book.id)}\n      <li>{book.title} by {book.author.name}</li>\n    {/each}\n  {/if}\n</ul>\n\n<button on:click=\"{reload}\">Reload</button>\n```\n\nReactive variables are supported with `refetch`:\n\n```svelte\n<script>\n  import { query } from \"svelte-apollo\";\n  import { SEARCH_BY_AUTHOR } from \"./queries\";\n\n  export let author;\n  let search = \"\";\n\n  const books = query(SEARCH_BY_AUTHOR, {\n    variables: { author, search },\n  });\n\n  // `books` is refetched when author or search change\n  $: books.refetch({ author, search });\n</script>\n\nAuthor: {author}\n<label>Search <input type=\"text\" bind:value=\"{search}\" /></label>\n\n<ul>\n  {#if $books.loading}\n    <li>Loading...</li>\n  {:else if $books.error}\n    <li>ERROR: {$books.error.message}</li>\n  {:else if $books.data}\n    {#each $books.data.books as book (book.id)}\n      <li>{book.title}</li>\n    {/each}\n  {:else}\n    <li>No books found</li>\n  {/if}\n</ul>\n```\n\n<a href=\"#mutation\" name=\"mutation\">#</a> <b>mutation</b>(<i>document</i>[, <i>options</i>])\n\nPrepare a GraphQL mutation with the Apollo client, using Apollo's [`mutate`](https://www.apollographql.com/docs/react/api/apollo-client.html#ApolloClient.mutate).\n\n```svelte\n<script>\n  import { mutation } from \"svelte-apollo\";\n  import { ADD_BOOK } from \"./queries\";\n\n  const addBook = mutation(ADD_BOOK);\n  let title = \"\";\n  let author = \"\";\n\n  async function handleSubmit() {\n    try {\n      await addBook({ variables: { title, author } });\n    } catch (error) {\n      // TODO\n    }\n  }\n</script>\n\n<form on:submit|preventDefault=\"{handleSubmit}\">\n  <label for=\"book-author\">Author</label>\n  <input type=\"text\" id=\"book-author\" bind:value=\"{author}\" />\n\n  <label for=\"book-title\">Title</label>\n  <input type=\"text\" id=\"book-title\" bind:value=\"{title}\" />\n\n  <button type=\"submit\">Add Book</button>\n</form>\n```\n\n<a href=\"#subscribe\" name=\"subscribe\">#</a> <b>subscribe</b>(<i>document</i>[, <i>options</i>])\n\nSubscribe using an Apollo client, returning a store that is compatible with `{#await $...}`. Uses Apollo's [`subscribe`](https://www.apollographql.com/docs/react/api/apollo-client#ApolloClient.subscribe).\n\n```svelte\n<script>\n  import { subscribe } from \"svelte-apollo\";\n  import { NEW_BOOKS } from \"./queries\";\n\n  const newBooks = subscribe(NEW_BOOKS);\n</script>\n\n{#if $newBooks.loading}\n  Waiting for new books...\n{:else if $newBooks.data}\n  New Book: {$newBooks.data.book}\n{/if}\n```\n\n<a href=\"#restore\" name=\"restore\">#</a> <b>restore</b>(<i>document</i>, <i>options</i>)\n\nRestore a previously executed query (e.g. via preload) into the Apollo cache.\n\n```svelte\n<script context=\"module\">\n  import client from \"./client\";\n  import { GET_BOOKS } from \"./queries\";\n\n  export async function preload() {\n    return {\n      preloaded: await client.query({ query: GET_BOOKS }),\n    };\n  }\n</script>\n\n<script>\n  import { restore } from \"svelte-apollo\";\n\n  export let preloaded;\n\n  // Load preloaded values into client's cache\n  restore(GET_BOOKS, preloaded);\n</script>\n```\n\n<a href=\"#setClient\" name=\"setClient\">#</a> <b>setClient</b>(<i>client</i>)\n\nSet an Apollo client for the current component's and all child components' contexts.\n\n```svelte\n<!-- Parent.svelte -->\n<script>\n  import { setClient } from \"svelte-apollo\";\n  import client from \"./client\";\n\n  setClient(client);\n</script>\n```\n\n<a href=\"#getClient\" name=\"getClient\">#</a> <b>getClient</b>()\n\nGet an Apollo client from the current component's context.\n\n```svelte\n<!-- Child.svelte -->\n<script>\n  import { getClient } from \"svelte-apollo\";\n\n  const client = getClient();\n</script>\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 810],
		[3596, 1060],
		[3603, 1097],
		[3610, 708],
		[3617, 798],
		[3624, 779],
		[3631, 923],
		[3638, 814],
		[3645, 412],
		[3652, 540],
		[3659, 658],
		[3666, 1225],
		[3673, 1066],
		[3680, 951],
		[3687, 883],
		[3694, 799],
		[3701, 1135],
		[3708, 961],
		[3715, 688],
		[3722, 786],
		[3729, 783],
		[3736, 395],
		[3743, 597],
		[3750, 766],
		[3757, 637],
		[3764, 767],
		[3771, 561],
		[3778, 515],
		[3785, 567],
		[3792, 631],
		[3799, 787],
		[3806, 608],
		[3813, 651],
		[3820, 661],
		[3827, 654],
		[3834, 454],
		[3841, 648],
		[3848, 821],
		[3855, 465],
		[3862, 722],
		[3869, 523],
		[3876, 551],
		[3883, 947],
		[3890, 548],
		[3897, 651],
		[3904, 607],
		[3911, 720],
		[3918, 1056],
		[3925, 748],
		[3932, 990],
		[3939, 835],
		[3946, 865],
		[3953, 711],
		[3960, 987],
		[3967, 2004],
		[3974, 923],
		[3981, 1370],
		[3988, 979],
		[3995, 899],
		[4002, 821],
		[4009, 311],
		[4016, 793],
		[4023, 1106],
		[4030, 932],
		[4037, 1046],
		[4044, 1083],
		[4051, 748],
		[4058, 1007],
		[4065, 1240],
		[4072, 1661],
		[4079, 1323],
		[4086, 1287],
		[4093, 1124],
		[4100, 1484],
		[4107, 1428],
		[4114, 1234],
		[4121, 1373],
		[4128, 2036]
	],
	"esm": true,
	"cjs": false
}
