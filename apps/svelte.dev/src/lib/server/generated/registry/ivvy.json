{
	"name": "ivvy",
	"description": "Form manager with type-safe validators, i18n/l10n support.",
	"repo_url": "https://github.com/romelperez/ivvy",
	"authors": ["romelperez"],
	"homepage": "https://github.com/romelperez/ivvy",
	"downloads": 9,
	"updated": "2024-03-27T03:15:55.115Z",
	"tags": ["miscellaneous"],
	"github_stars": 0,
	"typescript": true,
	"version": "2.2.0",
	"svelte_range": "^4.2.12",
	"last_rune_check_version": "2.2.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "ivvy",
				"version": "2.2.0",
				"size": 61669
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Ivvy\n\n[![version](https://img.shields.io/npm/v/ivvy)](https://npmjs.org/package/ivvy)\n[![tests](https://github.com/romelperez/ivvy/workflows/tests/badge.svg)](https://github.com/romelperez/ivvy/actions)\n[![codefactor](https://www.codefactor.io/repository/github/romelperez/ivvy/badge)](https://www.codefactor.io/repository/github/romelperez/ivvy)\n[![npm bundle size](https://img.shields.io/bundlephobia/minzip/ivvy.svg)](https://bundlephobia.com/package/ivvy)\n[![downloads](https://img.shields.io/npm/dm/ivvy.svg)](https://npmjs.org/package/ivvy)\n[![github stars](https://img.shields.io/github/stars/romelperez/ivvy.svg?style=social&label=stars)](https://github.com/romelperez/ivvy)\n[![license](https://img.shields.io/github/license/romelperez/ivvy.svg)](https://github.com/romelperez/ivvy/blob/main/LICENSE)\n\nForm manager with dynamic type safe validators and i18n/l10n support.\n\nIt works out-of-the-box with Svelte 4 due to its simple API.\n\n[Yrel](https://github.com/romelperez/yrel) is used for data validation and\n[Ukti](https://github.com/romelperez/ukti) for error reports l10n and i18n.\n\n## Install\n\nFor any ESM and CommonJS JavaScript environment. If TypeScript is used, version 4.5+ is required.\n\n```bash\nnpm i ivvy\n```\n\n[Yrel](https://github.com/romelperez/yrel) and [Ukti](https://github.com/romelperez/ukti)\nas peer dependencies.\n\n```bash\nnpm i yrel ukti\n```\n\n## Example Usage\n\nIvvy provides a TypeScript API to configure an universal form manager with easy\nto define validators and error translations.\n\n```svelte\n<script lang=\"ts\">\n  import { onDestroy } from 'svelte'\n  import { type IvvyManagerPropsTranslations, createIvvyManager } from 'ivvy'\n  import { type InferYrel, y } from 'yrel'\n\n  const schema = y.object({\n    name: y.string().min(2).max(20),\n    age: y.number().gte(18).lte(150).nullable()\n  })\n\n  type FormData = InferYrel<typeof schema>\n\n  const translations: IvvyManagerPropsTranslations = {\n    en: {\n      err_number: 'A valid number is required.',\n      err_number_gte: 'This number should be at least {{gte}}.',\n      err_number_lte: 'This number should be at most {{lte}}.',\n      err_string: 'A valid text is required.',\n      err_string_min: 'This field should have at least {{min}} character{{min === 1 ? \"\" : \"s\"}}.',\n      err_string_max: 'This field should have at most {{max}} character{{max === 1 ? \"\" : \"s\"}}.'\n    }\n  }\n\n  const manager = createIvvyManager<FormData>({\n    initialData: {\n      name: 'Ivvy',\n      age: 21\n    },\n    formatters: {\n      age: (value) => (Number.isFinite(value) ? Number(value) : null)\n    },\n    validators: schema,\n    translations,\n    preventSubmit: 'always',\n    onSubmit: (data) => console.log(data)\n  })\n\n  const { touches, errors, useFormElement, useFieldElement } = manager\n\n  onDestroy(() => manager.destroy())\n</script>\n\n<form use:useFormElement>\n  <label>\n    Name:\n    <input name=\"name\" type=\"text\" use:useFieldElement />\n    <div>{($touches.name && $errors.name?.[0]) || ''}</div>\n  </label>\n\n  <label>\n    Age:\n    <input name=\"age\" type=\"number\" use:useFieldElement />\n    <div>{($touches.age && $errors.age?.[0]) || ''}</div>\n  </label>\n\n  <button type=\"submit\">Submit</button>\n</form>\n```\n\nThe Ivvy form manager or just the [Yrel](https://github.com/romelperez/yrel) schema\ncan be reused in multiple environments or multiple forms. The\n[Ukti](https://github.com/romelperez/ukti) translations are optional.\n\n## Form Data\n\nThe manager form data can be an object and each property representing a form field\nwith any kind of data.\n\nThe initial data object has to have all the properties. They can be `undefined` / `null`.\n\n```ts\nimport { createIvvyManager } from 'ivvy'\n\ntype FormData = {\n  name: string\n  age: number\n}\n\nconst manager = createIvvyManager<FormData>({\n  initialData: {\n    name: null,\n    age: null\n  }\n})\n```\n\n## Validators\n\nThe form data validators have to be explicitely defined for each object property.\n\nThe validators can be defined using [Yrel](https://github.com/romelperez/yrel) schema validations.\n\nEvery time there is a validation there is an manager `data` update with the possibly\nnew validation data transformation. e.g. Yrel data transformations.\n\n```ts\nimport { createIvvyManager } from 'ivvy'\nimport { type InferYrel, y } from 'yrel'\n\nconst schema = y.object({\n  name: y.string().min(2).max(20),\n  age: y.number().gte(18).lte(150).nullable()\n})\n\ntype FormData = InferYrel<typeof schema>\n\nconst manager = createIvvyManager<FormData>({\n  initialData: {\n    name: 'Ivvy',\n    age: 21\n  },\n  validators: schema\n})\n```\n\nValidators can be individual Yrel schema validators.\n\n```ts\nimport { createIvvyManager } from 'ivvy'\nimport { y } from 'yrel'\n\ntype FormData = {\n  name: string\n  age: number\n}\n\nconst manager = createIvvyManager<FormData>({\n  initialData: {\n    name: 'Ivvy',\n    age: 21\n  },\n  validators: {\n    name: y.string().min(2).max(20),\n    age: y.number().gte(18).lte(150).nullable()\n  }\n})\n```\n\nValidators can be dynamic Yrel schema validators based on the current form data.\n\n```ts\nimport { createIvvyManager } from 'ivvy'\nimport { y } from 'yrel'\n\ntype FormData = {\n  name: string\n  age: number\n}\n\nconst manager = createIvvyManager<FormData>({\n  initialData: {\n    name: 'Ivvy',\n    age: 21\n  },\n  validators: {\n    name: (data) => y.string().min(2).max(20),\n    age: (data) => y.number().gte(18).lte(150).nullable()\n  }\n})\n```\n\nValidators can be any function validating the input data and returning `true` as valid\nor an array of string error reports.\n\n```ts\nimport { createIvvyManager } from 'ivvy'\n\ntype FormData = {\n  name: string\n  age: number\n}\n\nconst manager = createIvvyManager<FormData>({\n  initialData: {\n    name: 'Ivvy',\n    age: 21\n  },\n  validators: {\n    name: (data) => data.name.length > 2 || ['min length 2'],\n    age: (data) => data.age > 18 || ['min value 18']\n  }\n})\n```\n\n## Formatters\n\nA form field value can be formatted from user input before validations.\nThese functions will not apply for the initial data provided in settings\nnor dynamic data updates.\n\n```ts\nimport { createIvvyManager } from 'ivvy'\n\ntype FormData = {\n  name: string\n  age: number\n}\n\nconst manager = createIvvyManager<FormData>({\n  initialData: {\n    name: 'Ivvy',\n    age: 21\n  },\n  formatters: {\n    // Make all text uppercase.\n    name: (value) => String(value).toUpperCase(),\n    // Make it `null` if not a valid number.\n    age: (value) => (Number.isFinite(value) ? Number(value) : null)\n  }\n})\n```\n\n## Translations\n\n[Ukti](https://github.com/romelperez/ukti) can be used for error translations and\nin combination with [Yrel](https://github.com/romelperez/yrel) schema validators reports.\n\n```ts\nimport { type IvvyManagerPropsTranslations, createIvvyManager } from 'ivvy'\nimport { type InferYrel, y } from 'yrel'\n\nconst schema = y.object({\n  name: y.string().min(2).max(20),\n  age: y.number().gte(18).lte(150).nullable()\n})\n\ntype FormData = InferYrel<typeof schema>\n\nconst translations: IvvyManagerPropsTranslations = {\n  en: {\n    err_number: 'A valid number is required.',\n    err_number_gte: 'This number should be at least {{gte}}.',\n    err_number_lte: 'This number should be at most {{lte}}.',\n    err_string: 'A valid text is required.',\n    err_string_min: 'This field should have at least {{min}} character{{min === 1 ? \"\" : \"s\"}}.',\n    err_string_max: 'This field should have at most {{max}} character{{max === 1 ? \"\" : \"s\"}}.'\n  }\n  es: {\n    err_number: 'Un número válido es requerido.',\n    err_number_gte: 'El número debe ser al menos {{gte}}.',\n    err_number_lte: 'El número debe ser por mucho {{lte}}.',\n    err_string: 'Un texto válido es requerido.',\n    err_string_min: 'El texto debe tener al menos {{min}} carácteres{{min === 1 ? \"\" : \"s\"}}.',\n    err_string_max: 'El texto debe tener por mucho {{max}} carácteres{{max === 1 ? \"\" : \"s\"}}.'\n  }\n}\n\nconst manager = createIvvyManager<FormData>({\n  initialData: {\n    name: 'Ivvy',\n    age: 21\n  },\n  validators: schema,\n  language: 'en', // Defaults to 'en'.\n  translations\n})\n```\n\n## API\n\n### `createIvvyManager<Data>(props: IvvyManagerProps<Data>): IvvyManager<Data>`\n\nCreate a form manager with the provided settings.\n\n#### `IvvyManagerProps<Data>.initialData: { [P in keyof Required<Data>]: Data[P] | undefined | null }`\n\nThe initial form data. All fields are required. They can be `undefined` / `null`.\n\n#### `IvvyManagerProps<Data>.validators: YrelSchema<Data> | { [P in keyof Data]: YrelSchema<Data[P]> | ((data: Data) => true | string[] | YrelSchema<Data[P]>) }`\n\nEach data field validator are required. They can be Yrel schema validators or\nbasic functions returning `true` or an array of string error messages `string[]`.\n\n#### `IvvyManagerProps<Data>.formatters?: { [P in keyof Data]?: (value: unknown, data: Data) => Data[P] }`\n\nOptional data fields formatters.\n\n#### `IvvyManagerProps<Data>.preventSubmit?: 'always' | 'onError' | false = 'onError'`\n\nPrevent default form submit functionalities.\n\n#### `IvvyManagerProps<Data>.cleanInputFileValue?: boolean = true`\n\nRemove the value of input type file after change event. This will allow the user\nto re-select the same files if necessary.\n\n#### `IvvyManagerProps<Data>.translations?: IvvyManagerPropsTranslations`\n\nThe translations for the error messages.\n\n#### `IvvyManagerProps<Data>.language?: UktiLanguages = 'en'`\n\nAny [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) locale/language\ncode to use from the `translations` provided.\n\n#### `IvvyManagerProps<Data>.onUpdate?: (data: Data) => void`\n\nOn form field update callback.\n\n#### `IvvyManagerProps<Data>.onSubmit?: (data: Data, event: Event) => void`\n\nOn form submit event callback when the form data is valid.\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 65],
		[3596, 10],
		[3603, 2],
		[3610, 3],
		[3617, 8],
		[3631, 2],
		[3638, 2],
		[3645, 8],
		[3652, 19],
		[3659, 60],
		[3666, 111],
		[3673, 65],
		[3680, 25],
		[3687, 50],
		[3694, 36],
		[3701, 62],
		[3708, 30],
		[3715, 61],
		[3722, 57],
		[3729, 161],
		[3736, 236],
		[3743, 86],
		[3750, 62],
		[3757, 94],
		[3764, 50],
		[3771, 103],
		[3778, 73],
		[3785, 82],
		[3792, 125],
		[3799, 121],
		[3806, 133],
		[3813, 205],
		[3820, 147],
		[3827, 156],
		[3834, 140],
		[3841, 192],
		[3848, 209],
		[3855, 126],
		[3862, 173],
		[3869, 78],
		[3876, 176],
		[3883, 166],
		[3890, 135],
		[3897, 206],
		[3904, 179],
		[3911, 111],
		[3918, 89],
		[3925, 13],
		[3932, 3],
		[3939, 4],
		[3946, 10],
		[3960, 4],
		[3967, 18],
		[3974, 1],
		[3981, 10],
		[3988, 1],
		[3995, 6],
		[4002, 2],
		[4009, 3],
		[4016, 16],
		[4023, 11],
		[4037, 3],
		[4044, 28],
		[4051, 11],
		[4058, 3],
		[4065, 2],
		[4072, 2],
		[4079, 2],
		[4100, 33],
		[4107, 2],
		[4114, 9],
		[4121, 18],
		[4128, 2]
	]
}
