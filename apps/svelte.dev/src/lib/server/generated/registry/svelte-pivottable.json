{
	"name": "svelte-pivottable",
	"description": "Create pivot tables with drag and drop functionality.",
	"repo_url": "https://github.com/jjagielka/svelte-pivottable",
	"authors": ["jjagielka"],
	"homepage": "https://github.com/jjagielka/svelte-pivottable#readme",
	"downloads": 29,
	"updated": "2024-11-29T16:14:51.072Z",
	"tags": ["ui"],
	"github_stars": 27,
	"typescript": true,
	"version": "0.2.2",
	"svelte_range": "^3.55.1",
	"kit_range": "^1.5.5",
	"last_rune_check_version": "0.2.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-pivottable",
				"version": "0.2.2",
				"size": 132407
			},
			{
				"name": "sortablejs",
				"version": "1.15.6",
				"size": 640877
			},
			{
				"name": "svelte",
				"version": "3.59.2",
				"size": 10624206
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2]
		],
		"circular": []
	},
	"readme": "# svelte-pivottable\n\nThis is a Svelte component implementation of [react-pivottable-grouping](https://github.com/jjagielka/react-pivottable-grouping) that is itself a fork of [react-pivottable](https://react-pivottable.js.org/) with added capacity of grouping and displaying subtotals.\n\n# svelte-pivottable\n\n`svelte-pivottable` is a Svelte-based pivot table library with drag'n'drop functionality.\n\nIt is based on the original work of [Nicolas Kruchten](https://github.com/nicolaskruchten) author of [react-pivottable](https://react-pivottable.js.org/) a React port of the jQuery-based\n[PivotTable.js](https://pivottable.js.org/) by the same author.\n\n## What does it do & where is the demo?\n\n`svelte-pivottable`'s function is to enable data exploration and analysis by\nsummarizing a data set into table or [Plotly.js](https://plot.ly/javascript/)\nchart with a true 2-d drag'n'drop UI, very similar to the one found in older\nversions of Microsoft Excel.\n\nA [live demo can be found here](https://jjagielka.github.io/svelte-pivottable-demo/).\n\n![screencap](https://raw.githubusercontent.com/jjagielka/react-pivottable-grouping/master/examples/basic.gif)\n\n## How can I use it in my project?\n\n### Drag'n'drop UI with Table output only\n\nInstallation is via NPM or Yarn:\n\n```\nnpm install --save svelte-pivottable\n\nyarn add svelte-pivottable\n```\n\nBasic usage is as follows. Note that `PivotTableUI` is a \"dumb component\" that\nmaintains essentially no state of its own.\n\n```svelte\n<script>\n    import { PivotTableUI } from \"svelte-pivottable/PivotTableUI\";\n\n    const options = {\n        // see documenation for supported options\n        };\n\n    // see documentation for supported input formats\n    const data = [\n        [\"attribute\", \"attribute2\"],\n        [\"value1\", \"value2\"],\n    ];\n</script>\n\n<PivotTableUI {...options} {data}>\n```\n\n### Drag'n'drop UI with Plotly charts as well as Table output\n\nThe Plotly `plotly.js` component can be passed in via dependency injection. \n\n**Important:** If you build your project using webpack, you'll have to follow\n[these instructions](https://github.com/plotly/plotly.js#building-plotlyjs-with-webpack)\nin order to successfully bundle `plotly.js`. See below for how to avoid having\nto bundle `plotly.js`.\n\n```\nnpm install --save plotly.js\n```\n\nTo add the Plotly renderers to your app, you can use the following pattern:\n\n```svelte\n<script>\n    import { PivotTableUI } from \"svelte-pivottable/PivotTableUI\";\n    import TableRenderers from \"svelte-pivottable/TableRenderers\";\n    import Plotly from \"plotly.js\";\n    import PlotlyRenderers from \"svelte-pivottable/PlotlyRenderers\";\n\n    // create Plotly renderers via dependency injection\n    const plotlyRenderers = PlotlyRenderers(Plotly);\n\n    // see documentation for supported input formats\n    const data = [\n        [\"attribute\", \"attribute2\"],\n        [\"value1\", \"value2\"],\n    ];\n</script>\n\n<PivotTableUI\n    data={data}\n    renderers={Object.assign({}, TableRenderers, plotlyRenderers)}\n/>\n```\n\n#### With external `plotly.js`\n\nIf you would rather not install and bundle `plotly.js` but rather get it into\nyour app via something like `<script>` tag, you can handle the dependency injection like this:\n\n```svelte\n<script>\n    import { PivotTableUI } from \"svelte-pivottable/PivotTableUI\";\n    import TableRenderers from \"svelte-pivottable/TableRenderers\";\n    import PlotlyRenderers from \"svelte-pivottable/PlotlyRenderers\";\n\n    // create Plotly renderers via dependency injection\n    const plotlyRenderers = PlotlyRenderers(window.Plotly);\n\n    // see documentation for supported input formats\n    const data = [\n        [\"attribute\", \"attribute2\"],\n        [\"value1\", \"value2\"],\n    ];\n</script>\n\n<PivotTableUI\n    data={data}\n    renderers={...TableRenderers, ...plotlyRenderers)}\n/>\n```\n\n## Properties and layered architecture\n\n-   `<PivotTableUI {...props} />`\n    -   `<PivotTable {...props} />`\n        -   `<Renderer {...props} />`\n            -   `PivotData(props)`\n\nThe interactive component provided by `svelte-pivottable` is `PivotTableUI`, but\noutput rendering is delegated to the non-interactive `PivotTable` component,\nwhich accepts a subset of its properties. `PivotTable` can be invoked directly\nand is useful for outputting non-interactive saved snapshots of `PivotTableUI`\nconfigurations. `PivotTable` in turn delegates to a specific renderer component,\nsuch as the default `TableRenderer`, which accepts a subset of the same\nproperties. Finally, most renderers will create `PivotData` object to\nhandle the actual computations, which also accepts a subset of the same props as\nthe rest of the stack.\n\nHere is a table of the properties accepted by this stack, including an\nindication of which layer consumes each, from the bottom up:\n\n| Layer          | Key & Type                                       | Default Value                 | Description|\n| -------------- | ------------------------------------------------ | ----------------------------- ||\n| `PivotData`    | `data` <br /> see below for formats              | (none, required)              | data to be summarized                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |\n| `PivotData`    | `rows` <br /> array of strings                   | `[]`                          | attribute names to prepopulate in row area|\n| `PivotData`    | `cols` <br /> array of strings                   | `[]`                          | attribute names to prepopulate in cols area                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| `PivotData`    | `vals` <br /> array of strings                   | `[]`                          | attribute names used as arguments to aggregator (gets passed to aggregator generating function)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |\n| `PivotData`    | `aggregators` <br /> object of functions         | `aggregators` from `Utilites` | dictionary of generators for aggregation functions in dropdown (see [original PivotTable.js documentation](https://github.com/nicolaskruchten/pivottable/wiki/Aggregators))                                                                                                                                                                                                                                                                                                                                                                                                                                   |\n| `PivotData`    | `aggregatorName` <br /> string                   | first key in `aggregators`    | key to `aggregators` object specifying the aggregator to use for computations|\n| `PivotData`    | `valueFilter` <br /> object of arrays of strings | `{}`                          | object whose keys are attribute names and values are objects of attribute value-boolean pairs which denote records to include or exclude from computation and rendering; used to prepopulate the filter menus that appear on double-click                                                                                                                                                                                                                                                                                                                                                                     |\n| `PivotData`    | `sorters` <br /> object or function              | `{}`                          | accessed or called with an attribute name and can return a [function which can be used as an argument to `array.sort`](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) for output purposes. If no function is returned, the default sorting mechanism is a built-in \"natural sort\" implementation. Useful for sorting attributes like month names, see [original PivotTable.js example 1](http://nicolas.kruchten.com/pivottable/examples/mps_agg.html) and [original PivotTable.js example 2](http://nicolas.kruchten.com/pivottable/examples/montreal_2014.html). |\n| `PivotData`    | `rowOrder` <br /> string                         | `\"key_a_to_z\"`                | the order in which row data is provided to the renderer, must be one of `\"key_a_to_z\"`, `\"value_a_to_z\"`, `\"value_z_to_a\"`, ordering by value orders by row total                                                                                                                                                                                                                                                                                                                                                                                                                                             |\n| `PivotData`    | `colOrder` <br /> string                         | `\"key_a_to_z\"`                | the order in which column data is provided to the renderer, must be one of `\"key_a_to_z\"`, `\"value_a_to_z\"`, `\"value_z_to_a\"`, ordering by value orders by column total                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n| `PivotData`    | `derivedAttributes` <br /> object of functions   | `{}`                          | defines derived attributes (see [original PivotTable.js documentation](https://github.com/nicolaskruchten/pivottable/wiki/Derived-Attributes))                                                                                                                                                                                                                                                                                                                                                                                                                                                                |\n| `Renderer`     | `<any>`                                          | (none, optional)              | Renderers may accept any additional properties|\n| `PivotTable`   | `renderers` <br /> object of functions           | `TableRenderers`              | dictionary of renderer components|\n| `PivotTable`   | `rendererName` <br /> string                     | first key in `renderers`      | key to `renderers` object specifying the renderer to use|\n| `PivotTableUI` | `onChange` <br /> function                       | (none, required)              | function called every time anything changes in the UI, with the new value of the properties needed to render the new state. This function must be hooked into a state-management system in order for the \"dumb\" `PivotTableUI` component to work.                                                                                                                                                                                                                                                                                                                                                             |\n| `PivotTableUI` | `hiddenAttributes` <br /> array of strings       | `[]`                          | contains attribute names to omit from the|\n| `PivotTableUI` | `hiddenFromAggregators` <br /> array of strings  | `[]`                          | contains attribute names to omit from the aggregator arguments dropdowns|\n| `PivotTableUI` | `hiddenFromDragDrop` <br /> array of strings     | `[]`                          | contains attribute names to omit from the drag'n'drop portion of the|\n| `PivotTableUI` | `menuLimit` <br /> integer                       | 500                           | maximum number of values to list in the double-click menu|\n| `PivotTableUI` | `unusedOrientationCutoff` <br /> integer         | 85                            | If the attributes' names' combined length in characters exceeds this value then the unused attributes area will be shown vertically to the left of the UI instead of horizontally above it. `0` therefore means 'always vertical', and `Infinity` means 'always horizontal'.                                                                                                                                                                                                                                                                                                                                  |\n\n### Accepted formats for `data`\n\n#### Arrays of objects\n\nOne object per record, the object's keys are the attribute names.\n\n_Note_: missing attributes or attributes with a value of `null` are treated as\nif the value was the string `\"null\"`.\n\n```js\nconst data = [\n    {\n        attr1: \"value1_attr1\",\n        attr2: \"value1_attr2\",\n        //...\n    },\n    {\n        attr1: \"value2_attr1\",\n        attr2: \"value2_attr2\",\n        //...\n    },\n    //...\n];\n```\n\n#### Arrays of arrays\n\nOne sub-array per record, the first sub-array contains the attribute names. If\nsubsequent sub-arrays are shorter than the first one, the trailing values are\ntreated as if they contained the string value `\"null\"`. If subsequent sub-arrays\nare longer than the first one, excess values are ignored. This format is\ncompatible with the output of CSV parsing libraries like PapaParse.\n\n```js\nconst data = [\n    [\"attr1\", \"attr2\"],\n    [\"value1_attr1\", \"value1_attr2\"],\n    [\"value2_attr1\", \"value2_attr2\"],\n    //...\n];\n```\n\n#### Functions that call back\n\nThe function will be called with a callback that takes an object as a parameter.\n\n_Note_: missing attributes or attributes with a value of `null` are treated as\nif the value was the string `\"null\"`.\n\n```js\nconst data = function(callback) {\n    callback({\n        \"attr1\": \"value1_attr1\",\n        \"attr2\": \"value1_attr2\",\n        //...\n    });\n    callback({\n        \"attr1\": \"value2_attr1\",\n        \"attr2\": \"value2_attr2\",\n        //...\n    };\n    //...\n};\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 4],
		[3596, 7],
		[3603, 8],
		[3610, 16],
		[3617, 6],
		[3624, 8],
		[3631, 7],
		[3638, 3],
		[3645, 6],
		[3652, 15],
		[3659, 7],
		[3666, 27],
		[3673, 6],
		[3680, 2],
		[3687, 3],
		[3694, 5],
		[3701, 10],
		[3708, 2],
		[3715, 12],
		[3722, 4],
		[3729, 2],
		[3736, 13],
		[3743, 7],
		[3750, 20],
		[3757, 7],
		[3764, 4],
		[3771, 12],
		[3778, 5],
		[3785, 4],
		[3792, 9],
		[3799, 17],
		[3806, 20],
		[3813, 30],
		[3820, 21],
		[3827, 9],
		[3834, 6],
		[3841, 36],
		[3848, 53],
		[3855, 41],
		[3862, 15],
		[3869, 9],
		[3876, 17],
		[3883, 7],
		[3890, 25],
		[3897, 22],
		[3904, 17],
		[3911, 51],
		[3918, 32],
		[3925, 68],
		[3932, 39],
		[3939, 30],
		[3946, 19],
		[3953, 23],
		[3960, 15],
		[3967, 7],
		[3974, 16],
		[3981, 149],
		[3988, 47],
		[3995, 21],
		[4002, 7],
		[4009, 20],
		[4016, 18],
		[4023, 16],
		[4030, 23],
		[4037, 28],
		[4044, 32],
		[4051, 16],
		[4058, 14],
		[4065, 15],
		[4072, 17],
		[4079, 9],
		[4086, 34],
		[4093, 23],
		[4100, 25],
		[4107, 62],
		[4114, 29],
		[4121, 33],
		[4128, 12]
	]
}
