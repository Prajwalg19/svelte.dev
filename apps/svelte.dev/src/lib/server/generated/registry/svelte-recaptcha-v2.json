{
	"name": "svelte-recaptcha-v2",
	"description": "Implement Google ReCaptcha v2 in Svelte and SvelteKit.",
	"repo_url": "https://github.com/basaran/svelte-recaptcha-v2",
	"authors": ["anakha"],
	"homepage": "https://github.com/basaran/svelte-recaptcha-v2#readme",
	"downloads": 545,
	"updated": "2021-10-21T01:52:04.074Z",
	"tags": ["integration"],
	"github_stars": 43,
	"typescript": false,
	"version": "0.0.2",
	"svelte_range": "^3.44.0",
	"last_rune_check_version": "0.0.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-recaptcha-v2",
				"version": "0.0.2",
				"size": 48617
			},
			{
				"name": "debug",
				"version": "4.4.0",
				"size": 42798
			},
			{
				"name": "ms",
				"version": "2.1.3",
				"size": 6721
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2]
		],
		"circular": []
	},
	"readme": "![svelte-recaptcha-v2](https://user-images.githubusercontent.com/30809170/138197082-b92887d5-a875-41ee-9939-cbb8aba9ab6b.png)\n\n# svelte-recaptcha-v2\n\n[Google reCAPTCHA v2](https://developers.google.com/recaptcha/docs/display)  implementation for Svelte SPA, SSR and  sveltekit static sites.\n\n## Features\n\n - [x] svelte server side rendering (SSR) friendly.\n - [x] works with sveltekit SPA, SSR and static site adapters.\n - [x] easy integration with third party form validation libraries.\n - [x] fail-safe loader to inject recaptcha.\n - [x] invisible recaptcha or checkbox recaptcha support.\n - [x] event model for intercepting various recaptcha states.\n - [x] handle all your form logic in a single submit handler.\n - [x] proper DOM cleanup (deletes recaptcha completely)\n - [x] documented, debug.js friendly source code.\n - [x] typescript definitions are included for LSP.\n\n## Demonstration\n[svelte-recaptcha-v2 demo](https://basaran.github.io/svelte-recaptcha-v2/)\n\n## Getting Started\n```bash\n# install as a development dependency\npnpm install -D svelte-recaptcha-v2\n```\n\n## Basic Usage\n\nImport the library onto your template and update your google key:\n\n```js\nimport { Recaptcha, recaptcha, observer } from \"svelte-recaptcha-v2\";\n/*\n │Recaptcha: svelte <Recaptcha> component.\n │recaptcha: google method, gives you recaptcha.execute().\n │observer: allows you to track captcha state across components.\n */\n\nconst googleRecaptchaSiteKey=\"replace_with_yours\";\n\nlet observer;\n/*binding for tracking recaptcha execution*/\n```\n\nIn your form, add the component:\n\n```svelte\n<Recaptcha\n    sitekey={googleRecaptchaSiteKey}\n    badge={\"top\"}\n    size={\"invisible\"}\n    on:success={onCaptchaSuccess}\n    on:error={onCaptchaError}\n    on:expired={onCaptchaExpire}\n    on:close={onCaptchaClose}\n    on:ready={onCaptchaReady} />\n</form>\n```\n\nSetup your event handlers:\n\n```js\nconst onCaptchaReady = (event) => {\n    console.log(\"recaptcha init has completed.\")\n    /*\n     │You can enable your form button here.\n     */\n};\n\nconst onCaptchaSuccess = (event) => {\n    userTracker.resolve(event);\n    console.log(\"token received: \" + event.detail.token);\n    /*\n     │If using checkbox method, you can attach your\n     │form logic here, or dispatch your custom event.\n     */\n};\n\nconst onCaptchaError = (event) => {\n    console.log(\"recaptcha init has failed.\");\n    /*\n     │Usually due to incorrect siteKey.\n     |Make sure you have the correct siteKey..\n     */\n};\n\nconst onCaptchaExpire = (event) => {\n    console.log(\"recaptcha api has expired\");\n    /*\n     │Normally, you wouldn't need to do anything.\n     │Recaptcha should reinit itself automatically.\n     */\n};\n\nconst onCaptchaOpen = (event) => {\n    console.log(\"google decided to challange the user\");\n    /*\n     │This fires when the puzzle frame pops.\n     */\n};\n\nconst onCaptchaClose = (event) => {\n    console.log(\"google decided to challange the user\");\n    /*\n     │This fires when the puzzle frame closes.\n     │Usually happens when the user clicks outside\n     |the modal frame.\n     */\n};\n```\n\nUpdate your form handler:\n\n```js\nconst submitHandler = async () => {\n    console.log(\"launching recaptcha\");\n    recaptcha.execute();\n\n    console.log(\"pending for google response\");\n    const event = await Promise.resolve(observer);\n\n    const recaptchaToken = event.detail?.token ? event.detail.token : false;\n\n    if (!recaptchaToken) {\n        console.log(\"recaptcha is NOT OK\");\n        return false;\n    }\n\n    console.log(\"token retrieved\", recaptchaToken);\n};\n```\n\n## Debugging\n\nIf you would like to enable client side debugging, add `{Recaptcha}` value to your localStorage `DEBUG` key.\n\n## Issues\n\nIf any trouble, please create an issue. PRs are most welcome.\n\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 265],
		[3596, 241],
		[3603, 176],
		[3610, 240],
		[3617, 432],
		[3624, 342],
		[3631, 368],
		[3638, 312],
		[3645, 182],
		[3652, 264],
		[3659, 362],
		[3666, 285],
		[3673, 320],
		[3680, 250],
		[3687, 320],
		[3694, 310],
		[3701, 164],
		[3708, 363],
		[3715, 508],
		[3722, 694],
		[3729, 602],
		[3736, 366],
		[3743, 418],
		[3750, 312],
		[3757, 274],
		[3764, 328],
		[3771, 311],
		[3778, 378],
		[3785, 348],
		[3792, 547],
		[3799, 535],
		[3806, 503],
		[3813, 513],
		[3820, 483],
		[3827, 622],
		[3834, 416],
		[3841, 444],
		[3848, 465],
		[3855, 319],
		[3862, 380],
		[3869, 229],
		[3876, 271],
		[3883, 1059],
		[3890, 1105],
		[3897, 934],
		[3904, 619],
		[3911, 386],
		[3918, 851],
		[3925, 496],
		[3932, 246],
		[3939, 306],
		[3946, 207],
		[3953, 301],
		[3960, 248],
		[3967, 283],
		[3974, 140],
		[3981, 351],
		[3988, 334],
		[3995, 264],
		[4002, 442],
		[4009, 251],
		[4016, 261],
		[4023, 297],
		[4030, 318],
		[4037, 276],
		[4044, 377],
		[4051, 368],
		[4058, 331],
		[4065, 412],
		[4072, 508],
		[4079, 733],
		[4086, 538],
		[4093, 359],
		[4100, 659],
		[4107, 696],
		[4114, 545],
		[4121, 412],
		[4128, 379]
	]
}
