{
	"name": "svelte-async-readable",
	"description": "Create readable stores bound to async resources.",
	"repo_url": "https://github.com/cdellacqua/svelte-async-readable",
	"authors": ["cdellacqua"],
	"homepage": "https://github.com/cdellacqua/svelte-async-readable",
	"downloads": 16,
	"updated": "2021-09-18T20:14:25.771Z",
	"tags": ["miscellaneous"],
	"github_stars": 5,
	"typescript": true,
	"version": "4.0.2",
	"svelte_range": "^3.42.6",
	"last_rune_check_version": "4.0.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-async-readable",
				"version": "4.0.2",
				"size": 11903
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-async-readable\n\nSvelte Readable Store bound to an async resource\n\n\n[NPM Package](https://www.npmjs.com/package/svelte-async-readable)\n\n`npm install svelte-async-readable`\n\n## Full documentation:\n* [AsyncReadable](https://github.com/cdellacqua/svelte-async-readable/blob/master/docs/README.md)\n\n## Working demo:\n* [App.svelte](https://github.com/cdellacqua/svelte-async-readable/blob/master/src/App.svelte)\n\nYou can clone this repo and run `npm run dev` to see it working\n\n## Highlights\n\nCreate an async readable associated with a GET request:\n```js\nconst myReadable = asyncReadable(writable(null), {\n\tdataProvider: () => axios.get('/path/to/api').then((response) => response.data),\n});\nmyReadable.fetch().catch(() => console.error('ops, something went wrong'));\n```\nIn a Svelte component, the created AsyncReadable can be used just like any other Readable:\n\n```html\nHere is the resource:\n<div>{$myReadable}</div>\n```\n\nA useful nested store named `fetching` is provided. It can be used, for example, to show a loading state:\n```html\n<script>\n\tconst myReadable = asyncReadable(...); // Initialized in some way\n\tmyReadable\n\t\t.fetch()\n\t\t.catch(() => console.log('ops, something went wrong')); // Start fetching asynchronously (don't forget, Promises always come with a catch!)\n\tconst { fetching } = myReadable; // Extracts the fetching store\n</script>\n{#if $fetching}\n\tLoading...\n{:else}\n\tHere is the resource:\n\t<div>{$myReadable}</div>\n{/if}\n\n```\n\nThe fetch must be manually triggered (for example, after some changes to the app state)\n```js\nmyReadable.fetch();\n```\n\nIf a fetching is already in progress, subsequent fetch calls will be ignored, unless you set the force flag to `true`\n```js\nmyReadable.fetch(true);\n```\nYou can also pass a temporary value that will be assigned to the AsyncReadable to notify all subscribers while waiting for the new value that will be retrieved using the dataProvider. This also can be useful to show a loading/intermediate state\n```js\nmyReadable.fetch(true, null); // or myReadable.fetch(false, null);\n```\n\n## Persisting data\n\nAsyncReadable can be used with any store as its cache, this means that you can take advantage of libraries such as [svelte-persistent-writable](https://www.npmjs.com/package/svelte-persistent-writable) or\n[svelte-persistent-store](https://www.npmjs.com/package/svelte-persistent-store) (and many more) to delegate the persistence logic.\n\nAs an example, the following code uses `svelte-persistent-writable` as a storage mechanism:\n```js\nimport { persistentWritable, localStorageAdapter } from 'svelte-persistent-writable';\nimport { asyncReadable } from 'svelte-async-readable';\n\nexport const myAsyncReadable = asyncReadable(\n\tpersistentWritable(null, { storage: localStorageAdapter('myAsyncReadable') }),\n\t{ dataProvider: () => axios.get('/path/to/api').then((response) => response.data) }\n);\n\nmyAsyncReadable.fetch().catch(() => console.error('oops...'));\n```",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 2],
		[3596, 23],
		[3603, 22],
		[3610, 19],
		[3617, 5],
		[3624, 2],
		[3631, 1],
		[3638, 3],
		[3645, 5],
		[3652, 16],
		[3659, 8],
		[3666, 30],
		[3673, 4],
		[3680, 4],
		[3687, 8],
		[3694, 3],
		[3701, 3],
		[3708, 8],
		[3715, 1],
		[3722, 10],
		[3729, 38],
		[3743, 1],
		[3750, 15],
		[3757, 12],
		[3764, 15],
		[3771, 19],
		[3778, 1],
		[3785, 2],
		[3792, 9],
		[3799, 8],
		[3806, 2],
		[3813, 2],
		[3820, 7],
		[3827, 1],
		[3834, 1],
		[3841, 10],
		[3848, 27],
		[3855, 87],
		[3862, 5],
		[3869, 19],
		[3876, 5],
		[3883, 11],
		[3890, 37],
		[3897, 7],
		[3904, 1],
		[3911, 2],
		[3925, 3],
		[3932, 2],
		[3939, 9],
		[3946, 7],
		[3953, 3],
		[3960, 2],
		[3967, 2],
		[3974, 1],
		[3981, 4],
		[3988, 9],
		[3995, 6],
		[4002, 7],
		[4009, 5],
		[4016, 21],
		[4023, 5],
		[4030, 20],
		[4037, 20],
		[4044, 14],
		[4051, 9],
		[4058, 6],
		[4065, 7],
		[4072, 2],
		[4079, 4],
		[4086, 1],
		[4093, 13],
		[4100, 21],
		[4107, 26],
		[4114, 16],
		[4121, 34],
		[4128, 13]
	],
	"esm": true,
	"cjs": true
}
