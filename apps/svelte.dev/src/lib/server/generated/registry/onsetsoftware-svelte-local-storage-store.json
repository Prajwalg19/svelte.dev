{
	"name": "@onsetsoftware/svelte-local-storage-store",
	"description": "Create Svelte writable stores backed by local storage.",
	"repo_url": "https://github.com/onsetsoftware/svelte-local-storage-store",
	"authors": ["acurrieclark"],
	"homepage": "https://github.com/onsetsoftware/svelte-local-storage-store#readme",
	"downloads": 4,
	"updated": "2022-10-12T22:10:49.042Z",
	"tags": ["miscellaneous"],
	"github_stars": 0,
	"typescript": true,
	"version": "1.1.0",
	"svelte_range": "^3.51.0",
	"last_rune_check_version": "1.1.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@onsetsoftware/svelte-local-storage-store",
				"version": "1.1.0",
				"size": 9639
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Svelte Local Storage Store\n\nA thin wrapper on top of a Svelte writable store, backing up to local storage with built-in event handling to sync across multiple tabs.\n\n## Installation\n\n```bash\nnpm install -D @onsetsoftware/svelte-local-storage-store\n```\n\n## Usage\n\n### Basic\n```ts\nimport { localStorageStore } from '@onsetsoftware/svelte-local-storage-store';\n\nconst countStore = localStorageStore('count', 0);\n```\n\n### Async\n```ts\nimport { localStorageStore } from '@onsetsoftware/svelte-local-storage-store';\n\nconst timerStore = localStorageStore('timer', 0, (set) => {\n  let timer = timerStore.get();\n  const interval = setInterval(() => {\n    set(++timer);\n  }, 1000);\n\n  return () => clearInterval(interval);\n});\n```\n\n## API\n\nThe `localStorageStore` function takes three arguments:\n\n- `key` - The key to use for local storage\n- `initialValue` - The initial value to use if the key is not found in local storage\n- `start` - An optional function that will be called when the store is first subscribed to. It will be passed a `set` function that can be used to update the store. It should return a function that will be called when the store is unsubscribed from.\n\nThis is essentially the same API as the `writable` function from Svelte's `svelte/store` package, with the addition of the `key` argument.\n\n> **Note**\n> Subsequent calls to `localStorageStore` with the same `key` will return the same store instance. If you want to delete the store from local storage, you can call `destroyLocalStorageStore(key)`.\n> \n> If this cache doesn't work for you, please can use the `LocalStorageStore` class directly to manage your own stores. It takes the same 3 arguments as the `localStorageStore` function.\n\nThe `localStorageStore` function returns a Svelte store that can be used in the same way as any other Svelte store and which implements the `Writable` interface.\n\n```ts\nconst countStore = localStorageStore('count', 0);\n\ncountStore.set(1);\n\ncountStore.update((count) => count + 1);\n\ncountStore.subscribe((value) => {\n  console.log(value);\n});\n```\n\nIt also exposes an additional `get` method that can be used to retrieve the current value of the store without subscribing to it.\n\n```ts\nconst countStore = localStorageStore('count', 0);\n\ncountStore.get(); // => 0\n```\n\nFinally, it exposes a `detach` method that can be used to remove the key/value pair from local storage.\n\n```ts\nconst countStore = localStorageStore('count', 0);\n// localStorage.getItem('count') => 0\n\ncountStore.detach();\n// localStorage.getItem('count') => undefined\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 5],
		[3603, 1],
		[3617, 1],
		[3631, 1],
		[3638, 2],
		[3645, 1],
		[3652, 3],
		[3659, 2],
		[3666, 3],
		[3673, 3],
		[3680, 1],
		[3701, 1],
		[3729, 1],
		[3750, 1],
		[3771, 2],
		[3778, 2],
		[3785, 3],
		[3799, 1],
		[3806, 2],
		[3820, 1],
		[3827, 1],
		[3834, 1],
		[3841, 10],
		[3855, 1],
		[3862, 5],
		[3876, 2],
		[3883, 1],
		[3890, 2],
		[3897, 7],
		[3904, 2],
		[3911, 1],
		[3925, 1],
		[3932, 1],
		[3946, 1],
		[3953, 1],
		[3981, 3],
		[4016, 4],
		[4023, 1],
		[4030, 4],
		[4044, 9],
		[4051, 2],
		[4058, 1],
		[4065, 1],
		[4072, 1],
		[4093, 2],
		[4100, 5],
		[4114, 4],
		[4121, 4],
		[4128, 3]
	],
	"esm": true,
	"cjs": true
}
