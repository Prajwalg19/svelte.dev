{
	"name": "svelte-inputs",
	"description": "Provides basic input components for Svelte.",
	"repo_url": "https://github.com/JuicyJah/svelte-inputs",
	"authors": ["juicyjah"],
	"homepage": "https://github.com/JuicyJah/svelte-inputs#readme",
	"downloads": 21,
	"updated": "2019-11-27T14:13:04.261Z",
	"tags": ["ui"],
	"github_stars": 1,
	"typescript": false,
	"version": "0.5.0",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "0.5.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-inputs",
				"version": "0.5.0",
				"size": 49980
			},
			{
				"name": "svelte",
				"version": "3.59.2",
				"size": 10624206
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "[![npm](https://img.shields.io/npm/v/svelte-inputs)](https://www.npmjs.com/package/svelte-inputs)\n[![install size](https://packagephobia.now.sh/badge?p=svelte-inputs)](https://packagephobia.now.sh/result?p=svelte-inputs)\n![NPM](https://img.shields.io/npm/l/svelte-inputs)\n![npm](https://img.shields.io/npm/dw/svelte-inputs)\n\n# svelte-inputs\n\nBasic Input Components for No Muss, No Fuss Plug and Play with Svelte\n\n## Features!\n\n- Event Callbacks\n- Data binding\n- Input Masking\n\n## Contents:\n\n- [Installation](#Installation)\n- [Usage](#Usage)\n- [Masking](#Masking)\n- [Styling](#Styling)\n- [Development](#Development)\n\n## Background\n\n`svelte-inputs` was made on the idea that there should be simple, straightforward inputs, at a modular level for `Svelte`. No more fussing about!\n\n`svelte-inputs` requires `Svelte` >= 3.0.0\n\n# Installation\n\nThe easiest and recommended way to install `svelte-inputs` is with the `npm` command line.\n\n```\nnpm i svelte-inputs\n```\n\n# Usage\n\nAt the moment, `svelte-inputs` comes with two (2) basic input modules.\n\nAll text inputs support the properties:\n\n- value\n- placeholder\n- disabled\n- className (see notes on styling)\n- mask\n\nAll text inputs support the events:\n\n- on:change\n- on:focus\n- on:blur\n- on:keyup\n\nText Inputs are imported with the ES6 `import`, though `Babel` is also recommended.\nIt may also be helpful to alias imports for inputs with longer names.\n\n**Ex:**\n\n```js\nimport {\n  TextInput,\n  TextInputWithPlaceholder as InputPlaceholder\n} from \"svelte-inputs\";\n```\n\n## TextInput\n\n`TextInput` is a basic text input. It handles all of the basic properties of a regular input, but with direct bindings to the variables you provide it.\n\n![TextInput](img/TextInputDemo.gif)\n\n**Ex:**\n**App.svelte**\n\n```html\n<script>\n  import { TextInput } from \"svelte-inputs\";\n\n  let myvar = \"Example!\";\n</script>\n<style>\n  ...;\n</style>\n<TextInput value=\"{myvar}\" />\n```\n\nThis passes `myvar` to the text input for modification. However, without additional properties supplied, any modification on the variable will not be able to be retrieved.\nIn order to get instant updates to `myvar`, it is recommended to `bind` the `value` property to your variable.\n\n**Ex:**\n\n```html\n<TextInput bind:value=\"{myvar}\" />\n```\n\nAlternatively, for complex situations, you may not want the variable to be instantly updated - for example, if you needed additional processing.\nIn this situation, pass a callback method to the `on:change` property. The callback must be able to consume a custom `Svelte` event.\n\n**Ex:**\n\n```html\n<script>\n  import { TextInput } from \"svelte-inputs\";\n\n  let myvar = \"Example!\";\n\n  function myCallback(event) {\n    let tmp = event.detail; //get the modified string\n    myvar = tmp.trim();\n  }\n</script>\n<style>\n  ...;\n</style>\n<TextInput value=\"{myvar}\" on:change=\"{myCallback}\" />\n```\n\n## TextInputWithPlaceholder\n\nSimilar to the usage of the basic `TextInput`, it also provides a placeholder that collapses on focus/entry.\n\nThe `placeholder` property is not required, but it behaves much like a basic `TextInput` without it.\n\n![TextInputWithPlaceholder](img/TextInputWithPlaceholderDemo.gif)\n\n**Ex:**\n\n```html\n<script>\n  import { TextInputWithPlaceholder as Input } from \"svelte-inputs\";\n\n  let myvar = \"Example!\";\n  let myplaceholder = \"App Name:\";\n</script>\n<style>\n  ...;\n</style>\n<input bind:value=\"{myvar}\" placeholder=\"{myplaceholder}\" />\n```\n\nIn keeping with basic `Svelte`, the `placeholder` property also supports binding.\n\n# Masking\n\n`svelte-inputs` comes with some basic masking.\n\nA mask can be given to a component through the `mask` property.\nThis property accepts a config object in the given form below:\n\n```js\n{\n  mask: \"(xxx) xxx-xxxx\",\n  override: true,\n  enforceLength: true,\n  alwaysVisible: false,\n  defaultChar: ' '\n}\n```\n\n### Properties\n\n- `mask`: `String`; This is the actual mask that you want to use for the input. `x` characters denote user input characters. All other characters will be included as part of the mask.\n- `override`: `Boolean`; This tells the component whether or not to override the bound value property with the mask (`true`) or return only the raw characters entered by the user (`false`).\n  In either case, the mask will still display.\n- `enforceLength`: `Boolean`; This determines if the mask should enforce the length of the input based on the length of the mask.\n- `alwaysVisible`: `Boolean`; determines if the mask should be visible at all times. If false, the mask will only appear as characters are typed. Default is `false`.\n- `defaultChar`: `String`; The default character (or string) used as a placeholder for each `x` character in the mask. This only applied to a mask that is also configured to be `alwaysVisible: true`.\n\n# Styling\n\nBecause of how `Svelte` handles scoping of styles in components, in order to override the styling of the elements in the `svelte-inputs` components,\nyou will need to either force style _cascading_ with the `:global` style property;\nor you will need to place your styles in a global stylesheet, such as the default `global.css`\nin the [sveltejs template](https://github.com/sveltejs/template) (/public/global.css).\n\n**Example using `:global`**\n\n```html\n<script>\n  import { TextInput as Input } from \"svelte-inputs\";\n\n  let myvar = \"Example!\";\n</script>\n<style>\n  :global(input) {\n    color: blue;\n  }\n</style>\n<input bind:value=\"{myvar}\" />\n```\n\n### **className**\n\n`className` is a special property that allows you to give special classes to the inputs.\nStill, to use these classes will require use of one of the methods mentioned above.\n\n# Development\n\nIf you'd like to contribute to the development of this project and extend the `svelte-inputs`\nlibrary, please join us on GitHub!\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 8],
		[3596, 9],
		[3603, 12],
		[3610, 16],
		[3617, 9],
		[3624, 2],
		[3631, 1],
		[3645, 1],
		[3652, 11],
		[3659, 3],
		[3666, 10],
		[3673, 5],
		[3680, 7],
		[3687, 7],
		[3694, 3],
		[3701, 4],
		[3708, 6],
		[3715, 4],
		[3722, 5],
		[3729, 31],
		[3736, 13],
		[3743, 12],
		[3750, 13],
		[3757, 5],
		[3764, 27],
		[3771, 17],
		[3778, 17],
		[3785, 4],
		[3792, 18],
		[3799, 11],
		[3806, 49],
		[3813, 10],
		[3820, 14],
		[3827, 54],
		[3834, 21],
		[3841, 5],
		[3848, 3],
		[3855, 16],
		[3862, 108],
		[3869, 15],
		[3876, 12],
		[3883, 15],
		[3890, 23],
		[3897, 17],
		[3904, 14],
		[3911, 14],
		[3918, 8],
		[3925, 5],
		[3932, 4],
		[3939, 2],
		[3946, 3],
		[3953, 2],
		[3960, 3],
		[3967, 1],
		[3974, 3],
		[3981, 5],
		[3988, 7],
		[3995, 15],
		[4002, 17],
		[4009, 13],
		[4016, 20],
		[4023, 12],
		[4030, 20],
		[4037, 16],
		[4044, 26],
		[4051, 15],
		[4058, 4],
		[4065, 12],
		[4072, 2],
		[4079, 5],
		[4086, 11],
		[4093, 21],
		[4100, 13],
		[4107, 38],
		[4114, 21],
		[4121, 7],
		[4128, 15]
	],
	"esm": false,
	"cjs": true
}
