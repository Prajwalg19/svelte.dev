{
	"name": "svelte-highlight",
	"description": "Highlights code syntax using highlight.js in Svelte apps.",
	"repo_url": "https://github.com/metonym/svelte-highlight",
	"authors": ["metonym"],
	"homepage": "https://github.com/metonym/svelte-highlight",
	"downloads": 16890,
	"updated": "2025-04-01T20:03:56.445Z",
	"tags": ["ui"],
	"github_stars": 292,
	"typescript": true,
	"version": "7.8.3",
	"last_rune_check_version": "7.8.3",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-highlight",
				"version": "7.8.3",
				"size": 875695
			},
			{
				"name": "highlight.js",
				"version": "11.11.1",
				"size": 5433042
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# svelte-highlight\n\n[![NPM][npm]][npm-url]\n![npm](https://img.shields.io/npm/dt/svelte-highlight?color=ff3e00&style=for-the-badge)\n\n> Syntax highlighting for Svelte using [highlight.js](https://github.com/highlightjs/highlight.js).\n\nTry it in the [Svelte REPL](https://svelte.dev/playground/535d6bf354da499389140dbfcb12004f) or [StackBlitz](https://stackblitz.com/edit/svelte-highlight?file=src%2Froutes%2Findex.svelte).\n\n## [Documentation](https://svhe.onrender.com)\n\nThe Changelog is [available on GitHub](https://github.com/metonym/svelte-highlight/blob/master/CHANGELOG.md).\n\n## Installation\n\n```bash\n# npm\nnpm i svelte-highlight\n\n# pnpm\npnpm i svelte-highlight\n\n# Bun\nbun i svelte-highlight\n\n# Yarn\nyarn add svelte-highlight\n```\n\n## Basic Usage\n\nThe `Highlight` component requires two props:\n\n- `code`: text to highlight\n- `language`: language grammar used to highlight the text\n\nImport languages from `svelte-highlight/languages`.\n\nSee [SUPPORTED_LANGUAGES.md](SUPPORTED_LANGUAGES.md) for a list of supported languages.\n\n```svelte\n<script>\n  import Highlight from \"svelte-highlight\";\n  import typescript from \"svelte-highlight/languages/typescript\";\n\n  const code = \"const add = (a: number, b: number) => a + b;\";\n</script>\n\n<Highlight language={typescript} {code} />\n```\n\n## Styling\n\nImport styles from `svelte-highlight/styles`. See [SUPPORTED_STYLES.md](SUPPORTED_STYLES.md) for a list of supported styles.\n\nThere are two ways to apply `highlight.js` styles.\n\n1. Injected styles through [svelte:head](https://svelte.dev/docs#template-syntax-svelte-head)\n2. CSS StyleSheets\n\n### Injected Styles\n\nThis component exports `highlight.js` themes in JavaScript. Import the theme from `svelte-highlight/styles` and inject it using the [svelte:head](https://svelte.dev/docs#svelte_head) API.\n\n```svelte\n<script>\n  import Highlight from \"svelte-highlight\";\n  import typescript from \"svelte-highlight/languages/typescript\";\n  import github from \"svelte-highlight/styles/github\";\n\n  const code = \"const add = (a: number, b: number) => a + b;\";\n</script>\n\n<svelte:head>\n  {@html github}\n</svelte:head>\n\n<Highlight language={typescript} {code} />\n```\n\n### CSS StyleSheet\n\nDepending on your set-up, importing a CSS StyleSheet in Svelte may require a CSS file loader. SvelteKit/Vite automatically supports this. For Webpack, refer to [examples/webpack](examples/webpack).\n\n```svelte\n<script>\n  import { Highlight } from \"svelte-highlight\";\n  import typescript from \"svelte-highlight/languages/typescript\";\n  import \"svelte-highlight/styles/github.css\";\n\n  const code = \"const add = (a: number, b: number) => a + b;\";\n</script>\n\n<Highlight language={typescript} {code} />\n```\n\n#### Linking from a CDN\n\nCSS StyleSheets can also be externally linked from a Content Delivery Network (CDN) like [unpkg.com](https://unpkg.com/).\n\n> [!WARNING]\n> Using a CDN is best suited for prototyping and not recommended for production use.\n\n**HTML**\n\n```html\n<head>\n  <link\n    rel=\"stylesheet\"\n    href=\"https://unpkg.com/svelte-highlight/styles/github.css\"\n  />\n</head>\n```\n\n**svelte:head**\n\n```svelte\n<svelte:head>\n  <link\n    rel=\"stylesheet\"\n    href=\"https://unpkg.com/svelte-highlight/styles/github.css\"\n  />\n</svelte:head>\n```\n\n## Svelte Syntax Highlighting\n\nUse the `HighlightSvelte` component for Svelte syntax highlighting.\n\n```svelte\n<script>\n  import { HighlightSvelte } from \"svelte-highlight\";\n  import github from \"svelte-highlight/styles/github\";\n\n  const code = `<button on:click={() => { console.log(0); }}>Increment {count}</button>`;\n</script>\n\n<svelte:head>\n  {@html github}\n</svelte:head>\n\n<HighlightSvelte {code} />\n```\n\n## Auto-highlighting\n\nThe `HighlightAuto` component uses the [highlightAuto API](https://highlightjs.readthedocs.io/en/latest/api.html#highlightauto) and attempts to guess what grammar to use based on the provided `code`.\n\n> [!WARNING]\n> Auto-highlighting will result in a larger bundle size. Specify a language if possible.\n\n```svelte\n<script>\n  import { HighlightAuto } from \"svelte-highlight\";\n  import github from \"svelte-highlight/styles/github\";\n\n  const code = `body {\\n  padding: 0;\\n  color: red;\\n}`;\n</script>\n\n<svelte:head>\n  {@html github}\n</svelte:head>\n\n<HighlightAuto {code} />\n```\n\n## Line Numbers\n\nUse the `LineNumbers` component to render the highlighted code with line numbers.\n\n```svelte\n<script>\n  import Highlight, { LineNumbers } from \"svelte-highlight\";\n  import typescript from \"svelte-highlight/languages/typescript\";\n  import atomOneDark from \"svelte-highlight/styles/atom-one-dark\";\n\n  const code = \"const add = (a: number, b: number) => a + b\";\n</script>\n\n<svelte:head>\n  {@html atomOneDark}\n</svelte:head>\n\n<Highlight language={typescript} {code} let:highlighted>\n  <LineNumbers {highlighted} />\n</Highlight>\n```\n\n### Hidden Border\n\nSet `hideBorder` to `true` to hide the border of the line numbers column.\n\n```svelte\n<Highlight language={typescript} {code} let:highlighted>\n  <LineNumbers {highlighted} hideBorder />\n</Highlight>\n```\n\n### Wrapped Lines\n\nBy default, overflowing horizontal content is contained by a scrollbar.\n\nSet `wrapLines` to `true` to hide the border of the line numbers column.\n\n```svelte\n<Highlight language={typescript} {code} let:highlighted>\n  <LineNumbers {highlighted} wrapLines />\n</Highlight>\n```\n\n### Custom Starting Line Number\n\nThe line number starts at `1`. Customize this via the `startingLineNumber` prop.\n\n```svelte\n<Highlight language={typescript} {code} let:highlighted>\n  <LineNumbers {highlighted} startingLineNumber={42} />\n</Highlight>\n```\n\n### Highlighted Lines\n\nSpecify the lines to highlight using the `highlightedLines` prop. Indices start at zero.\n\nUse `--highlighted-background` to customize the background color of highlighted lines.\n\n```svelte\n<Highlight language={typescript} {code} let:highlighted>\n  <LineNumbers\n    {highlighted}\n    highlightedLines={[0, 2, 3, 14]}\n    --highlighted-background=\"#000\"\n  />\n</Highlight>\n```\n\n### Custom Styles\n\nUse `--style-props` to customize styles.\n\n| Style prop               | Description                                | Default value             |\n| :----------------------- | :----------------------------------------- | :------------------------ |\n| --line-number-color      | Text color of the line numbers             | `currentColor`            |\n| --border-color           | Border color of the column of line numbers | `currentColor`            |\n| --padding-left           | Left padding for `td` elements             | `1em`                     |\n| --padding-right          | Right padding for `td` elements            | `1em`                     |\n| --highlighted-background | Background color of highlighted lines      | `rgba(254, 241, 96, 0.2)` |\n\n```svelte\n<Highlight language={typescript} {code} let:highlighted>\n  <LineNumbers\n    {highlighted}\n    --line-number-color=\"pink\"\n    --border-color=\"rgba(255, 255, 255, 0.2)\"\n    --padding-left={0}\n    --padding-right=\"3em\"\n    --highlighted-background=\"#000\"\n  />\n</Highlight>\n```\n\n## Language Targeting\n\nAll `Highlight` components apply a `data-language` attribute on the codeblock containing the language name.\n\nSee [SUPPORTED_LANGUAGES.md](SUPPORTED_LANGUAGES.md) for a list of supported languages.\n\n```css\n[data-language=\"css\"] {\n  /* custom style rules */\n}\n```\n\n## Language Tags\n\nSet `langtag` to `true` to display the language name in the top right corner of the code block.\n\nCustomize the language tag `background`, `color`, and `border-radius` using style props.\n\nSee the [Languages page](SUPPORTED_LANGUAGES.md) for a list of supported languages.\n\n| Style prop              | Description                     | Default value |\n| :---------------------- | :------------------------------ | :------------ |\n| --langtag-top           | Top position of the langtag     | `0`           |\n| --langtag-right         | Right position of the langtag   | `0`           |\n| --langtag-background    | Background color of the langtag | `inherit`     |\n| --langtag-color         | Text color of the langtag       | `inherit`     |\n| --langtag-border-radius | Border radius of the langtag    | `0`           |\n| --langtag-padding       | Padding of the langtag          | `1em`         |\n\n```svelte\n<script>\n  import { HighlightAuto } from \"svelte-highlight\";\n\n  $: code = `.body { padding: 0; margin: 0; }`;\n</script>\n\n<HighlightAuto {code} langtag />\n```\n\n```svelte\n<HighlightAuto\n  {code}\n  langtag\n  --langtag-background=\"linear-gradient(135deg, #2996cf, 80%, white)\"\n  --langtag-color=\"#fff\"\n  --langtag-border-radius=\"6px\"\n  --langtag-padding=\"0.5rem\"\n/>\n```\n\n## Custom Language\n\nFor custom language highlighting, pass a `name` and `register` function to the language prop.\n\nRefer to the highlight.js [language definition guide](https://highlightjs.readthedocs.io/en/latest/language-guide.html) for guidance.\n\n```svelte\n<script>\n  import { Highlight } from \"svelte-highlight\";\n  import hljs from \"highlight.js\";\n\n  const language = {\n    name: \"custom-language\",\n    register: (hljs) => {\n      return {\n        /** custom language rules */\n        contains: [],\n      };\n    },\n  };\n</script>\n\n<Highlight {language} code=\"...\" />\n```\n\n## Custom Plugin\n\nAdditional plugin languages can be installed and used separately.\n\nThis example uses the [`cURL` language plugin](https://github.com/highlightjs/highlightjs-curl).\n\n```svelte\n<script>\n  import { Highlight } from \"svelte-highlight\";\n  import curl from \"highlightjs-curl\";\n  import github from \"svelte-highlight/styles/github\";\n\n  const language = {\n    name: \"curl\", // Language name displayed in the langtag\n    register: curl,\n  };\n\n  const code = `curl -X POST \"https://api.example.com/data\" \\\\\n     -H \"Content-Type: application/json\" \\\\\n     -d '{\"key\": \"value\"}'`;\n</script>\n\n<svelte:head>\n  {@html github}\n</svelte:head>\n\n<Highlight {language} {code} />\n```\n\n## Code-splitting\n\nYou can use the `await import` syntax for code-splitting.\n\nIn the example below, the `HighlightAuto` component and injected styles are dynamically loaded.\n\n```svelte\n<script>\n  import { onMount } from \"svelte\";\n\n  let component;\n  let styles;\n\n  onMount(async () => {\n    component = (await import(\"svelte-highlight\")).HighlightAuto;\n    styles = (await import(\"svelte-highlight/styles/github\")).default;\n  });\n</script>\n\n<svelte:head>\n  {#if styles}\n    {@html styles}\n  {/if}\n</svelte:head>\n\n<svelte:component\n  this={component}\n  langtag\n  code={`body {\\n  padding: 0;\\n  color: red;\\n}`}\n/>\n```\n\n## Component API\n\n### `Highlight`\n\n#### Props\n\n| Name     | Type                                           | Default value  |\n| :------- | :--------------------------------------------- | :------------- |\n| code     | `any`                                          | N/A (required) |\n| language | { name: `string`; register: hljs => `object` } | N/A (required) |\n| langtag  | `boolean`                                      | `false`        |\n\n`$$restProps` are forwarded to the top-level `pre` element.\n\n#### Dispatched Events\n\n- **on:highlight**: fired after `code` is highlighted\n\n```svelte\n<Highlight\n  language={typescript}\n  {code}\n  on:highlight={(e) => {\n    /**\n     * The highlighted HTML as a string.\n     * @example \"<span>...</span>\"\n     */\n    console.log(e.detail.highlighted);\n  }}\n/>\n```\n\n### `LineNumbers`\n\n#### Props\n\n| Name               | Type       | Default value  |\n| :----------------- | :--------- | :------------- |\n| highlighted        | `string`   | N/A (required) |\n| hideBorder         | `boolean`  | `false`        |\n| wrapLines          | `boolean`  | `false`        |\n| startingLineNumber | `number`   | `1`            |\n| highlightedLines   | `number[]` | `[]`           |\n\n`$$restProps` are forwarded to the top-level `div` element.\n\n### `HighlightSvelte`\n\n#### Props\n\n| Name    | Type      | Default value  |\n| :------ | :-------- | :------------- |\n| code    | `any`     | N/A (required) |\n| langtag | `boolean` | `false`        |\n\n`$$restProps` are forwarded to the top-level `pre` element.\n\n#### Dispatched Events\n\n- **on:highlight**: fired after `code` is highlighted\n\n```svelte\n<HighlightSvelte\n  {code}\n  on:highlight={(e) => {\n    /**\n     * The highlighted HTML as a string.\n     * @example \"<span>...</span>\"\n     */\n    console.log(e.detail.highlighted);\n  }}\n/>\n```\n\n### `HighlightAuto`\n\n#### Props\n\n| Name    | Type      | Default value  |\n| :------ | :-------- | :------------- |\n| code    | `any`     | N/A (required) |\n| langtag | `boolean` | `false`        |\n\n`$$restProps` are forwarded to the top-level `pre` element.\n\n#### Dispatched Events\n\n- **on:highlight**: fired after `code` is highlighted\n\n```svelte\n<HighlightAuto\n  {code}\n  on:highlight={(e) => {\n    /**\n     * The highlighted HTML as a string.\n     * @example \"<span>...</span>\"\n     */\n    console.log(e.detail.highlighted);\n\n    /**\n     * The inferred language name\n     * @example \"css\"\n     */\n    console.log(e.detail.language);\n  }}\n/>\n```\n\n## [Supported Languages](SUPPORTED_LANGUAGES.md)\n\n## [Supported Styles](SUPPORTED_STYLES.md)\n\n## Examples\n\nBy default, example set-ups use Svelte 5. The exception is `examples/vite@svelte-4`, which uses Svelte 4.\n\n- [examples/rollup](examples/rollup)\n- [examples/routify](examples/routify)\n- [examples/sveltekit](examples/sveltekit)\n- [examples/vite](examples/vite)\n- [examples/vite@svelte-4](examples/vite@svelte-4)\n- [examples/webpack](examples/webpack)\n\n## [Changelog](CHANGELOG.md)\n\n## License\n\n[MIT](LICENSE)\n\n[npm]: https://img.shields.io/npm/v/svelte-highlight.svg?style=for-the-badge&color=%23ff3e00\n[npm-url]: https://npmjs.com/package/svelte-highlight\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 6095],
		[3596, 6600],
		[3603, 6994],
		[3610, 8236],
		[3617, 8644],
		[3624, 15410],
		[3631, 29618],
		[3638, 35007],
		[3645, 6475],
		[3652, 17358],
		[3659, 26352],
		[3666, 41905],
		[3673, 22341],
		[3680, 13477],
		[3687, 32963],
		[3694, 27519],
		[3701, 34995],
		[3708, 21850],
		[3715, 17797],
		[3722, 20159],
		[3729, 38402],
		[3736, 22517],
		[3743, 30628],
		[3750, 35865],
		[3757, 30477],
		[3764, 28309],
		[3771, 31146],
		[3778, 25964],
		[3785, 29469],
		[3792, 22229],
		[3799, 25115],
		[3806, 21103],
		[3813, 27933],
		[3820, 29544],
		[3827, 29863],
		[3834, 37578],
		[3841, 24726],
		[3848, 21172],
		[3855, 28960],
		[3862, 19959],
		[3869, 19948],
		[3876, 17964],
		[3883, 20387],
		[3890, 11734],
		[3897, 13358],
		[3904, 10285],
		[3911, 20430],
		[3918, 21030],
		[3925, 17643],
		[3932, 15970],
		[3939, 16900],
		[3946, 14992],
		[3953, 12265],
		[3960, 9999],
		[3967, 16962],
		[3974, 20205],
		[3981, 24471],
		[3988, 15558],
		[3995, 16250],
		[4002, 15157],
		[4009, 32597],
		[4016, 30108],
		[4023, 19143],
		[4030, 30881],
		[4037, 36515],
		[4044, 27068],
		[4051, 25512],
		[4058, 18954],
		[4065, 13501],
		[4072, 14936],
		[4079, 16216],
		[4086, 27877],
		[4093, 27667],
		[4100, 19056],
		[4107, 23248],
		[4114, 16890],
		[4121, 18675],
		[4128, 9646]
	],
	"esm": true,
	"cjs": false
}
