{
	"name": "@sliu2017/svelte-recaptcha-v2",
	"description": "Integrate Google reCAPTCHA v2 into SvelteKit apps.",
	"repo_url": "https://github.com/sliu2017/svelte-recaptcha-v2",
	"authors": ["sliu2017"],
	"homepage": "https://github.com/sliu2017/svelte-recaptcha-v2#readme",
	"downloads": 9,
	"updated": "2023-11-10T15:58:59.306Z",
	"tags": ["integration"],
	"github_stars": 0,
	"typescript": false,
	"version": "0.0.4",
	"svelte_range": "^3.44.0",
	"last_rune_check_version": "0.0.4",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@sliu2017/svelte-recaptcha-v2",
				"version": "0.0.4",
				"size": 31382
			},
			{
				"name": "debug",
				"version": "4.4.0",
				"size": 42798
			},
			{
				"name": "ms",
				"version": "2.1.3",
				"size": 6721
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2]
		],
		"circular": []
	},
	"readme": "![svelte-recaptcha-v2](https://user-images.githubusercontent.com/30809170/138197082-b92887d5-a875-41ee-9939-cbb8aba9ab6b.png)\n\n# svelte-recaptcha-v2\n\n[Google reCAPTCHA v2](https://developers.google.com/recaptcha/docs/display)  implementation for Svelte SPA, SSR and  sveltekit static sites.\n\n## Features\n\n - [x] svelte server side rendering (SSR) friendly.\n - [x] works with sveltekit SPA, SSR and static site adapters.\n - [x] easy integration with third party form validation libraries.\n - [x] fail-safe loader to inject recaptcha.\n - [x] invisible recaptcha or checkbox recaptcha support.\n - [x] event model for intercepting various recaptcha states.\n - [x] handle all your form logic in a single submit handler.\n - [x] proper DOM cleanup (deletes recaptcha completely)\n - [x] documented, debug.js friendly source code.\n - [x] typescript definitions are included for LSP.\n\n## Demonstration\n[svelte-recaptcha-v2 demo](https://basaran.github.io/svelte-recaptcha-v2/)\n\n## Getting Started\n```bash\n# install as a development dependency\npnpm install -D svelte-recaptcha-v2\n```\n\n## Basic Usage\n\nImport the library onto your template and update your google key:\n\n```js\nimport { Recaptcha, recaptcha, observer } from \"svelte-recaptcha-v2\";\n/*\n │Recaptcha: svelte <Recaptcha> component.\n │recaptcha: google method, gives you recaptcha.execute().\n │observer: allows you to track captcha state across components.\n */\n\nconst googleRecaptchaSiteKey=\"replace_with_yours\";\n```\n\nIn your form, add the component:\n\n```svelte\n<Recaptcha\n    sitekey={googleRecaptchaSiteKey}\n    badge={\"top\"}\n    size={\"invisible\"}\n    on:success={onCaptchaSuccess}\n    on:error={onCaptchaError}\n    on:expired={onCaptchaExpire}\n    on:close={onCaptchaClose}\n    on:ready={onCaptchaReady} />\n```\n\nSetup your event handlers:\n\n```js\nconst onCaptchaReady = (event) => {\n    console.log(\"recaptcha init has completed.\")\n    /*\n     │You can enable your form button here.\n     */\n};\n\nconst onCaptchaSuccess = (event) => {\n    userTracker.resolve(event);\n    console.log(\"token received: \" + event.detail.token);\n    /*\n     │If using checkbox method, you can attach your\n     │form logic here, or dispatch your custom event.\n     */\n};\n\nconst onCaptchaError = (event) => {\n    console.log(\"recaptcha init has failed.\");\n    /*\n     │Usually due to incorrect siteKey.\n     |Make sure you have the correct siteKey..\n     */\n};\n\nconst onCaptchaExpire = (event) => {\n    console.log(\"recaptcha api has expired\");\n    /*\n     │Normally, you wouldn't need to do anything.\n     │Recaptcha should reinit itself automatically.\n     */\n};\n\nconst onCaptchaOpen = (event) => {\n    console.log(\"google decided to challange the user\");\n    /*\n     │This fires when the puzzle frame pops.\n     */\n};\n\nconst onCaptchaClose = (event) => {\n    console.log(\"google decided to challange the user\");\n    /*\n     │This fires when the puzzle frame closes.\n     │Usually happens when the user clicks outside\n     |the modal frame.\n     */\n};\n```\n\nUpdate your form handler:\n\n```js\nconst submitHandler = async () => {\n    console.log(\"launching recaptcha\");\n    recaptcha.execute();\n\n    console.log(\"pending for google response\");\n    const event = await Promise.resolve(observer);\n\n    const recaptchaToken = event.detail?.token ? event.detail.token : false;\n\n    if (!recaptchaToken) {\n        console.log(\"recaptcha is NOT OK\");\n        return false;\n    }\n\n    console.log(\"token retrieved\", recaptchaToken);\n};\n```\n\n## Debugging\n\nIf you would like to enable client side debugging, add `{Recaptcha}` value to your localStorage `DEBUG` key.\n\n## Issues\n\nIf any trouble, please create an issue. PRs are most welcome.\n\n## Todo\n\n- [] add recipes for validation libraries (felte, stock etc)\n- [] look into mutation observers\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3645, 1],
		[3652, 1],
		[3659, 1],
		[3673, 1],
		[3694, 1],
		[3708, 1],
		[3715, 1],
		[3722, 2],
		[3750, 1],
		[3771, 3],
		[3778, 1],
		[3799, 1],
		[3820, 1],
		[3848, 1],
		[3869, 1],
		[3897, 1],
		[3925, 1],
		[3946, 1],
		[3974, 2],
		[3995, 1],
		[4016, 2],
		[4030, 2],
		[4072, 1],
		[4100, 54],
		[4114, 9],
		[4121, 8],
		[4128, 6]
	]
}
