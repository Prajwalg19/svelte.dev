{
	"name": "svelte-intersection-tracker",
	"description": "Tracks element intersection and visibility percentage in Svelte.",
	"repo_url": "https://github.com/Corrl/svelte-intersection-tracker",
	"authors": ["corrl"],
	"homepage": "https://corrl.github.io/svelte-intersection-tracker/",
	"downloads": 8,
	"updated": "2022-07-06T09:20:28.471Z",
	"tags": ["miscellaneous"],
	"github_stars": 5,
	"typescript": false,
	"version": "1.0.1",
	"svelte_range": "^3.44.0",
	"kit_range": "next",
	"last_rune_check_version": "1.0.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-intersection-tracker",
				"version": "1.0.1",
				"size": 15534
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Svelte Intersection Tracker\n\nBy using the [Intersection Observer API](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)\nthis Svelte Component(set) enables tracking of the following options\n\n- **isIntersecting**\n- **percentage** - Math.max(% visible of element, % element is taking up of viewport)\n- **current** - elements with the highest percentage\n\n## Demo\n\nhttps://corrl.github.io/svelte-intersection-tracker/\n\n| :exclamation: NOTICE                                                                                                                                  |\n|:------------------------------------------------------------------------------------------------------------------------------------------------------|\n| The component uses `entry.rootBounds` which seems to be unavailable when sandboxed, so unfortunately it's not possible to make an example in the REPL |\n\n## Installation\n\n```sh\nnpm i svelte-intersection-tracker\n```\n\n## Usage\n\n### Structure\n\n```html\nimport {IntersectionTracker, IntersectionTrackerLink, IntersectionTrackerItem} from 'svelte-intersection-tracker'\n\n<IntersectionTracker options={{...}}>\n    ...\n\n    <IntersectionTrackerLink id={data.id}\n                             let:isIntersecting\n                             let:percentage\n                             let:current>\n        ...\n    </IntersectionTrackerLink>\n\n    ...\n\n    <IntersectionTrackerItem id={data.id}\n                             let:isIntersecting\n                             let:percentage\n                             let:current>\n        ...\n    </IntersectionTrackerItem>\n\n    ...\n\n</IntersectionTracker>\n```\n\n### Example\n\n```html\nimport {IntersectionTracker, IntersectionTrackerLink, IntersectionTrackerItem} from 'svelte-intersection-tracker'\n\n<IntersectionTracker>\n\n    <ul>\n        {#each data as d}\n        <IntersectionTrackerLink id={d.id}\n                                 let:current\n        >\n            <li class:current-link={current}>\n                <a href=\"#{d.id}\">\n                    {d.title}\n                </a>\n            </li>\n        </IntersectionTrackerLink>\n        {/each}\n    </ul>\n\n    <div id=\"items\">\n        {#each data as d}\n        <IntersectionTrackerItem id={d.id}\n                                 let:current\n        >\n            <div class=\"item\"\n                 class:current-item={current}\n            >\n                <h1>\n                    {d.title}\n                </h1>\n                <p>\n                    {d.content}\n                </p>\n            </div>\n        </IntersectionTrackerItem>\n        {/each}\n    </div>\n\n</IntersectionTracker>\n```\n\n## API\n\n### Props `<IntersectionTracker>`\n\n| Name               | Type                         | Default              | Description                                                                                                                                                                                                                                                                           | Required |\n|--------------------|------------------------------|----------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------|\n| options.root       | `HTMLElement`&#124; `string` | `window`             | Either reference to element or id as string. The element that is used as the viewport for checking visibility of the target. Must be the ancestor of the target.                                                                                                                      | `false`  |\n| options.rootMargin | `string`                     | `0px`                | Margin around the root. Can have values similar to the CSS margin property, e.g. \"10px 20px 30px 40px\" (top, right, bottom, left). [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API#rootmargin)                                                       | `false`  |\n| options.fineness   | `number`                     | `100`                  | Based on `fineness` an array for `options.threshold`is generated, see examples below                                                                                                                                                                                                  | `false`  |\n| options.threshold  | `number` &#124;  `number[]`        | `[0, 0.01, 0.02, 0.03, ..., 0.97, 0.98, 0.99, 1]` | Overwrites `fineness` if provided. Either a single number or an array of numbers which indicate at what percentage of the target's visibility the observer's callback should be executed. [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API#threshold) | `false`  |\n\n| fineness      |threshold|\n|---------------|---|\n| 5             |`[0, 0.2, 0.4, 0.6, 0.8, 1]`|\n| 10            |`[0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]`|\n| 100 (default) |`[0, 0.01, 0.02, 0.03, 0.04, 0.05, ..., 0.95, 0.96, 0.97, 0.98, 0.99, 1]`|\n\n### Props `<IntersectionTrackerLink>/<IntersectionTrackerItem>`\n\n| Name  | Type     | Default | Description                                                                      | Required |\n|-------|----------|---------|----------------------------------------------------------------------------------|----------|\n| id    | `string` | -       | Tracked items will be wrapped in a div with the provided id<br/>stylable via `.svelte-intersection-tracker-item` | `true`   |\n| group | `number` | `0`       | By defining groups items can be watched seperately e.g. for tracking subsections | `false`  |\n\n### let:props\n\n|                    | Type      | Default | Description                                                                                                                                                                                                                                    |\n|--------------------|-----------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| let:isIntersecting | `boolean` | `false`   | Is true if the target element intersects with the intersection observer's root                                                                                                                                                                 |\n| let:percentage     | `number`  | `0`       | Value between 0 and 1 representing the higher value of either the visible percentage of the elements area or the percentage the element is taking up of the viewport<br/>0.2 => Either 20% of element visible or element fills 20% of viewport |\n| let:current        | `boolean` | `false`   | True if element has highest percentage in own group. May be true for multiple elements if they share the same percentage, e.g. 1 when 100% visible.                                                                                            |\n\n## Examples\n\n```html\n\n<IntersectionTrackerLink\n        id={d.id}\n        let:percentage\n>\n    <li\n            style:font-weight=\"{400+400*percentage}\"\n            style:font-size=\"{1+.4*percentage}rem\"\n    >\n        <a href=\"#{d.id}\">\n            {d.title}\n        </a>\n    </li>\n</IntersectionTrackerLink>\n```\n\n```html\n\n<IntersectionTrackerItem\n        id={d.id}\n        let:percentage\n>\n    <div class=\"item\"\n         style:background=\"rgba(255,255,255,{percentage})\"\n         style:box-shadow=\"{4*percentage}px {4*percentage}px {20*percentage+10}px {5*percentage}px rgba(113,127,132,{percentage*.4})\"\n    >\n        ...\n    </div>\n</IntersectionTrackerItem>\n```\n\n```html\n\n<IntersectionTrackerLink\n        id={d.id}\n        let:percentage\n        let:current\n>\n    <li\n            style:color=\"hsl({percentage*70+155}, 50%, 50%)\"\n    >\n        <div class=\"link-marker\"\n             class:current-link={current}\n        >\n            â˜…\n        </div>\n        <a href=\"#{d.id}\">{d.title}</a>\n    </li>\n</IntersectionTrackerLink>\n```",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 1],
		[3603, 17],
		[3610, 16],
		[3617, 15],
		[3631, 1],
		[3645, 15],
		[3659, 1],
		[3666, 17],
		[3680, 2],
		[3694, 15],
		[3708, 1],
		[3729, 2],
		[3736, 15],
		[3757, 2],
		[3778, 1],
		[3785, 1],
		[3792, 2],
		[3799, 2],
		[3806, 3],
		[3834, 4],
		[3848, 2],
		[3855, 76],
		[3862, 1],
		[3876, 1],
		[3883, 2],
		[3890, 16],
		[3897, 1],
		[3904, 3],
		[3911, 3],
		[3932, 3],
		[3939, 4],
		[3946, 3],
		[3960, 2],
		[3967, 3],
		[3981, 1],
		[3995, 16],
		[4009, 1],
		[4023, 1],
		[4030, 15],
		[4037, 8],
		[4044, 17],
		[4051, 2],
		[4058, 1],
		[4065, 2],
		[4072, 15],
		[4100, 46],
		[4107, 4],
		[4114, 8],
		[4121, 23],
		[4128, 4]
	]
}
