{
	"name": "metawrite",
	"description": "Appwrite SDK with ready-to-use components for SvelteKit.",
	"repo_url": "https://github.com/koodeau/metawrite",
	"authors": ["koodeau"],
	"homepage": "https://increas.io/metawrite",
	"downloads": 72,
	"updated": "2022-06-12T19:33:50.028Z",
	"tags": ["integration", "auth", "database"],
	"github_stars": 26,
	"typescript": true,
	"version": "0.8.1",
	"svelte_range": "^3.48.0",
	"kit_range": "next",
	"last_rune_check_version": "0.8.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "metawrite",
				"version": "0.8.1",
				"size": 182867
			},
			{
				"name": "appwrite",
				"version": "8.0.1",
				"size": 986086
			},
			{
				"name": "cross-fetch",
				"version": "3.1.5",
				"size": 73827
			},
			{
				"name": "node-fetch",
				"version": "2.6.7",
				"size": 152240
			},
			{
				"name": "whatwg-url",
				"version": "5.0.0"
			},
			{
				"name": "tr46",
				"version": "0.0.3"
			},
			{
				"name": "webidl-conversions",
				"version": "3.0.1"
			},
			{
				"name": "isomorphic-form-data",
				"version": "2.0.0",
				"size": 2859
			},
			{
				"name": "form-data",
				"version": "2.5.3",
				"size": 30454
			},
			{
				"name": "asynckit",
				"version": "0.4.0"
			},
			{
				"name": "mime-types",
				"version": "2.1.35",
				"size": 18272
			},
			{
				"name": "mime-db",
				"version": "1.52.0",
				"size": 205539
			},
			{
				"name": "safe-buffer",
				"version": "5.2.1",
				"size": 32101
			},
			{
				"name": "combined-stream",
				"version": "1.0.8",
				"size": 11514
			},
			{
				"name": "delayed-stream",
				"version": "1.0.0"
			},
			{
				"name": "es-set-tostringtag",
				"version": "2.1.0",
				"size": 14544
			},
			{
				"name": "es-errors",
				"version": "1.3.0",
				"size": 12324
			},
			{
				"name": "get-intrinsic",
				"version": "1.3.0",
				"size": 46542
			},
			{
				"name": "call-bind-apply-helpers",
				"version": "1.0.2",
				"size": 15952
			},
			{
				"name": "function-bind",
				"version": "1.1.2",
				"size": 31427
			},
			{
				"name": "es-define-property",
				"version": "1.0.1",
				"size": 10217
			},
			{
				"name": "es-object-atoms",
				"version": "1.1.1",
				"size": 11442
			},
			{
				"name": "get-proto",
				"version": "1.0.1",
				"size": 10840
			},
			{
				"name": "dunder-proto",
				"version": "1.0.1",
				"size": 13003
			},
			{
				"name": "gopd",
				"version": "1.2.0",
				"size": 9869
			},
			{
				"name": "has-symbols",
				"version": "1.1.0",
				"size": 23409
			},
			{
				"name": "hasown",
				"version": "2.0.2",
				"size": 8765
			},
			{
				"name": "math-intrinsics",
				"version": "1.1.0",
				"size": 17323
			},
			{
				"name": "has-tostringtag",
				"version": "1.0.2",
				"size": 17603
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[3, 4],
			[4, 5],
			[4, 6],
			[1, 7],
			[7, 8],
			[8, 9],
			[8, 10],
			[10, 11],
			[8, 12],
			[8, 13],
			[13, 14],
			[8, 15],
			[15, 16],
			[15, 17],
			[17, 18],
			[18, 16],
			[18, 19],
			[17, 20],
			[17, 16],
			[17, 21],
			[21, 16],
			[17, 19],
			[17, 22],
			[22, 23],
			[23, 18],
			[23, 16],
			[23, 24],
			[22, 21],
			[17, 24],
			[17, 25],
			[17, 26],
			[26, 19],
			[17, 27],
			[15, 28],
			[28, 25],
			[15, 26]
		],
		"circular": []
	},
	"readme": "<p align=\"center\">\n  <img alt=\"Metawrite\" src=\"static/logo.svg\" />\n</p>\n\n<a href=\"https://www.npmjs.com/package/metawrite\">\n  <img src=\"https://img.shields.io/badge/npm-CB3837?style=for-the-badge&logo=npm&logoColor=white\" />\n</a>\n\n<a href=\"https://classic.yarnpkg.com/en/package/metawrite\">\n  <img src=\"https://img.shields.io/badge/Yarn-2C8EBB?style=for-the-badge&logo=yarn&logoColor=white\" />\n</a>\n\n# Support Us \n\n**Get free $100 credits on DigitalOcean:**\n\n<a href=\"https://m.do.co/c/843c1f24ad90\">\n  <img src=\"https://img.shields.io/badge/Digital_Ocean-0080FF?style=for-the-badge&logo=DigitalOcean&logoColor=white\" />\n</a>\n\n**Join our Discord:**\n\n<a href=\"https://discord.gg/n3WZxtbkCm\">\n  <img src=\"https://img.shields.io/badge/Discord-5865F2?style=for-the-badge&logo=discord&logoColor=white\" />\n</a>\n\n---\n\n[![npm Package](https://github.com/koodeau/metawrite/actions/workflows/npm-publish.yml/badge.svg)](https://github.com/koodeau/metawrite/actions/workflows/npm-publish.yml) \n\nMetawrite is [Appwrite](https://appwrite.io/) SDK with ready to go components for `Svelte` / `SvelteKit`\n\nThis package is maintained by [Increasio](https://increas.io).\n\n> Note: versions `x.x.n` means some minor changes to package documentation or typings.\n> \n> versions `x.n.x` might include some minor breaking changes. See [Release Notes](https://github.com/koodeau/metawrite/blob/main/CHANGELOG.md).\n> \n> versions `n.x.x` might include some major breaking changes. See [Release Notes](https://github.com/koodeau/metawrite/blob/main/CHANGELOG.md).\n\n## Important info\n\nThe package is fully working and compatible with Appwrite Server 0.12, Web SDK 6, and SvelteKit. But people are currently facing difficulties with `npm install metawrite`. We have ready and configured [**SvelteKit template**](https://github.com/koodeau/sveltekit-metawrite) that uses Metawrite and could be also used as Docker image like described [here](https://github.com/koodeau/sveltekit-metawrite#appwrite-and-sveltekit-combo).\n\n> Please consider using [template](https://github.com/koodeau/sveltekit-metawrite), this is temporary \n\n# Documentation\n\n### Installation\n\nUsing NPM:\n\n```bash\nnpm install metawrite\n```\n\nUsing Yarn:\n\n```bash\nyarn add metawrite\n```\n\n# Table of contents\n\n- [Support Us](#support-us)\n\t- [Important info](#important-info)\n- [Documentation](#documentation)\n\t\t- [Installation](#installation)\n- [Table of contents](#table-of-contents)\n- [Usage](#usage)\n\t- [Initialize](#initialize)\n\t\t- [Properties](#properties)\n\t- [Create user](#create-user)\n\t\t- [Directives](#directives)\n\t\t\t- [Arguments](#arguments)\n\t\t- [Events](#events)\n\t\t\t- [Arguments](#arguments-1)\n\t\t\t- [Arguments](#arguments-2)\n\t- [Login via Email](#login-via-email)\n\t\t- [Directives](#directives-1)\n\t\t\t- [Arguments](#arguments-3)\n\t\t- [Events](#events-1)\n\t\t\t- [Arguments](#arguments-4)\n\t\t\t- [Arguments](#arguments-5)\n\t- [Login via OAuth2](#login-via-oauth2)\n\t\t- [Properties](#properties-1)\n\t\t- [Directives](#directives-2)\n\t- [Get user](#get-user)\n\t\t- [Directives](#directives-3)\n\t- [Get Collection](#get-collection)\n\t\t- [Properties](#properties-2)\n\t\t- [Directives](#directives-4)\n\t\t\t- [Arguments](#arguments-6)\n\t- [Get Document](#get-document)\n\t\t- [Properties](#properties-3)\n\t\t- [Directives](#directives-5)\n\t\t\t- [Arguments](#arguments-7)\n\t\t- [Events](#events-2)\n- [API](#api)\n\t- [Account](#account)\n\t\t- [`<User />`](#user-)\n\t\t\t- [Slots](#slots)\n\t\t\t- [Directives](#directives-6)\n\t\t\t- [Events](#events-3)\n\t\t\t- [Example](#example)\n\t\t- [`<Create />`](#create-)\n\t\t\t- [Directives](#directives-7)\n\t\t\t- [Events](#events-4)\n\t\t\t- [Example](#example-1)\n\t\t- [`<Preferences />`](#preferences-)\n\t\t\t- [Slots](#slots-1)\n\t\t\t- [Directives](#directives-8)\n\t\t\t- [Events](#events-5)\n\t\t\t- [Example](#example-2)\n\t\t- [`<RecoverPassword />`](#recoverpassword-)\n\t\t\t- [Directives](#directives-9)\n\t\t\t- [Events](#events-6)\n\t\t\t- [Example](#example-3)\n\t\t- [`<Update />`](#update-)\n\t\t\t- [Directives](#directives-10)\n\t\t\t- [Events](#events-7)\n\t\t\t- [Example](#example-4)\n\t\t- [`<Verification />`](#verification-)\n\t\t\t- [Directives](#directives-11)\n\t\t\t- [Events](#events-8)\n\t\t\t- [Example](#example-5)\n\t- [Auth](#auth)\n\t\t- [`<AuthEmail />`](#authemail-)\n\t\t\t- [Slots](#slots-2)\n\t\t\t- [Directives](#directives-12)\n\t\t\t- [Events](#events-9)\n\t\t\t- [Example](#example-6)\n\t\t- [`<AuthOAuth2 />`](#authoauth2-)\n\t\t\t- [Properties](#properties-4)\n\t\t\t- [Example](#example-7)\n\t\t- [`<CreateAnonymousSession />`](#createanonymoussession-)\n\t\t\t- [Directives](#directives-13)\n\t\t\t- [Example](#example-8)\n\t\t- [`<CreateJWT />`](#createjwt-)\n\t\t\t- [Directives](#directives-14)\n\t\t\t- [Example](#example-9)\n\t\t- [`<MagicURL />`](#magicurl-)\n\t\t\t- [Directives](#directives-15)\n\t\t\t- [Example](#example-10)\n\t- [Avatars](#avatars)\n\t\t- [`<Browser />`](#browser-)\n\t\t\t- [Arguments](#arguments-8)\n\t\t\t- [Directives](#directives-16)\n\t\t\t- [Example](#example-11)\n\t\t- [`<CreditCard />`](#creditcard-)\n\t\t\t- [Arguments](#arguments-9)\n\t\t\t- [Directives](#directives-17)\n\t\t\t- [Example](#example-12)\n\t\t- [`<Favicon />`](#favicon-)\n\t\t\t- [Arguments](#arguments-10)\n\t\t\t- [Directives](#directives-18)\n\t\t- [`<Flag />`](#flag-)\n\t\t\t- [Arguments](#arguments-11)\n\t\t\t- [Directives](#directives-19)\n\t\t\t- [Example](#example-13)\n\t\t- [`<Image />`](#image-)\n\t\t\t- [Arguments](#arguments-12)\n\t\t\t- [Directives](#directives-20)\n\t\t\t- [Example](#example-14)\n\t\t- [`<QR />`](#qr-)\n\t\t\t- [Arguments](#arguments-13)\n\t\t\t- [Directives](#directives-21)\n\t\t\t- [Example](#example-15)\n\t- [Database](#database)\n\t\t- [`<Collection />`](#collection-)\n\t\t\t- [Arguments](#arguments-14)\n\t\t\t- [Slots](#slots-3)\n\t\t\t- [Directives](#directives-22)\n\t\t\t- [Example](#example-16)\n\t\t- [`<Document />`](#document-)\n\t\t\t- [Arguments](#arguments-15)\n\t\t\t- [Slots](#slots-4)\n\t\t\t- [Directives](#directives-23)\n\t\t\t- [Example](#example-17)\n\t- [Realtime](#realtime)\n\t\t\t- [Arguments](#arguments-16)\n\t\t\t- [Directives](#directives-24)\n\t\t\t- [Example](#example-18)\n\t- [Storage](#storage)\n\t\t- [`<Storage />`](#storage-)\n\t\t\t- [Directives](#directives-25)\n\t\t\t- [Example](#example-19)\n\t\t- [`<FileList />`](#filelist-)\n\t\t\t- [Arguments](#arguments-17)\n\t\t\t- [Slots](#slots-5)\n\t\t\t- [Directives](#directives-26)\n\t\t\t- [Example](#example-20)\n\t\t- [`<File />`](#file-)\n\t\t\t- [Arguments](#arguments-18)\n\t\t\t- [Directives](#directives-27)\n\t\t\t- [Example](#example-21)\n\t- [Functions](#functions)\n\t\t- [`<Function />`](#function-)\n\t\t\t- [Directives](#directives-28)\n\t\t\t- [Slots](#slots-6)\n\t\t\t- [Example](#example-22)\n\t- [Locale](#locale)\n\t\t- [`<Continents />`](#continents-)\n\t\t\t- [Directives](#directives-29)\n\t\t\t- [Slots](#slots-7)\n\t\t\t- [Example](#example-23)\n\t\t- [`<Countries />`](#countries-)\n\t\t\t- [Arguments](#arguments-19)\n\t\t\t- [Slots](#slots-8)\n\t\t\t- [Directives](#directives-30)\n\t\t\t- [Example](#example-24)\n\t\t- [`<Currencies />`](#currencies-)\n\t\t\t- [Slots](#slots-9)\n\t\t\t- [Directives](#directives-31)\n\t\t\t- [Example](#example-25)\n\t\t- [`<Languages />`](#languages-)\n\t\t\t- [Slots](#slots-10)\n\t\t\t- [Directives](#directives-32)\n\t\t\t- [Example](#example-26)\n\t\t- [`<Locale />`](#locale-)\n\t\t\t- [Slots](#slots-11)\n\t\t\t- [Directives](#directives-33)\n\t\t\t- [Example](#example-27)\n\t\t- [`<PhoneCodes />`](#phonecodes-)\n\t\t\t- [Slots](#slots-12)\n\t\t\t- [Directives](#directives-34)\n\t\t\t- [Example](#example-28)\n- [Stack](#stack)\n\n# Usage\n\n> You need a running instance of Appwrite to use this library. Go to https://appwrite.io/docs/installation for more instructions.\n\n**Psuedo Example**\n\nHandle multiple levels of async relational data (and their loading & fallback states) entirely from the Svelte markup.\n\n```svelte\n<!-- 1. 💪 Appwrite App -->\n<Appwrite {...config}>\n\n    <!-- 2. 😀 Get the current user if logged in -->\n    <User let:user>\n\n        <h1>Hello {user.name}!</h1>\n\n        <!-- 3. 📚 Get all the documents from a collection -->\n        <Collection collectionId=\"5f56a3035a01f\" let:documents>\n            You have {documents.length} documents.\n\n            {#each documents as document}\n\n                <!-- 4. 📜 Get a document -->\n                <Document collectionId=\"5f56a3035a01f\" documentId={document.$id} {document}>\n                    Title: {document.title}\n                    Text: {document.text}\n...\n```\n\n## Initialize\n\nMust be initialised and wrap every `metawrite` component.\n\n```svelte\n<script>\n\timport { Appwrite } from 'metawrite';\n\n\tconst config = {\n\t\tendpoint: 'http://localhost/v1',\n\t\tproject: 'demo',\n\t\tlocale: 'fr'\n\t};\n</script>\n\n<Appwrite {...config}>...</Appwrite>\n```\n\n### Properties\n\n| Name       | Description                                     |\n| ---------- | ----------------------------------------------- |\n| `endpoint` | Your Appwrite endpoint. `@type - {string}`      |\n| `project`  | Your project ID. `@type - {string}`             |\n| `locale`   | _Optional_ The users locale. `@type - {string}` |\n| `realtime`   | _Optional_ Set Custom realtime endpoint. By default the same as `endpoint`. `@type - {string}` |\n\n## Create user\n\nRegisters a new account.\n\n```svelte\n<script>\n\timport { Create } from 'metawrite';\n\n\tlet email = '';\n\tlet password = '';\n\tlet name = '';\n\n\tconst success = (e) => {\n\t\t//success callback\n\t\t// `e` contains the user object\n\t};\n\n\tconst failure = (e) => {\n\t\t//failure callback\n\t};\n</script>\n\n<Create let:actions on:success on:failure>\n\t<input type=\"text\" bind:value={email} />\n\t<input type=\"password\" bind:value={password} />\n\t<input type=\"text\" bind:value={name} />\n\t<button on:click={actions.create(email, password, name)}>Register</button>\n</Create>\n```\n\n### Directives\n\n**let:actions** `object`\n\nObject with function.\n\n#### Arguments\n\n| Name                            | Description                              |\n| ------------------------------- | ---------------------------------------- |\n| `create(email, password, name)` | Registers a new user. `@type - {string}` |\n\n### Events\n\n**on:success**\n\nTriggers on successful register.\n\n#### Arguments\n\n| Name       | Description |\n| ---------- | ----------- |\n| `response` | Response    |\n\n**on:failure**\n\nTriggers on failed register.\n\n#### Arguments\n\n| Name       | Description |\n| ---------- | ----------- |\n| `response` | Response    |\n\n## Login via Email\n\nLogin via email and password.\n\n```svelte\n<script>\n\timport { AuthEmail } from 'metawrite';\n\n\tlet email = '';\n\tlet password = '';\n\n\tconst success = (e) => {\n\t\t//success callback\n\t\t// `e` contains the user object\n\t};\n\n\tconst failure = (e) => {\n\t\t//failure callback\n\t};\n</script>\n\n<AuthEmail let:authorize on:success on:failure>\n\t<input type=\"text\" bind:value={email} />\n\t<input type=\"text\" bind:value={password} />\n\t<button on:click={authorize(email, password)}>Login</button>\n</AuthEmail>\n```\n\n### Directives\n\n**let:authorize** `function`\n\nInitiates login.\n\n#### Arguments\n\n| Name       | Description                  |\n| ---------- | ---------------------------- |\n| `email`    | E-Mail. `@type - {string}`   |\n| `password` | Password. `@type - {string}` |\n\n### Events\n\n**on:success**\n\nTriggers on successful login.\n\n#### Arguments\n\n| Name    | Description                |\n| ------- | -------------------------- |\n| `email` | E-Mail. `@type - {string}` |\n\n**on:failure**\n\nTriggers on failed login.\n\n#### Arguments\n\n| Name    | Description   |\n| ------- | ------------- |\n| `error` | Error object. |\n\n## Login via OAuth2\n\nLogin via an OAuth2 provider.\n\n```svelte\n<script>\n\timport { AuthOAuth2 } from 'metawrite';\n</script>\n\n<AuthOAuth2\n\tauthProvider=\"google\"\n\tsuccess=\"http://localhost:3000?success\"\n\tfailure=\"http://localhost:3000?failure\"\n\tlet:authorize\n>\n\t<button on:click={authorize}>Login Google</button>\n</AuthOAuth2>\n```\n\n### Properties\n\n| Name       | Description                         |\n| ---------- | ----------------------------------- |\n| `authProvider` | OAuth2 provider. `@type - {string}` |\n| `success`  | Success url. `@type - {string}`     |\n| `failure`  | Failure url. `@type - {string}`     |\n\n### Directives\n\n**let:authorize** `function`\n\n## Get user\n\nRequests current user to check if logged in.\n\n```svelte\n<script>\n\timport { User } from 'metawrite';\n</script>\n\n<User let:user>\n\t<h1>Hello {user.name}!</h1>\n\t<div>{user.email}</div>\n\n\t<div slot=\"error\">You are not logged in!</div>\n</User>\n```\n\n### Directives\n\n**let:user** `object`\n\nGet currently logged in user data.\n\n## Get Collection\n\nGet a list of all the documents from a collection.\n\n```svelte\n<script>\n\timport { Collection } from 'metawrite';\n</script>\n\n<Collection collectionId=\"5f56a3035a01f\" let:documents>\n\tYou have {documents.length} documents.\n</Collection>\n```\n\n### Properties\n\n| Name           | Description                                                            |\n| -------------- | ---------------------------------------------------------------------- |\n| `collectionId` | Collection unique ID. `@type - {string}`                               |\n| _additional_   | same as [here](https://appwrite.io/docs/client/database#listDocuments) |\n\n### Directives\n\n**let:documents** `array`\n\nArray of documents.\n\n**let:actions** `object`\n\nObject with function.\n\n#### Arguments\n\n| Name                        | Description                                                                                                                                        |\n| --------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `reload()`                  | Re-fetch collection.                                                                                                                               |\n| `create(data, read, write)` | Create a new Document in the collection. `read`/`write` is optional and current user by default `@type - {string[]}`. `data` is `@type - {string}` |\n\n## Get Document\n\nGet a document. If you pass the `document` property with data from <Collection />, there wont be any data requested.\n\n```svelte\n<script>\n\timport { Document } from 'metawrite';\n</script>\n\n<Document documentId=\"5f56a3asda01f\" let:document>\n\tTitle: {document.title}\n\tText: {document.text}\n</Document>\n```\n\n### Properties\n\n| Name           | Description                              |\n| -------------- | ---------------------------------------- |\n| `documentId`   | Document unique ID. `@type - {string}`   |\n| `collectionId` | Collection unique ID. `@type - {string}` |\n| or             |                                          |\n| `document`     | Document passed from `<Collection />`    |\n\n### Directives\n\n**let:document** `object`\n\nA JSON object with the document data.\n\n**let:actions** `object`\n\nObject with function.\n\n#### Arguments\n\n| Name           | Description                                       |\n| -------------- | ------------------------------------------------- |\n| `update(data)` | Update the document. `data` is `@type - {string}` |\n| `remove()`     | Deletes the document.                             |\n| `reload()`     | Re-fetch document.                                |\n\n### Events\n\n**on:change**\n\nTriggers on update or remove login.\n\n# API\n\n## Account\n\nThe Account components allow you to manage a user account.\n\n### `<User />`\n\n#### Slots\n\n- **loading**\n- **error**\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `reload()` | Reload. |\n| `logout()` | Logout current session. |\n| `logoutAll()` | Logout from all session. |\n| `logoutFrom(session)` | Logout from specific session. `session` is `@type - {string}` |\n\n- **let:user** `object`\n- **let:error**\n\n#### Events\n\n- **on:success** On user fetch success.\n- **on:failure** On user fetch failure.\n- **on:successLogout** On `logout` success.\n- **on:failureLogout** On `logout` failure.\n- **on:successLogoutFrom** On `logoutFrom` success.\n- **on:failureLogoutFrom** On `logoutFrom` failure.\n- **on:successLogoutAll** On `logoutAll` success.\n- **on:failureLogoutAll** On `logoutAll` failure.\n\n#### Example\n\n```svelte\n<script>\n\timport { User } from 'metawrite';\n</script>\n\n<User let:actions let:user>\n\t<button on:click={actions.reload()}>Reload user data</button>\n\t<button on:click={actions.get()}>Get logged in user data</button>\n\t<button on:click={actions.logout()}>Log out from current session</button>\n\t<button on:click={actions.logoutFrom('sessionId')}>Log out from specific session</button>\n\t<button on:click={actions.logoutAll()}>Log out from all sessions</button>\n\n\t<!-- If logged in -->\n\t<p>Hi, {user.name}</p>\n</User>\n```\n\n### `<Create />`\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `create(email, password, name)` | Creates a user. `email` and `password` are required - `@type - {string}`. `name` is _optional_ - `@type - {string}` |\n\n#### Events\n\n- **on:success** On `create` success.\n- **on:failure** On `create` failure.\n\n#### Example\n\n```svelte\n<script>\n\timport { Create } from 'metawrite';\n\n\tlet name,\n\t\temail,\n\t\tpassword = '';\n\n\tconst success = (e) => {\n\t\t// success callback\n\t\t// `e` contains the user object\n\t};\n\n\tconst failure = (e) => {\n\t\t// failure callback\n\t};\n</script>\n\n<Create let:actions on:success on:failure>\n\t<input type=\"text\" name=\"name\" placeholder=\"name\" bind:value={name} />\n\t<input type=\"text\" name=\"email\" placeholder=\"email\" bind:value={email} />\n\t<input type=\"password\" name=\"password\" placeholder=\"password\" bind:value={password} />\n\t<button on:click={actions.create(name, email, password)}>Create Account</button>\n</Create>\n```\n\n### `<Preferences />`\n\n#### Slots\n\n- **loading**\n- **error**\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `reload()` | Reloads preferences. |\n| `update(prefs)` | Update preferences. `prefs` - `@type - {object}` |\n\n#### Events\n\n- **on:success** On init and `reload` success.\n- **on:failure** On init and `reload` failure.\n- **on:successUpdate** On `update` success.\n- **on:failureUpdate** On `update` failure.\n\n#### Example\n\n```svelte\n<script>\n\timport { Preferences } from 'metawrite';\n\n\tlet prefs = {\n\t\t// You can pass only the specific settings you wish to update.\n\t};\n</script>\n\n<Preferences let:actions>\n\t<button\n\t\ton:click={() => {\n\t\t\tactions.update(prefs);\n\t\t\tactions.reload();\n\t\t}}>Update Preferences</button\n\t>\n</Preferences>\n```\n\n### `<RecoverPassword />`\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `recover(email, url)` | Recover password. `email` and `url` is required and `@type - {string}`. `url` is your page where you will handle `secret` with `complete` function. |\n| `complete(user, secret, password, passwordAgain)` | Complete password recovery. `user` and `secret` are set automatically by `metawrite`, so you don’t have to set them. `password` and `passwordAgain` are required - `@type - {string}`. |\n\n#### Events\n\n- **on:successRecover** On init and `reload` success.\n- **on:failureRecover** On init and `reload` failure.\n- **on:successComplete** On `update` success.\n- **on:failureComplete** On `update` failure.\n\n#### Example\n\n```svelte\n<script>\n    import { RecoverPassword } from \"metawrite\";\n\n    const url = \"http://localhost:3000/reset-password\"; // URL that will point to the next step.\n    let email = '';\n\n    const successRecover = e => {\n    //success callback\n    // `e` contains the user object\n  };\n\n  const failureRecover = e => {\n    //failure callback\n  }\n</script>\n\n<!-- localhost/forgot-password -->\n<RecoverPassword let:actions on:successRecover on:failureRecover>\n    <input name=\"email\" type=\"text\" bind:value={email, url} placeholder=\"Email\" />\n    <button on:click{actions.recover(email)}>Recover Password</button>\n</RecoverPassword>\n\n<!-- Then on localhost/reset-password  -->\n<script>\n    import { RecoverPassword } from \"metawrite\";\n\n    let password, passwordAgain = '';\n\n    const successComplete = e => {\n    //success callback\n    // `e` contains the user object\n  };\n\n  const failureComplete = e => {\n    //failure callback\n  }\n</script>\n\n<RecoverPassword let:actions on:successComplete on:failureComplete>\n    <input type=\"password\" name=\"password\" bind:value{password} placeholder=\"Password\" />\n    <input type=\"password\" name=\"password\" bind:value{passwordAgain} placeholder=\"Confirm Password\" />\n    <button on:click{actions.complete(password, passwordAgain)}>Set New Password</button>\n</RecoverPassword>\n```\n\n### `<Update />`\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `name(name)` | Update name. All fields are required. `@type - {string}` |\n| `email(email, password)` | Update email. All fields are required. `@type - {string}` |\n| `password(password, oldPassword)` | Update password. All fields are required. `@type - {string}` |\n\n#### Events\n\n- **on:successName** On `name` success.\n- **on:failureName** On `name` failure.\n- **on:successEmail** On `email` success.\n- **on:failureEmail** On `email` failure.\n- **on:successPassword** On `password` success.\n- **on:failurePassword** On `password` failure.\n\n#### Example\n\n```svelte\n<script>\n\timport { Update } from 'metawrite';\n\n\tlet name,\n\t\temail,\n\t\tpassword,\n\t\tnewPassword,\n\t\toldPassword = '';\n</script>\n\n<Update let:actions>\n\t<button on:click={actions.name(name)}>This updates name</button>\n\t<button on:click={actions.email(email, password)}>This updates email</button>\n\t<button on:click={actions.password(newPassword, oldPassword)}>This updates password</button>\n</Update>\n```\n\n### `<Verification />`\n\nCreates and automatically validates user email verification.\n\n- `url` of type string for action `create` should be where your app is hosted or `localhost`.\n- For `update` action you don't need to pass anything, the process is automated.\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `create(url)` | Create Verification. `url` is what URL used to create verification link sent to your email inbox. `@type - {string}` |\n| `update(user, secret)` | Complete Verification. `user` and `secret` are set automatically by `metawrite`. |\n\n#### Events\n\n- **on:successCreate** On `create` success.\n- **on:failureCreate** On `create` failure.\n- **on:successComplete** On `complete` success.\n- **on:failureComplete** On `complete` failure.\n\n#### Example\n\n```svelte\n<script>\n\timport { Verification } from 'metawrite';\n\n\tconst url = window.location.href;\n</script>\n\n<Verification let:actions>\n\t<button on:click={actions.create(url)} />\n\t<button on:click={actions.update()}>Update email verification status</button>\n</Verification>\n```\n\n## Auth\n\nThe Auth components allow you to authenticate a user account.\n\n### `<AuthEmail />`\n\n#### Slots\n\n- **loading**\n- **success**\n- **error**\n\n#### Directives\n\n- **let:authorize(email, password)**\n- **let:user**\n- **let:error**\n\n#### Events\n\n- **on:success** On `authorize` success.\n- **on:failure** On `authorize` failure.\n\n#### Example\n\n```svelte\n<script>\n\timport { AuthEmail } from 'metawrite';\n\n\tlet email = '';\n\tlet password = '';\n\n\tconst success = (e) => {\n\t\t//success callback\n\t\t// `e` contains the user object\n\t};\n\n\tconst failure = (e) => {\n\t\t//failure callback\n\t};\n</script>\n\n<AuthEmail let:authorize on:success on:failure>\n\t<input type=\"text\" bind:value={email} />\n\t<input type=\"text\" bind:value={password} />\n\t<button on:click={authorize(email, password)}>Login</button>\n</AuthEmail>\n```\n\n### `<AuthOAuth2 />`\n\n#### Properties\n\n| Name            | Description                         |\n| --------------- | ----------------------------------- |\n| `authProvider`      | OAuth2 provider. `@type - {string}` |\n| `success`       | Success url. `@type - {string}`     |\n| `failure`       | Failure url. `@type - {string}`     |\n| #### Directives |                                     |\n\n**let:authorize()**\n\n#### Example\n\n```svelte\n<script>\n\timport { AuthOAuth2 } from 'metawrite';\n</script>\n\n<AuthOAuth2\n\tauthProvider=\"google\"\n\tsuccess=\"http://localhost:3000?success\"\n\tfailure=\"http://localhost:3000?failure\"\n\tlet:authorize\n>\n\t<button on:click={authorize}>Login Google</button>\n</AuthOAuth2>\n```\n\n### `<CreateAnonymousSession />`\n\n#### Directives\n\n**let:actions**\n\n| Name       | Description                |\n| ---------- | -------------------------- |\n| `create()` | Creates anonymous session. |\n\n#### Example\n\n```svelte\n<script>\n\timport { CreateAnonymousSession } from 'metawrite';\n</script>\n\n<CreateAnonymousSession let:actions>\n\t<button on:click={actions.create}>Create Anonymous Session</button>\n</CreateAnonymousSession>\n```\n\n### `<CreateJWT />`\n\nCreates JWT token.\n\n#### Directives\n\n**let:actions**\n\n| Name       | Description        |\n| ---------- | ------------------ |\n| `create()` | Creates JWT token. |\n\n#### Example\n\n```svelte\n<script>\n\timport { CreateJWT } from 'metawrite';\n</script>\n\n<CreateJWT let:actions>\n\t<button on:click={actions.create}>Create JWT token</button>\n</CreateJWT>\n```\n\n### `<MagicURL />`\n\n#### Directives\n\n**let:actions**\n\n| Name                        | Description                                                  |\n| --------------------------- | ------------------------------------------------------------ |\n| `create(sessionId, email, url)` | Creates Magic URL Session. email is required, url is to point on complete step `string`, `sessionId` is not required |\n| `complete()` | Validates and completes Magic URL Session. |\n\n#### Example \n\n```svelte\n<script>\n    import { MagicURL } from \"metawrite\";\n\n    let email = \"\"\n    const url = \"http://localhost:3000/page-to-complete\"\n\n\tconst successCreate = (e) => {\n\t\tconsole.log(e)\n\t}\n\tconst failureCreate = (e) => {\n\t\tconsole.log(e)\n\t}\n\tconst successComplete = (e) => {\n\t\tconsole.log(e)\n\t}\n\tconst failureComplete = (e) => {\n\t\tconsole.log(e)\n\t}\n</script>\n\n<MagicURL let:actions on:successCreate on:successComplete on:failureCreate on:failureComplete>\n\t\t<input type=\"email\" name=\"email\" placeholder=\"Email\" bind:value={email} />\n\t\t<button on:click={actions.create(email, url)}>Send login link</button>\n\t\t<button on:click={actions.complete()}>Confirm Login</button>\n</MagicURL>\n```\n\n## Avatars\n\nThe Avatar components aim to help you complete everyday tasks related to your app image, icons, and avatars.\n\n### `<Browser />`\n\n#### Arguments\n\n- code - _required_ `@type - {string}`\n- width - _optional_ `@type - {number}`\n- height - _optional_ `@type - {string}`\n- quality - _optional_ `@type - {string}`\n\n#### Directives\n\n- **let:src** Image link `@type - {URL}`\n\n#### Example\n\n```svelte\n<script>\n\timport { Browser } from 'metawrite';\n</script>\n\n<Browser code=\"firefox\" let:src>\n\t<img src={String(src)} alt=\"Browser\" />\n</Browser>\n```\n\n### `<CreditCard />`\n\n#### Arguments\n\n- code - _required_ `@type - {string}`\n- width - _optional_ `@type - {number}`\n- height - _optional_ `@type - {string}`\n- quality - _optional_ `@type - {string}`\n\n#### Directives\n\n- **let:src** Image link `@type - {URL}`\n\n#### Example\n\n```svelte\n<script>\n\timport { CreditCard } from 'metawrite';\n</script>\n\n<CreditCard code=\"amex\" let:src>\n\t<img src={String(src)} alt=\"card\" />\n</CreditCard>\n```\n\n### `<Favicon />`\n\n#### Arguments\n\n- url - _required_ `@type - {string}`\n\n#### Directives\n\n- **let:src** Image link `@type - {URL}`\n\n```svelte\n<script>\n\timport { Favicon } from 'metawrite';\n\tconst url = window.location.href;\n</script>\n\n<Favicon {url} let:src>\n\t<img src={String(src)} alt=\"favicon\" />\n</Favicon>\n```\n\n### `<Flag />`\n\n#### Arguments\n\n- code - _required_ `@type - {string}`\n- width - _optional_ `@type - {number}`\n- height - _optional_ `@type - {string}`\n- quality - _optional_ `@type - {string}`\n\n#### Directives\n\n- **let:src** Image link `@type - {URL}`\n\n#### Example\n\n```svelte\n<script>\n\timport { Flag } from 'metawrite';\n</script>\n\n<Flag code=\"canada\" let:src>\n\t<img src={String(src)} alt=\"flag\" />\n</Flag>\n```\n\n### `<Image />`\n\n#### Arguments\n\n- url - _required_ `@type - {string}`\n- width - _optional_ `@type - {number}`\n- height - _optional_ `@type - {number}`\n\n#### Directives\n\n- **let:src** Image link `@type - {URL}`\n\n#### Example\n\n```svelte\n<script>\n\timport { Image } from 'metawrite';\n\n\tlet url = 'https://increas.io/';\n\tlet width,\n\t\theight = 100;\n</script>\n\n<Image {url} {width} {height} let:src>\n\t<img src={String(src)} alt=\"someImage\" />\n</Image>\n```\n\n### `<QR />`\n\n#### Arguments\n\n- text - _required_ `@type - {string}`\n- size - _optional_ `@type - {optional}`\n- margin - _optional_ `@type - {number}`\n- download - _optional_ `@type - {boolean}`\n\n#### Directives\n\n- **let:src** Image link `@type - {URL}`\n\n#### Example\n\n```svelte\n<script>\n\timport { QR } from 'metawrite';\n\n\tlet text = 'https://increas.io/'; // could be any text\n\tlet size = 500;\n\tlet margin = 1;\n\tlet download = false;\n</script>\n\n<QR {text} {size} {margin} {download} let:src>\n\t<img src={String(src)} alt=\"QR Code\" />\n</QR>\n```\n\n## Database\n\nThe Database components allow you to create structured collections of documents, query and filter lists of documents, and manage an advanced set of read and write access permissions.\n\n### `<Collection />`\n\n#### Arguments\n\n- collectionId - *required* `@type - {string}`\n\n- cache - *optional*, by default set to false `@type - {boolean}`\n\n  **query: `@type - {object}`**\n\n- queries - *optional* `@type - {string[]}`\n\n- limit - *optional* `@type - {number}`\n\n- offset - *optional* `@type - {number}`\n\n- cursor - *optional* `@type - {string}`\n\n- cursorDirection - *optional* `@type - {string}`\n\n- orderAttributes - *optional* `@type - {string[]}`\n\n- orderTypes - *optional* `@type - {string[]}`\n\n#### Slots\n\n- **loading**\n- **error**\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `reload()` | Reload. |\n| `create(documentId, data, read, write)` | Creates a Document. `data` - `@type - {string}`.<br /> `read`/`write` is optional `@type - {string[]}`.<br />`documentId` is optional, by default generates unique `@type - {string}`. |\n\n- **let:documents**\n- **let:error**\n\n#### Example \n\n```svelte\n<script>\n  import { Collection } from \"metawrite\";\n</script>\n\n<Collection collectionId=\"5f56a3035a01f\" let:documents>\n  You have {documents.length} documents.\n</Collection>\n```\n\n### `<Document />`\n\n#### Arguments\n\n- documentId - *required* `@type - {string}`\n- collectionId - *required* `@type - {string}`\n\n#### Slots\n\n- **loading**\n- **error**\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `reload()` | Reload. |\n| `update(data)` | Updates a Document. `data` - `@type - {object}` |\n| `remove()` | Removes a Document. |\n\n- **let:document**\n- **let:error**\n\n#### Example\n\n```svelte\n<script>\n\timport { Collection, Document } from 'metawrite';\n\n\tconst collectionId = '5f56a3035a01f';\n</script>\n\n<Collection {collectionId} let:documents>\n\tYou have {documents.length} documents:\n\t{#each documents as document}\n\t\t<Document {collectionId} documentId={document.$id} let:document let:actions>\n\t\t\tTitle: {document.title}\n\t\t\tText: {document.text}\n\t\t\t<button on:click={() => {actions.remove()}}>Delete</button>\n\t\t</Document>\n\t{/each}\n</Collection>\n```\n\n## Realtime\n\nFor more information about using Realtime in Appwrite see [Realtime documentation](https://appwrite.io/docs/realtime).\n\nRealtime allows you to listen to any events on the server-side in realtime using the subscribe method.\n\nInstead of requesting new data via HTTP, the subscription will receive new data every time it changes, any connected client receives that update within milliseconds via a WebSocket connection.\n\nThis lets you build an interactive and responsive user experience by providing information from all of Appwrite's services in realtime.\n\n#### Arguments\n\n- channels - *required* `string | string[]`\n\n#### Directives\n\n**let:payload** - The payload from the subscription will contain [following properties](https://appwrite.io/docs/realtime#payload).\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `subscribe()` | Subscribing to all updates related to one or more channels. |\n| `unsubscribe()` | If you no longer want to receive updates from a subscription, you can unsubscribe so that your callbacks are no longer called. |\n\n#### Example \n\n```svelte\n<script>\n\timport { Realtime } from 'metawrite';\n</script>\n\n<Realtime channels=\"account\" let:actions let:payload>\n\t<h1>{payload.timestamp}</h1>\n\t<button on:click={actions.subscribe()}>Subscribe to Account channel</button>\n\t<button on:click={actions.unsubscribe()}>Unsubscribe from Account channel</button>\n</Realtime>\n```\n\n## Storage\n\nThe Storage components allow you to manage your project files. You can upload, view, download, and query all your project files.\n\n### `<Storage />`\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `create(bucketId, fileId, file, read, write)` | Uploads a file. <br />`fileId` is required `@type - {string}`, `\"unique()\"` will generate random unique id, but you can use custom.<br />`file` is `@type - {File}` and required.<br />`read`/`write` is `@type - {string[]}` and *optional* |\n\n#### Example\n\n```svelte\n<script lang=\"ts\">\n    import { Storage } from \"metawrite\"\n\n    // Required\n\tlet bucketId = \"default\"\n    let file: File;\n    let fileId = \"unique()\"; // this will generate random unique id, but you can use custom\n\n    // Optional\n    let read: string[];\n    let write: string[];\n</script>\n\n<Storage {file} let:actions>\n    <button on:click={actions.create(bucketId, fileId, file, read, write)}>Upload File</button>\n</Storage>\n```\n\n### `<FileList />`\n\n#### Arguments\n\n- bucketId - *required* `@type - {string}`\n- search - *optional* `@type - {string}`\n- limit - *optional* `@type - {number}`\n- offset - *optional* `@type - {number}`\n- cursor - *optional* `@type - {string}`\n- cursorDirection - *optional* `@type - {string}`\n- orderType - *optional* `@type - {string} ` => write  `\"ASC\"` or `\"DESC\"`\n\n#### Slots\n\n- **loading**\n- **error**\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `reload()` | Reload. |\n\n- **let:files**\n- **let:error**\n\n#### Example \n\n```svelte\n<script>\n    import { FileList } from \"metawrite\"\n\n    // Optional\n    let bucketId = 'default';\n    let search = '';\n    let limit = 10;\n    let offset = 0;\n    let orderType = 'ASC';\n</script>\n\n<FileList {bucketId} {search} {limit} {offset} {orderType}let:actions let:files>\n    {#each files as file}\n        <p>File: {file.name}</p>\n    {/each}\n    <button on:click={actions.reload()}>Reload</button>\n</FileList>\n```\n\n### `<File />`\n\n#### Arguments\n\n- bucketId - it is your Bucket ID `@type - {string}`\n- fileId - it is File ID `@type - {string}`\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `download()` | Downloads file. |\n| `view()` | Get file for View. |\n| `preview(width, height, quality, background, output)` | Get file for preview. |\n| `update(read, write)` | Updates a file. |\n| `delete()` | Deletes a file. |\n\n#### Example \n\n```svelte\n<script lang=\"ts\">\n\timport { File } from 'metawrite';\n\n\t// Required\n\tlet bucketId: string;\n\tlet fileId: string;\n\n\t// OPTIONAL\n\t/** @type {number} */ let width;\n\t/** @type {number} */ let height;\n\t/** @type {string} */ let gravity;\n\t/** @type {number} */ let quality;\n\t/** @type {number} */ let borderWidth;\n\t/** @type {string} */ let borderColor;\n\t/** @type {number} */ let borderRadius;\n\t/** @type {number} */ let opacity;\n\t/** @type {number} */ let rotation;\n\t/** @type {string} */ let background;\n\t/** @type {string} */ let output;\n\t/** @type {string[]} */ let read;\n\t/** @type {string[]} */ let write;\n</script>\n\n<File {bucketId} {fileId} let:actions>\n\t<button on:click={actions.download()}>Download File</button>\n\t<button on:click={actions.view()}>File View</button>\n\t<button on:click={actions.preview()}>Preview File</button>\n\t<button on:click={actions.update(read, write)}>Update File</button>\n\t<button on:click={actions.delete()}>Delete File</button>\n</File>\n```\n\n## Functions\n\nThe Functions service allows you to create custom behaviour that can be triggered by any supported Appwrite system events or by a predefined schedule.\n\nAppwrite Cloud Functions lets you automatically run backend code in response to events triggered by Appwrite or by setting it to be executed in a predefined schedule. Your code is stored in a secure way on your Appwrite instance and is executed in an isolated environment.\n\nYou can learn more by following Appwrite's [Cloud Functions tutorial](https://appwrite.io/docs/functions).\n\n### `<Function />`\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `reload()` | Reload. |\n| `create(functionId, data)` | Creates Execution. `functionId` is _required_, `data` could be empty string because _optional_. `@type {string}`|\n| `create(functionId, executionId)` | Get Execution. Both parameters are required. `@type {string}` |\n\n- **let:executions**\n\n#### Slots\n\n- **error**\n\n#### Example\n\n```svelte\n<script>\n\timport { Function } from 'metawrite';\n\tlet functionId = 'someExecution'; // required\n\tlet newFunctionId = '';\n\tlet data = 'String of custom data to send to function.'; // could be empty string because optional\n</script>\n\n<Function {functionId} {data} let:actions let:executions>\n\t{#each executions as execution}\n\t\t<p>\n\t\t\tExecution ID: {execution.$id}, Function ID: {execution.functionId}, Date Created: {execution.dateCreated}\n\t\t</p>\n\t{/each}\n\t<input type=\"text\" name=\"functionId\" placeholder=\"Function ID\" bind:value={newFunctionId} />\n\t<button on:click={actions.create(newFunctionId, data)}>Create Execution</button>\n</Function>\n```\n\n## Locale\n\nThe Locale components allow you to customize your app based on your users' location.\n\n### `<Continents />`\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `reload()` | Reload. |\n\n- **let:continents**\n\n#### Slots\n\n- **loading**\n- **error**\n\n#### Example\n\n```svelte\n<script>\n\timport { Continents } from 'metawrite';\n</script>\n\n<Continents let:actions let:continents>\n\t<button on:click={actions.reload()}>Reload</button>\n\t<p>There are {continents.sum} continents:</p>\n\t{#each continents.continents as continent}\n\t\t<p>{continent.name}, {continent.code}</p>\n\t{/each}\n</Continents>\n```\n\n### `<Countries />`\n\n#### Arguments\n\n- eu\n\n#### Slots\n\n- **loading**\n- **error**\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `reload()` | Reload. |\n\n- **let:countries**\n\n#### Example\n\n```svelte\n<script>\n\timport { Countries } from 'metawrite';\n\n\tlet eu = true; // if you want to list only EU countries\n</script>\n\n<Countries let:actions let:countries>\n\t<button on:click={actions.reload()}>Reload</button>\n\t<p>There are {countries.sum} countries in the world:</p>\n\t{#each countries.countries as country}\n\t\t<p>{country.name}, {country.code}</p>\n\t{/each}\n</Countries>\n\n<Countries {eu} let:actions let:countries>\n\t<button on:click={actions.reload()}>Reload</button>\n\t<p>There are {countries.sum} countries in EU:</p>\n\t{#each countries.countries as country}\n\t\t<p>{country.name}, {country.code}</p>\n\t{/each}\n</Countries>\n```\n\n### `<Currencies />`\n\n#### Slots\n\n- **loading**\n- **error**\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `reload()` | Reload. |\n\n- **let:currencies**\n\n#### Example\n\n```svelte\n<script>\n\timport { Currencies } from 'metawrite';\n</script>\n\n<Currencies let:actions let:currencies>\n\t<button on:click={actions.reload()}>Reload</button>\n\t<p>There are {currencies.sum} currencies:</p>\n\t{#each currencies.currencies as currency}\n\t\t<p>{currency.symbol} - {currency.name} ({currency.code})</p>\n\t{/each}\n</Currencies>\n```\n\n### `<Languages />`\n\n#### Slots\n\n- **loading**\n- **error**\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `reload()` | Reload. |\n\n- **let:languages**\n\n#### Example\n\n```svelte\n<script>\n\timport { Languages } from 'metawrite';\n</script>\n\n<Languages let:actions let:languages>\n\t<button on:click={actions.reload()}>Reload</button>\n\t<p>There are {languages.sum} languages:</p>\n\t{#each languages.languages as language}\n\t\t<p>{language.name}, {language.code}></p>\n\t{/each}\n</Languages>\n```\n\n### `<Locale />`\n\n#### Slots\n\n- **loading**\n- **error**\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `reload()` | Reload. |\n\n- **let:code** `object`\n\n#### Example\n\n```svelte\n<script>\n\timport { Locale } from 'metawrite';\n</script>\n\n<Locale let:actions let:code>\n\t<h1>Active Session</h1>\n\t<button on:click={actions.reload()}>Reload</button>\n\t<p>Location: {code.country}, {code.continentCode}</p>\n\t<p>IP: {code.ip}</p>\n</Locale>\n```\n\n### `<PhoneCodes />`\n\n#### Slots\n\n- **loading**\n- **error**\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `reload()` | Reload. |\n\n- **let:codes**\n\n#### Example\n\n```svelte\n<script>\n\timport { PhoneCodes } from 'metawrite';\n</script>\n\n<PhoneCodes let:actions let:codes>\n\t<button on:click={actions.reload()}>Reload</button>\n\t<p>There are {codes.sum} phone codes:</p>\n\t{#each codes.phones as phone}\n\t\t<p>{phone.code} - {phone.countyName}></p>\n\t{/each}\n</PhoneCodes>\n```\n\n# Stack\n<img src=\"https://img.shields.io/badge/Svelte-4A4A55?style=for-the-badge&logo=svelte&logoColor=FF3E00\" />\n<img src=\"https://img.shields.io/badge/TypeScript-007ACC?style=for-the-badge&logo=typescript&logoColor=white\" />\n<img src=\"https://img.shields.io/badge/JavaScript-323330?style=for-the-badge&logo=javascript&logoColor=F7DF1E\" />\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 9],
		[3596, 8],
		[3603, 47],
		[3610, 12],
		[3624, 1],
		[3631, 2],
		[3638, 6],
		[3645, 48],
		[3659, 4],
		[3666, 41],
		[3680, 6],
		[3687, 2],
		[3694, 2],
		[3708, 2],
		[3715, 42],
		[3729, 6],
		[3736, 3],
		[3743, 1],
		[3757, 1],
		[3764, 1],
		[3771, 68],
		[3778, 13],
		[3785, 2],
		[3792, 1],
		[3799, 1],
		[3806, 3],
		[3813, 1],
		[3820, 1],
		[3827, 1],
		[3834, 17],
		[3841, 26],
		[3848, 16],
		[3855, 211],
		[3862, 29],
		[3869, 35],
		[3876, 17],
		[3883, 19],
		[3890, 46],
		[3897, 19],
		[3904, 57],
		[3911, 21],
		[3918, 16],
		[3925, 6],
		[3932, 8],
		[3939, 5],
		[3946, 3],
		[3953, 3],
		[3960, 6],
		[3967, 8],
		[3974, 2],
		[3981, 10],
		[3988, 2],
		[3995, 17],
		[4002, 63],
		[4009, 31],
		[4016, 21],
		[4023, 17],
		[4030, 51],
		[4037, 41],
		[4044, 18],
		[4051, 12],
		[4058, 8],
		[4065, 10],
		[4072, 11],
		[4079, 97],
		[4086, 65],
		[4093, 35],
		[4100, 123],
		[4107, 20],
		[4114, 72],
		[4121, 42],
		[4128, 21]
	]
}
