{
	"name": "jest-svelte-events",
	"description": "Custom Jest matchers for testing Svelte events.",
	"repo_url": "https://github.com/mihar-22/jest-svelte-events",
	"authors": ["mihar-22"],
	"homepage": "https://github.com/mihar-22/jest-svelte-events#readme",
	"downloads": 36,
	"updated": "2019-12-12T05:46:06.556Z",
	"tags": ["testing"],
	"github_stars": 2,
	"typescript": true,
	"version": "1.0.5",
	"svelte_range": ">= 3",
	"last_rune_check_version": "1.0.5",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "jest-svelte-events",
				"version": "1.0.5",
				"size": 28530
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "<div align=\"center\">\n<h1>jest-svelte-events</h1>\n\n<p>Custom Jest matchers to test Svelte events</p>\n\n[![version][version-badge]][package]\n[![MIT License][license-badge]][license]\n</div>\n\n<hr />\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Installation](#installation)\n  - [Babel](#babel)\n- [Usage](#usage)\n  - [`listen`](#listen)\n  - [`toHaveFiredEvent`](#tohavefiredevent)\n  - [`toHaveFiredEvents`](#tohavefiredevents)\n  - [`toHaveFiredEventsInOrder`](#tohavefiredeventsinorder)\n  - [`toHaveFiredEventTimes`](#tohavefiredeventtimes)\n  - [`toHaveFiredEventWith`](#tohavefiredeventwith)\n  - [`toHaveFiredLastEventWith`](#tohavefiredlasteventwith)\n  - [`toHaveFiredNthEventWith`](#tohavefiredntheventwith)\n- [Contributions](#contributions)\n- [LICENSE](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Installation\n\nThis library has `peerDependencies` listings for `svelte >= 3`.\n\n`npm install svelte-jester jest-svelte-events -D`\n\nAdd the following to your Jest config\n\n```json\n{    \n  \"setupFilesAfterEnv\": [\n    \"jest-svelte-events/extend-expect\"\n  ],\n  \"transform\": {\n    \"^.+\\\\.svelte$\": \"svelte-jester\"\n  },\n  \"moduleFileExtensions\": [\n    \"js\",\n    \"svelte\"\n  ]\n}\n```\n\n### Babel\n\nIf you're using Babel then also add the following\n\n`npm install @babel/core @babel/preset-env babel-jest -D`\n\nAdd the following to your Jest config\n\n```json\n\"transform\": {\n  \"^.+\\\\.js$\": \"babel-jest\",\n  \"^.+\\\\.svelte$\": \"svelte-jester\"\n}\n```\n\nCreate a `.babelrc` and add the following\n\n```json\n{\n  \"presets\": [[\"@babel/preset-env\", { \"targets\": { \"node\": \"current\" } }]]\n}\n```\n\n## Usage\n\n### `listen`\n\nThis is a global function called to setup any listeners on the component, you must call this before any\nmatchers. Listeners are destroyed after each test block.\n\n```ts\nlisten(component: SvelteComponent, event: string | string[])\n```\n\n```js\nimport { render } from '@testing-library/svelte'\n\nimport MyComponent from './MyComponent.svelte'\n\ntest('', () => {\n  const { component } = render(MyComponent)\n  // If you're not using testing-library/svelte.\n  // const component = new MyComponent()\n  listen(component, 'myEvent')\n\n  // Multiple listeners\n  listen(component, ['eventOne', 'eventTwo'])\n})\n```\n\n### `toHaveFiredEvent`\n\nCheck whether a event has fired.\n\n```ts\ntoHaveFiredEvent(event: string)\n```\n\n```js\nimport { render } from '@testing-library/svelte'\n\nimport MyComponent from './MyComponent.svelte'\n\ntest('', () => {\n  const { component } = render(MyComponent)\n  listen(component, 'myEvent')\n  // ...\n  // code ...\n  // ...\n  expect(component).toHaveFiredEvent('myEvent')\n})\n```\n\n### `toHaveFiredEvents`\n\nCheck whether multiple events have fired.\n\n```ts\ntoHaveFiredEvent(events: string[])\n```\n\n```js\nimport { render } from '@testing-library/svelte'\n\nimport MyComponent from './MyComponent.svelte'\n\ntest('', () => {\n  const { component } = render(MyComponent)\n  listen(component, ['eventOne', 'eventTwo'])\n  // ...\n  // code ...\n  // ...\n  expect(component).toHaveFiredEvents(['eventOne', 'eventTwo'])\n})\n```\n\n### `toHaveFiredEventsInOrder`\n\nCheck whether all the events were fired in matching order.\n\n```ts\ntoHaveFiredEventsInOrder(events: string[])\n```\n\n```js\nimport { render } from '@testing-library/svelte'\n\nimport MyComponent from './MyComponent.svelte'\n\ntest('', () => {\n  const { component } = render(MyComponent)\n  listen(component, ['eventOne', 'eventTwo'])\n  // ...\n  // code ...\n  // ...\n  expect(component).toHaveFiredEventsInOrder(['eventTwo', 'eventOne', 'eventTwo'])\n})\n```\n\n### `toHaveFiredEventTimes`\n\nCheck whether a event was fired a set number of times.\n\n```ts\ntoHaveFiredEventsInOrder(event: string, times: number)\n```\n\n```js\nimport { render } from '@testing-library/svelte'\n\nimport MyComponent from './MyComponent.svelte'\n\ntest('', () => {\n  const { component } = render(MyComponent)\n  listen(component, 'myEvent')\n  // ...\n  // code ...\n  // ...\n  expect(component).toHaveFiredEventTimes('myEvent', 1)\n})\n```\n\n### `toHaveFiredEventWith`\n\nCheck whether a event was fired with a specific value.\n\n```ts\ntoHaveFiredEventWith(event: string, payload: any)\n```\n\n```js\nimport { render } from '@testing-library/svelte'\n\nimport MyComponent from './MyComponent.svelte'\n\ntest('', () => {\n  const { component } = render(MyComponent)\n  listen(component, 'myEvent')\n  // ...\n  // code ...\n  // ...\n  expect(component).toHaveFiredEventWith('myEvent', 100)\n})\n```\n\n### `toHaveFiredLastEventWith`\n\nCheck whether the last event was fired with a specific value.\n\n```ts\ntoHaveFiredLastEventWith(payload: any)\n```\n\n```js\nimport { render } from '@testing-library/svelte'\n\nimport MyComponent from './MyComponent.svelte'\n\ntest('', () => {\n  const { component } = render(MyComponent)\n  listen(component, ['eventOne', 'eventTwo', 'eventThree'])\n  // ...\n  // code ...\n  // ...\n  expect(component).toHaveFiredLastEventWith('end')\n})\n```\n\n### `toHaveFiredNthEventWith`\n\nCheck whether the nth event was fired with a specific value.\n\n```ts\ntoHaveFiredNthEventWith(n: number, payload: any)\n```\n\n```js\nimport { render } from '@testing-library/svelte'\n\nimport MyComponent from './MyComponent.svelte'\n\ntest('', () => {\n  const { component } = render(MyComponent)\n  listen(component, ['eventOne', 'eventTwo', 'eventThree'])\n  // ...\n  // code ...\n  // ...\n  expect(component).toHaveFiredNthEventWith(1, 'start')\n})\n```\n\n## Contributions\n\nAll contributions are encouraged and welcome! If you have any ideas then just open an\nissue.\n\n## LICENSE\n\n[MIT](LICENSE)\n\n<!-- prettier-ignore-start -->\n[package]: https://www.npmjs.com/package/jest-svelte-events\n[version-badge]: https://img.shields.io/npm/v/jest-svelte-events\n[license]: https://github.com/mihar-22/jest-svelte-events/blob/master/LICENSE\n[license-badge]: https://img.shields.io/github/license/mihar-22/jest-svelte-events?color=b\n<!-- prettier-ignore-end -->\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 11],
		[3603, 5],
		[3610, 3],
		[3617, 2],
		[3624, 2],
		[3631, 10],
		[3638, 2],
		[3645, 5],
		[3652, 1],
		[3659, 4],
		[3666, 9],
		[3673, 5],
		[3687, 1],
		[3694, 3],
		[3701, 2],
		[3708, 8],
		[3715, 1],
		[3722, 3],
		[3729, 2],
		[3736, 2],
		[3743, 5],
		[3750, 4],
		[3757, 3],
		[3764, 6],
		[3771, 10],
		[3778, 2],
		[3785, 1],
		[3792, 3],
		[3799, 2],
		[3806, 3],
		[3813, 3],
		[3820, 3],
		[3827, 2],
		[3834, 1],
		[3841, 4],
		[3848, 2],
		[3862, 21],
		[3869, 2],
		[3876, 1],
		[3883, 5],
		[3890, 6],
		[3897, 19],
		[3904, 1],
		[3911, 5],
		[3918, 4],
		[3932, 2],
		[3939, 8],
		[3946, 28],
		[3953, 40],
		[3960, 29],
		[3967, 61],
		[3974, 56],
		[3981, 68],
		[3988, 86],
		[3995, 110],
		[4002, 41],
		[4009, 6],
		[4016, 25],
		[4023, 46],
		[4030, 27],
		[4037, 60],
		[4044, 48],
		[4051, 84],
		[4058, 95],
		[4065, 77],
		[4072, 61],
		[4079, 107],
		[4086, 33],
		[4093, 69],
		[4100, 79],
		[4107, 66],
		[4114, 36],
		[4121, 56],
		[4128, 71]
	]
}
