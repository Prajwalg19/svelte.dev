{
	"name": "aovi-svelte",
	"description": "Integrate Aovi validation library into Svelte forms.",
	"repo_url": "https://github.com/AlexxNB/aovi-svelte",
	"authors": ["alexxnb"],
	"homepage": "https://github.com/AlexxNB/aovi-svelte#readme",
	"downloads": 12,
	"updated": "2021-11-06T20:29:42.356Z",
	"tags": ["miscellaneous"],
	"github_stars": 12,
	"typescript": true,
	"version": "0.2.5",
	"svelte_range": "3.x",
	"last_rune_check_version": "0.2.5",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "aovi-svelte",
				"version": "0.2.5",
				"size": 18455
			},
			{
				"name": "aovi",
				"version": "2.0.5",
				"size": 23662
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"legacy_svelte": false,
	"readme": "# aovi-svelte\n\nEasy using [Aovi](https://www.npmjs.com/package/aovi) in your Svelte apps \n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/AlexxNB/aovi-svelte/master/screencast.gif\">\n</p>\n\n*See in [REPL](https://svelte.dev/repl/90668378fbd4427792a5319b70d1f459)*\n\n## Features\n\n* Based on Svelte's store feature\n* One store may be used for different validation chains in same component(s)\n* Instant [checkers](#checkers) for any property in the store\n* Easy to use with aovi validator on the server side\n\n## Common example\n\n```html\n<script>\n    import {aoviSvelte} from 'aovi-svelte';\n\n    // Create the aoviSvelte store containing object of values to be validated\n    const form = aoviSvelte({\n        user: '',\n        password: ''\n    });\n\n    function doSubmit(){\n        // Run aovi validators\n        form.aovi\n            .check('user')\n                .required()\n                .match(/^[a-z]+$/)\n            .check('password')\n                .required()\n                .minLength(4)\n            .end // You must always use .end operator\n\n        if($form.valid){ // when aovi checks was successful, do thing\n            fetch(...)\n        }\n    }\n</script>\n\nUser: \n<input bind:value={$form.user} class:error={$form.err.user}/>\n\nPassword: \n<input bind:value={$form.password} class:error={$form.err.password} />\n\n{#if !$form.valid}\n    {#each $form.err.toArray() as error}\n        <p>{error}</p>\n    {/if}\n{/if}\n\n<button on:click={doSubmit}>Submit</button>\n```\n\n## Example with aovi validator on the server\n\n#### Server request handler\n```js\n// handler for http-request with body_parser.json middleware\nconst aovi = require('aovi');\nfunction authUser(req,res){\n    const checkPassword = password => password === '12345';\n\n    // Validate form object from request body(after body_parser.json\n    let result  = aovi(req.body)\n        .check('password')\n            .required()\n            .is(checkPassword,\"Wrong password\");\n\n    // send responce as JSON string \n    res.end(result.json())\n}\n```\n\n#### Client form\n```html\n<script>\n    import {aoviSvelte} from 'aovi-svelte';\n\n    // Create validation store\n    const form = aoviSvelte({\n        password: ''\n    });\n\n    async function doLogin(){\n        // do request to the server\n        const responce = await fetch('.../api/auth',{\n            method:'POST',\n            body:JSON.stringify({password: $form.password}) //OR (form.get()) to send all $form entries\n        }); \n\n        // load validation result from server and update the store\n        form.load(await responce.json());\n        \n        // do some staff if validation was ok\n        if($form.valid){\n            console.log('User authed!');\n        }\n    }\n</script>\n\nPassword: \n<input bind:value={$form.password}/>\n{#if !$form.valid}{$form.err.password}{/if}\n\n<button on:click={doLogin}>Login</button>\n```\n\n## Checkers\n\nCheckers are special stores derived from any `property` in the aoviSvelte store. Its subscription returns `true` or `false` each time the value changes.\n\n```html\n<script>\n    import {aoviSvelte} from 'aovi-svelte';\n    const form = aoviSvelte({\n        password: ''\n    });\n\n    // checker will be true if password value is strong password.\n    const good_password = form.checker('password',aovi => aovi.minlength(8).match(/[A-Z]/));\n</script>\n\n<input bind:value={$form.password}/>\n{#if $good_password}\n    Your password is strong!\n{:else}\n    Please enter more than 8 signs and at least 1 capital letter.\n{/if}\n```\n\n## Custom validators\n\nYou can use any [aovi custom validator](https://www.npmjs.com/package/aovi#custom-validators). The best way is to declare it in the your app's root file like `App.svelte`:\n\n```html\n<script>\n    ...\n    import {use} from 'aovi-svelte';\n    import {between} from './my-custom-validators.js';\n\n    ...\n    use(between);\n</script>\n```\nThen you can use this custom validator in the any chain in your other files.\n\n```html\n<script>\n    import {aoviSvelte} from 'aovi-svelte';\n    ...\n    form.aovi\n        .check('my_number')\n            .required()\n            .between(0,10);\n    ...\n</script>\n\n```\n\n## API\n\n### `aoviSvelte(object_to_validate)`\nReturns the aoviSvelte store\n\n### `use(custom_validator)`\nGlobally adds aovi [custom validators](https://github.com/AlexxNB/aovi#custom-validators). Usually called in app's root file like `App.svelte`.\n\n### `<store>.aovi`\nReturns aovi object to call validators. You *must* finish chain with `.end` operator, to proceed validation and update store.\n\n### `<store>.clear()`\nClear all errors. Make `<$store>.valid` true;\n\n### `<store>.get([property][,property]...)`\nIf no arguments specified, returns an initial object with current values. You can specify what properties should be in object by providing their names as a function arguments.\n\n### `<store>.error(message,[property])`\nAdd a new error message for the `property` in the store. If `property` ommited, add anonymus message, which will be appeared only in `<$store>.err.toArray()` call. Make `<$store>.valid` false;\n\n### `<store>.load(result_array)`\nLoad aovi's result array in the validation store. May be used when you got aovi validation responce from the sever.\n\n### `<store>.checker(property,func)`\nReturns checker store, which has value `true` or `false`, based on the current value of the `property` and validation chain from `func`.  The `func` get aovi object as a first parameter, you must chain validators (except `.required` and `.check` ) to this object and return it. \n\n### `<$store>.valid`\nEqual `true` when no validation errors, `false` when there is at least one error occured.\n\n### `<$store>.<property>`\nCurrent `property` value. \n\n### `<$store>.err.<property>`\nEqual `false` when no validation error for the `property`, or text of the error in other case.\n\n### `<$store>.err.toArray()`\nReturns all errors messages as array. Returns `[]` when no errors.\n",
	"downloads_history": [
		[3589, 7],
		[3596, 52],
		[3603, 21],
		[3610, 15],
		[3617, 27],
		[3624, 13],
		[3631, 14],
		[3638, 26],
		[3645, 43],
		[3652, 18],
		[3659, 14],
		[3666, 40],
		[3673, 32],
		[3680, 17],
		[3687, 26],
		[3694, 12],
		[3701, 14],
		[3708, 14],
		[3715, 24],
		[3722, 15],
		[3729, 7],
		[3736, 8],
		[3743, 17],
		[3750, 6],
		[3757, 23],
		[3764, 25],
		[3771, 14],
		[3778, 6],
		[3785, 7],
		[3792, 14],
		[3799, 7],
		[3806, 8],
		[3813, 24],
		[3820, 12],
		[3827, 5],
		[3834, 7],
		[3841, 4],
		[3848, 9],
		[3855, 39],
		[3862, 72],
		[3869, 5],
		[3876, 8],
		[3883, 5],
		[3890, 8],
		[3897, 10],
		[3904, 19],
		[3911, 3],
		[3918, 5],
		[3925, 6],
		[3932, 5],
		[3939, 6],
		[3946, 10],
		[3953, 13],
		[3960, 13],
		[3967, 8],
		[3974, 5],
		[3981, 15],
		[3988, 3],
		[3995, 9],
		[4002, 2],
		[4009, 3],
		[4016, 14],
		[4023, 9],
		[4030, 27],
		[4037, 19],
		[4044, 16],
		[4051, 7],
		[4058, 3],
		[4065, 9],
		[4072, 6],
		[4079, 12],
		[4086, 2],
		[4093, 62],
		[4100, 32],
		[4107, 6],
		[4114, 12],
		[4121, 9],
		[4128, 30]
	]
}
