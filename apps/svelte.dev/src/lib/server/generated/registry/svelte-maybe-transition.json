{
	"name": "svelte-maybe-transition",
	"description": "Enable and modify Svelte transitions dynamically.",
	"repo_url": "https://github.com/kiosion/svelte-maybe-transition",
	"authors": ["kiosion"],
	"homepage": "https://github.com/kiosion/svelte-maybe-transition#readme",
	"downloads": 4,
	"updated": "2023-02-03T05:03:37.806Z",
	"tags": ["ui"],
	"github_stars": 1,
	"typescript": true,
	"version": "0.1.2",
	"svelte_range": "^3.0.0",
	"kit_range": "^1.0.0",
	"last_rune_check_version": "0.1.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-maybe-transition",
				"version": "0.1.2",
				"size": 9381
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-maybe-transition\n\nA super-simple Svelte transitions utility that allows on-the-fly enabling and modification of element transitions.\n\n**_Why?_**\nAlthough you could achieve this with if/else blocks, that would require duplicating markup and logic. This util allows for stock Svelte transitions syntax, but with added 'enable' and 'fn' params that can be changed on the fly. I needed something for my own project that allowed changing transition functions programmatically, and this seemed like the best way to do it.\n\n## Installation\n\nUsing NPM:\n\n```bash\nnpm install --save-dev svelte-maybe-transition\n```\n\nUsing Yarn:\n\n```bash\nyarn add -D svelte-maybe-transition\n```\n\n## Basic usage\n\n```html\n<script>\n  import { maybe } from 'svelte-maybe-transition';\n\n  // Let's assume that your PageLoad data has a boolean 'transitions' property\n  export let data;\n\n  $: enableTransitions = data?.transitions;\n</script>\n\n<div\n  transition:maybe={{\n    enable: enableTransitions,\n    fn: 'fly',\n    y: -100,\n    duration: 1000\n  }}\n>\n  Look at me!\n</div>\n```\n\n## API\n\n### maybe()\n\nAccepts `fn` parameter of `'blur'` | `'fade'` | `'fly'` | `'slide'` | `'scale'` | `'draw'`, and an `enable` boolean.\nOther than those two, the parameters required vary by which transition function is specified - if in doubt, check out Svelte's [transition documentation](https://svelte.dev/docs#run-time-svelte-transition)!\n\n### maybeCrossfade()\n\nSince Svelte's `crossfade` transition is a bit special it's split into its own function. It accepts normal animation params, plus the aforementioned `enable` boolean, and returns an array of two unnamed functions: `send` and `receive`.\n\n#### Usage\n\n```html\n<script>\n  import { maybe, maybeCrossfade } from 'svelte-maybe-transition';\n\n  const enable = true,\n    commonParams = {\n      enable,\n      duration: 500,\n      delay: 250\n    };\n\n  // Since 'crossfade' requires a fallback transition if there is no element to send\n  // or no element to receive, we construct a fallback 'maybe' fade transition here\n  const fallback = maybe({\n    fn: 'fade',\n    ...commonParams\n  });\n\n  $: [send, receive] = maybeCrossfade({\n    fallback,\n    ...commonParams\n  });\n</script>\n\n{#if condition}\n<h1 in:send=\"{{key}}\" out:receive=\"{{key}}\">BIG ELEM</h1>\n{:else}\n<small in:send=\"{{key}}\" out:receive=\"{{key}}\">small elem</small>\n{/if}\n```\n\n## Contributing\n\nPull requests are welcome. For major changes, or any issues, please open an issue first.\n\n## Building\n\nBuilding the package is done with `yarn build`, which outputs built files to `./package`.\n\nBuilding the demo app is done with `yarn build:app`, which outputs static HTML to `./.svelte-kit/build`.\n\n## License\n\nSee [LICENSE.md](LICENSE.md)\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 1],
		[3596, 4],
		[3603, 3],
		[3610, 4],
		[3617, 1],
		[3624, 3],
		[3645, 1],
		[3666, 5],
		[3694, 1],
		[3715, 1],
		[3743, 1],
		[3757, 1],
		[3764, 1],
		[3771, 3],
		[3778, 1],
		[3792, 2],
		[3806, 1],
		[3820, 1],
		[3834, 2],
		[3841, 17],
		[3848, 3],
		[3855, 7],
		[3862, 2],
		[3869, 2],
		[3883, 1],
		[3890, 7],
		[3904, 3],
		[3911, 1],
		[3918, 1],
		[3939, 1],
		[3946, 1],
		[3967, 1],
		[3981, 21],
		[3988, 3],
		[3995, 3],
		[4002, 1],
		[4009, 1],
		[4016, 1],
		[4023, 1],
		[4030, 5],
		[4037, 12],
		[4044, 5],
		[4051, 3],
		[4065, 1],
		[4072, 1],
		[4079, 1],
		[4100, 10],
		[4114, 4],
		[4121, 7],
		[4128, 4]
	],
	"esm": true,
	"cjs": false
}
