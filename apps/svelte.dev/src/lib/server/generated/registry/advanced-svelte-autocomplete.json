{
	"name": "advanced-svelte-autocomplete",
	"description": "Build autocomplete/select/typeahead components for Svelte.",
	"repo_url": "https://github.com/t-next/advanced-svelte-autocomplete",
	"authors": ["t-next"],
	"homepage": "https://github.com/t-next/advanced-svelte-autocomplete#readme",
	"downloads": 9,
	"updated": "2021-11-02T15:42:50.840Z",
	"tags": ["ui"],
	"github_stars": 0,
	"typescript": true,
	"version": "2.2.3-t-next.1.4",
	"svelte_range": "^3.24.0",
	"last_rune_check_version": "2.2.3-t-next.1.4",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "advanced-svelte-autocomplete",
				"version": "2.2.3-t-next.1.4",
				"size": 259121
			}
		],
		"dependencies": [],
		"circular": []
	},
	"legacy_svelte": false,
	"readme": "# Advanced Svelte Autocomplete\n### Fork of Simple Svelte Autocomplete with overlay as static dropdown list\n\nAutocomplete / Select / Typeahead component made with [Svelte](https://svelte.dev/)\n\n### Live demo http://simple-svelte-autocomplete.surge.sh/\n\n* no dependencies\n* use plain lists or array of objects\n* option to define a label field or function\n* option to define more fields used for search\n* support for async load of items\n* can hold one or several values\n\n\n## Install\n\n```bash\nnpm i -D advanced-svelte-autocomplete\n```\n\n## Usage\nImport the component and define items:\n\n````javascript\nimport AutoComplete from \"advanced-svelte-autocomplete\";\n\nconst colors = [\"White\", \"Red\", \"Yellow\", \"Green\", \"Blue\", \"Black\"];\nlet selectedColor;\n````\n\nAnd use it like this:\n````html\n<AutoComplete items={colors} bind:selectedItem={selectedColor} />\n````\n\nYou can also use it with array of objects:\n````javascript\nconst colorList = [\n  { id: 1, name: \"White\", code: \"#FFFFFF\" },\n  { id: 2, name: \"Red\", code: \"#FF0000\" },\n  { id: 3, name: \"Yellow\", code: \"#FF00FF\" },\n  { id: 4, name: \"Green\", code: \"#00FF00\" },\n  { id: 5, name: \"Blue\", code: \"#0000FF\" },\n  { id: 6, name: \"Black\", code: \"#000000\" }\n];\n\nlet selectedColorObject;\n````\nJust define which field should be used as label:\n````html\n<AutoComplete\n  items={colorList}\n  bind:selectedItem={selectedColorObject}\n  labelFieldName=\"name\" />\n````\n\nSpecifying function for label instead of field name is also supported:\n````html\n<AutoComplete\n  items={colorList}\n  bind:selectedItem={selectedColorObject}\n  labelFunction={color => color.id + '. ' + color.name} />\n````\n\nBy default the component searches by the item label, but it can also search by custom fields by specifying `keywords` function. For example to enable searching by color name and color HEX code:\n````html\n<AutoComplete\n  items={colorList}\n  bind:selectedItem={selectedColorObject}\n  labelFieldName=\"name\"\n  keywordsFunction={color => color.name + ' ' + color.code} />\n````\n\n## Asynchronous loading of items\n\nDefine a `searchFunction` which will be called with `keyword` parameter.\nIf you have `searchFunction` defined you don't need to specify `items` since the function will be used for loading.\nThe `delay` parameter specifies the time to wait between user input and calling the `searchFunction`.\nIt is recommend that delay > 200ms is set when using a remote search function to avoid sending too many requests.\nThe `localFiltering` parameter can be set to false if the search function already returns filtered items accordind to the user input.\n```html\n<AutoComplete searchFunction={getItems} delay=200 localFiltering=false labelFieldName=\"name\" valueFieldName=\"id\" bind:selectedItem={myValue} />\n```\n\n```js\nasync function getItems(keyword) {\n  const url = '/api/my-items/?format=json&name=' + encodeURIComponent(keyword);\n\n  const response = await fetch(url);\n  const json = await response.json();\n\n  return json.results;\n}\n```\n\n```json\n{\n  \"results\": [\n    {\n      \"id\": 1,\n      \"name\": \"Sample One\",\n      \"date\": \"2020-09-25\",\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Sample Two\",\n      \"date\": \"2020-09-26\",\n    }\n  ]\n}\n```\n\n## Properties\n\n### Behaviour\n\n- `items` - array of items the user can select from (optional, use `searchFunction` for async loading of items)\n- `searchFunction` - optional function to load items asynchronously from HTTP call for example, the searchFunction can also return all items and additional local search will still be performed\n- `delay` - delay in milliseconds to wait after user input to do the local searching or call `searchFunction` if provided, defaults to 0\n- `localFiltering` - boolean specifying if `searchFunction` is used, to still perform local filtering of the items to only ones that match the  user input, defaults to true\n- `multiple` - enable multiple selection (false by default)\n- `selectedItem` - the current item that is selected (object if the array of items contains objects)\n- `highlightedItem` - the current item that is highlighted in the dropdown menu\n- `labelFieldName` - the name of the field to be used for showing the items as text in the dropdown\n- `keywordsFieldName` - the name of the field to search by, if not specified the label will be used\n- `value` - derived value from the `selectedItem`, equals to `selectedItem` if `valueFieldName` is not specified\n- `valueFieldName` - field to use to derive the value from the selected item\n- `labelFunction` - optional function that creates label from the item. If used `labelFieldName` is ignored\n- `keywordsFunction` - optional function that creates text to search from the item. If used `keywordsFieldName` is ignored\n- `valueFunction` - optional function that derives the value from the selected item. If used `valueFieldName` is ignored\n- `keywordsCleanFunction` - optional function to additionally process the derived keywords from the item\n- `textCleanFunction` - optional function to additionally process the user entered text\n- `selectFirstIfEmpty` - set to true to select the first item if the user clears the text and closes the dropdown, defaults to false\n- `minCharactersToSearch` - minimum length of search text to perform search, defaults to 1\n- `maxItemsToShowInList` - maximum number of items to show in the dropdown list, defaults 0 (no limit)\n- `ignoreAccents` - ignores the accents/umlauts (è,ü,ö etc) to match items, defaults to true\n- `matchAllKeywords` - defaults to true, if false, any item will be suggested if it shares at least one common keyword with the input. Ignored if sorting function is given with `itemSortFunction`\n- `sortByMatchedKeywords` - defaults to false, if true, items are sorted by the number of matched keywords, only useful if `matchAllKeywords` is false. Ignored if sorting function is given with `itemSortFunction`\n- `itemSortFunction` - Optional custom function to order items. Parameters are two list items to compare and the cleaned up search query. Returns an integer indicating wether the first item comes before the seconde one. Only used if `sortByMatchedKeywords` is true.\n- `itemFilterFunction` - Optional custom function to filter items. Parameters are a list item and the cleaned up search query. Returns a boolean indicated wether to keep the item. If this is used, the `keywordsFieldName` and `keywordsFunction` are ignored\n\n- `disabled` - disable the control completely\n- `readonly` - make the input readonly, no user entered text (simulates combobox), item from the list can still be selected\n- `lock` - defaults to false, locks the input for user entered text when an item has been selected\n- `create` - true to enable accepting of unlisted values\n- `debug` - flag to enable detailed log statements from the component\n\n### Events\n\n- `beforeChange` - function called before a new value is selected\n- `onChange` - function called after new value is selected\n- `onFocus` - function called on focus of the input control\n- `onBlur` - function called on blur of the input control\n- `onCreate` - function called when `create` is true and the user presses enter, the function must return add the created item to the `items` array and return it\n\n### UI options\n- `placeholder` - change the text displayed when no option is selected\n- `noResultsText` - text to show in the dropdown when the search text does not match any item. Defaults to \"No results found\". Can be set to \"\" to not show anything.\n- `createText` - text to show when `create` is true, and the user text doesn't match any of the items\n- `hideArrow` - set to true to not show the blue dropdown arrow\n- `showClear` - set to true to show X button that can be used to deselect the selected item\n- `showLoadingIndicator` - defaults to false, set to true to show loading spinner when the async `searchFunction` is executed, bulma class 'is-loading' is added to the input control\n\n### CSS classes and IDs\n- `className` - apply a className to the control\n- `inputClassName` - apply a className to the input control\n- `inputId` - apply an id attribute to the the input control\n- `dropdownClassName` - apply a className to the dropdown div showing the list of items\n- `name` - generate an HTML input with this name, containing the current value\n- `html5autocomplete` - flag to enable or disable the [HTML5 autocomplete](https://developer.mozilla.org/fr/docs/Web/HTML/Element/form#attr-autocomplete) attribute\n- `selectName` - apply a name attribute to the <select> tag that holds the selected value\n- `selectId` - apply an id attribute to the <select> tag that holds the selected value\n\n### UI Slots\n- `item` - change the apearance of items in the dropdown list:\n```html\n<div slot=\"item\" let:item={item} let:label={label}>\n  {@html label} <!-- to render the default higliglighted item label -->\n  <!-- render anything else -->\n  <span style=\"color:{item.propertyX}\">{item.propertyY}</span>\n</div>\n```\n- `no-results` - customize the div that shows the \"no results\" text:\n```html\n<div slot=\"no-results\" let:noResultsText={noResultsText}>\n    <span>{noResultsText}</strong>\n</pre>\n```\nThe noResultsText variable is optional and can be ommited.\n- `loading` - customize the div that shows the \"loading\" text:\n```html\n<pre>\n<div slot=\"loading\" let:loadingText={loadingText}>\n    <span>{loadingText}</strong>\n</div>\n</pre>\n```\n- `tag` - customize the tag blocks displayed when multiple selection is enabled:\n```html\n<slot name=\"tag\" let:label={label} let:item={item} let:unselectItem={unselectItem}>\n  <span class=\"tag\">{label}</span>\n  <span class=\"delete-tag\" on:click|preventDefault={unselectItem(item)}></span>\n</slot>\n```\n\n#### CSS properties\n- `autocomplete` the class applied to the main control\n- `autocomplete-input` the class applied to the input list\n- `autocomplete-list` the class applied to the dropdown list\n- `autocomplete-list-item` the class applied to items in the dropdown list\n\nThe component is inteded to use with [Bulma](https://bulma.io/) but it can be adapted to use Boostrap or anything else.\n",
	"downloads_history": [
		[3589, 6],
		[3596, 69],
		[3603, 24],
		[3610, 45],
		[3617, 192],
		[3624, 14],
		[3631, 22],
		[3638, 35],
		[3645, 13],
		[3652, 18],
		[3659, 21],
		[3666, 14],
		[3673, 22],
		[3687, 1],
		[3694, 13],
		[3708, 12],
		[3722, 1],
		[3736, 1],
		[3743, 1],
		[3750, 7],
		[3757, 10],
		[3764, 22],
		[3771, 16],
		[3778, 16],
		[3785, 8],
		[3792, 9],
		[3799, 8],
		[3806, 5],
		[3813, 4],
		[3820, 40],
		[3827, 9],
		[3834, 6],
		[3841, 3],
		[3848, 2],
		[3855, 17],
		[3862, 27],
		[3869, 4],
		[3876, 6],
		[3883, 3],
		[3890, 2],
		[3897, 22],
		[3904, 22],
		[3911, 1],
		[3918, 11],
		[3925, 3],
		[3939, 1],
		[3946, 2],
		[3953, 2],
		[3960, 14],
		[3967, 19],
		[3974, 7],
		[3988, 3],
		[3995, 4],
		[4002, 2],
		[4016, 16],
		[4023, 7],
		[4030, 6],
		[4037, 12],
		[4044, 10],
		[4051, 5],
		[4058, 6],
		[4072, 5],
		[4079, 6],
		[4086, 1],
		[4093, 42],
		[4100, 32],
		[4107, 2],
		[4114, 9],
		[4121, 18],
		[4128, 8]
	]
}
