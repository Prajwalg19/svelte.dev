{
	"name": "svelte-observable",
	"description": "Use observables in Svelte components with ease.",
	"repo_url": "https://github.com/timhall/svelte-observable",
	"authors": ["timhall"],
	"homepage": "https://github.com/timhall/svelte-observable#readme",
	"downloads": 274,
	"updated": "2019-04-26T20:13:35.925Z",
	"tags": ["miscellaneous"],
	"github_stars": 63,
	"typescript": true,
	"version": "0.4.0",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "0.4.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-observable",
				"version": "0.4.0",
				"size": 25626
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-observable\n\nUse observables in svelte components with ease. svelte-observable wraps Observables with svelte's reactive stores so that all you have to do is `{#await $...}` in your templates. This allows you to work with Observable libraries like RxJS and zen-observable with the convenience and built-in support of svelte's reactive stores.\n\n```html\n{#await $values}\n  Loading until first value\n{:then value}\n  Will be re-rendered as values come in\n{:catch error}\n  Errors are handled too\n{/await}\n\n<script>\n  import { observe } from 'svelte-observable'; \n  import { list } from './api';\n\n  const values = observe(list());\n</script>\n```\n\n## observe\n\nWrap an observable as a reactive store with an initial deferred value for compatibility with `{#await ...}`.\nWrapped observables return a chain of promises in one of three promise states:\n\n- pending - No value or error has been received yet\n- fulfilled - Received a value\n- rejected - Received an error\n\n```html\n<script>\n  import { observe } from 'svelte-observable';\n\n  const results = query({});\n  //    ^ Observable<Result>\n\n  const results_store = observe(results);\n  //    ^ Readable<Promise<Result>>\n\n  function query() {\n    return new Observable(observer => {\n      // ...\n    })\n  }\n</script>\n\n{#await $results_store}\n  pending - No value or error has been received yet\n{:then result}\n  fulfilled - Received a value\n{:catch error}\n  rejected - Received an error\n{/await}\n```\n\n## flat\n\nFlatten a store/observable of stores/observables, unsubscribing from the previous store/observable as new values come in. This method is similar to `switchMap` in RxJS.\n\n```html\n<script>\n  import { writable, derive } from 'svelte/store';\n  import { flat } from 'svelte-observable';\n  import { query } from './api';\n\n  const search = writable('');\n\n  // query returns an Observable of results\n  // -> need to unsubscribe from previous results on search change\n  const store_of_observables = derive(search, $search => query($search));\n  //    ^ Readable<Observable<Result>>\n\n  const results = flat(store_of_observables);\n  //    ^ Readable<Promise<Result>>\n</script>\n\n<input value={$search} on:change={e => search.set(e.target.value)} />\n\n{#await $results}\n  Loading...\n{:then results}\n  {results}\n{:catch error}\n  {error}\n{/await}\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 150],
		[3596, 379],
		[3603, 183],
		[3610, 186],
		[3617, 165],
		[3624, 119],
		[3631, 246],
		[3638, 186],
		[3645, 175],
		[3652, 150],
		[3659, 142],
		[3666, 245],
		[3673, 187],
		[3680, 239],
		[3687, 125],
		[3694, 127],
		[3701, 239],
		[3708, 281],
		[3715, 248],
		[3722, 186],
		[3729, 303],
		[3736, 102],
		[3743, 72],
		[3750, 56],
		[3757, 78],
		[3764, 146],
		[3771, 108],
		[3778, 88],
		[3785, 109],
		[3792, 282],
		[3799, 166],
		[3806, 134],
		[3813, 254],
		[3820, 185],
		[3827, 136],
		[3834, 90],
		[3841, 139],
		[3848, 497],
		[3855, 548],
		[3862, 249],
		[3869, 186],
		[3876, 121],
		[3883, 175],
		[3890, 154],
		[3897, 707],
		[3904, 300],
		[3911, 220],
		[3918, 294],
		[3925, 228],
		[3932, 252],
		[3939, 221],
		[3946, 213],
		[3953, 210],
		[3960, 188],
		[3967, 256],
		[3974, 391],
		[3981, 219],
		[3988, 219],
		[3995, 351],
		[4002, 274],
		[4009, 250],
		[4016, 91],
		[4023, 152],
		[4030, 173],
		[4037, 308],
		[4044, 246],
		[4051, 362],
		[4058, 223],
		[4065, 237],
		[4072, 482],
		[4079, 169],
		[4086, 91],
		[4093, 705],
		[4100, 344],
		[4107, 243],
		[4114, 274],
		[4121, 185],
		[4128, 159]
	]
}
