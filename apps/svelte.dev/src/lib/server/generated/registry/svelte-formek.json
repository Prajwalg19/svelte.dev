{
	"name": "svelte-formek",
	"description": "Manage forms with validation in Svelte applications.",
	"repo_url": "https://github.com/eriknyk/svelte-formek",
	"authors": ["eriknyk"],
	"homepage": "https://github.com/eriknyk/svelte-formek#readme",
	"downloads": 6,
	"updated": "2019-12-30T16:39:16.145Z",
	"tags": ["miscellaneous"],
	"typescript": false,
	"version": "1.0.0",
	"svelte_range": "3.16.5",
	"last_rune_check_version": "1.0.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-formek",
				"version": "1.0.0",
				"size": 84994
			},
			{
				"name": "property-expr",
				"version": "1.5.1",
				"size": 13324
			},
			{
				"name": "svelte",
				"version": "3.16.5",
				"size": 3034845
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2]
		],
		"circular": []
	},
	"readme": "\n<p>\n  <img src=\"https://svelte-forms-lib-sapper-docs.tjin.now.sh/logo.png\" width=\"80px\" height=\"80px\" title=\"Svelte forms lib logo\" alt=\"Svelte forms lib logo\" />\n</p>\n\n<a href=\"https://www.npmjs.com/package/svelte-forms-lib\">\n  <img src=\"https://img.shields.io/npm/v/svelte-forms-lib.svg\" alt=\"npm version\">\n</a>\n</bbr>\n<a href=\"https://www.npmjs.com/package/svelte-forms-lib\">\n  <img src=\"https://img.shields.io/npm/dm/svelte-forms-lib.svg\" alt=\"npm downloads\">\n</a>\n<a href=\"https://bundlephobia.com/result?p=svelte-forms-lib\">\n  <img src=\"https://img.shields.io/bundlephobia/min/svelte-forms-lib.svg\" alt=\"minified size\">\n</a>\n<a href=\"https://opensource.org/licenses/MIT\">\n  <img src=\"https://img.shields.io/npm/l/svelte-forms-lib.svg\" alt=\"license\">\n</a>\n</a>\n\nSvelte forms lib is a lightweight library for managing forms in Svelte, with an <a href=\"https://github.com/jaredpalmer/formik\" target=\"_blank\">Formik</a> like API.\n\n## Documentation\n\nGo to the newly released <a href=\"https://svelte-forms-lib-sapper-docs.tjin.now.sh/introduction\" target=\"_blank\">documentation website</a> to understand the API and see examples.\n\n## Installation\n\nThis module is distributed via npm which is bundled with node and\nshould be installed as one of your project's `dependencies`:\n\n```bash\nnpm install svelte-forms-lib\n```\n\n> This package also depends on `svelte`. Please make sure you have it installed as well.\n\n## Usage\n\n```svelte\n<script>\n  import createForm from \"svelte-forms-lib\";\n\n  const { form, handleChange, handleSubmit } = createForm({\n    initialValues: {\n      name: \"\",\n      email: \"\"\n    },\n    onSubmit: values => {\n      // make form submission request with `values`\n    }\n  })\n</script>\n\n<form on:submit={handleSubmit}>\n  <label for=\"name\">Name</label>\n  <input\n    type=\"text\"\n    name=\"name\"\n    bind:value={$form.name}\n    on:change={handleChange}\n  />\n\n  <label>Email</label>\n  <input\n    type=\"email\"\n    name=\"email\"\n    bind:value={$form.email}\n    on:change={handleChange}\n  />\n\n  <button type=\"submit\">Submit</button>\n</form>\n```\n\nThe `createForm` function requires at minimum a `initialValues` object which contains the initial state of the form and a `submit` function which will be called upon submitting the form.\n\n## Observables \n\nBecause the library is built using the Store API in Svelte, the values exposed by `createForm` are observables.\n\n```js\n// all observables returned by `createForm`\nconst { form, errors, touched, isValid, isSubmitting, isValidating, state } = createForm({...})\n```\n\nWithin the template they can be read using the `$` prefix i.e. `$form`, `$errors`. For example to access `isValid` we'll use the `$` prefix in the template\n\n```svelte\n<p>This form is {$isValid} </p>\n```\n\nAnother example regarding form or errors:\n\n```svelte\n<script>\n  const { form, errors, ...other } = createForm({...other});\n</script>\n\n<input name=\"name\" bind:value={$form.name} ...other />\n{#if $errors.name}\n  <span>{$errors.name}</span>\n{/if}\n```\n\n> The code example below is abbreviated for focus, `...other` represents the remaining handlers, config and props needed to run the code.\n\nSo make sure to use the `$` prefix in the template for observable values returned by `createForm`.\n\n## Validation\n\n### Using Yup\n\nThis library works best with [yup](https://github.com/jquense/yup) for form validation. \n\n```svelte\n<script>\n  import createForm from \"svelte-forms-lib\";\n  import yup from \"yup\";\n\n  const { form, errors, handleChange, handleSubmit } = createForm({\n    initialValues: {\n      name: \"\",\n      email: \"\"\n    },\n    validationSchema: yup.object().shape({\n      name: yup.string().required(),\n      email: yup.string().email().required()\n    }),\n    onSubmit: values => {\n      // make form submission request with `values`\n    }\n  })\n</script>\n\n<form on:submit={handleSubmit}>\n  <label for=\"name\">Name</label>\n  <input\n    type=\"text\"\n    name=\"name\"\n    bind:value={$form.name}\n    on:change={handleChange}\n  />\n  {#if $errors.name}\n    <em>{$errors.name}</em>\n  {/if}\n\n  <label for=\"email\">Email</label>\n  <input\n    type=\"email\"\n    name=\"email\"\n    bind:value={$form.email}\n    on:change={handleChange}\n  />\n  {#if $errors.email}\n    <em>{$errors.email}</em>\n  {/if}\n\n  <button type=\"submit\">Submit</button>\n</form>\n```\n\n### Using custom validator\n\nCustom validation is also possible:\n\n```svelte\n<script>\n  import createForm from \"svelte-forms-lib\";\n  import yup from \"yup\";\n\n  const { form, errors, handleChange, handleSubmit } = createForm({\n    initialValues: {\n      name: \"\",\n      email: \"\"\n    },\n    validate: values => {\n      let error = {};\n      if (values.name === '') {\n        error.name = \"Name is required\"\n      }\n      if (values.email === '') {\n        error.email = \"Email is required\"\n      }\n      return error;\n    },\n    onSubmit: values => {\n      // make form submission request with `values`\n    }\n  })\n</script>\n\n<form on:submit={handleSubmit}>\n  <label for=\"name\">Name</label>\n  <input\n    type=\"text\"\n    name=\"name\"\n    bind:value={$form.name}\n    on:change={handleChange}\n  />\n  {#if $errors.name}\n    <em>{$errors.name}</em>\n  {/if}\n\n  <label for=\"email\">Email</label>\n  <input\n    type=\"email\"\n    name=\"email\"\n    bind:value={$form.email}\n    on:change={handleChange}\n  />\n  {#if $errors.email}\n    <em>{$errors.email}</em>\n  {/if}\n\n  <button type=\"submit\">Submit</button>\n</form>\n```\n\nCurrently custom validation is only run when submitting the form. Field validation will be added in the near future.\n\n### Using helper components to reduce boilerplate i.e. `Form`, `Field` and `ErrorMessage`\n\nTo reduce the boilerplate it is also possible to use additional helper components i.e. `Form`, `Field` and `ErrorMessage`. Usage can be done as follows:\n\n```svelte\n<script>\n  import { Form, Field, ErrorMessage } from \"svelte-forms-lib\";\n  import yup from \"yup\";\n</script>\n\n<Form\n  initialValues={{\n    name: \"\",\n    email: \"\"\n  }}\n  validationSchema={yup.object().shape({\n    name: yup.string().required(),\n    email: yup.string().email().required()\n  })}\n  onSubmit={values => {\n    alert(JSON.stringify(values, null, 2))\n  }}\n>\n  <label>name</label>\n  <Field name=\"name\" />\n  <ErrorMessage name=\"name\" />\n\n  <label>email</label>\n  <Field name=\"email\" />\n  <ErrorMessage name=\"email\" />\n\n  <button type=\"submit\">submit</button>\n</Form>\n```\n\nThe components are using context API to get the form state and handlers so that you don't have to set that up. All props passed to the helper components will be passed down to the element it's mapped to. The `Form` is mapped to `<form>`, `Field` to `<input>` and `ErrorMessage` to `<small>`.\n\n### Handling form arrays\n\nSvelte forms lib also support form arrays and nested fields. The name attribute in the inputs accept path like strings i.e. `users[1].name` which allow us to bind to nested properties if the form requires it. See example below. Validation still works as expected.\n\n```svelte\n<script>\n  import createForm from \"svelte-forms-lib\";\n  import yup from \"yup\";\n\n  const { form, errors, state, handleChange, handleSubmit, handleReset } = createForm({\n    initialValues: {\n      users: [\n        {\n          name: \"\",\n          email: \"\"\n        }\n      ]\n    },\n    validationSchema: yup.object().shape({\n      users: yup.array().of(\n        yup.object().shape({\n          name: yup.string().required(),\n          email: yup\n            .string()\n            .email()\n            .required()\n        })\n      )\n    }),\n    onSubmit: values => {\n      // make form submission request with `values`\n    }\n  });\n\n  const add = () => {\n    $form.users = $form.users.concat({ name: \"\", email: \"\" });\n    $errors.users = $errors.users.concat({ name: \"\", email: \"\" });\n  };\n\n  const remove = i => () => {\n    $form.users = $form.users.filter((u, j) => j !== i);\n    $errors.users = $errors.users.filter((u, j) => j !== i);\n  };\n</script>\n\n<form>\n  {#each $form.users as user, j}\n    <label>name</label>\n    <input\n      name={`users[${j}].name`}\n      bind:value={$form.users[j].name}\n      on:change={handleChange} />\n    {#if $errors.users[j].name}\n      <hint>{$errors.users[j].name}</hint>\n    {/if}\n\n    <label>email</label>\n    <input\n      name={`users[${j}].email`}\n      bind:value={$form.users[j].email}\n      on:change={handleChange} />\n    {#if $errors.users[j].email}\n      <hint>{$errors.users[j].email}</hint>\n    {/if}\n\n    <button on:click={add}>+</button>\n    <button on:click={remove(j)}>-</button>\n  {/each}\n\n  <button on:click={handleSubmit}>submit</button>\n  <button on:click={handleReset}>reset</button>\n</form>\n```\n\n### `updateField` - hook to update form field\n\nFor imperative 3rd party libraries `createForm` also return an `updateField` function. The function accepts a `name` and `value` in order to update a field of the form. It serves as an escape hatch.\n\n```svelte\n<button on:change={() => updateField('receiveNewsletter', true)}>\n  receive newsletter\n</button>\n```\n\nwhich results in the form:\n\n```js\n{\n  receiveNewsletter: true\n}\n```\n\n### Contributions\n\nPlease feel free to submit any issue as means of feedback or create a PR for bug fixes / wanted features.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 3],
		[3603, 1],
		[3610, 3],
		[3631, 1],
		[3659, 1],
		[3666, 1],
		[3680, 1],
		[3701, 1],
		[3708, 1],
		[3715, 1],
		[3729, 2],
		[3757, 2],
		[3771, 1],
		[3778, 1],
		[3785, 1],
		[3792, 1],
		[3799, 1],
		[3806, 3],
		[3834, 1],
		[3848, 1],
		[3855, 1],
		[3862, 5],
		[3883, 1],
		[3890, 1],
		[3897, 1],
		[3904, 2],
		[3911, 1],
		[3932, 2],
		[3960, 1],
		[3981, 1],
		[4009, 2],
		[4023, 1],
		[4030, 1],
		[4037, 3],
		[4044, 4],
		[4051, 1],
		[4058, 1],
		[4065, 2],
		[4093, 7],
		[4100, 2],
		[4107, 1],
		[4114, 6],
		[4121, 4],
		[4128, 2]
	],
	"esm": true,
	"cjs": false
}
