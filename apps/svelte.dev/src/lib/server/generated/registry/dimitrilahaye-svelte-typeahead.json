{
	"name": "@dimitrilahaye/svelte-typeahead",
	"description": "Create typeahead/autocomplete component for Svelte.",
	"repo_url": "https://github.com/dimitrilahaye/svelte-sync-async-autocomplete-component",
	"authors": ["dimitrilahaye"],
	"homepage": "https://github.com/dimitrilahaye/svelte-sync-async-autocomplete-component#readme",
	"downloads": 5,
	"updated": "2020-07-14T14:53:26.117Z",
	"tags": ["ui"],
	"github_stars": 1,
	"typescript": false,
	"version": "1.0.0",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "1.0.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@dimitrilahaye/svelte-typeahead",
				"version": "1.0.0",
				"size": 169211
			},
			{
				"name": "sirv-cli",
				"version": "0.4.6",
				"size": 8101
			},
			{
				"name": "sade",
				"version": "1.8.1",
				"size": 31545
			},
			{
				"name": "mri",
				"version": "1.2.0",
				"size": 13261
			},
			{
				"name": "sirv",
				"version": "0.4.6",
				"size": 10106
			},
			{
				"name": "mime",
				"version": "2.6.0",
				"size": 60114
			},
			{
				"name": "@polka/url",
				"version": "0.5.0",
				"size": 3717
			},
			{
				"name": "kleur",
				"version": "3.0.3",
				"size": 9893
			},
			{
				"name": "get-port",
				"version": "3.2.0"
			},
			{
				"name": "tinydate",
				"version": "1.3.0",
				"size": 7410
			},
			{
				"name": "local-access",
				"version": "1.1.0",
				"size": 4960
			},
			{
				"name": "console-clear",
				"version": "1.1.1",
				"size": 2457
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[1, 4],
			[4, 5],
			[4, 6],
			[1, 7],
			[1, 8],
			[1, 9],
			[1, 10],
			[1, 11]
		],
		"circular": []
	},
	"legacy_svelte": true,
	"readme": "# Svelte typeahead / auto-completion component for sync and async data\r\n\r\n## install it\r\n\r\n```bash\r\nnpm i --save @dimitrilahaye/svelte-typeahead\r\n```\r\n\r\n## Use it\r\n\r\n```svelte\r\n<scrip>\r\n    import TypeAhead from '@dimitrilahaye/svelte-typeahead';\r\n    \r\n    //...\r\n</script>\r\n```\r\n\r\n## Table of contents\r\n  - [Examples](#examples)\r\n    * [Example with an array of objects](#example-with-an-array-of-objects)\r\n    * [Example with an array of strings](#example-with-an-array-of-strings)\r\n    * [Example with fetched data from an API](#example-with-fetched-data-from-an-api)\r\n  - [Documentation](#documentation)\r\n    * [Props](#props)\r\n    * [TypeAhead configuration](#typeahead-configuration)\r\n    * [Events](#events)\r\n  * [Unit test](#unit-test)\r\n  * [Storybook](#storybook)\r\n  \r\n## Examples\r\n  \r\n### Example with an array of objects\r\n  ```html\r\n<script>  \r\n  import TypeAhead from './TypeAhead.svelte';  \r\n  \r\n  const users = [  \r\n    {  \r\n\t\t\"id\": 1,  \r\n\t\t\"first_name\": \"Sigismund\",  \r\n\t\t\"last_name\": \"Pople\",  \r\n\t\t\"email\": \"spople0@reverbnation.com\",  \r\n\t\t\"gender\": \"Male\",  \r\n\t},\r\n\t...\r\n  ];  \r\n const props = {  \r\n\titems: users,  \r\n\tvalue: 'id',  \r\n\tsearchData: (user, str) => user.first_name.includes(str),  \r\n\toptionFunction: (o) => `${o.first_name} ${o.last_name}`,  \r\n  };  \r\n let selectedUsers = [];\r\n</script>   \r\n<TypeAhead {...props}  \r\n\t  on:selectitem=\"{(e) => selectedUsers = [...e.detail.items]}\"  \r\n\t  on:reset=\"{() => selectedUsers = []}\"  \r\n\t  on:clearitem=\"{(e) => selectedUsers = selectedUsers.filter((u) => u.id !== e.detail.item.id)}\"\r\n\t  />  \r\n  {#each selectedUsers as user (user.id)}  \r\n\t  <p>{user.first_name} {user.last_name}</p>  \r\n  {/each}\r\n ```  \r\n### Example with an array of strings\r\n  ```html  \r\n<script>\r\n  import TypeAhead from './TypeAhead.svelte';   \r\nconst countries = [  \r\n\t'Russia',  \r\n\t'Colombia',  \r\n\t'Sweden',  \r\n\t'China',\r\n\t...\r\n];  \r\nconst props = {  \r\n  items: countries,  \r\n};  \r\nlet selectedCountriesSync = [];\r\n</script>  \r\n<TypeAhead {...props}  \r\n\ton:selectitem=\"{(e) => selectedCountriesSync = [...e.detail.items]}\"  \r\n\ton:reset=\"{() => selectedCountriesSync = []}\"  \r\n\ton:clearitem=\"{(e) => selectedCountriesSync = selectedCountriesSync.filter((c) => c !== e.detail.item)}\"\r\n\t/>  \r\n  {#each selectedCountriesSync as country}  \r\n\t  <p>{country}</p>  \r\n  {/each}\r\n```\r\n\r\n### Example with fetched data from an API\r\n  ```html  \r\n  <script>  \r\n  import TypeAhead from './TypeAhead.svelte';\r\n  const asyncProps = {  \r\n\t  isAsync: true,  \r\n\t  value: 'alpha3Code',  \r\n\t  placeholder: 'Type a country',  \r\n\t  clearLabel: 'Clear countries list',  \r\n\t  loadingText: 'Hurry go...',  \r\n      noResultText: 'nope!',\r\n\t  optionInput: 'name',  \r\n\t  searchData: async (str) => {  \r\n\t\tconst response = await fetch(`https://restcountries.eu/rest/v2/name/${str}`);  \r\n\t\tconst countries = await response.json();  \r\n\t\tlet selected;  \r\n\t\tif (response.ok) {  \r\n\t\t\tselected = countries.map((c) => {  \r\n\t\t\t\treturn {  \r\n\t\t\t\t\tname: c.name,  \r\n\t\t\t\t\talpha3Code: c.alpha3Code  \r\n\t\t\t\t};  \r\n\t\t\t});  \r\n\t\t} else {  \r\n\t\t\tselected = [];  \r\n\t\t}  \r\n\t\treturn selected;  \r\n\t}\r\n};  \r\nconst config = {  \r\n\tcloseOnSelect: true,  \r\n\tresetButton: false,  \r\n\tmultiple: false,  \r\n};  \r\nlet selection = [];\r\n</script>\r\n<TypeAhead {...asyncProps} {config} bind:selection/>  \r\n  {#each selection as country (country.alpha3Code)}  \r\n\t  <p>{country.name}</p>  \r\n  {/each}\r\n  ```\r\n\r\n> Above, `bind:selection` is a shortcut which will reflect all the changes on the selected items.\r\n> By this way, no need to use ***`TypeAhead`*** events.\r\n\r\n## Documentation\r\n  \r\n### Props  \r\n| name | description |  \r\n|----------|-------------|\r\n | ***isAsync*** *(boolean)* | determine if ***`TypeAhead`*** will be asynchronous. Default is `false`|  \r\n | ***items*** *(array)* | default itemsof the select field. Default is `[]` | \r\n | ***searchData*** *(Function)* | callback used for the items search. It requires 2 arguments for sync search (the item during iteration and the substring entered into the search field), and 1 argument for the async search (the substring entered into the search field). If `undefined`, default callback will be used: `(item, v) => item.toLowerCase().includes(v.toLowerCase())`. | \r\n | ***value*** *(string)* | uniq identifier key for each item. If `undefined`, item itself will be used as uniq identifier. |  \r\n| ***optionFunction*** *(Function)* | function returning a string, used to display the text of each item. If `undefined`, *`optionInput`* will be used. |\r\n| ***optionInput*** *(string)* | item key used to be displayed as text. If `undefined`, item itself will be displayed. |  \r\n| ***placeholder*** *(string)* | placeholder of the select field. Default is '`Search`' |  \r\n| ***clearLabel*** *(string)* | text of the button to reset the select field. Default is '`Clear selection`' |  \r\n| ***loadingText*** *(string)* | text displayed during the loading of async data. Default is '`Loading...`' |  \r\n| ***noResultText*** *(string)* | text displayed when no data has been found. Default is '`No result...`' |\r\n | ***config*** *(see **TypeAhead configuration**)* | configuration of ***`TypeAhead`*** |      \r\n| ***selection*** *(Array)* | bind this prop in your parent component to track all the changes on the selected items. By this way, no need to use ***`TypeAhead`*** events. |      \r\n        \r\n ### TypeAhead configuration\r\n  | config field | description |  \r\n|-------------|----------------| \r\n| `closeOnClickOutside` | Close the dropdown panel when you click outside the select field. *Default is '`true`'.* |  \r\n| `closeOnSelect` | Close the dropdown panel when you select an item. *Default is '`false`'.* |\r\n| `resetButton` | Display the reset button at the right of the select field. *Default is '`true`'.* |     \r\n| `multiple` | Allow multiple items selection. *Default is '`true`'.* |\r\n\r\n>\r\n> If *`multiple`* is setted at `true`, *`closeOnSelect`* is always considered as `false`.\r\n>\r\n     \r\n ### Events    \r\n | name | description |  \r\n|-------------|----------------|  \r\n| ***selectitem*** `=> event.detail.items` *(Array)* | event triggered when you select an item.    \r\n| ***clearitem*** `=> event.detail.item` *(Object)* | event triggered when you clear one of the selected items.    \r\n| ***reset*** | event triggered when you reset the select field.\r\n\r\n## Unit test\r\n\r\n```bash\r\nnpm test\r\n# then coverage report in ./ut-coverage\r\n```\r\n\r\n## Storybook\r\n\r\n```bash\r\nnpm run storybook\r\n# then visit http://localhost:6006/\r\n```\r\n",
	"downloads_history": [
		[3589, 2],
		[3596, 3],
		[3603, 2],
		[3610, 3],
		[3617, 1],
		[3631, 1],
		[3638, 1],
		[3652, 1],
		[3659, 1],
		[3666, 3],
		[3673, 3],
		[3687, 1],
		[3708, 2],
		[3715, 2],
		[3722, 1],
		[3736, 3],
		[3743, 2],
		[3757, 2],
		[3764, 4],
		[3771, 2],
		[3778, 4],
		[3785, 1],
		[3799, 2],
		[3806, 3],
		[3813, 2],
		[3834, 1],
		[3841, 1],
		[3848, 1],
		[3855, 1],
		[3862, 10],
		[3869, 3],
		[3876, 2],
		[3883, 1],
		[3890, 2],
		[3897, 1],
		[3904, 3],
		[3911, 2],
		[3925, 1],
		[3932, 2],
		[3939, 6],
		[3946, 1],
		[3953, 1],
		[3960, 2],
		[3974, 1],
		[3981, 1],
		[3988, 3],
		[4002, 2],
		[4009, 3],
		[4016, 3],
		[4023, 2],
		[4037, 4],
		[4044, 7],
		[4051, 2],
		[4058, 2],
		[4072, 1],
		[4079, 1],
		[4086, 2],
		[4093, 14],
		[4100, 1],
		[4107, 1],
		[4114, 5],
		[4121, 9],
		[4128, 3]
	],
	"esm": false,
	"cjs": true
}
