{
	"name": "svelte-fetch",
	"description": "Provide fetch client with Svelte store integration.",
	"repo_url": "https://github.com/ctrl-alt-null/svelte-fetch",
	"authors": ["progging"],
	"homepage": "https://github.com/ctrl-alt-null/svelte-fetch#readme",
	"downloads": 17,
	"updated": "2019-10-07T15:10:04.247Z",
	"tags": ["server"],
	"github_stars": 9,
	"typescript": false,
	"version": "0.2.0",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "0.2.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-fetch",
				"version": "0.2.0",
				"size": 9857
			},
			{
				"name": "toqs",
				"version": "1.0.2",
				"size": 835
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# SVELTE-FETCH\r\n\r\n> A very thin wrapper around `fetch` with Svelte store integration for request states.\r\n\r\n## Why\r\nWhen making a web app, I **always** end up adding ongoing requests to some central state array so that I can compute when my application is \"loading\". That's basically what this is: a thin wrapper around the native `fetch` API, with importable Svelte [`readables`](https://svelte.dev/docs#readable) that can be used to show spinners and blocking modals for various request states.\r\n\r\n## Install\r\n`npm i -S svelte-fetch` or `yarn add svelte-fetch`\r\n\r\n## Usage\r\n```sveltehtml\r\n<script>\r\n\r\n    import Fetch, {\r\n        hasAny,\r\n        hasBlocking,\r\n        hasBackground\r\n    } from \"svelte-fetch\"\r\n\r\n    const fetch = new Fetch()\r\n\r\n    const [res1, res2, res3] = await Promise.all([\r\n        // Makes a regular request (typically shows a spinner in the UI)\r\n        fetch.get(\"http://localhost:3000/dev/ping?delay=1000\"),\r\n        //Makes a blocking request (typically block UI interaction)\r\n        fetch.blocking.get(\"http://localhost:3000/dev/ping?delay=1000\"),\r\n        //Makes a background request (typically invisible to the UI)\r\n        fetch\r\n            .background\r\n            .expect(JSON)\r\n            .get(\"http://localhost:3000/dev/ping?delay=1000\"),\r\n    ])\r\n\r\n    console.log(res1, res2, res3)\r\n\r\n</script>\r\n\r\n{#if $hasAny}\r\n    Loading!\r\n{/if}\r\n\r\n{#if $hasBlocking}\r\n    Loading (blocked)!\r\n{/if}\r\n\r\n{#if $hasBackground}\r\n    Loading (background)!\r\n{/if}\r\n\r\n```\r\n\r\n## API\r\n\r\n### `SvelteFetch.request`\r\nA wrapper around  [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\r\n\r\n### `SvelteFetch.get`\r\nShorthand for using `SvelteFetch.request` with the `{method:\"GET\"}` option.\r\n\r\n### `SvelteFetch.put`\r\nShorthand for using `SvelteFetch.request` with the `{method:\"PUT\"}` option.\r\n\r\n### `SvelteFetch.post`\r\nShorthand for using `SvelteFetch.request` with the `{method:\"POST\"}` option.\r\n\r\n### `SvelteFetch.destroy`\r\nShorthand for using `SvelteFetch.request` with the `{method:\"DELETE\"}` option.\r\n\r\n### `SvelteFetch.background`\r\nAdds the next request to the background queue (available from the export `hasBackground`), and removes it when it completes.\r\n\r\n```javascript\r\n    const fetch = new SvelteFetch()\r\n    \r\n    const data = await fetch.background.get(`https://endpoint`)\r\n```\r\n\r\n### `SvelteFetch.blocking`\r\nAdds the next request to the blocking queue (available from the export `hasBlocking`), and removes it when it completes.\r\n\r\n```javascript\r\n    const fetch = new SvelteFetch()\r\n    \r\n    const data = await fetch.blocking.get(`https://endpoint`)\r\n```\r\n\r\n### `SvelteFetch.expect`\r\nTells the request what data to expect next. Supports:\r\n* `JSON`\r\n* `Number` (will use the `JSON` parser)\r\n* `String`\r\n* `Image`\r\n* `Blob`\r\nIf `SvelteFetch.expect` is not used, data from the request is parsed using the `Content-Type` header.\r\n\r\n```javascript\r\n    const fetch = new SvelteFetch()\r\n    \r\n    const data = await fetch.expect(JSON).get(`https://endpoint`)\r\n```",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 9],
		[3596, 11],
		[3603, 10],
		[3610, 11],
		[3617, 4],
		[3624, 6],
		[3631, 6],
		[3638, 4],
		[3645, 7],
		[3652, 6],
		[3659, 7],
		[3666, 10],
		[3673, 6],
		[3680, 5],
		[3687, 4],
		[3694, 10],
		[3701, 5],
		[3708, 7],
		[3715, 9],
		[3722, 4],
		[3729, 12],
		[3736, 1],
		[3743, 5],
		[3750, 4],
		[3757, 6],
		[3764, 11],
		[3771, 8],
		[3778, 7],
		[3785, 9],
		[3792, 13],
		[3799, 6],
		[3806, 9],
		[3813, 6],
		[3820, 10],
		[3827, 4],
		[3834, 11],
		[3841, 5],
		[3848, 4],
		[3855, 1],
		[3862, 26],
		[3876, 2],
		[3883, 3],
		[3890, 6],
		[3904, 2],
		[3911, 8],
		[3925, 1],
		[3932, 1],
		[3960, 2],
		[3967, 1],
		[3981, 1],
		[3988, 1],
		[3995, 2],
		[4009, 1],
		[4023, 8],
		[4030, 6],
		[4037, 14],
		[4044, 13],
		[4051, 2],
		[4058, 1],
		[4065, 1],
		[4072, 1],
		[4086, 3],
		[4093, 12],
		[4100, 7],
		[4107, 3],
		[4114, 17],
		[4121, 16],
		[4128, 4]
	]
}
