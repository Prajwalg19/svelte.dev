{
	"name": "@furudean/svelte-persistent-store",
	"description": "Create Svelte store saving data to localStorage or sessionStorage.",
	"repo_url": "https://github.com/furudean/svelte-persistent-store",
	"authors": ["furudean"],
	"homepage": "https://github.com/furudean/svelte-persistent-store#readme",
	"downloads": 28,
	"updated": "2024-04-01T18:44:55.851Z",
	"tags": ["miscellaneous"],
	"github_stars": 37,
	"typescript": true,
	"version": "0.9.0",
	"svelte_range": "^3 || ^4",
	"last_rune_check_version": "0.9.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@furudean/svelte-persistent-store",
				"version": "0.9.0",
				"size": 7887
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "<img src=\"iky.png\"\n  height=\"76\"\n  width=\"62\"\n  align=\"right\"\n  alt=\"A girl\" />\n\n# [svelte-persistent-store](https://www.npmjs.com/package/@furudean/svelte-persistent-store)\n\nThis is a\n[writable svelte store](https://svelte.dev/docs#run-time-svelte-store-writable)\nthat saves and loads data from `Window.localStorage` or `Window.sessionStorage`.\nWorks with Svelte Kit out of the box.\n\nThe store listens to events from the `Storage` interface and will sync its\ninternal state upon changes. This makes debugging using the developer console\neasy, and it will update across sessions as well.\n\n## Install\n\n```bash\nnpm install @furudean/svelte-persistent-store\n```\n\n## Use\n\n> **Note**: By default only\n> [JSON serializable values](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#description)\n> are handled, but [custom serialization and deserialization functions can be\n> provided](#custom-serialization-functions).\n\n```js\nimport { persistent } from \"@furudean/svelte-persistent-store\"\n\nconst preferences = persistent({\n\tstart_value: {\n\t\tfoo: \"bar\"\n\t},\n\tkey: \"preferences\", // key to save as in Storage\n\tstorage_type: \"localStorage\" // Storage object to use\n})\n```\n\n## Custom serialization functions\n\nSince the `Storage` interface only supports strings, data needs to be converted\nto strings before saving. By default `JSON.stringify` and `JSON.parse` is used.\n\nYou can pass custom serializer and deserializer functions if you require\nspecific behavior when loading or saving data from `Storage`. For example, you\ncan handle `Date`s like this:\n\n```js\nconst persistent_date = persistent({\n\tstart_value: new Date(),\n\tkey: \"my-persistent-date\",\n\tstorage_type: \"localStorage\",\n\tserialize: (date) => date.toISOString(), // transform before saving\n\tdeserialize: (str) => new Date(str) // transform after loading\n})\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 22],
		[3596, 43],
		[3603, 23],
		[3610, 20],
		[3617, 27],
		[3624, 10],
		[3631, 12],
		[3638, 9],
		[3645, 13],
		[3652, 14],
		[3659, 5],
		[3666, 26],
		[3673, 20],
		[3680, 10],
		[3687, 7],
		[3694, 10],
		[3701, 10],
		[3708, 24],
		[3715, 9],
		[3722, 7],
		[3729, 14],
		[3736, 5],
		[3743, 38],
		[3750, 22],
		[3757, 16],
		[3764, 23],
		[3771, 46],
		[3778, 49],
		[3785, 23],
		[3792, 27],
		[3799, 22],
		[3806, 78],
		[3813, 67],
		[3820, 18],
		[3827, 7],
		[3834, 16],
		[3841, 35],
		[3848, 19],
		[3855, 76],
		[3862, 41],
		[3869, 32],
		[3876, 8],
		[3883, 14],
		[3890, 110],
		[3897, 24],
		[3904, 63],
		[3911, 90],
		[3918, 69],
		[3925, 60],
		[3932, 49],
		[3939, 50],
		[3946, 42],
		[3953, 46],
		[3960, 41],
		[3967, 20],
		[3974, 44],
		[3981, 52],
		[3988, 51],
		[3995, 17],
		[4002, 22],
		[4009, 30],
		[4016, 33],
		[4023, 30],
		[4030, 27],
		[4037, 47],
		[4044, 36],
		[4051, 32],
		[4058, 65],
		[4065, 38],
		[4072, 26],
		[4079, 34],
		[4086, 24],
		[4093, 40],
		[4100, 34],
		[4107, 37],
		[4114, 28],
		[4121, 31],
		[4128, 12]
	]
}
