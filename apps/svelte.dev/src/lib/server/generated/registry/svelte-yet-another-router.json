{
	"name": "svelte-yet-another-router",
	"description": "Create declarative browser routers for Svelte applications.",
	"repo_url": "https://github.com/doit-solutions/svelte-yet-another-router",
	"authors": ["davidnordvall"],
	"homepage": "https://github.com/doit-solutions/svelte-yet-another-router",
	"downloads": 43,
	"updated": "2024-10-02T07:19:53.323Z",
	"tags": ["router"],
	"github_stars": 0,
	"typescript": false,
	"version": "2.0.1",
	"svelte_range": "^3 || ^4",
	"last_rune_check_version": "2.0.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-yet-another-router",
				"version": "2.0.1",
				"size": 11834
			},
			{
				"name": "path-parser",
				"version": "6.1.0",
				"size": 127843
			},
			{
				"name": "search-params",
				"version": "3.0.0",
				"size": 59880
			},
			{
				"name": "tslib",
				"version": "1.14.1",
				"size": 33965
			},
			{
				"name": "svelte",
				"version": "4.2.19",
				"size": 2633608
			},
			{
				"name": "acorn",
				"version": "8.14.1",
				"size": 547473
			},
			{
				"name": "code-red",
				"version": "1.0.4",
				"size": 55185
			},
			{
				"name": "@jridgewell/sourcemap-codec",
				"version": "1.5.0",
				"size": 112815
			},
			{
				"name": "@types/estree",
				"version": "1.0.7",
				"size": 26147
			},
			{
				"name": "estree-walker",
				"version": "3.0.3",
				"size": 17599
			},
			{
				"name": "periscopic",
				"version": "3.1.0",
				"size": 11219
			},
			{
				"name": "is-reference",
				"version": "3.0.3",
				"size": 3953
			},
			{
				"name": "css-tree",
				"version": "2.3.1",
				"size": 1190591
			},
			{
				"name": "mdn-data",
				"version": "2.0.30",
				"size": 602138
			},
			{
				"name": "source-map-js",
				"version": "1.2.1",
				"size": 139872
			},
			{
				"name": "aria-query",
				"version": "5.3.2",
				"size": 176114
			},
			{
				"name": "magic-string",
				"version": "0.30.17",
				"size": 467464
			},
			{
				"name": "axobject-query",
				"version": "4.1.0",
				"size": 110878
			},
			{
				"name": "locate-character",
				"version": "3.0.0",
				"size": 5325
			},
			{
				"name": "@ampproject/remapping",
				"version": "2.3.0",
				"size": 78946
			},
			{
				"name": "@jridgewell/gen-mapping",
				"version": "0.3.8",
				"size": 81596
			},
			{
				"name": "@jridgewell/set-array",
				"version": "1.2.1",
				"size": 17945
			},
			{
				"name": "@jridgewell/trace-mapping",
				"version": "0.3.25",
				"size": 169330
			},
			{
				"name": "@jridgewell/resolve-uri",
				"version": "3.1.2",
				"size": 53153
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[1, 3],
			[0, 4],
			[4, 5],
			[4, 6],
			[6, 7],
			[6, 8],
			[6, 5],
			[6, 9],
			[9, 8],
			[6, 10],
			[10, 8],
			[10, 9],
			[10, 11],
			[11, 8],
			[4, 12],
			[12, 13],
			[12, 14],
			[4, 15],
			[4, 10],
			[4, 11],
			[4, 16],
			[16, 7],
			[4, 8],
			[4, 9],
			[4, 17],
			[4, 18],
			[4, 19],
			[19, 20],
			[20, 21],
			[20, 7],
			[20, 22],
			[22, 23],
			[22, 7],
			[19, 22],
			[4, 22],
			[4, 7]
		],
		"circular": []
	},
	"readme": "# `svelte-yet-another-router`\n\n## Getting started\nThis Svelte router has a simple API with a total of only five components. The two most important ones are the `Route` and the `Link` components. The purpose of the `Route` component is to conditionally render its children based on the current location. The purpose of the `Link` component is to provide clickable links which doesn't reload the entire page from the server but instead casues Svelte to update the application and it's `Route` components based on the `Link`'s target.\n\n```html\n    <script>\n        import { Link, Route, Switch, pathBase, location } from 'svelte-yet-another-router';\n\n        // If your app is published in a subfolder, you can set the path base to make all\n        // <Route>s, <Link>s and <Redirect>s automatically work with you path base.\n        pathBase.set('/base');\n    </script>\n\n    <h1>My app!</h1>\n    <Route path=\"/\">\n        <p>\n            This is the home page. Why don't you visit <Link href=\"/page1\">another page</Link>? Or <Link href=\"page2\">yet another</Link>?\n        </p>\n        <p>\n            <Link href=\"/page3\">This link</Link> will take you right back to the start.\n        </p>\n    </Route>\n    <Switch>\n        <Route path=\"/page1\">\n            <p>Another page!</p>\n        </Route>\n        <Route path=\"/page2\">\n            <p>Yet another page!</p>\n        </Route>\n        <!--\n            The location store allows you to read the current location (URI) _and_ push a\n            new URI (and corresponding state to the browser history).\n        -->\n        <Route path=\"/page3\" on:match={() => location.push('/')}>\n            <p>Going home!</p>\n        </Route>\n        <Route path=\"/\" exact={false}>\n            <p>404: Unknown page!</p>\n        </Route>\n    </Switch>\n```\n\nAdditionally, the `Redirect` and `ExternalRedirect` components are available, which will redirect the user to the provided target whenever it is rendered. The difference is that the `Redirect` component will only redirect within the same application by triggering Svelte to update the rendering while `ExternalRedirect` will simply change the browser's location to whichever URL is provided.\n\nFinally, a `Switch` component is available. Among the first level of `Route` components contained within a `Switch` component, only the first one with a matching path is\nrendered. This, among other things, allows for the construction of \"catch all\" routes for handling unknown paths.\n\n## Breaking changes from version 1 to 2\n### `$activeClassName` is no longer available\nIn version 1, handling af active links was managed through the store `$activeClassName`, through which you could set which CSS class would be applied to an active `<Link />` (i.e. a link component which points to the currently active URL).\n\nIn version 2, management of active links is more powerful. Not only can you set which attribute value to use but also the attribute _name_ (i.e., you're not restricted to only set the `class` attribute).\n\nYou could, for example, do something like:\n\n```html\n<script>\n    import { activePropName, activePropValue } from 'svelte-yet-another-router';\n\n    $activePropName = 'aria-current';\n    $activePropValue = 'page';\n</script>\n\n<Link href=\"/test\">Go to the test</Link>\n```\n\nwhich would render to\n\n```html\n<a aria-current=\"page\" href=\"/test\">Go to the test</a>\n```\n\n### `$push` is no longer available\nIn version 1, it was possible to push a new URL on the browser's history by using the `push` store, simply by calling `$push('new-url')` from your Svelte component.\n\nIn version 2, this functionality has been merged into the `location` store. Pushing a new URL to the browser history is now done by calling `location.push('new-url')` from your Svelte component.",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 137],
		[3603, 84],
		[3610, 84],
		[3617, 37],
		[3624, 18],
		[3631, 87],
		[3638, 51],
		[3645, 11],
		[3652, 47],
		[3659, 22],
		[3666, 44],
		[3673, 13],
		[3680, 96],
		[3687, 48],
		[3694, 61],
		[3701, 100],
		[3708, 117],
		[3715, 15],
		[3722, 3],
		[3729, 30],
		[3736, 30],
		[3743, 30],
		[3750, 104],
		[3757, 77],
		[3764, 9],
		[3771, 25],
		[3778, 18],
		[3785, 7],
		[3792, 19],
		[3799, 65],
		[3806, 18],
		[3813, 1],
		[3827, 1],
		[3834, 30],
		[3841, 57],
		[3848, 4],
		[3855, 56],
		[3862, 26],
		[3869, 8],
		[3876, 52],
		[3883, 66],
		[3890, 64],
		[3897, 36],
		[3904, 39],
		[3911, 126],
		[3918, 65],
		[3925, 201],
		[3932, 70],
		[3939, 70],
		[3946, 87],
		[3953, 48],
		[3960, 28],
		[3967, 44],
		[3974, 89],
		[3981, 43],
		[3988, 75],
		[3995, 26],
		[4002, 14],
		[4009, 1],
		[4016, 1],
		[4023, 34],
		[4030, 1],
		[4037, 13],
		[4044, 32],
		[4051, 112],
		[4058, 34],
		[4065, 48],
		[4072, 26],
		[4079, 10],
		[4086, 1],
		[4093, 20],
		[4100, 45],
		[4107, 92],
		[4114, 43],
		[4121, 167],
		[4128, 142],
		[4135, 50]
	],
	"esm": true,
	"cjs": false
}
