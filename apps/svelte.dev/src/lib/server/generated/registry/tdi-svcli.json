{
	"name": "@tdi/svcli",
	"description": "Set up and preprocess Svelte projects with CLI.",
	"repo_url": "",
	"authors": ["firefish5000"],
	"downloads": 8,
	"updated": "2020-10-25T16:14:14.610Z",
	"tags": ["tooling"],
	"typescript": false,
	"version": "0.0.24",
	"svelte_range": "^3.29.4",
	"last_rune_check_version": "0.0.24",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@tdi/svcli",
				"version": "0.0.24",
				"size": 145678
			},
			{
				"name": "lodash",
				"version": "4.17.21",
				"size": 1412415
			},
			{
				"name": "minimatch",
				"version": "3.1.2",
				"size": 34902
			},
			{
				"name": "brace-expansion",
				"version": "1.1.11",
				"size": 11059
			},
			{
				"name": "balanced-match",
				"version": "1.0.2",
				"size": 6939
			},
			{
				"name": "concat-map",
				"version": "0.0.1"
			},
			{
				"name": "svelte",
				"version": "3.59.2",
				"size": 10624206
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2],
			[2, 3],
			[3, 4],
			[3, 5],
			[0, 6]
		],
		"circular": []
	},
	"readme": "# Disclaimer\nThis is no more than a POC. A quickly written temporary solution for basic common setups until better tools arrive.\n\n# Commands\ncommand | description\n|----|----|\n`npx @tdi/svcli --setup` | Interactively initialize/configure a svelte package with a few modular template options.\n`npx @tdi/svcli --preprocess` | Preprocess svelte files. Requires a `svelte.config.js` file which is created by `npx @tdi/svcli --setup`\n\n# Purpose\nWe aid in configuring a few basics for `svelte-preprocess`, `postcss`, `tailwind`, `typescript`,\n`eslint`, `mdsvex`, and `svelte-check`. Additionally, we try to preprocess your svelte files so they can be truly sharable.\n\nWe install npm packages, create initial config files\nor interactive diff update existing files.\nSome things, notably rollup, will have a config snippets dumped to terminal for copy/paste into actual config\nsince we do not currently support updating them directly.\n\n# svelte.config.js\nWe currently add a few non-standard properties to svelte.config.js. Note that their names may spontaneously change in future versions. The reasoning behind their inclusion are below\n\nProperty | Type | Description\n|------|----|---|\noutDir | string | Where to output/save the preprocessed files.\nsrcDir | string | Where to look for the original source files to process. Note that we search a directory for all matching files. This is vastly different than webpack/rollup which are given entrypoint files and walk all imports.\nextensions | string[] | File extensions to preprocess.\ncopyFileGlob | Glob[] | Globs matching all files we should copy over to the output directory. This will only match files inside srcDir and will not match any files we preprocess nor any that match the copyExcludeFileGlob. If you have js files, you will need `./**/*.js` in here. Any non svelte import that isn't handled by another preprocessor will need a glob to copy it.\ncopyExcludeFileGlob | Glob[] | Globs matching all files we should not copy over, even if they match a copyFileGlob. Exists to allow copyFileGlob to be more permissive and match everything if need be. This should be set to match any files a preprocessor will run on, like `./**/*.ts`.\n\nNote that unless `copyFileGlob` only matches js files, your component is likely not sharable without the end dev modifying their bundler. Unfortunately, svelte's ecosystem is small for more than 1 reason atm, and shareability of components is certainly 1 of them. If you have css/image/audio/video/json/etc imports, you *should* be able to utilize svelte-preprocess's babel support to eliminate them instead of your bundler.\n\ncopyFileGlob/copyExcludeFileGlob will be renamed or removed in future version. They will exist until I figure out how to handel non svelte/js imports properly (ie. until I learn how to babel like a madman). Utilizing babel for imports might hurt chunking performance since the goto solution involves inlining.\n\nNote that the end dev's bundler configuration will run on us as well, including their svelte preprocessors. There is currently no way to scope svelte preprocessors to your own project in rollup. This probably isn't a big deal for most use cases, but could cause problems.\n\n# Preprocessing Example\nCreate the svelte.config.js file appropriately\n```js\n// svelte.config.js\nconst sveltePreprocess = require(\"svelte-preprocess\")\nconst {mdsvex} = require(\"mdsvex\")\n\nconst createPreprocessors = ({sourceMap}={})=>{\n  return [\n    sveltePreprocess({\n      sourceMap: sourceMap ?? false,\n      typescript: true,\n      postcss:true\n    }),\n    mdsvex()\n  ]\n}\nmodule.exports={\n  \"createPreprocessors\": createPreprocessors,\n  \"preprocess\": createPreprocessors({sourceMap: true}),\n  \"extensions\": [\".svelte\",\".svx\"],\n  \"outDir\": \"./out\",\n  \"srcDir\": \"./src\",\n  \"copyFileGlob\": [\n    \"./src/**/*.js\",\n  ],\n  \"copyExcludeFileGlob\": [\n    \"./src/**/*.ts\",\n    \"./src/**/*.tsx\",\n    \"./src/**/*.css\",\n    \"./src/**/*.pcss\",\n    \"./node_modules/**/*\",\n  ] ,\n}\n```\nOnce configured, you can simply run svcli\n```sh\n# Clear the output directory. (currently a required step)\nnpx @tdi/svcli --clean\n# Preprocess all svelte files. (also copies any file matching copyFileGlob)\nnpx @tdi/svcli --preprocess\n# Compile any other files you require, such as typescript, with the appropriate tools.\ntsc --outDir ./out\n```",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 25],
		[3610, 2],
		[3617, 2],
		[3631, 1],
		[3645, 27],
		[3652, 2],
		[3659, 25],
		[3666, 25],
		[3673, 24],
		[3694, 1],
		[3701, 1],
		[3708, 25],
		[3715, 3],
		[3743, 1],
		[3757, 1],
		[3764, 25],
		[3778, 25],
		[3785, 1],
		[3792, 1],
		[3799, 3],
		[3806, 5],
		[3820, 1],
		[3834, 8],
		[3841, 22],
		[3848, 2],
		[3855, 7],
		[3862, 140],
		[3869, 3],
		[3883, 5],
		[3890, 1],
		[3897, 2],
		[3904, 25],
		[3911, 1],
		[3918, 22],
		[3925, 26],
		[3932, 2],
		[3939, 4],
		[3946, 5],
		[3953, 2],
		[3960, 4],
		[3967, 1],
		[3981, 2],
		[3995, 3],
		[4016, 27],
		[4023, 34],
		[4030, 1],
		[4037, 27],
		[4044, 8],
		[4051, 5],
		[4058, 6],
		[4065, 1],
		[4072, 3],
		[4079, 1],
		[4093, 65],
		[4100, 31],
		[4107, 4],
		[4114, 8],
		[4121, 34],
		[4128, 12],
		[4135, 21]
	],
	"esm": false,
	"cjs": true
}
