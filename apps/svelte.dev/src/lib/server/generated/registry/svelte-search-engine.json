{
	"name": "svelte-search-engine",
	"description": "Integrate Google Programmable Search Engine into Svelte apps.",
	"repo_url": "https://github.com/pyoner/svelte-search-engine",
	"authors": ["pyoner"],
	"homepage": "https://github.com/pyoner/svelte-search-engine#readme",
	"downloads": 9,
	"updated": "2024-08-19T14:38:46.523Z",
	"tags": ["integration"],
	"github_stars": 2,
	"typescript": true,
	"version": "0.0.5",
	"svelte_range": "^4.0.0",
	"kit_range": "^2.0.0",
	"last_rune_check_version": "0.0.5",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-search-engine",
				"version": "0.0.5",
				"size": 42222
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Svelte Search Engine\n\nA customizable search engine component library for Svelte applications, powered by Google's Programmable Search Engine.\n\n## Features\n\n- Easy integration with Google's Custom Search Engine\n- Customizable search components (Search, SearchBox, SearchResults)\n- Support for both web and image search\n- TypeScript support\n- Reactive stores for search state management\n- Customizable UI components for search results\n\n## Installation\n\n```bash\nnpm install svelte-search-engine\n```\n\n\n## Usage\n\n1. Set up a Google Programmable Search Engine and obtain your CX ID.\n\n2. Add your CX ID to your environment variables:\n\n```env\nPUBLIC_CSE_CX=your_cx_id_here\n```\n\n3. Import and use the components in your Svelte app:\n\n```svelte\n<script>\n  import { Engine, Search } from 'svelte-search-engine';\n  import { PUBLIC_CSE_CX } from '$env/static/public';\n</script>\n\n<Engine cx={PUBLIC_CSE_CX}>\n  <Search\n    attributes={{\n      gname: 'web',\n      enableImageSearch: false\n    }}\n  />\n</Engine>\n```\n\n\n## Components\n\n### Engine\n\nThe `Engine` component initializes the Google Custom Search Engine script and provides the context for other search components.\n\n```svelte\n<Engine cx={YOUR_CX_ID}>\n  <!-- Other search components go here -->\n</Engine>\n```\n\n\n### Search\n\nThe `Search` component renders a complete search interface, including the search box and results.\n\n```svelte\n<Search\n  attributes={{\n    gname: 'web',\n    enableImageSearch: false\n  }}\n  components={{ web: CustomResultsComponent }}\n/>\n```\n\n\n### SearchBox\n\nThe `SearchBox` component renders only the search input field.\n\n```svelte\n<SearchBox\n  attributes={{\n    gname: 'mySearchBox'\n  }}\n/>\n```\n\n\n### SearchResults\n\nThe `SearchResults` component renders only the search results.\n\n```svelte\n<SearchResults\n  attributes={{\n    gname: 'mySearchResults'\n  }}\n  components={{ web: CustomResultsComponent }}\n/>\n```\n\n\n## Customization\n\nYou can customize the appearance and behavior of the search components by passing `attributes` and `components` props.\nFor a full list of available attributes, refer to the `ComponentAttributes` interface in the source code:\n\n```typescript\nexport interface ComponentAttributes {\n\t/** The name of the Search Element object. */\n\tgname?: Gname;\n\n\t/** Whether to execute a search by the query embedded in the URL of the page that's loading. */\n\tautoSearchOnLoad?: boolean;\n\n\t/** Enables history management for the browser Back and Forward buttons. */\n\tenableHistory?: boolean;\n\n\t/** The query parameter name embedded in the URL. */\n\tqueryParameterName?: string;\n\n\t/** The URL of the results page. */\n\tresultsUrl?: string;\n\n\t/** Whether the results page opens in a new window. */\n\tnewWindow?: boolean;\n\n\t/** Allows invalid traffic-only cookies and local storage based on consent status. */\n\tivt?: boolean;\n\n\t/** Specifies whether the mobile layout styles should be used for mobile devices. */\n\tmobileLayout?: 'enabled' | 'disabled' | 'forced';\n\n\t/** Enables autocomplete if configured in the control panel. */\n\tenableAutoComplete?: boolean;\n\n\t/** The maximum number of autocompletions to display. */\n\tautoCompleteMaxCompletions?: number;\n\n\t/** The maximum number of promotions to display in autocomplete. */\n\tautoCompleteMaxPromotions?: number;\n\n\t/** Comma-separated list of languages for which autocomplete should be enabled. */\n\tautoCompleteValidLanguages?: string;\n\n\t/** Specifies the default refinement label to display. */\n\tdefaultToRefinement?: string;\n\n\t/** Specifies the style of refinements, either tab or link. */\n\trefinementStyle?: 'tab' | 'link';\n\n\t/** Enables image search if configured in the control panel. */\n\tenableImageSearch?: boolean;\n\n\t/** Specifies if the search results page will display image search results by default. */\n\tdefaultToImageSearch?: boolean;\n\n\t/** Specifies the layout of the image search results page. */\n\timageSearchLayout?: 'classic' | 'column' | 'popup';\n\n\t/** Specifies the maximum size of the search results set for image search. */\n\timageSearchResultSetSize?: number | string;\n\n\t/** Restricts results to files of a specified extension. */\n\timage_as_filetype?: 'jpg' | 'gif' | 'png' | 'bmp' | 'svg' | 'webp' | 'ico' | 'raw';\n\n\t/** Filters search results using Logical OR. */\n\timage_as_oq?: string;\n\n\t/** Filters based on licensing. */\n\timage_as_rights?:\n\t\t| 'cc_publicdomain'\n\t\t| 'cc_attribute'\n\t\t| 'cc_sharealike'\n\t\t| 'cc_noncommercial'\n\t\t| 'cc_nonderived';\n\n\t/** Restrict results to pages from a specific site. */\n\timage_as_sitesearch?: string;\n\n\t/** Restricts search to black and white, grayscale, or color images. */\n\timage_colortype?: 'mono' | 'gray' | 'color';\n\n\t/** Restricts search results to documents originating in a particular country. */\n\timage_cr?: string;\n\n\t/** Restricts search to images of a specific dominant color. */\n\timage_dominantcolor?:\n\t\t| 'red'\n\t\t| 'orange'\n\t\t| 'yellow'\n\t\t| 'green'\n\t\t| 'teal'\n\t\t| 'blue'\n\t\t| 'purple'\n\t\t| 'pink'\n\t\t| 'white'\n\t\t| 'gray'\n\t\t| 'black'\n\t\t| 'brown';\n\n\t/** Enables or disables automatic filtering of search results. */\n\timage_filter?: '0' | '1';\n\n\t/** Boosts search results whose country of origin matches the parameter value. */\n\timage_gl?: string;\n\n\t/** Specifies the size of images returned in search results. */\n\timage_size?: 'icon' | 'small' | 'medium' | 'large' | 'xlarge' | 'xxlarge' | 'huge';\n\n\t/** Sorts results using either date or other structured content. */\n\timage_sort_by?: '' | 'date';\n\n\t/** Restricts search to images of a specific type. */\n\timage_type?: 'clipart' | 'face' | 'lineart' | 'stock' | 'photo' | 'animated';\n\n\t/** Disables web search if true. */\n\tdisableWebSearch?: boolean;\n\n\t/** Extra terms added to search query using logical OR. */\n\twebSearchQueryAddition?: string;\n\n\t/** The maximum size of the web search results set. */\n\twebSearchResultSetSize?: number | string;\n\n\t/** Specifies if SafeSearch is enabled for web search results. */\n\twebSearchSafesearch?: 'off' | 'active';\n\n\t/** Restricts results to files of a specified extension. */\n\tas_filetype?: string;\n\n\t/** Filters search results using Logical OR. */\n\tas_oq?: string;\n\n\t/** Filters based on licensing. */\n\tas_rights?:\n\t\t| 'cc_publicdomain'\n\t\t| 'cc_attribute'\n\t\t| 'cc_sharealike'\n\t\t| 'cc_noncommercial'\n\t\t| 'cc_nonderived';\n\n\t/** Restrict results to pages from a specific site. */\n\tas_sitesearch?: string;\n\n\t/** Restricts search results to documents originating in a particular country. */\n\tcr?: string;\n\n\t/** Enables or disables automatic filtering of search results. */\n\tfilter?: '0' | '1';\n\n\t/** Boosts search results whose country of origin matches the parameter value. */\n\tgl?: string;\n\n\t/** Restricts search results to documents written in a particular language. */\n\tlr?: string;\n\n\t/** Sort results using either date or other structured content. */\n\tsort_by?: string;\n\n\t/** Enables the sorting of results by relevance, date, or label. */\n\tenableOrderBy?: boolean;\n\n\t/** Sets the link target. Default: _blank */\n\tlinkTarget?: '_blank' | '_self' | '_parent' | '_top';\n\n\t/** Specifies the default text to display when no results match the query. */\n\tnoResultsString?: string;\n\n\t/** The maximum size of the results set. */\n\tresultSetSize?: number | string;\n\n\t/** Specifies if SafeSearch is enabled for both web and image search. */\n\tsafeSearch?: 'off' | 'active';\n}\n```\n\n\n## Stores\n\nThe library provides reactive stores for managing search state:\n\n```typescript\nimport { init, starting, ready, rendered } from 'svelte-search-engine';\n\ninit.subscribe(value => console.log('Initialization state:', value));\nstarting.subscribe(value => console.log('Search starting:', value));\nready.subscribe(value => console.log('Search results ready:', value));\nrendered.subscribe(value => console.log('Search results rendered:', value));\n```\n\n## Custom Results Component\n\nYou can create a custom results component to display search results:\n\n```svelte\n<script lang=\"ts\">\n  import type { Promotion, Result } from 'svelte-search-engine';\n\n  export let promos: Promotion[] | undefined;\n  export let results: Result[];\n</script>\n\n<!-- Your custom results layout here -->\n```\n\nThen use it in the `Search` or `SearchResults` component:\n\n```svelte\n<Search\n  attributes={{ gname: 'web' }}\n  components={{ web: YourCustomResultsComponent }}\n/>\n```\n\n## License\n\nMIT\n\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3876, 83],
		[3883, 198],
		[3890, 19],
		[3897, 10],
		[3904, 13],
		[3911, 5],
		[3918, 2],
		[3925, 4],
		[3932, 2],
		[3939, 5],
		[3946, 2],
		[3953, 2],
		[3967, 1],
		[3981, 1],
		[3988, 1],
		[4002, 3],
		[4009, 3],
		[4016, 7],
		[4023, 11],
		[4030, 2],
		[4037, 11],
		[4044, 13],
		[4051, 2],
		[4058, 1],
		[4065, 2],
		[4072, 3],
		[4079, 2],
		[4093, 1],
		[4100, 5],
		[4107, 15],
		[4114, 9],
		[4121, 10],
		[4128, 3],
		[4135, 11]
	]
}
