{
	"name": "svelte-valibot-form",
	"description": "Validate forms in Svelte using Valibot.",
	"repo_url": "https://github.com/matheustavarestrindade/svelte-valibot-form",
	"authors": ["matheustt098"],
	"homepage": "https://github.com/matheustavarestrindade/svelte-valibot-form",
	"downloads": 18,
	"updated": "2025-01-02T20:25:25.572Z",
	"tags": ["miscellaneous"],
	"github_stars": 0,
	"typescript": true,
	"version": "0.0.8",
	"svelte_range": "^5.1.15",
	"kit_range": "^2.8.0",
	"last_rune_check_version": "0.0.8",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-valibot-form",
				"version": "0.0.8",
				"size": 25421
			},
			{
				"name": "@sveltejs/kit",
				"version": "2.20.8",
				"size": 820819
			},
			{
				"name": "@types/cookie",
				"version": "0.6.0",
				"size": 10073
			},
			{
				"name": "cookie",
				"version": "0.6.0",
				"size": 23736
			},
			{
				"name": "devalue",
				"version": "5.1.1",
				"size": 31833
			},
			{
				"name": "esm-env",
				"version": "1.2.2",
				"size": 3784
			},
			{
				"name": "import-meta-resolve",
				"version": "4.1.0",
				"size": 77354
			},
			{
				"name": "kleur",
				"version": "4.1.5",
				"size": 20250
			},
			{
				"name": "magic-string",
				"version": "0.30.17",
				"size": 467464
			},
			{
				"name": "@jridgewell/sourcemap-codec",
				"version": "1.5.0",
				"size": 112815
			},
			{
				"name": "mrmime",
				"version": "2.0.1",
				"size": 33008
			},
			{
				"name": "sade",
				"version": "1.8.1",
				"size": 31545
			},
			{
				"name": "mri",
				"version": "1.2.0",
				"size": 13261
			},
			{
				"name": "set-cookie-parser",
				"version": "2.7.1",
				"size": 16074
			},
			{
				"name": "sirv",
				"version": "3.0.1",
				"size": 21845
			},
			{
				"name": "@polka/url",
				"version": "1.0.0-next.29",
				"size": 4815
			},
			{
				"name": "totalist",
				"version": "3.0.1",
				"size": 7459
			},
			{
				"name": "svelte",
				"version": "5.28.2",
				"size": 2426223
			},
			{
				"name": "@ampproject/remapping",
				"version": "2.3.0",
				"size": 78946
			},
			{
				"name": "@jridgewell/gen-mapping",
				"version": "0.3.8",
				"size": 81596
			},
			{
				"name": "@jridgewell/set-array",
				"version": "1.2.1",
				"size": 17945
			},
			{
				"name": "@jridgewell/trace-mapping",
				"version": "0.3.25",
				"size": 169330
			},
			{
				"name": "@jridgewell/resolve-uri",
				"version": "3.1.2",
				"size": 53153
			},
			{
				"name": "@types/estree",
				"version": "1.0.7",
				"size": 26147
			},
			{
				"name": "acorn",
				"version": "8.14.1",
				"size": 547473
			},
			{
				"name": "@sveltejs/acorn-typescript",
				"version": "1.0.5",
				"size": 197476
			},
			{
				"name": "aria-query",
				"version": "5.3.2",
				"size": 176114
			},
			{
				"name": "axobject-query",
				"version": "4.1.0",
				"size": 110878
			},
			{
				"name": "clsx",
				"version": "2.1.1",
				"size": 8555
			},
			{
				"name": "esrap",
				"version": "1.4.6",
				"size": 50818
			},
			{
				"name": "is-reference",
				"version": "3.0.3",
				"size": 3953
			},
			{
				"name": "locate-character",
				"version": "3.0.0",
				"size": 5325
			},
			{
				"name": "zimmerframe",
				"version": "1.1.2",
				"size": 12266
			},
			{
				"name": "valibot",
				"version": "1.0.0",
				"size": 1674042
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[1, 3],
			[1, 4],
			[1, 5],
			[1, 6],
			[1, 7],
			[1, 8],
			[8, 9],
			[1, 10],
			[1, 11],
			[11, 12],
			[1, 13],
			[1, 14],
			[14, 15],
			[14, 10],
			[14, 16],
			[0, 17],
			[17, 18],
			[18, 19],
			[19, 20],
			[19, 9],
			[19, 21],
			[21, 22],
			[21, 9],
			[18, 21],
			[17, 9],
			[17, 23],
			[17, 24],
			[17, 25],
			[17, 26],
			[17, 27],
			[17, 28],
			[17, 5],
			[17, 29],
			[29, 9],
			[17, 30],
			[30, 23],
			[17, 31],
			[17, 8],
			[17, 32],
			[0, 33]
		],
		"circular": []
	},
	"readme": "# Valibot SvelteKit Form\r\n\r\nThis is a validation library for SvelteKit, integrating Valibot to simplify validation on both front and backend.\r\nThis library provides reusable form components, context-aware validation, and error handling.\r\n\r\n## Table of Contents\r\n\r\n- [Installation](#installation)\r\n- [Usage](#usage)\r\n  - [Form Setup](#form-setup)\r\n  - [Custom Inputs](#custom-inputs)\r\n  - [Server Actions](#server-actions)\r\n- [API Reference](#api-reference)\r\n  - [ValibotForm Props](#valibotform-props)\r\n  - [Context Access](#context-access)\r\n- [Example](#example)\r\n\r\n---\r\n\r\n## Installation\r\n\r\nInstall the library using npm:\r\n\r\n```bash\r\nnpm install svelte-valibot-form\r\n```\r\n\r\nMake sure to install its dependencies:\r\n\r\n```bash\r\nnpm install valibot\r\n```\r\n\r\n## Usage\r\n\r\n### Form Setup\r\n\r\nTo create a form that validates data based on a schema, import `ValibotForm` and pass the necessary schema. Here’s a basic login form example:\r\n\r\n```svelte\r\n<!-- +page.svelte -->\r\n<script lang=\"ts\">\r\n\timport FileInput from '$lib/components/FileInput.svelte';\r\n\timport GenericInput from '$lib/components/GenericInput.svelte';\r\n\timport ValibotForm from '$lib/components/ValibotForm.svelte';\r\n\timport { ValibotAction } from '$lib/index.js';\r\n\timport { LoginSchema, type LoginSchemaType } from '$lib/schema/LoginSchema.js';\r\n\timport type { InferOutput } from 'valibot';\r\n\r\n\tconst login = async (data: InferOutput<LoginSchemaType>) => await ValibotAction.call('login', LoginSchema, data);\r\n</script>\r\n\r\n<ValibotForm\r\n\tschema={LoginSchema}\r\n\tdefaultValues={{ email: '', password: 'teste', file: [new File([], 'test.png')] }}\r\n\tonSubmit={login}\r\n\tonError={console.log}\r\n>\r\n\t<GenericInput name=\"email\" type=\"email\" placeholder=\"Email\" />\r\n\t<GenericInput name=\"password\" type=\"password\" placeholder=\"Password\" />\r\n\t<FileInput name=\"file\" multiple />\r\n\t<button type=\"submit\">Login</button>\r\n</ValibotForm>\r\n```\r\n\r\n### Custom Inputs\r\n\r\nTo access validation errors and default values directly within your form elements, use `getContext` to retrieve the validation context.\r\n\r\n### Form Input Example\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n\timport { getContext } from 'svelte';\r\n\timport type { LoginSchemaType } from '$lib/schema/LoginSchema.js';\r\n\timport type { ValibotErrorContext, ValibotErrorKey } from '$lib/types.js';\r\n\r\n\tconst props: SvelteHTMLElements['input'] = $props();\r\n\tconst ctx = getContext<ValibotErrorContext<LoginSchemaType>>('form');\r\n\tconst key = props.name as ValibotErrorKey<LoginSchemaType>;\r\n\r\n\tconst defaultValue = ctx?.defaultValues?.[key];\r\n\tconst error = ctx?.errors?.[key];\r\n\r\n\tlet files: FileList | null = $state(null);\r\n\r\n\t$effect(() => {\r\n\t\tif (defaultValue) {\r\n\t\t\tconst dt = new DataTransfer();\r\n\t\t\tArray.isArray(defaultValue) ? defaultValue.forEach((file) => dt.items.add(file)) : dt.items.add(defaultValue);\r\n\t\t\tfiles = dt.files;\r\n\t\t}\r\n\t});\r\n</script>\r\n\r\n<div>\r\n\t<input type=\"file\" bind:files {...props} />\r\n\t{#if error}\r\n\t\t<p>{error}</p>\r\n\t{/if}\r\n</div>\r\n```\r\n\r\n### Normal Input Example\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n\timport { getContext } from 'svelte';\r\n\timport type { SvelteHTMLElements } from 'svelte/elements';\r\n\tconst props: SvelteHTMLElements['input'] = $props();\r\n\timport type { LoginSchemaType } from '$lib/schema/LoginSchema.js';\r\n\timport type { ValibotErrorContext, ValibotErrorKey } from '$lib/types.js';\r\n\r\n\tconst key = props.name as ValibotErrorKey<LoginSchemaType>;\r\n\tconst ctx = getContext<ValibotErrorContext<LoginSchemaType>>('form');\r\n\r\n\tconst value = ctx?.defaultValues?.[key];\r\n\tconst error = $derived(ctx?.errors?.[key]);\r\n</script>\r\n\r\n<div>\r\n\t<input {value} {...props} />\r\n\t{#if error}\r\n\t\t<p>{error}</p>\r\n\t{/if}\r\n</div>\r\n```\r\n\r\n### Server Actions\r\n\r\nOn the server side, simply parse incoming form data using the `ValibotAction` wrapper function with the schema to validate the data.\r\nThe return object of the Action will have a new member called `data` that has all the submitted data.\r\n\r\n```typescript\r\n// +page.server.ts\r\nimport { withValibot } from '$lib/request/WithSchema.js';\r\nimport { LoginSchema } from '$lib/schema/LoginSchema.js';\r\nimport type { Actions } from './$types.js';\r\n\r\nexport const actions: Actions = {\r\n\tlogin: withValibot(LoginSchema, async ({ data, request }) => {\r\n\t\tconsole.log(request);\r\n\t\tconsole.log(data);\r\n\t})\r\n};\r\n```\r\n\r\n## API Reference\r\n\r\n### ValibotForm Props\r\n\r\nThe `ValibotForm` component accepts the following props:\r\n\r\n```typescript\r\ntype ValibotFormProps = SvelteHTMLElements['form'] & {\r\n\tschema: Schema;\r\n\tforceSubmit?: boolean;\r\n\tdefaultValues?: Partial<v.InferInput<Schema>>;\r\n\tonSubmit?: (values: v.InferOutput<Schema>) => void;\r\n\tonError?: (errors: [v.InferIssue<Schema>, ...v.InferIssue<Schema>[]]) => void;\r\n};\r\n```\r\n\r\n- **schema** (required): Validation schema based on Valibot.\r\n- **forceSubmit**: (optional) Forces form submission when set to true, will be automatically set to false after use.\r\n- **defaultValues**: (optional) Set initial values for the form fields.\r\n- **onSubmit**: Callback function invoked when form validation is successful.\r\n- **onError**: Callback function invoked with validation errors.\r\n\r\n### Context Access\r\n\r\nEach form element can access validation context properties such as `defaultValues` and `errors` using `getContext`.\r\n\r\n```typescript\r\nconst ctx = getContext<ValibotErrorContext<LoginSchemaType>>('form');\r\n```\r\n\r\n- **defaultValues**: Access default values set in the form.\r\n- **errors**: Access validation errors associated with each form field.\r\n\r\n## Example\r\n\r\nHere’s a complete example to illustrate the library’s usage.\r\n\r\n```svelte\r\n<script lang=\"ts\">\r\n\timport ValibotForm from '$lib/components/ValibotForm.svelte';\r\n\timport GenericInput from '$lib/components/GenericInput.svelte';\r\n\timport { LoginSchema, type LoginSchemaType } from '$lib/schema/LoginSchema.js';\r\n\timport { ValibotAction } from '$lib/index.js';\r\n\timport type { InferOutput } from 'valibot';\r\n\r\n\tconst login = async (data: InferOutput<LoginSchemaType>) => await ValibotAction.call('login', LoginSchema, data);\r\n</script>\r\n\r\n<ValibotForm schema={LoginSchema} defaultValues={{ email: '', password: '' }} onSubmit={login} onError={console.error}>\r\n\t<GenericInput name=\"email\" type=\"email\" placeholder=\"Email\" />\r\n\t<GenericInput name=\"password\" type=\"password\" placeholder=\"Password\" />\r\n\t<button type=\"submit\">Login</button>\r\n</ValibotForm>\r\n```\r\n## ValibotAction\r\n\r\nThe `ValibotAction` class is a utility for submitting validated form data directly to server actions in SvelteKit. \r\nIt allows for seamless form submission, including handling file uploads, transforming the form data, and validating inputs against a Valibot schema before sending to the server.\r\n\r\n### How It Works\r\n\r\n`ValibotAction.call` validates the input data with the provided Valibot schema. If validation succeeds, it converts the data into `FormData`, handling nested objects and file uploads. \r\nThen, it sends the data to the specified server action endpoint. If the `invalidate` option is set, the cache will be invalidated after a successful submission.\r\n\r\n### Usage\r\n\r\nIn a form component, `ValibotAction.call` can be used to validate and send form data:\r\n\r\n```typescript\r\nimport { ValibotAction } from '$lib/index.js';\r\nimport { LoginSchema, type LoginSchemaType } from '$lib/schema/LoginSchema.js';\r\nimport type { InferOutput } from 'valibot';\r\n\r\nconst login = async (data: InferOutput<LoginSchemaType>) => await ValibotAction.call('login', LoginSchema, data);\r\n```\r\n\r\n### API\r\n\r\n#### `ValibotAction.call`\r\n\r\n```typescript\r\nstatic async call<Schema extends GenericValibotObject>(\r\n  action: string,\r\n  schema: Schema,\r\n  data: InferInput<Schema>,\r\n  options?: ActionOptions\r\n): Promise<{ success: boolean; errors?: Record<string, string>; issues?: ValibotIssue[] }>\r\n```\r\n\r\n- **action** (string): Name of the server action to invoke.\r\n- **schema** (GenericValibotObject): A Valibot schema defining validation rules for the data.\r\n- **data** (InferInput<Schema>): Input data to validate and send to the server action.\r\n- **options** (ActionOptions, optional): Additional options, including:\r\n\r\n  - `invalidate` (boolean): If `true`, invalidates the client-side cache after successful submission. Defaults to `true`.\r\n\r\n- **Returns**: An object containing:\r\n  - `success` (boolean): Indicates if the validation and submission were successful.\r\n  - `errors` (optional): An error map generated if validation fails.\r\n  - `issues` (optional): Array of Valibot validation issues if validation fails.\r\n\r\n## License\r\n\r\nThis project is licensed under the MIT License.\r\n\r\n---\r\n\r\nThis README provides a structured overview of your Valibot SvelteKit library, detailing the setup and usage of key components, properties, and context, with example code snippets. Let me know if you'd like further customization!\r\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3946, 57],
		[3953, 70],
		[3960, 2],
		[3967, 142],
		[3974, 8],
		[3981, 67],
		[3988, 11],
		[3995, 25],
		[4002, 5],
		[4009, 88],
		[4016, 89],
		[4023, 21],
		[4030, 9],
		[4037, 24],
		[4044, 12],
		[4051, 16],
		[4058, 2],
		[4065, 8],
		[4072, 4],
		[4079, 2],
		[4086, 1],
		[4100, 16],
		[4107, 17],
		[4114, 18],
		[4121, 22],
		[4128, 10],
		[4135, 15]
	],
	"esm": true,
	"cjs": false
}
