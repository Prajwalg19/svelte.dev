{
	"name": "theme-selector",
	"description": "Switch between light, dark, and system themes in Svelte.",
	"repo_url": "https://github.com/lixelv/theme-selector",
	"authors": ["lixelv"],
	"homepage": "https://github.com/lixelv/theme-selector#readme",
	"downloads": 4,
	"updated": "2024-09-04T16:43:47.075Z",
	"tags": ["miscellaneous"],
	"github_stars": 0,
	"typescript": true,
	"version": "0.1.3",
	"svelte_range": "*",
	"kit_range": "^2.0.0",
	"last_rune_check_version": "0.1.3",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "theme-selector",
				"version": "0.1.3",
				"size": 9685
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# theme-selector\n\nA simple Svelte store library that lets you switch between light and dark themes, with support for system theme by default.\n\n## Installation\n\nInstall the package via npm:\n\n```bash\nnpm i theme-selector\n```\n\n### (Optional) Instant Theme Switch\n\nTo ensure the theme is applied instantly on page load (before Svelte mounts), you can add this script to the `<head>` section of your `app.html`. This is especially useful if you're using libraries like ShadCN:\n\n```html\n<script>\n\tconst theme = localStorage.getItem('theme');\n\tlet currentTheme;\n\n\tif (theme === 'system' || !theme) {\n\t\tcurrentTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n\t} else {\n\t\tcurrentTheme = theme;\n\t}\n\n\tif (currentTheme === 'dark') {\n\t\tdocument.documentElement.classList.add('dark');\n\t} else {\n\t\tdocument.documentElement.classList.remove('dark');\n\t}\n\n\tif (!theme) {\n\t\tlocalStorage.setItem('theme', 'system');\n\t}\n</script>\n```\n\n## Usage\n\nImport the `theme` store and use it in your components:\n\n```svelte\n<script>\n\timport { theme } from 'theme-selector';\n</script>\n\n<!-- $theme reflects the current theme ('light' or 'dark'). \nThe set method accepts 'light', 'dark', or 'system'. -->\n<h1>Your current theme is {$theme}</h1>\n\n<button on:click={() => theme.set('dark')}>Dark</button>\n<button on:click={() => theme.set('light')}>Light</button>\n<button on:click={() => theme.set('system')}>System</button>\n```\n\n### Custom Theme Store\n\nYou can create a new theme store using the `createThemeStore` function. This allows you to specify a callback function that will be invoked whenever the theme changes (either by system preferences or user selection):\n\n```svelte\n<script>\n\timport { createThemeStore } from 'theme-selector';\n\n\tfunction onThemeChange(theme) {\n\t\tconsole.log('Theme changed to:', theme);\n\t}\n\n\tconst theme = createThemeStore(onThemeChange);\n</script>\n\n<p>The current theme is: {$theme}</p>\n```\n\n### Default Behavior with ShadCN\n\nBy default, if no callback function is provided to `createThemeStore`, it will automatically update the `html` class to reflect the current theme.\n\n## License\n\nThis project is licensed under the MIT License.\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3897, 207],
		[3904, 28],
		[3911, 10],
		[3918, 1],
		[3925, 1],
		[3932, 2],
		[3939, 6],
		[3946, 6],
		[3953, 1],
		[3960, 6],
		[3974, 3],
		[3981, 4],
		[3995, 1],
		[4002, 8],
		[4016, 1],
		[4023, 6],
		[4030, 1],
		[4037, 11],
		[4044, 9],
		[4051, 3],
		[4065, 1],
		[4072, 3],
		[4093, 1],
		[4100, 5],
		[4107, 11],
		[4114, 4],
		[4121, 11],
		[4128, 2],
		[4135, 4]
	]
}
