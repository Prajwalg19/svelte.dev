{
	"name": "cosmo-wc",
	"description": "Creates shareable web components library with Svelte.",
	"repo_url": "https://github.com/Plortinus/cosmo",
	"authors": ["plortinus"],
	"homepage": "https://github.com/Plortinus/cosmo#readme",
	"downloads": 4,
	"updated": "2021-06-13T08:56:05.741Z",
	"tags": ["ui"],
	"github_stars": 0,
	"typescript": false,
	"version": "0.0.4",
	"svelte_range": "^3.38.2",
	"last_rune_check_version": "0.0.4",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "cosmo-wc",
				"version": "0.0.4",
				"size": 92449
			}
		],
		"dependencies": [],
		"circular": []
	},
	"legacy_svelte": false,
	"readme": "# cosmo web components library\n\n\n[![npm](https://img.shields.io/npm/v/cosmo-wc.svg)](https://www.npmjs.com/package/cosmo-wc) [![npm](https://img.shields.io/npm/dt/cosmo-wc.svg)](https://www.npmjs.com/package/cosmo-wc)\n\n## How to use this template\n\nYou can directly create a new GitHub repo from this template by selecting the **Use this template** button on GitHub.\n\nYou can also clone it locally with the following commands:\n\n```bash\nnpx degit sinedied/svelte-web-components-template#main my-component-lib\ncd my-component-lib\nnpm install # or yarn\n```\n\nYour components source code lives in `lib/` folder. Only components with the `.wc.svelte` extension will be exported as web components and available in your library. This means that you can also use regular Svelte components with the `.svelte` extension as child components for your implementation details.\n\nYou can add additional components by adding them to the `lib` folder and editing `lib/index.js`.\n\n## Testing your components\n\nYou can start a development server with:\n\n```bash\nnpm run dev\n```\n\nThen open your browser to [localhost:5000](http://localhost:5000).\n\nThis will build the demo application located in the `demo/` folder, in which you can use and test your components during development.\n\nIf you want to add unit tests, you can take a look at [Jest](https://jestjs.io) and [Jest testing library](https://github.com/testing-library/svelte-testing-library). \n\n## Building the library\n\nThe command `npm run build` will create the web components library in the `dist/` folder. It creates both a JavaScript module (`dist/index.mjs`) and a regular UMD script (`dist/index.js`).\n\nThe build is automatically called when executing `npm publish` or `npm pack` to distribute your library, thanks to the `prepublishOnly` scripts in `package.json`.\n\n## Notes and limitations\n\nThis template does not provide any web components polyfills for older browsers support. It's usually best to leave that task to the host application, hence why they're left out.\n\n### Props\n\nAny props accepted by your web component are automatically transformed to element attributes. Since camelCase or PascalCase does not work in HTML, you have to make sure to name your props in lowercase.\n\n```html\n<script>\n  export let myvalue = \"Default\";\n</script>\n```\n\n### Events\n\nThe Svelte syntax event for listening to events like `on:myevent` doesnt work with events dispatched from a Svelte web component ([#3119](https://github.com/sveltejs/svelte/issues/3119)).\n\nYou need to use a workaround for that, by creating a `CustomEvent` and dispatching it with the `composed: true` option to cross the shadow DOM boundary.\n\nHere's an example:\n\n```html\n// MyComponent.wc.svelte\n<svelte:options tag=\"my-component\" />\n<script>\n  import { get_current_component } from \"svelte/internal\";\n  \n  const component = get_current_component();\n  \n  // example function for dispatching events\n  const dispatchEvent = (name, detail) => {\n    component?.dispatchEvent(new CustomEvent(name, {\n      detail,\n      composed: true  // propagate across the shadow DOM\n    }));\n  };\n</script>\n<button on:click={() => dispatchEvent(\"test\", \"Hello!\")}>\n  Click to dispatch event\n</button>\n```\n",
	"downloads_history": [
		[3589, 4],
		[3596, 1],
		[3603, 2],
		[3610, 2],
		[3617, 2],
		[3624, 1],
		[3638, 1],
		[3645, 6],
		[3659, 6],
		[3666, 4],
		[3673, 4],
		[3687, 1],
		[3708, 7],
		[3722, 1],
		[3736, 1],
		[3750, 1],
		[3757, 1],
		[3764, 3],
		[3771, 1],
		[3778, 6],
		[3785, 1],
		[3792, 1],
		[3799, 5],
		[3806, 1],
		[3813, 1],
		[3834, 2],
		[3841, 1],
		[3848, 1],
		[3855, 23],
		[3862, 2],
		[3883, 2],
		[3890, 4],
		[3897, 4],
		[3904, 4],
		[3911, 1],
		[3925, 4],
		[3932, 1],
		[3960, 3],
		[3967, 1],
		[3988, 1],
		[3995, 4],
		[4030, 5],
		[4037, 17],
		[4044, 6],
		[4051, 1],
		[4058, 1],
		[4065, 1],
		[4093, 13],
		[4100, 2],
		[4114, 4],
		[4121, 7],
		[4128, 4]
	],
	"esm": true,
	"cjs": false
}
