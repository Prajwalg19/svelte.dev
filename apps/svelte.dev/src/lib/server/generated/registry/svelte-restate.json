{
	"name": "svelte-restate",
	"description": "Provide immutable store for Svelte with Redux Devtools integration.",
	"repo_url": "https://github.com/endenwer/svelte-restate",
	"authors": ["endenwer"],
	"homepage": "https://github.com/endenwer/svelte-restate#readme",
	"downloads": 7,
	"updated": "2022-02-15T16:34:17.365Z",
	"tags": ["miscellaneous"],
	"github_stars": 21,
	"typescript": true,
	"version": "0.1.6",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "0.1.6",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-restate",
				"version": "0.1.6",
				"size": 162286
			},
			{
				"name": "immer",
				"version": "9.0.21",
				"size": 871966
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "## Svelte Restate\n\nImmutable store for Svelte with full Typescript support and Redux Devtools integration. It is highly inspired by [re-frame](https://github.com/day8/re-frame) subscriptions(read more about signal graph and subscription layers [here](https://day8.github.io/re-frame/subscriptions/)). [Immer](https://immerjs.github.io/immer/) is used to work with immutable state.\n\n<a id=install></a>\n## Install\n\n```sh\nnpm i svelte-restate --save\n```\n\n<a id=usage></a>\n## Usage [[Demo]](https://svelte-restate-example.netlify.app/)\n\nCreate store with initial state.\n```ts\nimport { createStore } from 'svelte-restate'\n\nexport interface State {\n  isLoading\n  todos: {\n    id: number\n    completed: boolean\n    description: string\n  }[]\n}\n\nconst initState: State = {\n  isLoading: true,\n  todos: []\n}\n\nexport default createStore(initState)\n```\n\nCreate subscriptions. See more examples in documentation for [`RegRootsub`](/docs/API.md#reg-root-sub) and [`RegSub`](/docs/API.md#reg-sub).\n```ts\nimport store from './store'\n\n// register root subs\nconst isLoading = store.regRootSub(\n  'isLoading',\n  ($root) => $root.count\n)\n\nconst todos = store.regRootSub(\n  'todos',\n  ($root) => $root.todos\n)\n\n// use root subs to register derived subs\nconst completedTodos = store.regSub(\n  'completedTodos',\n  () => todos()\n  ($todos) => $todos.filter(todo => todo.completed)\n)\n\n// register sub with arguments\nconst todo = store.regSub(\n  'todo',\n  () => todos()\n  ($todos, [id]: [number]) => $todos.find(todo => todo.id === id)\n)\n\nexport default { count }\n```\n\nCreate mutations. See more examples in documentation for [`RegMut`](/docs/API.md#reg-mut).\n```ts\nimport store from './store'\n\nconst setLoading = store.regMut<boolean>(\n  'setLoading',\n  (draft, value) => draft.isLoading = value\n)\n\nconst insertTodos = store.RegMut<Todo[]>(\n  'insertTodos',\n  (draft, todos) => draft.todos = todos\n)\n\nexport default { setLoading, insertTodos }\n```\n\nUse in svelte component.\n```html\n<script>\n  import muts from './muts'\n  import subs from './subs'\n  import store from './store'\n  import { onMount } 'svelete'\n  import { fetchTodos } './api'\n\n  // subscription without arguments.\n  // To get the value use '$isLoading'\n  const isLoading = subs.isLoading()\n\n  // subscription with arguments\n  export let id: number\n  $: todo = subs.todo(id)\n\n  // use mutations\n  onMount(async () => {\n   muts.setLoading(true)\n   const todos = await fetchTodos()\n\n   // call multiple mutations within transaction\n   store.transaction(tx => [\n     muts.setIsLoading(false, tx),\n     muts.insertTodos(todos, tx)\n   ])\n  })\n</script>\n\n{# if $isLoading}\n  <div>Loading...</div>\n{:else}\n  <div>{$todo.description}</div>\n{/if}\n```\n\nConnect to Redux devtools. You can see main state, state of all active subscriptions and dispatch mutations directly from the devtools. Time travel also works. See documentation for [`connectToDevtools`](/docs/API.md#connect-to-devtools).\n```ts\nimport muts from './muts'\nimport store from './store'\n\nconnectToDevTools(store, muts)\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 29],
		[3603, 11],
		[3610, 11],
		[3617, 15],
		[3624, 1],
		[3631, 5],
		[3638, 17],
		[3645, 15],
		[3652, 13],
		[3659, 72],
		[3666, 110],
		[3673, 96],
		[3680, 34],
		[3687, 33],
		[3694, 73],
		[3701, 23],
		[3708, 38],
		[3715, 59],
		[3722, 43],
		[3729, 51],
		[3736, 51],
		[3743, 43],
		[3750, 43],
		[3757, 52],
		[3764, 54],
		[3771, 39],
		[3778, 57],
		[3785, 83],
		[3792, 109],
		[3799, 65],
		[3806, 104],
		[3813, 85],
		[3820, 113],
		[3827, 136],
		[3834, 102],
		[3841, 85],
		[3848, 79],
		[3855, 143],
		[3862, 115],
		[3869, 92],
		[3876, 122],
		[3883, 100],
		[3890, 92],
		[3897, 93],
		[3904, 113],
		[3911, 129],
		[3918, 51],
		[3925, 9],
		[3932, 2],
		[3939, 3],
		[3946, 2],
		[3953, 3],
		[3960, 2],
		[3967, 11],
		[3974, 3],
		[3981, 2],
		[3988, 1],
		[3995, 4],
		[4002, 4],
		[4009, 1],
		[4016, 1],
		[4023, 8],
		[4030, 10],
		[4037, 6],
		[4044, 19],
		[4051, 5],
		[4058, 2],
		[4065, 2],
		[4072, 1],
		[4079, 1],
		[4086, 1],
		[4093, 13],
		[4100, 11],
		[4107, 4],
		[4114, 7],
		[4121, 7],
		[4128, 3],
		[4135, 5]
	]
}
