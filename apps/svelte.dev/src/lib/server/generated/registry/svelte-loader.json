{
	"name": "svelte-loader",
	"description": "Compile Svelte components with Webpack.",
	"repo_url": "https://github.com/sveltejs/svelte-loader",
	"authors": ["nikku", "rich_harris", "conduitry", "svelte-admin", "dummdidumm"],
	"homepage": "https://github.com/sveltejs/svelte-loader#readme",
	"downloads": 55143,
	"updated": "2024-10-09T21:13:47.738Z",
	"tags": ["tooling"],
	"github_stars": 602,
	"typescript": false,
	"version": "3.2.4",
	"svelte_range": "^3.0.0 || ^4.0.0-next.0 || ^5.0.0-next.1",
	"last_rune_check_version": "3.2.4",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-loader",
				"version": "3.2.4",
				"size": 23583
			},
			{
				"name": "loader-utils",
				"version": "2.0.4",
				"size": 36329
			},
			{
				"name": "json5",
				"version": "2.2.3",
				"size": 235198
			},
			{
				"name": "big.js",
				"version": "5.2.2",
				"size": 63868
			},
			{
				"name": "emojis-list",
				"version": "3.0.0",
				"size": 53575
			},
			{
				"name": "svelte-dev-helper",
				"version": "1.1.9",
				"size": 25281
			},
			{
				"name": "svelte-hmr",
				"version": "0.14.12",
				"size": 79767
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[1, 3],
			[1, 4],
			[0, 5],
			[0, 6]
		],
		"circular": []
	},
	"readme": "> Undecided yet what bundler to use? We suggest using [SvelteKit](https://kit.svelte.dev), or Vite with [vite-plugin-svelte](https://github.com/sveltejs/vite-plugin-svelte/).\r\n\r\n# svelte-loader\r\n\r\n[![Build Status](https://travis-ci.org/sveltejs/svelte-loader.svg?branch=master)](https://travis-ci.org/sveltejs/svelte-loader)\r\n\r\nA [webpack](https://webpack.js.org) loader for [svelte](https://svelte.technology).\r\n\r\n\r\n## Install\r\n\r\n```\r\nnpm install --save svelte svelte-loader\r\n```\r\n\r\n\r\n## Usage\r\n\r\nConfigure inside your `webpack.config.js`:\r\n\r\n```javascript\r\n  ...\r\n  resolve: {\r\n    // see below for an explanation\r\n    alias: {\r\n      svelte: path.resolve('node_modules', 'svelte/src/runtime') // Svelte 3: path.resolve('node_modules', 'svelte')\r\n    },\r\n    extensions: ['.mjs', '.js', '.svelte'],\r\n    mainFields: ['svelte', 'browser', '...'],\r\n    conditionNames: ['svelte', 'browser', '...'],\r\n  },\r\n  module: {\r\n    rules: [\r\n      ...\r\n      // The following two loader entries are only needed if you use Svelte 5+ with TypeScript.\r\n      // Also make sure your tsconfig.json includes `\"target\": \"ESNext\"` in order to not downlevel syntax\r\n      {\r\n        test: /\\.svelte\\.ts$/,\r\n        use: [ \"svelte-loader\", \"ts-loader\"],\r\n      },\r\n      // This is the config for other .ts files - the regex makes sure to not process .svelte.ts files twice\r\n      {\r\n        test: /(?<!\\.svelte)\\.ts$/,\r\n        loader: \"ts-loader\",\r\n      },\r\n      {\r\n        // Svelte 5+:\r\n        test: /\\.(svelte|svelte\\.js)$/,\r\n        // Svelte 3 or 4:\r\n        // test: /\\.svelte$/,\r\n        // In case you write Svelte in HTML (not recommended since Svelte 3):\r\n        // test: /\\.(html|svelte)$/,\r\n        use: 'svelte-loader'\r\n      },\r\n      {\r\n        // required to prevent errors from Svelte on Webpack 5+, omit on Webpack 4\r\n        test: /node_modules\\/svelte\\/.*\\.mjs$/,\r\n        resolve: {\r\n          fullySpecified: false\r\n        }\r\n      }\r\n      ...\r\n    ]\r\n  }\r\n  ...\r\n```\r\n\r\nCheck out the [example project](https://github.com/sveltejs/template-webpack).\r\n\r\n### resolve.alias\r\n\r\nThe [`resolve.alias`](https://webpack.js.org/configuration/resolve/#resolvealias) option is used to make sure that only one copy of the Svelte runtime is bundled in the app, even if you are `npm link`ing in dependencies with their own copy of the `svelte` package. Having multiple copies of the internal scheduler in an app, besides being inefficient, can also cause various problems.\r\n\r\n### resolve.mainFields\r\n\r\nWebpack's [`resolve.mainFields`](https://webpack.js.org/configuration/resolve/#resolve-mainfields) option determines which fields in `package.json` are used to resolve identifiers. If you're using Svelte components installed from npm, you should specify this option so that your app can use the original component source code, rather than consuming the already-compiled version (which is less efficient).\r\n\r\n### resolve.conditionNames\r\n\r\nWebpack's [`resolve.conditionNames`](https://webpack.js.org/configuration/resolve/#resolveconditionnames) option determines which fields in the `exports` in `package.json` are used to resolve identifiers. If you're using Svelte components installed from npm, you should specify this option so that your app can use the original component source code, rather than consuming the already-compiled version (which is less efficient).\r\n\r\n### Extracting CSS\r\n\r\nIf your Svelte components contain `<style>` tags, by default the compiler will add JavaScript that injects those styles into the page when the component is rendered. That's not ideal, because it adds weight to your JavaScript, prevents styles from being fetched in parallel with your code, and can even cause CSP violations.\r\n\r\nA better option is to extract the CSS into a separate file. Using the `emitCss` option as shown below would cause a virtual CSS file to be emitted for each Svelte component. The resulting file is then imported by the component, thus following the standard Webpack compilation flow. Add [MiniCssExtractPlugin](https://github.com/webpack-contrib/mini-css-extract-plugin) to the mix to output the css to a separate file.\r\n\r\n```javascript\r\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\r\n  ...\r\n  module: {\r\n    rules: [\r\n      ...\r\n      {\r\n        test: /\\.(svelte|svelte\\.js)$/,\r\n        use: {\r\n          loader: 'svelte-loader',\r\n          options: {\r\n            emitCss: true,\r\n          },\r\n        },\r\n      },\r\n      {\r\n        test: /\\.css$/,\r\n        use: [\r\n          MiniCssExtractPlugin.loader,\r\n          {\r\n            loader: 'css-loader',\r\n            options: {\r\n              url: false, // necessary if you use url('/path/to/some/asset.png|jpg|gif')\r\n            }\r\n          }\r\n        ]\r\n      },\r\n      ...\r\n    ]\r\n  },\r\n  ...\r\n  plugins: [\r\n    new MiniCssExtractPlugin('styles.css'),\r\n    ...\r\n  ]\r\n  ...\r\n```\r\n\r\nAdditionally, if you're using multiple entrypoints, you may wish to change `new MiniCssExtractPlugin('styles.css')` for `new MiniCssExtractPlugin('[name].css')` to generate one CSS file per entrypoint.\r\n\r\nWarning: in production, if you have set `sideEffects: false` in your `package.json`, `MiniCssExtractPlugin` has a tendency to drop CSS, regardless of whether it's included in your svelte components.\r\n\r\nAlternatively, if you're handling styles in some other way and just want to prevent the CSS being added to your JavaScript bundle, use\r\n\r\n```javascript\r\n...\r\nuse: {\r\n  loader: 'svelte-loader',\r\n  options: {\r\n    compilerOptions: {\r\n      css: false\r\n    }\r\n  },\r\n},\r\n...\r\n```\r\n\r\n### Source maps\r\n\r\nJavaScript source maps are enabled by default, you just have to use an appropriate [webpack devtool](https://webpack.js.org/configuration/devtool/).\r\n\r\nTo enable CSS source maps, you'll need to use `emitCss` and pass the `sourceMap` option to the `css-loader`. The above config should look like this:\r\n\r\n```javascript\r\nmodule.exports = {\r\n    ...\r\n    devtool: \"source-map\", // any \"source-map\"-like devtool is possible\r\n    ...\r\n    module: {\r\n      rules: [\r\n        ...\r\n        {\r\n          test: /\\.css$/,\r\n          use: [\r\n            MiniCssExtractPlugin.loader,\r\n            {\r\n              loader: 'css-loader',\r\n              options: {\r\n                sourceMap: true\r\n              }\r\n            }\r\n          ]\r\n        },\r\n        ...\r\n      ]\r\n    },\r\n    ...\r\n    plugins: [\r\n      new MiniCssExtractPlugin('styles.css'),\r\n      ...\r\n    ]\r\n    ...\r\n};\r\n```\r\n\r\nThis should create an additional `styles.css.map` file.\r\n\r\n### Svelte Compiler options\r\n\r\nYou can specify additional arbitrary compilation options with the `compilerOptions` config key, which are passed directly to the underlying Svelte compiler:\r\n```js\r\n...\r\nuse: {\r\n  loader: 'svelte-loader',\r\n  options: {\r\n    compilerOptions: {\r\n      // additional compiler options here\r\n      generate: 'ssr', // for example, SSR can be enabled here\r\n    }\r\n  },\r\n},\r\n...\r\n```\r\n\r\n### Using preprocessors like TypeScript\r\n\r\nInstall [svelte-preprocess](https://github.com/sveltejs/svelte-preprocess) and add it to the loader options:\r\n\r\n```js\r\nconst sveltePreprocess = require('svelte-preprocess');\r\n...\r\nuse: {\r\n  loader: 'svelte-loader',\r\n  options: {\r\n    preprocess: sveltePreprocess()\r\n  },\r\n},\r\n...\r\n```\r\n\r\nNow you can use other languages inside the script and style tags. Make sure to install the respective transpilers and add a `lang` tag indicating the language that should be preprocessed. In the case of TypeScript, install `typescript` and add `lang=\"ts\"` to your script tags.\r\n\r\n### Hot Reload\r\n\r\n> Hot Module Reloading is currently not supported for Svelte 5+\r\n\r\nThis loader supports component-level HMR via the community supported [svelte-hmr](https://github.com/rixo/svelte-hmr) package. This package serves as a testbed and early access for Svelte HMR, while we figure out how to best include HMR support in the compiler itself (which is tricky to do without unfairly favoring any particular dev tooling). Feedback, suggestion, or help to move HMR forward is welcomed at [svelte-hmr](https://github.com/rixo/svelte-hmr/issues) (for now).\r\n\r\nConfigure inside your `webpack.config.js`:\r\n\r\n```javascript\r\n// It is recommended to adjust svelte options dynamically, by using\r\n// environment variables\r\nconst mode = process.env.NODE_ENV || 'development';\r\nconst prod = mode === 'production';\r\n\r\nmodule.exports = {\r\n  ...\r\n  module: {\r\n    rules: [\r\n      ...\r\n      {\r\n        test: /\\.(svelte|svelte\\.js)$/,\r\n        use: {\r\n          loader: 'svelte-loader',\r\n          options: {\r\n            compilerOptions: {\r\n              // NOTE Svelte's dev mode MUST be enabled for HMR to work\r\n              dev: !prod, // Default: false\r\n            },\r\n\r\n            // NOTE emitCss: true is currently not supported with HMR\r\n            // Enable it for production to output separate css file\r\n            emitCss: prod, // Default: false\r\n            // Enable HMR only for dev mode\r\n            hotReload: !prod, // Default: false\r\n            // Extra HMR options, the defaults are completely fine\r\n            // You can safely omit hotOptions altogether\r\n            hotOptions: {\r\n              // Prevent preserving local component state\r\n              preserveLocalState: false,\r\n\r\n              // If this string appears anywhere in your component's code, then local\r\n              // state won't be preserved, even when noPreserveState is false\r\n              noPreserveStateKey: '@!hmr',\r\n\r\n              // Prevent doing a full reload on next HMR update after fatal error\r\n              noReload: false,\r\n\r\n              // Try to recover after runtime errors in component init\r\n              optimistic: false,\r\n\r\n              // --- Advanced ---\r\n\r\n              // Prevent adding an HMR accept handler to components with\r\n              // accessors option to true, or to components with named exports\r\n              // (from <script context=\"module\">). This have the effect of\r\n              // recreating the consumer of those components, instead of the\r\n              // component themselves, on HMR updates. This might be needed to\r\n              // reflect changes to accessors / named exports in the parents,\r\n              // depending on how you use them.\r\n              acceptAccessors: true,\r\n              acceptNamedExports: true,\r\n            }\r\n          }\r\n        }\r\n      }\r\n      ...\r\n    ]\r\n  },\r\n  plugins: [\r\n    new webpack.HotModuleReplacementPlugin(),\r\n    ...\r\n  ]\r\n}\r\n```\r\n\r\nYou also need to add the [HotModuleReplacementPlugin](https://webpack.js.org/plugins/hot-module-replacement-plugin/). There are multiple ways to achieve this.\r\n\r\nIf you're using webpack-dev-server, you can just pass it the [`hot` option](https://webpack.js.org/configuration/dev-server/#devserverhot) to add the plugin automatically.\r\n\r\nOtherwise, you can add it to your webpack config directly:\r\n\r\n```js\r\nconst webpack = require('webpack');\r\n\r\nmodule.exports = {\r\n  ...\r\n  plugins: [\r\n    new webpack.HotModuleReplacementPlugin(),\r\n    ...\r\n  ]\r\n}\r\n```\r\n\r\n### CSS @import in components\r\n\r\nIt is advised to inline any css `@import` in component's style tag before it hits `css-loader`.\r\n\r\nThis ensures equal css behavior when using HMR with `emitCss: false` and production.\r\n\r\nInstall `svelte-preprocess`, `postcss`, `postcss-import`, `postcss-load-config`.\r\n\r\nConfigure `svelte-preprocess`:\r\n\r\n```javascript\r\nconst sveltePreprocess = require('svelte-preprocess');\r\n...\r\nmodule.exports = {\r\n  ...\r\n  module: {\r\n    rules: [\r\n      ...\r\n      {\r\n        test: /\\.(svelte|svelte\\.js)$/,\r\n        use: {\r\n          loader: 'svelte-loader',\r\n          options: {\r\n            preprocess: sveltePreprocess({\r\n              postcss: true\r\n            })\r\n          }\r\n        }\r\n      }\r\n      ...\r\n    ]\r\n  },\r\n  plugins: [\r\n    new webpack.HotModuleReplacementPlugin(),\r\n    ...\r\n  ]\r\n}\r\n...\r\n```\r\n\r\nCreate `postcss.config.js`:\r\n\r\n```javascript\r\nmodule.exports = {\r\n  plugins: [\r\n    require('postcss-import')\r\n  ]\r\n}\r\n```\r\n\r\nIf you are using autoprefixer for `.css`, then it is better to exclude emitted css, because it was already processed with `postcss` through `svelte-preprocess` before emitting.\r\n\r\n```javascript\r\n  ...\r\n  module: {\r\n    rules: [\r\n      ...\r\n      {\r\n        test: /\\.css$/,\r\n        exclude: /svelte\\.\\d+\\.css/,\r\n        use: [\r\n          MiniCssExtractPlugin.loader,\r\n          'css-loader',\r\n          'postcss-loader'\r\n        ]\r\n      },\r\n      {\r\n        test: /\\.css$/,\r\n        include: /svelte\\.\\d+\\.css/,\r\n        use: [\r\n          MiniCssExtractPlugin.loader,\r\n          'css-loader'\r\n        ]\r\n      },\r\n      ...\r\n    ]\r\n  },\r\n  ...\r\n```\r\n\r\nThis ensures that global css is being processed with `postcss` through webpack rules, and svelte component's css is being processed with `postcss` through `svelte-preprocess`.\r\n\r\n## License\r\n\r\nMIT\r\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 39939],
		[3596, 76290],
		[3603, 71251],
		[3610, 64988],
		[3617, 65925],
		[3624, 63654],
		[3631, 61802],
		[3638, 47885],
		[3645, 22710],
		[3652, 36131],
		[3659, 50504],
		[3666, 57941],
		[3673, 54624],
		[3680, 52797],
		[3687, 54239],
		[3694, 58489],
		[3701, 57227],
		[3708, 51483],
		[3715, 53381],
		[3722, 52956],
		[3729, 59608],
		[3736, 44668],
		[3743, 45549],
		[3750, 51003],
		[3757, 49493],
		[3764, 49568],
		[3771, 43619],
		[3778, 71807],
		[3785, 59291],
		[3792, 47092],
		[3799, 43207],
		[3806, 45247],
		[3813, 46665],
		[3820, 46223],
		[3827, 46298],
		[3834, 43108],
		[3841, 45898],
		[3848, 44652],
		[3855, 40323],
		[3862, 36917],
		[3869, 38736],
		[3876, 31888],
		[3883, 36175],
		[3890, 40493],
		[3897, 38483],
		[3904, 36540],
		[3911, 37934],
		[3918, 39065],
		[3925, 37445],
		[3932, 37536],
		[3939, 36998],
		[3946, 41575],
		[3953, 32484],
		[3960, 37415],
		[3967, 43399],
		[3974, 47438],
		[3981, 37881],
		[3988, 36647],
		[3995, 39651],
		[4002, 34730],
		[4009, 16299],
		[4016, 18381],
		[4023, 32614],
		[4030, 31167],
		[4037, 33712],
		[4044, 32388],
		[4051, 39150],
		[4058, 37930],
		[4065, 34213],
		[4072, 40273],
		[4079, 43807],
		[4086, 44187],
		[4093, 42445],
		[4100, 45178],
		[4107, 65217],
		[4114, 55143],
		[4121, 37424],
		[4128, 42508]
	]
}
