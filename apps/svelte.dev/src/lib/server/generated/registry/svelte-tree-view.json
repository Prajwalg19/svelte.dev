{
	"name": "svelte-tree-view",
	"description": "Display Javascript objects in a tree layout for Svelte.",
	"repo_url": "https://github.com/TeemuKoivisto/svelte-tree-view",
	"authors": ["tekk"],
	"homepage": "https://github.com/TeemuKoivisto/svelte-tree-view",
	"downloads": 2476,
	"updated": "2023-07-24T12:04:25.865Z",
	"tags": ["ui"],
	"github_stars": 24,
	"typescript": true,
	"version": "1.4.2",
	"svelte_range": ">=3",
	"kit_range": "^1.22.3",
	"last_rune_check_version": "1.4.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-tree-view",
				"version": "1.4.2",
				"size": 224062
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# [svelte-tree-view](https://github.com/TeemuKoivisto/svelte-tree-view) [![version](https://img.shields.io/npm/v/svelte-tree-view?style=flat-square)](https://www.npmjs.com/package/svelte-tree-view) [![package minified size](https://img.shields.io/bundlephobia/min/svelte-tree-view?style=flat-square&color=important)](https://bundlephobia.com/result?p=svelte-tree-view) [![package size](https://img.shields.io/bundlephobia/minzip/svelte-tree-view?style=flat-square)](https://bundlephobia.com/result?p=svelte-tree-view)\n\nLibrary to show Javascript objects in a nice tree layout. It's written in Svelte but since it compiles to pure JS it can be used anywhere (although to customize the rendered nodes you must Svelte).\n\n`npm i svelte-tree-view`\n\n### [Demo site](https://teemukoivisto.github.io/svelte-tree-view/)\n\n### [Svelte REPL](https://svelte.dev/repl/4f8c82da5eac4e868ff40193ee84e84a?version=3.44.1)\n\n## How to use\n\nThe package should work without extra setup with both SvelteKit and Vite, see examples in `packages/site` and `packages/vite-site`. Previously, at least with Rollup, you had to add a `mainFields` property with values like `['svelte', 'module', 'browser', 'main']` to ensure it was imported as a Svelte component.\n\nTo use it:\n\n```tsx\nimport TreeView from 'svelte-tree-view'\n\n...\n\n<TreeView\n  data={selectedEntry.contentDiff}\n  showLogButton\n  showCopyButton\n  valueComponent={DiffValue}\n  recursionOpts={{\n    maxDepth: 16,\n    mapChildren: mapDocDeltaChildren,\n    shouldExpandNode: () => true\n  }}\n/>\n```\n\nOr if you are not using Svelte (NOTE: if you're using TS you must install svelte as a devDependency for the types):\n\n```ts\nimport { TreeView } from 'svelte-tree-view'\n\nconst treeView = new TreeView({\n  target: document.querySelector('#mount-point') as HTMLElement,\n  props: {\n    data: {\n      a: [1, 2, 3],\n      b: new Map([\n        ['c', { d: null }],\n        ['e', { f: [9, 8, 7] }]\n      ])\n    },\n    recursionOpts: {\n      maxDepth: 4\n    }\n  }\n})\n```\n\nTo override default styles I suggest using child or element selector to get enough specificity:\n\n```svelte\n<div class=\"wrapper\">\n  <TreeView />\n</div>\n\n<style>\n  .wrapper > :global(.svelte-tree-view) {\n    ...;\n  }\n  /* OR */\n  :global(ul.svelte-tree-view) {\n    ...;\n  }\n</style>\n```\n\n## API\n\nThe full typings as copied from the source are:\n\n```ts\nexport type ValueType =\n  | 'array'\n  | 'map'\n  | 'set'\n  | 'date'\n  | 'object'\n  | 'function'\n  | 'string'\n  | 'number'\n  | 'bigint'\n  | 'boolean'\n  | 'symbol'\n  | 'null'\n  | 'undefined'\n\nexport interface TreeNode<T = any> {\n  id: string // ID generated from the path to this node eg \"[0,1,2]\"\n  index: number // Index of this node in the parent object as its values are iterated\n  key: string // Key of this node eg \"1\" for an array key or \"foo\" for an object\n  value: T // The value mapped to this key\n  depth: number\n  collapsed: boolean\n  type: ValueType\n  path: number[]\n  parentId: string | null\n  // Circularity is checked by object identity to prevent recursing the same values again\n  circularOfId: string | null\n  children: TreeNode[]\n}\n\nexport interface Base16Theme {\n  scheme?: string\n  author?: string\n  base00: string // Default Background\n  base01: string // Lighter Background (Used for status bars, line number and folding marks)\n  base02: string // Selection Background\n  base03: string // Comments, Invisibles, Line Highlighting\n  base04: string // Dark Foreground (Used for status bars)\n  base05: string // Default Foreground, Caret, Delimiters, Operators\n  base06: string // Light Foreground (Not often used)\n  base07: string // Light Background (Not often used)\n  base08: string // Variables, XML Tags, Markup Link Text, Markup Lists, Diff Deleted\n  base09: string // Integers, Boolean, Constants, XML Attributes, Markup Link Url\n  base0A: string // Classes, Markup Bold, Search Text Background\n  base0B: string // Strings, Inherited Class, Markup Code, Diff Inserted\n  base0C: string // Support, Regular Expressions, Escape Characters, Markup Quotes\n  base0D: string // Functions, Methods, Attribute IDs, Headings\n  base0E: string // Keywords, Storage, Selector, Markup Italic, Diff Changed\n  base0F: string // Deprecated, Opening/Closing Embedded Language Tags, e.g. <?php ?>\n}\n\n// As described in https://stackoverflow.com/questions/67697298/svelte-components-as-object-properties/67737182#67737182\nexport type ValueComponent = new (...args: any) => SvelteComponentTyped<{\n  node: TreeNode\n  defaultFormatter?: (val: any) => string | undefined\n}>\n\nexport interface TreeViewProps {\n  data: unknown // Data can be basically any non-primitive value\n  class?: string // Top node has 'svelte-tree-view' class by default\n  theme?: Base16Theme\n  showLogButton?: boolean\n  showCopyButton?: bool  ean\n  valueComponent?: ValueComponent // The Svelte component to replace the default value-as-string presentation\n  recursionOpts?: TreeRecursionOpts\n  // For custom formatting of the value string. Returning undefined will pass the value to the default formatter\n  valueFormatter?: (val: any, n: TreeNode) => string | undefined\n}\n\nexport interface TreeRecursionOpts {\n  maxDepth?: number // The default maxDepth is 16\n  // Quick and dirty way to prevent recursing certain object keys instead of overriding shouldExpandNode\n  omitKeys?: string[]\n  stopCircularRecursion?: boolean // Stops recursing objects already recursed\n  isCircularNode?: (n: TreeNode, iteratedValues: Map<any, TreeNode>) => boolean // For custom circularity detection magic\n  shouldExpandNode?: (n: TreeNode) => boolean // Will auto-expand or collapse values as data is provided\n  mapChildren?: (val: any, type: ValueType, parent: TreeNode) => [string, any][] | undefined // For customizing the created key-value pairs\n}\n\nexport class TreeView extends SvelteComponentTyped<TreeViewProps> {}\nexport default TreeView\n```\n\n## Theming\n\nThis library uses base16 theming, similar to react-json-tree. So basically instead of theming each type (string, number, undefined etc) separately, you use the same color for all similar values. Here's a repo that might explain it better https://github.com/chriskempson/base16\n\nThe example theme is the monokai theme from react-json-tree with changed background color. You can define your own theme or use one from for example here https://github.com/reduxjs/redux-devtools/tree/75322b15ee7ba03fddf10ac3399881e302848874/src/react/themes\n\nTo use a theme, you can either provide an object or set CSS variables (recommended).\n\nSo either\n\n```tsx\nconst theme = {\n  scheme: 'google',\n  author: 'seth wright (http://sethawright.com)',\n  base00: '#1d1f21',\n  base01: '#282a2e',\n  base02: '#373b41',\n  base03: '#969896',\n  base04: '#b4b7b4',\n  base05: '#c5c8c6',\n  base06: '#e0e0e0',\n  base07: '#ffffff',\n  base08: '#CC342B',\n  base09: '#F96A38',\n  base0A: '#FBA922',\n  base0B: '#198844',\n  base0C: '#3971ED',\n  base0D: '#3971ED',\n  base0E: '#A36AC7',\n  base0F: '#3971ED'\n}\n\n<div class=\"wrapper\">\n  <TreeView theme={theme} />\n</div>\n```\n\nor\n\n```css\n/* This is the example monokai theme */\n.wrapper {\n  --tree-view-base00: #363755;\n  --tree-view-base01: #604d49;\n  --tree-view-base02: #6d5a55;\n  --tree-view-base03: #d1929b;\n  --tree-view-base04: #b79f8d;\n  --tree-view-base05: #f9f8f2;\n  --tree-view-base06: #f7f4f1;\n  --tree-view-base07: #faf8f5;\n  --tree-view-base08: #fa3e7e;\n  --tree-view-base09: #fd993c;\n  --tree-view-base0A: #f6bf81;\n  --tree-view-base0B: #b8e248;\n  --tree-view-base0C: #b4efe4;\n  --tree-view-base0D: #85d9ef;\n  --tree-view-base0E: #be87ff;\n  --tree-view-base0F: #d6724c;\n}\n```\n\nworks.\n\n## Other\n\n[A little explanation](https://github.com/TeemuKoivisto/svelte-tree-view/blob/master/HOW.md) on the internal logic.\n\n## Caveats\n\nRendering very large trees is not fast. The same happens with say react-json-tree but I assume that by using some clever hacks you _could_ make it faster. Like VSCode fast. In general, it seems the use of recursive components is non-optimal regardless of the framework.\n\n## How to develop locally\n\nYou must have pnpm installed globally.\n\n1. `pnpm`\n2. `pnpm start`\n\nThis should start the SvelteKit app at http://localhost:5185 that hot-reloads changes to the library.\n\n## Similar libraries\n\nWhile this library was basically written from scratch, its UI and API borrows from some existing libraries.\n\n- [react-json-tree](https://github.com/reduxjs/redux-devtools/tree/master/packages/react-json-tree)\n- [react-json-view](https://github.com/mac-s-g/react-json-view)\n- [svelte-json-tree](https://github.com/tanhauhau/svelte-json-tree)\n\n## Contributing\n\nPRs & issues are welcome!\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 1854],
		[3603, 1649],
		[3610, 950],
		[3617, 923],
		[3624, 909],
		[3631, 1088],
		[3638, 767],
		[3645, 446],
		[3652, 722],
		[3659, 1481],
		[3666, 1519],
		[3673, 989],
		[3680, 1417],
		[3687, 1371],
		[3694, 1281],
		[3701, 1499],
		[3708, 1001],
		[3715, 1258],
		[3722, 1260],
		[3729, 1138],
		[3736, 1038],
		[3743, 1192],
		[3750, 1200],
		[3757, 1369],
		[3764, 1239],
		[3771, 1175],
		[3778, 1209],
		[3785, 1321],
		[3792, 1127],
		[3799, 1227],
		[3806, 1212],
		[3813, 1543],
		[3820, 1164],
		[3827, 994],
		[3834, 1178],
		[3841, 1110],
		[3848, 1700],
		[3855, 3094],
		[3862, 6511],
		[3869, 1739],
		[3876, 1887],
		[3883, 2119],
		[3890, 2230],
		[3897, 2090],
		[3904, 2657],
		[3911, 2506],
		[3918, 2374],
		[3925, 2655],
		[3932, 2350],
		[3939, 2134],
		[3946, 2724],
		[3953, 2704],
		[3960, 2704],
		[3967, 2647],
		[3974, 3154],
		[3981, 2974],
		[3988, 2840],
		[3995, 3244],
		[4002, 2838],
		[4009, 2356],
		[4016, 3277],
		[4023, 3828],
		[4030, 3336],
		[4037, 4011],
		[4044, 2820],
		[4051, 2842],
		[4058, 3191],
		[4065, 2716],
		[4072, 2968],
		[4079, 2777],
		[4086, 3913],
		[4093, 3661],
		[4100, 3734],
		[4107, 2500],
		[4114, 2476],
		[4121, 2695],
		[4128, 2288],
		[4135, 1829]
	],
	"esm": true,
	"cjs": true
}
