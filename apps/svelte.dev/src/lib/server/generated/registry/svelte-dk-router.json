{
	"name": "svelte-dk-router",
	"description": "Implement efficient, easy-to-use routing for Svelte applications.",
	"repo_url": "https://github.com/Daniel-Knights/svelte-dk-router",
	"authors": ["daniel_knights"],
	"homepage": "https://github.com/Daniel-Knights/svelte-dk-router#readme",
	"downloads": 35,
	"updated": "2021-02-04T15:18:03.638Z",
	"tags": ["router"],
	"github_stars": 1,
	"typescript": true,
	"version": "4.0.17",
	"svelte_range": "^3.31.2",
	"last_rune_check_version": "4.0.17",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-dk-router",
				"version": "4.0.17",
				"size": 47453
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-dk-router\n\n[![npm](https://img.shields.io/npm/v/svelte-dk-router.svg)](https://www.npmjs.com/package/svelte-dk-router)\n[![svelte](https://img.shields.io/badge/svelte-3.x-red)](https://svelte.dev/)\n\n> An efficient, easy-to-use router for Svelte\n\n-   [Installation](#installation)\n-   [Quick Start](#quick-start)\n-   [API](#api)\n    -   [setRoutes](#setroutes)\n    -   [SView](#sview)\n    -   [SLink](#slink)\n    -   [route](#route)\n    -   [routeStore](#routestore)\n    -   [routeChart](#routechart)\n    -   [routeChartStore](#routechartstore)\n    -   [routeProps](#routeprops)\n    -   [push](#push)\n    -   [replace](#replace)\n    -   [beforeEach](#beforeeach)\n    -   [afterEach](#aftereach)\n    -   [setQuery](#setquery)\n    -   [setParams](#setparams)\n    -   [location properties](#location-properties)\n    -   [router-active](#router-active)\n\n## Installation\n\n```bash\nnpm i svelte-dk-router\n```\n\n_or..._\n\n```\nyarn add svelte-dk-router\n```\n\n## Quick Start\n\nFirst set your routes:\n\n```js\nimport { setRoutes } from 'svelte-dk-router'\nimport home from './views/home.svelte'\nimport about from './views/about.svelte'\nimport origins from './views/nested/origins.svelte'\nimport future from './views/nested/future.svelte'\nimport more from './views/nested/more.svelte'\nimport blog from './views/blog.svelte'\nimport fallback from './views/fallback.svelte'\n\nconst routes = [\n    {\n        name: 'Home',\n        // Update page title\n        title: 'Home',\n        path: '/',\n        component: home,\n        meta: {\n            name: 'dan'\n        }\n    },\n    {\n        // If no name passed,\n        // defaults to components' name\n        title: 'About',\n        path: '/about',\n        component: about,\n        children: [\n            {\n                name: 'Default About',\n                // Pass an empty path to display a default child\n                path: '',\n                component: future,\n                children: [\n                    {\n                        title: 'More | About',\n                        // Full-path: /about/more\n                        path: '/more',\n                        component: more\n                    }\n                ]\n            },\n            {\n                title: 'Origins | About',\n                path: '/origins',\n                component: origins,\n                children: [\n                    {\n                        name: 'More About',\n                        title: 'More | About',\n                        // Full-path: /about/origins/more\n                        path: '/more',\n                        component: more\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        title: 'Blog',\n        // Named-params are specified with a colon\n        path: '/blog/:id/:name',\n        component: blog\n    },\n    // Define your fallback last\n    // Must have a path of '(*)'\n    {\n        name: 'Fallback',\n        title: '404',\n        path: '(*)',\n        component: fallback\n    }\n]\n\nsetRoutes(routes)\n// Or, for hash-based routing:\nsetRoutes(routes, true)\n```\n\nThen, use the view component:\n\n```js\n<script>\n    import { SView } from 'svelte-dk-router';\n</script>\n\n<SView />\n```\n\nLinks to navigate:\n\n```js\n<script>\n    import { SLink } from 'svelte-dk-router';\n\n    let params = { id: '1', name: 'dan' };\n    let query = { id: '1', name: 'dan' };\n    let props = { some: 'extra information' };\n</script>\n\n<SLink name={'Home'}>Home</SLink>\n// Using props allows you to pass any data to the next page\n<SLink path={'/about'} {query} {props}>About</SLink>\n<SLink path={'/blog'} {params} replace={true}>Blog</SLink>\n// Navigate to a nested route\n<SLink name={'More About'}>More Info</SLink>\n// Full paths are also supported\n<SLink path={'/about/origins/more'}>More Info</SLink>\n```\n\nLastly, don't forget to set your Rollup config to handle SPA's with `-s`:\n\n```json\n\"scripts\": {\n    ...\n    \"start\": \"sirv public -s\",\n}\n```\n\n## API\n\n**NOTE:** All navigations are asynchronous.\n\n#### <a id=\"setroutes\"></a>`setRoutes(routes: array[object], hashMode?: boolean)`\n\nSet your routes and optionally set to `hashMode` (prepends all routes with `/#`).\n\nIf no `name` is set for a route, the components' name is used instead.\n\n#### <a id=\"sview\"></a>`<SView />`\n\nThe main view for your routes.\n\nYou can nest any number of views within your set components.\n\n#### <a id=\"slink\"></a>`<SLink />`\n\nLink to each route. `name` _or_ `path` are required, optional `query`, `params` (if defined), `props` and `replace`.\n\nDispatches a `navigation` event which returns an object with the success status and, if successful, the route being navigated to, else the error which was thrown.\n\n`replace` defaults to `false`, meaning `pushState` is used instead of `replaceState`.\n\n**Example:**\n\n```js\n<SLink\n    name={string}\n    path={string}\n    query={object}\n    params={object}\n    props={any}\n    replace={boolean}\n    on:navigation={e => console.log(e.detail)} // e.detail = result\n>\n    Slot for any link content\n</SLink>\n```\n\n#### `route`\n\nAn object containing all information on the current route.\n\n**Example:**\n\n```js\n{\n    component: class Home,\n    // An array of route-names matching the current path\n    crumbs: [\"Home\"],\n    // Current route-depth\n    depth: 1,\n    fullPath: \"/\",\n    fullRegex: /^\\/?$/i,\n    meta: { name: \"dan\" },\n    name: \"Home\",\n    path: \"/\",\n    query: { id: \"1\" },\n    regex: /^\\/?$/i,\n    rootPath: \"/\",\n    title: \"Home\"\n}\n```\n\n#### `routeStore`\n\nA readable Svelte store which, through the `.subscribe` method, returns the current route whenever it's updated.\n\n#### `routeChart`\n\nAn object containing a chart of all routes from the parent-route, down to the current route.\n\n**Example:**\n\n```bash\n// Navigating to '/about' displays the default child route\n1: {title: \"About\", path: \"/about\", children: Array(2), name: \"About\", component: ƒ, …}\n2: {name: \"Default About\", path: \"\", children: Array(1), parent: {…}, component: ƒ, …}\n```\n\n#### `routeChartStore`\n\nA readable Svelte store which, through the `.subscribe` method, returns the current route-chart whenever it's updated.\n\n#### `routeProps`\n\nA variable containing any data passed as props through [`<SLink />`](#slink), [`push()`](#push) or [`replace()`](#replace).\n\nResets to `null` on route change.\n\n#### <a id=\"push\"></a>`push(identifier: string, routeData?: object): current route`\n\nProgrammatically changes the route using `window.history.pushState()`.\n\n`identifier` has to be the name _or_ path of a route.\n\nReturns a promise which can be chained:\n\n```js\nawait push('/')\n    .then(newRoute =>  /* Resolved */)\n    .catch(err =>  /* Rejected */);\n```\n\nAvailable properties you can pass:\n\n```js\nawait push('Blog', {\n    params: { id: '1', name: 'dan' },\n    query: { postTitle: 'how-to-use-svelte-dk-router' },\n    props: { post: blogPost }\n})\n```\n\n#### <a id=\"replace\"></a>`replace(identifier: string, routeData?: object): current route`\n\nThe same as `push()`, except, uses `window.history.replaceState()` instead.\n\n#### <a id=\"beforeeach\"></a>`beforeEach((to, from, setProps) => {})`\n\nNavigation guard to run _before_ each route-change.\n\n`to` contains all data for the route navigating to, `from` all data of the current route.\n\n`setProps` allows you to set the value of [`routeProps`](#routeprops) (`props` in `afterEach`).\n\n**Note:** Props can only be set **once per navigation**.\n\nIf `async`/`await` is used, **the callback will be `await`ed before navigating**.\n\nIf a redirect is initiated, the original navigation is cancelled and replaced with the redirect.\n\nTo cancel any navigation, return `false`.\n\n**Note:** Set your navigation-guards _before_ you call [`setRoutes`](#setroutes), else, they won't run on page-load.\n\n#### <a id=\"aftereach\"></a>`afterEach((to, from, props) => {})`\n\nNavigation guard to run _after_ each route-change.\n\n`to` contains all data for the route navigated to, `from` all data of the previous route.\n\n`props` is essentially an alias for the [`routeProps`](#routeprops) import.\n\n**Note:** Set your navigation-guards _before_ you call [`setRoutes`](#setroutes), else, they won't run on page-load.\n\n#### <a id=\"setquery\"></a>`setQuery(query: object, update?: boolean, replace?: boolean): current route`\n\nProgrammatically set query params.\n\nIf `update` is set to `true`, replaces/adds to existing query.\n\nDefaults to `window.history.replaceState`, if `replace` is set to false, uses `window.history.pushState` instead.\n\nReturns a promise which resolves with the updated route data.\n\n**Example:**\n\n```js\nawait setQuery({ new: 'query' })\n    .then(updatedRoute => /* Resolved */)\n    .catch(err => /* Rejected */);\n```\n\n#### <a id=\"setparams\"></a>`setParams(params: object, replace?: boolean): current route`\n\nProgrammatically update named-params. Params must be correctly defined for the current route.\n\nDefaults to `window.history.replaceState`, if `replace` is set to false, uses `window.history.pushState` instead.\n\nReturns a promise which resolves with the updated route data.\n\n#### `location` properties\n\nYou can also import variables for each property of `window.location`:\n\n```js\nimport {\n    hash,\n    host,\n    hostname,\n    href,\n    origin,\n    pathname,\n    port,\n    protocol,\n    search\n} from 'svelte-dk-router'\n```\n\nThese variables update on each route change, ensuring simplicity and parity throughout your application.\n\n#### `.router-active`\n\nAny `<SLink />` which matches the current-route/exists in the current-route heirarchy, has the class `router-active` applied.\n\nIn the spirit of a11y, the attribute `aria-current=\"page\"` is also set using this method.\n\n---\n\nContributions welcome.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 95],
		[3603, 92],
		[3610, 93],
		[3617, 3],
		[3624, 6],
		[3631, 2],
		[3638, 1],
		[3645, 3],
		[3652, 5],
		[3659, 2],
		[3666, 100],
		[3673, 52],
		[3680, 5],
		[3687, 6],
		[3694, 3],
		[3701, 7],
		[3708, 48],
		[3715, 1],
		[3722, 11],
		[3729, 96],
		[3736, 10],
		[3743, 2],
		[3750, 93],
		[3757, 3],
		[3764, 43],
		[3771, 52],
		[3778, 46],
		[3785, 1],
		[3792, 4],
		[3799, 4],
		[3806, 10],
		[3827, 1],
		[3834, 4],
		[3841, 8],
		[3848, 25],
		[3855, 468],
		[3862, 11],
		[3869, 6],
		[3876, 6],
		[3883, 6],
		[3890, 96],
		[3897, 96],
		[3904, 9],
		[3911, 95],
		[3918, 5],
		[3925, 6],
		[3932, 5],
		[3939, 9],
		[3946, 4],
		[3953, 1],
		[3960, 4],
		[3967, 4],
		[3974, 14],
		[3981, 7],
		[3988, 94],
		[4002, 1],
		[4009, 1],
		[4016, 1],
		[4023, 2],
		[4030, 97],
		[4037, 96],
		[4044, 6],
		[4051, 1],
		[4058, 1],
		[4065, 2],
		[4093, 13],
		[4100, 94],
		[4107, 20],
		[4114, 35],
		[4121, 35],
		[4128, 41]
	]
}
