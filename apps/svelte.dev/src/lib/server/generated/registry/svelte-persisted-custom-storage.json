{
	"name": "svelte-persisted-custom-storage",
	"description": "Persist Svelte store data to local storage, supports multiple tabs.",
	"repo_url": "https://github.com/pfaciana/svelte-persisted-store",
	"authors": ["pfaciana"],
	"homepage": "https://github.com/pfaciana/svelte-persisted-store#readme",
	"downloads": 5,
	"updated": "2024-02-19T10:02:55.939Z",
	"tags": ["miscellaneous"],
	"github_stars": 0,
	"typescript": true,
	"version": "0.10.2",
	"svelte_range": "^3.48.0 || ^4.0.0 || ^5.0.0-next.0",
	"last_rune_check_version": "0.10.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-persisted-custom-storage",
				"version": "0.10.2",
				"size": 23929
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-persisted-custom-storage\n\nA Svelte store that persists to local storage. Supports changes across multiple tabs.\n\nThis is a fork of `joshnuss/svelte-persisted-store`. It is backwards compatible with the original package, but adds the ability to specify a custom storage option. This is similar to how the original package allows you to specify a custom serializer (like `devalue` instead of JSON). See more in the options secton below.\n\n## Installation\n\n```bash\nnpm install svelte-persisted-custom-storage\n```\n\n## Usage\n\nDefine the store:\n\n```javascript\nimport { persisted } from 'svelte-persisted-store'\n\n// First param `preferences` is the local storage key.\n// Second param is the initial value.\nexport const preferences = persisted('preferences', {\n  theme: 'dark',\n  pane: '50%',\n  ...\n})\n```\n\nThen when you want to use the store:\n\n```javascript\nimport { get } from 'svelte/store'\nimport { preferences } from './stores'\n\npreferences.subscribe(...) // subscribe to changes\npreferences.update(...) // update value\npreferences.set(...) // set value\nget(preferences) // read value\n$preferences // read value with automatic subscription\n```\n\nYou can also optionally set the `serializer`, `storage` and `onError` type:\n\n```javascript\nimport * as devalue from 'devalue'\n\n// third parameter is options.\nexport const preferences = persisted('local-storage-key', 'default-value', {\n  serializer: devalue, // defaults to `JSON`\n  storage: 'session', // 'session' for sessionStorage, defaults to 'local'\n  syncTabs: true // choose wether to sync localStorage across tabs, default is true\n  onError: (e) => {/* Do something */} // Defaults to console.error with the error object\n})\n```\n\nAs the library will swallow errors encountered when reading from browser storage it is possible to specify a custom function to handle the error. Should the swallowing not be desirable, it is possible to re-throw the error like the following example (not recommended):\n\n```javascript\nexport const preferences = persisted('local-storage-key', 'default-value', {\n  onError: (e) => {\n    throw e\n  }\n})\n```\n\n### New! Custom Storage\n\n```javascript\n// Custom storage example\nconst CustomStorage = {\n  setItem: function(key: string, value: string): void {\n    // Your custom logic here to save/store the stringified value...\n    // NOTE: value is the serializer.stringify value\n  },\n  getItem: function(key: string): string {\n    // Your custom logic here to get/retrieve the stringified value...\n    // NOTE: the returned value will be passed to the serializer.parse\n    return stringifiedValue\n  },\n  // This a required method for the custom storage to work\n  // It is a minor quirk to be compatible with the original library \n  // The name is arbitrary and can be anything, but it is best to avoid using 'local' and 'session'\n  // since those are the keys used for localStorage and sessionStorage\n  // You MUST define the name of the custom storage like this...\n  valueOf: () => 'customKey'\n}\n\nexport const preferences = persisted('local-storage-key', 'default-value', {\n  storage: CustomStorage\n})\n```\n\n## License\n\nMIT\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3701, 107],
		[3708, 9],
		[3715, 5],
		[3722, 4],
		[3729, 3],
		[3750, 2],
		[3757, 3],
		[3771, 1],
		[3778, 4],
		[3792, 1],
		[3799, 3],
		[3806, 3],
		[3820, 1],
		[3834, 11],
		[3848, 2],
		[3876, 1],
		[3890, 2],
		[3897, 1],
		[3911, 1],
		[3925, 1],
		[3939, 1],
		[3946, 1],
		[3953, 1],
		[3960, 1],
		[3967, 2],
		[3974, 1],
		[3981, 1],
		[3988, 1],
		[3995, 1],
		[4016, 1],
		[4030, 2],
		[4037, 7],
		[4044, 9],
		[4051, 1],
		[4065, 2],
		[4093, 1],
		[4100, 6],
		[4107, 1],
		[4114, 5],
		[4121, 6],
		[4128, 3]
	]
}
