{
	"name": "svelte-accessible-dialog",
	"description": "Create accessible dialog components for Svelte apps.",
	"repo_url": "https://github.com/reecelucas/svelte-accessible-dialog",
	"authors": ["reecelucas"],
	"homepage": "https://github.com/reecelucas/svelte-accessible-dialog#readme",
	"downloads": 343,
	"updated": "2021-04-14T14:02:34.803Z",
	"tags": ["ui"],
	"github_stars": 27,
	"typescript": false,
	"version": "2.1.3",
	"svelte_range": "^3.20.1",
	"last_rune_check_version": "2.1.3",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-accessible-dialog",
				"version": "2.1.3",
				"size": 103220
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-accessible-dialog\n\nAn accessible dialog component for Svelte apps. [Demo](https://svelte.dev/repl/6c6729de07b04cba8ea3fd413c013137).\n\n[![Coverage Status](https://coveralls.io/repos/github/reecelucas/svelte-accessible-dialog/badge.svg?branch=master)](https://coveralls.io/github/reecelucas/svelte-accessible-dialog?branch=master)\n[![Build Status](https://travis-ci.org/reecelucas/svelte-accessible-dialog.svg?branch=master)](https://travis-ci.org/reecelucas/svelte-accessible-dialog)\n![npm bundle size](https://img.shields.io/bundlephobia/minzip/svelte-accessible-dialog.svg)\n![npm](https://img.shields.io/npm/v/svelte-accessible-dialog.svg)\n![GitHub](https://img.shields.io/github/license/reecelucas/svelte-accessible-dialog.svg)\n\n* [Installation](#installation)\n* [Usage](#usage)\n* [Styling](#styling)\n* [Props](#props)\n* [Accessibility](#accessibility)\n* [Configuring webpack](#configuring-webpack)\n* [Tests](#tests)\n* [LICENSE](#license)\n\n## Installation\n\n```bash\nnpm install svelte-accessible-dialog\n```\n\n## Usage\n\n### Basic\n\n```html\n<script>\n  import { DialogOverlay, DialogContent } from 'svelte-accessible-dialog';\n\n  let isOpen;\n\n  const open = () => {\n    isOpen = true;\n  };\n\n  const close = () => {\n    isOpen = false;\n  };\n</script>\n\n<button on:click={open}>Open Dialog</button>\n\n<DialogOverlay {isOpen} onDismiss={close}>\n  <DialogContent aria-label=\"Announcement\">\n    <button on:click={close}>Close</button>\n    <p>I am a dialog</p>\n  </DialogContent>\n</DialogOverlay>\n```\n\n### Setting Initial Focus\n\nBy default, the first focusable element will receive focus when the dialog opens, but you can provide an element to focus instead.\n\n```html\n<script>\n  import { DialogOverlay, DialogContent } from 'svelte-accessible-dialog';\n\n  let isOpen;\n  let initialFocusElement;\n\n  const open = () => {\n    isOpen = true;\n  };\n\n  const close = () => {\n    isOpen = false;\n  };\n</script>\n\n<button on:click={open}>Open Dialog</button>\n\n<DialogOverlay {isOpen} {initialFocusElement} onDismiss={close}>\n  <DialogContent aria-label=\"Announcement\">\n    <button on:click={close}>Close</button>\n    <label>\n      Name: <input type=\"text\" bind:this={initialFocusElement} />\n    </label>\n    <p>I am a dialog</p>\n  </DialogContent>\n</DialogOverlay>\n```\n\n### Setting Return Focus\n\nBy default, the element that invoked the dialog will receive focus when the dialog closes, but you can provide an element to focus instead.\n\nSee the [WAI-ARIA authoring practices](https://www.w3.org/TR/wai-aria-practices-1.2#keyboard-interaction-7) for more detail about when you might want to do this.\n\n```html\n<script>\n  import { DialogOverlay, DialogContent } from 'svelte-accessible-dialog';\n\n  let isOpen;\n  let returnFocusElement;\n\n  const open = () => {\n    isOpen = true;\n  };\n\n  const close = () => {\n    isOpen = false;\n  };\n</script>\n\n<button on:click={open}>Open Dialog</button>\n<button bind:this={returnFocusElement}>I focus on close</button>\n\n<DialogOverlay {isOpen} {returnFocusElement} onDismiss={close}>\n  <DialogContent aria-label=\"Announcement\">\n    <button on:click={close}>Close</button>\n    <p>I am a dialog</p>\n  </DialogContent>\n</DialogOverlay>\n```\n\n### Legacy Support for aria-modal\n\n`DialogContent` has the `aria-modal` attribute. This indicates to screen readers that only content contained within the dialog should be accessible to the user. Modern screen readers respect this attribute, but you can enable a [legacy workaround](#hiding-page-content-from-screen-readers) if you require deeper support.\n\nSee the [WAI-ARIA authoring practices](https://www.w3.org/TR/wai-aria-practices-1.2#dialog_roles_states_props) for more detail.\n\n```html\n<script>\n  import { DialogOverlay, DialogContent } from 'svelte-accessible-dialog';\n\n  let isOpen;\n\n  const open = () => {\n    isOpen = true;\n  };\n\n  const close = () => {\n    isOpen = false;\n  };\n</script>\n\n<button on:click={open}>Open Dialog</button>\n\n<DialogOverlay {isOpen} ariaModalLegacy={true} onDismiss={close}>\n  <DialogContent aria-label=\"Announcement\">\n    <button on:click={close}>Close</button>\n    <p>I am a dialog</p>\n  </DialogContent>\n</DialogOverlay>\n```\n\n## Styling\n\n### :global\n\n```html\n<style>\n  :global([data-svelte-dialog-overlay].overlay) {\n    z-index: 10;\n  }\n\n  :global([data-svelte-dialog-content].content) {\n    border: 2px solid #000;\n  }\n</style>\n\n<DialogOverlay class=\"overlay\">\n  <DialogContent class=\"content\">\n    <p>I am a dialog</p>\n  </DialogContent>\n</DialogOverlay>\n```\n\n### Inline Styles\n\n```html\n<DialogOverlay style=\"z-index: 10\">\n  <DialogContent style=\"border: 2px solid #000\">\n    <p>I am a dialog</p>\n  </DialogContent>\n</DialogOverlay>\n```\n\n## Props\n\n### DialogOverlay\n\nMust render `DialogContent`. Any props not listed below will be spread onto the underlying `div`.\n\n| Prop                  | Type        | Required | Description |\n|-----------------------|-------------|----------|-------------|\n| `isOpen`              | Boolean     | Yes      |   Controls whether the dialog is open or not. |\n| `onDismiss`           | () => void  | Yes      |   This function is called whenever the user hits \"Escape\" or clicks outside the dialog. The dialog must be closed on `onDismiss`.            |\n| `initialFocusElement` | HTMLElement | No       |    The element that will receive focus when the dialog is open. Defaults to the first focusable element.             |\n| `returnFocusElement`  | HTMLElement | No       |  The element that will receive focus when the dialog closes. Defaults to the element that invoked the dialog.            |\n| `ariaModalLegacy`     | Boolean     | No       |  Enables a fallback for the `aria-modal` attribute. When `true`, all content outside of the active dialog will have the `aria-hidden` and `inert` attributes set to `\"true\"`.        |\n\n### DialogContent\n\nMust be a child of `DialogOverlay`. Element props will be spread onto the underlying `div`.\n\n## Accessibility\n\nWAI-ARIA: <https://www.w3.org/TR/wai-aria-practices-1.2/#dialog_modal>\n\n### Keyboard Accessibility\n\n| key       | action               |\n|-----------|----------------------|\n| `Escape`  | Dismisses the dialog |\n\n### Tabbable Elements\n\nIt's recommended to have at least one tabbable element in the `DialogContent`. Ideally, the first element in the dialog should be a close button. If no tabbable elements are found, the dialog content element itself will receive focus.\n\n### Hiding Page Content from Screen Readers\n\nUntil fairly recently, keeping a screen reader within an active dialog was difficult. A focus trap prevents focus from leaving a dialog, but does nothing to stop a wandering virtual cursor. A common solution to this problem was to set the `aria-hidden` and `inert` attributes on all elements outside of the active dialog.\n\n[ARIA 1.1](https://www.w3.org/TR/wai-aria-1.1/) introduced the `aria-modal` attribute. `aria-modal` indicates to screen readers that only content contained within a dialog with `aria-modal=\"true\"` should be accessible to the user. Modern screen readers respect this attribute, so `svelte-accessible-dialog` does not implement the legacy workaround by default.\n\nIf support for `aria-modal` is inadequate for your app, you can pass `ariaModalLegacy={true}` to `DialogOverlay` to enable the legacy workaround.\n\n### Labelling\n\nA dialog needs to be properly labelled to provide context for users that rely on assistive technology. If a dialog is announced to the user without a label, it can be confusing and difficult to navigate.\n\nThere are two general approaches to labelling: `aria-label` and `aria-labelledby`. If the text is visible on the screen, you should provide the label's HTML element with a unique `id` attribute. That `id` is then given to an `aria-labelledby` attribute on the `DialogContent`. With this context, the screen reader will announce whatever text is nested inside that ID'd markup as the title for the Dialog.\n\nIf a design doesn't include a visible label on the screen, you need to provide an `aria-label` prop on the `DialogContent` instead.\n\n#### aria-label\n\n```html\n<DialogContent aria-label=\"Cookie notice\">\n  <p>We use cookies to improve your website experience</p>\n  <button>Not interested</button>\n  <button>Ok, thanks</button>\n</DialogContent>\n```\n\n#### aria-labelledby\n\n```html\n<DialogContent aria-labelledby=\"cookie-dialog-title\">\n  <h2 id=\"cookie-dialog-title\">Cookie Notice</h2>\n  <p>We use cookies to improve your website experience</p>\n  <button>Not interested</button>\n  <button>Ok, thanks</button>\n</DialogContent>\n```\n\n## Z-index\n\n`DialogOverlay` does not set a `z-index`. It depends on DOM order to be on top of the page content (it's inserted at the end of the document when it's opened). If you're fighting `z-index` wars, make sure to add a `z-index` to `DialogOverlay`.\n\n## Configuring webpack\n\nIf you're using webpack with [svelte-loader](https://github.com/sveltejs/svelte-loader), make sure to add `\"svelte\"` to `resolve.mainFields` in your webpack config. This ensures that webpack imports the uncompiled components (`src/index.js`) rather than the compiled version (`dist/index.mjs`), which is more efficient.\n\nIf you're using Rollup with [rollup-plugin-svelte](https://github.com/sveltejs/rollup-plugin-svelte), this will happen automatically.\n\n## Tests\n\nTests use [Jest](https://jestjs.io/) and [svelte-testing-library](https://testing-library.com/docs/svelte-testing-library/intro).\n\n```bash\ngit clone git@github.com:reecelucas/svelte-accessible-dialog.git\ncd svelte-accessible-dialog\nyarn\nyarn test\n```\n\n## LICENSE\n\n[MIT](./LICENSE)\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 239],
		[3596, 756],
		[3603, 595],
		[3610, 562],
		[3617, 492],
		[3624, 497],
		[3631, 435],
		[3638, 518],
		[3645, 187],
		[3652, 504],
		[3659, 546],
		[3666, 518],
		[3673, 609],
		[3680, 746],
		[3687, 468],
		[3694, 439],
		[3701, 550],
		[3708, 662],
		[3715, 477],
		[3722, 497],
		[3729, 548],
		[3736, 266],
		[3743, 250],
		[3750, 192],
		[3757, 238],
		[3764, 253],
		[3771, 216],
		[3778, 211],
		[3785, 177],
		[3792, 226],
		[3799, 230],
		[3806, 170],
		[3813, 138],
		[3820, 237],
		[3827, 161],
		[3834, 198],
		[3841, 251],
		[3848, 108],
		[3855, 87],
		[3862, 108],
		[3869, 39],
		[3876, 75],
		[3883, 158],
		[3890, 166],
		[3897, 140],
		[3904, 199],
		[3911, 262],
		[3918, 236],
		[3925, 148],
		[3932, 166],
		[3939, 232],
		[3946, 209],
		[3953, 220],
		[3960, 191],
		[3967, 159],
		[3974, 361],
		[3981, 438],
		[3988, 405],
		[3995, 250],
		[4002, 332],
		[4009, 308],
		[4016, 398],
		[4023, 344],
		[4030, 338],
		[4037, 220],
		[4044, 332],
		[4051, 208],
		[4058, 157],
		[4065, 124],
		[4072, 160],
		[4079, 241],
		[4086, 368],
		[4093, 313],
		[4100, 622],
		[4107, 488],
		[4114, 343],
		[4121, 386],
		[4128, 395]
	]
}
