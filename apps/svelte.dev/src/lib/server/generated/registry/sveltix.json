{
	"name": "sveltix",
	"description": "Manage complex stores in Svelte applications.",
	"repo_url": "https://github.com/SpongeBed81/sveltix",
	"authors": ["spongebed"],
	"homepage": "https://github.com/SpongeBed81/sveltix#readme",
	"downloads": 8,
	"updated": "2023-07-03T19:42:31.532Z",
	"tags": ["miscellaneous"],
	"github_stars": 20,
	"typescript": true,
	"version": "0.0.5",
	"svelte_range": "^4.0.0",
	"kit_range": "^1.20.4",
	"last_rune_check_version": "0.0.5",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "sveltix",
				"version": "0.0.5",
				"size": 5814
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# sveltix\n\nBetter way to manage your complex stores in Svelte.\n\n## Why?\n\nEven though Svelte has a great store system it is very hard to work with complex data with it. Sveltix solves this issue by providing a flexible API like Pinia which is integrated with Svelte stores, automaticly giving you the flexibility out of the box.\n\n## Usage\n\n**Basic usage**\n\n```html\n<script>\n  import { sveltix } from \"sveltix\";\n\n  const newStore = sveltix({\n    state: () => ({\n     value: 1\n    })\n  });\n\n  const useStore = newStore.useStore();\n</script>\n\n<button\n  on:click={() => newStore.value++}>count is {$useStore.value}\n</button>\n```\n\n**Custom functions**\n\n```html\n<script>\n  import { sveltix } from \"sveltix\";\n\n  const newStore = sveltix({\n    state: () => ({\n      value: 1,\n    }),\n    actions: {\n      increment() {\n        this.value++;\n      },\n    },\n  });\n\n  const useStore = newStore.useStore();\n</script>\n\n<button on:click={() => newStore.increment()}>count is {$useStore.value}</button>\n```\n\n## Note\n\nI'm currently working on implementing getters and better type declarations. Pull requests are also open ðŸ˜…\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 9],
		[3603, 7],
		[3610, 5],
		[3617, 1],
		[3645, 3],
		[3652, 5],
		[3666, 8],
		[3673, 2],
		[3680, 1],
		[3694, 1],
		[3715, 1],
		[3722, 2],
		[3729, 1],
		[3743, 3],
		[3750, 3],
		[3757, 1],
		[3764, 18],
		[3771, 60],
		[3778, 13],
		[3785, 1],
		[3792, 3],
		[3799, 1],
		[3806, 1],
		[3813, 1],
		[3820, 17],
		[3827, 16],
		[3834, 23],
		[3841, 38],
		[3848, 26],
		[3855, 10],
		[3862, 2],
		[3869, 2],
		[3876, 5],
		[3883, 1],
		[3890, 8],
		[3897, 15],
		[3904, 16],
		[3911, 6],
		[3918, 25],
		[3925, 12],
		[3932, 9],
		[3939, 19],
		[3946, 1],
		[3960, 12],
		[3967, 24],
		[3974, 1],
		[3988, 1],
		[3995, 1],
		[4002, 3],
		[4009, 6],
		[4016, 4],
		[4023, 25],
		[4030, 24],
		[4037, 33],
		[4044, 18],
		[4051, 4],
		[4065, 3],
		[4072, 12],
		[4079, 7],
		[4086, 1],
		[4093, 2],
		[4100, 15],
		[4107, 5],
		[4114, 8],
		[4121, 9],
		[4128, 9],
		[4135, 11]
	]
}
