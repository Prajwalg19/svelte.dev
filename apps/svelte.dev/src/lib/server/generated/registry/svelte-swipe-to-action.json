{
	"name": "svelte-swipe-to-action",
	"description": "Implement swipe-to-action component for Svelte apps.",
	"repo_url": "",
	"authors": ["nutchyleo123"],
	"downloads": 5,
	"updated": "2025-03-11T10:11:30.079Z",
	"tags": ["ui"],
	"typescript": true,
	"version": "0.1.0",
	"svelte_range": "^5.0.0",
	"kit_range": "^2.16.0",
	"last_rune_check_version": "0.1.0",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-swipe-to-action",
				"version": "0.1.0",
				"size": 26454
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Svelte-Swipe-To-Action\r\n\r\nA highly customizable swipe-to-action component for Svelte applications.\r\n\r\n![Svelte-Swipe-To-Action Demo](./static/demo/svelte-swipe-demo.png)\r\n\r\n## Table of Contents\r\n\r\n- [Introduction](#introduction)\r\n- [Installation](#installation)\r\n- [Basic Usage](#basic-usage)\r\n- [Props](#props)\r\n  - [State Props](#state-props)\r\n  - [Appearance Props](#appearance-props)\r\n  - [Event Handlers](#event-handlers)\r\n  - [Custom Icons](#custom-icons)\r\n- [Examples](#examples)\r\n- [Development](#development)\r\n- [License](#license)\r\n\r\n## Introduction\r\n\r\nSvelte-Swipe-To-Action is a versatile slider component for Svelte applications building on a html input element type range, that provides \"swipe to unlock\" or \"swipe to confirm\" functionality. It's fully customizable with extensive styling options and event callbacks.\r\n\r\n## Installation\r\n\r\n```bash\r\nnpm install svelte-swipe-to-action\r\n```\r\n\r\nor\r\n\r\n```bash\r\npnpm i svelte-swipe-to-action\r\n```\r\n\r\n## Basic Usage\r\n\r\n```svelte\r\n<script>\r\n\timport Swipe from 'svelte-swipe-to-action';\r\n\r\n\tlet status = false;\r\n\r\n\tfunction handleComplete(event, isComplete, value) {\r\n\t\tconsole.log('Action completed!', isComplete, value);\r\n\t}\r\n</script>\r\n\r\n<Swipe\r\n\tbind:status\r\n\tlabel=\"Slide to confirm\"\r\n\tcompleteLabel=\"Confirmed!\"\r\n\toncomplete={handleComplete}\r\n/>\r\n```\r\n\r\n## Props\r\n\r\n### State Props\r\n\r\n| Prop        | Type      | Default      | Description                                          |\r\n| ----------- | --------- | ------------ | ---------------------------------------------------- |\r\n| `status`    | `boolean` | `false`      | Whether the slider is in completed state             |\r\n| `value`     | `number`  | `0` or `100` | The current value of the slider (0-100)              |\r\n| `hold`      | `boolean` | `false`      | Whether the slider is being held                     |\r\n| `threshold` | `number`  | `80`         | Percentage threshold required for completion (0-100) |\r\n\r\n### Appearance Props\r\n\r\n#### Container\r\n\r\n| Prop                   | Type     | Default         | Description                              |\r\n| ---------------------- | -------- | --------------- | ---------------------------------------- |\r\n| `width`                | `number` | `400`           | Width of the slider in pixels            |\r\n| `height`               | `number` | `50`            | Height of the slider in pixels           |\r\n| `containerPadding`     | `number` | `0`             | Padding of the container in pixels       |\r\n| `containerColor`       | `string` | `'transparent'` | Background color of the container        |\r\n| `containerBorderColor` | `string` | `'transparent'` | Border color of the container            |\r\n| `containerBorderWidth` | `number` | `0`             | Border width of the container in pixels  |\r\n| `containerRadius`      | `number` | `0`             | Border radius of the container in pixels |\r\n| `containerClass`       | `string` | `''`            | Additional CSS class for the container   |\r\n\r\n#### Track\r\n\r\n| Prop                 | Type     | Default         | Description                                       |\r\n| -------------------- | -------- | --------------- | ------------------------------------------------- |\r\n| `trackColor`         | `string` | `'#fff'`        | Background color of the track                     |\r\n| `completeTrackColor` | `string` | `'#4caf50'`     | Background color of the track when completed      |\r\n| `trackBorderColor`   | `string` | `'transparent'` | Border color of the track                         |\r\n| `trackBorderWidth`   | `number` | `1`             | Border width of the track in pixels               |\r\n| `trackRadius`        | `number` | `0`             | Border radius of the track in pixels              |\r\n| `trackClass`         | `string` | `''`            | Additional CSS class for the track                |\r\n| `completeTrackClass` | `string` | `''`            | Additional CSS class for the track when completed |\r\n\r\n#### Thumb\r\n\r\n| Prop                 | Type     | Default  | Description                          |\r\n| -------------------- | -------- | -------- | ------------------------------------ |\r\n| `thumbColor`         | `string` | `'#ddd'` | Color of the thumb                   |\r\n| `completeThumbColor` | `string` | `'#ddd'` | Color of the thumb when completed    |\r\n| `thumbRadius`        | `number` | `0`      | Border radius of the thumb in pixels |\r\n\r\n#### Label\r\n\r\n| Prop                 | Type     | Default          | Description                                 |\r\n| -------------------- | -------- | ---------------- | ------------------------------------------- |\r\n| `label`              | `string` | `'Slide to ...'` | Text displayed on the slider                |\r\n| `labelColor`         | `string` | `'#000'`         | Color of the label text                     |\r\n| `labelClass`         | `string` | `''`             | Additional CSS class for the label          |\r\n| `completeLabel`      | `string` | `'Complete'`     | Text displayed when slider is completed     |\r\n| `completeLabelColor` | `string` | `'#000'`         | Color of the complete label text            |\r\n| `completeLabelClass` | `string` | `''`             | Additional CSS class for the complete label |\r\n\r\n### Event Handlers\r\n\r\n| Prop              | Type                                 | Description                                                            |\r\n| ----------------- | ------------------------------------ | ---------------------------------------------------------------------- |\r\n| `oncomplete`      | `function(event, isComplete, value)` | Called when the slider completes (passes threshold and is released)    |\r\n| `oncancel`        | `function(event, isComplete, value)` | Called when the slider is canceled (released before passing threshold) |\r\n| `onpassthreshold` | `function(event, side, value)`       | Called when the slider passes the threshold in either direction        |\r\n\r\n### Custom Icons\r\n\r\n| Prop        | Type      | Description                                                      |\r\n| ----------- | --------- | ---------------------------------------------------------------- |\r\n| `chevron`   | `Snippet` | Custom icon for the slider thumb (Svelte snippet)                |\r\n| `checkMark` | `Snippet` | Custom icon for the slider thumb when completed (Svelte snippet) |\r\n\r\n## Examples\r\n\r\n### Basic Slide to Unlock\r\n\r\n```svelte\r\n<script>\r\n\timport Swipe from 'svelte-swipe';\r\n\tlet unlocked = false;\r\n</script>\r\n\r\n<Swipe\r\n\tbind:status={unlocked}\r\n\tlabel=\"Slide to unlock\"\r\n\tcompleteLabel=\"Unlocked!\"\r\n\tcompleteTrackColor=\"#4caf50\"\r\n\tthreshold={75}\r\n/>\r\n\r\n{#if unlocked}\r\n\t<p>Device unlocked!</p>\r\n{/if}\r\n```\r\n\r\n### Custom Styled Slider\r\n\r\n```svelte\r\n<script>\r\n\timport Swipe from 'svelte-swipe';\r\n\tlet confirmed = false;\r\n</script>\r\n\r\n<Swipe\r\n\tbind:status={confirmed}\r\n\twidth={300}\r\n\theight={60}\r\n\tcontainerRadius={30}\r\n\tcontainerBorderWidth={2}\r\n\tcontainerBorderColor=\"#ddd\"\r\n\ttrackRadius={28}\r\n\ttrackColor=\"#f5f5f5\"\r\n\tcompleteTrackColor=\"#007bff\"\r\n\tthumbColor=\"#007bff\"\r\n\tcompleteThumbColor=\"#fff\"\r\n\tthumbRadius={28}\r\n\tlabel=\"Swipe to confirm\"\r\n\tcompleteLabel=\"Confirmed!\"\r\n\tlabelColor=\"#666\"\r\n\tcompleteLabelColor=\"#fff\"\r\n/>\r\n```\r\n\r\n### With Custom Icons\r\n\r\n```svelte\r\n<script>\r\n\timport Swipe from 'svelte-swipe';\r\n\timport { HandSwipeRight, Heart } from 'phosphor-svelte';\r\n</script>\r\n\r\n<Swipe label=\"Slide to confirm\" completeLabel=\"Done!\">\r\n\t{#snippet chevron()}\r\n\t\t<HandSwipeRight />\r\n\t{/snippet}\r\n\t{#snippet checkMark()}\r\n\t\t<Heart color=\"HotPink\" weight=\"fill\" />\r\n\t{/snippet}\r\n</Swipe>\r\n```\r\n\r\n### With Event Handlers\r\n\r\n```svelte\r\n<script>\r\n\timport Swipe from 'svelte-swipe';\r\n\tlet message = '';\r\n\r\n\tfunction handleComplete(event, isComplete, value) {\r\n\t\tmessage = 'Action completed!';\r\n\t}\r\n\r\n\tfunction handleCancel(event, isComplete, value) {\r\n\t\tmessage = 'Action canceled!';\r\n\t}\r\n\r\n\tfunction handleThreshold(event, side, value) {\r\n\t\tmessage = side ? 'Passed threshold' : 'Below threshold';\r\n\t}\r\n</script>\r\n\r\n<Swipe\r\n\toncomplete={handleComplete}\r\n\toncancel={handleCancel}\r\n\tonpassthreshold={handleThreshold}\r\n\tlabel=\"Slide to submit\"\r\n\tcompleteLabel=\"Submitted!\"\r\n/>\r\n\r\n<p>{message}</p>\r\n```\r\n\r\n## Development\r\n\r\nTo run the development server:\r\n\r\n```bash\r\nnpm run dev\r\n```\r\n\r\nTo build the library:\r\n\r\n```bash\r\nnpm run build\r\n```\r\n\r\n## License\r\n\r\nMIT License\r\n\r\nCopyright (c) 2023\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n",
	"legacy_svelte": false,
	"downloads_history": [
		[4086, 61],
		[4093, 4],
		[4114, 5],
		[4121, 4],
		[4128, 2],
		[4135, 5]
	],
	"esm": true,
	"cjs": false
}
