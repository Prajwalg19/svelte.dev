{
	"name": "@glagan/minimark",
	"description": "Render markdown-like text into Svelte components.",
	"repo_url": "https://github.com/Glagan/minimark",
	"authors": ["glagan"],
	"homepage": "https://github.com/Glagan/minimark",
	"downloads": 5,
	"updated": "2022-09-18T19:09:59.843Z",
	"tags": ["content"],
	"github_stars": 0,
	"typescript": true,
	"version": "0.1.4",
	"svelte_range": "^3.44.0",
	"kit_range": "next",
	"last_rune_check_version": "0.1.4",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@glagan/minimark",
				"version": "0.1.4",
				"size": 56973
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# minimark\r\n\r\n[![npm version](https://badge.fury.io/js/@glagan%2Fminimark.svg)](https://badge.fury.io/js/@glagan%2Fminimark)\r\n\r\n**minimark** is a Svelte library that render nodes from a string with **markdown** like tags.  \r\nThe text is converted to nodes that are then displayed as Svelte components, without any html assignments.\r\n\r\nYou can find a demo with a live preview of the rendered text at [http://minimark.nikurasu.org/](http://minimark.nikurasu.org/).\r\n\r\n## Installation\r\n\r\n```bash\r\nyarn add @glagan/minimark # or npm install @glagan/minimark\r\n```\r\n\r\n## How to use\r\n\r\nYou only need to use the ``<Minimark>`` component to render text:\r\n\r\n```jsx\r\n<Minimark text=\"This will be renderer **in bold**\" />\r\n```\r\n\r\nThe generated node will be surrounded by a ``<div>`` by default, but you can use any tag you want by setting the ``tag`` props.\r\n\r\n## Tags\r\n\r\nYou can insert links, images and stylize text by using tags that resemble **Markdown**.\r\nMost of these tags can be nested to combine their effects.\r\n\r\n| Name | Description | CSS |\r\n|---|---|---|\r\n| Inline code | \\`\\`code\\`\\` | ``code`` |\r\n| Header (h1) | ``# Header 1\\n`` |  |\r\n| Header (h2) | ``## Header 2\\n`` |  |\r\n| Link | ``{{title\\|http://www.example.org/}}`` or ``{{http://www.example.org/}}`` without title. |\r\n| Image | ``![title\\|http://www.example.org/image.jpg]`` or ``![http://www.example.org/image.jpg]`` without title. |\r\n| Bold | ``**http://www.example.org/**`` | ``bold`` |\r\n| Italic | ``*http://www.example.org/*`` | ``italic`` |\r\n| Separator | ``\\n---\\n`` | ``separator`` |\r\n| Float right | ``>*>Text<`` | ``float-right`` |\r\n\r\nTags work by looking for an open token, an optional separator if there is a title, and the close token.\r\nIf the tag can have a *title* you need to use ``|`` as the separator with the *content*.\r\n\r\nYou can add custom tags easily with the ``addTag(definition)`` function.\r\nA tag object can have the following properties:\r\n\r\n```typescript\r\nimport { addTag } from '@glagan/minimark';\r\n\r\naddTag({\r\n    tag: \"span\", // The node tag, e.g <span>\r\n    classes: \"class1 class2\", // Optional classes as a string\r\n    attributes: {\r\n        name: \"value\"\r\n    }, // Optional attributes to set\r\n    textContent: \"$content\", // textContent of the created node, see below for variables\r\n                             // If textContent is defined and not false the content cannot have childs (nested other tags)\r\n\t\t\t\t\t\t\t // If textContent is set to false, it\"s ignored (for self-closing tags)\r\n    open: \"{{\", // The opening token - any length\r\n    close: \"}}\" // The closing token - can be linebreak by using \\n - can also be empty\r\n});\r\n```\r\n\r\n## Variables\r\n\r\nThere are two usable *variables* inside attribute values ``textContent`` and ``title``:\r\n\r\n* ``$content``: the content found between the ``open`` and ``close`` token, without the title if there is one.\r\n* ``$title``: the title found, if there is none it is replaced by the same value as ``$content``.\r\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 2],
		[3596, 5],
		[3603, 3],
		[3631, 2],
		[3645, 5],
		[3652, 1],
		[3659, 2],
		[3666, 6],
		[3673, 2],
		[3680, 2],
		[3687, 1],
		[3701, 1],
		[3729, 1],
		[3750, 1],
		[3757, 6],
		[3771, 5],
		[3778, 2],
		[3799, 1],
		[3806, 2],
		[3813, 4],
		[3827, 4],
		[3834, 4],
		[3841, 25],
		[3855, 2],
		[3862, 10],
		[3869, 1],
		[3876, 1],
		[3883, 6],
		[3904, 1],
		[3918, 1],
		[3925, 3],
		[3932, 2],
		[3939, 1],
		[3953, 2],
		[3967, 1],
		[3981, 1],
		[3988, 1],
		[3995, 2],
		[4016, 6],
		[4023, 9],
		[4030, 5],
		[4037, 3],
		[4044, 10],
		[4051, 1],
		[4058, 2],
		[4072, 2],
		[4079, 3],
		[4086, 1],
		[4093, 5],
		[4100, 11],
		[4107, 10],
		[4114, 5],
		[4121, 9],
		[4128, 2]
	]
}
