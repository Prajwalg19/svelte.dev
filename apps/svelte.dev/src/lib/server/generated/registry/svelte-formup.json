{
	"name": "svelte-formup",
	"description": "Form helpers for Svelte with Yup validation.",
	"repo_url": "https://github.com/kenoxa/svelte-formup",
	"authors": ["sastan"],
	"homepage": "https://svelte-formup.js.org",
	"downloads": 39,
	"updated": "2020-07-13T10:36:44.595Z",
	"tags": ["miscellaneous"],
	"github_stars": 3,
	"typescript": true,
	"version": "0.6.2",
	"svelte_range": "3.x",
	"last_rune_check_version": "0.6.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-formup",
				"version": "0.6.2",
				"size": 228270
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-formup\n\n> form helpers for [svelte]\n\n[![License](https://badgen.net/npm/license/svelte-formup)](https://github.com/kenoxa/svelte-formup/blob/main/LICENSE)\n[![Latest Release](https://badgen.net/npm/v/svelte-formup)](https://www.npmjs.com/package/svelte-formup)\n[![View changelog](https://badgen.net/badge/%E2%80%8B/Explore%20Changelog/green?icon=awesome)](https://changelogs.xyz/svelte-formup)\n[![Bundle Size](https://badgen.net/bundlephobia/minzip/svelte-formup)](https://bundlephobia.com/result?p=svelte-formup)\n\n[![CI](https://github.com/kenoxa/svelte-formup/workflows/CI/badge.svg)](https://github.com/kenoxa/svelte-formup/actions?query=branch%3Amain+workflow%3ACI)\n[![Coverage Status](https://badgen.net/coveralls/c/github/kenoxa/svelte-formup/main)](https://coveralls.io/github/kenoxa/svelte-formup?branch=main)\n[![PRs Welcome](https://badgen.net/badge/PRs/welcome/purple)](http://makeapullrequest.com)\n[![Conventional Commits](https://badgen.net/badge/Conventional%20Commits/1.0.0/cyan)](https://conventionalcommits.org)\n\n## What?\n\n> Not standing in the way and keeping everything smooth.\n\n- Plug'n'Play. Input elements in, values out.\n- Works just like a normal form. Except it does all the tedious work for you.\n- Extendable. Work with native form elements and custom input components out of the box.\n- Two-Way Binding. `svelte-formup` is two-way bound by default. Change a value in your object, and it changes in your inputs.\n- Async Validation. Everything is validated asynchronously for uninterrupted user experience.\n\n## Why?\n\n[svelte]s [action feature](https://svelte.dev/docs#use_action) is a unique way to attach custom logic to DOM elements. Combined with its great way of [two-way binding](https://svelte.dev/docs#bind_element_property) and its [reactive stores](https://svelte.dev/docs#svelte_store) this allows to write very native looking forms with no boilerplate.\n\nAdding [yup] allows to define a schema for value parsing and validation. Yup schema are extremely expressive and allow modeling complex, interdependent validations, or value transformations.\n\nStyling forms in a consistent way has always been a problem. Everyone has her own opinion about it. `svelte-formup` allows flexibel error reporting supporting both [native](https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation) and programmatic usage. Invalid form elements [are marked](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/setCustomValidity) supporting several validity state specific css selectors like [:invalid](https://developer.mozilla.org/en-US/docs/Web/CSS/:invalid). Additionally `svelte-formup` adds CSS classes (`is-error`, `is-success`, `is-dirty`, `is-pristine`, `is-validating`, `is-submitting` and `is-submitted`) for further custom styling. These classes maybe added to surrounding fieldsets or form group element depending on the validity state of the contained form elements. On non form elements these classes are set using the `has-` prefix instead of `is-`.\n\n<!-- prettier-ignore-start -->\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [API](#api)\n- [Polyfills](#polyfills)\n- [TODO](#todo)\n- [Related Projects](#related-projects)\n- [Support](#support)\n- [Contribute](#contribute)\n- [NPM Statistics](#npm-statistics)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n<!-- prettier-ignore-end -->\n\n## Installation\n\n```sh\nnpm install svelte-formup\n```\n\nAnd then import it:\n\n```js\n// using es modules\nimport { formup } from 'svelte-formup'\n\n// common.js\nconst { formup } = require('svelte-formup')\n```\n\nAlternatively use [UNPKG](https://unpkg.com/svelte-formup/) or [jsDelivr](https://cdn.jsdelivr.net/npm/svelte-formup/) packages.\n\nHotlinking from unpkg: _(no build tool needed!)_\n\n```js\nimport { formup } from 'https://unpkg.com/svelte-formup?module'\n```\n\n## Usage\n\n### Native HTML form elements\n\n[![Edit laughing-hopper-7il5k](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/laughing-hopper-7il5k?fontsize=14&hidenavigation=1&module=%2FApp.svelte&theme=dark)\n\n```html\n<script>\n  import * as yup from 'yup'\n\n  import { formup } from 'svelte-formup'\n\n  const { values, errors, dirty, validate, validity } = formup({\n    schema: yup.object().shape({\n      title: yup.string().oneOf(['Mr.', 'Mrs.', 'Mx.']).required(),\n      name: yup.string().required(),\n      email: yup.string().email().required(),\n    }),\n    onSubmit(data, context) {\n      console.log('onSubmit', { data, context })\n    },\n  })\n</script>\n\n<form use:validate>\n  <p use:validity>\n    <label for=\"title\">title</label>\n    <select id=\"title\" bind:value=\"{$values.title}\">\n      <option></option>\n      <option>Mr.</option>\n      <option>Mrs.</option>\n      <option>Mx.</option>\n    </select>\n  </p>\n\n  <p use:validity>\n    <label for=\"name\">name</label>\n    <input id=\"name\" bind:value=\"{$values.name}\" type=\"text\" />\n  </p>\n\n  <p use:validity>\n    <label for=\"email\">email</label>\n    <input id=\"email\" bind:value=\"{$values.email}\" type=\"email\" />\n  </p>\n\n  <p>\n    <button type=\"submit\">Submit</button>\n    <button type=\"reset\">reset</button>\n  </p>\n</form>\n```\n\n### Error Messages\n\n[![Edit naughty-buck-t5yx4](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/naughty-buck-t5yx4?fontsize=14&hidenavigation=1&module=%2FApp.svelte&theme=dark)\n\n`svelte-formup` does not provide any svelte components. Most projects have their own way of reporting errors. Below is an example component to simplify error handling.\n\n```html\n<script>\n  import { getFormupContext } from 'svelte-formup'\n\n  export let at\n\n  const { invalid } = getFormupContext()\n\n  let error\n\n  $: error = $invalid.get(at)\n</script>\n\n{#if error}\n<span class=\"error\" aria-live=\"polite\">\n  <slot {error}>{error.message}</slot>\n</span>\n{/if}\n```\n\nThis could be used like (omitting identical code for brevity)\n\n```html\n<script>\n  import IfError from './if-error.svelte'\n</script>\n\n<form use:validate>\n  <label for=\"name\">name</label>\n  <input id=\"name\" bind:value=\"{$values.name}\" type=\"email\" />\n  <IfError at=\"name\" />\n</form>\n```\n\n## API\n\n`svelte-formup` exports two functions:\n\n- [formup(options)](https://svelte-formup.js.org/globals.html#formup) is the main entrypoint which creates the [form context](https://svelte-formup.js.org/interfaces/_svelte_formup_.formupcontext.html)\n- [getFormupContext()](https://svelte-formup.js.org/globals.html#getformcontext) allows to access the [form context](https://svelte-formup.js.org/interfaces/_svelte_formup_.formupcontext.html) through the [svelte context](https://svelte.dev/docs#getContext)\n\n## Polyfills\n\n- [Array#flatMap()](https://caniuse.com/#feat=array-flat): Edge >= 79, Safari >= 12\n- [AbortController](https://caniuse.com/#feat=abortcontroller): Edge >= 16\n- [NodeList#forEach()](https://caniuse.com/#feat=mdn-api_nodelist_foreach): Edge >= 16, Safari >=10\n- [async-await](https://caniuse.com/#feat=async-functions): Edge >= 15\n- [Destructuring assignment](https://caniuse.com/#feat=mdn-javascript_operators_destructuring): Edge >= 14\n- [Object.assign()](https://caniuse.com/#feat=mdn-javascript_builtins_object_assign): Edge >= 12\n- [WeakSet](https://caniuse.com/#feat=mdn-javascript_builtins_weakset): Edge >= 12\n- [Promise](https://caniuse.com/#feat=promises): Edge >= 12\n- [Symbol.for](https://caniuse.com/#search=Symbol.for): Edge >= 12\n- [for...of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of): Edge >= 12\n\n## TODO\n\n- [ ] add css class for each test per node: `yup.string().email().required()` => `email required`\n- [ ] what about invalid path (validate and validateAt)\n- [ ] debounce during testing: [Timer Mocks](https://jestjs.io/docs/en/timer-mocks)\n- [ ] add aria based on schema: [ARIA Forms](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/forms)\n- [ ] how to handle disabled fields, skip validation?\n- [ ] a guide how to implement a custom component\n- [ ] focus first error field after submit with error\n- [ ] on focus add css class: maybe a focused store?\n- [ ] provides IfError, Input, Select, Choice components using yup schema values to reduce boilerplate via 'svelte-formup-components'\n- [ ] svelte-society/recipes-mvp recipy: [form validation with yup](https://github.com/svelte-society/recipes-mvp/pull/47/files)\n- [ ] examples like [informed](https://joepuzzo.github.io/informed)\n- [ ] style guide: `form > :global(.valid.dirty)`\n\n## Related Projects\n\n- [svelte-jsx] - write svelte components using [jsx] to simplify testing\n- [svelte-htm] - [**H**yperscript **T**agged **M**arkup](https://www.npmjs.com/package/htm) for svelte to simplify testing\n- [@testing-library/svelte](https://testing-library.com/docs/svelte-testing-library/intro) - helps to test UI components in a user-centric way\n\n## Support\n\nThis project is free and open-source, so if you think this project can help you or anyone else, you may [star it on GitHub](https://github.com/kenoxa/svelte-formup). Feel free to [open an issue](https://github.com/kenoxa/svelte-formup/issues) if you have any idea, question, or you've found a bug.\n\n## Contribute\n\nThanks for being willing to contribute!\n\n**Working on your first Pull Request?** You can learn how from this _free_ series [How to Contribute to an Open Source Project on GitHub](https://egghead.io/series/how-to-contribute-to-an-open-source-project-on-github)\n\nWe are following the [Conventional Commits](https://www.conventionalcommits.org) convention.\n\n### Develop\n\n- `npm start`: Starts a [snowpack](https://snowpack.dev) dev server using `src/__preview__`\n- `npm test`: Run test suite including linting\n- `npm run build`: Generate bundles\n\n## NPM Statistics\n\n[![NPM](https://nodei.co/npm/svelte-formup.png)](https://nodei.co/npm/svelte-formup/)\n\n## License\n\n`svelte-formup` is open source software [licensed as MIT](https://github.com/kenoxa/svelte-formup/blob/main/LICENSE).\n\n[svelte-jsx]: https://www.npmjs.com/package/svelte-jsx\n[svelte-htm]: https://www.npmjs.com/package/svelte-htm\n[yup]: https://www.npmjs.com/package/yup\n[svelte]: https://svelte.dev/\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 33],
		[3596, 36],
		[3603, 77],
		[3610, 49],
		[3617, 29],
		[3624, 30],
		[3631, 13],
		[3638, 25],
		[3645, 45],
		[3652, 57],
		[3659, 174],
		[3666, 283],
		[3673, 200],
		[3680, 52],
		[3687, 154],
		[3694, 129],
		[3701, 191],
		[3708, 126],
		[3715, 90],
		[3722, 196],
		[3729, 157],
		[3736, 103],
		[3743, 142],
		[3750, 208],
		[3757, 172],
		[3764, 162],
		[3771, 133],
		[3778, 138],
		[3785, 163],
		[3792, 311],
		[3799, 217],
		[3806, 258],
		[3813, 312],
		[3820, 231],
		[3827, 316],
		[3834, 305],
		[3841, 197],
		[3848, 284],
		[3855, 240],
		[3862, 381],
		[3869, 306],
		[3876, 288],
		[3883, 287],
		[3890, 240],
		[3897, 249],
		[3904, 266],
		[3911, 188],
		[3918, 140],
		[3925, 63],
		[3932, 15],
		[3939, 18],
		[3946, 19],
		[3953, 20],
		[3960, 49],
		[3967, 31],
		[3974, 17],
		[3981, 11],
		[3988, 10],
		[3995, 16],
		[4002, 21],
		[4009, 19],
		[4016, 34],
		[4023, 26],
		[4030, 66],
		[4037, 51],
		[4044, 24],
		[4051, 24],
		[4058, 33],
		[4065, 27],
		[4072, 33],
		[4079, 17],
		[4086, 22],
		[4093, 18],
		[4100, 21],
		[4107, 25],
		[4114, 39],
		[4121, 33],
		[4128, 29]
	],
	"esm": true,
	"cjs": true
}
