{
	"name": "svelte-custom-swipe",
	"description": "Create custom swipe interactions in Svelte apps.",
	"repo_url": "https://github.com/yoonjonglyu/custom-swipe",
	"authors": ["isa(yunjongryu)"],
	"homepage": "https://github.com/yoonjonglyu/custom-swipe/",
	"downloads": 6,
	"updated": "2024-01-06T13:27:04.547Z",
	"tags": ["ui"],
	"github_stars": 5,
	"typescript": true,
	"version": "0.0.9",
	"svelte_range": "^4.0.0",
	"kit_range": "^2.0.0",
	"last_rune_check_version": "0.0.9",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-custom-swipe",
				"version": "0.0.9",
				"size": 12943
			},
			{
				"name": "swipe-core-provider",
				"version": "1.0.10",
				"size": 13132
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "<p align=\"center\"><img src=\"https://github.com/yoonjonglyu/custom-swipe/blob/main/swipe.png\"title=\"custom_swipe_logo\" alt=\"swipe_logo\" />\n</p>\n<p algin=\"center\">\n\n# svelte-custom-swipe\n# Custom-Swipe: A Lightweight and Headless Frontend Library\n\nCustom-Swipe is a versatile solution designed for seamless user interactions in web applications. Whether you're building a responsive web app or enhancing the user experience on various devices, Custom-Swipe offers a range of swipe features. It serves as both a basic component for easy integration and a powerful headless hook for developers seeking granular control.\n\n## Key Features\n\n- **Lightweight:** Minimize your bundle size with our lightweight library.\n- **Responsive:** Ensure smooth interactions across various devices and screen sizes.\n- **Customizable:** Tailor swipe behavior to suit your application's specific needs.\n- **Headless Hook:** For developers who prefer a programmatic approach, our headless hook provides extensive control over swipe events.\n\nExplore the possibilities with Custom-Swipe and elevate your frontend development experience.\n[demo](https://yoonjonglyu.github.io/custom-swipe/)\n\n## Install\n\n1.yarn\n\n```shell\nyarn add svelte-custom-swipe\n```\n\n2.npm\n\n```shell\nnpm install svelte-custom-swipe\n```\n\n## Use Example\n\n0. Fix SSR Cannot use import statement outside a Module\n```js\n// vite config\nexport default defineConfig({\n\tplugins: [sveltekit()],\n  // ...\n\tssr: {\n\t\tnoExternal: ['swipe-core-provider']// ssr Cannot use import statement outside a module \n\t}\n});\n```\n\n1. Use Component\n\n```jsx\n<script lang=\"ts\">\nimport Swipe from 'svelte-custom-swipe';\nconst item = [\n    'https://yoonjonglyu.github.io/custom-swipe/assets/c1dbbdc1b473d757ed94a80d6cff51f5.jpg',\n    'https://yoonjonglyu.github.io/custom-swipe/assets/3f394bd7102b8da522047a82fd90f3e8.jpg',\n    'https://yoonjonglyu.github.io/custom-swipe/assets/580b2619aaaa962d2fe3d9714de50cf7.jpg',\n  ];\n</script>\n<Swipe {item}>\n  <img slot=\"swipeitem\" let:swipe src={swipe} alt={swipe} />\n</Swipe>\n```\n\n2. Use Hook\n\n```jsx\n<script lang=\"ts\" setup>\nimport { ref } from 'vue';\nimport { useSwipe, UseSwipeProps } from 'vue-custom-swipe';\n\n\nconst { config } = defineProps<{ config: UseSwipeProps }>();\nconst swipeRef = ref();\nconst { handleSlide, changeIndex } = useSwipe(swipeRef, { ...config });\n\n</script>\n\n<template>\n  <div class='swipe-container'>\n    <ul class='swipe-wrap' ref=\"swipeRef\">\n      <li class=\"swipe-item\" v-for=\"i in items\" :key=\"i\">\n        <img :src=\"i\" alt=\"img\" />\n      </li>\n    </ul>\n  </div>\n</template>\n\n<style scoped>\n.swipe-container {\n  position: relative;\n  display: flex;\n  padding: 0;\n  overflow: hidden;\n  z-index: 1;\n}\n.swipe-wrap {\n  position: relative;\n  z-index: 1;\n  display: flex;\n  width: 100%;\n  height: 100%;\n  margin: 0 auto;\n  padding: 0;\n  list-style: none;\n  box-sizing: content-box;\n}\n.swipe-container .column {\n  flex-direction: column !important;\n}\n.swipe-item {\n  position: relative;\n  flex-shrink: 0;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  box-sizing: border-box;\n\n}\nimg {\n-webkit-user-drag: none;\n}\n</style>\n```\n\n## PROPS\n\n1. SwipeWrap(components)\n   1. `config?`: `ConfigProps` swipe option config.\n      1. `isHistory`: `boolean` history change or push(default: false)(true ? push : replace).\n      2. `paramName?`: `string` querystring key name(default: index).\n      3. `historyCallback?`: `(state: SwipeStateProps) => void` swipeEnd event custom callback props swipe state.\n      4. `isCarousel?`: `boolean` use carousel mode need config isHistory flag false.\n      5. `direction?`: `row | column` use vertical swipe option.(default: row)\n2. useSwipe(composable)\n   1. `dom`: `Ref<HTMLElement>` Vue ref props events target.\n   2. `config?`: `ConfigProps` swipe option config.\n      1. `isHistory`: `boolean` history change or push(default: false)(true ? push : replace).\n      2. `paramName?`: `string` querystring key name(default: index).\n      3. `historyCallback?`: `(state: SwipeStateProps) => void` swipeEnd event custom callback props swipe state.\n      4. `direction?`: `row | column` use vertical swipe option.(default: row)\n3. `useSwipe`(composable) return\n   1. `handleSlide`: `(flag: 'L' | 'R') => void`; use Slide handler.\n   2. `changeIndex`: `(index: number) => void`; use goto index handler.\n\n## Features\n\n1. Swipe\n2. Infinite swipe(scroll)\n3. Carousel\n\n## LICENSE\n\nMIT\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3631, 58],
		[3638, 71],
		[3645, 1],
		[3652, 389],
		[3659, 58],
		[3666, 21],
		[3673, 9],
		[3680, 1],
		[3687, 14],
		[3694, 18],
		[3701, 1],
		[3708, 1],
		[3715, 2],
		[3722, 10],
		[3729, 2],
		[3736, 19],
		[3743, 1],
		[3750, 9],
		[3757, 2],
		[3771, 2],
		[3778, 3],
		[3792, 1],
		[3806, 2],
		[3813, 1],
		[3820, 2],
		[3827, 1],
		[3834, 45],
		[3841, 1],
		[3848, 2],
		[3855, 1],
		[3876, 3],
		[3890, 9],
		[3897, 1],
		[3904, 1],
		[3918, 1],
		[3925, 1],
		[3932, 1],
		[3953, 3],
		[3974, 1],
		[3981, 2],
		[3988, 6],
		[4016, 3],
		[4023, 4],
		[4037, 16],
		[4044, 11],
		[4051, 5],
		[4065, 1],
		[4093, 1],
		[4100, 27],
		[4107, 1],
		[4114, 6],
		[4121, 10],
		[4128, 15]
	],
	"esm": true,
	"cjs": false
}
