{
	"name": "svelty-editor",
	"description": "Svelte wrapper for Editor.js with TypeScript support.",
	"repo_url": "https://github.com/code-gio/svelty-editor",
	"authors": ["code-gio"],
	"homepage": "https://github.com/code-gio/svelty-editor#readme",
	"downloads": 15,
	"updated": "2025-03-04T19:57:41.103Z",
	"tags": ["content"],
	"github_stars": 0,
	"typescript": true,
	"version": "0.0.4",
	"svelte_range": "^5.0.0",
	"kit_range": "^2.9.0",
	"last_rune_check_version": "0.0.4",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelty-editor",
				"version": "0.0.4",
				"size": 15110
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Svelty Editor\n\nA powerful, flexible Svelte wrapper for Editor.js that brings block-styled editing to your Svelte applications with full TypeScript support and enhanced configuration options.\n\n![License](https://img.shields.io/npm/l/svelty-editor)\n![npm](https://img.shields.io/npm/v/svelty-editor)\n![downloads](https://img.shields.io/npm/dm/svelty-editor)\n\n## ✨ Features\n\n- 🎯 **Full TypeScript Support** - Comprehensive type definitions for enhanced development experience\n- ⚡ **Dynamic Tool Loading** - Load editor tools on-demand for optimal performance\n- 🌍 **i18n Ready** - Built-in internationalization support for multiple languages\n- 📝 **Flexible Modes** - Support for both editing and read-only modes\n- 🛠 **Customizable UI** - Configurable inline toolbar and block tunes\n- 🎨 **Block Styling** - Rich text editing with customizable block styles\n- 📊 **Event System** - Comprehensive event handling for content changes\n- 🔌 **Plugin Architecture** - Easy integration of custom tools and extensions\n\n## 📦 Installation\n\n```bash\n# Install the core package\nnpm install svelty-editor\n\n# Install required peer dependencies\nnpm install @editorjs/editorjs\n\n# Optional: Install commonly used tools\nnpm install @editorjs/header @editorjs/list @editorjs/paragraph\n```\n\n## 🚀 Quick Start\n\n```svelte\n<script lang=\"ts\">\n  import { SveltyEditor } from 'svelty-editor';\n  import type { OutputData } from '@editorjs/editorjs';\n\n  const handleChange = (data: OutputData) => {\n    console.log('Editor content:', data);\n  };\n</script>\n\n<SveltyEditor\n  onChange={handleChange}\n  placeholder=\"Start writing...\"\n  autofocus={true}\n/>\n```\n\n## 🛠 Advanced Usage\n\n### Full Configuration Example\n\n```svelte\n<script lang=\"ts\">\n  import { SveltyEditor } from 'svelty-editor';\n  import type { OutputData, EditorConfig } from '@editorjs/editorjs';\n  \n  let editor: any;\n\n  const config: EditorConfig = {\n    // Core settings\n    defaultBlock: 'paragraph',\n    autofocus: true,\n    placeholder: 'Create something amazing...',\n    logLevel: 'ERROR',\n    \n    // Toolbar configuration\n    inlineToolbar: ['link', 'marker', 'bold', 'italic'],\n    \n    // Tool settings\n    tools: {\n      header: {\n        class: Header,\n        inlineToolbar: true,\n        config: {\n          placeholder: 'Enter a header',\n          levels: [1, 2, 3],\n          defaultLevel: 1\n        }\n      },\n      list: {\n        class: List,\n        inlineToolbar: true,\n        config: {\n          defaultStyle: 'unordered'\n        }\n      }\n    },\n    \n    // Internationalization\n    i18n: {\n      messages: {\n        ui: {\n          'blockTunes.deleteTune.delete': 'Delete',\n          'blockTunes.deleteTune.confirm': 'Confirm deletion'\n        },\n        toolNames: {\n          'header': 'Heading',\n          'list': 'List'\n        }\n      }\n    },\n    \n    // Event handlers\n    onChange: (api, event) => {\n      console.log('Content updated:', event);\n    },\n    onReady: () => {\n      console.log('Editor initialized');\n    }\n  };\n</script>\n\n<SveltyEditor\n  bind:this={editor}\n  {...config}\n/>\n```\n\n### Custom Tools Integration\n\n```typescript\n// Define a custom tool\nclass CustomTool {\n  static get toolbox() {\n    return {\n      title: 'Custom Tool',\n      icon: '<svg>...</svg>'\n    };\n  }\n  \n  constructor({ data, config, api }) {\n    this.data = data;\n    this.config = config;\n    this.api = api;\n  }\n  \n  render() {\n    // Tool rendering logic\n  }\n  \n  save(blockContent) {\n    // Save logic\n  }\n}\n\n// Register the custom tool\nawait editor.registerTool('customTool', CustomTool, {\n  inlineToolbar: true,\n  config: {\n    // Custom configuration\n  }\n});\n```\n\n## 📖 API Reference\n\n### Props\n\n| Prop | Type | Default | Description |\n|------|------|---------|-------------|\n| `data` | `OutputData` | `{}` | Initial editor content |\n| `onChange` | `(data: OutputData) => void` | `undefined` | Content change callback |\n| `placeholder` | `string` | `'Start writing...'` | Editor placeholder text |\n| `autofocus` | `boolean` | `false` | Auto-focus on load |\n| `readOnly` | `boolean` | `false` | Read-only mode |\n| `defaultBlock` | `string` | `'paragraph'` | Default block type |\n| `logLevel` | `LogLevel` | `'WARN'` | Logging verbosity |\n| `inlineToolbar` | `boolean \\| string[]` | `true` | Inline toolbar config |\n| `tools` | `Record<string, EditorTool>` | `{}` | Tool configurations |\n| `i18n` | `I18nConfig` | `undefined` | Internationalization |\n| `tunes` | `string[]` | `[]` | Block tune settings |\n\n### Methods\n\n```typescript\n// Save editor content\nconst data = await editor.save();\n\n// Toggle read-only mode\neditor.setReadOnly(boolean);\n\n// Register a new tool\nawait editor.registerTool(name, toolClass, config);\n\n// Clear editor content\neditor.clear();\n\n// Get editor instance\nconst editorInstance = editor.getEditor();\n```\n\n### Events\n\nThe editor emits several events that you can listen to:\n\n```typescript\neditor.on('change', (data) => {\n  console.log('Content changed:', data);\n});\n\neditor.on('ready', () => {\n  console.log('Editor is ready');\n});\n\neditor.on('save', (data) => {\n  console.log('Content saved:', data);\n});\n```\n\n## 🧩 TypeScript Support\n\nImport types for better development experience:\n\n```typescript\nimport type { \n  EditorConfig,\n  EditorTool,\n  OutputData,\n  LogLevel,\n  I18nConfig,\n  EditorEvents\n} from 'svelty-editor';\n```\n\n## 🤝 Contributing\n\nWe welcome contributions! Here's how you can help:\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\nPlease read our [Contributing Guide](CONTRIBUTING.md) for details on our code of conduct and development process.\n\n## 📝 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🙏 Credits\n\n- Built on top of [Editor.js](https://editorjs.io/)\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3995, 190],
		[4002, 4],
		[4009, 3],
		[4016, 5],
		[4023, 19],
		[4030, 28],
		[4037, 16],
		[4044, 16],
		[4051, 6],
		[4058, 7],
		[4065, 9],
		[4072, 6],
		[4079, 80],
		[4086, 12],
		[4093, 7],
		[4100, 13],
		[4107, 14],
		[4114, 15],
		[4121, 10],
		[4128, 4],
		[4135, 10]
	]
}
