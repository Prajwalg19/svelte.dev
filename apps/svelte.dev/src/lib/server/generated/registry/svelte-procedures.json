{
	"name": "svelte-procedures",
	"description": "Create step-by-step procedures in Svelte applications.",
	"repo_url": "",
	"authors": ["esinx"],
	"downloads": 14,
	"updated": "2020-07-15T19:11:39.811Z",
	"tags": ["miscellaneous"],
	"typescript": false,
	"version": "0.9.1",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "0.9.1",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-procedures",
				"version": "0.9.1",
				"size": 70881
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-procedures\n\nThere are times when a set of actions must be done in \"procedures\". For\ninstance, you might need a step-by-step form that requires a fetch call to\nvalidate user's input. `svelte-procedures` is a package that assists you through such design patterns.\n\n## Installation\n\n```\nnpm i -D svelte-procedures\n```\n\n## How to\n\nImport `Procedures` from the package, and import your own \"procedure\" components.\n\nMap them in an array with the following structure, then place the array as a property within the Procedures component.\n\nSee under `example` for detailed instructions.\n\n```html\n<script>\n    import Procedures from \"svelte-procedures\";\n\n    import Introduction from \"./procedures/introduction.svelte\";\n    import Introduction2 from \"./procedures/introduction-2.svelte\";\n    import ViewText from \"./procedures/view-text.svelte\";\n\n    const procedures = [\n        {\n            name: \"Introduction\",\n            component: Introduction,\n        },\n        {\n            name: \"Introduction 2\",\n            component: Introduction2,\n        },\n        {\n            name: \"View Text Data\",\n            component: ViewText,\n        },\n    ];\n</script>\n\n<div class=\"root\">\n    <div class=\"centerbox\">\n        <h1>Svelte Procedures</h1>\n        <Procedures {procedures} />\n    </div>\n</div>\n```\n\n## Customizing Progress Indicator\n\nThe default progress indicator is implemented in `Progress.svelte`.\n\nYou could use your own implementation of progress indicator using named slots.\n\n`procedures` and `currentStepIndex` will be passed as props to the named slot `progress`.\n\n## License\n\nMIT\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 1],
		[3596, 8],
		[3603, 7],
		[3610, 7],
		[3631, 1],
		[3645, 1],
		[3652, 1],
		[3659, 1],
		[3666, 8],
		[3673, 9],
		[3680, 1],
		[3687, 3],
		[3701, 1],
		[3708, 8],
		[3722, 1],
		[3729, 9],
		[3750, 1],
		[3757, 4],
		[3764, 4],
		[3771, 7],
		[3778, 7],
		[3785, 1],
		[3792, 3],
		[3799, 2],
		[3806, 3],
		[3834, 1],
		[3848, 5],
		[3855, 5],
		[3862, 25],
		[3869, 1],
		[3883, 1],
		[3890, 9],
		[3897, 1],
		[3904, 7],
		[3911, 1],
		[3925, 2],
		[3932, 1],
		[3939, 1],
		[3953, 4],
		[3960, 2],
		[3981, 15],
		[4002, 9],
		[4009, 1],
		[4016, 4],
		[4030, 8],
		[4037, 11],
		[4044, 6],
		[4051, 1],
		[4058, 4],
		[4065, 1],
		[4086, 12],
		[4093, 22],
		[4100, 7],
		[4107, 4],
		[4114, 14],
		[4121, 24],
		[4128, 8]
	],
	"esm": true,
	"cjs": false
}
