{
	"name": "svelte-reactive",
	"description": "Provide alternative to Svelte's derived store with similar API.",
	"repo_url": "https://github.com/olehmisar/svelte-reactive",
	"authors": ["olehmisar"],
	"homepage": "https://github.com/olehmisar/svelte-reactive#readme",
	"downloads": 202,
	"updated": "2025-03-02T19:24:47.632Z",
	"tags": ["miscellaneous"],
	"github_stars": 10,
	"typescript": true,
	"version": "0.0.10",
	"svelte_range": "^3.0.0 || ^4.0.0 || ^5.0.0",
	"kit_range": "^1.20.4",
	"last_rune_check_version": "0.0.10",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-reactive",
				"version": "0.0.10",
				"size": 5970
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-reactive\n\nAn alternative to svelte's `derived` store with API similar to $ in svelte components.\n\n```js\n// svelte-reactive\nconst sum = reactive(($) => $(numberA) + $(numberB));\n\n// VS\n\n// svelte's derived\nconst sum = derived(\n  [numberA, numberB],\n  ([$numberA, $numberB]) => $numberA + $numberB,\n);\n```\n\n## Installation\n\n```bash\nnpm install svelte-reactive\n```\n\n## Usage\n\n```js\nimport { writable, get } from \"svelte/store\";\nimport { reactive } from \"svelte-reactive\";\n\nconst a = writable(1);\nconst b = writable(2);\nconst sum = reactive(($) => $(a) + $(b));\nconsole.log(get(sum)); // 3\na.set(5);\nconsole.log(get(sum)); // 7\n```\n\nWorks with `if` blocks too:\n\n```js\nconst numerator = writable(1);\nconst denominator = writable(0);\nconst fraction = reactive(($) => {\n  if ($(denominator) === 0) {\n    return 0;\n  }\n  return $(numerator) / $(denominator);\n});\nconsole.log(get(fraction)); // 0\nb.set(2);\nconsole.log(get(fraction)); // 0.5\n```\n\n## Caveats\n\n1. Always use stores inside `reactive` because `reactive` [does not work with regular variables](https://github.com/olehmisar/svelte-reactive/issues/2) (even if they are defined in a svelte component). I.e., this will not work:\n\n   ```js\n   const numerator = writable(1);\n   let denominator = 0; // not a store\n   const fraction = reactive(($) => {\n     if (denominator === 0) {\n       return 0;\n     }\n     return $(numerator) / denominator;\n   });\n   // this will print 0 once and never again\n   fraction.subscribe((value) => console.log(value));\n   // this will not re-compute `fraction`\n   denominator = 2;\n   // even updating `numerator` will not re-compute `fraction`\n   // because `$(numerator)` was never called inside `fraction`\n   numerator.set(5);\n   ```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 1],
		[3596, 16],
		[3603, 14],
		[3610, 12],
		[3624, 25],
		[3631, 4],
		[3638, 8],
		[3645, 5],
		[3652, 16],
		[3659, 7],
		[3666, 16],
		[3673, 1],
		[3680, 4],
		[3687, 4],
		[3694, 1],
		[3708, 73],
		[3715, 47],
		[3722, 6],
		[3729, 3],
		[3736, 1],
		[3743, 28],
		[3750, 13],
		[3757, 23],
		[3764, 18],
		[3771, 34],
		[3778, 41],
		[3785, 59],
		[3792, 36],
		[3799, 17],
		[3806, 19],
		[3813, 8],
		[3820, 20],
		[3827, 16],
		[3834, 12],
		[3841, 46],
		[3848, 4],
		[3855, 2],
		[3862, 1],
		[3876, 10],
		[3883, 2],
		[3890, 9],
		[3897, 1],
		[3904, 1],
		[3911, 12],
		[3932, 12],
		[3946, 1],
		[3960, 1],
		[3981, 10],
		[3988, 1],
		[3995, 34],
		[4009, 1],
		[4023, 2],
		[4037, 16],
		[4044, 8],
		[4051, 5],
		[4065, 1],
		[4072, 74],
		[4079, 111],
		[4086, 141],
		[4093, 57],
		[4100, 285],
		[4107, 32],
		[4114, 202],
		[4121, 313],
		[4128, 381]
	],
	"esm": true,
	"cjs": false
}
