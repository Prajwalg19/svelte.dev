{
	"name": "svelte-awesome-pug",
	"description": "Enhance pug html-templates for Svelte components.",
	"repo_url": "https://github.com/refzlund/svelte-awesome-pug",
	"authors": ["refzlund"],
	"homepage": "https://github.com/Refzlund/svelte-awesome-pug",
	"downloads": 45,
	"updated": "2023-01-05T09:50:04.639Z",
	"tags": ["tooling"],
	"github_stars": 9,
	"typescript": true,
	"version": "0.1.3",
	"svelte_range": "^3.55.0",
	"kit_range": "1.0.1",
	"last_rune_check_version": "0.1.3",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-awesome-pug",
				"version": "0.1.3",
				"size": 19978
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-awesome-pug\r\nUsing the [Svelte Preprocessor to process Pug](https://github.com/sveltejs/svelte-preprocess/blob/main/docs/preprocessing.md#pug)  can look a bit funky.\r\n\r\nsvelte-awesome-pug unfunkies it in a good way. [Here's a video](https://youtu.be/em1i-D7IpD4?t=19) showcasing the ease of use working with svelte-awesome-pug\r\n\r\nPlans\r\n- [Maybe create a language server extension](https://github.com/Refzlund/svelte-awesome-pug#maybe-create-a-language-server-extension)\r\n- [Allow Svelte statements {#if ...} and {@const ...} in a \"non-recursively-indented way\" (unlike +if(...))](https://github.com/Refzlund/svelte-awesome-pug#allow-svelte-statements-if--in-a-non-recursively-indented-way-unlike-if)\r\n\r\n## Install\r\n\r\n```\r\nnpm i -D svelte-awesome-pug\r\n```\r\n\r\nWrap the svelte preprocessor with the awesome-pug pre and post processors \r\n\r\n```ts\r\nimport { awesomePugPre, awesomePugPost } from 'svelte-awesome-pug'\r\n\r\n/** @type {import('@sveltejs/kit').Config} */\r\nconst config = {\r\n    preprocess: [\r\n        awesomePugPre,\r\n        preprocess(),\r\n        awesomePugPost\r\n    ],\r\n```\r\n\r\n## Incompatibility\r\nI'm a [TAB] kind of guy, so I haven't supported (or thought of) space indentation yet. The code is pretty simple so feel free to make a pull-request! Take a look at [awesome-pug-pre.js](https://github.com/Refzlund/svelte-awesome-pug/blob/master/src/lib/awesome-pug-pre.js)\r\n\r\n## Key features\r\n\r\nIs compatible with old-style pug. So any existing pug code shouldn't break.\r\n\r\n### No need for != and quotes\r\n```pug\r\n    //- pug\r\n    .some-div(on:click!='{() => ...}')\r\n```\r\n```pug\r\n    //- awesome-pug\r\n    .some-div(on:click={() => ...})\r\n```\r\n\r\n### Indented components\r\n```pug\r\n    //- Without awesome-pug\r\n    Input.Text()\r\n    //- Becomes  <Input class=\"Text\">\r\n```\r\n```pug\r\n    //- With awesome-pug\r\n    Input.Text()\r\n    // Becomes   <Input.Text>\r\n```\r\n\r\n### Spreading objects\r\n```pug\r\n    .some-div('{...$$restProps}')\r\n    //         ^ ts(-1) error\r\n```\r\n```pug\r\n    .some-div(...$$restProps)\r\n    // Results in <div class=\"some-div\" {...$$restProps}>\r\n```\r\n\r\n## More\r\nOkay, so making pug not look like ðŸ’© is great. Now ... here are some personal additions of functionality (like them or not)\r\n\r\n### `export:`\r\nExport will export/(forward) the attribute for you. Like on:click forwards events, export:class will allow the component to retrieve the `class` attribute:\r\n\r\n```pug\r\n    //- Component.svelte\r\n    .some-div(export:class)\r\n```\r\n```pug\r\n    Component.another-class\r\n```\r\n\r\nThe attribute input will be default value. (With an exception of `export:class` and `export:style` which will always have the default value of `''` if you don't provide any)\r\n\r\nSo..\r\n```pug\r\n    //- Component.svelte\r\n    Table(export:data)\r\n    //- Becomes    let __export_data__\r\n\r\n    ...\r\n    \r\n    Component\r\n    //- Component was created without the export `data`\r\n    \r\n    \r\n\r\n\r\n    //- Component.svelte\r\n    Table(export:data={undefined})\r\n    //- Becomes    let __export_data__ = undefined\r\n\r\n    ...\r\n    \r\n    Component\r\n```\r\n\r\n#### Exporting strings\r\nThere are two ways to deal with exported strings:\r\n```pug\r\n    Table(export:header='Some header')\r\n\t//- Becomes    \r\n\t//-            let __export_header__ = ''\r\n\t//-            Table(header='Some header {__export_header__}')\r\n\r\n\tTable(export:header={'Some header'})\r\n    //- Becomes    \r\n\t//-            let __export_header__ = 'Some header'\r\n\t//-            Table(header!='{__export_header__}')\r\n```\r\n\r\n### `style:` and `class:` directives\r\nYou can't normally do\r\n```pug\r\n    Component(class:active class:somebool)\r\n    //- \"Can't use class directive on components\"\r\n```\r\n\r\nHowever, with ***svelte-awesome-pug*** we can add a space in-between AND have multiple like so:\r\n```pug\r\n    Component(class :active :somebool)\r\n    //- Becomes   <Component class=\"{active ? 'active' : ''}  {somebool ? 'somebool' : ''}\">\r\n\r\n    Component(class :enabled={isEnabled})\r\n    //- Becomes   <Component class=\"{isEnabled ? 'enabled' : ''}>\r\n```\r\n\r\nSame with style! (or should I say... IN STYLEðŸ•ºâœ¨)\r\n```pug\r\n    Component(\r\n        export:style\r\n            :--some-variable=\"{wawiable}px\"\r\n            :margin=\"10px\"\r\n    )\r\n```\r\n\r\n### --variables\r\nSpeaking of style. You can assign CSS variables directly as attributes\r\n```pug\r\n    #some-div(\r\n        --some-variable=\"{wariable}px\"\r\n    )\r\n```\r\n\r\n~~my cat is snoring loudly~~\r\n\r\n### svelte:fragment shortcut\r\nIf you wanna skip writing the whole damn fragmentely sveltery text, you can just\r\n```pug\r\n    Component\r\n        (slot=\"Some named slot\")\r\n            .some-div\r\n    \r\n    //- Becomes <svelte:fragment slot=\"Some named slot\">...\r\n```\r\n\r\n### Wraps `true`, `false`, `numbers`, `arrays` into `{ }`\r\n```pug\r\n    div(\r\n        some-bool=true\r\n        another-bool=false\r\n        some-num=123.23\r\n        some-array=[1, 2, 3]\r\n    )\r\n\r\n    //- Becomes   \r\n        <div  \r\n            some-bool={true}\r\n            another-bool={false}\r\n            some-num={123.23}\r\n            some-array={[1, 2, 3]}\r\n        >\r\n```\r\n\r\n### You can comment out attributes\r\nIt removes the assigned value and indented items (relative to the commented part). \r\n```pug\r\n    .some-div(\r\n        //- some-attribute={() => {\r\n            ...\r\n        }}\r\n        another-attribute={...}\r\n        //- export:class\r\n            :some\r\n            :class\r\n    )\r\n\r\n    //- Becomes  <div class=\"some-div\" another-attribute={...}>\r\n```\r\n\r\n## Footnotes\r\n\r\n### Maybe create a language server extension\r\nDefinitely possible, but I have a tight schedule, so that might first see the light of day in 2024.\r\n\r\n### Allow Svelte statements {#if ...} in a \"non-recursively-indented way\" (unlike +if(...))\r\n\r\nThis\r\n\r\n```pug\r\n<template lang=\"pug\">\r\n    {#if value > 10}\r\n        span Value is above 10!!ðŸš€âœ¨\r\n\r\n    {#if value < 10}\r\n        span Value is below 10\r\n\r\n</template>\r\n```\r\n\r\nResults in <br>\r\n`</template> attempted to close an element that was not opents(-1)`\r\n<br> ... and I personally don't want errors in my .svelte files unless there is one ...\r\n\r\nSo this feature will be implemented if this gets resolved.\r\n\r\nThe feature specifically will look like\r\n\r\n```\r\n\r\n    {#if value}\r\n        ...\r\n    {:else if}\r\n        ...\r\n    {:else}\r\n        ...\r\n    \r\n    //- Becomes\r\n    +if('value')\r\n        ...\r\n        +elseif('...')\r\n            ...\r\n            +else\r\n                ...\r\n```\r\n\r\nand support all {#...}\r\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 5],
		[3596, 13],
		[3603, 7],
		[3610, 35],
		[3617, 20],
		[3624, 11],
		[3631, 46],
		[3638, 23],
		[3645, 6],
		[3652, 3],
		[3659, 4],
		[3666, 6],
		[3673, 18],
		[3680, 6],
		[3687, 33],
		[3694, 6],
		[3701, 6],
		[3708, 14],
		[3715, 6],
		[3736, 7],
		[3743, 3],
		[3750, 11],
		[3757, 8],
		[3764, 59],
		[3771, 65],
		[3778, 43],
		[3785, 57],
		[3792, 98],
		[3799, 21],
		[3806, 15],
		[3813, 15],
		[3820, 14],
		[3827, 12],
		[3834, 19],
		[3841, 80],
		[3848, 48],
		[3855, 36],
		[3862, 44],
		[3869, 27],
		[3876, 5],
		[3883, 17],
		[3890, 21],
		[3897, 8],
		[3904, 24],
		[3911, 62],
		[3918, 29],
		[3925, 45],
		[3932, 16],
		[3939, 69],
		[3946, 60],
		[3953, 97],
		[3960, 44],
		[3967, 45],
		[3974, 33],
		[3981, 25],
		[3988, 52],
		[3995, 22],
		[4002, 21],
		[4009, 4],
		[4016, 49],
		[4023, 20],
		[4030, 264],
		[4037, 87],
		[4044, 59],
		[4051, 50],
		[4058, 28],
		[4065, 11],
		[4072, 18],
		[4079, 24],
		[4086, 23],
		[4093, 2],
		[4100, 14],
		[4107, 27],
		[4114, 45],
		[4121, 63],
		[4128, 43]
	]
}
