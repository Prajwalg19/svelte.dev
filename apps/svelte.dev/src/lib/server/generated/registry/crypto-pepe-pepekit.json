{
	"name": "@crypto-pepe/pepekit",
	"description": "Develop UI/UX components for Svelte with PepeKit.",
	"repo_url": "https://github.com/crypto-pepe/pepekit",
	"authors": ["stupid_boar"],
	"homepage": "https://github.com/crypto-pepe/pepekit#readme",
	"downloads": 16,
	"updated": "2022-01-11T20:04:31.903Z",
	"tags": ["ui"],
	"typescript": true,
	"version": "0.0.38",
	"svelte_range": "^3.44.0",
	"last_rune_check_version": "0.0.38",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@crypto-pepe/pepekit",
				"version": "0.0.38",
				"size": 398057
			}
		],
		"dependencies": [],
		"circular": []
	},
	"legacy_svelte": true,
	"readme": "*Psst — looking for a more complete solution? Check out [SvelteKit](https://kit.svelte.dev), the official framework for building web applications of all sizes, with a beautiful development experience and flexible filesystem-based routing.*\n\n*Looking for a shareable component template instead? You can [use SvelteKit for that as well](https://kit.svelte.dev/docs#packaging) or the older [sveltejs/component-template](https://github.com/sveltejs/component-template)*\n\n---\n\n# svelte app\n\nThis is a project template for [Svelte](https://svelte.dev) apps. It lives at https://github.com/sveltejs/template.\n\nTo create a new project based on this template using [degit](https://github.com/Rich-Harris/degit):\n\n```bash\nnpx degit sveltejs/template svelte-app\ncd svelte-app\n```\n\n*Note that you will need to have [Node.js](https://nodejs.org) installed.*\n\n\n## Get started\n\nInstall the dependencies...\n\n```bash\ncd svelte-app\nnpm install\n```\n\n...then start [Rollup](https://rollupjs.org):\n\n```bash\nnpm run dev\n```\n\nNavigate to [localhost:5000](http://localhost:5000). You should see your app running. Edit a component file in `src`, save it, and reload the page to see your changes.\n\nBy default, the server will only respond to requests from localhost. To allow connections from other computers, edit the `sirv` commands in package.json to include the option `--host 0.0.0.0`.\n\nIf you're using [Visual Studio Code](https://code.visualstudio.com/) we recommend installing the official extension [Svelte for VS Code](https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode). If you are using other editors you may need to install a plugin in order to get syntax highlighting and intellisense.\n\n## Building and running in production mode\n\nTo create an optimised version of the app:\n\n```bash\nnpm run build\n```\n\nYou can run the newly built app with `npm run start`. This uses [sirv](https://github.com/lukeed/sirv), which is included in your package.json's `dependencies` so that the app will work when you deploy to platforms like [Heroku](https://heroku.com).\n\n\n## Single-page app mode\n\nBy default, sirv will only respond to requests that match files in `public`. This is to maximise compatibility with static fileservers, allowing you to deploy your app anywhere.\n\nIf you're building a single-page app (SPA) with multiple routes, sirv needs to be able to respond to requests for *any* path. You can make it so by editing the `\"start\"` command in package.json:\n\n```js\n\"start\": \"sirv public --single\"\n```\n\n## Using TypeScript\n\nThis template comes with a script to set up a TypeScript development environment, you can run it immediately after cloning the template with:\n\n```bash\nnode scripts/setupTypeScript.js\n```\n\nOr remove the script via:\n\n```bash\nrm scripts/setupTypeScript.js\n```\n\nIf you want to use `baseUrl` or `path` aliases within your `tsconfig`, you need to set up `@rollup/plugin-alias` to tell Rollup to resolve the aliases. For more info, see [this StackOverflow question](https://stackoverflow.com/questions/63427935/setup-tsconfig-path-in-svelte).\n\n## Deploying to the web\n\n### With [Vercel](https://vercel.com)\n\nInstall `vercel` if you haven't already:\n\n```bash\nnpm install -g vercel\n```\n\nThen, from within your project folder:\n\n```bash\ncd public\nvercel deploy --name my-project\n```\n\n### With [surge](https://surge.sh/)\n\nInstall `surge` if you haven't already:\n\n```bash\nnpm install -g surge\n```\n\nThen, from within your project folder:\n\n```bash\nnpm run build\nsurge public my-project.surge.sh\n```\n",
	"downloads_history": [
		[3589, 3],
		[3596, 74],
		[3603, 2],
		[3610, 4],
		[3617, 1],
		[3631, 6],
		[3638, 1],
		[3645, 1],
		[3659, 3],
		[3666, 37],
		[3687, 1],
		[3694, 1],
		[3708, 1],
		[3715, 38],
		[3736, 2],
		[3757, 1],
		[3764, 2],
		[3771, 37],
		[3778, 1],
		[3785, 1],
		[3799, 2],
		[3806, 2],
		[3813, 2],
		[3820, 1],
		[3834, 1],
		[3841, 4],
		[3848, 35],
		[3855, 182],
		[3862, 75],
		[3869, 5],
		[3876, 39],
		[3883, 3],
		[3890, 3],
		[3897, 9],
		[3904, 93],
		[3911, 4],
		[3918, 2],
		[3932, 5],
		[3939, 2],
		[3946, 3],
		[3953, 1],
		[3960, 37],
		[3967, 2],
		[3974, 2],
		[3981, 1],
		[3988, 1],
		[4009, 78],
		[4016, 39],
		[4023, 6],
		[4030, 19],
		[4037, 56],
		[4044, 8],
		[4051, 3],
		[4058, 1],
		[4065, 1],
		[4072, 1],
		[4086, 38],
		[4093, 249],
		[4100, 36],
		[4107, 5],
		[4114, 16],
		[4121, 13],
		[4128, 2]
	],
	"esm": true,
	"cjs": false
}
