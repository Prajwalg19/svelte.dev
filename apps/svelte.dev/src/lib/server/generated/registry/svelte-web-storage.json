{
	"name": "svelte-web-storage",
	"description": "Persist Svelte store values to localStorage or sessionStorage.",
	"repo_url": "https://github.com/captaincodeman/svelte-web-storage",
	"authors": ["captaincodeman"],
	"homepage": "https://captaincodeman.github.io/svelte-web-storage/",
	"downloads": 23,
	"updated": "2024-04-27T18:59:51.449Z",
	"tags": ["miscellaneous"],
	"github_stars": 14,
	"typescript": true,
	"version": "0.0.8",
	"svelte_range": "^4.0.0 || ^5.0.0",
	"kit_range": "^2.5.7",
	"last_rune_check_version": "0.0.8",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-web-storage",
				"version": "0.0.8",
				"size": 11152
			},
			{
				"name": "esm-env",
				"version": "1.2.2",
				"size": 3784
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# svelte-web-storage\n\nA [Svelte writable store](https://svelte.dev/docs/svelte-store#writable) that saves values to [Web-Storage ](https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API). Great for persisting settings or preference objects within your Svelte apps. There are lots of packages available that do similar things, see the [comparison](#comparison) for why you might want to use this particular lib.\n\n## Features\n\n- ✅ Tiny size - just 656 bytes minified / 417 bytes minified & gzipped\n- ✅ Supports `localStorage` for persistence and cross-tab synchronization\n- ✅ Supports `sessionStorage` for independent per-tab values\n- ✅ Store objects, primitive values, and arrays\n- ✅ Customizable serialization (uses JSON by default)\n- ✅ New default properties automatically added to persisted values\n- ✅ Server-side-rendering (SSR) compatible\n\n## Usage\n\n### Installation\n\nInstall using your package manager of choice, e.g.\n\n    pnpm i -D svelte-web-storage\n\n### LocalStorage\n\nImport and create a `Writable` store, just as you would with the default Svelte `writable` but passing in a key name of storage before the default value(s).\n\n```ts\nimport { web_storage } from 'svelte-web-storage'\n\nexport const settings = web_storage('settings, {\n  page_size: 24,\n  currency: 'USD',\n  language: 'en-US',\n})\n```\n\nYour settings can be accessed throughout your app and will be persisted to localStorage and changes to settings will be synchronized across browser tabs.\n\n### SessionStorage\n\nTo use `sessionStorage` which isn't persisted or synchronized across tabs, use a 3rd options parameter to set `persist` to `false`:\n\n```ts\nimport { web_storage } from 'svelte-web-storage'\n\nexport const settings = web_storage('settings, {\n  page_size: 24,\n  currency: 'USD',\n  language: 'en-US',\n}, { persist: false }) // <== disables persistence\n```\n\n### Custom Serialization\n\nPersisted data is stored using `JSON.parse` and `JSON.stringify` but this can be overridden by passing in a `serializer` as part of the 3rd options parameter. This might be because you have some legacy format that you want to use:\n\n```ts\nimport { web_storage } from 'svelte-web-storage'\n\nexport const settings = web_storage('settings, {\n  page_size: 24,\n  currency: 'USD',\n  language: 'en-US',\n}, {\n  serializer: {\n    parse(text: string) {\n      const parts = text.split(':');\n      return {\n        page_size: parseInt(parts[0]),\n        currency: parts[1],\n        language: parts[2]\n      };\n    },\n    stringify(value) {\n      return `${value.page_size}:${value.currency}:${value.language}`;\n    }\n  }\n})\n```\n\n### Upgrading Objects\n\nIf you add new properties to your settings object, the new default values of those properties will be automatically added to any persisted values. Adding a `theme` property to the previous example would set the store value to `system`, but leave any existing customized properties unchanged. No need to manually handle properties missing from the persisted state, or your settings having possibly undefined values.\n\n```ts\nimport { web_storage } from 'svelte-web-storage'\n\nexport const settings = web_storage('settings, {\n  page_size: 24,\n  currency: 'USD',\n  language: 'en-US',\n  theme: 'system',\n})\n```\n\n## Comparison (work in progress)\n\nThere are lots of packages that do similar things to this lib, so why might you want to use this one? I've tried to put together a comparison of all the ones I could find - I'm not claiming it's an exhaustive or a 100% accurate list, so let me know if there is something I've missed or you think is incorrect.\n\nThe criteria for comparing includes:\n\n- **Byte size** of package\n  - what impact will using the lib have on your application bundle size (using https://bundlephobia.com/)\n- **Correctness**\n  - stores should correctly handle unsubscribing to prevent bugs and memory leaks\n- **Upgradeable**\n  - does it handle adding new properties without overwriting the defaults?\n- **Server-Side-Rendering** (SSR) compatibility\n  - older libs that pre-date SvelteKit often lack support for SSR\n- **Svelte Compatible**\n  - Can it be used outside of SvelteKit (does it use any $app dependencies)\n- **Web-Storage**\n  - are both localStorage _and_ sessionStorage types of web-storage supported?\n- **Synchronization of browser tabs**\n  - are changes in one tab reflected in another when using localStorage?\n- **objects, primitive values, and Arrays**\n  - can it be used with primitive values, objects, and arrays\n- **TypeScript** Support\n  - are typings provided\n- **Custom Serialization**\n  - JSON is a sensible default but can it be overridden?\n- **Handsomeness** of the author\n  - that's a joke, to see if anyone read this far ...\n\n| Name                                | Version | Minified | GZipped | Correct | Upgrade | SSR | SK Deps | Session | Sync | Values | TS  | Serialize |\n| ----------------------------------- | ------- | -------: | ------: | :-----: | :-----: | :-: | :-----: | :-----: | :--: | :----: | :-: | :-------: |\n| svelte-web-storage                  | 0.0.2   |     656B |    417B |   ✅    |   ✅    | ✅  |   ✅    |   ✅    |  ✅  |   ✅   | ✅  |    ✅     |\n| svelte-persisted-store              | 0.7.0   |   1.24kB |    650B |   ✅    |   ❓    | ❓  |   ❓    |   ❓    |  ❓  |   ❓   | ❓  |    ❓     |\n| svelte-persistent-store             | 0.1.6   |    1.7kB |    837B |   ✅    |   ❓    | ❓  |   ❓    |   ❓    |  ❓  |   ❓   | ❓  |    ❓     |\n| svelte-backed-store                 | 1.1.1   |    3.5kB |  1.25kB |   ✅    |   ❓    | ❓  |   ❓    |   ❓    |  ❓  |   ❓   | ❓  |    ❓     |\n| svelte-persistent-writable          | 1.1.6   |    1.4kB |    631B |   ✅    |   ❓    | ❓  |   ❓    |   ❓    |  ❓  |   ❓   | ❓  |    ❓     |\n| svelte-localstorage-writable        | 0.1.3   |     960B |    519B |   ✅    |   ❓    | ❓  |   ❓    |   ❓    |  ❓  |   ❓   | ❓  |    ❓     |\n| svelte-syncable                     | 1.0.4   |          |         |   ❌    |   ❓    | ❓  |   ❓    |   ❓    |  ❓  |   ❓   | ❓  |    ❓     |\n| svelte-storable                     | 1.0.4   |      1kB |    509B |   ✅    |   ❓    | ❌  |   ❓    |   ❓    |  ❓  |   ❓   | ❓  |    ❓     |\n| svelte-cached-store                 |         |          |         |   ❌    |   ❓    | ❓  |   ❓    |   ❓    |  ❓  |   ❓   | ❓  |    ❓     |\n| @macfja/svelte-persistent-store     | 2.4.1   |   19.9kB |   7.3kB |   ✅    |   ❓    | ❓  |   ❓    |   ❓    |  ❓  |   ❓   | ❓  |    ❓     |\n| @macfja/browser-storage-store       | 1.0.0   |    4.2kB |   1.9kB |   ✅    |   ❓    | ❓  |   ❓    |   ❓    |  ❓  |   ❓   | ❓  |    ❓     |\n| @n0n3br/svelte-persist-store        | 1.0.2   |    8.4kB |   2.9kB |   ✅    |   ❓    | ❓  |   ❓    |   ❓    |  ❓  |   ❓   | ❓  |    ❓     |\n| @babichjacob/svelte-localstorage    |         |          |         |   ✅    |   ❓    | ❓  |   ❓    |   ❓    |  ❓  |   ❓   | ❓  |    ❓     |\n| @typhonjs-svelte/simple-web-storage |         |          |         |   ✅    |   ❓    | ❓  |   ❓    |   ❓    |  ❓  |   ❓   | ❓  |    ❓     |\n| @thegrommet/svelte-syncable         | 2.0.0   |     846B |    447B |   ❌    |   ❓    | ❓  |   ❓    |   ❓    |  ❓  |   ❓   | ❓  |    ❓     |\n| @furudean/svelte-persistent-store   | 0.8.0   |     881B |    494B |   ✅    |   ❓    | ❓  |   ❓    |   ❓    |  ❓  |   ❓   | ❓  |    ❓     |\n\n### Methodology:\n\n- Check source-code for subscription handling pluse dependencies on SvelteKit.\n- Tested each library by importing, creating a test page, and seeing how it handled both SSR, objects vs values, adding properties, etc...\n- Used [Bundlephobia](https://bundlephobia.com/) to check the size of packages, falling back to published NPM distributed size.\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 486],
		[3603, 114],
		[3610, 98],
		[3617, 10],
		[3624, 10],
		[3631, 17],
		[3638, 12],
		[3645, 15],
		[3652, 18],
		[3659, 3],
		[3666, 24],
		[3673, 12],
		[3687, 5],
		[3694, 11],
		[3701, 12],
		[3708, 4],
		[3715, 11],
		[3722, 15],
		[3729, 36],
		[3736, 22],
		[3743, 20],
		[3750, 34],
		[3757, 16],
		[3764, 79],
		[3771, 38],
		[3778, 19],
		[3785, 7],
		[3792, 8],
		[3799, 12],
		[3806, 10],
		[3813, 18],
		[3820, 15],
		[3827, 39],
		[3834, 50],
		[3841, 29],
		[3848, 17],
		[3855, 45],
		[3862, 30],
		[3869, 36],
		[3876, 22],
		[3883, 27],
		[3890, 21],
		[3897, 21],
		[3904, 15],
		[3911, 16],
		[3918, 13],
		[3925, 7],
		[3932, 7],
		[3939, 11],
		[3946, 29],
		[3953, 12],
		[3960, 16],
		[3967, 30],
		[3974, 22],
		[3981, 18],
		[3988, 26],
		[3995, 24],
		[4002, 4],
		[4009, 10],
		[4016, 25],
		[4023, 89],
		[4030, 5],
		[4037, 25],
		[4044, 58],
		[4051, 40],
		[4058, 15],
		[4065, 8],
		[4072, 10],
		[4079, 3],
		[4086, 10],
		[4093, 13],
		[4100, 18],
		[4107, 34],
		[4114, 23],
		[4121, 20],
		[4128, 6],
		[4135, 17]
	]
}
