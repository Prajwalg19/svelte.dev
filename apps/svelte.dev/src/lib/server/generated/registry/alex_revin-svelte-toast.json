{
	"name": "@alex_revin/svelte-toast",
	"description": "Display toast notifications in Svelte apps.",
	"repo_url": "https://github.com/AlexRevin/svelte-toast",
	"authors": ["alex_revin"],
	"homepage": "https://zerodevx.github.io/svelte-toast/",
	"downloads": 8,
	"updated": "2021-09-22T13:29:34.181Z",
	"tags": ["ui"],
	"github_stars": 0,
	"typescript": true,
	"version": "0.5.4",
	"svelte_range": "^3.42.6",
	"last_rune_check_version": "0.5.4",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@alex_revin/svelte-toast",
				"version": "0.5.4",
				"size": 51127
			},
			{
				"name": "rollup-plugin-css-only",
				"version": "3.1.0",
				"size": 10712
			},
			{
				"name": "@rollup/pluginutils",
				"version": "4.2.1",
				"size": 50858
			},
			{
				"name": "picomatch",
				"version": "2.3.1",
				"size": 89952
			},
			{
				"name": "estree-walker",
				"version": "2.0.2",
				"size": 50243
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[2, 4]
		],
		"circular": []
	},
	"legacy_svelte": true,
	"readme": "[![npm (scoped)](https://img.shields.io/npm/v/@zerodevx/svelte-toast)](https://www.npmjs.com/package/@zerodevx/svelte-toast)\n[![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)\n\n# svelte-toast\n\n> Simple elegant toast notifications.\n\nA lightweight, unopinionated and performant toast notification component for modern web frontends in very little\nlines of code. Compiled, it's only **15kb** minified (**6kb** gzipped) and can be used in Vanilla JS, or as a\nSvelte component.\n\nBecause a demo helps better than a thousand API docs: https://zerodevx.github.io/svelte-toast/\n\n## Usage\n\nInstall the package:\n\n```bash\n$ npm i -D @zerodevx/svelte-toast\n```\n\nThe following are exported:\n\n*  `SvelteToast` as the toast container;\n*  `toast` as the toast emitter.\n\n### Svelte\n\nIf you're using this in a Svelte app, import the toast container and place it in your app shell.\n\n`App.svelte`:\n\n```html\n<script>\nimport { SvelteToast } from '@zerodevx/svelte-toast'\n\n// Optionally set default options here\nconst options = {\n  ...\n}\n</script>\n\n...\n<SvelteToast {options} />\n\n```\n\nUse anywhere in your app - just import the toast emitter.\n\n`MyComponent.svelte`:\n\n```html\n<script>\nimport { toast } from '@zerodevx/svelte-toast'\n</script>\n\n<button on:click={() => toast.push('Hello world!')}>EMIT TOAST</button>\n```\n\n### Vanilla JS\n\nFor any other application with a bundler, something like this should work:\n\n```js\nimport { SvelteToast, toast } from '@zerodevx/svelte-toast'\n\nconst app = new SvelteToast({\n  // Set where the toast container should be appended into\n  target: document.body,\n  props: {\n    options: {\n      // Optionally set default options here\n      ...\n    }\n  }\n})\n\ntoast.push('Hello world!')\n```\n\n### CDN\n\nOr if you prefer to go old-school javascript and a CDN:\n\n```html\n<head>\n  ...\n  <!-- Load `toast` and `SvelteToast` into global scope  -->\n  <script src=\"https://cdn.jsdelivr.net/npm/@zerodevx/svelte-toast@0\"></script>\n  <!-- Register the app -->\n  <script>\n    const toastApp = new SvelteToast({\n      // Set where the toast container should be appended into\n      target: document.body,\n      props: {\n        options: {\n          // Optionally set default options here\n          ...\n        }\n      }\n    })\n\n    // Now you can `toast` anywhere!\n    toast.push('Hello world!');\n  </script>\n</head>\n```\n\n## Theming\n\nIn general, use CSS variables - the following (self-explanatory) vars are exposed:\n\n```css\n._toastContainer {\n  top: var(--toastContainerTop, 1.5rem);\n  right: var(--toastContainerRight, 2rem);\n  bottom: var(--toastContainerBottom, auto);\n  left: var(--toastContainerLeft, auto);\n}\n\n._toastItem {\n  width: var(--toastWidth, 16rem);\n  height: var(--toastHeight, auto);\n  min-height: var(--toastMinHeight, 3.5rem);\n  margin: var(--toastMargin, 0 0 0.5rem 0);\n  background: var(--toastBackground, rgba(66,66,66,0.9));\n  color: var(--toastColor, #FFF);\n  box-shadow: var(--toastBoxShadow, 0 4px 6px -1px rgba(0,0,0,0.1),0 2px 4px -1px rgba(0,0,0,0.06));\n  border-radius: var(--toastBorderRadius, 0.125rem);\n}\n\n._toastMsg {\n  padding: var(--toastMsgPadding, 0.75rem 0.5rem);\n}\n\n._toastProgressBar {\n  background: var(--toastProgressBackground, rgba(33,150,243,0.75));\n}\n```\n\nSo to apply your custom theme globally, do something like:\n\n```html\n<style>\n:root {\n  --toastBackground: #ABCDEF;\n  --toastColor: #123456;\n  --toastHeight: 300px;\n  ...\n}\n</style>\n```\n\nTo apply CSS overrides to a particular Toast Item (on a per-toast basis), emit the toast with options:\n\n```js\ntoast.push('Yo!', {\n  theme: {\n    '--toastBackground': 'cyan',\n    '--toastColor': 'black',\n    ...\n  }\n})\n```\n\nwhere `theme` is an object containing one or more CSS var key/value pairs.\n\n### Create Your Own Toast Actions\n\nFor convenient composing, the recommended way is to create your own common toast actions by stubbing them out.\nFor example:\n\n`my-theme.js`\n\n```js\nimport { toast } from '@zerodevx/svelte-toast'\n\nexport const success = m => toast.push(m, {\n  theme: {\n    '--toastBackground': 'green',\n    '--toastColor': 'white',\n    '--toastProgressBackground': 'darkgreen'\n  }\n})\n\nexport const warning = m => toast.push(m, { theme: { ... } })\n\nexport const failure = m => toast.push(m, { theme: { ... } })\n```\n\nThen simply import these stubs in your consuming component:\n\n```js\nimport { success, warning, failure } from './my-theme'\n\n// do something, then\nsuccess('It works!')\n```\n\n### Rich HTML\n\nToast messages can be in rich HTML too - for example:\n\n```js\n// Definitely not spam\ntoast.push(`<strong>You won the jackpot!</strong><br>\n  Click <a href=\"#\" target=\"_blank\">here</a> for details! ðŸ˜›`)\n```\n\n### Custom Fonts\n\nIn a Svelte app, the easiest way to apply custom font styles is to wrap the toast container\nthen apply styles on the wrapper:\n\n```html\n<style>\n  .wrap {\n    font-family: Roboto, sans-serif;\n    font-size: 0.875rem;\n    ...\n  }\n  .wrap :global(strong) {\n    font-weight: 600;\n  }\n</style>\n\n<div class=\"wrap\">\n  <SvelteToast />\n</div>\n```\n\nIn Vanilla JS, simply apply your styles to the `._toastMsg` class:\n\n```css\n._toastMsg {\n  font-family: Roboto, sans-serif;\n  ...\n}\n```\n\n### New from `v0.4`\n\n#### Supporting Multiple Toast Containers\n\nIt's now easy to send toasts to different container targets within your app. For example:\n\n```html\n<script>\nimport { SvelteToast, toast } from '@zerodevx/svelte-toast'\n\n// Sends a toast to default toast container\ntoast.push('Yo!')\n\n// Sends a toast to \"new\" toast container\ntoast.push('Hey!', { target: 'new' })\n</script>\n\n<style>\n.wrap {\n  --toastContainerTop: 0.5rem;\n  --toastContainerRight: 2rem;\n  --toastContainerBottom: auto;\n  --toastContainerLeft: 2rem;\n  --toastWidth: 100%;\n  font-size: 0.875rem;\n  ...\n}\n</style>\n\n<!-- Default toast container -->\n<SvelteToast />\n\n<!-- Another toast container -->\n<div class=\"wrap\">\n  <!-- Declare container with a unique `target` name -->\n  <SvelteToast target=\"new\" options={{ duration: 8000, intro: { y: -64 } }} />\n</div>\n```\n\n#### Removing Multiple Toasts\n\n`pop()` now accepts a filter function.\n\n```js\n// Remove all toasts from \"new\" container\ntoast.pop(i => i.target !== 'new')\n\n// Or remove ALL active toasts from ALL containers\ntoast.pop(0)\n```\n\n#### Accepts Object as First Param\n\n`push()` and `set()` can also take an object as its first parameter.\n\n```js\nlet id = toast.push('Yo!', { duration: 2000 })\n\n// is semantically equivalent to\nid = toast.push({ msg: 'Yo!', duration: 2000 })\n\ntoast.set(id, { msg: 'Waddup!' })\n\n// is semantically equivalent to\ntoast.set({ id, msg: 'Waddup!' })\n```\n\n## Options\n\n```js\n// Default options\nconst options = {\n  duration: 4000,       // duration of progress bar tween\n  dismissable: true,    // allow dismiss with close button\n  initial: 1,           // initial progress bar value\n  progress: 0,          // current progress\n  reversed: false,      // insert new toast to bottom of stack\n  intro: { x: 256 },    // toast intro fly animation settings\n  theme: {}             // css var overrides\n}\n```\n\n## Toast API\n\n```js\nconst id = toast.push(message, { options })\ntoast.pop(id)\ntoast.set(id, { options })\n```\n\n## Development\n\nStandard Github [contribution workflow](https://gist.github.com/Chaser324/ce0505fbed06b947d962) applies.\n\n### Tests\n\nTesting is through [Cypress](https://www.cypress.io/). To run the tests headlessly:\n\n```\n$ npm run test\n```\n\n## Changelog\n\nPlease refer to the [releases](https://github.com/zerodevx/svelte-toast/releases) page.\n\n## License\n\nISC\n",
	"downloads_history": [
		[3589, 2],
		[3596, 14],
		[3603, 3],
		[3610, 1],
		[3631, 1],
		[3638, 1],
		[3645, 17],
		[3659, 5],
		[3666, 14],
		[3687, 4],
		[3694, 14],
		[3715, 30],
		[3722, 1],
		[3729, 3],
		[3736, 1],
		[3764, 3],
		[3771, 15],
		[3778, 2],
		[3785, 1],
		[3792, 1],
		[3799, 2],
		[3806, 2],
		[3813, 2],
		[3827, 2],
		[3834, 1],
		[3841, 1],
		[3855, 86],
		[3862, 29],
		[3869, 1],
		[3876, 16],
		[3890, 17],
		[3897, 2],
		[3904, 29],
		[3911, 2],
		[3918, 3],
		[3925, 1],
		[3932, 1],
		[3939, 4],
		[3946, 2],
		[3953, 15],
		[3960, 1],
		[3967, 11],
		[3974, 4],
		[3981, 2],
		[3988, 3],
		[3995, 28],
		[4002, 14],
		[4009, 1],
		[4016, 4],
		[4023, 6],
		[4030, 13],
		[4037, 10],
		[4044, 4],
		[4051, 2],
		[4058, 6],
		[4065, 1],
		[4072, 1],
		[4086, 44],
		[4093, 87],
		[4100, 23],
		[4107, 2],
		[4114, 8],
		[4121, 14],
		[4128, 17]
	],
	"esm": true,
	"cjs": false
}
