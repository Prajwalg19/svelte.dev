{
	"name": "svelte-apollo-client",
	"description": "Integrates Apollo GraphQL client with Svelte applications.",
	"repo_url": "https://github.com/unlocomqx/svelte-apollo-client",
	"authors": ["unlocomqx"],
	"homepage": "https://github.com/unlocomqx/svelte-apollo-client#readme",
	"downloads": 39,
	"updated": "2021-07-17T12:18:58.563Z",
	"tags": ["integration"],
	"github_stars": 12,
	"typescript": true,
	"version": "0.1.4",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "0.1.4",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-apollo-client",
				"version": "0.1.4",
				"size": 69856
			},
			{
				"name": "apollo-link-ws",
				"version": "1.0.20",
				"size": 17659
			},
			{
				"name": "apollo-link",
				"version": "1.2.14",
				"size": 100317
			},
			{
				"name": "apollo-utilities",
				"version": "1.3.4",
				"size": 567478
			},
			{
				"name": "@wry/equality",
				"version": "0.1.11",
				"size": 29214
			},
			{
				"name": "tslib",
				"version": "1.14.1",
				"size": 33965
			},
			{
				"name": "fast-json-stable-stringify",
				"version": "2.1.0",
				"size": 16959
			},
			{
				"name": "ts-invariant",
				"version": "0.4.4",
				"size": 16668
			},
			{
				"name": "zen-observable-ts",
				"version": "0.8.21",
				"size": 14129
			},
			{
				"name": "zen-observable",
				"version": "0.8.15",
				"size": 72504
			},
			{
				"name": "ws",
				"version": "7.5.10",
				"size": 122307
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[3, 4],
			[4, 5],
			[3, 6],
			[3, 7],
			[7, 5],
			[3, 5],
			[2, 7],
			[2, 5],
			[2, 8],
			[8, 5],
			[8, 9],
			[1, 5],
			[0, 10]
		],
		"circular": []
	},
	"readme": "# Svelte Apollo Client\n\n[<img src=\"https://img.shields.io/npm/v/svelte-apollo-client\">](https://www.npmjs.com/package/svelte-apollo-client)\n\nSvelte integration for Apollo GraphQL.\n\nHeavily based on [svelte apollo](https://github.com/timhall/svelte-apollo)\n\n## Install\n\n```shell\nyarn add svelte-apollo-client\n```\n\n### Additional packages (Peer dependencies)\n\n```shell\nyarn add @apollo/client graphql\n```\n\n## The client\n\n### Create the client\n\n```js\n// client.ts\nimport { InMemoryCache } from \"@apollo/client/core\";\nimport { SvelteApolloClient } from \"svelte-apollo-client\";\n\nexport const client = SvelteApolloClient({\n  uri: \"/graphql\",\n  cache: new InMemoryCache(),\n});\n```\n\n### Import the client in your component\n\n```js\nimport { client } from \"path/to/client\";\n\n// You can use svelte's setContext/getContext to make this client available to all sub-components\n// If you only intend to use on client for your entire app, then importing this client directly is fine\n```\n\n## Query\n\nQuery an Apollo client, returning a readable store of result values. Uses\nApollo's [`watchQuery`](https://www.apollographql.com/docs/react/api/apollo-client.html#ApolloClient.watchQuery)\n, for fetching from the network and watching the local cache for changes. If the client is hydrating\nafter SSR, it attempts a `readQuery` to synchronously check the cache for values.\n\n```text\nclient.query(document[, options])\n```\n\n```svelte\n<script>\n  import { client } from \"$lib/client\";\n  import { gql } from \"@apollo/client/core\";\n\n  let rates;\n\n  function getRates() {\n    rates = client.query(gql`\n      query GetRates {\n        rates(currency: \"USD\") {\n          currency,\n          rate,\n        }\n      }\n    `);\n  }\n</script>\n\n<button on:click={getRates}>Get rates</button>\n\n{#if rates}\n  {#if $rates.loading}\n    Loading...\n  {:else if $rates.error}\n    Error: {$rates.error.message}\n  {:else}\n    <ul>\n      {#each $rates.data.rates.slice(0, 5) as rate}\n        <li>\n          1 USD = {rate.rate} {rate.currency}\n        </li>\n      {/each}\n    </ul>\n  {/if}\n{/if}\n```\n\nReactive variables are supported with `refetch`:\n\n```svelte\n<script>\n  import { client } from \"$lib/client\";\n  import { SEARCH_BY_AUTHOR } from \"./queries\";\n\n  export let author;\n  let search = \"\";\n\n  const books = client.query(SEARCH_BY_AUTHOR, {\n    variables: { author, search },\n  });\n\n  // `books` is refetched when author or search change\n  $: books.refetch({ author, search });\n</script>\n\nAuthor: {author}\n<label>Search <input type=\"text\" bind:value=\"{search}\" /></label>\n\n<ul>\n  {#if $books.loading}\n    <li>Loading...</li>\n  {:else if $books.error}\n    <li>ERROR: {$books.error.message}</li>\n  {:else if $books.data}\n    {#each $books.data.books as book (book.id)}\n      <li>{book.title}</li>\n    {/each}\n  {:else}\n    <li>No books found</li>\n  {/if}\n</ul>\n```\n\n## Mutate\n\nPrepare a GraphQL mutation with the Apollo client, using\nApollo's [mutate](https://www.apollographql.com/docs/react/api/apollo-client.html#ApolloClient.mutate)\n.\n\n```text\nclient.mutate(document[, options])\n```\n\n```svelte\n<script>\n  import { gql } from '@apollo/client/core';\n  import { client } from './graphql/client';\n\n  let mutation;\n\n  async function createCustomer () {\n    mutation = null;\n    mutation = await client.mutate(gql`mutation customerCreate($input: CustomerInput!) {\n      customerCreate(\n        input: $input\n      )\n      {\n        customer {\n          id\n          displayName\n          email\n        }\n        userErrors {\n          field\n          message\n        }\n      }\n    }`, {\n      variables: {\n        input: {\n          firstName: \"name\",\n          lastName: \"lastname\",\n          email: \"email@email.com\"\n        }\n      }\n    });\n  }\n</script>\n\n<div>\n  <button on:click={createCustomer}>Create customer</button>\n  <div>\n    {#if mutation}\n      {#if mutation.data.customerCreate.customer}\n        <ul>\n          <li>ID: {mutation.data.customerCreate.customer.id}</li>\n          <li>Customer: {mutation.data.customerCreate.customer.displayName}</li>\n          <li>Email: {mutation.data.customerCreate.customer.email}</li>\n        </ul>\n      {:else if mutation.data.customerCreate.userErrors}\n        <ul style=\"color: red\">\n          {#each mutation.data.customerCreate.userErrors as error}\n            <li>{error.message}</li>\n          {/each}\n        </ul>\n      {/if}\n    {/if}\n  </div>\n</div>\n```\n\n## Subscribe\n\nSubscribe using an Apollo client, returning a store that is compatible with `{#await $...}`. Uses\nApollo's [subscribe](https://www.apollographql.com/docs/react/api/apollo-client#ApolloClient.subscribe)\n.\n\n```text\nclient.subscribe(document[, options])\n```\n\n```svelte\n<script>\n  import { client } from './graphql/client';\n  import { NEW_BOOKS } from \"./queries\";\n\n  const newBooks = client.subscribe(NEW_BOOKS);\n</script>\n\n{#if $newBooks.loading}\n  Waiting for new books...\n{:else if $newBooks.data}\n  New Book: {$newBooks.data.book}\n{/if}\n```\n\n## Restore\n\nRestore a previously executed query (e.g. via preload) into the Apollo cache.\n\n```svelte\n<script context=\"module\">\n  import { client } from \"$lib/client\";\n  import { GET_BOOKS } from \"./queries\";\n\n  export async function preload() {\n    return {\n      preloaded: await client.query({ query: GET_BOOKS }),\n    };\n  }\n</script>\n\n<script>\n  import { client } from \"$lib/client\";\n\n  export let preloaded;\n\n  // Load preloaded values into client's cache\n  client.restore(GET_BOOKS, preloaded);\n</script>\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 3],
		[3596, 20],
		[3603, 18],
		[3610, 22],
		[3617, 13],
		[3624, 3],
		[3631, 10],
		[3638, 28],
		[3645, 3],
		[3652, 1],
		[3659, 3],
		[3666, 13],
		[3673, 2],
		[3680, 1],
		[3687, 1],
		[3694, 11],
		[3701, 5],
		[3708, 10],
		[3715, 14],
		[3722, 3],
		[3729, 15],
		[3736, 8],
		[3743, 12],
		[3750, 3],
		[3757, 11],
		[3764, 31],
		[3771, 18],
		[3778, 8],
		[3785, 16],
		[3792, 6],
		[3799, 10],
		[3806, 8],
		[3813, 1],
		[3820, 14],
		[3827, 3],
		[3834, 2],
		[3841, 4],
		[3848, 2],
		[3855, 62],
		[3862, 5],
		[3869, 1],
		[3883, 3],
		[3890, 17],
		[3897, 1],
		[3904, 8],
		[3911, 3],
		[3918, 4],
		[3925, 5],
		[3932, 1],
		[3939, 14],
		[3946, 31],
		[3953, 1],
		[3960, 6],
		[3967, 1058],
		[3974, 62],
		[3981, 750],
		[3995, 3],
		[4002, 9],
		[4009, 14],
		[4016, 300],
		[4023, 339],
		[4030, 29],
		[4037, 13],
		[4044, 9],
		[4051, 6],
		[4058, 1],
		[4065, 3],
		[4072, 3],
		[4079, 4],
		[4086, 27],
		[4093, 20],
		[4100, 16],
		[4107, 6],
		[4114, 39],
		[4121, 12],
		[4128, 8]
	],
	"esm": false,
	"cjs": true
}
