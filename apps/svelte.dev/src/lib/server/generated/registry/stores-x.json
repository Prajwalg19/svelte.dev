{
	"name": "stores-x",
	"description": "Implements minimal Vuex-like state management for Svelte.",
	"repo_url": "https://github.com/Anyass3/stores-x",
	"authors": ["anyass"],
	"homepage": "https://github.com/Anyass3/stores-x#readme",
	"downloads": 16,
	"updated": "2021-08-08T15:15:20.204Z",
	"tags": ["miscellaneous"],
	"github_stars": 6,
	"typescript": false,
	"version": "0.0.872",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "0.0.872",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "stores-x",
				"version": "0.0.872",
				"size": 49048
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# stores-x\n\nThis is inspired by [Vuex](https://github.com/vuejs/vuex)\n\nIt's for now a minimal implementation of the vuex\n\nIt uses the svelte store( or your own custom svelte store)\n\nIt makes working with svelte stores somewhat clean and organised\n\nAlso the compiled version should be able to work in any other js web app(not tested yet)\n\n# installation\n\n`npm install stores-x`\n\n# Also you can try cdn\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/stores-x/dist/index.min.js\"><script>\n```\n\nfor old browsers\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/stores-x/dist/old.index.min.js\"><script>\n```\n\nmodule\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/stores-x/dist/index.min.mjs\"><script>\n```\n\n# Usage\n\n> [check out the svelte relp demo](https://svelte.dev/repl/3916c946d06e4289b28992ea625c5092?version=3.31.0)\n\n> it should be similar in other js frameworks(not tested yet)\n\n# API\n\n### store.state\n\neach individual state defaults as a **writable svelte store** but with an additional `get` property to get the current state value.\n\nexample: `storeItem.get()` // gets current value by making a temporal store subscription\n\n### store.mutations\n\nThey mutate the state values. Simply put they change or set state values. The are funtions.\n\ndeclared like This :\n\n```javascript\nmutationName(state,...args){}\n```\n\nrun as\n\n```javascript\ncommit('mutationName', val);\nor;\nmutationName(val);\n```\n\n### store.actions\n\nThe do tasks like any other function. They can **commit** 'store.mutations' also can **dispatch** store.actions.\n\ndeclared like This :\n\n```javascript\nactionName({state, commit, dispatch, g },...args){}\n```\n\nrun as\n\n```javascript\ndispatch('actionName', ...args);\nor;\nactionName(...args);\n```\n\n### store.getters\n\nThey are used to get state values or any other custom one\n\ndeclared like This :\n\n```javascript\ngetterName(state,...args:Optional){}\n```\n\nrun as\n\n```javascript\ng('getterName');\nor;\ngetterName();\n```\n\n### store.noStore\n\nthis an array of state items which you don't wish to be a **any store**. that is the item will have a static state. **It's a config**\n\n### store.defaults\n\nThis controls the default settings (ie. whether to disable the default getter or mutation for a particular state). **It's a config**\n\n> if the default mutation for a particular state item is disabled the corresponding default action will also be disabled.\n\n`default: true`\nall items getters, mutations, actions will be created automatically. This is the default`\n\nor\n\n```js\ndefault: {\n  item1:true,//getters, mutations, actions will be created automatically\n  item2:{getters: false},// mutations, actions will be created automatically\n  item3:false// no default getters, mutations, actions will be created\n  }\n```\n\n### store.storeType\n\n**It's a config**\nthis declares the type of store you want for an storeitem\n\n`storeType: 'writable' // all items will be writable. This is the default` or\n`storeType: {item1:'writable',item2:'sessionPersistantStore',item3:customStore} //an item's defaults to 'writable'`\n\noptions:\n\n- 'writable' => svelteWritable store with a get method\n- 'sessionPersistantStore' => uses sessionStorage but still reactive like any other svelte store\n- 'localPersistantStore' => uses localStorage but still reactive like any other svelte store\n- a custom store function\n\n### commit\n\nis a function that executes/runs a mutation\n\nlike:\n\n```javascript\ncommit('mutationName', val);\n```\n\n### dispatch\n\nis a function that executes/runs an action and returns Promise\n\nlike:\n\n```javascript\ndispatch('mutationName', ...args);\n```\n\n# Example\n\n```javascript\nimport storesX from 'stores-x';\n\nstore1 = {\n  noStore: ['apiKey'],\n  state: {\n    apiKey: 'string',\n  },\n  actions: {\n    doThatThing({ dispatch, state }) {\n      //doing it\n      dispatch('isLoggedIn', state.apiKey);\n      //state.apiKey.get() will be error since apiKey is not a store\n    },\n  },\n};\n\nstore2 = {\n  storeType: 'writable',\n  state: {\n    isLoggedIn: false,\n  },\n  getters: {\n    islogedIn(state) {\n      // this will be created be default unless disabled\n      return state.isLoggedIn;\n    },\n  },\n  mutations: {\n    isLoggedIn(state, val) {\n      // this will be created be default unless disabled\n      state.isLoggedIn.set(val);\n    },\n  },\n  actions: {\n    isLoggedIn({ state, commit, dispatch, g }, val) {\n      // this will be created be default unless disabled\n      // logging in\n      commit('isLoggedIn', val);\n    },\n  },\n};\n\nstore = storesX([store1, store2]);\n\napiKey = store.g('apiKey'); // apiKey is getter is created automatically by default\nisLoggedIn = store.g('isLoggedIn');\n\nconsole.log(apiKey); // logs => 'string'\n\nconsole.log(isLoggedIn.get()); // logs => true|false\n// or if in *.svelte\nconsole.log($isLoggedIn); // logs => true|false\n```\n\nif you want you can give the defaults a prefix\n\n```javascript\nstore = storesX([store1, store2], { getters: 'get', mutations: 'set', actions: 'set' });\n// so now\napiKey = store.g('getApiKey');\nstore.commit('setIsLoggedIn', val);\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 26],
		[3610, 24],
		[3617, 3],
		[3624, 2],
		[3631, 1],
		[3638, 1],
		[3645, 2],
		[3659, 1],
		[3666, 24],
		[3673, 3],
		[3680, 1],
		[3687, 2],
		[3701, 6],
		[3708, 2],
		[3715, 22],
		[3722, 1],
		[3729, 5],
		[3743, 23],
		[3750, 2],
		[3757, 3],
		[3764, 6],
		[3771, 15],
		[3778, 4],
		[3785, 2],
		[3792, 2],
		[3799, 1],
		[3806, 2],
		[3813, 1],
		[3834, 1],
		[3841, 3],
		[3848, 4],
		[3855, 108],
		[3862, 1],
		[3869, 1],
		[3883, 1],
		[3890, 24],
		[3897, 1],
		[3904, 3],
		[3911, 4],
		[3918, 2],
		[3925, 1],
		[3932, 2],
		[3939, 1],
		[3946, 2],
		[3953, 1],
		[3960, 2],
		[3981, 5],
		[3988, 4],
		[4002, 3],
		[4016, 1],
		[4023, 5],
		[4030, 23],
		[4037, 25],
		[4044, 10],
		[4051, 1],
		[4058, 3],
		[4065, 7],
		[4072, 3],
		[4079, 2],
		[4086, 1],
		[4093, 9],
		[4100, 23],
		[4107, 8],
		[4114, 16],
		[4121, 12],
		[4128, 12]
	],
	"esm": true,
	"cjs": false
}
