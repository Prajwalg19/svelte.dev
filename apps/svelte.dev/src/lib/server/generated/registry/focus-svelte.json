{
	"name": "focus-svelte",
	"description": "Create focus lock for Svelte with zero dependencies.",
	"repo_url": "https://github.com/chanced/focus-svelte",
	"authors": ["chance--"],
	"homepage": "https://github.com/chanced/focus-svelte#readme",
	"downloads": 297,
	"updated": "2021-10-17T16:55:36.762Z",
	"tags": ["miscellaneous"],
	"github_stars": 31,
	"typescript": true,
	"version": "0.3.4",
	"svelte_range": "^3.43.0",
	"kit_range": "next",
	"last_rune_check_version": "0.3.4",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "focus-svelte",
				"version": "0.3.4",
				"size": 28974
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# focus-svelte :lock:\n\nFocus lock for svelte with zero dependencies.\n\n## Installation\n\n```bash\nnpm install -D focus-svelte\n# yarn add -D focus-svelte\n# pnpm add -D focus-svelte\n```\n\n## Example\n\n[https://svelte.dev/repl/4b31b2f4a45c4ee08230f6d47d31db48](https://svelte.dev/repl/4b31b2f4a45c4ee08230f6d47d31db48?version=3.42.6)\n\n## Description\n\nfocus-svelte works a bit differently than other focus locks I've encounted.\nRather than using an event listener to track user activity and overriding the\ndefault behavior of the browser, the DOM is manipulated instead. All elements\noutside of an active focus lock's descendants or ancestory have their\n`tabindex` set to `-1` if it was `0` or greater previously.\n\nTo keep track of changes after the lock is enabled, a `MutationObserver` monitors\nthe DOM for updates. Once all focus locks are disabled or removed, the observer\nis stopped and the elements' properties are reset. If a focus lock later becomes active,\nthe observer is restarted and nodes are decorated accordingly.\n\nWhen a lock becomes active for the first time, the `HTMLElement` that is assigned focus is\ndependent upon the options passed to the action / component.\n\nIf `element` is assigned and is tabbable, it will be focused upon. If `element` is `undefined`\nor not tabbable and `focusable` is `true`, the `HTMLElement` with `use:focus` is granted focus.\nFinally, if neither of those conditions are met, focus will be set on the first tabbable element.\n\n## Usage\n\nThere is both an action and a component that can be utilized.\n\n### Options\n\n| option             | description                                                                                                                                                                                                                                                                     | type                            | default                                    |\n| ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------- | ------------------------------------------ |\n| `element`          | If `element` is assigned and is tabbable, it will be focused upon when the trap is enabled. `string` values will be considered a query selector.                                                                                                                                | `Element \\| string`             | `undefined`                                |\n| `focusable`        | The `HTMLElement` the action is assigned to gets a `tabindex` of `0` when the trap becomes active                                                                                                                                                                               | `boolean`                       | `false`                                    |\n| `focusDelay`       | can either be a number of ms to wait or an async function that resolves (`void`) when the focus of an element should be set.                                                                                                                                                    | `number \\| () => Promise<void>` | [`tick`](https://svelte.dev/tutorial/tick) |\n| `delay`            | Determines how long to wait before batching updates to `tabIndex` and `ariaHidden`.                                                                                                                                                                                             | `number \\| () => Promise<void>` | [`tick`](https://svelte.dev/tutorial/tick) |\n| `assignAriaHidden` | When a focus trap becomes enabled and is `true`, all elements outside of an active trap or their ancestory have their [aria-hidden](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-hidden_attribute) attribute set to `\"true\"`. | `boolean`                       | `false`                                    |\n| `preventScroll`    | sets [`preventScroll`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus#parameters) when focusing.                                                                                                                                                            | `boolean`                       | `false`                                    |\n| `enabled`          | If `true`, the focus trap becomes active.                                                                                                                                                                                                                                       | `boolean`                       | `false`                                    |\n\n### action\n\n```html\n<script>\n\timport { focus } from \"focus-svelte\";\n\tlet enabled = true;\n\tfunction toggleFocus() {\n\t\tenabled = !enabled;\n\t}\n</script>\n\n<button on:click=\"{toggleFocus}\">{enabled ? \"disable\" : \"enable\"} focus</button>\n\n<div use:focus=\"{enabled}\">\n\t<input value={enabled ? \"focus is traped here\" : \"regular tabbable input\"} />\n</div>\n\n<input value={enabled ? \"can't tab here\" : \"can be tabbed into!\"} />\n```\n\n#### With `assignAriaHidden`\n\n```html\n<script>\n\timport { focus } from \"focus-svelte\";\n\tlet enabled = true;\n\tfunction toggleFocus() {\n\t\tenabled = !enabled;\n\t}\n</script>\n\n<button on:click=\"{toggleFocus}\">{enabled ? \"disable\" : \"enable\"} focus</button>\n\n<div use:focus=\"{{enabled, assignAriaHidden: true}}\">\n\t<input value={enabled ? \"focus is traped here\" : \"regular tabbable input\"} />\n</div>\n\n<input value={enabled ? \"can't tab here\" : \"can be tabbed into!\"} />\n```\n\n### component\n\n```html\n<script>\n\timport { Focus } from \"focus-svelte\";\n\tlet enabled = true;\n\tfunction toggleFocus() {\n\t\tenabled = !enabled;\n\t}\n</script>\n\n<button on:click=\"{toggleFocus}\">{enabled ? \"disable\" : \"enable\"} focus</button>\n\n<Focus {enabled} assignAriaHidden=\"{true}\">\n\t<input value={enabled ? \"focus is traped here\" : \"regular tabbable input\"} />\n</Focus>\n\n<input value={enabled ? \"can't tab here\" : \"can be tabbed into!\"} />\n```\n\n**Note**: As the action needs an `HTMLElement`, the component version wraps your content with a `div`.\n\n### override\n\nIf you wish to override the behavior of an element, you can set `data-focus-override=\"true\"`\nand it will retain its original tabindex.\n\n## Contributing\n\nPull requests are always welcome.\n\n## License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 397],
		[3596, 753],
		[3603, 697],
		[3610, 680],
		[3617, 610],
		[3624, 703],
		[3631, 681],
		[3638, 238],
		[3645, 145],
		[3652, 261],
		[3659, 610],
		[3666, 894],
		[3673, 558],
		[3680, 534],
		[3687, 368],
		[3694, 375],
		[3701, 506],
		[3708, 567],
		[3715, 505],
		[3722, 393],
		[3729, 566],
		[3736, 441],
		[3743, 486],
		[3750, 206],
		[3757, 392],
		[3764, 579],
		[3771, 425],
		[3778, 517],
		[3785, 485],
		[3792, 584],
		[3799, 772],
		[3806, 662],
		[3813, 446],
		[3820, 388],
		[3827, 864],
		[3834, 394],
		[3841, 511],
		[3848, 676],
		[3855, 591],
		[3862, 416],
		[3869, 553],
		[3876, 623],
		[3883, 468],
		[3890, 419],
		[3897, 383],
		[3904, 587],
		[3911, 376],
		[3918, 866],
		[3925, 619],
		[3932, 703],
		[3939, 517],
		[3946, 468],
		[3953, 442],
		[3960, 448],
		[3967, 485],
		[3974, 466],
		[3981, 649],
		[3988, 358],
		[3995, 206],
		[4002, 428],
		[4009, 190],
		[4016, 274],
		[4023, 238],
		[4030, 385],
		[4037, 111],
		[4044, 258],
		[4051, 284],
		[4058, 303],
		[4065, 302],
		[4072, 368],
		[4079, 287],
		[4086, 253],
		[4093, 321],
		[4100, 288],
		[4107, 256],
		[4114, 297],
		[4121, 314],
		[4128, 225]
	]
}
