{
	"name": "@humandialog/auth.svelte",
	"description": "Support ObjectReef Identity Provider in Svelte apps.",
	"repo_url": "https://github.com/HumanDialog/auth.svelte",
	"authors": ["humandialog"],
	"homepage": "https://github.com/HumanDialog/auth.svelte#readme",
	"downloads": 37,
	"updated": "2025-04-24T08:26:31.205Z",
	"tags": ["auth"],
	"github_stars": 0,
	"typescript": true,
	"version": "1.8.8",
	"svelte_range": "^3.24.0",
	"last_rune_check_version": "1.8.8",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@humandialog/auth.svelte",
				"version": "1.8.8",
				"size": 815368
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# @humandialog/auth.svelte\r\n\r\n<h1 style=\"font-size: 64px\">\r\n<img src=\"https://objectreef.dev/reef.png\" alt=\"ObjectReef logo\" width=\"90\">\r\nObjectReef&reg;\r\n</h1>\r\n\r\nSvelte package to support ObjectReef Identity Provider.\\\r\nObjectReef Identity Provider is available at https://objectreef.io/auth and it's OIDC compliant \r\nauthorization service available for developers who create applications using [ObjectReef](https://objectreef.dev)\r\n\r\n## Installing\r\nTo install the package on your Svelte project type:\\\r\n`npm install @humandialog/auth.svelte`\r\n\r\n## Usage\r\n\r\n### Configuration\r\n```js\r\n    // App.svelte\r\n    import {reef} from '@humandialog/auth.svelte'\r\n\r\n    reef.configure( \r\n            {\r\n              mode: 'remote', // possible: 'remote', 'local', 'disabled'\r\n              remote: {\r\n                  iss:       \"https://objectreef.io\",\r\n                  clientID: \"<YOUR_CLIENT_ID>\",\r\n                  clientSecret: \"<YOUR_CLIENT_SECRET>\",\r\n                  scope:     \"openid profile email <YOUR_APP_ID>\",\r\n                  apiVersion: \"v001\",\r\n                  refreshTokenPersistent: true,\r\n\r\n                  // Optional. It should be given for a public tenant, to which anyone can register as a user\r\n                  tenant:   \"<PUBLIC_TENANT_ID>\",   \r\n                  \r\n                  // Optional. signing in user must be member of existing Group\r\n                  groupsOnly: false,  \r\n\r\n                  // Ask about organization name during signing up, default is true\r\n                  askOrganizationName: true,\r\n\r\n                  // When user is member of multiple groups/tenants in the application, this parameter allows to select one of them\r\n                  letChooseGroupFirst: false,\r\n                  \r\n                  \r\n                  // Used only for signup form. Optional. \r\n                  // If specified checkboxes on consents are presented\r\n                  termsAndConditionsHRef: \"https://example.com/terms-and-conditions\",\r\n                  privacyPolicyHRef: \"https://example.com/privacy-policy\"\r\n              },\r\n              local: {\r\n                api: \"http://localhost:1996\",\r\n                apiVersion: \"v002\",\r\n\r\n                // declare local developement users in simple form:\r\n                users: [\r\n                    \"bob@example.com\",\r\n                    \"alice@example.com\"\r\n                ],\r\n                // or in more verbose way to declare access role and group:\r\n                users: [\r\n                    {\r\n                        username: 'bob@example.com',\r\n                        role: 'Developer',\r\n                        groupId: 11\r\n                    },\r\n                    {\r\n                        username: 'alice@example.com',\r\n                        role: 'Employee',\r\n                        groupId: 11\r\n                    }\r\n                ] \r\n              }\r\n            })\r\n```\r\nIn application root file ***App.svelte*** set up the the ObjectReef SDK with `reef.configure` by passing\r\na configuration object. Authorization can be switched between `'remote'` and `'local'` or it can be `'disabled'` at all. The `'remote'` is the most common mode when your website is already published and registered in the ObjectReef Auth.\r\n\r\nThe `'local'` mode can be useful during the local developement when you need request API in context of specified user. The list of such users needs to be provided as `users` array in configuration object. In this mode, the website asks current active user instead of redirecting the browser to sign-in page.\r\n\r\n### Components\r\nThere are just few Svelte components to apply authorization to your website.\r\n\r\n#### AuthorizedView\r\nThe `AuthorizedView` should be a root component for all autorized views on your website. Usualy it embedd the whole `App` content with routing component.\r\n\r\nThe component parameters are:\r\n- `autoRedirectToSignIn :boolean` which is `true` by default.\\\r\nRedirects the browser automatically to sign-in page in case when user has not yet been authorized. \r\n\r\n##### Example:\r\n```html\r\n    <!-- App.svelte -->\r\n    <AuthorizedView>\r\n        <!-- my SPA entry-point -->\r\n        <Router {routes} />\r\n    </AuthorizedView>\r\n```\r\n\r\n#### Authorized\r\nThe `Authorized` encapsulate content which should be visible only when user has been authorized.\r\n\r\n##### Example:\r\n```html\r\n    <Authorized>\r\n        <a href={$signOutHRef}>Sign out</a>\r\n    </Authorized>\r\n```\r\n\r\n#### NotAuthorized\r\nThe `NotAuthorized` encapsulate content which should be visible only when user has not been authorized.\r\n\r\n##### Example:\r\n```html\r\n    <NotAuthorized>\r\n        <a href={$signInHRef}>Sign in</a>\r\n    </NotAuthorized>\r\n```\r\n\r\n### `reef.get` function\r\nThe `reef.get` makes HTTP GET request to the service and returns JavaScript object as a result. It will:\r\n - adds API version specified in `reef.configure`\r\n - adds `Authorization` header to each request with issued access token\r\n - refreshes access token when expired\r\n - concatenates tenant proper DNS address issued during authorization.\r\n - the request result is converted from JSON to JavaSctipt object\r\n\r\n##### Example:\r\n```js\r\n    let res = await reef.get(\"app/Lists/count\");\r\n```\r\n\r\n### `reef.post` function\r\nThe `reef.post` makes HTTP POST request to the service and returns JavaScript object as a result. It will:\r\n - adds API version specified in `reef.configure`\r\n - adds `Authorization` header to each request with issued access token\r\n - refreshes access token when expired\r\n - concatenates tenant proper DNS address issued during authorization.\r\n - passed body parameter should be a JavaScript object\r\n - the request result is converted from JSON to JavaSctipt object\r\n\r\n##### Example:\r\n```js\r\n    let res = await reef.post(\"app/Lists/new\", { Name: 'My List Name' });\r\n```\r\n\r\n### `reef.delete` function\r\nThe `reef.delete` makes HTTP DELETE request to the service. It will:\r\n - adds API version specified in `reef.configure`\r\n - adds `Authorization` header to each request with issued access token\r\n - refreshes access token when expired\r\n - concatenates tenant proper DNS address issued during authorization.\r\n \r\n##### Example:\r\n```js\r\n    let res = await reef.delete(\"app/Lists/last\");\r\n```\r\n\r\n### `reef.fetch` function\r\nThe `reef.fetch` is more general operation comparing to `reef.get` or `reef.post`.\r\nIt wraps original `fetch` function with authorization support stuff. It will:\r\n - add `Authorization` header to each request with issued access token\r\n - refreshes access token when expired\r\n - concatenates tenant proper DNS address issued during authorization.\r\n\r\n > **_NOTE:_**\\\r\n ObjectReef multitenancy support assumes every tenant API is available at different DNS address like `tenant_qwerty.objectreef.io`. It means the proper API depends on which workspace authenticated user belongs to.\r\n\r\n ##### Example:\r\n```js\r\n    let res = await reef.fetch(\"/json/v001/app/Lists/new\",\r\n                                {\r\n                                    method:'POST',\r\n                                    body: JSON.stringify({Name: list_name})\r\n                                });\r\n```\r\n\r\n### Useful variables and operations on signed-in user\r\n#### `$session.user`\r\nThe `$session.user` object contains authenticated user info\r\n| member     | type    |\r\n| ---------- | ------- |\r\n| `given_name` | `string`  |\r\n| `family_name` | `string`  |\r\n| `picture` | `string`  |\r\n| `email` | `string`  |\r\n| `email_verified` | `boolean`  |\r\n\r\n#### `$session.idToken` and `$session.accessToken`\r\nReturns the ***idToken*** or ***accessToken*** object with members like the following:\r\n| member     | type    |\r\n| ---------- | ------- |\r\n| `header` | `string`  |\r\n| `payload` | `string`  |\r\n| `raw` | `string`  |\r\n| `is_jwt` | `boolean`  |\r\n| `not_expired` | `boolean`  |\r\n| `get_claim<T>(key :string)` | `T\\|undefined`  |\r\n\r\n\r\n#### `$session.apiAddress :string`\r\nReturns tenant API address\r\n\r\n#### `$session.tid :string`\r\nReturns tenant id\r\n\r\n#### `$session.tenants :object[]`\r\nReturns all tenants infos where user is signed in\r\n\r\n#### `$session.appAccessRole() :string`\r\nReturns application access role of signed-in user. The returned value and meaning depends on the specific application.\r\n\r\n#### `$session.authAccessGroup() :number`\r\nReturns Identity Provider users group id of signed-in user. The possible values are a combination of the following bits:\r\n| bit field  | meaning    |\r\n| ------ | ------- |\r\n| `0x01` | Can read permissions of users in tenant  |\r\n| `0x02` | Can add new users to tenant  |\r\n| `0x04` | Can remove users and change users permissions in tenant  |\r\n\r\nThis means that, for example, for a person with full privileges, the operation will return 0x07. And someone who can only invite new people will be in group 0x03\r\n\r\n##### Example:\r\n```js\r\n    let isAdmin = $session.authAccessGroup() == 0x07\r\n    let canSee  = $session.authAccessGroup() & 0x01\r\n```\r\n\r\n#### `$session.filesAccessGroup() :number`\r\nReturns files storage users group id of signed-in user. The possible values are a combination of the following bits:\r\n| bit field  | meaning    |\r\n| ------ | ------- |\r\n| `0x01` | Can read (download) files of the tenant  |\r\n| `0x02` | Can add  (upload) files to the tenant  |\r\n\r\nThis means that, for example, for a person with full privileges, the operation will return 0x03. The read-only user will in 0x01 group. \r\n\r\n##### Example:\r\n```js\r\n    let canDownload = $session.filesAccessGroup() & 0x01\r\n```\r\n\r\n#### `$signInHRef`, `$signOutHRef` and `$signUpHRef`\r\nReturns `string` value to make sign-in, sign-out or sign-up anchor\r\n ##### Example:\r\n```html\r\n    <a href={$signOutHRef}>Sign out</a>\r\n    <a href={$signInHRef}>Sign in</a>\r\n    <a href={$signUpHRef}>Sign up</a>\r\n```\r\n\r\n\r\n\r\n**Enjoy!**\r\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 144],
		[3596, 39],
		[3603, 91],
		[3610, 402],
		[3617, 281],
		[3624, 132],
		[3631, 32],
		[3638, 4],
		[3645, 37],
		[3652, 25],
		[3659, 8],
		[3666, 44],
		[3673, 12],
		[3680, 2],
		[3687, 7],
		[3694, 247],
		[3701, 9],
		[3708, 9],
		[3715, 20],
		[3722, 31],
		[3729, 21],
		[3736, 3],
		[3743, 13],
		[3750, 76],
		[3757, 14],
		[3764, 24],
		[3771, 22],
		[3778, 28],
		[3785, 239],
		[3792, 140],
		[3799, 91],
		[3806, 18],
		[3813, 101],
		[3820, 4],
		[3827, 14],
		[3834, 83],
		[3841, 66],
		[3848, 9],
		[3855, 17],
		[3862, 72],
		[3869, 4],
		[3876, 5],
		[3883, 11],
		[3890, 100],
		[3897, 91],
		[3904, 77],
		[3911, 39],
		[3918, 74],
		[3925, 175],
		[3932, 72],
		[3939, 39],
		[3946, 16],
		[3953, 21],
		[3960, 6],
		[3967, 32],
		[3974, 139],
		[3981, 493],
		[3988, 130],
		[3995, 212],
		[4002, 109],
		[4009, 13],
		[4016, 34],
		[4023, 32],
		[4030, 20],
		[4037, 89],
		[4044, 51],
		[4051, 29],
		[4058, 2],
		[4065, 10],
		[4072, 52],
		[4079, 22],
		[4086, 142],
		[4093, 107],
		[4100, 36],
		[4107, 65],
		[4114, 37],
		[4121, 129],
		[4128, 83]
	],
	"esm": true,
	"cjs": false
}
