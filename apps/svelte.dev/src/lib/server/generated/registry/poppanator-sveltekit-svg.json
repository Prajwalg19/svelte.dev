{
	"name": "@poppanator/sveltekit-svg",
	"description": "Import SVG files as Svelte components in SvelteKit projects.",
	"repo_url": "https://github.com/poppa/sveltekit-svg",
	"authors": ["poppanator_"],
	"homepage": "https://github.com/poppa/sveltekit-svg#readme",
	"downloads": 13024,
	"updated": "2025-03-20T05:58:54.586Z",
	"tags": ["tooling"],
	"github_stars": 252,
	"typescript": true,
	"version": "5.0.1",
	"svelte_range": ">=5.x",
	"last_rune_check_version": "5.0.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@poppanator/sveltekit-svg",
				"version": "5.0.1",
				"size": 20757
			},
			{
				"name": "@rollup/pluginutils",
				"version": "5.1.4",
				"size": 58354
			},
			{
				"name": "@types/estree",
				"version": "1.0.7",
				"size": 26147
			},
			{
				"name": "estree-walker",
				"version": "2.0.2",
				"size": 50243
			},
			{
				"name": "picomatch",
				"version": "4.0.2",
				"size": 85237
			},
			{
				"name": "svgo",
				"version": "3.3.2",
				"size": 1488123
			},
			{
				"name": "csso",
				"version": "5.0.5",
				"size": 605504
			},
			{
				"name": "css-tree",
				"version": "2.2.1",
				"size": 1155242
			},
			{
				"name": "mdn-data",
				"version": "2.0.28",
				"size": 591444
			},
			{
				"name": "source-map-js",
				"version": "1.2.1",
				"size": 139872
			},
			{
				"name": "css-tree",
				"version": "2.3.1",
				"size": 1190591
			},
			{
				"name": "mdn-data",
				"version": "2.0.30",
				"size": 602138
			},
			{
				"name": "css-what",
				"version": "6.1.0",
				"size": 66038
			},
			{
				"name": "commander",
				"version": "7.2.0",
				"size": 144710
			},
			{
				"name": "css-select",
				"version": "5.1.0",
				"size": 224084
			},
			{
				"name": "boolbase",
				"version": "1.0.0"
			},
			{
				"name": "domhandler",
				"version": "5.0.3",
				"size": 75339
			},
			{
				"name": "domelementtype",
				"version": "2.3.0",
				"size": 11359
			},
			{
				"name": "domutils",
				"version": "3.2.2",
				"size": 166738
			},
			{
				"name": "dom-serializer",
				"version": "2.0.0",
				"size": 28813
			},
			{
				"name": "entities",
				"version": "4.5.0",
				"size": 412892
			},
			{
				"name": "nth-check",
				"version": "2.1.1",
				"size": 42555
			},
			{
				"name": "picocolors",
				"version": "1.1.1",
				"size": 6373
			},
			{
				"name": "@trysound/sax",
				"version": "0.2.0",
				"size": 48776
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[1, 3],
			[1, 4],
			[0, 5],
			[5, 6],
			[6, 7],
			[7, 8],
			[7, 9],
			[5, 10],
			[10, 11],
			[10, 9],
			[5, 12],
			[5, 13],
			[5, 14],
			[14, 15],
			[14, 12],
			[14, 16],
			[16, 17],
			[14, 18],
			[18, 19],
			[19, 17],
			[19, 16],
			[19, 20],
			[18, 17],
			[18, 16],
			[14, 21],
			[21, 15],
			[5, 22],
			[5, 23]
		],
		"circular": []
	},
	"readme": "# SvelteKit SVG Plugin\n\nThis plugin makes it possible to import SVG files as Svelte\ncomponents, inline SVG code or urls.\n\n> ### **NOTE!** For **Svelte 4** projects, use version 4 of this plugin\n\n> _NOTE! This plugin isn't just for SvelteKit, but works for any Svelte\nproject using Vite_\n\n## Install\n\n- `yarn add --dev @poppanator/sveltekit-svg`\n- `npm install -D @poppanator/sveltekit-svg`\n\n## Usage\n\nIn your `vite.config.js`\n\n```js\nimport { sveltekit } from '@sveltejs/kit/vite'\nimport svg from '@poppanator/sveltekit-svg'\n\n/** @type {import('vite').UserConfig} */\nconst config = {\n  plugins: [\n    sveltekit(),\n    svg(options), // Options are optional\n  ],\n}\n\nexport default config\n```\n\nYou can also pass multiple `svg` transformers based on paths if you want to\napply different SVGO options for different SVGs\n\n```js\nconst config = {\n  plugins: [\n    sveltekit(),\n    svg({\n      includePaths: ['./src/lib/icons/', './src/assets/icons/'],\n      svgoOptions: {\n        multipass: true,\n        plugins: [\n          {\n            name: 'preset-default',\n            // by default svgo removes the viewBox which prevents svg icons from scaling\n            // not a good idea! https://github.com/svg/svgo/pull/1461\n            params: { overrides: { removeViewBox: false } },\n          },\n          { name: 'removeAttrs', params: { attrs: '(fill|stroke)' } },\n        ],\n      },\n    }),\n    svg({\n      includePaths: ['./src/lib/graphics/'],\n      svgoOptions: {\n        multipass: true,\n        plugins: ['preset-default'],\n      },\n    }),\n  ],\n}\n```\n\n## Svelte usage\n\n**Import as a Svelte component:**\n\n> **NOTE!** It's recommended that you use the `?component` query string if you\n> use the suggested type definition below. The reason is that **Vite** ships a\n> type definition for `*.svg` which states that `import Comp from './file.svg`\n> returns a string.\n>\n> So providing a default type definition for `*.svg` is in most cases causing\n> a conflict which will lead to TSC errors when treating such an import as a\n> Svelte component.\n>\n> So the best way to avoid errors, current and future, is to always use\n> `import Comp from './file.svg?component` with the suggested type definition\n> at the end of this file.\n\n```svelte\n<script>\nimport Logo from \"./logo.svg?component\";\n</script>\n\n<Logo />\n```\n\nWhen used as a component you can also pass attributes to the SVG\n\n```svelte\n<Logo width=\"200\" />\n```\n\n**Import as file path:**\n\n```svelte\n<script>\nimport logoUrl from \"./logo.svg?url\";\n</script>\n\n<img src={logoUrl} />\n```\n\n**Import as data URL:**\n\n```svelte\n<script>\nimport logoDataUrl from \"./logo.svg?dataurl\";\n</script>\n\n<img src={logoDataUrl} />\n```\n\nIn contrast to `?url` this will apply SVGO optimization/transform before the\nthe SVG is turned into a data URL\n\nYou can also pass the SVGO config option `datauri` as value to `?dataurl`.\nThis will, for instance, generate an URI encoded string\n\n```svelte\n<script>\nimport logoDataUrl from \"./logo.svg?dataurl=enc\";\n</script>\n\n<img src={logoDataUrl} />\n```\n\n**Import as code:**\n\n```svelte\n<script>\nimport logo from \"./logo.svg?src\";\n</script>\n\n{@html logo}\n```\n\n## Options\n\n````ts\ninterface Options {\n  /**\n   * Output type\n   *\n   * `dataurl` can also take the following options, which are verbatim SVGO\n   * `datauri` options:\n   *\n   * - `?dataurl=base64` (default, same as `?dataurl`)\n   * - `?dataurl=enc` URL encoded string\n   * - `?dataurl=unenc` Plain SVG\n   *\n   * @default \"component\"\n   */\n  type?: 'src' | 'url' | 'component' | 'dataurl'\n  /**\n   * Verbatim [SVGO](https://github.com/svg/svgo) options\n   *\n   * If no options are given, the SVG will be optimized with the default SVGO\n   * options.\n   * If `false` SVGO will be bypassed altogether\n   */\n  svgoOptions?: Config | false\n  /**\n   * Paths to apply the SVG plugin on. This can be useful if you want to apply\n   * different SVGO options/plugins on different SVGs.\n   *\n   * The paths are path prefixes and should be relative to your\n   * `svelte.config.js` file.\n   *\n   * @example\n   * ```\n   * {\n   *   includePaths: ['src/assets/icons/', 'src/images/icons/']\n   * }\n   * ```\n   */\n  includePaths?: string[]\n  /**\n   * Hook that lets you transform the svg to a raw Svelte component yourself,\n   * before being passed to the Svelte compiler.\n   *\n   * @param rawSvg The raw SVG data as read from disk\n   * @param splitSvg The SVG split into parts, e.g its attributes and\n   *  its content\n   * @returns This should return a complete Svelte component that can be passed\n   *  to the Svelte compiler\n   */\n  preCompileHook?(rawSvg: string, splitSvg: SplitSvg): string\n}\n````\n\n## Typescript\n\nFor Typescript not to complain about `file.svg?component` et.al, add the\nfollowing import statement to `src/app.d.ts` (or any `.d.ts` file somewhere in the path of your\nproject where `tsc` can find it).\n\n```ts\nimport '@poppanator/sveltekit-svg/dist/svg.d.ts'\n```\n\n> **NOTE!** If you have `module`/`moduleResolution` set to `NodeNext` in your\n> Typescript config, you **MUST** include `.d.ts` in the import of the SVG\n> type definition.\n\n## Notes on using with _Jest_\n\n_I don't know if this still applies, but it's kept here for good measure_\n\nAccording to a report [_Jest_](https://jestjs.io/) will have trouble\ntransforming `.svg` files when such is imported as a Svelte component.\n\nThe solution seems to be to add a module name mapper entry in the the\n`jest.config.cjs` file, like so:\n\n```js\nmodule.exports = {\n  // ... other config\n  moduleNameMapper: {\n    // ... other mappers\n    '^.+\\\\.svg$': '<rootDir>/src/lib/EmptyIcon.svelte',\n  },\n}\n```\n\nwhere `src/lib/EmptyIcon.svelte` can contain just `<svg />`.\n\n> [See the reported issue and solution](https://github.com/poppa/sveltekit-svg/issues/22)\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 3086],
		[3596, 4804],
		[3603, 5111],
		[3610, 5107],
		[3617, 5313],
		[3624, 4660],
		[3631, 5440],
		[3638, 5353],
		[3645, 1863],
		[3652, 3780],
		[3659, 6396],
		[3666, 7171],
		[3673, 5840],
		[3680, 5376],
		[3687, 5713],
		[3694, 5858],
		[3701, 4955],
		[3708, 5855],
		[3715, 5244],
		[3722, 5647],
		[3729, 5424],
		[3736, 4728],
		[3743, 5249],
		[3750, 6327],
		[3757, 6091],
		[3764, 5935],
		[3771, 5189],
		[3778, 5024],
		[3785, 5639],
		[3792, 5347],
		[3799, 5364],
		[3806, 7629],
		[3813, 9055],
		[3820, 7669],
		[3827, 6753],
		[3834, 7216],
		[3841, 6077],
		[3848, 6429],
		[3855, 6666],
		[3862, 8017],
		[3869, 7715],
		[3876, 7192],
		[3883, 6880],
		[3890, 7076],
		[3897, 6268],
		[3904, 6964],
		[3911, 6883],
		[3918, 8045],
		[3925, 7893],
		[3932, 7891],
		[3939, 8559],
		[3946, 8222],
		[3953, 9340],
		[3960, 6782],
		[3967, 7991],
		[3974, 8922],
		[3981, 9753],
		[3988, 10868],
		[3995, 10612],
		[4002, 9333],
		[4009, 7104],
		[4016, 5235],
		[4023, 11030],
		[4030, 8573],
		[4037, 8743],
		[4044, 8823],
		[4051, 9771],
		[4058, 10234],
		[4065, 11046],
		[4072, 13016],
		[4079, 11681],
		[4086, 10805],
		[4093, 11425],
		[4100, 12021],
		[4107, 10244],
		[4114, 13024],
		[4121, 13950],
		[4128, 20845]
	],
	"esm": false,
	"cjs": true
}
