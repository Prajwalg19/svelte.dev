{
	"name": "svroutes",
	"description": "Provides SPA routing functionality for Svelte applications.",
	"repo_url": "https://github.com/Battledash-2/svelte-router",
	"authors": ["battledash2"],
	"homepage": "https://github.com/Battledash-2/svelte-router#readme",
	"downloads": 8,
	"updated": "2023-08-18T20:13:36.975Z",
	"tags": ["router"],
	"github_stars": 2,
	"typescript": true,
	"version": "0.1.36-unhotfix1",
	"svelte_range": "^3.52.0",
	"last_rune_check_version": "0.1.36-unhotfix1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svroutes",
				"version": "0.1.36-unhotfix1",
				"size": 11381
			},
			{
				"name": "svelte2tsx",
				"version": "0.5.23",
				"size": 746513
			},
			{
				"name": "dedent-js",
				"version": "1.0.1"
			},
			{
				"name": "pascal-case",
				"version": "3.1.2",
				"size": 14764
			},
			{
				"name": "no-case",
				"version": "3.0.4",
				"size": 25128
			},
			{
				"name": "lower-case",
				"version": "2.0.2",
				"size": 17661
			},
			{
				"name": "tslib",
				"version": "2.8.1",
				"size": 90359
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[1, 3],
			[3, 4],
			[4, 5],
			[5, 6],
			[4, 6],
			[3, 6]
		],
		"circular": []
	},
	"readme": "# ‚úà This is `svroutes`!\r\n\r\n‚ö† This module is made for Svelte, not SvelteKit.\r\n\r\n#### `svroutes` is an extension for Svelte to add SPA applications.\r\n\r\n### üñä How do I use `svroutes`?\r\n\r\n`svroutes` is fairly easy to use.\r\n\r\nIn your main svelte file (usually `App.svelte`), place a `Router` object. Within the `Router` object, you can place `Route` objects. It works pretty similarly to `react-router`.\r\n\r\n### üì© Installation\r\n\r\nTo install `svroutes`, run `npm install svroutes`.\r\nSimple as that. Now you can begin using `svroutes`!\r\n<br/>\r\n<br/>\r\n\r\n### üåé `Router` object usage:\r\n\r\n#### `home` (default `'/'`)\r\n\r\nControls the base URL. All `Route` object paths will be `{home}/{route_path}`.\r\n<br/>\r\n<br/>\r\n\r\n### üåç `Route` object usage:\r\n\r\n#### `path` (default `'/'`)\r\n\r\nControls the path for this route. Value will be converted to a RegExp unless the `text` property is present.\r\n\r\nPaths can have special parameters using the `:paramsName` syntax. Wildcards can be created using the `.*` syntax.\r\nRead `component` (below) for how to access.\r\n\r\n#### `component` (default `null`)\r\n\r\nComponent to display on screen when the user is on the current `path`.\r\nThe component will be created with a `params` and `wildcards` property, meaning you can use\r\n\r\n```js\r\nexport let params;\r\nexport let wildcards;\r\n```\r\n\r\nto gain access to them.\r\n\r\nIf you don't pass in a component and instead decide to place it as a descendant of the `Route` object, you can use `let:params`.\r\n\r\n```js\r\n<Route path='/hello/:userName' let:params>\r\n\t<h1>Hello, {params.userName}!</h1>\r\n</Route>\r\n```\r\n\r\n#### `exact` (default `false`)\r\n\r\nDecides whether there should be a '^' prepended and '$' appended to the RegExp. In `text` mode, this property is useless.\r\n\r\n#### `text` (default `false`)\r\n\r\nControls whether the `path` property should be a string or RegExp.\r\nIn text mode, you cannot use custom options or wildcards. (`:customOption`).\r\n\r\n#### `index` (default `false`)\r\n\r\nIf enabled, `path` is ignored and this route will always show if others fail.\r\nMust be placed **below** all other routes to prevent errors.\r\n<br/>\r\n<br/>\r\n\r\n### üåè `Link` object usage:\r\n\r\n#### `href` or `to` (default `'/'`)\r\n\r\nPath to go to. Using `Link` will automatically update the page without need for reload. Using an anchor tag (`a`) will work, but is less optimized.\r\n\r\n#### `state` (default `'history.state'`)\r\n\r\nState to be passed when switching pages. You can access this via `history.state`.\r\n\r\n#### `replace` (default `false`)\r\n\r\nDecides whether using the link replace or pushes the state. Push means it _adds_ to the history, while _replace_ replaces the current one. Using replace isn't recommended for most cases because it can ruin the UX.\r\n<br/>\r\n<br/>\r\n\r\n### üöÖ `Navigate` object usage:\r\n\r\nThe navigate object redirects the user to another page using components, rather than script.\r\n<br/>This object uses the same options as the `Link` object.\r\n\r\n<br/>\r\n\r\n### ‚õ≥ Navigation via Code\r\n\r\nTo navigate between pages, you can use the `navigate` function.\r\n\r\n```ts\r\nimport { navigate } from 'svroutes';\r\nnavigate(url: string, state?: any, replace?: false);\r\n```\r\n\r\n## Enjoy using `svroutes`! Report any bugs [here](https://github.com/Battledash-2/svelte-router#readme).\r\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 5],
		[3603, 22],
		[3610, 24],
		[3624, 7],
		[3638, 2],
		[3645, 8],
		[3652, 22],
		[3666, 24],
		[3687, 6],
		[3715, 1],
		[3729, 1],
		[3736, 3],
		[3750, 2],
		[3757, 1],
		[3764, 2],
		[3771, 22],
		[3778, 1],
		[3785, 1],
		[3792, 1],
		[3806, 1],
		[3813, 1],
		[3834, 1],
		[3841, 41],
		[3848, 1],
		[3855, 1],
		[3862, 1],
		[3869, 1],
		[3876, 1],
		[3883, 4],
		[3890, 23],
		[3897, 1],
		[3904, 23],
		[3911, 1],
		[3918, 2],
		[3925, 1],
		[3932, 2],
		[3939, 3],
		[3946, 3],
		[3953, 2],
		[3960, 1],
		[3967, 3],
		[3974, 2],
		[3981, 1],
		[3988, 23],
		[4002, 1],
		[4009, 1],
		[4016, 4],
		[4023, 3],
		[4030, 2],
		[4037, 14],
		[4044, 20],
		[4051, 9],
		[4065, 1],
		[4072, 3],
		[4079, 1],
		[4086, 1],
		[4093, 2],
		[4100, 67],
		[4107, 3],
		[4114, 8],
		[4121, 18],
		[4128, 11],
		[4135, 9]
	],
	"esm": true,
	"cjs": false
}
