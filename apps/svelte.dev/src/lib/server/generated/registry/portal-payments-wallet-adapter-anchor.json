{
	"name": "@portal-payments/wallet-adapter-anchor",
	"description": "Integrate Solana wallet adapter with Anchor in Svelte.",
	"repo_url": "https://github.com/portalpayments/svelte-on-solana-wallet-adapter",
	"authors": ["mikemaccana"],
	"homepage": "https://github.com/portalpayments/svelte-on-solana-wallet-adapter#readme",
	"downloads": 6,
	"updated": "2023-06-07T20:10:05.616Z",
	"tags": ["integration"],
	"github_stars": 3,
	"typescript": true,
	"version": "2.0.3",
	"svelte_range": "^3.46.2",
	"kit_range": "^1.20.1",
	"last_rune_check_version": "2.0.3",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@portal-payments/wallet-adapter-anchor",
				"version": "2.0.3",
				"size": 10818
			},
			{
				"name": "eventemitter3",
				"version": "4.0.7",
				"size": 37967
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# `@portal-payments/wallet-adapter-anchor`\n\n`AnchorConnectionProvider` component and `workSpace` for Solana wallets using Svelte\n\n## Installing\n\nYou have already installed the core package to run the wallet Svelte Store [@portal-payments/wallet-adapter-core](https://github.com/svelte-on-solana/wallet-adapter/blob/master/packages/core/README.md) and the UI components to use the wallet [@portal-payments/wallet-adapter-ui](https://github.com/svelte-on-solana/wallet-adapter/blob/master/packages/ui/README.md/). Then install the `AnchorConnectionProvider` component and `workSpace` file contained in this package.\n\n```shell\nnpm i @portal-payments/wallet-adapter-anchor\n```\n\n## Set Up\n\nAdd `@project-serum/anchor` to `optimizeDeps` inside `vite.config.js`. This pre-bundles the `@project-serum/anchor` package. This steps converts CommonJS dependencies into ESM ( Vite's dev server serves all code as native ESM ).\n\n```javascript\nimport { sveltekit } from \"@sveltejs/kit/vite\";\n\n/** @type {import('vite').UserConfig} */\nconst config = {\n  plugins: [sveltekit()],\n  // ... use the same implementation from the SvelteKit ui\n  optimizeDeps: {\n    include: [\"@project-serum/anchor\", \"@solana/web3.js\", \"buffer\"],\n    // ... use the same implementation from the SvelteKit ui\n  },\n  // ... use the same implementation from the SvelteKit ui\n};\n\nexport default config;\n```\n\nThe `AnchorConnectionProvider` for Anchor Dapps accepts the next props.\n\n| prop    | type     | default |\n| ------- | -------- | ------- |\n| network | `string` |         |\n| idl     | `Idl`    |         |\n\nIt is automatically connected to the `workSpace` defining all the parameters to share among the components in your Anchor Dapp **(baseAccount, connection, provider, program, systemProgram and network)**.\n\n## SvelteKit\n\nIn the **\\_\\_layout.svelte** component you can import the wallets and setup the UI components.\n\n```html\n<script lang=\"ts\">\n  import { walletStore } from \"@portal-payments/wallet-adapter-core\";\n  import { WalletProvider, WalletMultiButton } from \"@portal-payments/wallet-adapter-ui\";\n  import { AnchorConnectionProvider, workSpace } from \"@portal-payments/wallet-adapter-anchor\";\n  import { clusterApiUrl } from \"@solana/web3.js\";\n  import idl from \"../../../target/idl/<my-anchor-project>.json\";\n\n  const localStorageKey = \"walletAdapter\";\n  const network = clusterApiUrl(\"devnet\"); // localhost or mainnet\n\n  let wallets;\n\n  onMount(async () => {\n    const {\n      PhantomWalletAdapter,\n      SlopeWalletAdapter,\n      SolflareWalletAdapter,\n      SolletExtensionWalletAdapter,\n      TorusWalletAdapter,\n    } = await import(\"@solana/wallet-adapter-wallets\");\n\n    const walletsMap = [\n      new PhantomWalletAdapter(),\n      new SlopeWalletAdapter(),\n      new SolflareWalletAdapter(),\n      new SolletExtensionWalletAdapter(),\n      new TorusWalletAdapter(),\n    ];\n\n    wallets = walletsMap;\n  });\n</script>\n\n<WalletProvider {localStorageKey} {wallets} autoConnect />\n<AnchorConnectionProvider {network} {idl} />\n<div>\n  <slot />\n</div>\n<WalletMultiButton />\n```\n\n## Svelte Template\n\nIn `App.svelte` or the entry point of your SPA, you can setup the wallet and components like this.\n\n```html\n<script lang=\"ts\">\n  import { walletStore } from \"@portal-payments/wallet-adapter-core\";\n  import { WalletProvider, WalletMultiButton } from \"@portal-payments/wallet-adapter-ui\";\n  import { AnchorConnectionProvider, workSpace } from \"@portal-payments/wallet-adapter-anchor\";\n  import { clusterApiUrl } from \"@solana/web3.js\";\n  import idl from \"../../../target/idl/<my-anchor-project>.json\";\n  import { PhantomWalletAdapter, SolflareWalletAdapter } from \"@solana/wallet-adapter-wallets\";\n\n  const localStorageKey = \"walletAdapter\";\n  const network = clusterApiUrl(\"devnet\"); // localhost or mainnet\n\n  let wallets = [new PhantomWalletAdapter(), new SolflareWalletAdapter()];\n</script>\n\n<WalletProvider {localStorageKey} {wallets} autoConnect />\n<AnchorConnectionProvider {network} {idl} />\n<WalletMultiButton />\n\n{#if $walletStore?.connected}\n<div>My wallet is connected</div>\n{/if}\n```\n\n## Example Implementation\n\nSee example implementations of the `@portal-payments/wallet-adapter-ui` library.\n\n- [Demo site][1]\n\n[1]: https://github.com/silvestrevivo/solana-svelte-counter/tree/master/app\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 5],
		[3596, 5],
		[3603, 4],
		[3617, 2],
		[3624, 2],
		[3631, 26],
		[3638, 1],
		[3645, 1],
		[3652, 12],
		[3659, 2],
		[3666, 5],
		[3673, 8],
		[3680, 8],
		[3694, 1],
		[3701, 1],
		[3715, 1],
		[3722, 9],
		[3743, 2],
		[3764, 1],
		[3771, 5],
		[3778, 9],
		[3792, 1],
		[3806, 1],
		[3820, 1],
		[3834, 6],
		[3841, 21],
		[3855, 8],
		[3862, 9],
		[3869, 1],
		[3876, 4],
		[3883, 2],
		[3890, 2],
		[3904, 4],
		[3911, 6],
		[3918, 2],
		[3925, 1],
		[3932, 6],
		[3939, 5],
		[3946, 1],
		[3967, 1],
		[3981, 4],
		[3995, 5],
		[4016, 4],
		[4023, 1],
		[4030, 4],
		[4037, 14],
		[4044, 9],
		[4051, 4],
		[4058, 1],
		[4065, 2],
		[4072, 2],
		[4086, 4],
		[4093, 4],
		[4100, 9],
		[4107, 1],
		[4114, 6],
		[4121, 7],
		[4128, 3]
	],
	"esm": true,
	"cjs": false
}
