{
	"name": "@vkhalikov/svelte-easy-form",
	"description": "Handles form state and validation in Svelte applications.",
	"repo_url": "https://github.com/vkhalikov/svelte-easy-form",
	"authors": ["vkhalikov"],
	"homepage": "https://vkhalikov.github.io/svelte-easy-form",
	"downloads": 4,
	"updated": "2021-04-26T22:44:56.175Z",
	"tags": ["miscellaneous"],
	"github_stars": 0,
	"typescript": false,
	"version": "0.1.1",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "0.1.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@vkhalikov/svelte-easy-form",
				"version": "0.1.1",
				"size": 14828
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Svelte Easy Form\r\nA simple, easy to use form state and validation handler for [Svelte](https://svelte.dev).\r\n\r\n**Table of Content**\r\n- [Installation](#installation)\r\n- [Live example](#live-example)\r\n- [Basic usage](#basic-usage)\r\n- [API](#api)\r\n    - [createForm](#createform)\r\n        - [Schema](#schema)\r\n            - [Field](#field)\r\n    - [Validator](#validator)\r\n    - [Options](#options)\r\n        - [validateOnInput](#validateoninput)\r\n        - [submitHandler](#submithandler)\r\n    - [FormModel](#formmodel)\r\n        - [values and errors](#values-and-errors)\r\n        - [onInput](#oninput)\r\n        - [onBlur](#onblur)\r\n        - [onSubmit](#onsubmit)\r\n- [Contributing](#contributing)\r\n- [Current development state](#current-development-state)\r\n\r\n\r\n## Installation\r\n\r\n```sh\r\nnpm install @vkhalikov/svelte-easy-form\r\n```\r\n\r\n## Live Example\r\n\r\nLive example with different options is available [here](https://vkhalikov.github.io/svelte-easy-form).\r\n\r\n## Basic usage\r\n\r\n1. Create a form model with `createForm`\r\n    ```javascript\r\n      import createForm from '@vkhalikov/svelte-easy-form';\r\n    \r\n      // Declare a schema with initial values and validators\r\n      const schema = {\r\n        username: {\r\n          value: 'admin',\r\n          validators: [required('Login is required')],\r\n        },\r\n        password: {\r\n          validators: [required('Password is required')],\r\n        },\r\n      };\r\n    \r\n      const { values, errors, onInput, onSubmit } = createForm(schema);\r\n    ```\r\n    > NOTE: Validators are not included in the package. See [validator](#validator) for details.\r\n2. Use it in your markup\r\n    1. Create a form and pass it a submit handler. It will be called if all values are valid.\r\n        ```html\r\n         <form on:submit=\"{onSubmit}\" action=\"https://myformhandler.com\" method=\"post\">\r\n         </form>\r\n        ```\r\n       If you want a custom handler, you can use [`submitHandler`](#submithandler) option.\r\n    2. Create inputs.\r\n        ```html\r\n          <form on:submit=\"{onSubmit}\" action=\"https://myformhandler.com\" method=\"post\">\r\n            <input type=\"text\" name=\"username\" value=\"{$values.username}\" on:input=\"{onInput}\" />\r\n            <input type=\"password\" name=\"password\" value=\"{$values.password}\" on:input=\"{onInput}\" />\r\n          </form>\r\n        ```\r\n        > NOTE: attributes `name`, `value`, `on:input` are required.\r\n\r\n        > NOTE: `values` is a `svelte` store, therefore you can access it with a `$` prefix.\r\n    3. Show validation errors.\r\n        ```html\r\n          <form on:submit=\"{onSubmit}\" action=\"https://myformhandler.com\" method=\"post\">\r\n            <input type=\"text\" name=\"username\" value=\"{$values.username}\" on:input=\"{onInput}\" />\r\n            {#if $errors.username}\r\n               {$errors.username}  // Render it as is\r\n            {/if}\r\n    \r\n            <input type=\"password\" name=\"password\" value=\"{$values.password}\" on:input=\"{onInput}\" />\r\n            <ValidationError error=\"{$errors.password}\" /> // Or create a component\r\n          </form>\r\n        ```\r\n       > NOTE: `errors` is a `svelte` store, therefore you can access it with a `$` prefix.\r\n\r\n## API\r\n### `createForm`\r\n```typescript\r\ntype CreateForm = (schema: Schema, options?: Options) => FormModel;\r\n```\r\n\r\n---\r\n\r\n### `Schema`\r\nA schema is an object, that contains `Fields` which are used to construct a [`FormModel`](#formmodel).\r\n```typescript\r\ninterface Schema {\r\n  [fieldName: string]: Field;\r\n}\r\n```\r\n\r\n### `Field`\r\n```typescript\r\ninterface Field {\r\n  value?: any; // Initial value\r\n  validators?: [Validator];\r\n}\r\n```\r\n\r\n> NOTE: If you don't need to set an initial value and validators for a field, you should still define a `Field` in `Schema` as an empty object:\r\n\r\n```javascript\r\nconst schema = {\r\n  name: {},\r\n}\r\n```\r\n\r\n### `Validator`\r\nValidator is a function that receives a field value and returns a validation error in any form if the value is invalid or `null`.\r\n```typescript\r\ntype Validator = (value: any) => any;\r\n```\r\n\r\n---\r\n\r\n### `Options`\r\n```typescript\r\ninterface Options {\r\n  validateOnInput?: boolean;\r\n  submitHandler?: SubmitHandler;\r\n}\r\n```\r\n\r\n#### `validateOnInput`\r\nDefaults to `true`\r\n\r\nDefines whether the field should be validated immediately after a change. As user types in a symbol for example.\r\nIf set to `false`, the field is validated on **blur** and **submit**.\r\n\r\n#### `submitHandler`\r\nDefaults to `undefined`\r\n\r\n```typescript\r\ntype SubmitHandler = (values: Writable, event: Event) => void;\r\n```\r\n\r\nIf provided, `SubmitHandler` will be used instead of a default browser submit handler.\r\n\r\n---\r\n\r\n### `FormModel`\r\nA form model that is returned from [`createForm`](#createform) function.\r\n\r\n```typescript\r\ninterface FormModel {\r\n  values: Writable;\r\n  errors: Writable;\r\n  onInput: (e: Event) => void;\r\n  onSubmit: (e: Event) => void;\r\n}\r\n```\r\n\r\n#### `values` and `errors`\r\nA `Writable` svelte stores, that contain current values and errors, that are accessible via `$` prefix.\r\n \r\nIf you are unfamiliar with svelte stores, see the [tutorial](https://svelte.dev/docs#svelte_store).\r\n\r\n#### `onInput`\r\nAn event handler that updates and validates a value.\r\n\r\nShould be passed to an input as `on:input` attribute.\r\n\r\n>NOTE: A value is not validated on input if the `validateOnInput` option is set to `false`.\r\n\r\n#### `onSubmit`\r\nAn event handler that does 2 things:\r\n\r\n1. Validate all values for which validators were provided.\r\n2. If all values are valid:\r\n    - If a [`SubmitHandler`](#submithandler) is provided, it will be called with the following arguments: `(values, originalEvent)`\r\n    - Otherwise a default browser submit handler will be called\r\n\r\n`onSubmit` should be passed to a form as `on:submit` attribute.\r\n\r\n## Contributing\r\nAny feedback is welcomed. If you want to propose changes follow these steps:\r\n1. [Fork](https://docs.github.com/en/github/getting-started-with-github/fork-a-repo) the repo\r\n2. [Clone](https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/cloning-a-repository) the fork\r\n3. Create a branch - `git checkout -b {prefix}/new-feature`\r\n    \r\n    Prefixes: `feat` for features, `fix` for fixes\r\n4. Make your changes and commit `git commit -a - m \"short description\"`\r\n5. Push changes `git push origin {prefix}/new-feature`\r\n6. [Create](https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request-from-a-fork) new Pull Request\r\n    > NOTE: Please provide a description to your changes and [link an issue](https://docs.github.com/en/github/managing-your-work-on-github/linking-a-pull-request-to-an-issue) if it's a bugfix\r\n\r\n## Current Development State\r\nThe project is in beta, therefore anything might be changed in the future\r\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 4],
		[3603, 3],
		[3610, 1],
		[3617, 8],
		[3631, 2],
		[3638, 2],
		[3645, 3],
		[3652, 3],
		[3659, 5],
		[3666, 4],
		[3680, 3],
		[3687, 2],
		[3694, 1],
		[3701, 4],
		[3708, 2],
		[3715, 3],
		[3722, 4],
		[3743, 5],
		[3757, 4],
		[3764, 2],
		[3778, 3],
		[3792, 3],
		[3806, 1],
		[3820, 1],
		[3827, 1],
		[3834, 1],
		[3841, 2],
		[3855, 8],
		[3862, 1],
		[3869, 2],
		[3883, 1],
		[3890, 3],
		[3897, 1],
		[3904, 2],
		[3918, 1],
		[3939, 2],
		[3946, 1],
		[3960, 1],
		[3967, 2],
		[3974, 3],
		[3981, 2],
		[3995, 1],
		[4009, 1],
		[4016, 4],
		[4023, 1],
		[4037, 3],
		[4044, 9],
		[4051, 1],
		[4058, 2],
		[4065, 3],
		[4072, 2],
		[4079, 1],
		[4093, 7],
		[4100, 5],
		[4114, 4],
		[4121, 4],
		[4128, 3],
		[4135, 2]
	]
}
