{
	"name": "svelte-media-query-store",
	"description": "Provide reactive store detecting CSS media queries.",
	"repo_url": "https://github.com/michaelbelete/svelte-media-query-store",
	"authors": ["michaelbelete"],
	"homepage": "https://github.com/michaelbelete/svelte-media-query-store#readme",
	"downloads": 10,
	"updated": "2022-09-25T00:49:45.983Z",
	"tags": ["miscellaneous"],
	"github_stars": 3,
	"typescript": true,
	"version": "1.0.0",
	"svelte_range": "^3.44.0",
	"kit_range": "next",
	"last_rune_check_version": "1.0.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-media-query-store",
				"version": "1.0.0",
				"size": 6746
			},
			{
				"name": "svelte-media-query-store",
				"version": "0.0.3",
				"size": 8902,
				"isCircular": true,
				"circularTarget": 0
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "[![npm version](https://badge.fury.io/js/svelte-media-query-store.svg)](https://badge.fury.io/js/svelte-media-query-store)\r\n\r\n# Svelte Media Query Store\r\n\r\nProvides you with a reactive store for checking CSS media queries and breakpoint matcher that keep track of the matching state of the given media queries .\r\n\r\n## Features\r\n\r\n- **CSS Media Queries Matcher** -\r\n  Takes a string query, such as (min-width: 800px) and returns a readable store.\r\n- **Breakpoint Matcher :** Takes object with breakpoint as a key and a string query as a value and observes browser changes accordingly and returns the matching breakpoint.\r\n\r\n## Installation\r\n\r\n```bash\r\n$ npm i svelte-media-query-store\r\n```\r\n\r\n## Usage\r\n\r\n### Breakpoint Matcher\r\n\r\nTakes object with breakpoint as a key and a string query as a value and observes browser changes accordingly and returns the matching breakpoint.\r\n\r\n```bash\r\n<script lang=\"ts\">\r\n  import { derived } from 'svelte/store';\r\n  import { breakpointMatcher } from './lib/store';\r\n\r\n  //for breakpoint matcher\r\n  //tailwind breakpoints\r\n  const breakpoints: Record<string, string> = {\r\n    'sm': '(min-width: 640px)',\r\n    'md': '(min-width: 768px)',\r\n    'lg': '(min-width: 1024px)',\r\n    'xl': '(min-width: 1280px)',\r\n    '2xl': '(min-width: 1536px)'\r\n  };\r\n\r\n  const currentBreakpointMatcher = breakpointMatcher(breakpoints);\r\n\r\n  // use derived store for conditions so it can be reactive\r\n  const isXl = derived(currentBreakpointMatcher, ($currentBreakpointMatcher) => {\r\n    return $currentBreakpointMatcher === 'xl';\r\n  });\r\n</script>\r\n\r\n<h1>Breakpoint Matcher</h1>\r\n<h2>Current Breakpoint: <b>{ $currentBreakpointMatcher }</b></h2>\r\n<h2>IsXL: {$isXl}</h2>\r\n\r\n```\r\n\r\n### CSS Media Queries Matcher\r\n\r\nThe package takes a string query, such as (min-width: 800px) and returns a **readable store**.\r\n\r\n#### In frontend\r\n\r\n```bash\r\n<script lang=\"ts\">\r\n  import {mediaQueryStore} from 'svelte-media-query-store';\r\n\r\n  const isMobile = mediaQueryStore(\"(max-width: 600px)\");\r\n</script>\r\n\r\n<h2>{$isMobile}</h2> <!-- subscribing to the readable store --->\r\n```\r\n\r\n### In Store\r\n\r\n#### store.ts\r\n\r\n```bash\r\n## store.ts\r\nimport { mediaQueryStore } from 'svelte-media-query-store';\r\n\r\nexport const md = mediaQueryStore('(min-width: 768px)');\r\n\r\nexport const lg = mediaQueryStore('(min-width: 1024px)');\r\n\r\n```\r\n\r\n#### App.svelte\r\n\r\n```bash\r\n<script lang=\"ts\">\r\n  import { md,lg } from '$lib/store'; //\r\n</script>\r\n\r\n<h2>md: {$md}</h2>\r\n<h2>lg: {$lg}</h2>\r\n\r\n```\r\n\r\n## Example\r\n\r\n- https://stackblitz.com/edit/vitejs-vite-xdvbuz?file=README.md\r\n\r\n## Author\r\n\r\n- Michael Belete [https://github.com/michaelbelete]\r\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 26],
		[3596, 20],
		[3603, 25],
		[3610, 24],
		[3624, 3],
		[3631, 2],
		[3638, 5],
		[3652, 1],
		[3659, 5],
		[3666, 35],
		[3673, 4],
		[3680, 6],
		[3687, 9],
		[3701, 13],
		[3708, 1],
		[3715, 33],
		[3722, 42],
		[3729, 10],
		[3736, 9],
		[3743, 5],
		[3750, 13],
		[3757, 3],
		[3764, 4],
		[3771, 20],
		[3778, 10],
		[3785, 1],
		[3792, 8],
		[3799, 1],
		[3806, 2],
		[3813, 14],
		[3820, 4],
		[3827, 1],
		[3834, 1],
		[3841, 75],
		[3848, 6],
		[3855, 4],
		[3862, 8],
		[3869, 2],
		[3883, 8],
		[3890, 46],
		[3897, 37],
		[3904, 23],
		[3911, 26],
		[3918, 11],
		[3925, 2],
		[3932, 2],
		[3939, 5],
		[3946, 10],
		[3953, 2],
		[3960, 5],
		[3974, 4],
		[3981, 3],
		[3988, 3],
		[3995, 4],
		[4002, 28],
		[4009, 5],
		[4016, 12],
		[4023, 5],
		[4030, 13],
		[4037, 5],
		[4044, 15],
		[4051, 7],
		[4058, 3],
		[4065, 2],
		[4072, 13],
		[4079, 11],
		[4086, 5],
		[4093, 6],
		[4100, 42],
		[4107, 5],
		[4114, 10],
		[4121, 17],
		[4128, 7]
	],
	"esm": true,
	"cjs": false
}
