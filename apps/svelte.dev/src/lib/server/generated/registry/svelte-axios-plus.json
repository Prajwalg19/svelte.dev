{
	"name": "svelte-axios-plus",
	"description": "Reactive Axios wrapper with caching for Svelte apps.",
	"repo_url": "https://github.com/itsEzz/svelte-axios-plus",
	"authors": ["itsezz"],
	"homepage": "https://github.com/itsEzz/svelte-axios-plus",
	"downloads": 11,
	"updated": "2024-12-22T22:52:37.232Z",
	"tags": ["server"],
	"github_stars": 0,
	"typescript": true,
	"version": "2.0.0",
	"svelte_range": "^5",
	"kit_range": "^2.14.1",
	"last_rune_check_version": "2.0.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-axios-plus",
				"version": "2.0.0",
				"size": 45247
			},
			{
				"name": "lru-cache",
				"version": "11.1.0",
				"size": 819995
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# svelte-axios-plus <!-- omit in toc -->\n\nA Svelte-optimized Axios wrapper that provides reactive request handling, built-in caching, and simplified state management for HTTP requests.\n\n## TOC <!-- omit in toc -->\n\n- [Installation](#installation)\n- [Compatibility](#compatibility)\n- [Quickstart](#quickstart)\n- [Documentation](#documentation)\n- [Guides](#guides)\n- [Reactivity](#reactivity)\n- [Playground](#playground)\n- [Breaking changes](#breaking-changes)\n- [Testing](#testing)\n- [Promises](#promises)\n- [Credits](#credits)\n- [License](#license)\n\n## Installation\n\n`npm install axios svelte-axios-plus`\n\n> `axios` is a peer dependency and needs to be installed explicitly\n\n## Compatibility\n\nVersion 2.x.x of `svelte-axios-plus` is built for Svelte 5.\n\nUsers running Svelte 4 applications should continue using the latest 1.x.x version of `svelte-axios-plus`.\n\nFull documentation for v1 is available in the [v1 Readme](https://github.com/itsEzz/svelte-axios-plus/blob/v1/README.md).\n\n## Quickstart\n\n```svelte\n<script lang=\"ts\">\n\timport axiosPlus from 'svelte-axios-plus';\n\n\tconst { req, refetch } = axiosPlus('https://reqres.in/api/users?delay=1');\n</script>\n\n{#if req.loading}\n\t<p>Loading...</p>\n{:else if req.error}\n\t<p>Error!</p>\n{/if}\n<div>\n\t<button onclick={() => refetch()}>Refetch</button>\n\t<pre>{JSON.stringify(req.data, null, 2)}</pre>\n</div>\n```\n\n[Ref](https://github.com/itsEzz/svelte-axios-plus/tree/master/src/routes/quickstart)\n\n## Documentation\n\n<!-- no toc -->\n\n- [API](#api-)\n- [axiosPlus](#axiosplusurl--config----url--config-options----options-)\n- [resetConfigure](#resetconfigure-)\n- [configure](#configureoptions-)\n- [clearCache](#clearcache-)\n- [load](#loadurlconfig-options-)\n- [getConfig](#getconfig-)\n- [makeAxiosPlus](#makeaxiosplusconfigureoptions-)\n\n### API <!-- omit in toc -->\n\nThe package exports one default export and named exports:\n\n```ts\nimport axiosPlus, {\n\tresetConfigure,\n\tconfigure,\n\tclearCache,\n\tload,\n\tgetConfig,\n\tmakeAxiosPlus\n} from 'svelte-axios-plus';\n```\n\n### axiosPlus(url | config | (() => url | config), options? | () => options) <!-- omit in toc -->\n\nThe main function to execute HTTP requests.\n\n#### Parameters <!-- omit in toc -->\n\n- `url|config` - String URL or axios [request config](https://github.com/axios/axios#request-config)\n- `options` - Configuration object\n  - `manual` (default `false`) - Controls automatic request execution on component render. Use the `refetch` function returned when invoking `axiosPlus` to execute the request manually.\n  - `useCache` (default `true`) - Enables/disables request caching. It doesn't affect the `refetch` function returned by `axiosPlus`.\n  - `autoCancel` ( `true` ) - Controls automatic cancellation of pending requests\n\n> [!IMPORTANT]  \n> Default caching behavior can interfere with test isolation. See [testing](#testing) section.\n\n#### Returns <!-- omit in toc -->\n\nAn object with the following properties:\n\n- `req` - Request state object\n  - `data` - Response data from the axios [success response](https://github.com/axios/axios#response-schema)\n  - `loading` - Current request status (true if the request is in progress, otherwise false)\n  - `error` - [Error](https://github.com/axios/axios#handling-errors) details if request failed\n  - `response` - Complete [success response](https://github.com/axios/axios#response-schema) object\n- `refetch(configOverride?, options?)` - Manual request execution\n  - `config` - Same `config` object as `axios`, which is _shallow-merged_ with the config object provided when invoking `axiosPlus`.\n  - `options.useCache` (default `false`) - Enables/disables request caching\n  - **Returns**: A promise containing the response. If the request is unsuccessful, the promise rejects and the rejection must be handled manually.\n- `cancel()` - Cancels pending requests\n- `reset(force?)` - Resets the request state to its initial state\n  - `force` (default `false`) - Forces a reset even if the request is in progress by cancelling the pending request\n\n### resetConfigure() <!-- omit in toc -->\n\nResets all configuration options back to default values.\n\nDefault values:\n\n- `axios` - `StaticAxios` instance\n- `cache` - `new LRUCache({ max: 500, ttl: 1000 * 60 })`\n- `defaultOptions` - `{manual: false, useCache: true, autoCancel: true}`\n- `defaultLoadOptions` - `{useCache: true}`\n\n### configure(options?) <!-- omit in toc -->\n\nConfigures the `axiosPlus` instance with custom options.\n\n#### Parameters <!-- omit in toc -->\n\n- `axios` - Custom [Axios](https://github.com/axios/axios#creating-an-instance) instance or Axios-like client\n- `cache` - [LRU cache](https://github.com/isaacs/node-lru-cache) instance or false to disable caching\n- `defaultOptions` - Default options for all requests. It will be merged with the out of the box default options.\n  - `manual` - Controls automatic request execution on component render. Use the `refetch` function returned when invoking `axiosPlus` to execute the request manually.\n  - `useCache` - Enables/disables request caching. It doesn't affect the `refetch` function returned by `axiosPlus`.\n  - `autoCancel` - Controls automatic cancellation of pending requests\n- `defaultLoadOptions` - Default options for `load` function\n  - `useCache` - Enables/disables request caching\n\n### clearCache() <!-- omit in toc -->\n\nClears the current [LRU cache](https://github.com/isaacs/node-lru-cache) if caching is enabled.\n\n### load(url|config, options?) <!-- omit in toc -->\n\nPerforms a one-time request with optional caching.\n\n#### Parameters <!-- omit in toc -->\n\n- `url|config` - String URL or axios [request config](https://github.com/axios/axios#request-config)\n- `options.useCache` (default `true`) - Enables/disables request caching\n\n#### Returns <!-- omit in toc -->\n\nA promise with the following properties:\n\n- `data` - Response data from the axios [success response](https://github.com/axios/axios#response-schema)\n- `error` - [Error](https://github.com/axios/axios#handling-errors) details if request failed\n- `response` - Complete [success response](https://github.com/axios/axios#response-schema) object\n\n### getConfig() <!-- omit in toc -->\n\nReturns the current configured options.\n\n#### Returns <!-- omit in toc -->\n\nAn object with the following properties:\n\n- `axios` - Current Axios instance\n- `cache` - Current [LRU cache](https://github.com/isaacs/node-lru-cache) instance or false if disabled\n- `defaultOptions` - Default options configuration\n- `defaultLoadOptions` - Default load options configuration\n\n### makeAxiosPlus(configureOptions?) <!-- omit in toc -->\n\nCreates a new `axiosPlus` instance with optional initial configuration.\n\n#### Parameters <!-- omit in toc -->\n\n- `axios` - Custom [Axios](https://github.com/axios/axios#creating-an-instance) instance or Axios-like client\n- `cache` - [LRU cache](https://github.com/isaacs/node-lru-cache) instance or false to disable caching\n- `defaultOptions` - Default options for all requests. It will be merged with the out of the box default options.\n  - `manual` - Controls automatic request execution on component render. Use the `refetch` function returned when invoking `axiosPlus` to execute the request manually.\n  - `useCache` - Enables/disables request caching. It doesn't affect the `refetch` function returned by `axiosPlus`.\n  - `autoCancel` - Controls automatic cancellation of pending requests\n- `defaultLoadOptions` - Default options for `load` function\n  - `useCache` - Enables/disables request caching\n\n#### Returns <!-- omit in toc -->\n\nPreconfigured `axiosPlus` instance with the same methods as the package's named exports but limited to the `axiosPlus` instance returned by `makeAxiosPlus`.\n\n## Guides\n\n<!-- no toc -->\n\n- [Configuration](#configuration-)\n- [Manual Requests](#manual-requests-)\n- [Manual Cancellation](#manual-cancellation-)\n- [Server Side Rendering](#server-side-rendering-)\n- [Multiple Hook Instances](#multiple-hook-instances-)\n\n### Configuration <!-- omit in toc -->\n\nUnless provided via the `configure` function, `svelte-axios-plus` uses the following defaults:\n\n- `axios` - `StaticAxios` instance\n- `cache` - `new LRUCache({ max: 500, ttl: 1000 * 60 })`\n- `defaultOptions` - `{manual: false, useCache: true, autoCancel: true}`\n- `defaultLoadOptions` - `{useCache: true}`\n\nThese defaults may not suit your needs, for example:\n\n- you may want a common base url for axios requests\n- the default cache size and ttl may not be a suitable default\n- you want to disable caching altogether\n\nIn such cases you can use the `configure` function to provide your custom implementation of both.\n\n```svelte\n<script lang=\"ts\">\n\timport axiosPlus, { configure } from 'svelte-axios-plus';\n\timport { LRUCache } from 'lru-cache';\n\timport Axios from 'axios';\n\n\tconst axios = Axios.create({\n\t\tbaseURL: 'https://reqres.in/api'\n\t});\n\n\tconst cache = new LRUCache({ max: 10 });\n\n\tconfigure({ axios, cache }); // configure globally\n\taxiosPlus.configure({ axios, cache }); // configure per instance\n</script>\n```\n\n[Ref](https://github.com/itsEzz/svelte-axios-plus/tree/master/src/routes/configuration)\n\n### Manual Requests <!-- omit in toc -->\n\nOn the client, requests are executed when the component renders using the Svelte `$effect` rune.\n\nThis may be undesirable, as in the case of non-GET requests. By using the `manual` option you can skip the automatic execution of requests and use the return value of `axiosPlus` to execute them manually, optionally providing configuration overrides to `axios`.\n\nIn the example below we use `axiosPlus` twice. Once to load the data when the component renders, and once to submit data updates via a `PUT` request configured via the `manual` option.\n\n```svelte\n<script lang=\"ts\">\n\timport axiosPlus from 'svelte-axios-plus';\n\n\tconst { req: getReq } = axiosPlus('https://reqres.in/api/users/1');\n\n\tconst { req: putReq, refetch } = axiosPlus(\n\t\t{\n\t\t\turl: 'https://reqres.in/api/users/1',\n\t\t\tmethod: 'PUT'\n\t\t},\n\t\t{ manual: true }\n\t);\n\n\tasync function updateData() {\n\t\ttry {\n\t\t\tawait refetch({\n\t\t\t\tdata: {\n\t\t\t\t\t...getReq.data,\n\t\t\t\t\tupdatedAt: new Date().toISOString()\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (error) {\n\t\t\t// Handle errors\n\t\t}\n\t}\n</script>\n\n{#if getReq.loading || putReq.loading}\n\t<p>Loading...</p>\n{/if}\n{#if getReq.error || putReq.error}\n\t<p>Error!</p>\n{/if}\n\n<div>\n\t<button onclick={updateData}>Update data</button>\n\t<pre>{JSON.stringify(putReq.data || getReq.data, null, 2)}</pre>\n</div>\n```\n\n[Ref](https://github.com/itsEzz/svelte-axios-plus/tree/master/src/routes/manual-requests)\n\n### Manual Cancellation <!-- omit in toc -->\n\nThe `cancel` function allows you to terminate pending requests, whether initiated automatically or through the `refetch` method.\n\nIn the example below we use `axiosPlus` with its automatic and manual requests.\nWe can call the cancellation programmatically or via controls.\n\n```svelte\n<script lang=\"ts\">\n\timport axiosPlus from 'svelte-axios-plus';\n\n\tlet pagination: Record<string, number> = $state({ per_page: 6, page: 1 });\n\tconst { req, refetch, cancel } = axiosPlus(() => ({\n\t\turl: 'https://reqres.in/api/users?delay=5',\n\t\tparams: pagination\n\t}));\n\n\tfunction handleFetch() {\n\t\tpagination = { ...pagination, page: pagination.page + 1 };\n\t}\n\n\tasync function externalRefetch() {\n\t\ttry {\n\t\t\tawait refetch();\n\t\t} catch (error) {\n\t\t\t// Handle errors\n\t\t}\n\t}\n</script>\n\n<div>\n\t<button onclick={handleFetch}>Refetch</button>\n\t<button onclick={externalRefetch}>External Refetch</button>\n\t<button disabled={!req.loading} onclick={cancel}>Cancel Request</button>\n\t{#if req.loading}\n\t\t<p>...loading</p>\n\t{/if}\n\t<pre>{JSON.stringify(req.data, null, 2)}</pre>\n</div>\n```\n\n[Ref](https://github.com/itsEzz/svelte-axios-plus/tree/master/src/routes/manual-cancellation)\n\n### Server Side Rendering <!-- omit in toc -->\n\nFor server-side requests containing sensitive data like API keys, use the async `load` function instead of `axiosPlus`. This integrates with SvelteKit's server-side data loading pattern.\n\nIn Svelte you can load data for your page via the `+page.server.ts` file. The logic inside that file is only executed on the server. You can read more about that topic over [here](https://kit.svelte.dev/docs/routing#page).\n\n1. Create a `+page.server.ts` file for your route\n\n   ```ts\n   import axiosPlus from 'svelte-axios-plus';\n\n   interface PageServerLoad {\n   \t(): Promise<{\n   \t\trdata: any;\n   \t\terror: string;\n   \t}>;\n   }\n\n   export const load: PageServerLoad = async () => {\n   \tconst { data, error, response } = await axiosPlus.load('https://reqres.in/api/users?delay=1');\n   \treturn {\n   \t\trdata: data,\n   \t\terror: JSON.stringify(error, null, 2)\n   \t};\n   };\n\n   export const ssr = true;\n   export const csr = false;\n   ```\n\n   [Ref](https://github.com/itsEzz/svelte-axios-plus/tree/master/src/routes/page-server)\n\n2. Access data in `+page.svelte`\n\n   ```svelte\n   <script lang=\"ts\">\n   \tinterface Props {\n   \t\tdata: {\n   \t\t\trdata: any;\n   \t\t\terror: string;\n   \t\t};\n   \t}\n\n   \tlet { data }: Props = $props();\n   </script>\n\n   <pre>Data: {JSON.stringify(data.rdata, null, 2)}</pre><p>Error: {data.error}</p>\n   ```\n\n   [Ref](https://github.com/itsEzz/svelte-axios-plus/tree/master/src/routes/page-server)\n\n### Multiple Hook Instances <!-- omit in toc -->\n\nFor applications requiring different API configurations or caching strategies, `makeAxiosPlus` enables creation of independent `axiosPlus` instances.\n\nThis factory function returns a configured `axiosPlus` instance based on provided configuration.\n\n> **Tip** Use this to create pre-configured instances as an alternative to the global `configure` function.\n\n```svelte\n<script lang=\"ts\">\n\timport axios from 'axios';\n\timport { makeAxiosPlus } from 'svelte-axios-plus';\n\n\tconst customAxiosPlus = makeAxiosPlus({\n\t\taxios: axios.create({ baseURL: 'https://reqres.in/api' })\n\t});\n\n\tconst { req, refetch } = customAxiosPlus('/users?delay=1');\n</script>\n\n{#if req.loading}\n\t<p>Loading...</p>\n{/if}\n{#if req.error}\n\t<p>Error!</p>\n{/if}\n\n<div>\n\t<button onclick={() => refetch()}>Refetch</button>\n\t<pre>{JSON.stringify(req.data, null, 2)}</pre>\n</div>\n```\n\n[Ref](https://github.com/itsEzz/svelte-axios-plus/tree/master/src/routes/multiple-hook-instances)\n\n## Reactivity\n\nWhile `axiosPlus` is not inherently reactive to argument changes, you can enable reactivity through:\n\n- Lazy evaluation\n- The `$derived` rune\n- An `$effect` rune with the `refetch` function\n\nFor detailed information on Svelte function reactivity, refer to:\n\n- [Passing state into functions](https://svelte.dev/docs/svelte/$state#Passing-state-into-functions)\n- [Compiler warnings: state_referenced_locally](https://svelte.dev/docs/svelte/compiler-warnings#state_referenced_locally)\n\n**Notable Feature**: When using an options state object with `axiosPlus`, changes to this object automatically trigger reactive updates by default (see example below).\n\n```svelte\n<script lang=\"ts\">\n\timport axiosPlus, { type AxiosPlusOptions } from 'svelte-axios-plus';\n\n\tlet options: AxiosPlusOptions = $state({\n\t\tmanual: true,\n\t\tautoCancel: true,\n\t\tuseCache: true\n\t});\n\n\t// The following two axiosPlus calls are equivalent and will react to 'options' state changes\n\tconst { req: req1 } = axiosPlus('https://reqres.in/api/users?delay=5', options);\n\tconst { req: req2 } = axiosPlus('https://reqres.in/api/users?delay=5', () => options);\n</script>\n```\n\n### 1. Lazy Evaluation (Recommended) <!-- omit in toc -->\n\nThe `axiosPlus` function offers flexible configuration through dynamic function arguments. You can pass both the config and options as functions, enabling `axiosPlus` to automatically respond to state changes in these function arguments.\n\nHere's what makes this powerful:\n\n1. Pass config as a function: `axiosPlus(() => config)`\n2. Pass options as a function: `axiosPlus(config, () => options)`\n3. Pass both as functions: `axiosPlus(() => config, () => options)`\n\nThe best part? You have complete flexibility - use functions for dynamic state values and plain objects for static configurations. This means you can mix and match based on your needs.\n\n- Pros\n  - Implements Svelte's recommended approach for reactive state passing\n  - Preserves `axiosPlus` internal state integrity, with request cancellation controlled through the `autoCancel` flag\n- Cons\n  - Introduces function parameters, slightly increasing the complexity of the `axiosPlus` implementation\n\n```svelte\n<script lang=\"ts\">\n\timport axiosPlus, { type AxiosPlusOptions } from 'svelte-axios-plus';\n\n\tlet pagination: Record<string, number> = $state({});\n\tlet options: AxiosPlusOptions = $state({\n\t\tmanual: true,\n\t\tautoCancel: true,\n\t\tuseCache: true\n\t});\n\n\tconst { req } = axiosPlus(\n\t\t() => ({\n\t\t\turl: 'https://reqres.in/api/users?delay=5',\n\t\t\tparams: pagination\n\t\t}),\n\t\t() => options\n\t);\n</script>\n```\n\n[Ref](https://github.com/itsEzz/svelte-axios-plus/tree/master/src/routes/reactivity)\n\n### 2. Dervied method <!-- omit in toc -->\n\nUsing the `$derived` rune with `axiosPlus` triggers a complete function reinitialization whenever any referenced state values are modified.\n\n- Pros\n  - Simple implementation requiring only a `$derived` rune wrapper around the `axiosPlus` function\n- Cons\n  - Reinitializing the entire `axiosPlus` function resets its internal state and terminates active requests, regardless of the `autoCancel` setting\n\n```svelte\n<script lang=\"ts\">\n\timport axiosPlus, { type AxiosPlusOptions } from 'svelte-axios-plus';\n\n\tlet pagination: Record<string, number> = $state({});\n\tlet options: AxiosPlusOptions = $state({\n\t\tmanual: true,\n\t\tautoCancel: true,\n\t\tuseCache: true\n\t});\n\n\tconst { req } = $derived(\n\t\taxiosPlus(\n\t\t\t{\n\t\t\t\turl: 'https://reqres.in/api/users?delay=5',\n\t\t\t\tparams: pagination\n\t\t\t},\n\t\t\toptions\n\t\t)\n\t);\n</script>\n```\n\n[Ref](https://github.com/itsEzz/svelte-axios-plus/tree/master/src/routes/reactivity)\n\n### 3. Effect method <!-- omit in toc -->\n\nUsing the `$effect` rune to trigger the `refetch` function on state changes provides a robust and controlled approach to handling reactive updates.\n\n- Pros\n  - Flexible state management without requiring initial state declaration in `axiosPlus` initialization\n  - Maintains `axiosPlus` internal state integrity, with request cancellation controlled solely by the `autoCancel` setting\n- Cons\n  - Requires additional implementation through the `$effect` rune, increasing code footprint\n  - Reactivity is limited to `configOverride` and `useCache` options, excluding other settings like `manual` and `autoCancel`\n\n```svelte\n<script lang=\"ts\">\n\timport axiosPlus, { type RefetchOptions } from 'svelte-axios-plus';\n\n\tlet pagination: Record<string, number> = $state({});\n\tlet options: RefetchOptions = $state({\n\t\tuseCache: true\n\t});\n\n\tconst { req, refetch } = axiosPlus(\n\t\t{\n\t\t\turl: 'https://reqres.in/api/users?delay=5'\n\t\t},\n\t\toptions\n\t);\n\n\t$effect(() => {\n\t\tasync function fetchData() {\n\t\t\ttry {\n\t\t\t\tawait refetch({ params: pagination }, options);\n\t\t\t} catch (error) {\n\t\t\t\t// Handle errors\n\t\t\t}\n\t\t}\n\n\t\tfetchData();\n\t});\n</script>\n```\n\n[Ref](https://github.com/itsEzz/svelte-axios-plus/tree/master/src/routes/reactivity)\n\n## Playground\n\nThe project includes a very simple playground example to play around with the library and its features.\n\n1. Clone the repository\n2. Install dependencies via `npm install`\n3. Start the project via `npm run dev`\n4. Open the displayed url in your browser (most likely [http://localhost:5173](http://localhost:5173))\n5. Click on the Playground link\n\n[Ref](https://github.com/itsEzz/svelte-axios-plus/tree/master/src/routes/playground)\n\n## Breaking changes\n\n<details>\n  <summary>Version 2.0.0</summary>\n\n### General <!-- omit in toc -->\n\n- Requires Svelte 5\n- The library now uses Svelte 5's runes system internally\n- State management switched from Svelte 4 stores to Svelte 5's state management\n\n### Types & Interfaces <!-- omit in toc -->\n\n- Renamed the following interfaces\n  - `ResponseValues` -> `RequestState`\n  - `Options` -> `AxiosPlusOptions`\n- Updated the `AxiosPlusResult` type\n\n  ```ts\n  // Old type\n  type AxiosPlusResult<TResponse = any, TBody = any, TError = any> = [\n  \t{\n  \t\tloading: Readable<boolean>;\n  \t\tdata: Readable<TResponse | undefined>;\n  \t\terror: Readable<AxiosError<TError, TBody> | null>;\n  \t\tresponse: Readable<AxiosResponse<TResponse, TBody> | undefined>;\n  \t},\n  \tRefetchFunction<TBody, TResponse>,\n  \t() => void,\n  \t() => void\n  ];\n\n  // New type\n  type AxiosPlusResult<TResponse = any, TBody = any, TError = any> = {\n  \treq: Readonly<RequestState<TResponse, TBody, TError>>;\n  \trefetch: RefetchFunction<TBody, TResponse>;\n  \tcancel: () => void;\n  \treset: (force?: boolean) => void;\n  };\n  ```\n\n### Usage of `axiosPlus` <!-- omit in toc -->\n\nDue to the `AxiosPlusResult` type update the usage of `axiosPlus` has changed (see example below).\n\nFurther request state is now returned through the `req` property, and direct destructuring is no longer supported to maintain reactive state.\n\n- Version 1.x.x usage example\n\n  ```svelte\n  <script lang=\"ts\">\n  \timport axiosPlus from 'svelte-axios-plus';\n\n  \tconst [{ loading, data, error }, refetch] = axiosPlus('https://reqres.in/api/users?delay=1');\n  </script>\n\n  {#if $loading}\n  \t<p>Loading...</p>\n  {:else if $error}\n  \t<p>Error!</p>\n  {/if}\n  <div>\n  \t<button on:click={refetch}>Refetch</button>\n  \t<pre>{JSON.stringify($data, null, 2)}</pre>\n  </div>\n  ```\n\n- Version 2.0.0 usage example\n\n  ```svelte\n  <script lang=\"ts\">\n  \timport axiosPlus from 'svelte-axios-plus';\n\n  \tconst { req, refetch } = axiosPlus('https://reqres.in/api/users?delay=1');\n  </script>\n\n  {#if req.loading}\n  \t<p>Loading...</p>\n  {:else if req.error}\n  \t<p>Error!</p>\n  {/if}\n  <div>\n  \t<button onclick={() => refetch()}>Refetch</button>\n  \t<pre>{JSON.stringify(req.data, null, 2)}</pre>\n  </div>\n  ```\n\n</details>\n\n## Testing\n\nTesting components that use `axiosPlus` may experience test isolation issues due to built-in caching. To ensure proper test isolation, call the configure function before each test to disable the cache:\n\n```ts\nconfigure({ cache: false });\n```\n\n## Promises\n\n`svelte-axios-plus` requires ES6 Promise support. Check your environment's compatibility [here](http://caniuse.com/promises).\n\nFor environments without ES6 Promise support, use some polyfill like this one [ES6 promise](https://github.com/jakearchibald/es6-promise).\n\n## Credits\n\n`svelte-axios-plus` is heavily inspired by [axios-hooks](https://github.com/simoneb/axios-hooks).\n\nIt began as a simple port of the `axios-hooks` package to svelte, but over the time I added some additional features that are not present in the `axios-hooks` package.\n\n## License\n\n[MIT License](https://github.com/itsEzz/svelte-axios-plus/tree/master/LICENSE.md)\n\nDependencies:\n\n- [axios](https://github.com/axios/axios)\n- [lru-cache](https://github.com/isaacs/node-lru-cache)\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3652, 115],
		[3659, 8],
		[3666, 5],
		[3673, 3],
		[3680, 2],
		[3687, 2],
		[3694, 4],
		[3701, 1],
		[3708, 1],
		[3715, 2],
		[3722, 4],
		[3736, 2],
		[3750, 4],
		[3757, 2],
		[3764, 2],
		[3778, 2],
		[3792, 1],
		[3799, 1],
		[3806, 1],
		[3827, 1],
		[3834, 10],
		[3841, 1],
		[3848, 2],
		[3876, 1],
		[3890, 2],
		[3897, 61],
		[3904, 14],
		[3911, 3],
		[3918, 1],
		[3925, 3],
		[3939, 2],
		[3946, 2],
		[3953, 70],
		[3960, 69],
		[3967, 8],
		[3974, 9],
		[3981, 2],
		[3988, 3],
		[3995, 3],
		[4002, 61],
		[4009, 15],
		[4016, 4],
		[4023, 4],
		[4030, 3],
		[4037, 13],
		[4044, 9],
		[4051, 3],
		[4065, 2],
		[4100, 9],
		[4107, 18],
		[4114, 11],
		[4121, 10],
		[4128, 1]
	]
}
