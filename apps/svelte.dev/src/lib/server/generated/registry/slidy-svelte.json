{
	"name": "@slidy/svelte",
	"description": "Creates simple, configurable carousel component for Svelte.",
	"repo_url": "https://github.com/Valexr/slidy",
	"authors": ["valexr"],
	"homepage": "https://github.com/Valexr/Slidy/tree/master/packages/svelte",
	"downloads": 207,
	"updated": "2024-11-20T12:02:25.399Z",
	"tags": ["ui"],
	"github_stars": 347,
	"typescript": true,
	"version": "3.5.3",
	"svelte_range": "^5.0.0",
	"last_rune_check_version": "3.5.3",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@slidy/svelte",
				"version": "3.5.3",
				"size": 117483
			},
			{
				"name": "@slidy/core",
				"version": "3.8.0",
				"size": 53039
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "<div align=\"center\">\n    <a href=\"https://www.npmjs.com/package/@slidy/svelte\">\n        <img alt=\"npm package version\" src=\"https://img.shields.io/npm/v/@slidy/svelte?style=flat-square\" />\n    </a>\n    <a href=\"https://www.npmjs.com/package/@slidy/svelte\">\n        <img alt=\"types included\" src=\"https://img.shields.io/npm/types/@slidy/svelte?style=flat-square\" />\n    </a>\n    <a href=\"https://www.npmjs.com/package/@slidy/svelte\">\n        <img alt=\"downloads count\" src=\"https://img.shields.io/npm/dm/@slidy/svelte?style=flat-square\" />\n    </a>\n    <a href=\"https://www.npmjs.com/package/@slidy/svelte\">\n        <img alt=\"licence\" src=\"https://img.shields.io/npm/l/@slidy/svelte?style=flat-square\" />\n    </a>\n    <a href=\"https://bundlephobia.com/package/@slidy/svelte\">\n        <img alt=\"minzipped size\" src=\"https://img.shields.io/bundlephobia/minzip/@slidy/svelte?style=flat-square\" />\n    </a>\n    <a href=\"https://bundlephobia.com/package/@slidy/svelte\">\n        <img alt=\"dependency count\" src=\"https://badgen.net/bundlephobia/dependency-count/@slidy/svelte?style=flat-square\" />\n    </a>\n</div>\n\n# @slidy/svelte\n\nSimple, configurable & reusable carousel component built with SvelteJS based on [@slidy/core][core-package].\n\nTry the [demo].\n\n## Getting started\n\nThe package is available via [npm]:\n\n```\nnpm i @slidy/svelte\n```\n\nPlayground is available in [REPL].\n\n## Usage\n\nThe most simple way to get started is to use named import of `<Slidy />` component:\n\n```svelte\n<script>\n\timport { Slidy } from \"@slidy/svelte\";\n\n\tconst slides = [\n\t\t{\n\t\t\tid: 1,\n\t\t\twidth: 800,\n\t\t\theight: 1200,\n\t\t\tsrc: \"static/img/some-image.webp\",\n\t\t},\n\t];\n</script>\n\n<Slidy {slides} />\n```\n\nAll props are optional. The only property to get started is `slides` - an array of objects with image related data.\n\n## Core Component\n\n`Core` is a wrapper component for [@slidy/core][core-package] available via named import. It is best to use to build up the custom component for specific needs or when just the basic functionality is needed.\n\n```svelte\n<script>\n\timport { Core } from \"@slidy/svelte\";\n</script>\n\n<Core>\n\t<!-- your carousel items passed via slot -->\n</Core>\n```\n\n### Core Component API\n\n| Property      |     Default      |    Type    | Description |\n| :------------ | :--------------: | :--------: | :------------------ |\n| `animation` | `undefined` | `AnimationFunc ` | Custom slide animation. |\n| `axis` | `\"x\"` | `\"x\" | \"y\"` | The scroll direction. |\n| `clamp` | `0` | `number` | Defines number of items to jump over at one slide action. |\n| `className` | `\"\"` | `string` | Passes the `class` to the node. |\n| `duration` | `450` | `number` | Slide transitions duration value. |\n| `easing` | `undefined` | `(t: number => number)` | Inertion scroll easing behaviour. |\n| `gravity` | `1.2` | `number` | Scroll inertia value. |\n| `indent` | `0` | `number` | Custom scroll indent value, calculates as `gap * indent`. |\n| `index` | `0` | `number` | The index of the initial slide. |\n| `loop` | `false` | `boolean` | Makes the slideshow continious. |\n| `plugins` | `[]` | `PluginFunc[]` | The array of plugins. |\n| `position` | `0` | `number` | The current position value of the carousel. |\n| `sensity`| `5` | `number` | Defines the sliding sensity as the number of pixels required to drag. |\n| `snap` | `undefined` | `\"start\"  | \"center\" | \"end\" | \"deck\"` | Enforces the scroll stop positions. |\n| `tag` | `\"ol\"` | `string`  | The HTML tag name to render. |\n\nFor TypeScript users there is the `SlidyCoreOptions` interface available via named import.\n\n## Slidy Component\n\n`<Slidy />` component uses `<Core />` internally and provides more features expected from carousel.\n\n### Slidy Component API\n\nThe `<Slidy />` component interface extends the `<Core />`. There are a list of additional options available:\n\n| Property | Default | Type | Description |\n| :------- | :-----: | :--: | :---------- |\n| `arrows` | `true` | `boolean`  | Renders the arrow button controls for accessible slide navigation. |\n| `background` | `false` | `boolean` | Sets `background-image` instead of `<img />` elements to display slides. |\n| `classNames` | `SlidyStyles` | `SlidyStylesDefault` | The class names object used over the component. |\n| `getImgSrc` | `item => item.src` | `function` | The slide's `src` attribute getter. |\n| `getThumbSrc` | `item => item.src` | `function` | The thumbnail's `src` attribute getter. |\n| `groups` | `0` | `number` | Controls the number of items displayed per viewport. |\n| `i18n` | `i18nDefaults` | `I18NDict` | The i18n localization dictionary. |\n| `navigation` | `false` | `boolean` | Renders the navigation controls for pagination-like slide navigation. |\n| `progress` | `false` | `boolean` | Renders the progress bar. |\n| `slides` | `[]` | `Slides[]` | An array of objects with image metadata. |\n| `thumbnail` | `false` | `boolean`  | Renders the thumbnail navigation panel. |\n| `vertical` | `false` | `boolean` | Defines the slides flow by using `aria-orientation`. |\n\nBy default component works with images. Image object should contain `width` and `height` attributes to prevent layout shifts and `alt` for accessibility.\n\n## Styling\n\n### Extending/Overriding classes\n\nTo extend default component styles use `classNames` property. Default classes are available via object, that can be extended or overridden:\n\n```svelte\n<script>\n\timport { Slidy, classNames } from \"@slidy/svelte\";\n</script>\n\n<Slidy\n\tclassNames={{\n\t\troot: `${classNames.root} custom-class`,\n\t\t...classNames\n\t}}\n/>\n```\n\nThe `classNames` consist of `{ target: className }` pairs:\n\n| Target    | Default class      | Description |\n| :-------- | :----------------: | :-----------|\n| arrow     | `slidy-arrow`      | Arrow controls. |\n| autoplay  | `slidy-autoplay`   | Autoplay control. |\n| counter   | `slidy-counter`    | Slide progress counter. |\n| img       | `slidy-img`        | Slide image node. |\n| nav       | `slidy-nav`        | Slide navigation panel. |\n| nav-item  | `slidy-nav-item`   | Navigtion panel item. |\n| overlay   | `slidy-overlay`    | Slides overlay node. |\n| progress  | `slidy-progress`   | Slide progress bar. |\n| progress-handle | `slidy-progress-hadle` | Slide progress bar control handle. |\n| root      | `slidy`            | Component's root node. |\n| slide     | `slidy-slide`      | Slide item node. |\n| slides    | `slidy-slides`     | Slides list node. |\n| thumbnail | `slidy-thumbnail`  | Thumbnail item. |\n| thumbnail | `slidy-thumbnails` | Thumbnails bar. |\n\nThe `classNames` object is available via [context](https://svelte.dev/docs#run-time-svelte-getcontext) using `classNames` key.\n\n### Custom Properties API\n\nFor easier style customization `Slidy` provides a set of predefined custom properties to inherit:\n\nList of available public custom properties:\n\n| Property                       |  Default   |    Type     | Description                                          |\n| :----------------------------- | :--------: | :---------: | :--------------------------------------------------- |\n| `--slidy-arrow-bg`             |  #4e4e4ebf | `<color>`   | The arrow control background color.                  |\n| `--slidy-arrow-bg-hover`       |  #4e4e4e54 | `<color>`   | The arrow control hover background color.            |\n| `--slidy-arrow-icon-color`     |  currentColor | `<color>`   | The arrow control icon fill color.                |\n| `--slidy-arrow-size`           |  24px      | `<length>`  | The arrow controls size.                             |\n| `--slidy-counter-bg`           |  #4e4e4ebf | `<color>`   | The counter's background color.                      |\n| `--slidy-focus-ring-color`     |  #c9c9c9e6 | `<color>`   | Focus ring color for all focusable elements.         |\n| `--slidy-height`               |  100%      | `<length>`  | The height of the component's node.                  |\n| `--slidy-nav-item-color`       |  white     | `<color>`   | The navigation elements color.                       |\n| `--slidy-nav-item-radius`      |  0.35em    | `<length>`  | The navigation elements border radius.               |\n| `--slidy-nav-item-size`        |  16px      | `<length>`  | The navigation elements size.                        |\n| `--slidy-progress-thumb-color` |  #c44f61   | `<color>`   | The progress bar active track color.                 |\n| `--slidy-progress-track-color` |  #96969680 | `<color>`   | The progress bar track color.                        |\n| `--slidy-progress-track-size`  |  10px      | `<length>`  | The progress bar height.                             |\n| `--slidy-slide-aspect-ratio`   |  unset     | `<int/int>` | Defines the slide aspect-ratio.                      |\n| `--slidy-slide-bg-color`       |  darkgray  | `<color>`   | The placeholder background color for loading images. |\n| `--slidy-slide-gap`            |  1rem      | `<length>`  | The gap between items in carousel.                   |\n| `--slidy-slide-height`         |  100%      | `<length>`  | The carousel items height.                           |\n| `--slidy-slide-object-fit`     |  cover     |     -       | The carousel items (images) resize behaviour.        |\n| `--slidy-slide-radius`         |  1rem      | `<length>`  | The slide's border radius value.                     |\n| `--slidy-slide-width`          |  auto      | `<length>`  | The carousel items width.                            |\n| `--slidy-thumbnail-radius`     |  0.5rem    | `<length>`  | The thumbnail `border-radius` value.                 |\n| `--slidy-thumbnail-size`       |  50px      | `<length>`  | The thumbnail panel size.                            |\n| `--slidy-width`                |  100%      | `<length>`  | The width of the component's node.                   |\n\nThere are two options:\n\n#### --style-props\n\nSvelte supports passing down custom properties to component via [`--style-props`][svelte-custom-props]:\n\n```svelte\n<Slidy --slidy-slide-gap=\"1rem\" />\n```\n\nBear in mind that this way Svelte wraps the component in extra `<div />` with `display: contents`.\n\n#### Inherited custom properties\n\nMore optimal way is to use cascade. All supported custom properties starts with `--slidy-`. For example, to recolor navigation controls, let the component inherit a `--slidy-nav-item-color` custom property from any parent:\n\n```svelte\n<div class=\"parent\">\n\t<Slidy />\n</div>\n\n<style>\n\t.parent {\n\t\t--slidy-navigation-color: red;\n\t}\n</style>\n```\n\nOr just pass a class with a set of custom properties:\n\n```svelte\n<script>\n\timport { Slidy, classNames } from \"@slidy/svelte\";\n</script>\n\n<Slidy\n\tclassNames={{\n\t\troot: `${classNames.root} .some-class`,\n\t\t...classNames\n\t}}\n/>\n\n<style>\n\t.some-class {\n\t\t--slidy-navigation-color: red;\n\t\t--slidy-nav-item-size: 1rem;\n\t}\n</style>\n```\n\n## Slots\n\n### `arrow`\n\nCustomizes the content of the default arrow controls.\n\n### `arrows`\n\nProvides a slot for custom arrow buttons.\n\nIf the nodes are `<button /> ` and the `data-step` attribute is present, the event listener is not needed. Just provide the values `-1` and `1` for `data-step` on custom buttons.\n\nAlso, there are `grid-area` is present in the layout for this custom controls: `prev-slide` and `next-slide` respectively.\n\n```svelte\n<Slidy>\n\t<svelte:fragment slot=\"arrows\">\n\t\t<button data-step=\"-1\"> Show the previous slide </button>\n\t\t<button data-step=\"1\"> Show the next slide </button>\n\t</svelte:fragment>\n</Slidy>\n\n<style>\n\tbutton:first-of-type {\n\t\tgrid-area: prev-slide;\n\t}\n\n\tbutton:last-of-type {\n\t\tgrid-area: next-slide;\n\t}\n</style>\n```\n\n### `default`\n\nUsually the default markup is not enough. The `default` slot solves this problem. To use custom slide markup slot expose each `slides` prop item as `let:item` directive.\n\n```svelte\n<Slidy let:item>\n\t<figure>\n\t\t<img src={item.src} alt={item.figcaption} />\n\t\t<figcaption>\n\t\t\t{item.figcaption}\n\t\t</figcaption>\n\t</figure>\n</Slidy>\n```\n\n### `nav-item`\n\nProvides a slot for custom pagination buttons.\nSlot receives optional `index` and `active` props for proper functionality.\n\nCustom navigation item should be a `<button />` and have `data-index` attribute to function. Otherwise, control the component [externally](#external-controls).\n\n```svelte\n<Slidy let:active let:index>\n\t<button slot=\"nav-item\" data-index={index} {active} {index} />\n</Slidy>\n```\n\n### `overlay`\n\nSlot to display content overlaid content. It covers the slides area and can be customized by overriding the `.slidy-overlay`. For example, it is used to display the counter.\n\n```svelte\n<Slidy>\n\t<svelte:fragment slot=\"overlay\">\n\t\t<button> Share </button>\n\t</svelte:fragment>\n</Slidy>\n```\n\n### `thumbnail`\n\n_Work in progress_\n\n## Events\n\nThe component forwards custom events:\n\n| Name      | Description                      |             Event detail              |\n| :-------- | :------------------------------- | :-----------------------------------: |\n| `destroy` | Component is destroyed.          |                `node`                 |\n| `index`   | The current slide index changes. | `{ index: number, position: number }` |\n| `keys`    | The key pressed on focus.        |             `event.code`              |\n| `mount`   | Component is mounted to the DOM. |         `{ childs, options }`         |\n| `move`    | Navigation occurs.               | `{ index: number, position: number }` |\n| `resize`  | Component's dimentions changes.  |          `{ node, options }`          |\n| `update`  | Component's props changes.       |               `options`               |\n\n## i18n\n\nTo modify all texts used in the component use pass the dictionary as `i18n` prop. For the sake of accessibility, it is recommended translating defaults:\n\n| Key       | Default                         |             Event detail              |\n| :-------- | :------------------------------ | :-----------------------------------: |\n| `carousel`| \"carousel\"                      | `aria-label` of a root element.       |\n| `counter` | \"%s of %s\"                      | `aria-label` of each slide as {slide number} of {slide length} |\n| `first`   | \"Go to the first slide\"         | `aria-label` of the first item at the navigation. |\n| `last`    | \"Go to the last slide\"          | `aria-label` of the last item at the navigation. |\n| `next`    | \"Go to the next slide\"          | `aria-label` of the arrow control. |\n| `play`    | \"Start autoplay\"                | `aria-label` of the autoplay control. |\n| `prev`    | \"Return back to previous slide\" | `aria-label` of the arrow control. |\n| `slide`   | \"Slide\"                         | `aria-roledescription` of each slide item. |\n| `slideN`  | \"Go to the slide %s\"            | `aria-label` of pagination of each slide item. |\n| `stop`    | \"Stop autoplay\"                 | `aria-label` of the autoplay control. |\n\n## Recipes\n\n### External controls\n\nIt is possible to control the navigation of the `Slidy` instance from the parent component via binding.\n\nThere are two variables available to control the component externally: `index` and `position`. Declare the variables to hold the values and bind them to the instance for the carousel control.\n\n```svelte\n<script>\n\timport { Slidy } from \"svelte-slidy\";\n\n\tlet index = 0;\n\tlet position = 0;\n</script>\n\n<button on:click={() => (index += 1)}> Next slide </button>\n\n<button on:click={() => (position += 50)}> Move </button>\n\n<Slidy bind:index bind:position />\n```\n\n## Possible issues\n\n- Slides should not have `absolute` positioning, otherwise the [core-package][] script won't get correct dimentions;\n- Using the `background` option usually is not recommended. In case you need to use it, specify the slide sizes with custom properties: `width` and `height`, or just `aspect-ratio`.\n\n## License\n\nMIT &copy; [EricRovell](https://github.com/EricRovell)\n\n[core-package]: https://github.com/Valexr/slidy/tree/master/packages/core\n[demo]: https://valexr.github.io/Slidy\n[npm]: https://www.npmjs.com/package/@slidy/svelte\n[repl]: https://svelte.dev/repl/de699aa1f8c04874b0402352ac93df96\n[svelte-custom-props]: https://svelte.dev/docs#template-syntax-component-directives---style-props\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 131],
		[3596, 193],
		[3603, 119],
		[3610, 100],
		[3617, 123],
		[3624, 102],
		[3631, 75],
		[3638, 84],
		[3645, 57],
		[3652, 110],
		[3659, 223],
		[3666, 280],
		[3673, 82],
		[3680, 187],
		[3687, 76],
		[3694, 113],
		[3701, 209],
		[3708, 144],
		[3715, 106],
		[3722, 153],
		[3729, 218],
		[3736, 214],
		[3743, 229],
		[3750, 216],
		[3757, 207],
		[3764, 221],
		[3771, 231],
		[3778, 145],
		[3785, 184],
		[3792, 344],
		[3799, 141],
		[3806, 189],
		[3813, 104],
		[3820, 227],
		[3827, 160],
		[3834, 141],
		[3841, 295],
		[3848, 169],
		[3855, 200],
		[3862, 206],
		[3869, 239],
		[3876, 162],
		[3883, 226],
		[3890, 126],
		[3897, 232],
		[3904, 172],
		[3911, 136],
		[3918, 131],
		[3925, 400],
		[3932, 385],
		[3939, 223],
		[3946, 84],
		[3953, 235],
		[3960, 568],
		[3967, 346],
		[3974, 688],
		[3981, 209],
		[3988, 223],
		[3995, 150],
		[4002, 145],
		[4009, 192],
		[4016, 184],
		[4023, 240],
		[4030, 272],
		[4037, 213],
		[4044, 204],
		[4051, 184],
		[4058, 221],
		[4065, 218],
		[4072, 155],
		[4079, 177],
		[4086, 176],
		[4093, 145],
		[4100, 19],
		[4107, 199],
		[4114, 207],
		[4121, 319],
		[4128, 245]
	],
	"esm": true,
	"cjs": true
}
