{
	"name": "svelte-used",
	"description": "Provide useful Svelte store extensions and utilities.",
	"repo_url": "",
	"authors": ["1bye"],
	"downloads": 6,
	"updated": "2023-12-04T12:01:41.579Z",
	"tags": ["miscellaneous"],
	"typescript": true,
	"version": "0.0.7",
	"svelte_range": "^4.0.0",
	"kit_range": "^1.27.4",
	"last_rune_check_version": "0.0.7",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-used",
				"version": "0.0.7",
				"size": 21843
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Svelte Used\nThe package is under progress!!\n## Stores\n\n### Extendable\n\n- **extendable**: Allows the extension of a store with functions.\n  ```typescript\n  // extendable, initial value as 'hammer'\n  const store = extendable<{\n    setHoe()\n  }>('hammer', (store) => ({\n    setHoe() {\n        store.set('hoe');\n    }\n  }));\n  \n  // change the store value to 'hoe'\n  store.setHoe();\n  ```\n\n  **extendableFrom**:\n  ```typescript\n  const store = writable('hammer');\n  \n  // extends from an existing store\n  const extendedStore = extendableFrom<{\n    setHoe()\n  }>(store, (store) => ({\n    setHoe() {\n        store.set('hoe');\n    }\n  }))\n  \n  extendedStore.setHoe();\n  ```\n\n- **historyable**: Adds the old value into subscribe and update functions.\n  ```typescript\n  const store = historyable('hello!');\n  \n  store.set('good!');\n  \n  store.update((value, old) => {\n    // value -> 'good!' \n    // old -> 'hello!'\n    return 'new';\n  });\n  ```\n\n  **historyableFrom**: Same as historyable but receives the store as an initial value.\n\n- **undoable**: Adds undo/redo functionality inside the store, automatically committing changes.\n  ```typescript\n  const store = writable('value');\n  const { history, undo, redo, canUndo, canRedo } = undoable(store);\n  \n  store.set('something');\n  \n  // returns to 'value'\n  undo();\n  // returns to 'something';\n  redo();\n  // returns to 'something';\n  redo();\n  \n  canUndo // <- true\n  canRedo // <- false\n  ```\n\n  **manualUndoable**: Does not automatically commit changes.\n  ```typescript\n  const store = writable('value');\n  // Same values as undoable, but with a commit function\n  const { history, undo, redo, canUndo, canRedo, commit } = manualUndoable(store);\n  \n  store.set('something');\n  // doesn't work because it's not committed\n  undo();\n  redo();\n  \n  commit();\n  // to 'value'\n  undo();\n  // to 'something'\n  redo();\n  \n  // history looks like:\n  type UndoableHistory<T> = {\n    stack: T[],\n    value: T,\n    index: number\n  }\n  ```\n\n### Transition\n\n- **typewriter**: The typewriter from the official docs.\n\n### Use\n\n### JSON\n\n**$JSON** is a Svelte analog for JSON, where in objects, you have the stores.\n\nHow to use:\n```typescript\nimport { $JSON } from 'svelte-able/json'\nconst OBJ = {\n    store: writable('hello!')\n}\n// works with deep nested objects\nconst res = $JSON.stringify(OBJ);\nconsole.log(res)\n// {\"store@writable\": \"hello!\"}\n// if it was readable\n// {\"store@readable\": \"hello!\"}\n// if any other store\n// {\"store@writable\": \"hello!\"}\n\n// If you don't want to have @writable/@readable:\nconst res2 = $JSON.stringify(OBJ, true);\nconsole.log(res2)\n// {\"store\": \"hello!\"}\n\n// Allows parsing the $JSON.stringify value\nconst parsed = $JSON.parse(res);\n/* parsed -> {\n    store: writable('hello!')\n} */\n\n// to parse $JSON.stringify with true, just use regular JSON.parse\nconst parsed2 = JSON.parse(res2);\n```",
	"legacy_svelte": false,
	"downloads_history": [
		[3617, 119],
		[3624, 232],
		[3631, 8],
		[3638, 1],
		[3645, 7],
		[3652, 11],
		[3666, 10],
		[3673, 24],
		[3687, 1],
		[3694, 9],
		[3715, 6],
		[3722, 9],
		[3729, 2],
		[3743, 6],
		[3750, 1],
		[3757, 5],
		[3764, 1],
		[3771, 1],
		[3778, 19],
		[3785, 2],
		[3792, 1],
		[3799, 4],
		[3806, 3],
		[3813, 5],
		[3820, 2],
		[3834, 30],
		[3848, 9],
		[3862, 1],
		[3869, 4],
		[3876, 2],
		[3883, 1],
		[3890, 12],
		[3897, 1],
		[3904, 1],
		[3911, 6],
		[3918, 1],
		[3925, 1],
		[3932, 1],
		[3939, 2],
		[3946, 3],
		[3953, 2],
		[3960, 1],
		[3967, 4],
		[3974, 3],
		[3995, 1],
		[4023, 1],
		[4037, 17],
		[4044, 7],
		[4051, 4],
		[4065, 1],
		[4072, 3],
		[4093, 2],
		[4100, 18],
		[4107, 2],
		[4114, 6],
		[4121, 10],
		[4128, 3],
		[4135, 6]
	],
	"esm": true,
	"cjs": false
}
