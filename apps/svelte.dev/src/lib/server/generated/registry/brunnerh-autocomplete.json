{
	"name": "@brunnerh/autocomplete",
	"description": "Create autocomplete component for Svelte projects.",
	"repo_url": "",
	"authors": ["brunnerh"],
	"homepage": "https://github.com/brunnerh/autocomplete",
	"downloads": 4,
	"updated": "2020-03-10T20:24:40.005Z",
	"tags": ["ui"],
	"typescript": false,
	"version": "0.1.2",
	"svelte_range": "^3.19.2",
	"last_rune_check_version": "0.1.2",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@brunnerh/autocomplete",
				"version": "0.1.2",
				"size": 96474
			}
		],
		"dependencies": [],
		"circular": []
	},
	"legacy_svelte": true,
	"readme": "# Autocomplete Component\n\nAn autocomplete component which can be used as a regular ES module import or as a [*Svelte*][svelte] component.\n\nIt has no dependencies, handles synchronous and asynchronous data sources, supports item templating and escapes any HTML automatically.\n\n([Change log][changelog])\n\n## Install\n\n```\nnpm install @brunnerh/autocomplete\n```\n\n## Usage\n\nIn a *Svelte* project the component can be imported in a `<script>` section and then used in the HTML like any other:\n\n```html\n<script>\n\t// (Named import!)\n\timport { AutoComplete } from '@brunnerh/autocomplete';\n\n\tconst items = ['Apple', 'Orange', 'Pear'];\n</script>\n\n<AutoComplete items={() => items}/>\n```\n\nIn any other type of project, the component can be instantiated in the script:\n\n```html\n<div id=\"autocomplete-target\"></div>\n\n<script type=\"module\">\n\timport { AutoComplete } from '@brunnerh/autocomplete';\n\n\tconst items = ['Apple', 'Orange', 'Pear'];\n\tnew AutoComplete({\n\t\ttarget: document.querySelector('#autocomplete-target'),\n\t\tprops: { items: () => items },\n\t});\n</script>\n```\n\nFor documentation of how to interact with component instances see [Client-side component API][client-side-api] in the *Svelte* docs.\n\n### Properties\n\n| Prop               | Type                                 | Default     | Description |\n|--------------------|--------------------------------------|-------------|-------------|\n| `id`               | `string \\| null`                     | `null`      | Sets the `id` of the input element. |\n| `name`             | `string \\| null`                     | `null`      | Sets the `name` of the input element. |\n| `className`        | `string`                             | `''`        | Sets additional class name/names of the input element (should be space separated). |\n| `placeholder`      | `string \\| null`                     | `null`      | Sets the `placeholder` of the input element. |\n| `title`            | `string \\| null`                     | `null`      | Sets the `title` of the input element. |\n| `required`         | `boolean`                            | `false`     | Sets the `required` attribute on the input element if `true`. |\n| `disabled`         | `boolean`                            | `false`     | Sets the `disabled` attribute on the input element if `true`. |\n| `tabindex`         | `number \\| undefined`                | `undefined` | Sets the `tabindex` attribute on the input element. |\n| `autoScroll`       | `boolean`                            | `true`      | Automatically scrolls the component into view.<br/>Can be helpful if the component is at the bottom a scrollable area and the dropdown ends up off-screen. |\n| `autoScrollCursor` | `boolean`                            | `true`      | Automatically scrolls to the cursor position in the list.<br/>Turn off if there are performance issues. |\n| `items`            | `() => Item[]`                       |             | Sets the suggestions. See [Items Property](#items-property). |\n| `isOpen`           | `boolean`                            | `false`     | Gets or sets whether the suggestions dropdown is open. |\n| `key`              | `any`                                | `null`      | Gets the last selected key. See [Items Property](#items-property). |\n| `value`            | `any`                                | `null`      | Gets the last selected value. See [Items Property](#items-property). |\n| `results`          | `any[]`                              | `[]`        | Gets the subset of `items` that match the user input, reduced to the first `maxItems` items. |\n| `search`           | `string`                             | `''`        | Gets or sets the current search term/input value. |\n| `isLoading`        | `boolean`                            | `false`     | Gets whether the component is currently loading the suggestions (if `items` returns a promise). |\n| `cursor`           | `number`                             | `0`         | Gets or sets the index of the currently highlighted item within the suggestions list. |\n| `cursorItem`       | `any`                                | `undefined` | Gets the currently highlighted item. |\n| `maxItems`         | `number?`                            | `undefined` | Sets the maximal number of items to show in suggestions list at a time. |\n| `fromStart`        | `boolean`                            | `false`     | Sets whether the search string has to appear at the start of the item. |\n| `caseSensitive`    | `boolean`                            | `false`     | Sets whether the search is case-sensitive. |\n| `minChar`          | `number`                             | `0`         | Sets the minimum number of characters required to trigger a search. |\n| `debounce`         | `number`                             | `0`         | Sets the time to wait in milliseconds before triggering a search. |\n| `blindSelection`   | `boolean`                            | `false`     | Sets whether suggested items are directly selected upon pressing arrow up/down while the dropdown is closed. |\n| `lazyDropdown`     | `boolean`                            | `false`     | Whether the DOM elements for the suggestions list are only created upon filtering/opening the suggestions dropdown. |\n| `searchRegEx`      | `(search: string) => RegExp \\| null` | `null`      | Custom search RegEx generator.<br/>If set, `fromStart` and `caseSensitive` will not be used. |\n| `searchFunction`   | Search Function                      | `null`      | Custom search function. See [Search Function Property](#search-function-property). |\n\n#### Items Property\n\nThe `items` property has to be a function returning a list of items for the auto-completion.\n\nThe return value can be a promise to load data asynchronously. Returning an existing promise if the list of suggestions can be cached is recommended. E.g.:\n\n```html\n<script>\n\t// Fetch once:\n\tconst suggestions = fetch('/api/items');\n</script>\n<AutoComplete items={() => suggestions}/>\n```\n\nThe items have to be strings or of the form:\n\n```typescript\n{\n\tkey: string,\n\tvalue?: any,\n}\n```\n\nThe key will be used for the search and displayed in the suggestions dropdown by default.\n\nThe `value` represents a technical item value that is assigned to the `value` property of the component upon selection. If no value is set, the whole item will be assigned.\n\nFor strings, the string will serve as key and value.\n\n#### Search Function Property\n\nThe property `searchFunction` can be used to provide custom search logic when a custom regular expression (`searchRegEx`) is not enough.\n\nThe type of the function is as follows:\n\n```typescript\n(search: string) => (text: string) => {\n\t/** Whether the item `text` matches `search`. */\n\tmatches: boolean,\n\t/**\n\t * An array of start and end index tuples for parts of the text that should be highlighted as matching.\n\t * Should be an empty array if nothing matches or no highlighting should be shown.\n\t */\n\thighlights: [number, number][],\n}\n```\n\nIf set, `fromStart`, `caseSensitive` and `searchRegEx` will not be used.\n\n### Events\n\nThe following events are emitted by the component, event data/forwarded event can be found in the `detail` property:\n\n| Type            | Description  |\n|-----------------|--------------|\n| `filtered`      | Fired after the suggestion list has been filtered. |\n| `item-selected` | Fired upon item selection, either by pressing Enter or clicking on one.<br/>The event data is the selected item. |\n| `focus`         | Forwarded from input. |\n| `blur`          | Forwarded from input. |\n| `input`         | Forwarded from input. |\n| `keydown`       | Forwarded from input. |\n| `click`         | Forwarded from input. |\n\n\n### Slots\n\nThe following slots can be used in *Svelte* projects:\n\n| Name       | Injected Props    | Description |\n|------------|-------------------|-------------|\n| `loading`  |                   | The loading indicator that is displayed while items are loading asynchronously.<br/>Default: `Loading data...` |\n| `template` | `result`          | A custom template for rendering the items. See [Template](#template) |\n\n#### `template`\n\nBy default, items show the item `key` with matching parts of the text highlighted. This slot can be used to customize this output.\n\nThe injected `result` prop has the following type:\n\n```typescript\n{\n\t/** The index of the item in the filtered results list (0-based). */\n\tindex: number,\n\n\t/** The key of the item. Either the `key` property or the item itself, if it a string. */\n\tkey: string,\n\n\t/** The value of the item. Either the `value` property or the whole item. */\n\tvalue: any,\n\n\t/** An HTML string that contains highlighted parts in spans with the class `ac-match`. */\n\tlabel: string,\n}\n```\n\nExample:\n\n```html\n<AutoComplete items={() => data} let:result>\n\t<!-- Renders item with index prefix and value in parentheses on a second line. -->\n\t<div slot=\"template\">\n\t\t{result.index + 1}: {@html result.label}\n\t\t<br/>\n\t\t<span style=\"font-size: smaller; opacity: 0.7\">({result.value})</span>\n\t</div>\n</AutoComplete>\n```\n\n## Styling\n\nThe component comes with a default style and defines various CSS custom properties to make theming easier.\n\nIt can also be styled via the classes of the various parts.\n\n### Structure\n\n```\n.autocomplete\n\tinput.autocomplete-input\n\t.autocomplete-results-dropdown\n\t\t.autocomplete-loading\n\t\tul.autocomplete-results-list\n\t\t\tli.autocomplete-result[.ac-highlighted]\n\t\t\t\tspan[.ac-match]\n```\n\n- `ac-highlighted` is applied to the item highlighted via arrow/up or mouse hover.\n- `ac-match` is applied to the parts of the item text that match the search.\n  - E.g.: Search: `ap`, item text: `Apple` => `<span class=\"ac-match\">Ap</span>ple`\n\n### CSS Custom Properties\n\n| Target                                | Name                                    | Default Value |\n|---------------------------------------|-----------------------------------------|---------------|\n| `.autocomplete-input`                 | `--ac-input-color`                      | `black` |\n| `.autocomplete-input`                 | `--ac-input-background`                 | `white` |\n| `.autocomplete-input`                 | `--ac-input-border`                     | `1px solid hsl(0, 0%, 60%)` |\n| `.autocomplete-input`                 | `--ac-input-border-radius`              | `0` |\n| `.autocomplete-input`                 | `--ac-input-padding`                    | `3px` |\n| `.autocomplete-input`                 | `--ac-input-margin`                     | `0` |\n| `.autocomplete-input`                 | `--ac-input-font-size`                  | `small` |\n| `.autocomplete-input`                 | `--ac-input-font-weight`                | `normal` |\n| `.autocomplete-results-dropdown`      | `--ac-dropdown-color`                   | Fallback: `--ac-input-color` |\n| `.autocomplete-results-dropdown`      | `--ac-dropdown-background`              | Fallback: `--ac-input-background` |\n| `.autocomplete-results-dropdown`      | `--ac-dropdown-box-shadow`              | `0px 2px 5px hsla(0, 0%, 0%, 0.7)` |\n| `.autocomplete-results-dropdown`      | `--ac-dropdown-margin:`                 | `0` |\n| `.autocomplete-results-dropdown`      | `--ac-dropdown-padding:`                | `0` |\n| `.autocomplete-results-dropdown`      | `--ac-dropdown-border-radius`           | `0` |\n| `.autocomplete-loading`               | `--ac-loading-color`                    | `inherit` |\n| `.autocomplete-loading`               | `--ac-loading-background`               | `none` |\n| `.autocomplete-loading`               | `--ac-loading-padding`                  | `0` |\n| `.autocomplete-loading`               | `--ac-loading-margin`                   | `5px` |\n| `.autocomplete-result`                | `--ac-result-color`                     | `inherit` |\n| `.autocomplete-result`                | `--ac-result-background`                | `none` |\n| `.autocomplete-result`                | `--ac-result-border`                    | `none` |\n| `.autocomplete-result`                | `--ac-result-margin`                    | `0` |\n| `.autocomplete-result`                | `--ac-result-padding`                   | `0.2em 0.5em` |\n| `.autocomplete-result`                | `--ac-result-border-radius`             | `0` |\n| `.autocomplete-result.ac-highlighted` | `--ac-result-highlighted-color`         | `inherit` + Fallback: `--ac-result-color` |\n| `.autocomplete-result.ac-highlighted` | `--ac-result-highlighted-background`    | `#dbdbdb` + Fallback: `--ac-result-background` |\n| `.autocomplete-result.ac-highlighted` | `--ac-result-highlighted-border`        | Fallback: `--ac-result-border` |\n| `.autocomplete-result.ac-highlighted` | `--ac-result-highlighted-margin`        | Fallback: `--ac-result-margin` |\n| `.autocomplete-result.ac-highlighted` | `--ac-result-highlighted-padding`       | Fallback: `--ac-result-padding` |\n| `.autocomplete-result.ac-highlighted` | `--ac-result-highlighted-border-radius` | Fallback: `--ac-result-border-radius` |\n| `.autocomplete-result .ac-match`      | `--ac-result-match-color`               | `inherit` |\n| `.autocomplete-result .ac-match`      | `--ac-result-match-background`          | `none` |\n| `.autocomplete-result .ac-match`      | `--ac-result-match-border-radius`       | `0` |\n| `.autocomplete-result .ac-match`      | `--ac-result-match-font-weight`         | `bold` |\n| `.autocomplete-result .ac-match`      | `--ac-result-match-font-style`          | `inherit` |\n\n## Attribution\n\n- [patoi/svelte-component-library-template][1] ([License][1l]) - Repo built on template.\n- [elcobvg/svelte-autocomplete][2] ([License][2l]) - Original code-base.\n\n [changelog]: https://github.com/brunnerh/autocomplete/blob/master/CHANGELOG.md\n [svelte]: https://svelte.dev/\n [client-side-api]: https://svelte.dev/docs#Client-side_component_API\n [1]: https://github.com/patoi/svelte-component-library-template\n [1l]: https://github.com/patoi/svelte-component-library-template/blob/master/LICENSE\n [2]: https://github.com/elcobvg/svelte-autocomplete\n [2l]: https://github.com/elcobvg/svelte-autocomplete/blob/master/LICENSE",
	"downloads_history": [
		[3589, 3],
		[3596, 8],
		[3603, 6],
		[3610, 2],
		[3631, 1],
		[3638, 1],
		[3645, 4],
		[3659, 4],
		[3666, 4],
		[3687, 1],
		[3708, 2],
		[3715, 5],
		[3736, 1],
		[3764, 4],
		[3771, 1],
		[3778, 1],
		[3785, 1],
		[3799, 2],
		[3806, 4],
		[3813, 1],
		[3834, 4],
		[3855, 1],
		[3862, 22],
		[3876, 6],
		[3890, 4],
		[3897, 5],
		[3904, 6],
		[3911, 1],
		[3918, 1],
		[3932, 2],
		[3939, 1],
		[3953, 1],
		[3960, 1],
		[3974, 5],
		[3981, 8],
		[3988, 1],
		[3995, 5],
		[4009, 7],
		[4016, 4],
		[4023, 8],
		[4030, 22],
		[4037, 2],
		[4044, 5],
		[4051, 2],
		[4058, 5],
		[4072, 21],
		[4079, 15],
		[4086, 10],
		[4093, 16],
		[4100, 6],
		[4114, 4],
		[4121, 10],
		[4128, 6]
	],
	"esm": false,
	"cjs": true
}
