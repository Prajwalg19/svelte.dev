{
	"name": "roots-router",
	"description": "Implement client-side routing for Svelte applications.",
	"repo_url": "https://github.com/PierBover/roots-svelte-router",
	"authors": ["pier25"],
	"homepage": "https://github.com/PierBover/roots-svelte-router#readme",
	"downloads": 4,
	"updated": "2021-11-29T23:58:12.565Z",
	"tags": ["router"],
	"github_stars": 9,
	"typescript": false,
	"version": "0.3.3",
	"svelte_range": "^3.41.0",
	"last_rune_check_version": "0.3.3",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "roots-router",
				"version": "0.3.3",
				"size": 32295
			},
			{
				"name": "svelte",
				"version": "3.59.2",
				"size": 10624206
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "<p align=\"center\"><img src=\"./graphics/roots-logo.svg\" width=\"200\"></p>\n\n# Roots\n\nThis is a client-side router for Svelte that uses history mode. It's somewhat stable but expect bugs and changes before the 1.0 release.\n\n### Features\n* Lightweight (aprox 3kB gzip)\n* No dependencies (other than Svelte)\n* Uses history API and native links for navigation\n* Multiple options to manage scrolling\n* Can compose nested components at the route definition\n\nDemo app: https://roots-router-demo.netlify.app/\n\nTo install:\n\n```\nnpm i roots-router\n```\n\n## Simple example\n\n### `App.svelte`\n```svelte\n<script>\n  import {RouterView, initRouter} from 'roots-router';\n\n  import Home from './Home.svelte';\n  import About from './About.svelte';\n  import Contact from './Contact.svelte';\n  import Error from './Error.svelte';\n  import Menu from './Menu.svelte';\n\n  const config = {\n    notFoundComponent: Error,\n    routes: [\n      { path: '/', component: Home },\n      { path: '/about', component: About },\n      { path: '/contact', component: Contact }\n    ]\n  }\n\n  initRouter(config);\n</script>\n\n<Menu/>\n<RouterView/>\n```\n\n### `Menu.svelte`\n```svelte\n<script>\n  import {link, active} from 'roots-router';\n</script>\n\n<nav>\n  <a href=\"/\" use:link use:active>Home</a>\n  <a href=\"/about\" use:link use:active>About</a>\n  <a href=\"/contact\" use:link use:active>Contact</a>\n</nav>\n```\n\n## More complex router config example\n\nThis example is taken from the [demo app](demo-app/src/router.js).\n\n```js\n// Router configuration object\n{\n  notFoundComponent: Error,\n  onRouteMatch: (from, to) => {\n    // If the route is not private, just return true and let the router continue\n    if (!to.meta.isPrivate) return true;\n\n    if (isAuthenticated) {\n      return true;\n    } else {\n      navigate({\n        path: '/login',\n        replace: true\n      });\n    }\n  },\n  routes: [\n    { path: '/', component: Home },\n    { path: '/login', component: Login },\n    { path: '/about', component: About },\n    { path: '/about/some-modal', components: [About, Modal], blockPageScroll: true },\n    { path: '/hello/:name', component: Hello },\n    {\n      path: '/nested',\n      component: Nested,\n      children: [\n        { component: DefaultChild },\n        {\n          path: 'child-a',\n          component: ChildA,\n          children: [\n            {component: GrandchildA }\n          ]\n        },\n        { path: 'child-b', component: ChildB }\n      ]\n    },\n    {\n      path: '/private',\n      component: Private,\n      meta: {\n        isPrivate: true\n      }\n    },\n  ]\n}\n```\nthis configuration will produce the following available paths:\n```\n/\n/login\n/about\n/about/some-modal\n/hello/:name\n/nested\n/nested/child-a\n/nested/child-b\n/private\n```\n\n## The `RouterView` component\n\nThis component simply renders the current route and nested routes. It does not contain any logic or state. You can freely add it, remove it, or move it around as you see fit. This will not change the state of the router.\n\nFor example this could be your `App.svelte` component:\n\n```svelte\n<script>\n  import {onMount} from 'svelte';\n  import {RouterView} from 'roots-router';\n  import Spinner from './Spnner.svelte';\n  import {fetchIntialData} from 'api';\n\n  let initialData;\n\n  onMount(async () => {\n    initialData = await fetchIntialData();\n  });\n</script>\n\n{#if initialData}\n  <RouterView/>\n{:else}\n  <Spinner/>\n{/if}\n```\n\n## Configuring routes\nThe most basic route must have at least a `path` and a `component` reference:\n```js\n{ path: '/about', component: About }\n```\n\n### Path paramaters\n\n```js\n{ path: '/products/:productId', component: ProductDetail }\n```\n\nPath parameters will be available in the `params` object of the `currentRoute` store:\n\n```svelte\n<script>\n  import {currentRoute} from 'roots-router';\n  console.log($currentRoute.params);\n</script>\n```\n\n### Meta data\n\nYou can also add a `meta` object to your routes with custom data. You can read this data from the `onRouteMatch` hook, or from the `currentRoute` store:\n\n```js\n{\n  path: '/private',\n  component: Private,\n  meta: {\n    isPrivate: true\n  }\n}\n```\n\n### Nested routes\nYou can add nested routes using the `children` array:\n```js\n{\n  path: '/characters',\n  component: Characters,\n  children: [\n    { path: '/yoda', component: Yoda },\n    { path: '/han-solo', component: HanSolo },\n  ]\n}\n```\nThese routes will produce two available paths:\n* `/characters/yoda`\n* `/characters/han-solo`\n\nThe router will render child routes in the default slot of the parent component:\n```svelte\n// Characters.svelte\n<h1>Star Wars Characters</h1>\n<slot></slot>\n```\n\nWhen matching the path `/characters/yoda`, the `Yoda` component will be rendered inside `Characters`.\n\nIt's possible to add a default first child without a path:\n\n```js\n{\n  path: '/characters',\n  component: Characters,\n  children: [\n    { component: CharacterList },\n    { path: '/yoda', component: Yoda },\n    { path: '/han-solo', component: HanSolo },\n  ]\n}\n```\nNow there will be three paths available:\n* `/characters` which will render the default `CharacterList` inside `Characters`\n* `/characters/yoda`\n* `/characters/han-solo`\n\n\n### Composing nested components\nNested components can be composed right from the router by using the `components` array:\n\n```js\n{ path: '/some-path', components: [Parent, Child] }\n````\n\nJust as with nested routes, this will render the `Child` component in the default slot of the `Parent` component.\n\nThis feature is useful for using components as layouts, nesting layouts, or integrating modals with the router. For example, when you want deep linking on modals, or you'd like a modal to close when pressing back:\n\n```js\n// Layout\n{ path: '/home', components: [AppLayout, ShellLayout, Home] },\n\n// Picture modal\n{ path: '/photos', components: [Photos] },\n{ path: '/photos/:photoId', components: [Photos, PhotoDetailModal], blockPageScroll: true }\n````\n\nSee the [demo app](demo-app/src/components/About.svelte) for an example on using modals that integrate with the router.\n\n## Links\n\nIn most cases, the recommended approach for navigation is using standard HTML links with the provided actions.\n\n### `link` action\n\nTo trigger route changes use the `link` action:\n\n```svelte\n<script>\n  import {link} from 'roots-router';\n</script>\n\n<!-- Simple navigation -->\n<a href=\"/about\" use:link>About</a>\n\n<!-- Navigate without scrolling to the top -->\n<a href=\"/some/nested/path\" use:link={{scrollToTop: false}}>Some tab section</a>\n\n<!-- Navigate and then scroll to an element with an id -->\n<a href=\"/user/settings\" use:link={{scrollToId: 'password-form'}}>Set your password</a>\n```\n\nThe `link` action will be totally bypassed on clicks with modifiers (Alt, Control, etc) to maintain native behavior.\n\n### `active` action\nTo highlight an active link use the `active` action.\n\nBy default, this will add the `active` CSS class to the element, but you can configure it to use a different class.\n\n```svelte\n<script>\n  import {link, active} from 'roots-router';\n</script>\n\n<!-- Will mark as active if the router is on /about -->\n<a href=\"/about\" use:link use:active>About</a>\n\n<!-- Mark as active if the href also matches the start of the current path eg: /products/123456/reviews -->\n<a href=\"/products\" use:link use:active={{matchStart: true}}>Products</a>\n```\n\n#### Custom active CSS class\n\nYou can define a custom default active CSS class using the `activeClass` setting in the router configuration, or in the action settings:\n\n```svelte\n<a href=\"/about\" use:link use:active={{activeClass: 'is-active'}}>About</a>\n```\n\n#### `aria-current` value\n\nBy default, the `active` action will add `aria-current=\"page\"` on an active link. You can customize this value depending on your use case:\n\n```svelte\n<a href=\"/about\" use:link use:active={{ariaCurrent: 'location'}}>About</a>\n```\n\nSee the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/Element/ariaCurrent) for more info on the `aria-current` attribute.\n\n## Programmatic navigation\n\nSince this router uses the history API, to go back and forward you can simply use:\n\n```js\n// Go back\nwindow.history.back();\n\n// Go forward\nwindow.history.forward();\n```\n\n### `navigate()`\n\n```js\nimport {navigate} from 'roots-router';\n\n// Navigate to a path\nnavigate('/about');\n\n// Navigate and replace current history item instead of pushing a new route\nnavigate({\n  path: '/about',\n  replace: true\n});\n\n// Navigate but don't add the change to the history\nnavigate({\n  path: '/about',\n  addToHistory: false\n});\n\n// Navigate but don't scroll to the top\nnavigate({\n  path: '/about',\n  scrollToTop: false\n});\n\n// Navigate and scroll to an id afterwards\nnavigate({\n  path: '/user/settings',\n  scrollToId: 'password-form'\n});\n```\n\n## Scrolling\n\nBy default, every route change will scroll to the top left of the page. This can be avoided in three ways:\n\n1. Set `scrollToTop` to `false` on the initial configuration of the router.\n2. Add a configuration to the `link` action `<a href=\"/about\" use:link={{scrollToTop: false}}>About</a>`.\n3. Set `blockPageScroll` to `true` on a route configuration which will remove the scroll when rendering the route.\n\nScroll configuration and positions are restored when going back and forward.\n\n### How to enable or disable smooth scrolling?\nThis router is agnostic to the scrolling behavior. You should respect a user's [`prefers-reduced-motion`](https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion) setting via CSS. See [how Boostrap does it](https://github.com/twbs/bootstrap/blob/644afc276169fd94ee2e6c5c79df8337be1b12ed/scss/_reboot.scss#L28-L36) for example.\n\n## Query string parameters\n\nIf there are querystring parameters in the URL, you will be able to read them from the `query` object of the `currentRoute` store:\n\n```svelte\n<script>\n  import {currentRoute} from 'roots-router';\n  console.log($currentRoute.query);\n</script>\n```\n\nYou can also set parameters to the URL without triggering a page change by using the `addQueryParamsToUrl` utility function:\n\n```svelte\n<script>\nimport {addQueryParamsToUrl} from 'roots-router';\n\nfunction addParams () {\n  addQueryParamsToUrl({\n    name: 'Pepito',\n    food: 'tacos'\n    });\n  }\n</script>\n\n<button type=\"button\" on:click={addParams}>Add params to query string</button>\n```\n\n## `onRouteMatch` hook\n\nThis router has a single global hook which is triggered when `navigate()` is used from the `link` action, or from programmatic navigation. The hook won't be triggered when going back or forward.\n\nIn your router configuration add a `onRouteMatch` sync function. If your hook function returns a truthy value, navigation will continue as usual. If it returns any falsy value, the router will simply stop the navigation request. It's up to you to navigate to another route if you wish to do so.\n\n```js\n// Router configuration object\n{\n  onRouteMatch: (from, to) => {\n    console.log('onRouteMatch:');\n    console.log('From', from);\n    console.log('To', to);\n\n    // If the route is public, return true and let the router continue doing its thing\n    if (to.meta.isPublic) return true;\n\n    // Or else check if the user is authenticated\n    if (isAuthenticated()){\n      return true;\n    } else {\n      navigate({\n        path: '/login',\n        replace: true\n      });\n    }\n  },\n  routes: [\n  ]\n}\n```\n\nBy design, this hook has to be a **sync** function. If you return a promise it will be ignored. Native promises cannot be cancelled and we didn't want to bloat the router with custom promise cancelation features. We also think a router should be agnostic in this matter.\n\nIf you need to perform async logic before entering a route, do so before triggering the route change. This way you'll have total control on how to cancel pending promises if the user triggers a navigation change before the promise has resolved. Then you can do this:\n\n```js\n// Router configuration object\n{\n  onRouteMatch: (from, to) => {\n    cancelPendingPromises();\n    return true;\n  }\n}\n```\n\n## Base path\nIf your application is running in a folder you can configure the `basePath` setting in the router options. For example if your app is runing in `/some/folder/` you can set:\n\n```js\n// Router configuration object\n{\n  basePath: '/some/folder/'\n}\n```\n\nThe first and last slashes are optional.\n\nOnce the router inits, this base path will be added automatically to all available routes. You don't need to add the base path when using the `navigate()` function or to the links using the `link` action, although if you do, nothing bad will happen.\n\n## API\n### Router configuration options\n\n* `notFoundComponent` a component reference that will be rendered if there are no matched routes.\n* `notFoundComponents` an array of component references that will be rendered if there are no matched routes.\n* `activeClass` the CSS class that will be applied to active links that use the `active` action. The default is `active`.\n* `scrollToTop` a boolean that determines if the scroll should be set to the top left when transitioning to a new route. The default is `true`.\n* `manageScroll` if set to `false` all scrolling features of the router will be ignored. The default is `true`.\n* `onRouteMatch` a sync function that will be triggered whenever a path matches a route.\n* `basePath` a base path that will be automatically added to all routes and links using the `link` action. The first and last slashes are optional.\n* `endWithSlash` a boolean which determines if paths will end with a slash or not. It also affects how the current path in displayed in the URL. The default is `false`.\n\n\n### Route configuration options\n* `path` the path of the route.\n* `component` the component that will be rendered when the path is matched.\n* `components` the component tree that will be rendered when the path is matched.\n* `children` an array of children routes.\n* `blockPageScroll` whether to removing the scrolling capability of the `body` element by setting `overflow: hidden;`.\n* `meta` and object with values that can be read from hooks or the `currentRoute` store.\n\n### `navigate()` options\n* `path` the path that will be used to match a route.\n* `scrollToTop` determines if the scroll should be set to the top left after transitioning to the next route. The default is `true`.\n* `scrollToId` scroll to an element with an `id` after transitioning to the next route.\n* `replace` replace the current item in history instead of adding a new one. The default is `false`.\n* `addToHistory` add item to history after navigation. The default is `true`.\n\n### `link` action options\n* `scrollToTop` determines if the scroll should be set to the top left after transitioning to the next route. The default is `true`.\n* `scrollToId` scroll to an element with an `id` after transitioning to the next route.\n\n### `active` action options\n* `matchStart` mark a link as active if the `href` value matches the start of the current path.\n* `activeClass` the CSS class that will be applied to the link if marked as active. The default is `active`.\n* `ariaCurrent` the value of the `aria-current` attribute that will be added to the link if marked as active.  The default is `page`.\n\n## FAQ\n\n## Roadmap\n\nFeatures that will be implemented in the not-so-distant future:\n\n* Route data cache\n* More hooks (probably)\n\nFeatures that will be implemented for the `1.0.0` release:\n\n* TypeScript\n* Code splitting\n\nFeatures that will not be implemented:\n\n* Nested routers",
	"legacy_svelte": true,
	"downloads_history": [
		[3603, 9],
		[3610, 2],
		[3617, 6],
		[3631, 1],
		[3645, 7],
		[3659, 1],
		[3666, 8],
		[3680, 1],
		[3701, 1],
		[3708, 1],
		[3722, 8],
		[3729, 1],
		[3743, 1],
		[3757, 7],
		[3771, 7],
		[3778, 1],
		[3785, 1],
		[3792, 2],
		[3799, 2],
		[3806, 8],
		[3834, 2],
		[3841, 4],
		[3855, 36],
		[3862, 3],
		[3876, 1],
		[3883, 1],
		[3890, 7],
		[3897, 1],
		[3904, 1],
		[3911, 1],
		[3918, 1],
		[3925, 2],
		[3932, 2],
		[3960, 2],
		[3981, 1],
		[4009, 1],
		[4016, 1],
		[4023, 1],
		[4030, 8],
		[4037, 10],
		[4044, 7],
		[4058, 1],
		[4065, 1],
		[4072, 1],
		[4093, 11],
		[4100, 9],
		[4107, 4],
		[4114, 4],
		[4121, 12],
		[4128, 4]
	],
	"esm": false,
	"cjs": true
}
