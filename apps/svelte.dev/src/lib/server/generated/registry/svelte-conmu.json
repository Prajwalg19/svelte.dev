{
	"name": "svelte-conmu",
	"description": "Provides a headless Svelte context menu library.",
	"repo_url": "https://github.com/jzillmann/svelte-conmu",
	"authors": ["jzillmann"],
	"homepage": "https://github.com/jzillmann/svelte-conmu#readme",
	"downloads": 6,
	"updated": "2023-05-06T18:07:49.138Z",
	"tags": ["ui"],
	"github_stars": 0,
	"typescript": true,
	"version": "0.0.3",
	"svelte_range": "^3.24.0",
	"last_rune_check_version": "0.0.3",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-conmu",
				"version": "0.0.3",
				"size": 300579
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "<p>\n  <a href=\"https://www.npmjs.com/package/svelte-conmu\">\n    <img src=\"https://img.shields.io/npm/v/svelte-conmu.svg\" alt=\"npm version\">\n  </a>\n</p>\n\n# svelte-conmu\n\nA Svelte Context Menu Library. Headless, the rendering/styling is completely in your hands.\nThe only things the library provides are:\n\n- Anchors the menu to the cursor in a way that it doesn't leave the screen\n- Makes sure the menu closes properly\n  - On clicks/right-clicks outside of the menu\n  - On menu selection\n  - On `Escape` keypress\n\nGet a taste with the [demo](https://jzillmann.github.io/svelte-conmu).\n\n## Getting started\n\n1. Install the library with `npm install --save-dev svelte-conmu`\n2. Setup one component - lets call it `ContextMenu.svelte` - which renders all the context menus you will have.\n\n   - First import `ContextMenuWrapper`:\n\n   ```JavaScript\n    import { ContextMenuWrapper } from \"svelte-conmu\";\n   ```\n\n   - The `ContextMenuWrapper` will pass you the `options`. You will define those later on. Here it's only about the look:\n\n   ```Svelte\n   <div id=\"context-menu\">\n     {#each options as option}\n       <!-- svelte-ignore a11y-click-events-have-key-events -->\n       {#if option.label == \"hr\"}\n         <hr />\n       {:else if option.action}\n         <div class=\"context-menu-option\" on:click={option.action}>\n           {option.label}\n         </div>\n       {:else}\n         <div class=\"context-menu-info\" on:click={close}>\n           {option.label}\n         </div>\n       {/if}\n     {/each}\n   </div>\n   ```\n\n   - **Note** how you could encode different type of contexts menu elements (like `select option`, `seperator` & `info` just by evaluating the option.)\n\n3. Add the **context menu trigger** and the **options to show** in any component you want.\n\n   - In the `script` section add this:\n\n   ```TypeScript\n   import { contextMenu, type ContextMenuOption } from \"svelte-conmu\";\n\n   const contextMenuOptions: ContextMenuOption[] = [\n    {\n      label: \"Do A\",\n      action: () => {\n        // do A..\n      },\n    },\n    { label: \"hr\" },\n    {\n      label: \"Do B\",\n      action: () => {\n        // do B...\n      },\n    },\n    ...\n   ];\n   ```\n\n   - and in the `html` section add the `trigger`:\n\n   ```Svelte\n   <div on:contextmenu|preventDefault|stopPropagation={(e) =>contextMenu.toggle(e, contextMenuOptions)}>My Content</div>\n   ```\n\n4. Final Step. Put the `ContextMenu.svelte` you build in the first step into your `App.svelte`\n\n```Svelte\n<ContextMenu />\n```\n\n- It doesn't matter `where` since the positioning is `absolute`. Also this display (`show/not-show`) will be handled by the library.\n\nFor full example see https://github.com/jzillmann/svelte-conmu/tree/main/example.\n\n## FAQ\n\n### How to extend ContextMenuOption with custom data\n\nYou can do that by extending the definition through a entry in a `t.ds` file, e.g. in `vite-env.d.ts`:\n\n```TypeScript\n// Extend svelte-conmu with highlight option\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport * as svelte_conmu from 'svelte-conmu';\n\ndeclare module 'svelte-conmu' {\n\texport interface ContextMenuOption {\n\t\thighlight?: () => boolean;\n\t}\n}\n```\n\nNow Type Script should give you type support for `highlight` when defining `ContextMenuOption`s and accessing them in your `ContextMenu.svelte`.\n\n## Develop\n\n- `npm build` to build the package\n- `npm link` to make the package locally available (e.g. for the example project)\n\n## How to release\n\n- Deploy a new version of the demo: `cd example; npm run deploy`\n- `npm publish`\n- tag with\n  - `git tag -a $releaseVersion -m \"$releaseVersion release\"`\n  - `git push --tags`\n- Increase version in `package.json`\n\n## Notes\n\nInspired by https://svelte.dev/repl/6fb90919e24942b2b47d9ad154386b0c?version=3.49.0.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 3],
		[3596, 7],
		[3603, 6],
		[3610, 4],
		[3617, 1],
		[3624, 5],
		[3631, 1],
		[3638, 1],
		[3659, 1],
		[3666, 5],
		[3687, 1],
		[3708, 1],
		[3743, 3],
		[3757, 2],
		[3778, 1],
		[3785, 1],
		[3792, 1],
		[3806, 3],
		[3834, 1],
		[3841, 15],
		[3848, 1],
		[3855, 6],
		[3862, 3],
		[3876, 1],
		[3883, 2],
		[3890, 3],
		[3911, 4],
		[3918, 1],
		[3932, 1],
		[3953, 1],
		[3960, 1],
		[3974, 1],
		[3981, 1],
		[4023, 2],
		[4030, 3],
		[4037, 11],
		[4044, 6],
		[4051, 1],
		[4065, 2],
		[4086, 1],
		[4100, 9],
		[4107, 1],
		[4114, 6],
		[4121, 4],
		[4128, 5]
	]
}
