{
	"name": "svelte2tsx-component",
	"description": "Converts Svelte templates to React components, useful for migration.",
	"repo_url": "",
	"authors": ["mizchi"],
	"downloads": 3,
	"updated": "2023-06-28T09:32:23.560Z",
	"tags": ["tooling"],
	"typescript": true,
	"version": "0.0.5",
	"svelte_range": "4.*",
	"last_rune_check_version": "0.0.5",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte2tsx-component",
				"version": "0.0.5",
				"size": 171809
			},
			{
				"name": "ts-clone-node",
				"version": "2.0.4",
				"size": 902161
			},
			{
				"name": "compatfactory",
				"version": "2.0.9",
				"size": 589621
			},
			{
				"name": "helpertypes",
				"version": "0.0.19",
				"size": 35408
			},
			{
				"name": "astring",
				"version": "1.9.0",
				"size": 273164
			},
			{
				"name": "estree-walker",
				"version": "3.0.3",
				"size": 17599
			},
			{
				"name": "@types/estree",
				"version": "1.0.7",
				"size": 26147
			},
			{
				"name": "magic-string",
				"version": "0.30.17",
				"size": 467464
			},
			{
				"name": "@jridgewell/sourcemap-codec",
				"version": "1.5.0",
				"size": 112815
			},
			{
				"name": "postcss",
				"version": "8.5.3",
				"size": 201969
			},
			{
				"name": "nanoid",
				"version": "3.3.11",
				"size": 32583
			},
			{
				"name": "picocolors",
				"version": "1.1.1",
				"size": 6373
			},
			{
				"name": "source-map-js",
				"version": "1.2.1",
				"size": 139872
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[0, 4],
			[0, 5],
			[5, 6],
			[0, 7],
			[7, 8],
			[0, 9],
			[9, 10],
			[9, 11],
			[9, 12]
		],
		"circular": []
	},
	"readme": "# svelte2tsx-component\n\nsvelte(`lang='ts'`) template to react component converter (PoC)\n\n```bash\n$ npm install svelte2tsx-component -D\n\n# default css generator is @emotion/css\n$ npm install react react-dom @types/react @types/react-dom @emotion/css -D\n```\n\n## Concepts\n\n- Generate Component Props Type from `script lang=\"ts\"`, leaving TypeScript type information\n- Convert svelte's built-in functionality into an idiom on React with similar results\n- Import `.svelte` transparently from React\n\n### API\n\n```ts\nimport { svelteToTsx } from \"svelte2tsx-component\";\nconst code = \"<div></div>\";\nconst tsxCode = svelteToTsx(code);\n```\n\n### with vite\n\n```ts\n// vite.config.ts\nimport { defineConfig } from \"vite\";\nimport { plugin as svelteToTsx } from \"svelte-to-tsx\";\nimport ts from \"typescript\";\n\nexport default defineConfig({\n  plugins: [svelteToTsx({\n    extensions: [\".svelte\"],\n    tsCompilerOptions: {\n      module: ts.ModuleKind.ESNext,\n      target: ts.ScriptTarget.ESNext,\n      jsx: ts.JsxEmit.ReactJSX,\n    }\n  })],\n});\n```\n\n## Examples\n\nsvelte template\n\n```svelte\n<script lang=\"ts\">\n  import { onMount } from \"svelte\";\n  export let foo: number;\n  export let bar: number = 1;\n\n  const x: number = 1;\n  let mut = 2;\n  onMount(() => {\n    console.log(\"mounted\");\n    mut = 4;\n  });\n\n  const onClick = () => {\n    console.log(\"clicked\");\n    mut = mut + 1;\n  }\n</script>\n<div id=\"x\" class=\"red\">\n  <h1>Nest</h1>\n  hello, {x}\n</div>\n<button on:click={onClick}>click</button>\n<style>\n  .red {\n    color: red;\n  }\n</style>\n```\n\nto tsx component (`react`)\n\n```ts\nimport { useEffect, useState } from \"react\";\nimport { css } from \"@emotion/css\";\n\nexport default ({ foo, bar = 1 }: { foo: number; bar?: number }) => {\n  const x: number = 1;\n  const [mut, set$mut] = useState(2);\n  useEffect(() => {\n    console.log(\"mounted\");\n    set$mut(4);\n  }, []);\n  const onClick = () => {\n    console.log(\"clicked\");\n    set$mut(mut + 1);\n  };\n  return (\n    <>\n      <div id=\"x\" className={selector$red}>\n        <h1>Nest</h1>\n        hello, {x}\n      </div>\n      <button onClick={onClick}>click</button>\n    </>\n  );\n};\n\nconst selector$red = css`\n  color: red;\n`;\n```\n\nSo you can use like this.\n\n```ts\nimport React from \"react\";\nimport App from \"./App.svelte\";\nimport { createRoot } from \"react-dom/client\";\n\nconst root = document.getElementById(\"root\")!;\n\ncreateRoot(root).render(<App\n  name=\"svelte-app\"\n  onMessage={(data) => {\n    console.log(\"message received\", data)\n  }\n} />);\n```\n\n(put `App.svelte.d.ts` manually yet)\n\n## Transform Convensions\n\n### PropsType with export let\n\nsvelte\n\n```svelte\n<script lang=\"ts\">\n  export let foo: number;\n  export let bar: number = 1;\n</script>\n```\n\ntsx\n\n```tsx\nexport default ({ foo, bar = 1 }: { foo: number, bar?: number }) => {\n  return <></>\n}\n```\n\n### PropsType with svelte's createEventDispatcher\n\nsvelte\n\n```svelte\n<script lang=\"ts\">\nimport {createEventDispatcher} from \"svelte\";\n// Only support ObjectTypeLiteral (TypeReference not supported)\nconst dispatch = createEventDispatcher<{\n  message: {\n    text: string;\n  };\n}>();\nconst onClick = () => {\n  dispatch('message', {\n    text: 'Hello!'\n  });\n}\n</script>\n<div on:click={onClick}>\nhello\n</div>\n```\n\ntsx\n\n```tsx\nexport default ({\n  onMessage,\n}: {\n  onMessage?: (data: { text: string }) => void;\n}) => {\n  const onClick = () => {\n    onMessage?.({\n      text: \"Hello!\",\n    });\n  };\n  return (\n    <>\n      <div onClick={onClick}>hello</div>\n    </>\n  );\n};\n```\n\n### Expression in svelte template\n\n```svelte\n<div id=\"myid\"></div>\n<div id={expr}></div>\n<div id=\"{expr}\"></div>\n<div {id}></div>\n<div {...params}></div>\n```\n\n### onMount / onDestroy / beforeUpdate / afterUpdate\n\nConvert to react's `useEffect`\n\n### Style\n\n```svelte\n<span class=\"red\">text</span>\n<style>\n  .red: {\n    color: red;\n  }\n</style>\n```\n\nto\n\n```tsx\n// Auto import with style block\nimport { css } from \"@emotion/css\";\n\n// in tsx\n<span className={style$red}>text</span>\n\nconst selector$red = css`\n  color: red;\n`;\n```\n\nOnly support **single class selector** like `.red`.\n\nNot Supported these patterns.\n\n```css\n/* selector combination */\n.foo .bar {}\n.foo > .bar {}\n\n/* element selector */\ndiv {}\n\n/* global selector */\n:global(div) {}\n```\n\n### Unsupported features\n\n- [ ] `style` property with expression\n  - ex. `<div style=\"color: {color}\"></div>`\n  - ex. `<div style={obj}></div>`\n- [ ] `class` property with expression\n  - ex. `<div class=\"c1 {v}\"></div>`\n  - ex. `<div class={expr}></div>`\n- [ ] Await Block\n- [ ] Property Bindings `<input bind:value />`\n- `<svelte:options />`\n- `svelte` 's `setContext` / `getContext` / `tick` / `getAllContexts`\n- `svelte/motion`\n- `svelte/store`\n- `svelte/animation`\n- `svelte/transition`\n- `svelte/action`\n- `<Foo let:prop />`\n- css: `:global()`\n\n(Checkboxed item may be supportted latter)\n\nCurrently, the scope is not parsed, so unintended variable conflicts may occur.\n\n## Basic Features\n\n- [x] Module: `<script context=module>`\n- [x] Props Type: `export let foo: number` to `{foo}: {foo: number}`\n- [x] Props Type: `export let bar: number = 1` to `{bar = 1}: {bar?: number}`\n- [x] svelte: `onMount(() => ...)` => `useEffect(() => ..., [])`\n- [x] svelte: `onDestroy(() => ...)` => `useEffect(() => { return () => ... }, [])`\n- [x] svelte: `dispatch('foo', data)` => `onFoo?.(data)`\n- [x] svelte: `beforeUpdate()` => `useEffect`\n- [x] svelte: `afterUpdate()` => `useEffect` (omit first change)\n- [x] Let: `let x = 1` => `const [x, set$x] = setState(1)`\n- [x] Let: `x = 1` => `set$x(1)`;\n- [x] Computed: `$: added = v + 1;`\n- [x] Computed: `$: document.title = title` => `useEffect(() => {document.title = title}, [title])`\n- [x] Computed: `$: { document.title = title }` => `useEffect(() => {document.title = title}, [title])`\n- [x] Computed: `$: <expr-or-block>` => `useEffect()`\n- [x] Template: `<div>1</div>` to `<><div>1</div></>`\n- [x] Template: `<div id=\"x\"></div>` to `<><div id=\"x\"></div></>`\n- [x] Template: `<div id={v}></div>` to `<><div id={v}></div></>`\n- [x] Template: `<div on:click={onClick}></div>` to `<div onClick={onClick}></div>`\n- [x] Template: `{#if ...}`\n- [x] Template: `{:else if ...}`\n- [x] Template: `{/else}`\n- [x] Template: `{#each items as item}`\n- [x] Template: `{#each items as item, idx}`\n- [x] Template: `{#key <expr>}`\n- [x] Template: with key `{#each items as item (item.id)}`\n- [x] Template: Shorthand assignment `{id}`\n- [x] Template: Spread `{...v}`\n- [x] SpecialTag: RawMustacheTag `{@html <expr}`\n- [x] SpecialTag: DebugTag `{@debug \"message\"}`\n- [x] SpecialElements: default slot: `<slot>`\n- [x] SpecialElements: `<svelte:self>`\n- [x] SpecialElements: `<svelte:component this={currentSelection.component} foo={bar} />`\n- [x] Template: attribute name converter like `class` => `className`, `on:click` => `onClick`\n- [x] Style: `<style>` tag to `@emotion/css`\n- [x] Style: option for `import {css} from \"...\"` importer\n- [x] Plugin: transparent svelte to react loader for rollup or vite\n- [x] Inline style property: `<div style=\"...\">` to `<div style={{}}>`\n\n## TODO\n\n- [ ] Template: Await block `{#await <expr>}`\n- [ ] Computed: `$: ({ name } = person)`\n- [ ] Directive: `<div contenteditable=\"true\" bind:innerHTML={html}>`\n- [ ] Directive: `<img bind:naturalWidth bind:naturalHeight></img>`\n- [ ] Directive: `<div bind:this={element}>`\n- [ ] Directive: `class:name`\n- [ ] Directive: `style:property`\n- [ ] Directive: `use:action`\n- [ ] SpecialElements: `<svelte:window />`\n- [ ] SpecialElements: `<svelte:document />`\n- [ ] SpecialElements: `<svelte:body />`\n- [ ] SpecialElements: `<svelte:element this={expr} />`\n- [ ] SpecialTag: ConstTag `{@const v = 1}`\n- [ ] Directive: `<div on:click|preventDefault={onClick}></div>`\n- [ ] Directive: `<span bind:prop={}>`\n- [ ] Directive: `<Foo let:xxx>`\n- [ ] Directive: event delegation `<Foo on:trigger>`\n- [ ] SpecialElements: `<svelte:fragment>`\n- [ ] SpecialElements: named slots: `<slot name=\"...\">`\n- [ ] SpecialElements: `$$slots`\n- [ ] Generator: `.d.ts` (`<name>.svelte` with `<name>.svelte.d.ts`)\n- [ ] Generator: preact\n- [ ] Generator: qwik\n- [ ] Generator: solid\n- [ ] Generator: vue-tsx\n\n## Why?\n\nSvelte templates are not difficult to edit with only HTML and CSS knowledge, but the modern front-end ecosystem revolves around JSX.\n\nHowever, the modern front-end ecosystem revolves around JSX, and we think we need a converter that transparently treats Svelte templates as React components. I think so.\n\n(This is my personal opinion).\n\n## Prior Art\n\n- https://github.com/amen-souissi/svelte-to-react-compiler\n\n## LICENSE\n\nMIT",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 7],
		[3603, 9],
		[3610, 6],
		[3617, 1],
		[3624, 6],
		[3638, 2],
		[3645, 1],
		[3659, 1],
		[3666, 7],
		[3680, 2],
		[3687, 1],
		[3694, 1],
		[3715, 9],
		[3722, 1],
		[3729, 1],
		[3736, 1],
		[3743, 5],
		[3750, 4],
		[3757, 3],
		[3764, 2],
		[3771, 2],
		[3778, 6],
		[3785, 3],
		[3792, 2],
		[3806, 2],
		[3813, 1],
		[3820, 1],
		[3827, 2],
		[3834, 3],
		[3841, 26],
		[3848, 2],
		[3862, 3],
		[3869, 1],
		[3876, 5],
		[3883, 1],
		[3890, 8],
		[3904, 5],
		[3911, 5],
		[3918, 1],
		[3932, 7],
		[3939, 6],
		[3946, 1],
		[3960, 2],
		[3967, 1],
		[3981, 1],
		[3988, 1],
		[3995, 2],
		[4016, 9],
		[4023, 2],
		[4037, 17],
		[4044, 7],
		[4051, 1],
		[4065, 2],
		[4072, 1],
		[4086, 1],
		[4100, 15],
		[4107, 1],
		[4114, 3],
		[4121, 7],
		[4128, 4],
		[4135, 6]
	]
}
