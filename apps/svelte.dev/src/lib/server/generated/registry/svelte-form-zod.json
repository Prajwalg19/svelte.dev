{
	"name": "svelte-form-zod",
	"description": "Build forms with Zod validation for SvelteKit applications.",
	"repo_url": "https://github.com/viniribeirodev/svelte-form-zod",
	"authors": ["viniciusdev"],
	"homepage": "https://github.com/viniribeirodev/svelte-form-zod",
	"downloads": 8,
	"updated": "2024-09-06T03:41:04.827Z",
	"tags": ["miscellaneous"],
	"github_stars": 0,
	"typescript": true,
	"version": "1.0.27",
	"svelte_range": "^4.2.9",
	"kit_range": "^2.5.26",
	"last_rune_check_version": "1.0.27",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-form-zod",
				"version": "1.0.27",
				"size": 22853
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/viniribeirodev/svelte-form-zod/c86220e09830eba1771d06c7f6727ca96202ed62/svelte-forms-zod-b.svg\" width=\"200px\" align=\"center\" alt=\"Zod logo\" />\n</p>\n\n<h1 align=\"center\">Svelte Form Zod</h1>\n\n<p align=\"center\">\n <a href=\"https://npm-stat.com/charts.html?package=svelte-form-zod\">\n    <img src=\"https://img.shields.io/npm/dm/svelte-form-zod.svg\">\n  </a>\n   <a href=\"https://snyk.io/test/github/viniribeirodev/svelte-form-zod\">\n    <img src=\"https://snyk.io/test/github/viniribeirodev/svelte-form-zod/badge.svg\" alt=\"Known Vulnerabilities\" data-canonical-src=\"https://snyk.io/test/github/viniribeirodev/svelte-form-zod\" style=\"max-width:100%\">\n  </a>\n  <a href=\"https://www.npmjs.com/package/svelte-form-zod\">\n    <img src=\"https://badge.fury.io/js/svelte-form-zod.svg?v=1.0.17\">\n  </a>\n</p>\n\n<p align=\"center\">\n    🔒 Biblioteca para formulários com SvelteKit e Zod. 🔒\n</p>\n\n## Sobre\n\nSvelte Form Zod é uma biblioteca de formulários para SvelteKit que usa Zod para validação de dados.\n\n## Instalação\n\n```bash\nnpm install svelte-form-zod\n\nou\n\nyarn add svelte-form-zod\n```\n\n## Como usar\n\n### Criando um formulário\n\nPara criar um formulário, você precisa criar um arquivo `.svelte` e importar a função `createForm` e o `z` do Zod.\n\n```svelte\n<script lang=\"ts\">\n\timport { createForm, z } from 'svelte-form-zod';\n\n\tconst schema = z.object({\n\t\tname: z.string().min(3).max(50),\n\t\temail: z.string().email(),\n\t\tpassword: z.string().min(6).max(50),\n\t\tphone: z.string(),\n\t\tcnpj: z.string()\n\t});\n\n\tconst initialValues = {\n\t\tname: '',\n\t\temail: '',\n\t\tpassword: '',\n\t\tphone: '',\n\t\tcnpj: ''\n\t};\n\n\tconst { form, errors } = createForm({\n\t\tschema,\n\t\tinitialValues,\n\t\tmasked: {\n\t\t\tphone: '(99) 9999-9999', // ou ['(99) 9999-9999','(99) 9 9999-9999']\n\t\t\tcnpj: '99.999.999/9999-99'\n\t\t},\n\t\tonSubmit: (values) => {\n\t\t\tconst { name, email, password, phone, cnpj } = values;\n\t\t\tconsole.log(name, email, password, phone, cnpj);\n\t\t}\n\t});\n</script>\n\n<form use:form>\n\t<label>\n\t\t<input type=\"text\" name=\"name\" />\n\t\t{#if $errors.name}\n\t\t\t<span>{$errors.name}</span>\n\t\t{/if}\n\t</label>\n\t<label>\n\t\t<input type=\"text\" name=\"email\" />\n\t\t{#if $errors.email}\n\t\t\t<span>{$errors.email}</span>\n\t\t{/if}\n\t</label>\n\t<label>\n\t\t<input type=\"password\" name=\"password\" />\n\t\t{#if $errors.password}\n\t\t\t<span>{$errors.password}</span>\n\t\t{/if}\n\t</label>\n\n\t<label>\n\t\t<input type=\"text\" name=\"phone\" />\n\t\t{#if $errors.phone}\n\t\t\t<span>{$errors.phone}</span>\n\t\t{/if}\n\t</label>\n\n\t<label>\n\t\t<input type=\"text\" name=\"cnpj\" />\n\t\t{#if $errors.cnpj}\n\t\t\t<span>{$errors.cnpj}</span>\n\t\t{/if}\n\t</label>\n\n\t<button type=\"submit\">Enviar</button>\n</form>\n```\n\n## `createForm`\n\n- <strong>schema</strong> - Esquema de validação do formulário\n- <strong>initialValues</strong> - Objeto com os valores iniciais do formulário\n- <strong>onSubmit</strong> - Função que será executada quando o formulário for submetido\n- <strong>masked</strong> - Objeto com os campos que devem ser mascarados\n- <strong>errors</strong> - Objeto com os erros de validação do formulário\n- <strong>watch</strong> - Objeto com os valores dos campos do formulário\n- <strong>form</strong> - Objeto use:form do formulário Svelte\n- <strong>reset</strong> - Função que reseta o formulário para os valores iniciais\n- <strong>updateField</strong> - Função que atualiza um campo específico do formulário\n- <strong>updateFields</strong> - Função que atualiza vários campos do formulário\n- <strong>setError</strong> - Função que define um erro de validação para um campo específico do formulário\n- <strong>setErrors</strong> - Função que define vários erros de validação para o formulário\n- <strong>resetError</strong> - Função que remove o erro de validação de um campo específico do formulário\n- <strong>resetErrors</strong> - Função que remove todos os erros de validação do formulário\n- <strong>getValue</strong> - Função que retorna o valor de um campo específico do formulário\n- <strong>getValues</strong> - Função que retorna um objeto com os valores de todos os campos do formulário\n\n## `Masked`\n\n```ts\nconst { form } = createForm({\n\tschema,\n\tinitialValues,\n\tmasked: {\n\t\tphone: '(99) 9999-9999', // ou ['(99) 9999-9999','(99) 9 9999-9999']\n\t\tuf: 'AA'\n\t},\n\tonSubmit\n});\n```\n\n## `errors`\n\n```ts\nconst { form, errors, setError, setErrors, resetError, resetErrors } = createForm({\n    schema,\n    initialValues,\n    onSubmit\n})\n\n{#if $errors.name}\n    <span>{$errors.name}</span>\n{/if}\n\nsetError('name', 'Nome inválido')\nsetErrors({\n    name: 'Nome inválido',\n    email: 'Email inválido'\n})\n\nresetError('name')\nresetErrors()\n```\n\n## `watch`\n\n```ts\nconst { form, watch } = createForm({\n    schema,\n    initialValues,\n    onSubmit\n})\n\n{#if $watch.name}\n    <span>{$watch.name}</span>\n{/if}\n\n\n<input type=\"text\" bind:value={$watch.name} />\n<input type=\"text\" bind:value={$watch.email} />\n\n```\n\n## `updateField`\n\n```ts\nconst { form, updateField } = createForm({\n    schema,\n    initialValues,\n    onSubmit\n})\n\nupdateField('name', 'Name')\nupdateField('email', 'Email')\n\nou\n\n<input type=\"text\" on:input={e => updateField('name', e.target.value)} />\n<input type=\"text\" on:input={e => updateField('email', e.target.value)} />\n\n```\n\n## `updateFields`\n\n```ts\n\nconst { form, updateFields } = createForm({\n    schema,\n    initialValues,\n    onSubmit\n})\n\nupdateFields({ name: 'Name', email: 'Email' })\n\nou\n\n<input type=\"text\" on:input={e => updateFields({ name: e.target.value })} />\n<input type=\"text\" on:input={e => updateFields({ email: e.target.value })} />\n```\n\n## `getValue`\n\n```ts\nconst { form, getValue } = createForm({\n\tschema,\n\tinitialValues,\n\tonSubmit\n});\n\nconst name = getValue('name');\nconst email = getValue('email');\n```\n\n## `getValues`\n\n```ts\nconst { form, getValues } = createForm({\n\tschema,\n\tinitialValues,\n\tonSubmit\n});\n\nconst { name, email } = getValues();\n```\n\n## `reset`\n\n```ts\nconst { form, reset } = createForm({\n\tschema,\n\tinitialValues,\n\tonSubmit\n});\n\nreset();\n```\n\n## Autor\n\n| [<img src=\"https://avatars0.githubusercontent.com/u/32308168?v=3&s=115\"><br><sub>@viniribeirodev</sub>](https://github.com/viniribeirodev) |\n| :----------------------------------------------------------------------------------------------------------------------------------------: |\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 20],
		[3596, 48],
		[3603, 24],
		[3610, 52],
		[3617, 46],
		[3624, 33],
		[3631, 17],
		[3638, 12],
		[3652, 11],
		[3659, 34],
		[3666, 48],
		[3673, 308],
		[3680, 96],
		[3687, 41],
		[3694, 25],
		[3701, 7],
		[3708, 25],
		[3715, 17],
		[3722, 11],
		[3729, 4],
		[3736, 6],
		[3743, 8],
		[3750, 30],
		[3757, 11],
		[3764, 2],
		[3771, 48],
		[3778, 37],
		[3785, 12],
		[3792, 48],
		[3799, 18],
		[3806, 13],
		[3813, 3],
		[3820, 6],
		[3827, 3],
		[3834, 26],
		[3841, 122],
		[3848, 23],
		[3855, 15],
		[3862, 13],
		[3869, 16],
		[3876, 23],
		[3883, 24],
		[3890, 32],
		[3897, 135],
		[3904, 25],
		[3911, 59],
		[3918, 5],
		[3925, 2],
		[3932, 8],
		[3939, 6],
		[3946, 29],
		[3953, 12],
		[3960, 11],
		[3967, 8],
		[3974, 11],
		[3981, 36],
		[3988, 12],
		[3995, 5],
		[4002, 7],
		[4009, 1],
		[4016, 6],
		[4023, 36],
		[4030, 10],
		[4037, 19],
		[4044, 27],
		[4051, 13],
		[4058, 11],
		[4065, 13],
		[4072, 4],
		[4079, 3],
		[4086, 6],
		[4093, 3],
		[4100, 35],
		[4107, 63],
		[4114, 8],
		[4121, 31],
		[4128, 9]
	]
}
