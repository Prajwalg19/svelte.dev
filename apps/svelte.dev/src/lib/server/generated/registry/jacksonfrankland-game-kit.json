{
	"name": "@jacksonfrankland/game-kit",
	"description": "Provide Svelte components and scripts for game development.",
	"repo_url": "",
	"authors": ["jacksonfrankland"],
	"downloads": 10,
	"updated": "2021-02-22T10:00:36.763Z",
	"tags": ["miscellaneous"],
	"typescript": false,
	"version": "1.0.1",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "1.0.1",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@jacksonfrankland/game-kit",
				"version": "1.0.1",
				"size": 136496
			},
			{
				"name": "screenfull",
				"version": "5.2.0",
				"size": 18128
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# Game Kit\n\nA collection of personal svelte components and scripts for game development\n\n\n\n## Svelte Components\n\n\n\n### Button\n\n```html\n<Button styles\"mt-6\" on:click={() => {console.log('Hello World')}>\n    Hello World\n</Button>\n```\n\n- **styles:** additional classes to be applied to the button element\n\n\n\n### Card\n\n```html\n<Card transition>\n    Hello World\n</Card>\n```\n\n- **transition:** Should the card transition in\n\n\n\n### Fullscreen\n\n```html\n<Fullscreen />\n```\n\n\n\n### Game Canvas\n\n```html\n<script>\n    function update ({detail}) {\n        // detail is a instance of CanvasHelper\n        // Game loop logic goes here\n    }\n</script>\n\n<GameCanvas bind:canvas ratio={16/9} on:update={update} styles=\"bg-teal-400\" />\n```\n\n- **styles:** additional classes to be applied to the canvas element\n- **ratio:** the aspect ration of the canvas\n- **bind:canvas:** binds to the canvas element. This is useful for the MouseEvents component\n\n\n\n### Input\n\n```html\n<Input bind:value={name} on:input={type} id=\"name\" placeholder=\"John Doe\" styles=\"mb-4\" />\n```\n\n- **bind:value:** binds to the input value\n- **on:input:** when the input field changes do this\n- **id:** the id of the input field\n- **placeholder:** the placeholder for the input field\n- **styles:** additional classes to be applied to the input element\n\n\n\n### Label\n\n```html\n<Label control=\"code\" styles=\"mb-4\"> Code </Label>\n```\n\n- **control:** the form element this is for\n- **styles:** additional classes to be applied to the label element\n\n\n\n### Mouse Events\n\n```html\n<script>\n    function click({detail: point}) {\n        // point is a vector with the upper left cornor of the element being 0,0\n        // the largest dimension of the elelement will be of length 1\n        //\n        // do something\n    }\n</script>\n\n<MouseEvents element={canvas}\n\ton:click={click}\n    on:mouseMove={mouseMove}\n    on:mouseUp={mouseUp}\n    on:mouseDown={mouseDown}\n/>\n<GameCanvas bind:canvas ratio={16/9} on:update={update} styles=\"bg-teal-400\" />\n```\n\n\n\n### Prose\n\n```html\n<Prose style=\"bg-gray-200\"> Hello World </Prose>\n```\n\n- **styles:** additional classes to be applied to the div container element\n\n\n\n### Spinner\n\n```html\n<Spinner />\n```\n\n\n\n## Game Scripts\n\n\n\n### Bondary Bounce\n\n```javascript\nlet soundDirection = {\n    top: this.transform.velocity.y * -1,\n    right: this.transform.velocity.x,\n    bottom: this.transform.velocity.y,\n    left: this.transform.velocity.x * -1\n}\nboundaryBounce(this.transform, this.radius, new Vector, new Vector(detail.width, detail.height), direction => {\n    Disc.hitSound(soundDirection[direction]);\n});\n```\n\n\n\n### Canvas Helper\n\n```html\n<script>\n    function update ({detail}) {\n        //clear canvas\n        detail.clear();\n\n        // draw circle: circle (position, radius, fill)\n        detail.circle(new Vector(.5, .5), .05, 'red');\n\n        // draw svg: svgPath (d, fill, position, offset, viewBox, scale)\n        detail.svgPath(arrow, 'white', ORIGIN, new Vector(0, 1), new Vector(20, 20), new Vector(scale, scale));\n        \n    }\n</script>\n\n<GameCanvas bind:canvas ratio={16/9} on:update={update} styles=\"bg-teal-400\" />\n```\n\n\n\n### Circle Bounce\n\n```javascript\ncircleBounce(a, b, intensity => Disc.hitSound(intensity));\n```\n\n\n\n### Many to Many Collision\n\n```javascript\nget collider () {\n    return {\n        shape: 'circle',\n        radius: this.radius,\n        position: this.transform.position\n    }\n}\n\nstatic collisionDetection (discs) {\n    manyToManyCollision(discs, (a, b) => {\n        // Do something\n    });\n}\n```\n\n\n\n### Transform\n\n```javascript\nconstructor (position = new Vector()) {\n    this.transform = new Transform(position);\n    this.transform.friction = .0015;\n}\n\n update (detail) {\n     this.transform.update(detail.delta);\n }\n```\n\n\n\n### Vector\n\n```javascript\n// constructor (x = 0, y = 0)\nlet v = new Vector(1, 1);\n// or\nVector.create(1, 1);\n\n// static generators\nVector.right;\nVector.left;\nVector.up;\nVector.down;\n\n// getters\na = v.basic;\na = v.round;\na = v.magnitudeSquared;\na = v.magnitude;\na = v.unit;\na = v.degrees;\na = v.radians;\n\n// methods\na = v.add(other);\na = v.subtract(other);\na = v.multiply(scalar);\na = v.distanceSquared(other);\na = v.withMagnitude(magnitude);\na = v.dot(other);\na = v.angleBetween(other);\na = v.projectOnto(other);\n```\n\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 3],
		[3596, 43],
		[3603, 1],
		[3617, 1],
		[3631, 2],
		[3645, 3],
		[3652, 18],
		[3659, 2],
		[3666, 19],
		[3673, 19],
		[3680, 1],
		[3694, 1],
		[3708, 19],
		[3715, 1],
		[3729, 9],
		[3736, 1],
		[3743, 1],
		[3764, 19],
		[3778, 19],
		[3792, 1],
		[3799, 1],
		[3806, 1],
		[3820, 1],
		[3834, 22],
		[3841, 2],
		[3848, 1],
		[3855, 93],
		[3862, 38],
		[3869, 1],
		[3883, 19],
		[3890, 1],
		[3904, 18],
		[3911, 1],
		[3918, 4],
		[3925, 4],
		[3932, 3],
		[3939, 1],
		[3946, 2],
		[3960, 3],
		[3967, 1],
		[3974, 2],
		[3995, 1],
		[4002, 1],
		[4016, 6],
		[4023, 43],
		[4030, 11],
		[4037, 11],
		[4044, 8],
		[4051, 1],
		[4058, 1],
		[4072, 2],
		[4086, 1],
		[4093, 65],
		[4107, 20],
		[4114, 10],
		[4121, 8],
		[4128, 24]
	]
}
