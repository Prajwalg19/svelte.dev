{
	"name": "hooks-as-store",
	"description": "Use React custom hooks in Svelte apps.",
	"repo_url": "https://github.com/micha-lmxt/hooks-as-store",
	"authors": ["micha-lmxt"],
	"homepage": "https://github.com/micha-lmxt/hooks-as-store#readme",
	"downloads": 4,
	"updated": "2023-01-24T19:55:38.203Z",
	"tags": ["miscellaneous"],
	"github_stars": 4,
	"typescript": true,
	"version": "0.3.0",
	"svelte_range": "^3.44.0",
	"kit_range": "next",
	"last_rune_check_version": "0.3.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "hooks-as-store",
				"version": "0.3.0",
				"size": 24148
			},
			{
				"name": "esm-env",
				"version": "1.2.2",
				"size": 3784
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# hooks-as-store\n\nUse React custom hooks in Svelte Apps.\n\n[hooks-as-store page](https://hooks-as-store.gradientdescent.de)\n\n## Installation\n\n```bash\nnpm install --save-dev hooks-as-store\n```\n\n## Usage\n\nLet's say you have some custom hook code in 'myhook.js', which calles built-in hooks or other custom hooks:\n\n```javascript\nimport {useState, useEffect} from 'hooks-as-store';\n\nexport const myHook = (someprop,otherprop)=>{\n\n    const [value,setValue] = useState(someprop);\n\n    useEffect(()=>{\n       ...\n    },[otherprop]);\n\n    return {value, setValue}\n}\n```\n\nIn svelte script part you can load this hook like this:\n\n```javascript\nimport { hook } from 'hooks-as-store';\nimport { myHook } from './myhook';\n\nconst hookStore = hook(myHook, 'someprop', 'abc');\n```\n\nFirst argument to the `hook` function is the custom hook you want to execute. You can pass props to the hook\nin the following arguments. Call the hook function in a non-reactive script part of a component (do not use $:).\nNever call the `hook` function inside a custom hook.\n`hookStore` is a readable store. If you want to access its values, you can unload it like this:\n\n```javascript\n$: ({ value, setValue } = $hookStore);\n```\n\nNotice the autosubscription (`$hookstore`) and the brackets around the whole statement.\n\nThe hook is automatically re-run, when a state inside is changed, e.g. when `setValue` is used.\n\nYou can re-execute the hook code with the `run` propery, eg. `myHook.run(props)`.\nIt does not automatically re-run, whenever the component is updated. If you want this behavior (like it is in React),\nyou need to implement it yourself, eg.:\n\n```javascript\nimport {beforeUpdate} from 'svelte';\n...\nbeforeUpdate(()=>{\n    myHook.run(\"someprop\", \"abc\")\n})\n```\n\nIf that is really necessary depends on your use-case. Often it may be enough to re-execute it when the\nprops change:\n\n```javascript\nlet prop1 = 'someprop',\n\tprop2 = 'abc';\n$: myHook.run(prop1, prop2);\n```\n\n## Dependend hooks\n\nIf you have more than one custom hooks, which depend on each other, it might be useful to group them. The\nfunction `hookGroup` accepts an array of arrays. In the inner array, the first element should be the hook,\nthe rest is filled with the props for this hook. Eg:\n\n```javascript\nimport { hoogGroup } from 'hooks-as-store';\nimport { hook1, hook2, hook3 } from './myhooks.';\n\nconst hookResults = hookGroup([\n\t[hook1, hook1prop1, hook1prop2], //hook1 takes 2 props\n\t[hook2], //hook2 doesn't take props\n\t[hook3, hook3props]\n]);\n// unwrap hookResults\n$: [\n\t{ hook1returnvalue },\n\tundefined /*hook2 does not return anything*/,\n\t{ hook3returnvalue1, hook3returnvalue2 }\n] = $hookResults;\n\n// re-execute all hooks if any prop changes\n$: hookResults.run([hook1prop1, hook1prop2], [], [hook3props]);\n```\n\nOnce a state changes in any of the three hooks, all hooks are re-executed in the same order.\n\n## Extenal hooks\n\nYou can redirect the imports from 'react' to 'hooks-as-store' like this in 'vite.config.js':\n\n```javascript\n...\nconst config: UserConfig = {\n\t...\n\tresolve:{\n\t\talias:{\n\t\t\treact:'hooks-as-store'\n\t\t}\n\t},\n    ...\n}\n...\n```\n\nFor aliases on other bundlers I found this page helpful: [Switching to Preact](https://preactjs.com/guide/v8/switching-to-preact/)\n\nIf React errors occur (Invalid hook call. Hooks can only be called inside of the body of a function component. etc.), try deleting the 'react' folder in 'node_modules'.\nAnother option, which seems to be more persistent, is to go into node_modules/react/package.json and change 'main':\n\n```json\n{\n\t\"main\": \"../hooks-as-store/index.js\"\n}\n```\n\nTo also change the imports in external libraries, it might be necessary to mark these libraries as noExternal in 'vite.config.js':\n\n```javascript\n...\n{\n    ...\n    ssr:{\n\t\tnoExternal:[\"use-media\",\"@wellyshen/use-web-animations\"]\n\t}\n}\n...\n```\n\n## Notes\n\nMost of the built-in react hooks are implemented in this package, but not all are tested very well.\n\n### Context\n\nThe useContext hook makes use of Svelte contexts. If you can set the context with 'setContext' from 'svelte',\nit works. Some libraries offers custom provider components, eg. [use-cart](https://github.com/sammdec/use-cart).\nThis case is not yet usable with this library.\n\n## Contribution\n\nContributions are welcome. Some topics of interest:\n\n- good examples for uncommon hooks (eg. useId, useDeferredValue, useImperativeHandle etc.)\n- better/easier 'alias' strategy for imported react hooks / better vite configuration\n- Context strategy\n\nThe scope of this library is to enable the use of custom react hooks. It can be referenced as part of a general\nreact interop library, but it is not planned to become one itself.\n\nTo expand this idea, you could say that a React functional component is a custom hook, which returns a part of a virtual dom tree.\nYou could (easily?) implement a `createElement` function, obtain the tree from this library and create a generic\nsvelte virtual dom tree renderer component. Something like this is not in the scope of this library, but let me\nknow if you try it!\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 6],
		[3603, 1],
		[3610, 2],
		[3631, 1],
		[3645, 4],
		[3659, 1],
		[3666, 5],
		[3680, 1],
		[3687, 2],
		[3694, 1],
		[3708, 1],
		[3729, 1],
		[3743, 2],
		[3750, 1],
		[3757, 1],
		[3771, 5],
		[3778, 1],
		[3785, 1],
		[3792, 1],
		[3799, 1],
		[3806, 2],
		[3834, 2],
		[3841, 27],
		[3855, 1],
		[3869, 1],
		[3883, 2],
		[3890, 5],
		[3904, 1],
		[3918, 1],
		[3932, 1],
		[3939, 1],
		[3960, 2],
		[3981, 4],
		[4023, 2],
		[4037, 9],
		[4044, 13],
		[4051, 1],
		[4058, 1],
		[4065, 1],
		[4072, 1],
		[4093, 4],
		[4100, 9],
		[4114, 4],
		[4121, 10],
		[4128, 6]
	],
	"esm": true,
	"cjs": false
}
