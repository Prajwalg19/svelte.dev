{
	"name": "svelte4-chess",
	"description": "Creates fully playable chess component for Svelte 4.",
	"repo_url": "",
	"authors": ["liamkrenn"],
	"homepage": "https://github.com/LiamKrenn/svelte4-chess",
	"downloads": 11,
	"updated": "2025-02-03T16:55:04.243Z",
	"tags": ["ui"],
	"typescript": true,
	"version": "1.2.9",
	"svelte_range": "4.2.19",
	"kit_range": "^1.30.4",
	"last_rune_check_version": "1.2.9",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte4-chess",
				"version": "1.2.9",
				"size": 47498
			},
			{
				"name": "chess.js",
				"version": "1.0.0",
				"size": 383053
			},
			{
				"name": "chessground",
				"version": "9.1.1",
				"size": 368757
			},
			{
				"name": "svelte",
				"version": "4.2.19",
				"size": 2633608
			},
			{
				"name": "acorn",
				"version": "8.14.1",
				"size": 547473
			},
			{
				"name": "code-red",
				"version": "1.0.4",
				"size": 55185
			},
			{
				"name": "@jridgewell/sourcemap-codec",
				"version": "1.5.0",
				"size": 112815
			},
			{
				"name": "@types/estree",
				"version": "1.0.7",
				"size": 26147
			},
			{
				"name": "estree-walker",
				"version": "3.0.3",
				"size": 17599
			},
			{
				"name": "periscopic",
				"version": "3.1.0",
				"size": 11219
			},
			{
				"name": "is-reference",
				"version": "3.0.3",
				"size": 3953
			},
			{
				"name": "css-tree",
				"version": "2.3.1",
				"size": 1190591
			},
			{
				"name": "mdn-data",
				"version": "2.0.30",
				"size": 602138
			},
			{
				"name": "source-map-js",
				"version": "1.2.1",
				"size": 139872
			},
			{
				"name": "aria-query",
				"version": "5.3.2",
				"size": 176114
			},
			{
				"name": "magic-string",
				"version": "0.30.17",
				"size": 467464
			},
			{
				"name": "axobject-query",
				"version": "4.1.0",
				"size": 110878
			},
			{
				"name": "locate-character",
				"version": "3.0.0",
				"size": 5325
			},
			{
				"name": "@ampproject/remapping",
				"version": "2.3.0",
				"size": 78946
			},
			{
				"name": "@jridgewell/gen-mapping",
				"version": "0.3.8",
				"size": 81596
			},
			{
				"name": "@jridgewell/set-array",
				"version": "1.2.1",
				"size": 17945
			},
			{
				"name": "@jridgewell/trace-mapping",
				"version": "0.3.25",
				"size": 169330
			},
			{
				"name": "@jridgewell/resolve-uri",
				"version": "3.1.2",
				"size": 53153
			},
			{
				"name": "svelte4-chessground",
				"version": "3.0.1",
				"size": 95986
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2],
			[0, 3],
			[3, 4],
			[3, 5],
			[5, 6],
			[5, 7],
			[5, 4],
			[5, 8],
			[8, 7],
			[5, 9],
			[9, 7],
			[9, 8],
			[9, 10],
			[10, 7],
			[3, 11],
			[11, 12],
			[11, 13],
			[3, 14],
			[3, 9],
			[3, 10],
			[3, 15],
			[15, 6],
			[3, 7],
			[3, 8],
			[3, 16],
			[3, 17],
			[3, 18],
			[18, 19],
			[19, 20],
			[19, 6],
			[19, 21],
			[21, 22],
			[21, 6],
			[18, 21],
			[3, 21],
			[3, 6],
			[0, 23],
			[23, 2],
			[23, 3]
		],
		"circular": []
	},
	"readme": "# Svelte-chess: Playable chess component \r\n\r\nFully playable chess component for Svelte.\r\nPowered by\r\n[Chess.js](https://github.com/jhlywa/chess.js) logic,\r\n[Chessground](https://github.com/lichess-org/chessground) chessboard\r\nand optionally [Stockfish](https://github.com/official-stockfish/Stockfish) chess AI.\r\n\r\n![Svelte-chess screenshots](https://github.com/gtim/svelte-chess/blob/main/static/screenshot.png?raw=true)\r\n\r\n## Features\r\n\r\n* Track game state via props or detailed events\r\n* Play against Stockfish\r\n* Undo moves\r\n* Pawn promotion dialog\r\n* Fully restylable\r\n* Move history\r\n* Typed\r\n\r\n## Usage \r\n\r\nInstallation:\r\n\r\n    npm install svelte-chess\r\n\r\nBasic playable chessboard ([REPL](https://svelte.dev/repl/b1a489538165489aa2720a65b476a58b?version=3.59.1)):\r\n\r\n    <script>\r\n        import {Chess} from 'svelte-chess';\r\n    </script>    \r\n    <Chess />\r\n\r\nInteract with the game via [props](#props), [methods](#methods) or [events](#events).\r\n\r\n### Props\r\n\r\nGame state can be observed by binding to props. \r\n\r\n| Prop         | Bindable and readable | Writable | Value                                                                                |\r\n| ------------ | :-------------------: | :------: | ------------------------------------------------------------------------------------ |\r\n| `turn`       |           ✓           |          | Current color to move: `w` or `b`                                                    |\r\n| `moveNumber` |           ✓           |          | Current move number (whole moves)                                                    |\r\n| `history`    |           ✓           |          | Array of all moves as SAN strings, e.g. `['d4','Nf6']`                               |\r\n| `inCheck`    |           ✓           |          | True if the player to move is in check.                                              |\r\n| `isGameOver` |           ✓           |          | True if the game is over. See also the [gameOver event](#events).                    |\r\n| `fen`        |           ✓           |    ✓     | Current position in [FEN](https://www.chessprogramming.org/Forsyth-Edwards_Notation) |\r\n| `orientation`|           ✓           |    ✓     | Orientation of the board: `w` or `b`.                                                |\r\n| `engine`     |                       |    ✓     | Options for the Stockfish chess AI. See [Engine](#engine--stockfish).               |\r\n| `class`      |                       |    ✓     | CSS class applied to children instead of default (see [Styling](#styling)).          |\r\n\r\nAll readable props are bindable and updated whenever the game state changes.\r\nWritable props are only used when the component is created.\r\n\r\nExample using bindable props to monitor state ([REPL](https://svelte.dev/repl/d0ec69dde1f84390ac8b4d5746db9505?version=3.59.1)):\r\n\r\n    <script>\r\n        import {Chess} from 'svelte-chess';\r\n        let moveNumber, turn, history;\r\n    </script>    \r\n\t<Chess bind:moveNumber bind:turn bind:history/>\r\n    <p>\r\n        It's move {moveNumber}, with {turn} to move.\r\n        Moves played: {history?.join(' ')}.\r\n    </p>\r\n\r\nStarting from a specific FEN ([REPL](https://svelte.dev/repl/ebce18a71d774b2db987abc71f45648a?version=3.59.1)):\r\n\r\n    <Chess fen=\"rnbqkb1r/1p2pppp/p2p1n2/8/3NP3/2N5/PPP2PPP/R1BQKB1R w KQkq - 0 6\" />\r\n\r\n### Methods\r\n\r\nThe board state can be read and manipulated via method calls to the Chess component itself. \r\n\r\nMethods for reading game/board state:\r\n\r\n* `getHistory()`: Same as the `history` prop. All moves played in the game, as an array of SAN strings, e.g. `['d4','Nf6','Bg5']`.\r\n* `getHistory({verbose: true})`: All moves played in the game, as an array of [Move objects](#move).\r\n* `getBoard()`: An 8x8 array of the current position. Each element is null (empty square) or an object on the form `{ square: 'd8', type: 'q', color: 'b' }`.\r\n\r\nMethods for manipulating game/board state:\r\n\r\n* `move( san )`: Make a move programmatically. Argument is the move in [short algebraic notation](https://en.wikipedia.org/wiki/Algebraic_notation_(chess)), e.g. `Nf3`. Throws an error if the move is illegal or malformed.\r\n* `load( fen )`: Loads a position from FEN. Throws an error if the FEN could not be parsed.\r\n* `reset()`: Resets the game to the initial position.\r\n* `undo()`: Undoes the last move and returns it.\r\n* `toggleOrientation()`: Flips the board.\r\n* `makeEngineMove()`: Make the best move according to the engine. See [Engine / Stockfish](#engine--stockfish) for loading the engine.\r\n\r\nExample implementing undo/reset buttons ([REPL](https://svelte.dev/repl/7dd7b6454b12466e90ac78a842151311?version=3.59.1)):\r\n\r\n    <script>\r\n        import {Chess} from 'svelte-chess';\r\n        let chess;\r\n    </script>    \r\n    <Chess bind:this={chess}/>\r\n    <button on:click={()=>chess?.reset()}>Reset</button>\r\n    <button on:click={()=>chess?.undo()}>Undo</button>\r\n\r\n### Events\r\n\r\nA `ready` event is dispatched when the Chess component is ready for interaction,\r\nwhich is generally immediately on mount. If an [engine](#engine--stockfish) was\r\nspecified, the event is dispatched after engine initialisation, which might take\r\na second.\r\n\r\nA `move` event is dispatched after every move, containing the corresponding [Move object](#move).\r\n\r\nA `gameOver` event is emitted after a move that ends the game. The GameOver object has two keys:\r\n* `reason`: `checkmate`, `stalemate`, `repetition`, `insufficient material` or `fifty-move rule`.\r\n* `result`: 1 for White win, 0 for Black win, or 0.5 for a draw.\r\n\r\nA `uci` event is emitted when Stockfish, if enabled, sends a UCI message.\r\n\r\nExample listening for `move` and `gameOver` events ([REPL](https://svelte.dev/repl/6fc2874d1a594d76aede4834722e4f83?version=3.59.1)):\r\n\r\n    <script>\r\n        import {Chess} from 'svelte-chess';\r\n        function moveListener(event) {\r\n            const move = event.detail;\r\n            console.log( `${move.color} played ${move.san}` );\r\n        }\r\n        function gameOverListener(event) {\r\n            console.log( `The game ended due to ${event.detail.reason}` );\r\n        }\r\n    </script>\r\n    <Chess on:move={moveListener} on:gameOver={gameOverListener} />\r\n\r\nSvelte-chess exports the MoveEvent, GameOverEvent, ReadyEvent and UciEvent types.\r\n\r\n### Engine / Stockfish\r\n\r\nSvelte-chess can be used to play against the chess AI Stockfish 14. You need to download the Stockfish web worker script separately: [stockfish.js web worker (1.6MB)](https://raw.githubusercontent.com/gtim/svelte-chess/stockfish/static/stockfish.js) and serve it at `/stockfish.js`. If you're using SvelteKit, do this by putting it in the static folder.\r\n\r\nExample playing Black versus Stockfish ([live](https://gtim.github.io/svelte-chess/stockfish)):\r\n\r\n    <script>\r\n        import Chess, { Engine } from 'svelte-chess';\r\n        // Note: stockfish.js must be manually downloaded (see Readme)\r\n    </script>\r\n    <Chess engine={new Engine({depth: 20, moveTime: 1500, color: 'w'})} />\r\n\r\nThe `engine` prop is an object with the following keys, all optional:\r\n\r\n| Key         | Default | Description                                                                 |\r\n| ----------- | ------- | --------------------------------------------------------------------------- |\r\n| `color`     | `b`     | Color the engine plays: `w` or `b`, or `both` for an engine-vs-engine game, or `none` if the engine should only make a move when `makeEngineMove()` is called. | \r\n| `moveTime`  | 2000    | Max time in milliseconds for the engine to spend on a move.                 |\r\n| `depth`     | 40      | Max depth in ply for the engine to search.                                  |\r\n\r\nTo inspect Stockfish's current evaluation and other engine details, you can listen to `uci` events from the Chess component to read all [UCI](https://www.chessprogramming.org/UCI) messages sent by Stockfish.\r\n\r\n### Styling\r\n\r\nThe stylesheet shipped with Chessground is used by default. To restyle the \r\nboard, pass the `class` prop and import a stylesheet.\r\n\r\nExample with custom stylesheet:\r\n\r\n    <script>\r\n        import { Chess } from 'svelte-chess';\r\n    </script>\r\n    <link rel=\"stylesheet\" href=\"/my-style.css\" />\r\n    <Chess class=\"my-class\" />\r\n\r\nA sample stylesheet can be found in [/static/style-paper.css](https://github.com/gtim/svelte-chess/blob/main/static/style-paper.css).\r\n\r\n## Types\r\n\r\n### Move\r\n\r\nA `Move` describes a chess move. Properties:\r\n  - `color`: `w` for White move or `b` for Black move.\r\n  - `from` and `to`: Origin and destination squares, e.g. `g1` and `f3`.\r\n  - `piece`: Piece symbol, one of `pnbrqk` (pawn, knight, bishop, rook, queen, king).\r\n  - `captured` and `promotion`: Piece symbol of a capture or promotion, if applicable.\r\n  - `san`: Standard algebraic notation, e.g. `Nf3`.\r\n  - `lan`: Long algebraic notation, e.g. `g1f3`.\r\n  - `before` and `after`: FEN of positions before and after the move.\r\n  - `flags`: String of letters for each flag that applies to the move: `c` for standard capture, `e` for en passant capture, `n` for non-capture, `b` for two-square pawn move, `p` for promotion, `k` for kingside castling and `q` for queenside castling.\r\n  - `check`: True if the move put the opponent in check (or checkmate).\r\n  - `checkmate`: True if the move put the opponent in checkmate.\r\n\r\n\r\n## Future\r\n\r\n* Programmatically draw arrows/circles on the board\r\n",
	"legacy_svelte": true,
	"downloads_history": [
		[4044, 114],
		[4051, 826],
		[4058, 28],
		[4065, 18],
		[4072, 11],
		[4079, 33],
		[4086, 25],
		[4093, 3],
		[4100, 18],
		[4107, 28],
		[4114, 11],
		[4121, 27],
		[4128, 9],
		[4135, 9]
	],
	"esm": true,
	"cjs": false
}
