{
	"name": "@canutin/svelte-currency-input",
	"description": "Formats currency input fields in Svelte applications.",
	"repo_url": "https://github.com/fmaclen/svelte-currency-input",
	"authors": ["fmaclen"],
	"homepage": "https://svelte-currency-input.fernando.is",
	"downloads": 644,
	"updated": "2024-11-01T21:04:48.714Z",
	"tags": ["ui"],
	"github_stars": 43,
	"typescript": true,
	"version": "0.13.0",
	"svelte_range": "^4.2.19",
	"kit_range": "^2.7.1",
	"last_rune_check_version": "0.13.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@canutin/svelte-currency-input",
				"version": "0.13.0",
				"size": 19939
			}
		],
		"dependencies": [],
		"circular": []
	},
	"legacy_svelte": true,
	"readme": "# svelte-currency-input\n\nA masked form input that converts numbers to localized currency formats as you type\n\n[<img width=\"962\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1434675/190873948-c0385747-6fa9-4077-8bd5-717e4d1124a0.png\">](https://svelte.dev/repl/d8f7d22e5b384555b430f62b157ac503?version=3.50.1)\n\n<p align=\"center\">\n  üë©‚Äçüíª Play with it on <a href=\"https://svelte.dev/repl/d8f7d22e5b384555b430f62b157ac503?version=3.50.1\" target=\"_blank\">REPL</a>  &nbsp;‚Äî&nbsp; üíµ See it in a <a href=\"https://github.com/Canutin/desktop/blob/master/sveltekit/src/lib/components/FormCurrency.svelte\" target=\"_blank\">real project</a>!\n</p>\n\n---\n\n## Features\n\n- Formats **positive** and **negative** values\n- Leverages [`Intl.NumberFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) for **localizing** currency denominations and masking the input\n- Simple [API](#api)\n- Minimal default styling, easy to [customize](#styling)\n\n## Usage\n\n```bash\nnpm install @canutin/svelte-currency-input --save\n```\n\n```html\n<script lang=\"ts\">\n  import CurrencyInput from '@canutin/svelte-currency-input';\n</script>\n\n<CurrencyInput name=\"total\" value={-420.69} locale=\"nl-NL\" currency=\"EUR\" />\n```\n\n## How it works\n\nWhen the form is submitted you get _unformatted_ or _formatted_ values from two `<input />`'s.\nThis is more or less what `<CurrencyInput />` looks like under the hood:\n\n```html\n<div class=\"currencyInput\">\n  <!-- Unformatted value -->\n  <input\n    class=\"currencyInput__unformatted\"\n    type=\"hidden\"\n    name=\"total\"\n    value=\"-420.69\"\n  />\n\n  <!-- Formatted value -->\n  <input\n    class=\"currencyInput__formatted\"\n    type=\"text\"\n    name=\"formatted-total\"\n    value=\"‚Ç¨ -420,69\"\n  />\n</div>\n```\n\n## API\n\nOption            | Type            | Default     | Description |\n----------------- | --------------- | ----------- | ----------- |\nvalue             | `number`        | `undefined` | Initial value. If left `undefined` a formatted value of `0` is visible as a placeholder |\nlocale            | `string`        | `en-US`     | Overrides default locale. [Examples](https://gist.github.com/ncreated/9934896) |\ncurrency          | `string`        | `USD`       | Overrides default currency. [Examples](https://www.xe.com/symbols/) |\nname              | `string`        | `total`     | Applies the name to the [input fields](#how-it-works) for _unformatted_ (e.g `[name=total]`) and _formatted_ (e.g. `[name=formatted-total]`) values |\nid                | `string`        | `undefined` | Sets the `id` attribute on the input |\nrequired          | `boolean`       | `false`     | Marks the input as required |\ndisabled          | `boolean`       | `false`     | Marks the input as disabled |\nplaceholder       | `string` `number` `null` | `0`         | A `string` will override the default placeholder. A `number` will override  it by formatting it to the set currency. Setting it to `null` will not show a placeholder   |\nisZeroNullish | `boolean`       | `false`      | If `true` and when the value is `0`, it will override the default placeholder and render the formatted value in the field like any other value. _Note: this option might become the default in future versions_                                   |\nautocomplete      | `string`        | `undefined` | Sets the autocomplete attribute. Accepts any valid HTML [autocomplete attribute values](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#values) |\nisNegativeAllowed | `boolean`       | `true`      | If `false`, forces formatting only to positive values and ignores `--positive` and `--negative` styling modifiers                                   |\nfractionDigits    | `number`        | `2`         | Sets `maximumFractionDigits` in [`Intl.NumberFormat()` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#minimumfractiondigits) used for formatting the currency. Supported digits: `0` to `20` |\ninputClasses      | `object`        | [See below](#Styling)         | Selectively overrides any class names passed |\nonValueChange     | `Callback`      | `undefined` | Runs a callback function after the value changes |\n\n## Styling\n\nThere are two ways of customizing the styling of the input:\n1. Passing it your own CSS classes\n2. Overriding the styles using the existing class names\n\nYou can **override all of the class names** by passing an object to `inputClasses` that has **one or more** of these properties:\n\n```typescript\ninterface InputClasses {\n  wrapper?: string; // <div> that contains the two <input> elements\n  unformatted?: string; // <input type=\"hidden\"> that contains the unformatted value\n  formatted?: string; // <input type=\"text\"> that contains the formatted value\n  formattedPositive?: string; // Class added when the formatted input is positive\n  formattedNegative?: string; // Class added when the formatted input is negative\n  formattedZero?: string; // Class added when the formatted input is zero\n}\n```\n\nUsage (with [Tailwind CSS](https://tailwindcss.com/) as an example):\n\n```svelte\n<CurrencyInput name=\"total\" value=\"{420.69}\" inputClasses={\n  { \n    wrapper: \"form-control block\",\n    formatted: 'py-1.5 text-gray-700',\n    formattedPositive: 'text-green-700',\n    formattedNegative: 'text-red-700'\n  }\n} />\n```\n\nAlternatively you can **write your own CSS** by overriding the [default styles](https://github.com/canutin/svelte-currency-input/blob/main/src/lib/CurrencyInput.svelte) which use [BEM naming conventions](https://getbem.com/naming/). To do so apply your styles as shown below:\n\n```svelte\n<div class=\"my-currency-input\">\n  <CurrencyInput name=\"total\" value=\"{420.69}\" />\n</div>\n\n<style>\n  /* Container */\n  div.my-currency-input :global(div.currencyInput) { /* ... */ }\n\n  /* Formatted input */\n  div.my-currency-input :global(input.currencyInput__formatted) { /* ... */ }\n\n  /* Formatted input when the it's disabled */\n  div.my-currency-input :global(input.currencyInput__formatted:disabled) { /* ... */ }\n\n  /* Formatted input when the value is zero */\n  div.my-currency-input :global(input.currencyInput__formatted--zero) { /* ... */ }\n\n  /* Formatted input when the value is positive */\n  div.my-currency-input :global(input.currencyInput__formatted--positive) { /* ... */ }\n\n  /* Formatted input when the value is negative */\n  div.my-currency-input :global(input.currencyInput__formatted--negative) { /* ... */ }\n</style>\n```\n\n## Contributing\n\nHere's ways in which you can contribute:\n\n- Found a bug? Open a [new issue](https://github.com/canutin/svelte-currency-input/issues/new)\n- Comment or upvote [existing issues](https://github.com/canutin/svelte-currency-input/issues)\n- Submit a [pull request](https://github.com/canutin/svelte-currency-input/pulls)\n\n## Developing\n\nThis package was generated with [SvelteKit](https://kit.svelte.dev/). Install dependencies with `npm install`, then start a development server:\n\n```bash\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n#### Integration tests\n\nThe component is tested using [Playwright](https://playwright.dev/).\nYou can find the tests in [`tests/svelte-currency-input.test.ts`](https://github.com/Canutin/svelte-currency-input/blob/main/tests/svelte-currency-input.test.ts)\n\nTo run all tests on **Chromium**, **Firefox** and **Webkit**:\n```bash\nnpm run test\n```\n\nTo run all tests on a specific browser (e.g. **Webkit**):\n```bash\nnpx playwright test --project=webkit\n```\n\nAdditional debug commands can be found on [Playwright's documentation](https://playwright.dev/docs/test-cli).\n",
	"downloads_history": [
		[3589, 403],
		[3596, 567],
		[3603, 251],
		[3610, 168],
		[3617, 179],
		[3624, 229],
		[3631, 172],
		[3638, 171],
		[3645, 119],
		[3652, 200],
		[3659, 244],
		[3666, 316],
		[3673, 425],
		[3680, 344],
		[3687, 219],
		[3694, 322],
		[3701, 183],
		[3708, 223],
		[3715, 181],
		[3722, 186],
		[3729, 164],
		[3736, 108],
		[3743, 133],
		[3750, 155],
		[3757, 263],
		[3764, 309],
		[3771, 272],
		[3778, 339],
		[3785, 214],
		[3792, 229],
		[3799, 267],
		[3806, 362],
		[3813, 307],
		[3820, 286],
		[3827, 334],
		[3834, 218],
		[3841, 372],
		[3848, 244],
		[3855, 206],
		[3862, 287],
		[3869, 264],
		[3876, 289],
		[3883, 324],
		[3890, 293],
		[3897, 342],
		[3904, 415],
		[3911, 384],
		[3918, 387],
		[3925, 421],
		[3932, 381],
		[3939, 421],
		[3946, 434],
		[3953, 520],
		[3960, 555],
		[3967, 368],
		[3974, 391],
		[3981, 361],
		[3988, 736],
		[3995, 706],
		[4002, 257],
		[4009, 247],
		[4016, 259],
		[4023, 400],
		[4030, 408],
		[4037, 509],
		[4044, 532],
		[4051, 498],
		[4058, 537],
		[4065, 589],
		[4072, 833],
		[4079, 829],
		[4086, 957],
		[4093, 839],
		[4100, 947],
		[4107, 771],
		[4114, 644],
		[4121, 605],
		[4128, 841]
	],
	"esm": true,
	"cjs": false
}
