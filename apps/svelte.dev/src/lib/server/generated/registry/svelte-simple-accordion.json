{
	"name": "svelte-simple-accordion",
	"description": "Build simple, fully configurable accordion components for Svelte.",
	"repo_url": "git@gitlab.com/public-e-soa-com/svelte-simple-accordion",
	"authors": ["jack-y"],
	"homepage": "https://gitlab.com/public-e-soa-com/svelte-simple-accordion#readme",
	"downloads": 7,
	"updated": "2021-10-26T14:09:42.861Z",
	"tags": ["ui"],
	"typescript": false,
	"version": "1.1.0",
	"svelte_range": "^3.38.3",
	"last_rune_check_version": "1.1.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-simple-accordion",
				"version": "1.1.0",
				"size": 84806
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# ![Logo](https://e-soa.com/ssa/logo.png) svelte-simple-accordion\n\n[![npm][]](https://www.npmjs.com/package/svelte-simple-accordion) [![license][]](https://gitlab.com/public-e-soa-com/svelte-simple-accordion/-/blob/2678ef5172ab07faaf6d61ad688c038aa6b67b22/LICENSE)\n\n## Overview\n\nThis package contains two Svelte components: **Accordion** and **AccordionItem**.\n\nThe **Accordion** component initializes and manages the list of **AccordionItem** components. It ensures that *only one* item is opened at a time.\n\nThe **AccordionItem** component includes the two HTML parts: title and content.\n\n### Full configuration\n\nThese components use [slots](https://svelte.dev/docs#slot): the application can insert any code into the main accordion part, the title part or the content part.\n\nThe components are _**unstyled**_ by default. The [slot](https://svelte.dev/docs#slot) feature and some utilities included in the components allow the application to apply any CSS rule or script on any DOM element.\n\n> Note: The application is responsible for the look and feel. For the best usability, see the [W3C recommandations](https://www.w3.org/TR/wai-aria-practices/examples/accordion/accordion.html).\n\n## Demo\n\nTo see the demo and its source code, please click on this image:\n\n[![Demo](https://e-soa.com/ssa/accordion.png)](https://e-soa.com/svelte-simple-accordion-demo)\n\n## Quick Start Guide\n\n```sh\nnpm install --save-dev svelte-simple-accordion\n```\n\nIn the application:\n\n```html\n<script>\n    import {Accordion, AccordionItem} from 'svelte-simple-accordion';\n</script>\n\n<!-- A simple accordion with three items -->\n<Accordion>\n    <AccordionItem>\n        <div slot=\"title\">\n            <h2>My fist accordion item</h2>\n        </div>\n        <div slot=\"content\">\n            <p>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. \n                Integer purus libero, vulputate pretium est vitae, \n                rutrum vestibulum nibh.\n                Proin malesuada ultricies dolor, \n                sit amet fringilla turpis efficitur faucibus.\n            </p>\n        </div>\n    </AccordionItem>\n    <AccordionItem>\n        <div slot=\"title\">\n            <h2>...the next one...</h2>\n        </div>\n        <div slot=\"content\">\n            <p>\n                Vestibulum dapibus, lectus et pretium dictum, odio metus maximus nunc, \n                eget accumsan magna sem quis ante. Suspendisse potenti.\n            </p>\n        </div>\n    </AccordionItem>\n    <AccordionItem>\n        <div slot=\"title\">\n            <h2>....and the last!</h2>\n        </div>\n        <div slot=\"content\">\n            <p>\n                Donec suscipit massa in sem commodo, non fringilla justo mattis.\n                Curabitur et varius lacus. Sed scelerisque \n                lobortis risus nec sollicitudin.\n            </p>\n        </div>\n    </AccordionItem>\n</Accordion>\n```\nEt voila! See the [demo](https://e-soa.com/svelte-simple-accordion-demo) and the Quick Start example.\n\n## The Accordion component\n\nThis component manages a list of **ApplicationItem** components (title + content parts) and their open status. By design, *only one* item content part is displayed at a time.\n\nAs the **Accordion** component contains an unnamed slot, it can include any code plus the **AccordionItem** list.\n\nTo be compatible with your application and your design, **Accordion** offers three optional variables: \n\n| name           | type   | default                                  | description                              |\n| -------------- | ------ | ---------------------------------------- | ---------------------------------------- |\n| dispatchName   | string | `accordionItemClick`                     | The name of the event dispatched by **Accordion** when a title is clicked. See the [Events](https://gitlab.com/public-e-soa-com/svelte-simple-accordion#events) chapter below. |\n| id             | string | `'accordion-' + Math.random().toString(36)` | The ID of the **Accordion** DOM element. By setting this value, the application may easily retrieve the DOM element with the vanilla code: `document.getElementById(id);` |\n| transitionRule | string | `height 300ms ease-in-out, opacity 700ms ease-in-out` | The CSS transition rule for the hide / show animations. |\n\n### Working with the accordion DOM element\n\nAs the application can set the **Accordion** 's custom ID, it's easy to get its DOM element:\n\n```html\n<script>\n    import {Accordion, AccordionItem} from 'svelte-simple-accordion';\n    const accordionID = 'acc-01'; // the custom accordion ID\n\n    /* When the components are loaded */\n    onMount(() => {\n        const myAccordion = document.getElementById(accordionID);\n        // ...some work with the accordion...\n    });\n</script>\n\n<!-- Accordion: the application can get its DOM element -->\n<Accordion id={accordionID}>\n    <!-- any code -->\n    <h1>My accordion</h1>\n    <!-- ...some AccordionItem components... -->\n</Accordion>\n```\n\n### Events\n\nWhen the user clicks on an **AccordionItem**, the **Accordion** component ensures that this item content is displayed or closed *(depending on its initial status)* as the other items are closed.\n\nFor the best usability, the application could need to change the opened item look, updates some data, etc. That's why the **Accordion** can send a [Custom Event](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent) to the application, by using:\n\n- **event custom name**: a string. The `dispatchName` value. As the application can set this variable, it can listen to it's named events.\n- **event detail**: an object. The event detail contains:\n\n```javascript\n{\n    \"accordion\": a-DOM-element, // the Accordion DOM element which send the event\n    \"itemIndexAttributeName\": a-string, // the item index attribute name\n    \"itemTitle\": a-DOM-element, // the item title DOM element which has been clicked\n    \"opened\": a-boolean, // the item status applied when clicked\n}\n```\n\nWith this feature, the application may change anything. In the next example, the item title color changes when it is opened:\n\n```html\n<script>\n    import {Accordion, AccordionItem} from 'svelte-simple-accordion';\n    \n    /* Handles the open event */\n    const handleOpened = event => {\n        const title = event.itemTitle.querySelector('h2');\n        title.style.color: 'dodgerblue'; // change the title color\n    }\n</script>\n\n<!-- Accordion: the application listen to the open event -->\n<Accordion \n    dispatchName=\"itemOpened\"\n    on:itemOpened={handleOpened}\n>\n    <h1>My customized accordion</h1>\n    <AccordionItem>\n        <div slot=\"title\">\n            <h2>My color will change on click</h2>\n        </div>\n        <div slot=\"content\">\n            <!-- ...some HTML content... -->\n        </div>\n    </AccordionItem>\n    <!-- ...some other AccordionItem components... -->\n</Accordion>\n```\n\nWith the `itemIndexAttributeName` value, the application can get the opened item range in the **AccordionItem** list:\n\n```javascript\nconst range = itemTitle.getAttribute(itemIndexAttributeName); // starts at 0\n```\n\nThen, as each **AccordionItem** is created with the attribute named `itemIndexAttributeName`, the application can get any associated DOM element:\n\n```javascript\nconst accordion = document.getElementById(accordionID);\nconst items = accordion.querySelectorAll('[' + itemIndexAttributeName + ']'); // items = a NodeList\n// gets the third item\nconst thirdItem = false;\nitems.forEach(item => {\n   if (item.getAttribute(itemIndexAttributeName) === 2) { // starts at 0\n       thirdItem = item;\n   }\n})\n// ...some work with the third item...\n```\n\nWith this feature, if the display order of items changes, they are always indexed the same way.\n\n### Animation\n\nThe display of an **AccordionItem** is animated by default, using this [show and hide](https://gomakethings.com/how-to-add-transition-animations-to-vanilla-javascript-show-and-hide-methods/) technique based on height and opacity rules. The application can configure the animation, by using the **Accordion** `transitionRule` variable.\n\nThe default string value is `height 300ms ease-in-out, opacity 700ms ease-in-out`. Here is an example with 2x slower animation:\n\n```html\n<script>\n    import {Accordion, AccordionItem} from 'svelte-simple-accordion';\n    const myTransitionRule = 'height 600ms ease-in-out, opacity 1400ms ease-in-out';\n</script>\n\n<!-- Accordion: the animation is slow -->\n<Accordion transitionRule={myTransitionRule}>\n\t<h1>My slow accordion</h1>\n\t<!-- ...some AccordionItem components... -->\n</Accordion>\n```\n\nIf no animation is needed, just set the transition rule as an empty string:\n\n```javascript\nmyTransitionRule = '';\n```\n\n#### Changing anything\nWith the [slot](https://svelte.dev/docs#slot) feature, the application can insert any code in the components.\n\nAnd as the application can retrieve the **Accordion** DOM element and any **AccordionItem** DOM element, it can configure their entire style once mounted. See the [demo](https://e-soa.com/svelte-simple-accordion-demo) and the styling example.\n\n## The AccordionItem component\n\nThis component must be encapsulated by a parent **Accordion** component, which manages the open / close  status. As most of accordion features, this component contains two parts: the title and the content. Each part includes a slot.\n\n### The title\n\nThis part is always visible.\n\nThanks to the Svelte [slot](https://svelte.dev/docs#slot) feature, an AccordionItem title includes a slot named `title`. So the application can insert any code. For example *(with free [Font Awesome](https://fontawesome.com/v5.15/icons?d=gallery&p=2&m=free) icons)*:\n\n```html\n<AccordionItem>\n  <!-- The title is the customer name -->\n  <div slot=\"title\" class=\"myTitleClass\">\n      <i class=\"myIconClass fas fa-user\"></i>\n      <div>{customer.name}</div>\n  </div>\n    \n  <div slot=\"content\">\n      <p>{customer.address}</p>\n      <p>{customer.emailAddress}</p>\n      <p>{customer.phone}</p>\n  </div>\n</AccordionItem>\n```\n\n#### Changing the look of the title\n\nWhen the user clicks on the title, a custom event is sent to the parent **Accordion**, which manages the hide / show display of its items. The items display is changed by applying a class named `hide` to the content part. At the same time, the application can listen to this custom event *(see the chapter **Events** before)*, to apply some changes.\n\nWith the [slot](https://svelte.dev/docs#slot) feature and the ability to retrieve any **ApplicationItem** DOM element, the application may change anything. It could insert an icon in the title, and change it depending on the open status. For example ![chevron-down](https://e-soa.com/ssa/chevron-down.png) and ![chevron-up](https://e-soa.com/ssa/chevron-up.png). See the [demo](https://e-soa.com/svelte-simple-accordion-demo) and the styling example.\n\n### The content\n\nThis part is hidden or shown, depending on the user interaction. The parent **Accordion** manages the display status.\n\nThanks to the Svelte [slot](https://svelte.dev/docs#slot) feature, an **AccordionItem** content includes a slot named `content`. So the application can insert any code. For example:\n\n```html\n<AccordionItem>\n  <div slot=\"title\">\n      <h2>This item title</h2>\n  </div>\n  <!-- The content can be any code -->\n  <div slot=\"content\">\n      <h2>What a nice content!</h2>\n      <img\n           src=\"https://www.musickeyboards.us/woman-playing-accordion-336.jpg\"\n           alt=\"Let's play!\"\n      >\n      <p>\n         {myapp.content} \n      </p>\n  </div>\n</AccordionItem>\n```\n\nThe display of an **AccordionItem** content is animated by default, using this [show and hide](https://gomakethings.com/how-to-add-transition-animations-to-vanilla-javascript-show-and-hide-methods/) technique based on height and opacity rules. See the [Animation](https://gitlab.com/public-e-soa-com/svelte-simple-accordion/-/blob/master/README.md#animation) chapter before.\n\n### Set the item to open after load\n\nBy default, all the **AccordionItem** elements are closed when the components are loaded. The application can indicate what item has to be opened, by using the `openAfterLoad` boolean attribute. In this example, the second of the three items will be opened after load:\n\n```html\n<script>\n    import {Accordion, AccordionItem} from 'svelte-simple-accordion';\n</script>\n\n<!-- Accordion with three items: the second is opened after load -->\n<Accordion>\n    <AccordionItem>\n        <div slot=\"title\">\n            <h2>My fist accordion item</h2>\n        </div>\n        <div slot=\"content\">\n            <p>\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. \n                Integer purus libero, vulputate pretium est vitae,\n                rutrum vestibulum nibh.\n                Proin malesuada ultricies dolor, sit amet fringilla\n                turpis efficitur faucibus.\n            </p>\n        </div>\n    </AccordionItem>\n    <AccordionItem openAfterLoad=\"true\">\n        <div slot=\"title\">\n            <h2>...the next one...opened!</h2>\n        </div>\n        <div slot=\"content\">\n            <p>\n                Vestibulum dapibus, lectus et pretium dictum, odio metus maximus nunc, \n                eget accumsan magna sem quis ante. Suspendisse potenti.\n            </p>\n        </div>\n    </AccordionItem>\n    <AccordionItem>\n        <div slot=\"title\">\n            <h2>....and the last.</h2>\n        </div>\n        <div slot=\"content\">\n            <p>\n                Donec suscipit massa in sem commodo, non fringilla justo mattis.\n                Curabitur et varius lacus. Sed scelerisque \n                lobortis risus nec sollicitudin.\n            </p>\n        </div>\n    </AccordionItem>\n</Accordion>\n```\n## Sub-accordions\n\nYour application can insert a new accordion into the content of an accordion item. \nThe component manages automatically the parent / child relationship. \nSee the [sub-accordion example](https://e-soa.com/svelte-simple-accordion-demo) on the demo site.\n\n\n\nEnjoy!\n\n## License\n\nCopyright (c) 2021 Jacques Desodt and contributors.\n\n[MIT License][].\n\n[Demo]: https://e-soa.com/ssa/accordion.png\n[license]: https://img.shields.io/npm/l/svelte-simple-accordion\n[MIT License]: https://gitlab.com/public-e-soa-com/svelte-simple-accordion/-/blob/2678ef5172ab07faaf6d61ad688c038aa6b67b22/LICENSE\n[npm]: https://img.shields.io/npm/v/svelte-simple-accordion\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 1],
		[3603, 4],
		[3610, 6],
		[3624, 2],
		[3631, 1],
		[3659, 26],
		[3666, 8],
		[3673, 3],
		[3680, 4],
		[3687, 2],
		[3694, 2],
		[3701, 1],
		[3708, 1],
		[3729, 7],
		[3736, 3],
		[3750, 3],
		[3757, 2],
		[3764, 3],
		[3771, 4],
		[3778, 1],
		[3785, 2],
		[3792, 3],
		[3799, 1],
		[3806, 2],
		[3827, 5],
		[3834, 1],
		[3841, 1],
		[3848, 1],
		[3855, 22],
		[3876, 1],
		[3883, 1],
		[3890, 4],
		[3897, 2],
		[3904, 1],
		[3911, 3],
		[3918, 2],
		[3925, 7],
		[3932, 2],
		[3953, 3],
		[3960, 2],
		[3974, 1],
		[3981, 1],
		[4023, 2],
		[4030, 5],
		[4037, 8],
		[4044, 9],
		[4051, 3],
		[4058, 9],
		[4065, 5],
		[4072, 1],
		[4079, 1],
		[4086, 2],
		[4093, 13],
		[4100, 3],
		[4107, 3],
		[4114, 7],
		[4121, 13],
		[4128, 2],
		[4135, 4]
	],
	"esm": true,
	"cjs": false
}
