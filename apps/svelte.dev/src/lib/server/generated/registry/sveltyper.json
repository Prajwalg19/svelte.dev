{
	"name": "sveltyper",
	"description": "Generate type definition files for Svelte components.",
	"repo_url": "https://github.com/TheComputerM/sveltyper",
	"authors": ["thecomputerm"],
	"homepage": "https://github.com/TheComputerM/sveltyper#readme",
	"downloads": 7,
	"updated": "2021-05-26T09:42:26.591Z",
	"tags": ["tooling"],
	"github_stars": 5,
	"typescript": false,
	"version": "1.0.2",
	"svelte_range": "^3.37.0",
	"last_rune_check_version": "1.0.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "sveltyper",
				"version": "1.0.2",
				"size": 142597
			},
			{
				"name": "svelte-docster",
				"version": "2.0.1",
				"size": 61200
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "<h1 align=\"center\">sveltyper</h1>\n<p>\n  <img alt=\"Version\" src=\"https://img.shields.io/npm/v/sveltyper\" />\n  <a href=\"https://github.com/TheComputerM/sveltyper#readme\" target=\"_blank\">\n    <img alt=\"Documentation\" src=\"https://img.shields.io/badge/documentation-yes-brightgreen.svg\" />\n  </a>\n  <a href=\"https://github.com/TheComputerM/sveltyper/graphs/commit-activity\" target=\"_blank\">\n    <img alt=\"Maintenance\" src=\"https://img.shields.io/badge/Maintained%3F-yes-green.svg\" />\n  </a>\n  <a href=\"https://github.com/TheComputerM/sveltyper/blob/master/LICENSE\" target=\"_blank\">\n    <img alt=\"License: MIT\" src=\"https://img.shields.io/github/license/TheComputerM/sveltyper\" />\n  </a>\n  <a href=\"https://twitter.com/TheComputerM\" target=\"_blank\">\n    <img alt=\"Twitter: TheComputerM\" src=\"https://img.shields.io/twitter/follow/TheComputerM.svg?style=social\" />\n  </a>\n</p>\n\n> A tool to generate declaration files for Svelte component.\n\n### üè† [Homepage](https://github.com/TheComputerM/sveltyper#readme)\n\n## Install\n\n```sh\nnpm i -D sveltyper\n```\n\n## Features\n\n- Lightweight\n- Can handle any type of CSS (like SASS,SCSS)\n- Can use `export {prop1 as prop2}` syntax\n- Can use `export function doSomething() {}` syntax\n- Can extract:\n  - props\n  - slots\n  - forwarded events\n  - dispatched events\n  - $$restProps\n  - type definitions\n\n## Usage\n\n### JS API\n\n```js\nconst sveltyper = require(\"sveltyper\");\n\nsveltyper({\n  // provide either the full path to the svelte file\n  file: \"full/path/to/file.svelte\",\n\n  // or provide string content and the filename,\n  content: \"<script> ... </script> Svelte file\",\n  filename: \"App.svelte\",\n});\n```\n\n### CLI\n\nMake sure your package.json has an entrypoint in the `svelte` field and then run this command to generate type definitions in the `types` folder. This CLI is only optimized for simple packages, if you have a more complex usecase, please use the JS API to generate types.\n\n```sh\nsveltyper types\n```\n\n## API Reference\n\nIt is just like sveld, but `typedef` can be shared across multiple files.\n\n- [@type](#type)\n- [@slot](#slot)\n- [@event](#event)\n- [@restProps](#restprops)\n- [@typedef](#typedef)\n\n### `@type`\n\nWithout a `@type` annotation, sveld will infer the primitive type for a prop:\n\n```js\nexport let kind = \"primary\";\n// inferred type: \"string\"\n```\n\nUse the `@type` tag to explicitly document the type. In the following example, the `kind` property has an enumerated (enum) type.\n\nSignature:\n\n```js\n/**\n * Optional description\n * @type {Type}\n */\n```\n\nExample:\n\n```js\n/**\n * Specify the kind of button\n * @type {\"primary\" | \"secondary\" | \"tertiary\"}\n */\nexport let kind = \"primary\";\n```\n\n### `@slot`\n\nUse the `@slot` tag for typing component slots.\n\nSignature:\n\n```js\n/**\n * @slot {Type} [slot name]\n */\n```\n\nExample:\n\n```svelte\n<script>\n  /**\n   * @slot {{ prop: number; doubled: number; }}\n   * @slot {{ props: { class?: string; } }} description\n   */\n\n  export let prop = 0;\n</script>\n\n<h1>\n  <slot {prop} doubled={prop * 2} />\n</h1>\n\n<p>\n  <slot name=\"description\" props={{ class: $$props.class }} />\n</p>\n```\n\n### `@event`\n\nUse the `@event` tag for typing dispatched events. An event name must be specified.\n\nSignature:\n\n```js\n/**\n * @event {EventDetail} eventname\n */\n```\n\nExample:\n\n```js\n/**\n * @event {{ key: string }} button:key\n */\n\nexport let key = \"\";\n\nimport { createEventDispatcher } from \"svelte\";\n\nconst dispatch = createEventDispatcher();\n\n$: dispatch(\"button:key\", { key });\n```\n\n### `@restProps`\n\nsveld can pick up inline HTML elements that `$$restProps` is forwarded to. However, it cannot infer the underlying element for instantiated components.\n\nYou can use the `@restProps` tag to explicitly define element tags that `$$restProps` is forwarded to.\n\nSignature:\n\n```js\n/**\n * Single element\n * @restProps {tagname}\n *\n * Multiple elements\n * @restProps {tagname-1 | tagname-2 | tagname-3}\n */\n```\n\nExample:\n\n```svelte\n<script>\n  /** @restProps {h1 | button} */\n  export let edit = false;\n\n  import Button from \"../\";\n</script>\n\n{#if edit}\n  <Button {...$$restProps} />\n{:else}\n  <h1 {...$$restProps}><slot /></h1>\n{/if}\n```\n\n### `@typedef`\n\nThe `@typedef` tag can be used to define a common type that is used multiple times within a your component and can be shared with multiple files.\n\nSignature:\n\n```js\n/**\n * @typedef {Type} TypeName\n */\n```\n\nExample:\n\n**A.svelte**\n```js\n/**\n * @typedef {string} AuthorName\n * @typedef {{ name?: AuthorName; dob?: string; }} Author\n */\n\n/** @type {Author} */\nexport let author = 'Oda';\n\n/** @type {Author[]} */\nexport let authors = [];\n```\n\n**B.svelte**\n```js\n/** @type {Author} */\nexport let whoIsAuthor = 'Murata';\n```\n\n\n## Run tests\n\n```sh\nnpm t\n```\n\n## Author\n\nüë§ **TheComputerM**\n\n- Twitter: [@TheComputerM](https://twitter.com/TheComputerM)\n- Github: [@TheComputerM](https://github.com/TheComputerM)\n\n## ü§ù Contributing\n\nContributions, issues and feature requests are welcome!<br />Feel free to check [issues page](https://github.com/TheComputerM/sveltyper/issues). You can also take a look at the [contributing guide](https://github.com/TheComputerM/sveltyper/blob/master/CONTRIBUTING.md).\n\n## Show your support\n\nGive a ‚≠êÔ∏è if this project helped you!\n\n## üìù License\n\nCopyright ¬© 2021 [TheComputerM](https://github.com/TheComputerM).<br />\nThis project is [MIT](https://github.com/TheComputerM/sveltyper/blob/master/LICENSE) licensed.\n\n---\n\n_This README was generated with ‚ù§Ô∏è by [readme-md-generator](https://github.com/kefranabg/readme-md-generator)_\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 6],
		[3603, 3],
		[3610, 4],
		[3631, 1],
		[3638, 1],
		[3645, 1],
		[3659, 1],
		[3666, 4],
		[3673, 1],
		[3680, 1],
		[3701, 1],
		[3708, 1],
		[3729, 4],
		[3750, 3],
		[3757, 4],
		[3764, 2],
		[3771, 1],
		[3778, 1],
		[3785, 2],
		[3792, 2],
		[3799, 4],
		[3806, 2],
		[3834, 1],
		[3848, 1],
		[3855, 16],
		[3862, 1],
		[3876, 2],
		[3883, 5],
		[3890, 6],
		[3904, 5],
		[3911, 2],
		[3932, 4],
		[3946, 1],
		[3960, 1],
		[3981, 1],
		[3995, 3],
		[4016, 2],
		[4023, 2],
		[4030, 6],
		[4037, 5],
		[4044, 7],
		[4051, 1],
		[4065, 2],
		[4093, 7],
		[4100, 4],
		[4107, 2],
		[4114, 7],
		[4121, 13],
		[4128, 4],
		[4135, 6]
	]
}
