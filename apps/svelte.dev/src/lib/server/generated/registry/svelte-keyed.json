{
	"name": "svelte-keyed",
	"description": "Create writable derived stores for objects and arrays.",
	"repo_url": "https://github.com/bryanmylee/svelte-keyed",
	"authors": ["bryanmylee"],
	"homepage": "https://github.com/bryanmylee/svelte-keyed#readme",
	"downloads": 12910,
	"updated": "2024-01-02T20:45:43.914Z",
	"tags": ["miscellaneous"],
	"github_stars": 71,
	"typescript": true,
	"version": "2.0.0",
	"svelte_range": "^4.0.0",
	"kit_range": "^2.0.0",
	"last_rune_check_version": "2.0.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-keyed",
				"version": "2.0.0",
				"size": 11257
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "![svelte-keyed-banner](https://user-images.githubusercontent.com/42545742/145455110-0d90603a-5fb3-453a-a9ea-7c4e3b443913.png)\n\n# svelte-keyed\n\n[![npm version](http://img.shields.io/npm/v/svelte-keyed.svg)](https://www.npmjs.com/package/svelte-keyed)\n[![npm downloads](https://img.shields.io/npm/dm/svelte-keyed.svg)](https://www.npmjs.com/package/svelte-keyed)\n![license](https://img.shields.io/npm/l/svelte-keyed)\n![build](https://img.shields.io/github/actions/workflow/status/bryanmylee/svelte-keyed/publish.yml)\n[![coverage](https://coveralls.io/repos/github/bryanmylee/svelte-keyed/badge.svg?branch=main)](https://coveralls.io/github/bryanmylee/svelte-keyed?branch=main)\n[![size](https://img.shields.io/bundlephobia/min/svelte-keyed)](https://bundlephobia.com/result?p=svelte-keyed)\n\nA **writable** derived store for objects and arrays!\n\n```js\nconst user = writable({ name: { first: 'Rich', last: 'Harris' } });\nconst firstName = keyed(user, 'name.first');\n\n$firstName = 'Bryan';\n\nconsole.log($user); // { name: { first: 'Bryan', last: 'Harris' } };\n```\n\n## Installation\n\n```bash\n$ npm i -D svelte-keyed\n```\n\nSince Svelte automatically bundles all required dependencies, you only need to install this package as a dev dependency with the `-D` flag.\n\n## API\n\n`keyed` takes a writable object store and a **keypath**, and returns a writable store whose _changes are reflected on the original store_.\n\nProperties are accessed with dot notation, and arrays can be indexed with bracket notation.\n\n```js\nconst email = keyed(settings, 'profiles[0].email');\n```\n\n### Nullable parents\n\nIf the parent store is nullable, then the child store will also be nullable.\n\n```ts\ntype User = {\n  name: {\n    first: string;\n    last: string;\n  };\n  relations: {\n    partner?: User;\n  };\n};\n\nconst maybeUser = writable<User | undefined>(undefined);\n// Writable<string | undefined>\nconst firstName = keyed(maybeUser, 'name.first');\n```\n\n### Nullable properties\n\nNullable properties are accessed with [optional chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining) behaviour.\n\n```ts\nconst user = writable(initUser);\n// Writable<Name | undefined>\nconst partnerName = keyed(user, 'relations.partner.name');\n```\n\n### TypeScript\n\n`keyed` infers the return type of the keyed store from the keypath.\n\n```ts\nconst user = writable(initUser);\n// Writable<string>\nconst firstName = keyed(user, 'name.first');\n```\n\n`keyed` will also try to guess all possible keypaths up to a depth limit of 3.\n\n```ts\nkeyed(user, '...');\n            ┌───────────────────────────────┐\n            │ • name                        │\n            │ • name.first                  │\n            │ • name.last                   │\n            │ • relations                   │\n            │ • relations.partner           │\n            │ • relations.partner.name      │\n            └───────────────────────────────┘\n```\n\n_This limit is due to a TypeScript limitation where structured types must be generated statically. Increasing the depth limit slows down type compilation._\n\nType hints will not be provided for keypaths with a depth greater than 3 but this does not affect the return type.\n\n```ts\nconst user = writable(user);\n// Writable<string | undefined>\nconst firstName = keyed(user, 'relations.partner.name.first');\n```\n\n## Motivations\n\nWe usually read and write properties of an object store with [auto-subscriptions](https://svelte.dev/tutorial/auto-subscriptions).\n\n```svelte\n<input bind:value={$name.first}/>\n```\n\nHowever, auto-subscriptions are isolated to a Svelte component. `svelte-keyed` aims to solve several common limitations listed below.\n\n### Context stores\n\nOften, we want to set a property or element of a store into component context, then allow child components to read / write to the property.\n\n```svelte\n<!-- Settings.svelte -->\n<script>\n  setContext('profileSettings', keyed(settings, 'profile'));\n</script>\n\n<GeneralSettings />\n<ProfileSettings />\n```\n\n```svelte\n<!-- ProfileSettings.svelte -->\n<script>\n  const profileSettings = getContext('profileSettings');\n</script>\n\n<input type=\"text\" bind:value={$profileSettings.username} />\n```\n\n### Helper functions\n\nOne important method to reduce clutter on your component is to extract functionality into external helper functions. `svelte-keyed` allows you to create derived `Writable` stores that can be passed into or returned from helper functions.\n\n```svelte\n<!-- Settings.svelte -->\n<script>\n  const stats = writable({ userClicks: 0, userTaps: 0 });\n  const clicks = keyed(stats, 'userClicks');\n</script>\n\n<div use:trackClicks={clicks} />\n<input use:trackClicks={clicks} />\n```\n\n```js\nexport const trackClicks = (node, clicks) => {\n  const listen = () => {\n    clicks.update(($clicks) => $clicks + 1);\n  };\n  node.addEventListener('click', listen);\n  return {\n    destroy() {\n      node.removeEventListener('click', listen);\n    },\n  };\n};\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 2214],
		[3596, 3295],
		[3603, 3027],
		[3610, 2695],
		[3617, 3423],
		[3624, 3176],
		[3631, 3877],
		[3638, 3684],
		[3645, 1698],
		[3652, 3306],
		[3659, 4483],
		[3666, 4768],
		[3673, 6284],
		[3680, 6543],
		[3687, 5973],
		[3694, 7217],
		[3701, 7223],
		[3708, 8366],
		[3715, 7530],
		[3722, 7780],
		[3729, 7903],
		[3736, 8195],
		[3743, 9702],
		[3750, 9854],
		[3757, 10347],
		[3764, 11102],
		[3771, 10118],
		[3778, 10675],
		[3785, 12472],
		[3792, 10392],
		[3799, 10595],
		[3806, 11779],
		[3813, 13031],
		[3820, 12752],
		[3827, 14152],
		[3834, 13640],
		[3841, 14194],
		[3848, 14816],
		[3855, 13114],
		[3862, 14594],
		[3869, 14379],
		[3876, 16365],
		[3883, 16567],
		[3890, 18709],
		[3897, 19071],
		[3904, 20018],
		[3911, 18860],
		[3918, 18790],
		[3925, 17307],
		[3932, 18870],
		[3939, 19081],
		[3946, 19812],
		[3953, 20004],
		[3960, 18110],
		[3967, 16118],
		[3974, 16849],
		[3981, 15772],
		[3988, 17547],
		[3995, 16472],
		[4002, 13902],
		[4009, 5031],
		[4016, 7036],
		[4023, 13488],
		[4030, 15980],
		[4037, 16296],
		[4044, 17162],
		[4051, 19701],
		[4058, 19838],
		[4065, 15880],
		[4072, 15488],
		[4079, 15941],
		[4086, 17528],
		[4093, 17337],
		[4100, 17767],
		[4107, 15674],
		[4114, 12910],
		[4121, 11005],
		[4128, 11331]
	],
	"esm": true,
	"cjs": false
}
