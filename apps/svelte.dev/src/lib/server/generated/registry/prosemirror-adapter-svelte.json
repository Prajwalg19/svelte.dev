{
	"name": "@prosemirror-adapter/svelte",
	"description": "Integrate ProseMirror editor with Svelte.",
	"repo_url": "https://github.com/Saul-Mirone/prosemirror-adapter",
	"authors": ["mirone"],
	"homepage": "https://github.com/Saul-Mirone/prosemirror-adapter#readme",
	"downloads": 3920,
	"updated": "2025-03-17T21:59:01.355Z",
	"tags": ["integration"],
	"github_stars": 128,
	"typescript": true,
	"version": "0.4.1",
	"svelte_range": "^4.0.0 || ^5.0.0",
	"last_rune_check_version": "0.4.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@prosemirror-adapter/svelte",
				"version": "0.4.1",
				"size": 90173
			},
			{
				"name": "nanoid",
				"version": "5.1.5",
				"size": 12143
			},
			{
				"name": "tslib",
				"version": "2.8.1",
				"size": 90359
			},
			{
				"name": "@prosemirror-adapter/core",
				"version": "0.4.0",
				"size": 48187
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2],
			[0, 3],
			[3, 2]
		],
		"circular": []
	},
	"readme": "# @prosemirror-adapter/svelte\n\n[Svelte](https://svelte.dev/) adapter for [ProseMirror](https://prosemirror.net/).\n\n## Example\n\nYou can view the example in [prosemirror-adapter/examples/svelte](../../examples/svelte/).\n\n[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/Saul-Mirone/prosemirror-adapter/tree/main/examples/svelte)\n\n## Getting Started\n\n### Install the package\n\n```bash\nnpm install @prosemirror-adapter/svelte\n```\n\n### Wrap your component with provider\n\n```html\n<script lang=\"ts\">\nimport { useProsemirrorAdapterProvider } from \"@prosemirror-adapter/svelte\";\n\nuseProsemirrorAdapterProvider();\n</script>\n\n<YourAwesomeEditor />\n```\n\n<details>\n\n<summary>\n\n### Play with node view\n\n</summary>\n\nIn this section we will implement a node view for paragraph node.\n\n#### Build component for [node view](https://prosemirror.net/docs/ref/#view.NodeView)\n\n```html\n<script lang=\"ts\">\nimport { useNodeViewContext } from \"@prosemirror-adapter/svelte\";\nlet selected = false;\n\nconst contentRef = useNodeViewContext('contentRef');\nconst selectedStore = useNodeViewContext('selected');\nselectedStore.subscribe((value) => {\n  selected = value;\n})\n\n</script>\n\n<div use:contentRef class:selected={selected} />\n\n<style>\n.selected {\n  outline: blue solid 1px;\n}\n</style>\n```\n\n#### Bind node view components with prosemirror\n\n```html\n<script lang=\"ts\">\nimport { useNodeViewFactory } from '@prosemirror-adapter/svelte'\nimport Paragraph from './Paragraph.svelte'\n\nconst nodeViewFactory = useNodeViewFactory()\n\nconst editor = (element: HTMLElement) => {\n  const editorView = new EditorView(element, {\n    state: YourProsemirrorEditorState,\n    nodeViews: {\n      paragraph: nodeViewFactory({\n        component: Paragraph,\n        // Optional: add some options\n        as: 'div',\n        contentAs: 'p',\n      }),\n    },\n  })\n}\n</script>\n\n<div use:editor />\n```\n\nðŸš€ Congratulations! You have built your first svelte node view with prosemirror-adapter.\n\n</details>\n\n<details>\n\n<summary>\n\n### Play with mark view\n\n</summary>\n\nIn this section we will implement a mark view for links that changes color periodically.\n\n#### Build component for mark view\n\n```svelte\n<script lang=\"ts\">\nimport { onMount, onDestroy } from 'svelte'\nimport { useMarkViewContext } from '@prosemirror-adapter/svelte'\n\nconst colors = [\n  '#f06292', '#ba68c8', '#9575cd', '#7986cb', '#64b5f6',\n  '#4fc3f7', '#4dd0e1', '#4db6ac', '#81c784', '#aed581',\n  '#ffb74d', '#ffa726', '#ff8a65', '#d4e157', '#ffd54f',\n  '#ffecb3',\n]\n\nfunction pickRandomColor() {\n  return colors[Math.floor(Math.random() * colors.length)]\n}\n\nconst { mark, contentRef } = useMarkViewContext()\nlet color = colors[0]\nconst href = $mark.attrs.href as string\nconst title = $mark.attrs.title as string | null\n\nlet interval: ReturnType<typeof setInterval>\n\nonMount(() => {\n  interval = setInterval(() => {\n    color = pickRandomColor()\n  }, 1000)\n})\n\nonDestroy(() => {\n  clearInterval(interval)\n})\n</script>\n\n<a\n  {href}\n  use:contentRef\n  style=\"color: {color}; transition: color 1s ease-in-out\"\n  title={title || undefined}\n/>\n```\n\n#### Bind mark view components with prosemirror\n\n```svelte\n<script lang=\"ts\">\nimport { useMarkViewFactory } from '@prosemirror-adapter/svelte'\nimport { Plugin } from 'prosemirror-state'\nimport Link from './Link.svelte'\n\nconst markViewFactory = useMarkViewFactory()\n\nfunction editorRef(element: HTMLElement) {\n  if (!element || element.firstChild)\n    return\n\n  const editorView = new EditorView(element, {\n    state: EditorState.create({\n      schema: YourProsemirrorSchema,\n      plugins: [\n        new Plugin({\n          props: {\n            markViews: {\n              link: markViewFactory({\n                component: Link,\n              }),\n            },\n          },\n        }),\n      ]\n    })\n  })\n}\n</script>\n\n<div class=\"editor\" bind:this={editorRef} />\n```\n\nðŸš€ Congratulations! You have built your first svelte mark view with prosemirror-adapter.\n\n</details>\n\n<details>\n\n<summary>\n\n### Play with plugin view\n\n</summary>\n\nIn this section we will implement a plugin view that will display the size of the document.\n\n#### Build component for [plugin view](https://prosemirror.net/docs/ref/#state.PluginView)\n\n```html\n<script lang=\"ts\">\nimport { usePluginViewContext } from '@prosemirror-adapter/svelte'\nconst viewStore = usePluginViewContext('view');\nlet size = 0;\n\nviewStore.subscribe(view => {\n  size = view.state.doc.nodeSize;\n})\n</script>\n\n<div>Size for document: { size }</div>\n```\n\n#### Bind plugin view components with prosemirror\n\n```html\n<script lang=\"ts\">\nimport { usePluginViewFactory } from '@prosemirror-adapter/svelte'\nimport { Plugin } from 'prosemirror-state'\nimport Size from './Size.svelte'\n\nconst pluginViewFactory = usePluginViewFactory()\n\nconst editor = (element: HTMLElement) => {\n  const editorView = new EditorView(element, {\n    state: EditorState.create({\n      schema: YourProsemirrorSchema,\n      plugins: [\n        new Plugin({\n          view: pluginViewFactory({\n            component: Size,\n          }),\n        }),\n      ]\n    })\n  })\n}\n</script>\n\n<div use:editor />\n```\n\nðŸš€ Congratulations! You have built your first svelte plugin view with prosemirror-adapter.\n\n</details>\n\n<details>\n\n<summary>\n\n### Play with widget view\n\n</summary>\n\nIn this section we will implement a widget view that will add hashes for heading when selected.\n\n#### Build component for [widget decoration view](https://prosemirror.net/docs/ref/#view.Decoration%5Ewidget)\n\n```html\n<script lang=\"ts\">\n  import { useWidgetViewContext } from '@prosemirror-adapter/svelte'\n\n  const spec = useWidgetViewContext('spec')\n  const level = spec?.level\n  const hashes = Array(level || 0).fill('#').join('')\n</script>\n\n<span class=\"hash\">{hashes}</span>\n\n<style>\n  .hash {\n    color: blue;\n    margin-right: 6px;\n  }\n</style>\n```\n\n#### Bind widget view components with prosemirror\n\n```html\n<script lang=\"ts\">\nimport { useWidgetViewFactory } from '@prosemirror-adapter/svelte'\nimport { Plugin } from 'prosemirror-state'\nimport Hashes from './Hashes.svelte'\n\nconst widgetViewFactory = useWidgetViewFactory()\n\nconst editor = (element: HTMLElement) => {\n  const getHashWidget = widgetViewFactory({\n    as: 'i',\n    component: Hashes,\n  })\n\n  const editorView = new EditorView(element, {\n    state: EditorState.create({\n      schema: YourProsemirrorSchema,\n      plugins: [\n        new Plugin({\n          props: {\n            decorations(state) {\n              const { $from } = state.selection\n              const node = $from.node()\n              if (node.type.name !== 'heading')\n                return DecorationSet.empty\n\n              const widget = getHashWidget($from.before() + 1, {\n                side: -1,\n                level: node.attrs.level,\n              })\n\n              return DecorationSet.create(state.doc, [widget])\n            },\n          },\n        }),\n      ]\n    })\n  })\n}\n</script>\n\n<div use:editor />\n```\n\nðŸš€ Congratulations! You have built your first svelte widget view with prosemirror-adapter.\n\n</details>\n\n## API\n\n<details>\n\n<summary>\n\n### Node view API\n\n</summary>\n\n#### useNodeViewFactory: () => (options: NodeViewFactoryOptions) => NodeView\n\n```ts\n\ntype DOMSpec = string | HTMLElement | ((node: Node) => HTMLElement)\n\ninterface NodeViewFactoryOptions {\n  // Component\n  component: SvelteComponent\n\n  // The DOM element to use as the root node of the node view.\n  as?: DOMSpec\n  // The DOM element that contains the content of the node.\n  contentAs?: DOMSpec\n\n  // Overrides: this part is equal to properties of [NodeView](https://prosemirror.net/docs/ref/#view.NodeView)\n  update?: (node: Node, decorations: readonly Decoration[], innerDecorations: DecorationSource) => boolean | void\n  ignoreMutation?: (mutation: ViewMutationRecord) => boolean | void\n  selectNode?: () => void\n  deselectNode?: () => void\n  setSelection?: (anchor: number, head: number, root: Document | ShadowRoot) => void\n  stopEvent?: (event: Event) => boolean\n  destroy?: () => void\n\n  // Called when the node view is updated.\n  onUpdate?: () => void\n}\n```\n\n#### useNodeViewContext: () => NodeViewContext\n\n```ts\n\ninterface NodeViewContext {\n  // The DOM element that contains the content of the node.\n  contentRef: NodeViewContentRef\n\n  // The prosemirror editor view.\n  view: EditorView\n\n  // Get prosemirror position of current node view.\n  getPos: () => number | undefined\n\n  // Set node.attrs of current node.\n  setAttrs: (attrs: Attrs) => void\n\n  // The prosemirror node for current node.\n  node: Writable<Node>\n\n  // The prosemirror decorations for current node.\n  decorations: Writable<readonly Decoration[]>\n\n  // The prosemirror inner decorations for current node.\n  innerDecorations: Writable<DecorationSource>\n\n  // Whether the node is selected.\n  selected: Writable<boolean>\n}\n```\n\n</details>\n\n<details>\n\n<summary>\n\n### Mark view API\n\n</summary>\n\n#### useMarkViewFactory: () => (options: MarkViewFactoryOptions) => MarkView\n\n```ts\ntype MarkViewDOMSpec = string | HTMLElement | ((mark: Mark) => HTMLElement)\n\ninterface MarkViewFactoryOptions {\n  // Component\n  component: SvelteComponent\n\n  // The DOM element to use as the root node of the mark view\n  as?: MarkViewDOMSpec\n\n  // The DOM element that contains the content of the mark\n  contentAs?: MarkViewDOMSpec\n\n  // Called when the mark view is destroyed\n  destroy?: () => void\n}\n```\n\n#### useMarkViewContext: () => MarkViewContext\n\n```ts\ninterface MarkViewContext {\n  // The DOM element that contains the content of the mark\n  contentRef: (node: HTMLElement) => void\n\n  // The prosemirror editor view\n  view: Writable<EditorView>\n\n  // The prosemirror mark for current mark view\n  mark: Writable<Mark>\n\n  // Whether the mark is inline \n  inline: Writable<boolean>\n}\n```\n\n</details>\n\n<details>\n\n<summary>\n\n### Plugin view API\n\n</summary>\n\n#### usePluginViewFactory: () => (options: PluginViewFactoryOptions) => PluginView\n\n```ts\n\ninterface PluginViewFactoryOptions {\n  // Component\n  component: SvelteComponent\n\n  // The DOM element to use as the root node of the plugin view.\n  // The `viewDOM` here means `EditorState.view.dom`.\n  // By default, it will be `EditorState.view.dom.parentElement`.\n  root?: (viewDOM: HTMLElement) => HTMLElement\n\n  // Overrides: this part is equal to properties of [PluginView](https://prosemirror.net/docs/ref/#state.PluginView)\n  update?: (view: EditorView, prevState: EditorState) => void\n  destroy?: () => void\n}\n```\n\n#### usePluginViewContext: () => PluginViewContext\n\n```ts\n\ninterface PluginViewContext {\n  // The prosemirror editor view.\n  view: Writable<EditorView>\n\n  // The previously prosemirror editor state.\n  // Will be `undefined` when the plugin view is created.\n  prevState: Writable<EditorState | undefined>\n}\n```\n\n</details>\n\n<details>\n\n<summary>\n\n### Widget view API\n\n</summary>\n\n#### useWidgetViewFactory: () => (options: WidgetViewFactoryOptions) => WidgetDecorationFactory\n\n```ts\n\ntype WidgetDecorationFactory = (pos: number, spec?: WidgetDecorationSpec) => Decoration\n\ninterface WidgetViewFactoryOptions {\n  // Component\n  component: SvelteComponent\n\n  // The DOM element to use as the root node of the widget view.\n  as: string | HTMLElement\n}\n```\n\n\n#### useWidgetViewContext: () => WidgetViewContext\n\n```ts\n\ninterface WidgetViewContext {\n  // The prosemirror editor view.\n  view: EditorView\n\n  // Get the position of the widget.\n  getPos: () => number | undefined\n\n  // Get the [spec](https://prosemirror.net/docs/ref/#view.Decoration^widget^spec) of the widget.\n  spec?: WidgetDecorationSpec\n}\n```\n\n</details>\n\n## Contributing\n\nFollow our [contribution guide](../../CONTRIBUTING.md) to learn how to contribute to prosemirror-adapter.\n\n## License\n\n[MIT](../../LICENSE)\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 569],
		[3596, 1462],
		[3603, 1782],
		[3610, 1480],
		[3617, 1583],
		[3624, 1143],
		[3631, 1790],
		[3638, 1336],
		[3645, 776],
		[3652, 1363],
		[3659, 1581],
		[3666, 1652],
		[3673, 2308],
		[3680, 2600],
		[3687, 2202],
		[3694, 1797],
		[3701, 2637],
		[3708, 2320],
		[3715, 2498],
		[3722, 2034],
		[3729, 2904],
		[3736, 2017],
		[3743, 1211],
		[3750, 819],
		[3757, 1004],
		[3764, 1361],
		[3771, 886],
		[3778, 784],
		[3785, 1415],
		[3792, 826],
		[3799, 1139],
		[3806, 803],
		[3813, 1751],
		[3820, 1796],
		[3827, 1036],
		[3834, 1224],
		[3841, 2366],
		[3848, 2444],
		[3855, 2882],
		[3862, 1684],
		[3869, 4521],
		[3876, 2927],
		[3883, 6964],
		[3890, 4296],
		[3897, 4009],
		[3904, 3018],
		[3911, 4546],
		[3918, 4412],
		[3925, 4639],
		[3932, 4807],
		[3939, 3028],
		[3946, 4692],
		[3953, 4101],
		[3960, 2509],
		[3967, 6611],
		[3974, 3429],
		[3981, 8904],
		[3988, 8009],
		[3995, 6649],
		[4002, 6559],
		[4009, 7444],
		[4016, 5183],
		[4023, 9186],
		[4030, 5467],
		[4037, 3365],
		[4044, 5345],
		[4051, 3881],
		[4058, 3970],
		[4065, 3908],
		[4072, 3739],
		[4079, 5879],
		[4086, 2731],
		[4093, 3334],
		[4100, 2279],
		[4107, 3216],
		[4114, 3920],
		[4121, 4787],
		[4128, 2551]
	]
}
