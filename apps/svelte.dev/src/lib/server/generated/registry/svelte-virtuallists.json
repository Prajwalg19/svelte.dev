{
	"name": "svelte-virtuallists",
	"description": "Render only visible items, for efficient Svelte lists.",
	"repo_url": "https://github.com/orefalo/svelte-virtuallists",
	"authors": ["orefalo"],
	"homepage": "https://orefalo.github.io/svelte-virtuallists/",
	"downloads": 762,
	"updated": "2025-03-01T19:17:52.480Z",
	"tags": ["ui"],
	"github_stars": 115,
	"typescript": true,
	"version": "1.4.2",
	"svelte_range": "^5.20.5",
	"last_rune_check_version": "1.4.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-virtuallists",
				"version": "1.4.2",
				"size": 29240
			},
			{
				"name": "@eslint/js",
				"version": "9.26.0",
				"size": 14423
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "<p align=\"center\"><img src=\"./static/favicon.svg\" alt=\"Logo\" width=\"225\"></p>\n<h2 align=\"center\">svelte-virtuallists</h2>\n<p align=\"center\">Keep your page efficient and fast: only shows the visible items!</p>\n\n<p align=\"center\">\n  <a href=\"https://badgen.net/npm/v/svelte-virtuallists\"><img src=\"https://badgen.net/npm/v/svelte-virtuallists\" alt=\"NPM VERSION\"></a>\n  <a href=\"https://badgen.net/packagephobia/publish/svelte-virtuallists\"><img src=\"https://badgen.net/packagephobia/publish/svelte-virtuallists\" alt=\"publish size\"></a>\n  <a href=\"https://badgen.net/packagephobia/publish/svelte-virtuallists\"><img src=\"https://orefalo.github.io/svelte-virtuallists/minified-size-badge.svg\" alt=\"minified size\"></a>\n    <a href=\"https://orefalo.github.io/svelte-virtuallists/minified-size-badge.svg\"><img src=\"https://badgen.net/bundlephobia/dependency-count/svelte-virtuallists\" alt=\"deps\"></a>\n      <a href=\"https://badgen.net/github/contributors/orefalo/svelte-virtuallists\"><img src=\"https://badgen.net/github/contributors/orefalo/svelte-virtuallists\" alt=\"contributors\"></a>\n</p>\n<p align=\"center\">\n  <a href=\"#about\">About</a> ‚Ä¢\n  <a href=\"#features\">Features</a> ‚Ä¢\n  <a href=\"#usage\">Usage</a> ‚Ä¢\n  <a href=\"#demos\">Demos</a> ‚Ä¢\n  <a href=\"#samples\">Samples</a>\n</p>\n\n![screenshot](./static/screenshot.webp)\n\n## About\n\nKeep your tables and lists efficient and fast: only render the visible items, instead of displaying all your data in large lists.\n\nThis package is a merge of [svelte-tiny-virtual-list](https://github.com/jonasgeiler/svelte-tiny-virtual-list) and [he-virtual-list](https://github.com/phphe/virtual-list), ported to Svelte 5. I spend many many hours to learn and build an improved version. Many thanks to the original authors.\n\n## Features\n\n- ‚ù∫‚ù∫‚ûé‚ìπ‚ìπ **Svelte 5+ only**\n  Build for Svelte 5+ in Typescript.\n\n- üöÄ **Performant**\n  Render millions of items, without breaking a sweat.\n\n- üõ† **Configurable**\n  Customize width, heigh, position, style, content.\n  \n- üí† **Layout Control**\n  Headless, support fixed and variables sizing, along with vertical and horizontal lists and tables.\n\n- üß© **Programming Interface**\n  Set positions and properties, raises events on state mutation.\n\n- üíº **Small**\n  Compact and dependency free ‚Äì Only ~5kb when compressed.\n\n## Installation\n`npm i svelte-virtuallists`\n\n## Usage\n\nThis component can be used two different ways:\n\n- ü§ñ As a scrollable listover a large number of items, optionally read incrementally.\n\n- üß† As a fondation for more complex components - TreeViews and DataGrids.\n\n## Browser Support\n\n| ![Chrome](https://raw.github.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png) | ![Firefox](https://raw.github.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png) | ![Safari](https://raw.github.com/alrra/browser-logos/master/src/safari/safari_48x48.png) | ![Opera](https://raw.github.com/alrra/browser-logos/master/src/opera/opera_48x48.png) | ![Edge](https://raw.github.com/alrra/browser-logos/master/src/edge/edge_48x48.png) | ![IE](https://raw.github.com/alrra/browser-logos/master/src/archive/internet-explorer_9-11/internet-explorer_9-11_48x48.png) |\n| ---------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- |\n| Latest ‚úî                                                                                | Latest ‚úî                                                                                   | Latest ‚úî                                                                                | Latest ‚úî                                                                             | Latest ‚úî                                                                          | 11 ‚úî                                                                                                                        |\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=orefalo/svelte-virtuallists&type=Date)](https://star-history.com/#orefalo/svelte-virtuallists&Date)\n\n## Examples\n\n- [Demos](https://orefalo.github.io/svelte-virtuallists/)\n\n## Samples\n\n```svelte\n<script>\n\timport { VirtualList } from 'svelte-virtuallists';\n\n\tconst data = ['A', 'B', 'C', 'D', 'E', 'F' /* ... */];\n</script>\n\n<VirtualList class='mystyle' style='width:100%;height:600px;' items={data}>\n\t{#snippet vl_slot({ index, item })}\n\t\t<div>\n\t\t\tRow: #{index} Item: {item}\n\t\t</div>\n\t{/snippet}\n</VirtualList>\n```\n\n### Props\n\nThe component accepts the following properties\n\n| Property          | Type        | Required? | Description  |\n| ----------------- | ----------- | :-------: | ------------ |\n| items | `any[]` | ‚úì | the model, the data for the items to display in the list. |\n| isHorizontal | `boolean (false)` |  | Whether the list should scroll vertically or horizontally. One of `'vertical'` (default) or `'horizontal'`. |\n| isDisabled | `boolean (false)` | | When the component is disabled it renders as a regular list |\n| isTable | `boolean (false)` |  | Whether the rendering should be a table layout |\n| sizeCalculator    | `(index: number, item:any) => number   alias   SizingCalculatorFn`                                                                                                                                                                                      |    | Not recommended, as the component will adjust to the css rendering. If you need to control the sizing programmatically, use a function that returns the size (height or width) of the rendered row or column. This function's output is used for scrollbar positioning and is passed to the vl_slot. |\n| scrollToOffset      | `number`(in pixels)               |           | Can be used to control the scrollbar offset in pixel. **scrollToIndex** and **scrollToOffset** MUST not be used together. |\n| scrollToIndex     | `number`(item index)               |           | Moves the scrollbar to display the given item (at index). Follows scroll behavior and alignment policies. **scrollToIndex** and **scrollToOffset** MUST not be used together. |\n| scrollToAlignment | `string (AUTO)`                     |           | Used in combination with **scrollToIndex** and **scrollToOffset**.  Use `'start'` to always align items to the top of the container and `'end'` to align them bottom. Use `'center`' to align them in the middle of the container. `'auto'` scrolls the least amount possible to ensure that the specified `scrollToIndex` item is fully visible. |\n| scrollToBehaviour | `string (AUTO)`               |           | Used in combination with **scrollToIndex** and **scrollToOffset**,  controls the scrolling behaviour movement. One of: `'auto'`, `'smooth'` or `'instant'` (default).                                                                                                                                                                                                                          |\n\n### Snippets\n\n| Property | Type                                                      | Required? | Description                                                  |\n| -------- | --------------------------------------------------------- | :-------: | ------------------------------------------------------------ |\n| vl_slot  | `(index:number, item:any, size?:number) => SnippetResult` |     ‚úì     | Snippet called to render every item, see description below. Typescript signature **VLSlotSignature** |\n| header   | `() => SnippetResult`                                     |           | Useful in table mode to render the table header columns.     |\n| footer   | `() => SnippetResult`                                     |           | Useful in table mode to render any table footer.             |\n\nFor instance,\n\n```svelte\n<VirtualList items={myModel} style=\"height:600px\">\n  {#snippet vl_slot({ index, item }: VLSlotSignature)}\n    <div style=\"border: 1px solid rgb(204, 204, 204);\">\n      Index:{index} Content:{item.text}\n    </div>\n  {/snippet}\n</VirtualList>\n```\n\n### Events\n\n| Property             | Type              | Required? | Description                                                  |\n| -------------------- | ----------------- | :-------: | ------------------------------------------------------------ |\n| onAfterScroll        | `{offset, event}` |           | Fired when the scrollbar changes position.                   |\n| onVisibleRangeUpdate | `{start, end}`    |           | Fired when the visible window is sliding to display new items |\n\n\n\n- `onAfterScroll` \n\nAccepts a function with the following signature `(event):VLScrollEvent => void`\n\n```typescript\nexport interface VLScrollEvent {\n  // either the value of `wrapper.scrollTop` or `wrapper.scrollLeft`\n  offset: number | string;\n  // the original event\n  event: Event;\n}\n```\n\n- `onVisibleRangeUpdate` \n\nAccepts a function with the following signature `(range):VLRangeEvent => void`\n\n```typescript\nexport interface VLRangeEvent {\n  // index of the first visible item\n  start: number;\n  // index of the last visible item\n  end: number;\n}\n```\n\n## Contributing\n\nPlease read [CODE OF CONDUCT](CODE_OF_CONDUCT.md) and the [CONTRIBUTION](CONTRIBUTING.md) guide for more details.\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3813, 22],
		[3820, 440],
		[3827, 44],
		[3834, 11],
		[3841, 24],
		[3848, 31],
		[3855, 15],
		[3862, 27],
		[3869, 19],
		[3876, 18],
		[3883, 25],
		[3890, 61],
		[3897, 58],
		[3904, 34],
		[3911, 52],
		[3918, 239],
		[3925, 210],
		[3932, 177],
		[3939, 489],
		[3946, 682],
		[3953, 426],
		[3960, 360],
		[3967, 329],
		[3974, 421],
		[3981, 308],
		[3988, 258],
		[3995, 349],
		[4002, 260],
		[4009, 216],
		[4016, 201],
		[4023, 249],
		[4030, 484],
		[4037, 267],
		[4044, 325],
		[4051, 368],
		[4058, 1318],
		[4065, 992],
		[4072, 906],
		[4079, 1653],
		[4086, 1869],
		[4093, 748],
		[4100, 464],
		[4107, 865],
		[4114, 762],
		[4121, 458],
		[4128, 842],
		[4135, 530]
	]
}
