{
	"name": "svelte-storable",
	"description": "Extend Svelte's writable store with localStorage.",
	"repo_url": "https://github.com/matssom/svelte-storable",
	"authors": ["matssom"],
	"homepage": "https://github.com/matssom/amidst#readme",
	"downloads": 12,
	"updated": "2020-11-17T14:11:41.332Z",
	"tags": ["miscellaneous"],
	"github_stars": 3,
	"typescript": false,
	"version": "1.0.4",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "1.0.4",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-storable",
				"version": "1.0.4",
				"size": 6424
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Svelte Storable\r\n\r\nSvelte Storable is an extention to the `writable` store that comes with `svelte/store`. The purpose of the package is to preserve the state of the store, even after refresh. \r\n\r\nSvelte Store adds `localStorage` management to the store while, with 1 exception preserves the api.\r\n\r\n<br>\r\n\r\n## Installation\r\n\r\n**Include with npm:**\r\n```\r\nnpm install svelte-storable\r\n```\r\n\r\n**Include locally:**\r\n\r\nDownload `storable.js` from [this](https://github.com/matssom/svelte-storable/) repository and include it in your project.\r\n\r\n<br>\r\n\r\n## Documentation\r\n\r\nUse the [svelte writalbe](https://svelte.dev/docs#writable) doumentation as a companion to this documentation if you aren't comfortable with svelte stores.\r\n\r\n**Creating a Store**\r\n\r\nThe api for `svelte-storable` matches almost identically to the `writable` from `svelte/store`. The key difference is that you need to provide a key to the `storable`. This key will be used when storing and retrieving the persisted data.\r\n\r\n```js\r\n// store.js\r\nimport { storable } from 'svelte-storable';\r\n\r\n                                ||\r\n                                \\/\r\nexport const count = storable('count', 0);\r\n```\r\n\r\n**Using the Store**\r\n\r\nNow you can use the store with all your usual `writable` methods. Additionally, you have the `detatch()` method. This can be used to remove the data from `localStorage` so that the value will be fresh on refresh.\r\n\r\n:warning: **NB:** If you update the value after `detatch()` it will be stored again.\r\n\r\n```html\r\n<!-- App.svelte -->\r\n<script>\r\n    import { count } from './store';\r\n\r\n    const increase  = () => count.update((value) => value + 1);\r\n    const decrease  = () => count.update((value) => value - 1);\r\n    const reset     = () => count.set(0);\r\n    const detatch   = () => count.detatch();\r\n\r\n</script>\r\n\r\n<h1>{$count}</h1>\r\n<button on:click={count.increase}>Increase Count</button>\r\n<button on:click={count.decrease}>Decrese Count</button>\r\n<button on:click={count.reset}>Reset</button>\r\n<button on:click={count.detatch}>Detatch from Storage</button>\r\n\r\n```\r\n\r\n**Subscribe**\r\n\r\nYou can use the `$` syntax like any other svelte store or do it manually with unsubscribe/subscribe.\r\n```js\r\nconst unsubscribe = count.subscribe(value => doSomething(value));\r\n```\r\n\r\n**Custom Stores**\r\n\r\nWith `writable` you can make custom stores. This functionallity also copies over to `svelte-storable`. Again, the key difference is that you need to provide a key. You can optionally take that key as a parameter to your `createStore()` function with a default value.\r\n\r\n```js\r\n// store.js\r\nimport { storable } from 'svelte-storable';\r\n\r\nconst createCountStore = (key = 'count') => {\r\n    const { subscribe, set, update, detatch } = storable(key, 0);\r\n\r\n    return {\r\n        subscribe,\r\n        increase:   () => update((value) => value + 1),\r\n\tdecrease:   () => update((value) => value - 1),\r\n\treset:      () => set(0),\r\n        detatch:    () => detatch()\r\n    }\r\n}\r\n\r\nexport const count = createCountStore('count');\r\n```\r\n\r\n:warning: **NB:** Remember to provide different keys to all the different instances of your custom store. If two or more stores have the same key, they will update each other.\r\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 13],
		[3603, 8],
		[3610, 11],
		[3617, 8],
		[3631, 4],
		[3638, 6],
		[3645, 2],
		[3659, 6],
		[3666, 9],
		[3673, 45],
		[3680, 5],
		[3687, 10],
		[3694, 6],
		[3701, 11],
		[3708, 11],
		[3715, 6],
		[3722, 4],
		[3729, 11],
		[3736, 1],
		[3743, 1],
		[3750, 5],
		[3757, 4],
		[3764, 3],
		[3771, 4],
		[3778, 1],
		[3785, 17],
		[3792, 2],
		[3799, 1],
		[3806, 2],
		[3813, 2],
		[3834, 3],
		[3841, 4],
		[3848, 2],
		[3855, 32],
		[3862, 1],
		[3869, 2],
		[3876, 2],
		[3883, 4],
		[3890, 7],
		[3897, 5],
		[3904, 4],
		[3911, 8],
		[3925, 1],
		[3932, 4],
		[3939, 3],
		[3946, 19],
		[3953, 14],
		[3960, 22],
		[3967, 5],
		[3981, 5],
		[3995, 1],
		[4002, 7],
		[4009, 19],
		[4016, 2],
		[4023, 9],
		[4030, 5],
		[4037, 22],
		[4044, 14],
		[4051, 46],
		[4058, 1],
		[4065, 2],
		[4072, 6],
		[4086, 1],
		[4093, 11],
		[4100, 10],
		[4107, 9],
		[4114, 12],
		[4121, 17],
		[4128, 6],
		[4135, 10]
	],
	"esm": false,
	"cjs": true
}
