{
	"name": "@chrrubin/svelte-virtual-scroll-list",
	"description": "Virtualize lists in Svelte applications.",
	"repo_url": "https://github.com/chrrubin/svelte-virtual-scroll-list",
	"authors": ["chrrubin"],
	"homepage": "https://github.com/chrrubin/svelte-virtual-scroll-list#readme",
	"downloads": 5,
	"updated": "2021-11-13T10:13:02.497Z",
	"tags": ["ui"],
	"github_stars": 0,
	"typescript": true,
	"version": "1.1.3",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "1.1.3",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@chrrubin/svelte-virtual-scroll-list",
				"version": "1.1.3",
				"size": 84110
			}
		],
		"dependencies": [],
		"circular": []
	},
	"legacy_svelte": true,
	"readme": "# svelte-virtual-scroll-list\n\nThis is a fork of [v1ack](https://github.com/v1ack)'s [svelte-virtual-scroll-list](https://github.com/v1ack/svelte-virtual-scroll-list) migrated to TypeScript to add support for TypeScript generics.\n\n## Usage\n\n`yarn add -D @chrrubin/svelte-virtual-scroll-list`\n\n```svelte\n<script lang=\"ts\">\n    import VirtualScroll from \"@chrrubin/svelte-virtual-scroll-list\"\n\n    interface Item {\n        id: number;\n        text: string;\n    }\n\n    let items: Item[] = [{ id: 0, text: 'zero'}, { id: 1, text: 'one'}];\n</script>\n\n<VirtualScroll data={items} key=\"id\" let:data>\n  <div>{data.id}</div>\n  <div>{data.text}<div>\n</VirtualScroll>\n```\n\n---\n\n## Original README\n\n[![npm](https://img.shields.io/npm/v/svelte-virtual-scroll-list?style=for-the-badge)](https://npmjs.com/package/svelte-virtual-scroll-list/)\n\nSvelte implementation of vue library [vue-virtual-scroll-list](https://github.com/tangbc/vue-virtual-scroll-list)\n\nVirtualized scrolling for big lists\n\n---\n**Support dynamic both-directional lists** (see example)\n\n---\n\nOnline demo: [https://v1ack.github.io/svelte-virtual-scroll-list/](https://v1ack.github.io/svelte-virtual-scroll-list/)\n\n[Simple example in Svelte REPL](https://ru.svelte.dev/repl/eae82aab17b04420885851d58de50a2e?version=3.38.2)\n\n# Getting started\n\n## Installing from npm\n\n`npm i svelte-virtual-scroll-list -D`\n\nor\n\n`yarn add svelte-virtual-scroll-list -D`\n\n## Using\n\n```html\n\n<script>\n    import VirtualScroll from \"svelte-virtual-scroll-list\"\n\n    let items = [{id: 1, text: \"one\"}, ...]\n</script>\n<div class=\"vs\">\n    <VirtualScroll\n            data={items}\n            key=\"id\"\n            let:data\n    >\n        <div slot=\"header\">\n            This is a header set via slot\n        </div>\n        <div>\n            {data.text}\n        </div>\n        <div slot=\"footer\">\n            This is a footer set via slot\n        </div>\n    </VirtualScroll>\n</div>\n```\n\nMore examples available in `example` folder\n\n# Comparing to other virtualizing components\n\n| |svelte-virtual-scroll-list|svelte-virtual-list|svelte-tiny-virtual-list|\n|---|---|---|---|\n|handle dynamic size data|+|+|-|\n|scroll methods (to index)|+|-|+|\n|infinity scrolling|two-directional|-|one-directional with another lib|\n|initial scroll position|+|-|+|\n|sticky items|-|-|+|\n|top/bottom slots|+|-|+|\n|reached top/bottom events|+|-|-|\n|document as a list|+|-|-|\n\n# API\n\n## Props\n\n|prop|type|default|description|\n|---|---|---|---|\n|data|object[]|`null`|Source for list|\n|key|string|`id`|Unique key for getting data from `data`|\n|keeps|number|`30`|Count of rendered items|\n|estimateSize|number|`estimateSize`|Estimate size of each item, needs for smooth scrollbar|\n|isHorizontal|boolean|`false`|Scroll direction|\n|pageMode|boolean|`false`|Let virtual list using global document to scroll through the list|\n|start|number|`0`|scroll position start index\n|offset|number|`0`|scroll position offset\n|topThreshold|number|`0`|The threshold to emit `top` event, attention to multiple calls.\n|bottomThreshold|number|`0`|The threshold to emit `bottom` event, attention to multiple calls.\n\n## Methods\n\nAccess to methods by component binding\n<details>\n<summary>Binding example</summary>\n\n```html\n\n<script>\n    let vs\n</script>\n\n<VirtualScroll bind:this={vs}></VirtualScroll>\n<button on:click={vs.scrollToBottom}>To bottom</button>\n```\n\n</details>\n\n|method|arguments|description|\n|---|---|---|\n|scrollToBottom|`none`|Scroll list to bottom|\n|scrollToIndex|`index: number`|Set scroll position to a designated index|\n|scrollToOffset|`offset: number`|Set scroll position to a designated offset|\n|getSize|`id: typeof props.key`|Get the designated item size|\n|getSizes|`none`|Get the total number of stored (rendered) items|\n|getOffset|`none`|Get current scroll offset|\n|getClientSize|`none`|Get wrapper element client viewport size (width or height)|\n|getScrollSize|`none`|Get all scroll size (scrollHeight or scrollWidth)|\n|updatePageModeFront|`none`|When using page mode and virtual list root element offsetTop or offsetLeft change, you need call this method manually|\n\n## Events\n\n|event|description|\n|---|---|\n|scroll|Scroll event|\n|top|Top of the list reached|\n|bottom|Bottom of the list reached|\n",
	"downloads_history": [
		[3589, 2],
		[3596, 6],
		[3603, 6],
		[3610, 2],
		[3631, 1],
		[3638, 1],
		[3645, 1],
		[3652, 4],
		[3659, 3],
		[3666, 5],
		[3673, 4],
		[3687, 1],
		[3708, 5],
		[3715, 1],
		[3736, 2],
		[3757, 1],
		[3764, 2],
		[3771, 5],
		[3778, 5],
		[3785, 1],
		[3799, 2],
		[3806, 2],
		[3813, 1],
		[3834, 1],
		[3841, 1],
		[3848, 21],
		[3855, 35],
		[3862, 11],
		[3869, 2],
		[3876, 6],
		[3890, 1],
		[3904, 9],
		[3911, 7],
		[3932, 1],
		[3939, 1],
		[3953, 2],
		[3960, 1],
		[3988, 5],
		[3995, 5],
		[4002, 4],
		[4009, 8],
		[4016, 4],
		[4023, 3],
		[4030, 1],
		[4037, 10],
		[4044, 5],
		[4051, 2],
		[4058, 2],
		[4072, 1],
		[4086, 9],
		[4093, 18],
		[4100, 4],
		[4107, 2],
		[4114, 5],
		[4121, 8],
		[4128, 2]
	],
	"esm": true,
	"cjs": false
}
