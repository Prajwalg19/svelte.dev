{
	"name": "@steveesamson/microform",
	"description": "Manage forms with validation in Svelte and SvelteKit.",
	"repo_url": "https://github.com/steveesamson/microform",
	"authors": ["steveesamson"],
	"homepage": "https://steveesamson.github.io/microform",
	"downloads": 73,
	"updated": "2025-04-09T13:59:55.325Z",
	"tags": ["miscellaneous"],
	"github_stars": 0,
	"typescript": true,
	"version": "1.0.9",
	"svelte_range": "^5.0.0",
	"kit_range": "^2.16.0",
	"last_rune_check_version": "1.0.9",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@steveesamson/microform",
				"version": "1.0.9",
				"size": 36794
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# microform\n\n`microform` is a tiny library for managing forms in `svelte/sveltekit`.\n\n## Installation\n\n```bash\n# In your project directory\nnpm install @steveesamson/microform\n```\n\nor\n\n```bash\n# In your project directory\nyarn add @steveesamson/microform\n```\n\n[Demo and Docs](https://steveesamson.github.io/microform)\n\n## Usage\n\nOnce you've added `microform` to your project, use it as shown below, in your view(`.svelte` files):\n\n### In the view Script\n\n```ts\n<script>\nimport uform  from \"@steveesamson/microform\";\n// default form data, probably passed as props\nlet defaultData:any = $props();\n\n// Instatiate microform\nconst { form, values, errors, submit, sanity } = uform({\n    // Set default form data\n    data:{...defaultData},\n    // Set a global event for validation, can be overriden on a each field.\n    // Possible values: blur, change, input, keyup\n    options:{\n        // Default event that triggers validation\n        validateEvent:'blur',\n        // Configure validators here\n        validators:{}\n    }\n});\n\n// Submit handler\n// data is the collected form data\n// Only called on valid form\n// A form is valid when it has no error and at least one of the fields has changed\nconst onSubmit = (data:unknown) => {\n    console.log(data);\n}\n</script>\n```\n\nOn the instantiation of `microform`, we have access to:\n\n- `values`, a `FormValues`, which represents form data.\n- `errors`, a `FormErrors`, which represents form errors.\n- `form`, which is a `svelte action` that actually does the `microform` magic.\n- `submit`, which is another `svelte action` to handle form submission.\n- `sanity`, a `FormSanity`, which tells us if a form is clean/without errors by it's `ok` property.\n- `reset`, a function to reset form\n- `onsubmit`, a function to handle form submission.\n\n### In the view Html\n\n```html\n    <form use:submit={onSubmit}>\n        <label for=\"fullname\">\n\t\t\tName:\n\t\t\t<input\n\t\t\ttype=\"text\"\n\t\t\tname=\"fullname\"\n\t\t\tid=\"fullname\"\n\t\t\tuse:form={{ validations: ['required'] }}\n\t\t\t/>\n\t\t\t{#if errors.fullname}\n\t\t\t\t<small>{errors.fullname}</small>\n\t\t\t{/if}\n\t\t</label>\n\t\t<label for=\"dob\">\n\t\t\tDOB:\n\t\t\t<input\n\t\t\ttype=\"date\"\n\t\t\tname=\"dob\"\n\t\t\tid=\"dob\"\n\t\t\tuse:form={{ validations: ['required'] }}\n\t\t\t/>\n\t\t\t{#if errors.dob}\n\t\t\t\t<small>{errors.dob}</small>\n\t\t\t{/if}\n\t\t</label>\n\t\t<label for=\"supper_time\">\n\t\t\tSupper time:\n\t\t\t<input\n\t\t\t\ttype=\"time\"\n\t\t\t\tname=\"supper_time\"\n\t\t\t\tid=\"supper_time\"\n\t\t\t\tuse:form={{ validations: ['required'] }}\n\t\t\t/>\n\t\t\t{#if errors.supper_time}\n\t\t\t\t<small>{errors.supper_time}</small>\n\t\t\t{/if}\n\t\t</label>\n\t\t<label for=\"password\">\n\t\t\tPassword:\n\t\t\t<input\n\t\t\t\ttype=\"password\"\n\t\t\t\tname=\"password\"\n\t\t\t\tid=\"password\"\n\t\t\t\tuse:form={{ validations: ['required'] }}\n\t\t\t/>\n\t\t\t{#if errors.password}\n\t\t\t\t<small>{errors.password}</small>\n\t\t\t{/if}\n\t\t</label>\n\t\t<label for=\"gender\">\n\t\t\tGender:\n\t\t\t<select\n\t\t\t\tname=\"gender\"\n\t\t\t\tid=\"gender\"\n\t\t\t\tuse:form={{ validateEvent: 'change', validations: ['required'] }}\n\t\t\t>\n\t\t\t\t<option value=\"\">Select gender</option>\n\t\t\t\t<option value=\"M\">Male</option>\n\t\t\t\t<option value=\"F\">Female</option>\n\t\t\t</select>\n\t\t\t{#if errors.gender}\n\t\t\t\t<small>{errors.gender}</small>\n\t\t\t{/if}\n\t\t</label>\n\t\t<label for=\"email\">\n\t\t\tEmail:\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tname=\"email\"\n\t\t\t\tid=\"email\"\n\t\t\t\tuse:form={{ validations: ['required', 'email'] }}\n\t\t\t/>\n\t\t\t{#if errors.email}\n\t\t\t\t<small>{errors.email}</small>\n\t\t\t{/if}\n\t\t</label>\n        <label for=\"resume\">\n\t\t\tResume:\n\t\t\t<input\n\t\t\t\ttype=\"file\"\n\t\t\t\tname=\"resume\"\n\t\t\t\tid=\"resume\"\n\t\t\t\tuse:form={{\n\t\t\t\t\tvalidateEvent:'change',\n\t\t\t\t\tvalidations: ['required', 'file-size-mb:3']\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t{#if errors.resume}\n\t\t\t\t<small>{errors.resume}</small>\n\t\t\t{/if}\n\t\t</label>\n\t\t<label for=\"comment\">\n\t\t\tComment:\n\t\t\t<textarea\n\t\t\tname=\"comment\"\n\t\t\tid=\"comment\"\n\t\t\tuse:form={{ validations: ['required'] }}\n\t\t\t></textarea>\n\t\t\t{#if errors.comment}\n\t\t\t\t<small>{errors.comment}</small>\n\t\t\t{/if}\n\t\t</label>\n\t\t<label for=\"beverage\">\n\t\t\tBeverage:\n\t\t\t{#each items as item (item.value)}\n\t\t\t\t<span>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\tname=\"beverage\"\n\t\t\t\t\t\tvalue={item.value}\n\t\t\t\t\t\tuse:form={{ validateEvent: 'input', validations: ['required'] }}\n\t\t\t\t\t\tbind:group={values.beverage}\n\t\t\t\t\t/>\n\t\t\t\t\t{item.label}\n\t\t\t\t</span>\n\t\t\t{/each}\n\t\t\t{#if errors.beverage}\n\t\t\t\t<small>{errors.beverage}</small>\n\t\t\t{/if}\n\t\t</label>\n\t\t<label for=\"favfoods\">\n\t\t\tFav Foods:\n\t\t\t{#each foods as item (item.value)}\n\t\t\t\t<span>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\tname=\"favfoods\"\n\t\t\t\t\t\tvalue={item.value}\n\t\t\t\t\t\tuse:form={{ validateEvent: 'change', validations: ['required'] }}\n\t\t\t\t\t\tbind:group={values['favfoods']}\n\t\t\t\t\t/>\n\t\t\t\t\t{item.label}\n\t\t\t\t</span>\n\t\t\t{/each}\n\t\t\t{#if errors.favfoods}\n\t\t\t\t<small>{errors.favfoods}</small>\n\t\t\t{/if}\n\t\t</label>\n\t\t<label for=\"story\">\n\t\t\tStory:\n\t\t\t<div\n\t\t\t\tcontenteditable=\"true\"\n\t\t\t\tuse:form={{\n\t\t\t\t \tvalidateEvent: 'input',\n\t\t\t\t\tvalidations: ['required'],\n\t\t\t\t\tname: 'story',\n\t\t\t\t\thtml: true\n\t\t\t\t}}\n\t\t\t></div>\n\t\t\t{#if errors.story}\n\t\t\t\t<small>{errors.story}</small>\n\t\t\t{/if}\n\t\t</label>\n\n        <button\n        type='submit'\n        disabled={!sanity.ok}>\n            Submit form\n        </button>\n    </form>\n```\n\nWhile the above example uses the `submit` action of `microform`, form could also be submitted by using the `onsubmit` function of `microform`. See the following:\n\n```html\n<form>\n\t<label for=\"password\">\n\t\tPassword:\n\t\t<input\n            type=\"text\"\n            name=\"password\"\n            id=\"password\"\n            use:form={{\n\t\t\t\tvalidations: ['required']\n            }}\n        />\n\t\t{#if errors.password}\n\t\t<small>{errors.password}</small>\n\t\t{/if}\n\t</label>\n\t<label for=\"confirm_password\">\n\t\tConfirm password:\n\t\t<input\n\t\t\ttype=\"text\"\n\t\t\tname=\"confirm_password\"\n\t\t\tid=\"confirm_password\"\n\t\t\tuse:form={{\n\t\t\t\tvalidations: ['required','match:password'],\n            }}\n\t\t/>\n\t\t{#if errors.confirm_password}\n\t\t<small>{errors.confirm_password}</small>\n\t\t{/if}\n\t</label>\n\n\t<button type=\"button\" disabled=\"{!sanity.ok}\" onclick=\"{onsubmit(onSubmit)}\">Submit form</button>\n</form>\n```\n\n## microform Features\n\n`microform` performs its magic by relying the `form` action. The `form` action can optionally accept the following:\n\n```ts\n<input\n\tuse:form={{\n\t\t// an optional list of validations\n\t\t// default is '' - no validations\n\t\tvalidations: ['email', 'len:20'],\n\t\t// an optional string of\n\t\t// any of blur, change, input, keyup.\n\t\t// default is blur\n\t\tvalidateEvent: 'input',\n\t\t// an optional string that allows passing field names\n\t\t// especially useful for contenteditables\n\t\t// that have no native name attribute\n\t\t// default is ''\n\t\tname: '',\n\t\t// an optional boolean indicating\n\t\t// whether content should be treated as plain text or html\n\t\t// also useful for contenteditables\n\t\t// default is false\n\t\thtml: true\n\t}}\n/>\n```\n\nYou need not bind the `values` to your fields except when there is a definite need for it as `form` will coordinate all value changes based on the `data` passed at instantiation, if any. Therefore, constructs like the following might not be neccessary:\n\n```html\n<input ... value=\"{values.email_account}\" />\n```\n\n### 1. Validations\n\n`validations` is an array of validations to check field values against for correctnes. Uses `validations` props on `form` action. For instance, the following:\n\n```html\n<input\n    type='text'\n    name='email_account'\n    id='email_account'\n    use:form={{\n        validations:[ 'required', 'email' ]\n    }}\n/>\n```\n\n### 2. Validation Event\n\nValidation event is to configure the event that should trigger validations. It can be changed/specified on a per-field basis. For instance, in our example, the global `validateEvent` was set to `blur` but we changed it on the select field to `change` like so:\n\n```html\n<select\n    name='gender'\n    id='gender'\n    use:form={{\n        validations:['required'],\n        validateEvent:'change'\n    }}>\n        <options value=''>Gender please</option>\n        <options value='F'>Female</option>\n        <options value='M'>Male</option>\n</select>\n```\n\n### 3. Supports for contenteditable\n\n`microform` supports `contenteditable` out-of-box:\n\n```html\n<form use:submit={onSubmit}>\n    <label for=\"story\">\n\tStory:\n        <div\n            contenteditable=\"true\"\n            use:form={{\n                validateEvent: 'input',\n                validations: ['required'],\n                name: 'story',\n                html: true\n            }}\n        ></div>\n        {#if errors.story}\n            <small>{errors.story}</small>\n        {/if}\n    </label>\n</form>\n```\n\n### 4. Provides usable default validations\n\n`microform` provides a set of usable validations out-of-box. The following is a list of provided validations:\n\n- `required`: Usage, `validations:['required']`\n- `email`: Usage, `validations:['email']`\n- `url`: Usage, `validations:['url']`\n- `ip`: Usage, `validations:['ip']`\n- `len:<number>`: Usage, `validations:['len:40']`\n- `number`: Usage, `validations:['number']`\n- `integer`: Usage, `validations:['integer']`\n- `alpha`: Usage, `validations:['alpha']` - only alphabets\n- `alphanum`: Usage, `validations:['alphanum']` - alphanumeric\n- `match:<input-id>`: Usage, `validations:['match:<id-of-field-to-match>']`. For instance, this is examplified in our example with `password` and `confirm_password` fields\n- `minlen:<number>`: Usage, `validations:['minlen:6']`\n- `maxlen:<number>`: Usage, `validations:['maxlen:15']`\n- `max:<number>`: Usage, `validations:['max:25']`\n- `file-size-mb:<number>`: Usage, `validations:['file-size-mb:30']` - for file upload\n\nEvery validation listed above also comes with a very good default error message.\n\nFinally, the validations can be combined to form a complex graph of validations based on use cases by combining them in a single array of validations. For instance, a required field that also should be an email field could be configured thus:\n\n```html\n<input\n\ttype=\"text\"\n\tname=\"email_account\"\n\tid=\"email_account\"\n    use:form={{\n        validations:['required','email']\n    }}\n/>\n```\n\n# Overriding validators\n\nValidators could be overriden to provide custom validation and/or messages besides the default ones. For instance, let us overide the `len` validation rule. Every non-empty string/message returned from a validator's call becomes the error to be displayed to the user; and it shows up in the `errors` keyed by the field name.\n\n### Approach 1\n\n```ts\n<script>\nimport uform, { type FieldProps } from \"@steveesamson/microform\";\n// default form data, probably passed as props\nexport let defaultData:any = {};\n\n// Instatiate microform\nconst { form, values, errors, submit, sanity } = uform({\n    // Set default form data\n    data:{...defaultData},\n    // Set a global event for validation, can be overriden on a each field.\n    // Possible values: blur, change, input, keyup\n    options:{\n        // Default event that triggers validation\n        validateEvent:'blur',\n        // Configure validators here\n        validators:{\n            len:({name, label, parts}:FieldProps) =>{\n                if (!parts || parts.length < 2) {\n                    return `${label}: length validation requires length.`;\n                }\n                const extra = parts[1].trim();\n                return !!value && value.length !== parseInt(parts[1], 10) ?  `${label} must exactly be ${extra} characters long.` : \"\";\n            }\n        }\n    }\n});\n</script>\n```\n\nInstead of using the literal validation keys like `len`, `required` etc., while overriding validators, the exported key namee could be used. The key names are:\n\n- IS_REQUIRED = `required`\n- IS_EMAIL = `email`\n- IS_URL = `url`\n- IS_IP = `ip`\n- IS_INTEGER = `integer`\n- IS_NUMBER = `number`\n- IS_ALPHA = `alpha`\n- IS_ALPHANUM = `alphanum`\n- IS_MIN_LEN = `minlen`\n- IS_MAX_LEN = `maxlen`\n- IS_LEN = `len`\n- IS_MIN = `min`\n- IS_MAX = `max`\n- IT_MATCHES = `match`\n- IS_FILE_SIZE_MB = `file-size-mb`\n\nTherefore, the following is equivalent to the configuration in `Approach 1`:\n\n### Approach 2\n\n```ts\n<script>\nimport uform, { type FieldProps, IS_LEN } from \"@steveesamson/microform\";\n// default form data, probably passed as props\nexport let defaultData:any = {};\n\n// Instatiate microform\nconst { form, values, errors, submit, sanity } = uform({\n    // Set default form data\n    data:{...defaultData},\n    // Set a global event for validation, can be overriden on a each field.\n    // Possible values: blur, change, input, keyup\n    options:{\n        // Default event that triggers validation\n        validateEvent:'blur',\n        // Configure validators here\n        validators:{\n            [IS_LEN]:({name, label, parts}:FieldProps) =>{\n                if (!parts || parts.length < 2) {\n                    return `${label}: length validation requires length.`;\n                }\n                const extra = parts[1].trim();\n                return !!value && value.length !== parseInt(parts[1], 10) ?  `${label} must exactly be ${extra} characters long.` : \"\";\n            }\n        }\n    }\n});\n</script>\n```\n\nThe validation will be used on the view as below:\n\n```html\n<input\n\ttype=\"text\"\n\tname=\"comment\"\n\tid=\"comment\"\n    use:form={{\n        validations:['required','len:30']\n    }}\n/>\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3652, 187],
		[3659, 32],
		[3666, 71],
		[3673, 23],
		[3687, 5],
		[3694, 11],
		[3701, 5],
		[3708, 1],
		[3715, 2],
		[3722, 9],
		[3729, 1],
		[3736, 1],
		[3743, 1],
		[3750, 7],
		[3757, 2],
		[3764, 246],
		[3771, 87],
		[3778, 47],
		[3785, 6],
		[3792, 2],
		[3799, 1],
		[3806, 8],
		[3813, 4],
		[3820, 2],
		[3827, 3],
		[3834, 39],
		[3841, 8],
		[3848, 2],
		[3855, 1],
		[3862, 14],
		[3869, 332],
		[3876, 5],
		[3883, 14],
		[3890, 6],
		[3897, 25],
		[3904, 10],
		[3911, 7],
		[3918, 5],
		[3925, 8],
		[3932, 4],
		[3939, 16],
		[3946, 13],
		[3953, 9],
		[3960, 9],
		[3967, 8],
		[3974, 1],
		[3981, 3],
		[3988, 1],
		[3995, 4],
		[4002, 6],
		[4009, 3],
		[4016, 12],
		[4023, 12],
		[4030, 2],
		[4037, 6],
		[4044, 14],
		[4051, 12],
		[4058, 19],
		[4065, 2],
		[4072, 1],
		[4086, 200],
		[4093, 48],
		[4100, 8],
		[4107, 11],
		[4114, 73],
		[4121, 11],
		[4128, 10]
	],
	"esm": true,
	"cjs": false
}
