{
	"name": "svelte5-router",
	"description": "Declarative Svelte routing library with SSR support.",
	"repo_url": "https://github.com/jpcutshall/svelte5-router",
	"authors": ["jpcutshall"],
	"homepage": "https://github.com/jpcutshall/svelte5-router",
	"downloads": 375,
	"updated": "2025-01-22T23:26:57.572Z",
	"tags": ["router"],
	"github_stars": 12,
	"typescript": true,
	"version": "3.0.2",
	"svelte_range": "^5.0.0",
	"last_rune_check_version": "3.0.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte5-router",
				"version": "3.0.2",
				"size": 55059
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "[![npm][npm]][npm-url]\r\n\r\n# Svelte5 Router\r\n\r\nForked from [svelte-routing](https://github.com/EmilTholin/svelte-routing)\r\n\r\nA declarative Svelte routing library with SSR support.\r\n\r\n[[CHANGELOG][changelog-url]]\r\n\r\n## Install\r\n\r\n```bash\r\nnpm i -D svelte5-router\r\n```\r\n\r\n## Usage\r\n\r\n```html\r\n<!-- App.svelte -->\r\n<script>\r\n  import { Router, Link, Route } from \"svelte5-router\";\r\n  import Home from \"./routes/Home.svelte\";\r\n  import About from \"./routes/About.svelte\";\r\n  import Blog from \"./routes/Blog.svelte\";\r\n\r\n  export let url = \"\";\r\n</script>\r\n\r\n<Router {url}>\r\n  <nav>\r\n    <Link to=\"/\">Home</Link>\r\n    <Link to=\"/about\">About</Link>\r\n    <Link to=\"/blog\">Blog</Link>\r\n  </nav>\r\n  <div>\r\n    <Route path=\"/blog/:id\" component={BlogPost} />\r\n    <Route path=\"/blog\" component={Blog} />\r\n    <Route path=\"/about\" component={About} />\r\n    <Route path=\"/\"><Home /></Route>\r\n  </div>\r\n</Router>\r\n```\r\n\r\n```javascript\r\n// main.js\r\nimport App from \"./App.svelte\";\r\nimport { mount } from \"svelte\";\r\n\r\nconst app = mount(App, {\r\n  target: document.getElementById(\"app\"),\r\n});\r\n```\r\n\r\n## API\r\n\r\n#### `Router`\r\n\r\nThe `Router` component supplies the `Link` and `Route` descendant components\r\nwith routing information through context, so you need at least one `Router` at\r\nthe top of your application. It assigns a score to all its `Route` descendants\r\nand picks the best match to render.\r\n\r\n`Router` components can also be nested to allow for seamless merging of many\r\nsmaller apps.\r\n\r\n###### Properties\r\n\r\n|     Property     | Required | Default Value | Description                                                                                                                                                                                                                                                                                                 |\r\n| :--------------: | :------: | :-----------: | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n|    `basepath`    |          |     `\"/\"`     | The `basepath` property will be added to all the `to` properties of `Link` descendants and to all `path` properties of `Route` descendants. This property can be ignored in most cases, but if you host your application on e.g. `https://example.com/my-site`, the `basepath` should be set to `/my-site`. |\r\n|      `url`       |          |     `\"\"`      | The `url` property is used in SSR to force the current URL of the application and will be used by all `Link` and `Route` descendants. A falsy value will be ignored by the `Router`, so it's enough to declare `let url = $state(\"\");` for your topmost component and only give it a value in SSR.          |\r\n| `viewtransition` |          |    `null`     | View Transition (Experimental)                                                                                                                                                                                                                                                                              |\r\n\r\n#### `Link`\r\n\r\nA component used to navigate around the application.\r\n\r\n###### Properties\r\n\r\n|     Property     | Required | Default Value | Description                                                                                                                                                                                                                           |\r\n| :--------------: | :------: | :-----------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\r\n|       `to`       |   ✔ ️   |     `\"#\"`     | URL the component should link to.                                                                                                                                                                                                     |\r\n|    `replace`     |          |    `false`    | When `true`, clicking the `Link` will replace the current entry in the history stack instead of adding a new one.                                                                                                                     |\r\n|     `state`      |          |     `{}`      | An object that will be pushed to the history stack when the `Link` is clicked.                                                                                                                                                        |\r\n|  ~~`getProps`~~  |          | `() => ({})`  | A function that returns an object that will be spread on the underlying anchor element's attributes. The first argument given to the function is an object with the properties `location`, `href`, `isPartiallyCurrent`, `isCurrent`. |\r\n| `preserveScroll` |          |    `false`    | When `true`, clicking the `Link` will not scroll the page to the top.                                                                                                                                                                 |\r\n\r\n#### `Route`\r\n\r\nA component that will render its `component` property or children when its\r\nancestor `Router` component decides it is the best match.\r\n\r\nAll properties other than `path` and `component` given to the `Route` will be\r\npassed to the rendered `component`.\r\n\r\nPotential path parameters will be passed to the rendered `component` as\r\nproperties. A wildcard `*` can be given a name with `*wildcardName` to pass the\r\nwildcard string as the `wildcardName` property instead of as the `*` property.\r\n\r\nPotential path parameters are passed back to the parent using props, so they can\r\nbe exposed to the children snippet.\r\n\r\n```html\r\n<Route path=\"/blog/:id\">\r\n  {#snippet children(params)}\r\n  <BlogPost id=\"{params.id}\" />\r\n  {/snippet}\r\n</Route>\r\n```\r\n\r\nThe active status of link can be exposed to the children snippet.\r\n\r\n```html\r\n<Link to=\"/browser\">\r\n  {#snippet children(active)}\r\n    <MenuItem active={active}>Browser</MenuItem>\r\n  {/snippet}\r\n</Link>\r\n```\r\n\r\n###### Properties\r\n\r\n|    Property     | Required | Default Value | Description                                                                                                                                                              |\r\n| :-------------: | :------: | :------------ | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\r\n|     `path`      |          | `\"\"`          | The path for when this component should be rendered. If no `path` is given the `Route` will act as the default that matches if no other `Route` in the `Router` matches. |\r\n| ~~`component`~~ |          | `null`        | The component constructor that will be used for rendering when the `Route` matches. If `component` is not set, the children of `Route` will be rendered instead.         |\r\n|   `children`    |   yes    |               | children passed inside the element. You can use the children snippet to access any url parameters `{#snippet children(params)}`                                          |\r\n\r\n#### `navigate`\r\n\r\nA function that allows you to imperatively navigate around the application for\r\nthose use cases where a `Link` component is not suitable, e.g. after submitting\r\na form.\r\n\r\nThe first argument is a string denoting where to navigate to, and the second\r\nargument is an object with a `replace`, `state` and `preserveScroll` properties equivalent to those\r\nin the `Link` component.\r\n\r\n```html\r\n<script>\r\n  import { navigate } from \"svelte5-router\";\r\n\r\n  function onSubmit() {\r\n    login().then(() => {\r\n      navigate(\"/success\", { replace: true });\r\n    });\r\n  }\r\n</script>\r\n```\r\n\r\n#### `listen`\r\n\r\nA function that allows you to listen to path changes made from `navigate`, `Link` and browser back button.\r\n\r\nThe argument supplied must be a function that receives a Location object. Use the returned function to unsubscribe the listener.\r\n\r\nThis function is meant to be used outside a Svelte component. The alternative function is `useLocation`, `useRouter` and `useHistory` where it uses Svelte context to retrieve location, router or history object.\r\n\r\n```js\r\nimport { listen as addListener } from 'svelte-routing';\r\n\r\nfunction init() {\r\n    addListener(({ location }) => {\r\n        console.log(location.pathname);\r\n    })\r\n}\r\n```\r\n\r\n#### `link`\r\n\r\nAn action used on anchor tags to navigate around the application. You can add an\r\nattribute `replace` to replace the current entry in the history stack instead of\r\nadding a new one and `preserveScroll` to not scroll the page to the top when clicked.\r\n\r\n```html\r\n<script>\r\n  import { link } from \"svelte5-router\";\r\n</script>\r\n\r\n<Router>\r\n  <a href=\"/\" use:link>Home</a>\r\n  <a href=\"/replace\" use:link replace>Replace this URL</a>\r\n  <!-- ... -->\r\n</Router>\r\n```\r\n\r\n#### `links`\r\n\r\nAn action used on a root element to make all relative anchor elements navigate\r\naround the application. You can add an attribute `replace` on any anchor to\r\nreplace the current entry in the history stack instead of adding a new one.\r\nYou can add an attribute `preserveScroll` on any anchor to not to scroll the page to the top when clicked. You\r\ncan add an attribute `noroute` for this action to skip over the anchor and allow\r\nit to use the native browser action.\r\n\r\n```html\r\n<!-- App.svelte -->\r\n<script>\r\n  import { links } from \"svelte5-router\";\r\n</script>\r\n\r\n<div use:links>\r\n  <Router>\r\n    <a href=\"/\">Home</a>\r\n    <a href=\"/replace\" replace>Replace this URL</a>\r\n    <a href=\"/native\" noroute>Use the native action</a>\r\n    <!-- ... -->\r\n  </Router>\r\n</div>\r\n```\r\n\r\n#### `viewtransition`\r\n\r\nViewtransition for navigation (Experimental).\r\n\r\n_`builtin transition`_\r\n\r\n```html\r\n<script>\r\n  import { fade } from \"svelte/transition\";\r\n  // ...\r\n</script>\r\n\r\n<Router viewtransition=\"{() => { fn: fade, duration: 500 }}\">\r\n  <Route path=\"/\" component=\"{Home}\" />\r\n  <Route path=\"/contact\" component=\"{Contact}\" />\r\n</Router>\r\n```\r\n\r\n_`custom transition`_\r\n\r\n```html\r\n<script>\r\n  import { cubicin } from \"svelte/easing\";\r\n  // ...\r\n</script>\r\n\r\n<Router\r\n  viewtransition=\"{() => { duration: 500, easing: cubicin, css: (t) => `scale:${t};transform-origin:center center;` }}\"\r\n>\r\n  <Route path=\"/\" component=\"{Home}\" />\r\n  <Route path=\"/contact\" component=\"{Contact}\" />\r\n</Router>\r\n```\r\n\r\n# License\r\n\r\nThis project is licensed under the [**MIT**](LICENSE).\r\n\r\n# Contribution\r\n\r\nUnless you explicitly state otherwise, any contribution intentionally submitted\r\nfor this project by you, shall be licensed as **MIT**, without any additional\r\nterms or conditions. [**Code of Conduct**](CODE_OF_CONDUCT.md).\r\n\r\n[npm]: https://img.shields.io/npm/v/svelte-routing.svg\r\n[npm-url]: https://npmjs.com/package/svelte5-router\r\n[changelog-url]: https://github.com/jpcutshall/svelte5-router/blob/master/CHANGELOG.md\r\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3974, 133],
		[3981, 30],
		[3988, 50],
		[3995, 123],
		[4002, 102],
		[4009, 21],
		[4016, 50],
		[4023, 126],
		[4030, 191],
		[4037, 274],
		[4044, 300],
		[4051, 291],
		[4058, 347],
		[4065, 236],
		[4072, 358],
		[4079, 226],
		[4086, 314],
		[4093, 432],
		[4100, 425],
		[4107, 348],
		[4114, 375],
		[4121, 273],
		[4128, 301],
		[4135, 176]
	]
}
