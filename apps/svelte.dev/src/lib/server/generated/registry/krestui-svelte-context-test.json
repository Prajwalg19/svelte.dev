{
	"name": "@krestui/svelte-context-test",
	"description": "Test Svelte components using context with getContext() API.",
	"repo_url": "https://github.com/krestui/svelte-context-test",
	"authors": ["hellokarthik"],
	"homepage": "https://github.com/krestui/svelte-context-test#readme",
	"downloads": 4,
	"updated": "2022-07-19T05:23:21.787Z",
	"tags": ["testing"],
	"github_stars": 0,
	"typescript": true,
	"version": "0.3.1",
	"svelte_range": "^3.49.0",
	"kit_range": "^1.0.0-next.379",
	"last_rune_check_version": "0.3.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@krestui/svelte-context-test",
				"version": "0.3.1",
				"size": 7260
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Svelte Context Test\n\n`@krestui/svelte-context-test` is a library to test components with svelte context, specifically `getContext()` API-s.\n\nsvelte framework provides and recommends `Context`s to share data between the parent and child components, .\n\nThis library helps to test Svelte Child Components that expect context values to be passed from a parent component.\n\n## Installation\n\n```sh\n$ npm install -D @krestui/svelte-context-test\n```\n\nIn case of yarn, do the following:\n\n```sh\n$ yarn add -D @krestui/svelte-context-test\n```\n\n## Example\n\nAssume 2 components - Parent and Child, that share data between each other through `Context`s , as below.\n\n`Child.svelte`\n\n```svelte\n<script lang=\"ts\">\n  import { getContext } from 'svelte';\n  import type { Writable } from 'svelte/store';\n\n  const groupStore: Writable<string> = getContext('ctx-key');\n</script>\n\n{$groupStore}\n```\n\nThe Child component expects context data through a key - `ctx-key` as mentioned above.\n\n`Parent.svelte`\n\n```svelte\n<script lang=\"ts\">\n  import { setContext } from 'svelte';\n  import { writable } from 'svelte/store';\n  import Child from './Child.svelte';\n\n  let groupStore = writable('');\n\n  setContext('ctx-key', groupStore);\n</script>\n\n<Child />\n```\n\nThe Parent component sets the `ctx-key` context key so the child component can pick it up.\n\nTo test the child component `Child.svelte` above (using jest or any other framework of your choice),we need to set the right context value for `ctx-key` .\n\nTrying to instantiate the child component directly through the `render` from `testing-library/svelte` will work, but not very useful since we cannot set the value of the context key `ctx-key` expected in the `Child` component.\n\n`Child-notuseful.test.ts`\n\n```typescript\nimport { render, fireEvent } from '@testing-library/svelte';\n\nimport Child from './Child.svelte';\n\ntest('renders the Child component', () => {\n  const { getByText } = render(Child);\n  // This will programmatically compile but useless\n  // since we cannot set the context key of 'ctx-key' to be tested better\n});\n```\n\nTo write better unit tests, we use this library `@krestui/svelte-context-test` as below.\n\n## Usage\n\nCreate a mixin helper component of `Child.svelte` as below, say `MockChild.svelte` that helps us set the context key attribute values, as below.\n\nUse the `ContextTest` component provided by this library to instantiate the `Child` component while setting the context key attribute values.\n\nSee below.\n\n`MockChild.svelte`\n\n```svelte\n<script lang=\"ts\">\n  import Child from '$lib/Child.svelte';\n  import { writable } from 'svelte/store';\n  import ContextTest, { type KeyValue } from '@krestui/svelte-context-test/ContextTest.svelte';\n  const keyValues: Array<KeyValue> = [{ key: 'ctx-key', value: writable('') } as KeyValue];\n</script>\n\n<ContextTest component={Child} {keyValues} />\n```\n\n`Child.test.ts`\n\n```typescript\nimport '@testing-library/jest-dom';\nimport { render } from '@testing-library/svelte';\nimport MockChild from './MockChild.svelte';\n\ntest('renders Child Component', () => {\n  const { getByText } = render(MockChild);\n});\n```\n\n### jest\n\nIf you are using `jest` freel free to add the following to `jest.config.cjs` in your project\n\njest.config.cjs\n\n```js\n  transformIgnorePatterns: [\n    '<rootDir>/node_modules/(?!(@krestui)/(svelte-context-test))'\n  ],\n```\n\nThe above will ensure that the `jest` runner is able to read `svelte` files from this package so the unit tests continue to pass.\n\n## License\n\nThe code is issued under MIT License.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 1],
		[3596, 6],
		[3603, 1],
		[3617, 3],
		[3624, 1],
		[3631, 1],
		[3638, 1],
		[3645, 4],
		[3652, 1],
		[3659, 1],
		[3666, 3],
		[3694, 1],
		[3701, 1],
		[3708, 1],
		[3715, 1],
		[3729, 2],
		[3743, 2],
		[3764, 1],
		[3771, 1],
		[3778, 1],
		[3792, 1],
		[3799, 1],
		[3806, 1],
		[3820, 1],
		[3834, 1],
		[3841, 11],
		[3862, 4],
		[3869, 1],
		[3883, 3],
		[3890, 5],
		[3897, 1],
		[3918, 2],
		[3932, 2],
		[3946, 2],
		[3967, 1],
		[3995, 1],
		[4016, 3],
		[4023, 5],
		[4030, 2],
		[4037, 1],
		[4044, 10],
		[4051, 2],
		[4058, 2],
		[4065, 1],
		[4072, 1],
		[4086, 1],
		[4093, 2],
		[4100, 5],
		[4107, 3],
		[4114, 4],
		[4121, 11],
		[4128, 2]
	],
	"esm": true,
	"cjs": false
}
