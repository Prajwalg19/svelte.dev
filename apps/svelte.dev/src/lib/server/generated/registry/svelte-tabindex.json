{
	"name": "svelte-tabindex",
	"description": "Manage tabindex for accessibility in Svelte apps.",
	"repo_url": "https://github.com/radiofrance/svelte-tabindex",
	"authors": ["romaindurand"],
	"homepage": "https://github.com/radiofrance/svelte-tabindex#readme",
	"downloads": 11,
	"updated": "2022-05-16T14:22:53.121Z",
	"tags": ["miscellaneous"],
	"github_stars": 0,
	"typescript": true,
	"version": "1.0.0",
	"svelte_range": "^3.44.0",
	"kit_range": "next",
	"last_rune_check_version": "1.0.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-tabindex",
				"version": "1.0.0",
				"size": 4571
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-tabindex\n\nA Svelte component for managing tabindex.\n\n## Installation\n\n`npm install svelte-tabindex`\n\n## How does it works ?\n\n`<NoTab>...</NoTab>` creates a reactive svelte context (using `writable`) so that its children can update their tabindex.\n\nEvery fousable element of your app (links, buttons, inputs ...) must get the context to implement this behaviour.\n\nThe context value is an object (`{ tabindex : Number }`) you can spread as node attribute to do so.\n\n## Usage\n\n**Link.svelte** _(a simple link wrapper that gets the svelte-tabindex context)_\n\n```html\n<script>\n  import { getContext } from 'svelte';\n  import { contextKey } from 'svelte-tabindex';\n\n  export let href = '';\n  let tabindexAttr = getContext(contextKey);\n</script>\n\n<a {href} {...$tabindexAttr}><slot /></a>\n```\n\n**App.svelte**\n\n```html\n<script>\n    import Link from './Link.svelte'\n    import { NoTab } from 'svelte-tabindex'\n</script>\n\n<Link href='/'>focusable link</Link>\n<NoTab>\n    <Link href='/'>non focusable link</Link>\n    <Link href='/'>another non focusable link</Link>\n</NoTab>\n<Link href='/'>another focusable link</Link>\n```\n\n## Advanced usage\n\n_(e.g. `src/routes/index.svelte`)_\n\n### `active` attribute\n\nThe `<NoTab>` component has an `active` (Boolean) attribute witch can be used to dynamically toggle its behaviour.\n\n### Nested NoTab contexts\n\nYour app may need to have nested untabble regions _(e.g. collapsible menu)_. In that case any active `<NoTab/>` ancestor will override the active state of any NoTab descendants. You can bypass this feature by using the `reset` attribute\n\n### `reset` attribute\n\nThe `<NoTab>` component has a `reset` attribute that allows you to ignore the state of any active ancestors. It can be used for modals, as the whole app would be wrapped in an active `<NoTab>` component, a modal component wrapped in its own `<NoTab reset>` would not inherit its active state from its ancestors.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 6],
		[3603, 5],
		[3610, 7],
		[3631, 1],
		[3659, 3],
		[3666, 7],
		[3673, 7],
		[3680, 1],
		[3687, 1],
		[3708, 7],
		[3715, 1],
		[3722, 2],
		[3729, 7],
		[3743, 2],
		[3757, 3],
		[3764, 3],
		[3771, 2],
		[3778, 7],
		[3785, 5],
		[3792, 15],
		[3799, 2],
		[3806, 2],
		[3813, 1],
		[3827, 1],
		[3834, 1],
		[3841, 1],
		[3848, 1],
		[3855, 26],
		[3862, 2],
		[3883, 2],
		[3890, 9],
		[3904, 6],
		[3911, 2],
		[3918, 1],
		[3925, 12],
		[3932, 16],
		[3939, 4],
		[3946, 6],
		[3953, 1],
		[3960, 4],
		[3967, 4],
		[3974, 1],
		[3981, 2],
		[3995, 3],
		[4009, 2],
		[4016, 5],
		[4023, 1],
		[4030, 5],
		[4037, 14],
		[4044, 6],
		[4051, 1],
		[4058, 2],
		[4065, 2],
		[4072, 3],
		[4079, 6],
		[4086, 1],
		[4093, 17],
		[4100, 12],
		[4107, 8],
		[4114, 11],
		[4121, 8],
		[4128, 11],
		[4135, 11]
	],
	"esm": true,
	"cjs": false
}
