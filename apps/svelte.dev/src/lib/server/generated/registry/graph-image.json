{
	"name": "graph-image",
	"description": "Provides advanced lazy-loading and compression for images in SvelteKit.",
	"repo_url": "https://github.com/ObieMunoz/graph-image",
	"authors": ["obiemunoz"],
	"homepage": "https://github.com/ObieMunoz/graph-image#readme",
	"downloads": 26,
	"updated": "2025-01-09T15:12:32.463Z",
	"tags": ["media"],
	"github_stars": 26,
	"typescript": true,
	"version": "1.0.1",
	"svelte_range": "^5",
	"kit_range": "^2.10.1",
	"last_rune_check_version": "1.0.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "graph-image",
				"version": "1.0.1",
				"size": 31382
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "![Graph Image](https://media.graphassets.com/auto_image/compress/fONBVATVKYm2eBRtzA76)\n\n# graph-image\n\nAdvanced Lazy-Loading and Compression with Svelte/SvelteKit and Hygraph\n\n[![npm version](https://img.shields.io/npm/v/graph-image)](https://npmjs.org/package/graph-image)\n[![downloads](https://img.shields.io/npm/dt/graph-image)](https://npmjs.org/package/graph-image)\n[![release status](https://img.shields.io/github/actions/workflow/status/obiemunoz/graph-image/.github%2Fworkflows%2Frelease.yml?logo=github&label=release)](https://github.com/ObieMunoz/graph-image/actions/workflows/release.yml)\n[![stars](https://img.shields.io/github/stars/obiemunoz/graph-image)](https://www.github.com/obiemunoz/graph-image)\n[![demo status](https://img.shields.io/website?up_message=operational&down_message=failure&url=https%3A%2F%2Fgraph-image.obiemunoz.com&label=demo)](https://graph-image.obiemunoz.com)\n[![npm bundle size](https://img.shields.io/bundlephobia/min/graph-image?color=51c829)](https://npmjs.org/package/graph-image)\n[![npm bundle size](https://img.shields.io/bundlephobia/minzip/graph-image?color=51c829)](https://npmjs.org/package/graph-image)\n\n[Demo](https://graph-image.obiemunoz.com) â€¢ [Obie Munoz](https://www.obiemunoz.com/)\n\n- Automatically resize images according to your design specifications\n- Dynamically serve .webp format where supported, ensuring modern compression techniques are utilized for faster load times\n- Generate device-specific variants to ensure optimal download size\n- Prioritize initial page speed and conserve bandwidth\n- Employ the 'blur-in' technique or a solid background for seamless image loading experiences\n- Prevent page layout jumps with consistent image positioning\n\n**Special thanks** to the creators and contributors of [@graphcms/react-image](https://npmjs.org/package/@graphcms/react-image) for the work in React this project was based on.\n\n## Quickstart\n\nHere's an example using a static asset object.\n\n```html\n<script>\n    import { GraphImage } from \"graph-image\";\n\n    const asset = {\n        handle: \"uQrLj1QRWKJnlQv1sEmC\",\n        width: 800,\n        height: 800\n    }\n</script>\n\n<GraphImage image={asset} maxWidth={800} />\n<GraphImage\n\ttitle=\"Example 2\"\n\talt=\"Example 2\"\n\timage={{ handle: asset.handle, width: 1920, height: 1080 }}\n\twithWebp\n\tmaxWidth={500}\n\tstyle={{\n\t\twidth: '500px',\n\t\tmargin: '32px 16px'\n\t}}\n/>\n```\n\n## Props\n\n| Name                | Type                                                              | Description                                                                                                                                                                                                                                                                                                                                                                                                    |\n| ------------------- | ----------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `image`             | `object`                                                          | An object of shape `{ handle, width, height }`. Handle is an identifier required to display the image and both `width` and `height` are required to display a correct placeholder and aspect ratio for the image. You can get all 3 by just putting all 3 in your image-getting query.                                                                                                                         |\n| `maxWidth`          | `number`                                                          | Maximum width you'd like your image to take up. (ex. If your image container is resizing dynamically up to a width of 1200, put it as a `maxWidth`)                                                                                                                                                                                                                                                            |\n| `fadeIn`            | `bool`                                                            | Do you want your image to fade in on load? Defaults to `true`                                                                                                                                                                                                                                                                                                                                                  |\n| `fit`               | `\"clip\"\\|\"crop\"\\|\"scale\"\\|\"max\"\\|\"center-contain\" (Experimental)` | When resizing the image, how would you like it to fit the new dimensions? Defaults to `crop`. You can read more about resizing [here](https://www.filestack.com/docs/api/processing/#resize). \"center-contain\" is experimental and will use 'clip' for the purposes for resizing.                                                                                                                              |\n| `withWebp`          | `bool`                                                            | If webp is supported by the browser, the images will be served with `.webp` extension. (Recommended)                                                                                                                                                                                                                                                                                                           |\n| `title`             | `string`                                                          | Passed to the `img` element                                                                                                                                                                                                                                                                                                                                                                                    |\n| `alt`               | `string`                                                          | Passed to the `img` element                                                                                                                                                                                                                                                                                                                                                                                    |\n| `style`             | `object`                                                          | Spread into the default styles in the wrapper div                                                                                                                                                                                                                                                                                                                                                              |\n| `position`          | `string`                                                          | Defaults to `relative`. Pass in `absolute` to make the component `absolute` positioned                                                                                                                                                                                                                                                                                                                         |\n| `blurryPlaceholder` | `bool`                                                            | Would you like to display a blurry placeholder for your loading image? Defaults to `true`.                                                                                                                                                                                                                                                                                                                     |\n| `backgroundColor`   | `string\\|bool`                                                    | Set a colored background placeholder. If true, uses \"lightgray\" for the color. You can also pass in any valid color string.                                                                                                                                                                                                                                                                                    |\n| `baseURI`           | `string`                                                          | Set the base src from where the images are requested. Base URI Defaults to `https://media.graphassets.com`                                                                                                                                                                                                                                                                                                     |\n| `quality`           | `number`                                                          | Set the image quality value between 1 & 100                                                                                                                                                                                                                                                                                                                                                                    |\n| `sharpen`           | `number`                                                          | Set the image sharpen value between 0 and 20                                                                                                                                                                                                                                                                                                                                                                   |\n| `rotate`            | `number`                                                          | Set the image rotation between 0 & 360 degrees                                                                                                                                                                                                                                                                                                                                                                 |\n| `watermark`         | `object`                                                          | An object of shape `{ handle, size, position }`. Handle is an identifier required to display the image. `size` is an optional `number`. `position` is required and can either be a `string` `HorizontalPosition` or a `tuple` of shape `[VerticalPosition, HorizontalPosition]` where `VerticalPosition` can be `'top' \\| 'middle' \\| 'bottom'` and `HorizontalPosition` can be `'left' \\| 'center' \\| 'right` |\n| `load`              | `\"lazy\"\\|\"eager\"`                                                 | To prioritize loading speed, set `load` to `eager`. This will place preload tags in the `<head>` and will remove transition effects. Defaults to `lazy`.                                                                                                                                                                                                                                                       |\n\n## Source and Image\n\nYou can also show the `Source` and `Image` components to show different images at different breakpoints.\n\n```html\n<script>\n\timport { Image, Source } from 'graph-image';\n</script>\n\n<picture>\n\t<source\n\t\thandle=\"uQrLj1QRWKJnlQv1sEmC\"\n\t\talt=\"Mobile Image\"\n\t\twidth=\"{768}\"\n\t\theight=\"{800}\"\n\t\tmedia=\"(max-width: 600px)\"\n\t/>\n\t<image handle=\"uQrLj1QRWKJnlQv1sEmC\" alt=\"Desktop Image\" width=\"{1920}\" height=\"{1800}\" />\n</picture>\n```\n\n### Preloading Source and Image\n\nYou can also Preload `Source` and `Image` components please note that because responsive preload has no notion of \"order\" or \"first match\", the media queries [will need to be translated](https://web.dev/articles/preload-responsive-images#preload_and_picture)\n\n```html\n<script>\n\timport { Image, Source } from 'graph-image';\n</script>\n\n<picture>\n\t<source\n\t\thandle=\"sdgegrrnlQvsd23vcl\"\n\t\talt=\"Mobile Image\"\n\t\twidth=\"{400}\"\n\t\theight=\"{400}\"\n\t\tmedia=\"(max-width: 400px)\"\n\t\tpreloadMedia=\"(max-width: 400px)\"\n\t/>\n\t<source\n\t\thandle=\"adWEFKJnlQvsda1s12e\"\n\t\talt=\"MD Image\"\n\t\twidth=\"{768}\"\n\t\theight=\"{800}\"\n\t\tmedia=\"(max-width: 800px)\"\n\t\tpreloadMedia=\"(min-width: 400.1px and (max-width: 800px)\"\n\t/>\n\t<image\n\t\thandle=\"uQrLj1QRWKJnlQv1sEmC\"\n\t\talt=\"Desktop Image\"\n\t\twidth=\"{1920}\"\n\t\theight=\"{1800}\"\n\t\tloading=\"eager\"\n\t\tmedia=\"(min-width: 800.1px)\"\n\t/>\n</picture>\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 234],
		[3596, 105],
		[3603, 21],
		[3610, 11],
		[3617, 5],
		[3624, 138],
		[3631, 91],
		[3638, 8],
		[3645, 11],
		[3652, 13],
		[3659, 13],
		[3666, 30],
		[3673, 102],
		[3680, 4],
		[3687, 62],
		[3694, 31],
		[3708, 9],
		[3715, 7],
		[3722, 9],
		[3729, 8],
		[3736, 2],
		[3743, 11],
		[3750, 5],
		[3757, 66],
		[3764, 12],
		[3771, 11],
		[3778, 16],
		[3785, 64],
		[3792, 2],
		[3799, 1],
		[3806, 9],
		[3813, 3],
		[3834, 33],
		[3841, 54],
		[3848, 2],
		[3855, 10],
		[3862, 2],
		[3869, 3],
		[3876, 2],
		[3883, 9],
		[3890, 20],
		[3897, 13],
		[3904, 3],
		[3911, 2],
		[3918, 2],
		[3932, 30],
		[3939, 32],
		[3946, 38],
		[3953, 15],
		[3960, 12],
		[3967, 6],
		[3974, 9],
		[3981, 21],
		[3995, 74],
		[4002, 31],
		[4009, 9],
		[4016, 16],
		[4023, 123],
		[4030, 43],
		[4037, 32],
		[4044, 42],
		[4051, 22],
		[4058, 11],
		[4065, 17],
		[4072, 13],
		[4079, 9],
		[4086, 14],
		[4093, 30],
		[4100, 10],
		[4107, 11],
		[4114, 26],
		[4121, 24],
		[4128, 9]
	],
	"esm": true,
	"cjs": false
}
