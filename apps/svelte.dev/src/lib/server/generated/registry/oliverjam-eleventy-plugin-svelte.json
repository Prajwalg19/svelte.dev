{
	"name": "@oliverjam/eleventy-plugin-svelte",
	"description": "Use Svelte components as Eleventy templates.",
	"repo_url": "https://github.com/oliverjam/eleventy-plugin-svelte",
	"authors": ["oliverjam"],
	"homepage": "https://github.com/oliverjam/eleventy-plugin-svelte#readme",
	"downloads": 7,
	"updated": "2020-08-15T18:34:33.677Z",
	"tags": ["tooling"],
	"github_stars": 24,
	"typescript": false,
	"version": "2.0.1",
	"svelte_range": "^3.24.1",
	"last_rune_check_version": "2.0.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@oliverjam/eleventy-plugin-svelte",
				"version": "2.0.1",
				"size": 6427
			},
			{
				"name": "svelte",
				"version": "3.59.2",
				"size": 10624206
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# Eleventy Plugin Svelte\n\nUse Svelte to write Eleventy templates. Get all the benefits of Svelte's great developer-experience, including a nice templating language and same-file scoped CSS, but for your static websites.\n\n⚠️ **Very much a work in progress** ⚠️\n\n## Installation\n\n```sh\nnpm install @oliverjam/eleventy-plugin-svelte\n```\n\n- Requires Eleventy `0.11.0` or newer\n- Requires `ELEVENTY_EXPERIMENTAL=true` to be set before you run the `eleventy` build (so we can use [Custom File Extension Handlers](https://github.com/11ty/eleventy/issues/117))\n\n## Usage\n\nSee the `example/` directory for a full code sample.\n\nFirst add install this plugin, then import it and add it to your config in `.eleventy.js`.\n\n```js\nconst pluginSvelte = require(\"@oliverjam/eleventy-plugin-svelte\");\nmodule.exports = (eleventyConfig) => {\n  eleventyConfig.addPlugin(pluginSvelte);\n};\n```\n\nWrite your page templates as Svelte components. Whatever HTML the component renders will be used as the contents of the template.\n\nSet Eleventy data (e.g. layouts) using [Svelte's `<script context=\"module\">`](https://github.com/11ty/eleventy/issues/117).\n\n```svelte\n<!-- index.svelte -->\n<script context=\"module\">\n  export const data = { layout: \"layouts/base.njk\" };\n</script>\n\n<h1>Hello world</h1>\n```\n\nThis plugin will extract any CSS from the component's `<style>` tags and any head contents from its `<svelte:head>` tags. These are made available for you to use in layouts via Eleventy filters named: `getSvelteCssForPage` and `getSvelteHeadForPage`. For example:\n\n```njk\n<!-- _includes/layouts/base.njk -->\n<!doctype html>\n<html>\n  <head>\n    <style>\n    {{page.url | getSvelteCssForPage}}\n    </style>\n    {{page.url | getSvelteHeadForPage | safe}}\n  </head>\n  <body>\n    {{content | safe}}\n  </body>\n</html>\n```\n\n### Svelte data cascade\n\nYour Svelte components can access all Eleventy data via props. Export the keys you want to access in a script tag.\n\n```svelte\n<!-- index.svelte -->\n<script>\n  export collections;\n</script>\n\n<ul>\n  {#each collections.blog as post}\n    <li>{post.data.title}</li>\n  {/each}\n</ul>\n```\n\n## Client-side components\n\nCurrently this plugin does not produce any client-side JS. Your Svelte components are rendered to static HTML & CSS only. Optional client-side hydration will (hopefully) be added in a future version when I can figure out Rollup.\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 1],
		[3596, 8],
		[3603, 2],
		[3617, 1],
		[3645, 5],
		[3652, 3],
		[3659, 2],
		[3666, 4],
		[3673, 1],
		[3694, 1],
		[3708, 1],
		[3715, 2],
		[3729, 1],
		[3743, 2],
		[3750, 2],
		[3764, 7],
		[3778, 2],
		[3785, 1],
		[3792, 1],
		[3799, 2],
		[3806, 1],
		[3813, 1],
		[3820, 1],
		[3834, 2],
		[3841, 3],
		[3862, 21],
		[3869, 1],
		[3883, 2],
		[3890, 7],
		[3904, 3],
		[3918, 2],
		[3932, 3],
		[3939, 2],
		[3953, 1],
		[3967, 1],
		[3995, 1],
		[4016, 3],
		[4023, 4],
		[4030, 9],
		[4037, 2],
		[4044, 8],
		[4051, 1],
		[4058, 1],
		[4065, 1],
		[4072, 1],
		[4093, 21],
		[4100, 1],
		[4107, 1],
		[4114, 7],
		[4121, 10],
		[4128, 9]
	]
}
