{
	"name": "svelte-fomantic-ui",
	"description": "Fomantic UI wrapper for Svelte, creating client-side web apps.",
	"repo_url": "https://github.com/roycdaviesuoa/svelte-fomantic-ui",
	"authors": ["roycdavies"],
	"homepage": "http://roycdaviesuoa.github.io/",
	"downloads": 37,
	"updated": "2025-02-01T07:54:50.188Z",
	"tags": ["ui"],
	"github_stars": 4,
	"typescript": true,
	"version": "0.3.9",
	"svelte_range": "^5.19.6",
	"last_rune_check_version": "0.3.9",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-fomantic-ui",
				"version": "0.3.9",
				"size": 5624272
			},
			{
				"name": "@sveltejs/vite-plugin-svelte",
				"version": "5.0.3",
				"size": 126450
			},
			{
				"name": "debug",
				"version": "4.4.0",
				"size": 42798
			},
			{
				"name": "ms",
				"version": "2.1.3",
				"size": 6721
			},
			{
				"name": "kleur",
				"version": "4.1.5",
				"size": 20250
			},
			{
				"name": "vitefu",
				"version": "1.0.6",
				"size": 21035
			},
			{
				"name": "deepmerge",
				"version": "4.3.1",
				"size": 31157
			},
			{
				"name": "magic-string",
				"version": "0.30.17",
				"size": 467464
			},
			{
				"name": "@jridgewell/sourcemap-codec",
				"version": "1.5.0",
				"size": 112815
			},
			{
				"name": "@sveltejs/vite-plugin-svelte-inspector",
				"version": "4.0.1",
				"size": 25886
			},
			{
				"name": "browser-polyfill",
				"version": "3.20.2"
			},
			{
				"name": "svelte-preprocess",
				"version": "6.0.3",
				"size": 97158
			},
			{
				"name": "svelte-prism",
				"version": "1.1.6",
				"size": 5889
			},
			{
				"name": "prism-svelte",
				"version": "0.4.7",
				"size": 6075
			},
			{
				"name": "prismjs",
				"version": "1.30.0",
				"size": 2052735
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[1, 4],
			[1, 5],
			[1, 6],
			[1, 7],
			[7, 8],
			[1, 9],
			[9, 2],
			[0, 10],
			[0, 11],
			[0, 12],
			[12, 13],
			[12, 14]
		],
		"circular": []
	},
	"readme": "# Svelte Fomantic UI Wrapper for Client-Side WebApps\n\n### This is now at late Beta stage.  The code is proving robust according to the testing done so far.\n### Feel free to use cautiously in projects, and please give feedback.\n### Latest update (31st of January, 2025): We're almost there...  Search and Ad need testing, and then onto behaviors...\n----\n\nA simple Svelte wrapper for Fomantic UI for creating client-side WebApps.  Note that this does not (yet) work with Server Side Rendering.  This is a very shallow and light layer on top of the standard fomantic UI as found at https://fomantic-ui.com.\n\n----\n## Progress\n\nI am working on this daily, so check back often.  However, my day job and family do sometimes get in the way of progress... \n[Click here to check on progress so far](https://github.com/roycdaviesuoa/svelte-fomantic-ui)\n\nLatest update: Recently updated for the latest svelte, jquery and fomanticui.  See installation instructions below.\n\n## Overview\n\nThe majority of the elements, collections, views and modules are wrapped in a single layer, with props used to represent the primary fomantic-ui element.  For example:\n\n```html\n<button class=\"ui primary button\">\n    Save\n</button>\n<button class=\"ui button\">\n    Discard\n</button>\n```\n\nWould be written as:\n\n```html\n<Button ui primary>\n    Save\n</Button>\n<Button ui>\n    Discard\n</Button>\n```\n\nAs can be seem from the example, the props contains the classes that would be used by fomantic-ui, except the main class, in this case `button`.\n\nMore complex structures are similarly translated, for example:\n\n```html\n<div class=\"ui labeled button\">\n    <div class=\"ui button\">\n        <i class=\"heart icon\"></i> Like\n    </div>\n    <a class=\"ui basic label\">\n        2,048\n    </a>\n</div>\n```\n\nbecomes:\n\n```html\n<Button ui labeled>\n    <Button ui>\n        <Icon heart/> Like\n    </Button>\n    <Link ui basic>\n        2,048\n    </Link>\n</Button>\n```\n\nSometimes, you might want to send some Fomantic UI classes as text, in which case use the underscore prop, for example:\n```html\n<Buttons ui icon>\n    {#each items as item}\n        <Button ui name={item} green={item === selected} on:click={processClick}>\n            <Icon align _={item}/>\n        </Button>\n    {/each}\n</Buttons>\n```\nwhere\n```javascript\nitems = [\"left\", \"center\", \"right\", \"justify\"];\n```\n\nInteraction with an element and variables are achieved in the standard svelte way, using binding.  For example:\n\n```html\n<Button ui submit on:click={processForm} type=\"submit\" id=\"submit\">\n    Submit\n</Button>\n```\n\nbinds the click event to the function `processForm` in the `script` section such as:\n\n```javascript\nfunction processForm (e)\n{\n    console.log(e.detail);\n}\n```\n\nwhere `e` is the event and `e.detail` contains information about the event that has occurred in the form of:\n\n```javascript\n{\n    \"id\": \"submit\",     // The id of the button (in this case, 'submit')\n    \"target\": { }       // The target object\n}\n```\n\nSimilarly, to get data from an input field, the following may be used:\n\n```html\n<Field>\n    <Label ui>First Name</Label>\n    <Input ui id=\"first-name\" placeholder=\"First Name\" bind:value={firstname}/>\n</Field>\n```\n\nwhich binds the value of the input to the variable `firstname`.  This means also that the default value shown in the input can be set by setting firstname to a default value.\n\nNote that the 'svelte-ised' versions can be mixed with the Fomantic UI class versions without problem, for example:\n```html\n<div class=\"ui field\">\n    <Label>First Name</Label>\n    <Input id=\"first-name\" placeholder=\"First Name\" bind:value={firstname}/>\n</div>\n```\n\nIt does make sense, however, to use the Svelte versions where events and variable binding are required as this is taken care of in the module.\n\n## Sending data\n\nOftentimes, a module will require some data to be sent, where each variable name is preceded by `data-`.  For convenience, these can be collected into one JSON object and sent as a data property.  For example:\n\n```html\n<Button ui data={{inverted : \"\", tooltip : \"Add users to your feed\", position : \"top left\"}}>\n    Top Left\n</Button>\n```\n\nis equivalent to:\n\n```html\n<Button ui data-inverted=\"\" data-tooltip=\"Add users to your feed\" data-position=\"top left\">\n    Top Left\n</Button>\n```\n\n## Installation\n\nThis has been packaged for installation with `yarn`, but should also work with `npm` (testing yet to be conducted).  Presently, you can install in the following way:\n\n1. First create your App Framework - here we are using vite to create a client-side webapp:\n\n```bash\nyarn create vite my-app --template svelte-ts\ncd my-app\nyarn\nyarn add svelte-fomantic-ui\n```\n\n2. Add the following lines to your index.html head section:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/jquery@3.7.1/dist/jquery.min.js\"></script>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/fomantic-ui@2.9.3/dist/semantic.min.css\">\n<script src=\"https://cdn.jsdelivr.net/npm/fomantic-ui@2.9.3/dist/semantic.min.js\"></script>\n<script type=\"module\" src=\"node_modules/svelte-fomantic-ui/src/lib/svelte-fomantic-ui-jquery.js\"></script>\n```\n\nNotice that JQuery is being included in this project as fomantic UI depends on it.  If you prefer, you can also include the jquery and fomantic / semantic ui css and js files locally and link to them there.\n\nIf you wish to use this without jQuery, only include lines 2 and 4 above.  This will use then solely the css part of Fomantic UI, together with some functionality coded in Svelte.  Note however, that most of the fomantic UI modules will not work, nor will anything that depends on jQuery (such as sorted tables).\n\n3. You can test the app using `yarn run dev` or build it using `yarn run build`.\n\n## Usage\n\nTo use fomantic UI in your project, import the required elements in the script section, and then use them in the html section below, for example:\n\n```html\n<script lang=\"ts\">\n    import { Button } from \"svelte-fomantic-ui\";\n</script>\n\n<Button ui simple red fluid>Hello World</Button>\n\n<style>\n</style>\n```\n\n## Modules\n\nMany of the Fomantic UI modules rely on javascript to work, and this in turn relies on JQuery, as mentioned above.  The sveltised versions wrap this in a simple format that removes the need to use JQuery in your Svelte code.  These modules, if used in ordinary Javascript, need to be initialized before they will work.  This is done automatically for you.  **These won't work without the lines above being included in your index.html head section.**\n\n### The `update` function\n\nTwo functions are supplied that enable the sending of behaviors and data to a module, and are imported from `svelte-fomantic-ui`.  The first is the `update` function:\n\n```html\n<script lang=\"ts\">\n    import { update, Embed, Button } from \"svelte-fomantic-ui\";\n</script>\n\n<Button ui fluid green attached top on:click={()=>update(\"vimeo1\")}>Enable</Button>\n<Embed ui id=\"vimeo1\" data={{source : \"vimeo\", id : \"125292332\", placeholder : \"/images/vimeo-example.jpg\"}}/>\n```\n\nThe update function above would be equivalent to using:\n\n```javascript\n$('#vimeo1').embed();\n```\n\nwith the HTML:\n\n```html\n<div id=\"vimeo1\" class=\"ui embed\" data-source=\"vimeo\" data-id=\"125292332\" data-placeholder=\"/images/vimeo-example.jpg\"></div>\n```\n\nNote that above we used the contraction of the `data` properties supplied as syntactic sugar.  The following are the same:\n\n```html\n<Embed ui id=\"vimeo1\" data={{source : \"vimeo\", id : \"125292332\", placeholder : \"/images/vimeo-example.jpg\"}}/>\n<Embed ui id=\"vimeo1\" data-source=\"vimeo\" data-id=\"125292332\" data-placeholder=\"/images/vimeo-example.jpg\"/>\n```\n\nWhich is also equivalent to using the update function with some settings:\n\n```javascript\nupdate(\"vimeo1\", {{source : \"vimeo\", id : \"125292332\", placeholder : \"/images/vimeo-example.jpg\"}});\n```\n\n### The `behavior` function\n\nThe second function is `behavior`, which can be used to both send behavior commands and data, and receive return values.\n\n```html\n<script lang=\"ts\">\n    import { update, behavior, Progress, Button, Label, Bar } from \"svelte-fomantic-ui\";\n</script>\n\n<Button ui blue fluid on:click={()=>{update(\"example1\"); example1_value = behavior(\"example1\", \"get percent\")}}>Update</Button>\n<Progress ui teal data-percent={74} id=\"example1\">\n    <Bar/>\n    <Label>{example1_value}% Funded</Label>\n</Progress>\n```\n\nBoth the `update` and `behavior` functions take one or more parameters, where the first parameter is always the `id` of the module.  The second parameter, if required, is usually the behavior, and subsequent parameters are the  parameters of that behavior.  For example `behavior(\"example1\", \"set percent\", 30)`.\n\nSometimes, the module can be sent settings on initialisation, for example - see the `Progress` module html below.  Settings are sent via the `settings` prop.  Similarly, some modules allow JSON settings to be sent when being updated, so the `update` function allows that possibility as well.\n\nNote that when defining the settings for a Fomantic UI element, callback functions won't execute in the context of the calling module.  See [this document](./Functions.md) for a way to set up such callbacks.\n\n```html\n<script lang=\"ts\">\n    import { update, behavior, Progress, Button, Label, Grid, Row, Column, Bar } from \"svelte-fomantic-ui\";\n</script>\n\n<Grid ui>\n    <Row two column>\n        <Column><Button ui green fluid on:click={()=>{update(\"example4\", {total: 3, value:0})}}>Reset</Button></Column>\n        <Column><Button ui orange fluid on:click={()=>{behavior(\"example4\", 'increment')}}>Increment</Button></Column>\n    </Row>\n</Grid>\n<Progress ui teal activate id=\"example4\" settings={{total: 3, value:0}}>\n    <Bar>\n        <Progress />\n    </Bar>\n    <Label>Adding Photos</Label>\n</Progress>\n```\n\n### The `reload` function\n\nThe third function is `reload`, which is useful when you need to re-initialize the javascript modules on a page, for example when changing a part of a page that is a svelte element which contains fomantic-ui modules:\n\n```html\n<script lang=\"ts\">\n    import { reload } from \"svelte-fomantic-ui\";\n    import { onMount } from 'svelte';\n    \n    onMount(() => { reload(); });\n</script>\n\n<Accordion ui>\n    <Title active>\n        <Icon dropdown/>\n        What is a dog?\n    </Title>\n    <Content active>\n        <p>A dog is a type of domesticated animal. Known for its loyalty and faithfulness, it can be found as a welcome guest in many households across the world.</p>\n    </Content>\n    <Title>\n        <Icon dropdown/>\n        What kinds of dogs are there?\n    </Title>\n    <Content>\n        <p>There are many breeds of dogs. Each breed varies in size and temperament. Owners often select a breed of dog that they find to be compatible with their own lifestyle and desires from a companion.</p>\n    </Content>\n    <Title>\n        <Icon dropdown/>\n        How do you acquire a dog?\n    </Title>\n    <Content>\n        <p>Three common ways for a prospective owner to acquire a dog is from pet shops, private owners, or shelters.</p>\n        <p>A pet shop may be the most convenient way to buy a dog. Buying a dog from a private owner allows you to assess the pedigree and upbringing of your dog before choosing to take it home. Lastly, finding your dog from a shelter, helps give a good home to a dog who may not find one so readily.</p>\n    </Content>\n</Accordion>\n```\n\nYou can also pass a string to the reload function that is the id of an element.  That object and all it's children are then reloaded.\n\n```html\n    reload(\"login_form\")\n```\n\n## Examples and testing\n\nThis project contains examples and tests.\n\n1. Clone the repository from GITHub.\n1. Change into the `svelte-fomantic-ui` sub directory.\n1. Run the `yarn` command to download dependencies.\n1. Run `yarn dev` to start development web server.\n1. Open the link in a browser to see the dev / test website (usually `http://localhost:5173`)\n\nIf you are looking for code examples, check in the `svelte-fomantic-ui/src/lib/tests` folder where the examples from the Fomantic UI website have been replicated for testing and documentation purposes.  Even if you don't wish to run the dev server as above, you can still see the worked code.  These are also linked to in the [progress README](https://github.com/roycdaviesuoa/svelte-fomantic-ui) in the `Test Link / Example Code` column\n\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 18],
		[3596, 22],
		[3603, 55],
		[3610, 50],
		[3617, 2],
		[3624, 9],
		[3631, 6],
		[3638, 1],
		[3645, 51],
		[3652, 15],
		[3659, 3],
		[3666, 51],
		[3673, 6],
		[3680, 6],
		[3687, 8],
		[3694, 10],
		[3701, 6],
		[3708, 1],
		[3715, 1],
		[3722, 4],
		[3729, 1],
		[3736, 5],
		[3750, 2],
		[3757, 6],
		[3764, 21],
		[3771, 52],
		[3778, 19],
		[3785, 2],
		[3792, 1],
		[3806, 7],
		[3813, 3],
		[3827, 4],
		[3834, 4],
		[3841, 242],
		[3848, 12],
		[3855, 7],
		[3862, 12],
		[3869, 11],
		[3876, 14],
		[3883, 7],
		[3890, 99],
		[3897, 56],
		[3904, 9],
		[3911, 9],
		[3918, 9],
		[3925, 5],
		[3932, 10],
		[3939, 5],
		[3946, 4],
		[3953, 132],
		[3960, 371],
		[3967, 345],
		[3974, 47],
		[3981, 4],
		[3988, 4],
		[3995, 3],
		[4002, 4],
		[4009, 53],
		[4016, 6],
		[4030, 52],
		[4037, 74],
		[4044, 304],
		[4051, 290],
		[4058, 83],
		[4065, 43],
		[4072, 45],
		[4079, 12],
		[4086, 8],
		[4093, 8],
		[4100, 53],
		[4107, 32],
		[4114, 37],
		[4121, 47],
		[4128, 27]
	],
	"esm": true,
	"cjs": false
}
