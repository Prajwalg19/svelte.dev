{
	"name": "svelte-resize-observer-action",
	"description": "Observe element resizes in Svelte applications.",
	"repo_url": "https://github.com/captaincodeman/svelte-resize-observer-action",
	"authors": ["captaincodeman"],
	"homepage": "https://captaincodeman.github.io/svelte-resize-observer-action/",
	"downloads": 577,
	"updated": "2024-04-29T20:09:13.892Z",
	"tags": ["miscellaneous"],
	"github_stars": 13,
	"typescript": true,
	"version": "0.0.4",
	"svelte_range": "^4.2.15",
	"kit_range": "^2.5.7",
	"last_rune_check_version": "0.0.4",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-resize-observer-action",
				"version": "0.0.4",
				"size": 7250
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-resize-observer-action\n\nSvelte use:action for element resize notifications using ResizeObserver.\n\nSmall. Efficient. SSR Friendly.\n\n## Purpose\n\nYou need to know when an Element changes size, as efficiently as possible, adding as few bytes to your project as possible.\n\nThe existing packages I looked at all had one or more issues:\n\n- Not SSR compatible. Likely developed before SvelteKit, when Svelte was primarily used for client-side components.\n- Used a Svelte Component as a wrapper. This adds unnecessary overhead and bytes to your bundle.\n- Included polyfills. Again, this adds extra unnecessary bytes and [ResizeObserver is now supported by all browsers](https://caniuse.com/resizeobserver) that matter.\n- Dispatch events. IMO this is also unnecessary and wasted bytes. A callback passed in to an action is simpler and more efficient.\n- Create a ResizeObserver instance per element. Slightly less efficient and a potential waste of runtime resources, especially if many elements need to be observed, vs using a single observer as intended.\n- Only provide simple (rounded) CSS pixel dimensions, not the [complete set of ResizeObserverEntry properties](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry).\n- Lack of TypeScript support.\n\nThis package is simple, fast and efficient. It is only 231 bytes minified, 195 bytes minified and gzipped. This is the built output, all it adds to your app:\n\n```js\nvar r=new WeakMap,s;function b(e,t){return s=s||new ResizeObserver(i=>{for(let l of i){let n=r.get(l.target);n&&n(l)}}),r.set(e,t),s.observe(e),{destroy(){s.unobserve(e),r.delete(e)}}}export{b as resize};\n```\n\n## Usage\n\nImport using your package manager of choice, e.g.:\n\n    pnpm i svelte-resize-observer-action\n\n### Within a Svelte Component\n\nImport and apply to your HTML element. Provide the function that will be called with the `ResizeObserverEntry` object.\n\n```svelte\n<script lang=\"ts\">\n  import { resize } from 'svelte-resize-observer-action'\n\n  let width: number\n  let height: number\n\n  function onResize(entry: ResizeObserverEntry) {\n    width = entry.contentRect.width\n    height = entry.contentRect.height\n  }\n</script>\n\n<div use:resize={onResize}>\n  {width}w x {height}h\n</div>\n```\n\n### Within another Svelte `use:action`\n\nImport inside your `use:action` module:\n\n```ts\nimport { resize } from 'svelte-resize-observer-action'\n```\n\nApply to the element passed in to your `use:action` and call the `destroy` method when your action is destroyed:\n\n```ts\ntype Render = (ctx: CanvasRenderingContext2D) => void\n\nexport function panzoom(canvas: HTMLCanvasElement, render: Render) {\n  const ctx = canvas.getContext('2d')!\n\n  // use resize action to watch element size\n  const resizeManager = resize(canvas, entry => {\n    // handle canvas size change and re-render\n    render(ctx)\n  })\n\n  // rest of use:action implementation\n\n  return {\n    destroy() {\n      // remember to call destroy when this action is destroyed\n      resizeManager.destroy()\n    },\n  }\n}\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 471],
		[3603, 427],
		[3610, 397],
		[3617, 568],
		[3624, 561],
		[3631, 834],
		[3638, 969],
		[3645, 535],
		[3652, 1018],
		[3659, 1401],
		[3666, 1462],
		[3673, 1143],
		[3680, 1034],
		[3687, 1642],
		[3694, 1786],
		[3701, 2169],
		[3708, 1450],
		[3715, 1515],
		[3722, 1579],
		[3729, 1710],
		[3736, 1110],
		[3743, 1169],
		[3750, 1486],
		[3757, 1343],
		[3764, 1798],
		[3771, 856],
		[3778, 399],
		[3785, 426],
		[3792, 562],
		[3799, 412],
		[3806, 456],
		[3813, 559],
		[3820, 457],
		[3827, 937],
		[3834, 1148],
		[3841, 617],
		[3848, 573],
		[3855, 316],
		[3862, 787],
		[3869, 1810],
		[3876, 3411],
		[3883, 1926],
		[3890, 3526],
		[3897, 3056],
		[3904, 2786],
		[3911, 2627],
		[3918, 3201],
		[3925, 4473],
		[3932, 5642],
		[3939, 6212],
		[3946, 3271],
		[3953, 4523],
		[3960, 3269],
		[3967, 1782],
		[3974, 3109],
		[3981, 4251],
		[3988, 2847],
		[3995, 2067],
		[4002, 1814],
		[4009, 693],
		[4016, 945],
		[4023, 1059],
		[4030, 897],
		[4037, 2297],
		[4044, 1055],
		[4051, 2053],
		[4058, 1512],
		[4065, 958],
		[4072, 1592],
		[4079, 753],
		[4086, 461],
		[4093, 634],
		[4100, 670],
		[4107, 532],
		[4114, 577],
		[4121, 459],
		[4128, 689],
		[4135, 309]
	],
	"esm": true,
	"cjs": false
}
