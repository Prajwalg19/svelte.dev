{
	"name": "@halo-lab/svelte-form-getform-io",
	"description": "Builds forms with validation for Svelte using Getform.",
	"repo_url": "https://github.com/Halo-Lab/svelte-form-getform-io",
	"authors": ["prostory", "halolab", "tyagun.aleksandr"],
	"homepage": "https://github.com/Halo-Lab/svelte-form-getform-io#readme",
	"downloads": 4,
	"updated": "2023-04-26T15:19:25.091Z",
	"tags": ["integration"],
	"github_stars": 0,
	"typescript": true,
	"version": "2.0.0",
	"svelte_range": "^3.54.0",
	"kit_range": "^1.5.0",
	"last_rune_check_version": "2.0.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@halo-lab/svelte-form-getform-io",
				"version": "2.0.0",
				"size": 45154
			},
			{
				"name": "axios",
				"version": "1.9.0",
				"size": 2155396
			},
			{
				"name": "follow-redirects",
				"version": "1.15.9",
				"size": 29918
			},
			{
				"name": "form-data",
				"version": "4.0.2",
				"size": 31836
			},
			{
				"name": "asynckit",
				"version": "0.4.0"
			},
			{
				"name": "combined-stream",
				"version": "1.0.8",
				"size": 11514
			},
			{
				"name": "delayed-stream",
				"version": "1.0.0"
			},
			{
				"name": "es-set-tostringtag",
				"version": "2.1.0",
				"size": 14544
			},
			{
				"name": "es-errors",
				"version": "1.3.0",
				"size": 12324
			},
			{
				"name": "get-intrinsic",
				"version": "1.3.0",
				"size": 46542
			},
			{
				"name": "call-bind-apply-helpers",
				"version": "1.0.2",
				"size": 15952
			},
			{
				"name": "function-bind",
				"version": "1.1.2",
				"size": 31427
			},
			{
				"name": "es-define-property",
				"version": "1.0.1",
				"size": 10217
			},
			{
				"name": "es-object-atoms",
				"version": "1.1.1",
				"size": 11442
			},
			{
				"name": "get-proto",
				"version": "1.0.1",
				"size": 10840
			},
			{
				"name": "dunder-proto",
				"version": "1.0.1",
				"size": 13003
			},
			{
				"name": "gopd",
				"version": "1.2.0",
				"size": 9869
			},
			{
				"name": "has-symbols",
				"version": "1.1.0",
				"size": 23409
			},
			{
				"name": "hasown",
				"version": "2.0.2",
				"size": 8765
			},
			{
				"name": "math-intrinsics",
				"version": "1.1.0",
				"size": 17323
			},
			{
				"name": "has-tostringtag",
				"version": "1.0.2",
				"size": 17603
			},
			{
				"name": "mime-types",
				"version": "2.1.35",
				"size": 18272
			},
			{
				"name": "mime-db",
				"version": "1.52.0",
				"size": 205539
			},
			{
				"name": "proxy-from-env",
				"version": "1.1.0",
				"size": 29452
			},
			{
				"name": "mime-match",
				"version": "1.0.2"
			},
			{
				"name": "wildcard",
				"version": "1.1.2"
			},
			{
				"name": "svelte-forms",
				"version": "2.3.1",
				"size": 21314
			},
			{
				"name": "is-promise",
				"version": "4.0.0",
				"size": 2958
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[1, 3],
			[3, 4],
			[3, 5],
			[5, 6],
			[3, 7],
			[7, 8],
			[7, 9],
			[9, 10],
			[10, 8],
			[10, 11],
			[9, 12],
			[9, 8],
			[9, 13],
			[13, 8],
			[9, 11],
			[9, 14],
			[14, 15],
			[15, 10],
			[15, 8],
			[15, 16],
			[14, 13],
			[9, 16],
			[9, 17],
			[9, 18],
			[18, 11],
			[9, 19],
			[7, 20],
			[20, 17],
			[7, 18],
			[3, 21],
			[21, 22],
			[1, 23],
			[0, 24],
			[24, 25],
			[0, 26],
			[26, 27]
		],
		"circular": []
	},
	"readme": "# @halo-lab/svelte-form-getform-io\n\nThis is a Svelte form component library, intended to be used with [Getform](https://getform.io/) and [svelte-forms](https://chainlist.github.io/svelte-forms). It provides a number of components (such as inputs, checkboxes, etc.) that intergrate with svelte-forms fields, a wrapper Form component that integrates with Getform, as well as helpful custom validators for svelte-forms.\n\n## Requirements\n- Svelte project ready to go\n- [Getform API key](https://getform.io/)\n\n## Installation\n\n```bash\nnpm install svelte-forms @halo-lab/svelte-form-getform-io\n```\n\n## Usage\n\n### Setting up svelte-forms\n\nTo create your form, you would first need to create all your svelte-forms fields. Our package provides 5 basic types of fields:\n- `TextField` - a regular text input or a textarea\n- `CheckboxField` - a checkbox\n- `RadioGroupField` - a radio button group\n- `SelectField` - a selection box with a search bar\n- `FileField` - a file input\n\nHere is how to initialize all of these types in svelete-forms:\n\n```svelte\n<script>\n  import type { TextField, CheckboxField, RadioGroupField, SelectField, FileField } from \"@halo-lab/svelte-form-getform-io\";\n  import { form, field } from 'svelte-forms';\n\n  const fieldName = field<TextField>('name', ''); // accepts a string as the initial value\n  const fieldTerms = field<CheckboxField>('terms', false); // accepts a boolean as the initial value\n  const fieldRadio = field<RadioGroupField>('radio', ''); // accepts a string (id of the selected option or empty) as the initial value\n  const fieldCategory = field<SelectField>('category', ''); // accepts a string (id of the selected option or empty) as the initial value\n  const fieldImages = field<FileField>('images', undefined); // accepts undefined as the initial value\n\n  const myForm = form(\n    fieldName, fieldTerms, fieldRadio, fieldCategory, fieldImages\n  );\n</script>\n```\n\nNotice that all of the fields are put into a single `form` function. This is a requirement of svelte-forms.\n\n\n### Setting up the form\n\nAfter you have created your fields, you can now create a form. To do this, you would need to import the `Form` component from our package and pass it your Getform API key and optionally the `onFormSubmit` callback function.\n\nInside the `Form` component, you can now pass all of your fields as props to the corresponding components. All of the components accept a `title` prop, which is the label of the field, a `field` prop, which binds the field to the component, as well as other props, which are specific to the component.\n\n```svelte\n<script>\n  // add this to your imports\n  import { Form, FormText, FormCheckbox, FormRadioGroup, FormSelect, FormFile } from \"@halo-lab/svelte-form-getform-io\";\n</script>\n\n<Form \n  getformId=\"your-getform-id\"\n  onFormSubmit={(data) => console.log(data.name, data.terms, data.category)}\n>\n  <FormText \n    title=\"Your Name\" \n    type=\"text\" \n    bind:field={$fieldName}\n  />\n  <FormCheckbox\n    title=\"I agree to the Terms of Service\"\n    bind:field={$fieldTerms}\n  />\n  <FormRadioGroup\n    title=\"Radio\"\n    groupId=\"radio\"\n    options={[\n        { id: 'first', label: 'First' },\n        { id: 'second', label: 'Second' },\n        { id: 'third', label: 'Third' }\n    ]}\n    bind:field={$fieldRadio}\n  />\n  <FormSelect\n    title=\"Category\"\n    options={[\n        { id: 'suggestions', label: 'Suggestions' },\n        { id: 'bugs', label: 'Bugs' },\n        { id: 'other', label: 'Other' },\n    ]}\n    bind:field={$fieldCategory}\n  />\n  <FormFile\n    title=\"Images\"\n    accept=\"image/*\"\n    multiple\n    description=\"Supported formates: JPEG, PNG, GIF, WEBP\"\n    bind:field={$fieldImages}\n  />\n</Form>\n```\n\n### Validation\n\nUsually, you would want to validate your form before submitting it. To do this, svelte-forms package provides a number of validators. Validators are functions that can be provided to the field as an array. Here's an example:\n\n```typescript\nconst fieldName = field<TextField>('name', '', [required(), max(32)]); // must not be empty and must not be shorter than 32 characters\n```\n\nOur package also provides a number of custom validators, which are:\n- `checked` - for validating checkboxes\n- `fileRequired` - for validating file inputs\n\n```typescript\n// add this to your imports\nimport { checked, fileRequired } from \"@halo-lab/svelte-form-getform-io/validators\";\n\nconst fieldTerms = field<CheckboxField>('terms', false, [checked()]); // must be checked\nconst fieldImages = field<FileField>('images', undefined, [fileRequired()]); // must have at least one file attached\n```\n\nAdditionally, you can create your own custom validators. More information on this can be found on the [official svelte-forms docs](https://chainlist.github.io/svelte-forms/#custom-validator).\n\n\n### Custom Error Messages\n\nBy default, when a UI component fails validation, it will display a generic error message. You can override the error message for each validator individually by passing it an object to the `errorText` prop of the component. Here's an example:\n\n```svelte\n<FormText \n  title=\"Your Name\" \n  type=\"text\" \n  bind:field={$fieldName}\n  errorText={{\n    required: 'This field is required', // this message will be displayed if the field is empty\n    max: 'This field must not be longer than 32 characters' // this message will be displayed if the name is too long\n    default: 'This field is invalid' // fallback message\n  }}\n/>\n```\n\n## Documentation\n\n### Components\n\n- `Form`\n\n  The base form component. It acts as a holder for all of the other components, such as inputs and checkboxes.\n\n  | Prop | Type | Description |\n  | --- | --- | --- |\n  | `getformId` | `string` | Getform API key |\n  | `onFormSubmit` | `(data: FormSubmitData) => void = ()` | Callback function to handle form submit |\n  | `globalClass` | `string = ''` | A custom class for the component. When styling, make sure to use the `:global` selector, as this is currently a limitation of how Svete scopes styles |\n\n- `FormText`\n\n  A text input component. You can use this components for simple inputs, emails or long messages.\n\n  | Prop | Type | Description |\n  | --- | --- | --- |\n  | `title` | `string` | Input title |\n  | `type` | `'text' | 'email' | 'message' = 'text'` | Input type. Defaults to `text` |\n  | `field` | `Field<TextField>` | svelte-forms field to bind the input to |\n  | `errorText` | `{ [key: string]: string } = {}` | Custom error messages for validators |\n  | `globalClass` | `string = ''` | A custom class for the component. When styling, make sure to use the `:global` selector, as this is currently a limitation of how Svete scopes styles |\n\n- `FormCheckbox`\n\n  A checkbox component.\n\n  | Prop | Type | Description |\n  | --- | --- | --- |\n  | `title` | `string` | Checkbox label |\n  | `field` | `Field<CheckboxField>` | svelte-forms field to bind the checkbox to |\n  | `errorText` | `{ [key: string]: string } = {}` | Custom error messages for validators |\n  | `globalClass` | `string = ''` | A custom class for the component. When styling, make sure to use the `:global` selector, as this is currently a limitation of how Svete scopes styles |\n\n- `FormRadioGroup`\n\n  A radio group components. You can use this component to let the user choose an option out of a few.\n\n  | Prop | Type | Description |\n  | --- | --- | --- |\n  | `title` | `string` | Radio group title |\n  | `groupId` | `string` | Radio group ID. This should be unique for every component |\n  | `options` | `RadioGroupOption[] = []` | Radio group options. An option is an object that contains `id` and `label` fields. Option ids must be unique relative to the component |\n  | `field` | `Field<RadioGroupField>` | svelte-forms field to bind the radio group to |\n  | `errorText` | `{ [key: string]: string } = {}` | Custom error messages for validators |\n  | `globalClass` | `string = ''` | A custom class for the component. When styling, make sure to use the `:global` selector, as this is currently a limitation of how Svete scopes styles |\n\n- `FormSelect`\n\n  A selection box with a search bar. You can use this component to let the user choose an option out of a large list.\n\n  | Prop | Type | Description |\n  | --- | --- | --- |\n  | `title` | `string` | Select title |\n  | `options` | `SelectOption[] = []` | Select options. An option is an object that contains `id` and `label` fields. Option ids must be unique relative to the component |\n  | `defaultText` | `string = 'Select an option'` | Text to display when no option is selected |\n  | `field` | `Field<SelectField>` | svelte-forms field to bind the select to |\n  | `errorText` | `{ [key: string]: string } = {}` | Custom error messages for validators |\n  | `globalClass` | `string = ''` | A custom class for the component. When styling, make sure to use the `:global` selector, as this is currently a limitation of how Svete scopes styles |\n\n- `FormFile`\n\n  A file input component with a dropzone and a list of selected files. It can be customized to accept multiple files and files of a specific type.\n\n  | Prop | Type | Description |\n  | --- | --- | --- |\n  | `title` | `string` | File input title |\n  | `description` | `string` | Text to display inside the dropzone. We recommend using this prop to specify the accepted file formats |\n  | `accept` | `string = '*'` | File formats to accept. Defaults to all formats |\n  | `multiple` | `boolean = false` | Whether to accept multiple files |\n  | `field` | `Field<FileField>` | svelte-forms field to bind the file input to |\n  | `errorText` | `{ [key: string]: string } = {}` | Custom error messages for validators |\n  | `globalClass` | `string = ''` | A custom class for the component. When styling, make sure to use the `:global` selector, as this is currently a limitation of how Svete scopes styles |\n\n\n### Field types\n\n- `TextField`\n  Data type for text inputs. It is a string.\n\n- `CheckboxField`\n  Data type for checkboxes. It is a boolean.\n\n- `RadioGroupField`\n  Data type for radio groups. It is a string.\n\n- `SelectField`\n  Data type for select boxes. It is a string.\n\n- `FileField`\n  Data type for file inputs. It can be undefined or an instance of an internal file list class.\n\n\n### Validators\n\nThese types should be imported from `@halo-lab/svelte-form-getform-io/validators`.\n\n- `checked`\n  This validator returns an error if the checkbox is not checked (another words, if the value is not `true`).\n\n- `fileRequired`\n  This validator returns an error if the file list is empty.\n\n\n### Other types\n\n- `FormSubmitData`\n\n  Data type for the `onFormSubmit` callback\n\n  ```typescript\n  {\n      name: string;\n      email: string;\n      message: string;\n  }\n  ```\n\n- `RadioGroupOption`\n\n  Data type for radio group options\n\n  ```typescript\n  {\n      id: string;\n      label: string;\n  }\n  ```\n\n- `SelectOption`\n\n  Data type for select options\n\n  ```typescript\n  {\n      id: string;\n      label: string;\n  }\n  ```\n\n## Word from the author\n\nHave fun ✌️\n\n<a href=\"https://www.halo-lab.com/?utm_source=github\">\n  <img\n    src=\"https://dgestran.sirv.com/Images/supported-by-halolab.png\"\n    alt=\"Supported by Halo lab\"\n    height=\"60\"\n  >\n</a>\n\n<img src=\"https://upload.wikimedia.org/wikipedia/en/9/9a/Trollface_non-free.png\" height=5>",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 4],
		[3596, 4],
		[3603, 4],
		[3624, 1],
		[3638, 2],
		[3652, 1],
		[3659, 2],
		[3666, 2],
		[3673, 1],
		[3701, 1],
		[3722, 1],
		[3743, 2],
		[3750, 1],
		[3757, 1],
		[3771, 1],
		[3778, 1],
		[3792, 2],
		[3799, 1],
		[3806, 1],
		[3820, 7],
		[3827, 1],
		[3834, 1],
		[3841, 10],
		[3848, 1],
		[3855, 4],
		[3862, 6],
		[3876, 1],
		[3883, 3],
		[3890, 1],
		[3897, 1],
		[3925, 1],
		[3932, 1],
		[3946, 1],
		[3974, 1],
		[4002, 1],
		[4016, 5],
		[4023, 2],
		[4030, 4],
		[4037, 4],
		[4044, 9],
		[4051, 3],
		[4058, 1],
		[4072, 1],
		[4086, 1],
		[4093, 2],
		[4100, 5],
		[4107, 2],
		[4114, 4],
		[4121, 4]
	],
	"esm": true,
	"cjs": false
}
