{
	"name": "svelte-redux-store",
	"description": "Integrate Redux store functionality into Svelte applications.",
	"repo_url": "https://github.com/vanzinvestor/svelte-redux-store",
	"authors": ["vanzinvestor"],
	"homepage": "https://github.com/vanzinvestor/svelte-redux-store",
	"downloads": 11,
	"updated": "2023-01-16T15:39:14.477Z",
	"tags": ["miscellaneous"],
	"github_stars": 2,
	"typescript": true,
	"version": "2.2.0",
	"svelte_range": "^3.52.0",
	"last_rune_check_version": "2.2.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-redux-store",
				"version": "2.2.0",
				"size": 162086
			},
			{
				"name": "redux",
				"version": "4.2.1",
				"size": 175632
			},
			{
				"name": "@babel/runtime",
				"version": "7.27.1",
				"size": 246647
			},
			{
				"name": "redux-thunk",
				"version": "2.4.2",
				"size": 32059
			},
			{
				"name": "svelte",
				"version": "3.59.2",
				"size": 10624206
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[0, 3],
			[0, 4]
		],
		"circular": []
	},
	"readme": "# Svelte Redux Store\r\n\r\nUse svelte with redux store. look like react-redux\r\n\r\n[![npm version](https://badge.fury.io/js/svelte-redux-store.svg)](https://badge.fury.io/js/svelte-redux-store)\r\n\r\n[Demo](https://stackblitz.com/edit/demo-svelte-redux-store?file=src%2FMain.svelte,src%2FApp.svelte)\r\n\r\n## Install\r\n\r\nInstall svelte-redux-store package\r\n\r\n```bash\r\nnpm install svelte-redux-store\r\n```\r\n\r\nInstall redux package\r\n\r\n```bash\r\nnpm install redux redux-devtools-extension redux-thunk\r\n```\r\n\r\n## Use\r\n\r\n### Step 1 Create store\r\n\r\n```ts\r\n// src/store/store.ts\r\nimport { applyMiddleware, createStore, type Middleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducers from './reducers';\r\nimport {\r\n  createUseEffect,\r\n  createUseLayoutEffect,\r\n  createUseState,\r\n  creatSvelteReduxStore,\r\n} from 'svelte-redux-store'; //import this line\r\n\r\nexport type AppState = ReturnType<typeof rootReducers>;\r\n\r\nconst initialState = {};\r\n\r\nconst middleware: Middleware[] = [thunk];\r\n\r\nconst devTools =\r\n  process.env.NODE_ENV === 'production'\r\n    ? applyMiddleware(...middleware)\r\n    : composeWithDevTools(applyMiddleware(...middleware));\r\n\r\nexport const store = createStore(rootReducers, initialState, devTools);\r\n\r\n/**\r\n * If you use <Provider> (version 2.0.0 or latest).\r\n * You can import { method } from 'svelte-redux-store';\r\n * You donâ€™t need to create svelte redux store\r\n */\r\n// create svelte redux store\r\nexport const {\r\n  useStore,\r\n  useDispatch,\r\n  useSelector,\r\n  useFeatureSelector,\r\n  useSubscribe,\r\n} = creatSvelteReduxStore<AppState>(store);\r\n\r\n// create useState (if you want)\r\nexport const { useState } = createUseState();\r\n// OR\r\n// import {useState} from 'svelte-redux-store';\r\n\r\n// create useEffect (if you want)\r\nexport const { useEffect } = createUseEffect();\r\n// OR\r\n// import {useEffect} from 'svelte-redux-store';\r\n\r\n// create useLayoutEffect (if you want)\r\nexport const { useLayoutEffect } = createUseLayoutEffect();\r\n// OR\r\n// import {useLayoutEffect} from 'svelte-redux-store';\r\n```\r\n\r\nRemark: If you use rollup.js. Please see note in below\r\n\r\n### Step 2 Wrapped component with `<Provider {store}></Provider>` _version 2.0.0 or latest_ (If you want)\r\n\r\n```svelte\r\n// src/Main.svelte\r\n<script lang=\"ts\">\r\n  import { Provider } from 'svelte-redux-store';\r\n  import App from './App.svelte';\r\n  import { store } from './store/store';\r\n</script>\r\n\r\n<Provider {store}>\r\n  <App />\r\n</Provider>\r\n```\r\n\r\n```ts\r\n// src/main.ts\r\nimport Main from './Main.svelte';\r\n\r\nconst main = new Main({\r\n  target: document.getElementById('app'), // vite\r\n  // target: document.body, // rollup\r\n});\r\n\r\nexport default main;\r\n```\r\n\r\n### Step 3 Create action type\r\n\r\n```ts\r\n// src/store/actions/counter.actions.ts\r\nexport enum CountActionTypes {\r\n  COUNTER_INCREMENT = '[Counter] Increment',\r\n  COUNTER_DECREMENT = '[Counter] Decrement',\r\n  COUNTER_RESET = '[Counter] Reset',\r\n}\r\n\r\nexport interface CounterIncrementAction {\r\n  readonly type: CountActionTypes.COUNTER_INCREMENT;\r\n}\r\n\r\nexport interface CounterDecrementAction {\r\n  readonly type: CountActionTypes.COUNTER_DECREMENT;\r\n}\r\n\r\nexport interface CounterResetAction {\r\n  readonly type: CountActionTypes.COUNTER_RESET;\r\n}\r\n\r\nexport type Action =\r\n  | CounterIncrementAction\r\n  | CounterDecrementAction\r\n  | CounterResetAction;\r\n```\r\n\r\n### Step 4 Create creator\r\n\r\n```ts\r\n// src/store/creators/counter.creators.ts\r\nimport type { Dispatch } from 'redux';\r\nimport { Action } from './../actions/counter.actions';\r\n\r\nexport const increment = () => async (dispatch: Dispatch<Action>) => {\r\n  dispatch({ type: CountActionTypes.COUNTER_INCREMENT });\r\n};\r\n\r\nexport const decrement = () => async (dispatch: Dispatch<Action>) => {\r\n  dispatch({ type: CountActionTypes.COUNTER_DECREMENT });\r\n};\r\n\r\nexport const reset = () => async (dispatch: Dispatch<Action>) => {\r\n  dispatch({ type: CountActionTypes.COUNTER_RESET });\r\n};\r\n```\r\n\r\n### Step 5 Create reducer\r\n\r\n```ts\r\n// src/store/reducers/counter.reducer.ts\r\nimport { Action, CountActionTypes } from './../actions/counter.actions';\r\n\r\ninterface CountState {\r\n  count: number;\r\n}\r\n\r\nconst initialCounterState: CountState = {\r\n  count: 0,\r\n};\r\n\r\nexport const counterReducer = (\r\n  state: CountState = initialCounterState,\r\n  action: Action\r\n): CountState => {\r\n  switch (action.type) {\r\n    case CountActionTypes.COUNTER_INCREMENT:\r\n      return { ...state, count: state.count + 1 };\r\n\r\n    case CountActionTypes.COUNTER_DECREMENT:\r\n      return { ...state, count: state.count - 1 };\r\n\r\n    case CountActionTypes.COUNTER_RESET:\r\n      return { ...state, count: 0 };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n```\r\n\r\n### Step 6 Create root reducer\r\n\r\n```ts\r\n// src/store/reducers/index.ts\r\nimport { combineReducers } from 'redux';\r\nimport { counterReducer } from './counter.reducer';\r\n\r\nconst rootReducers = combineReducers({\r\n  counts: counterReducer,\r\n});\r\n\r\nexport default rootReducers;\r\n```\r\n\r\n### Step 7 Use in components (App.svelte)\r\n\r\n```svelte\r\n// src/App.svelte\r\n<script lang=\"ts\">\r\n  /**\r\n  * If you use <Provider>.\r\n  * You can import { method } from 'svelte-redux-store';\r\n  */\r\n  import {\r\n     useDispatch,\r\n     useFeatureSelector,\r\n     useSelector,\r\n     useState,\r\n     useStore,\r\n     useSubscribe,\r\n     useEffect,\r\n     useLayoutEffect,\r\n   } from 'svelte-redux-store';\r\n  import { decrement, increment, reset } from './store/creators';\r\n  import {\r\n    // useDispatch,\r\n    // useFeatureSelector\r\n    // useEffect,\r\n    // useLayoutEffect,\r\n    // useSelector,\r\n    // useState,\r\n    // useStore,\r\n    // useSubscribe,\r\n    type AppState,\r\n  } from './store/store';\r\n\r\n  /**\r\n   * If used useStore import from 'svelte-redux-store'\r\n   * import { useStore } from 'svelte-redux-store';\r\n   */\r\n  const store = useStore<AppState>();\r\n\r\n  // const store = useStore();\r\n  const dispatch = useDispatch();\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const decrement = () => {\r\n    store.dispatch(decrement());\r\n    // dispatch(decrement());\r\n  };\r\n\r\n  const increment = () => {\r\n    store.dispatch(increment());\r\n    // dispatch(increment());\r\n  };\r\n\r\n  const count = store.selector((state: AppState) => state.count.count);\r\n\r\n  // const count = useSelector((state: AppState) => state.counts.count);\r\n\r\n  /**\r\n   * If used useFeatureSelector import from 'svelte-redux-store'\r\n   * import { useFeatureSelector } from 'svelte-redux-store';\r\n   */\r\n  // const counts = useFeatureSelector<AppState>('counts');\r\n\r\n  // const counts = useFeatureSelector('counts');\r\n\r\n  // let count:number\r\n  // store.subscribe((state:AppState) => { count = state.counts.count })\r\n\r\n  // let count:number\r\n  // useSubscribe((state:AppState) => { count = state.counts.count })\r\n\r\n\r\n  const handleClick = () => {\r\n    setIsOpen(!$isOpen);\r\n\r\n    if (!$isOpen && $count != 0) {\r\n      dispatch(reset());\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    alert('useEffect onMount');\r\n  }, []);\r\n\r\n  useLayoutEffect(() => {\r\n    alert('useLayoutEffect before DOM update')\r\n  }, []);\r\n\r\n  let value;\r\n\r\n  useEffect(() => {\r\n    if ($isOpen) {\r\n      value = $count * 2;\r\n    }\r\n  }, [isOpen, count]);\r\n</script>\r\n\r\n<div class=\"app\">\r\n  <div class=\"home\">\r\n    <h1>Svelte State Management With Redux</h1>\r\n    <div class=\"list\">\r\n      <div class=\"list-item\">\r\n        <p>Counter:</p>\r\n        <div class=\"btn-group\">\r\n          <button class=\"btn\" on:click={decrement}> - </button>\r\n          <!-- USE SELECTOR -->\r\n          <p>{$count}</p>\r\n          <!-- <p>{$counts.count}</p> -->\r\n          <!-- USE SUBSCRIBE -->\r\n          <!-- <p>{count}</p> -->\r\n          <button class=\"btn\" on:click={increment}> + </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <h1>useState</h1>\r\n    <div class=\"list\">\r\n      <div class=\"list-item\">\r\n        <button class=\"btn\" on:click={handleClick}>\r\n          {#if $isOpen}Close/Reset{:else}Show{/if}</button\r\n        >\r\n      </div>\r\n    </div>\r\n    <h1>useEffect</h1>\r\n    <div class=\"list\">\r\n      <div class=\"list-item\">\r\n        {#if $isOpen}\r\n          <h2>Value: {value}</h2>\r\n        {/if}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<style type=\"scss\">\r\n  .app {\r\n    display: flex;\r\n    justify-content: center;\r\n    margin-top: 50px;\r\n  }\r\n  .home {\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n  }\r\n\r\n  .list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-top: 20px;\r\n  }\r\n\r\n  .list-item {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    padding: 10px;\r\n  }\r\n\r\n  .btn-group {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    margin-left: 10px;\r\n  }\r\n\r\n  .btn-group p {\r\n    padding: 10px;\r\n  }\r\n\r\n  .btn {\r\n    padding: 5px 15px;\r\n    font-size: 1rem;\r\n    border: none;\r\n    outline: none;\r\n    background-color: #eee;\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n  }\r\n\r\n  .btn:hover {\r\n    background-color: #ccc;\r\n    transition: all 0.3 ease-in-out;\r\n  }\r\n\r\n  .btn:disabled {\r\n    background-color: #f2f2f2;\r\n    pointer-events: none;\r\n  }\r\n</style>\r\n```\r\n\r\n### Step 7 Install Redux DevTools Extension (Chrome Browser)\r\n\r\n[Redux DevTools](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd])\r\n\r\n### Step 8 Chrome Browser And Press F12 (Developer tools) and See Redux tab\r\n\r\n![Result](./svelte-redux-store-demo.png)\r\n\r\n## Example App\r\n\r\n[Counter App](https://github.com/vanzinvestor/example-svelte-redux-store-counter-app)\r\n\r\n## Note: Make svelte support Redux\r\n\r\nInstall replace package\r\n\r\n```bash\r\nnpm install @rollup/plugin-replace\r\n```\r\n\r\nChange `rollup.config.js`\r\n\r\n```js\r\n// rollup.config.js\r\nimport replace from '@rollup/plugin-replace'; // Import this\r\n\r\nexport default {\r\n  // ...\r\n  plugins: [\r\n    // ...\r\n    // Add this\r\n    replace({\r\n      preventAssignment: true,\r\n      'process.env.NODE_ENV': production\r\n        ? JSON.stringify('production')\r\n        : JSON.stringify('development'),\r\n    }),\r\n    // ...\r\n  ],\r\n  // ...\r\n};\r\n```\r\n\r\n## API\r\n\r\n[useStore](useStore)\r\n[useDispatch](useDispatch)\r\n[useSelector](useSelector)\r\n[useFeatureSelector](useFeatureSelector)\r\n[useSubscribe](useFeatureSelector)\r\n[useState](useState)\r\n[useEffect](useEffect)\r\n[useLayoutEffect](useLayoutEffect)\r\n\r\n## Contributing âœ¨\r\n\r\nInterested in contributing to this repo? Check out our and submit a PR for a new feature/bug fix.\r\n\r\nA big shoutout to all our contributors! You could be here too! âœ¨\r\n\r\n<a href=\"https://github.com/vanzinvestor/svelte-redux-store/graphs/contributors\">\r\n  <img src=\"https://contrib.rocks/image?repo=vanzinvestor/svelte-redux-store\" />\r\n</a>\r\n\r\n## Inspire by\r\n\r\n[react-redux](https://github.com/reduxjs/react-redux)\r\n[ngrx](https://github.com/ngrx/platform/tree/master/modules/store)\r\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 3],
		[3603, 19],
		[3610, 18],
		[3624, 6],
		[3638, 1],
		[3645, 19],
		[3652, 6],
		[3659, 1],
		[3666, 23],
		[3673, 2],
		[3680, 1],
		[3687, 3],
		[3694, 2],
		[3701, 3],
		[3708, 1],
		[3722, 1],
		[3729, 1],
		[3736, 1],
		[3743, 2],
		[3750, 4],
		[3757, 8],
		[3764, 9],
		[3771, 22],
		[3778, 1],
		[3785, 1],
		[3792, 2],
		[3799, 2],
		[3806, 3],
		[3820, 3],
		[3827, 2],
		[3834, 1],
		[3841, 93],
		[3848, 4],
		[3855, 26],
		[3862, 7],
		[3876, 2],
		[3883, 4],
		[3890, 41],
		[3897, 8],
		[3904, 22],
		[3911, 6],
		[3918, 8],
		[3925, 2],
		[3932, 2],
		[3946, 3],
		[3953, 3],
		[3960, 3],
		[3974, 6],
		[3995, 2],
		[4002, 22],
		[4009, 2],
		[4016, 4],
		[4023, 2],
		[4030, 2],
		[4037, 26],
		[4044, 16],
		[4051, 5],
		[4058, 1],
		[4065, 2],
		[4072, 4],
		[4079, 4],
		[4086, 1],
		[4100, 56],
		[4107, 7],
		[4114, 11],
		[4121, 19],
		[4128, 5]
	],
	"esm": false,
	"cjs": true
}
