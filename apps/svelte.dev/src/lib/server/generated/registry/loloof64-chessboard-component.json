{
	"name": "@loloof64/chessboard-component",
	"description": "Create chess board component for Svelte.",
	"repo_url": "https://github.com/loloof64/Chess-Board-Component-Sveltejs",
	"authors": ["loloof64"],
	"homepage": "https://github.com/loloof64/Chess-Board-Component-Sveltejs#readme",
	"downloads": 115,
	"updated": "2024-04-08T11:27:18.713Z",
	"tags": ["ui"],
	"github_stars": 0,
	"typescript": false,
	"version": "0.26.0",
	"svelte_range": "^3.49.0",
	"last_rune_check_version": "0.26.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@loloof64/chessboard-component",
				"version": "0.26.0",
				"size": 243785
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Chess board component\n\nA chess board web component\n\n## Component reference\n\nUsage\n\n* Run `npm init` if needed\n* Install the package with `npm i @loloof64/chessboard-component`\n* load the script from `node_modules/@loloof64/chessboard-component/dist` (just load it, as it will define the web component `loloof64-chessboard`).\n\n```javascript\n<loloof64-chessboard\n    size=\"300\"\n    background=\"crimson\"\n    coordinates_color=\"yellow\"\n    white_cell_color=\"navajowhite\"\n    black_cell_color=\"peru\"\n    reversed=\"true\"\n    origin_cell_color=\"red\"\n    target_cell_color=\"green\"\n    dnd_cross_color=\"purple\"\n    white_player_human=\"true\"\n    black_player_human=\"false\"\n    move_highlight_color=\"red\"\n    last_move_visible=\"false\"\n    coordinates_visible=\"false\"\n></loloof64-chessboard>\n```\n\n### Attributes\n\n| Name                   | Purpose                                                        | Type    | Default                    |\n|------------------------|----------------------------------------------------------------|---------|----------------------------|\n| size                   | Common size (width/height) of the board in pixels              | number  | 100.0                      |\n| background             | Background color of the board outside zone                     | string  | #124589                    |\n| coordinatesColor       | Color of the coordinates around the board                      | string  | yellow                 |\n| whiteCellColor         | Background color of the white cells of the board               | string  | navajowhite                  |\n| blackCellColor         | Background color of the black cells of the board               | string  | peru                      |\n| reversed               | Whether black side is on top or not                            | boolean | false                      |\n| origin_cell_color      | Color of the origin cell of the Drag and Drop                  | string  | crimson                    |\n| target_cell_color      | Color of the current target cell of the Drag and Drop          | string  | ForestGreen                |\n| dnd_cross_color        | Color of the Drag and Drop cross indicator                     | string  | DimGrey                    |\n| promotion_dialog_title | Title of the promotion selection dialog                        | string  | Select the promotion piece |\n| white_player_human     | True if the white player is human, false for external (1)      | boolean | true                       |\n| black_player_human     | True if the black player is human, false for external (1)      | boolean | true                       |\n| move_highlight_color   | Color of the last move highlight arrow                         | string  | CadetBlue                  |\n| coordinates_visible    | True if the coordinates should be visible, false otherwise     | boolean | true                       |\n| last_move_visible      | True if the last move arrow should be visible, false otherwise | boolean | true                       |                   |\n\n(1) External player means that, instead of playing its move with interaction on the board, call the method `playMove` in order to commit its move. A simple use case would be to let an engine play.\n\n### A little word of caution\n\nWhen chaining methods/events, you may experience some update issues. Indeed, often the cpu needs some time in order to update the component state. If you run into such issues, don't hesitate to use setTimeout with some milliseconds or hundreds of milliseconds\n\n### Methods\n\n* newGame(startPositionFen): Starts a new game with the given position in Forsyth-Edwards Notation. If the startPositionFen string is not given, will use the default chess start position.\n* isWhiteTurn() : Boolean. true if it is White turn, false otherwise.\n* getCurrentPosition(): String. Returns the current position in Forsyth-Edwards Notation.\n* playMove({startFile, startRank, endFile, endRank, promotion = 'q'}): Tries to play the given move on the component, only if the current player is defined as an external user. Returns a boolean, saying if the move has been commited or not. All coordinates, integers, start from 0 (file 0 = 'A', rank 0 = '1'). Valid promotion values are 'q', 'r', 'b' and 'n'.\n* playMoveSan(moveSan): Tries to play the given move SAN on the board, only if the current player is defined as an external user. Returns a boolean, saying if the move has been commited or not.\n* setPositionAndLastMove({positionFen, fromFileIndex, fromRankIndex, toFileIndex, toRankIndex}) : you can set up the position and last move arrow, ** if the game is not in progress ** (otherwise won't have any effect). Returns true if the position and last move could be set, false otherwise. If no parameter given or wrong values, then it will clear last move arrow and sets the board to the position before the first move. Particularly useful for history managers.\n* stop(): we stop the game.\n* gameIsInProgress(): returns a boolean telling us if the game is in progress, or no game is running.\n* gamePgn({whiteName, blackName}) : returns the game pgn as a string. Only sets white and black names if they are defined. Each missing field will be replaced by an empty string.\n\n### Events\n\n* checkmate : Informs that a checkmate has just happened on the board. The payload `detail.whiteTurnBeforeMove` of the event tells if the side that checkmated were White or Black.\n* stalemate : Informs that a stalemate has just happended on the board. No additional payload.\n* perpetual-draw: Informs that a 3-fold repetitions draw has just happened on the board. No additional payload.\n* missing-material-draw : Informs that a draw by missing material has just happened on the board. No additional payload.\n* fifty-moves-draw: Informs that a draw by the 50 moves rule has just happened on the board. No additional payload.\n* waiting-manual-move: Informs that the component has just landed in the 'waiting manual move' state. That means that the move for the current player has to be commited with a call to playMove() (and with a legal move of course, the only way to progress in the game). No additional payload, but you should call isWhiteTurn() and getCurrentPosition() as clues.\n* move-done: Informs that a move has happened on the board, whatever the way (human or external player). The payload `detail.moveObject` is an object with all the details : moveNumber, whiteTurn, moveFan, moveSan, fromFileIndex, fromRankIndex, toFileIndex, toRankIndex.\n\n## Developers\n\nYou can build with the command (in the terminal) `$ yarn build` from the root of the project. Result will be in the `dist` folder.\n\nBut don't forget first to install all dependencies, with NodeJS : `yarn`.\n\n## Credits\n\nPieces vectors definitions from CBurnett and found on [Wikimedia commons](https://commons.wikimedia.org/wiki/Category:SVG_chess_pieces).\n\nUsing [ChessJS library](https://github.com/jhlywa/chess.js), which is bundled in the produced script.\n\n## Acknowledgement\n\n* Wails creator and developpers, SvelteJs creator and developpers\n* A shot of code Youtube channel, for having posted [this short tutorial video](https://www.youtube.com/watch?time_continue=471&v=p3u5rdJH9BM&feature=emb_logo)\n* Contributors to SvelteJs discord server.",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 2],
		[3596, 60],
		[3617, 1],
		[3631, 5],
		[3638, 2],
		[3645, 67],
		[3652, 1],
		[3659, 1],
		[3666, 64],
		[3694, 1],
		[3708, 5],
		[3715, 2],
		[3729, 1],
		[3736, 2],
		[3743, 2],
		[3750, 123],
		[3757, 5],
		[3764, 32],
		[3771, 29],
		[3778, 1],
		[3799, 5],
		[3806, 2],
		[3820, 10],
		[3834, 7],
		[3841, 1],
		[3848, 6],
		[3855, 133],
		[3862, 280],
		[3869, 3],
		[3876, 3],
		[3883, 62],
		[3890, 3],
		[3897, 5],
		[3904, 2],
		[3911, 2],
		[3918, 32],
		[3925, 2],
		[3932, 7],
		[3939, 3],
		[3946, 5],
		[3953, 1],
		[3960, 4],
		[3967, 2],
		[3974, 4],
		[3981, 2],
		[3988, 1],
		[3995, 1],
		[4002, 2],
		[4009, 7],
		[4016, 67],
		[4023, 8],
		[4030, 6],
		[4037, 17],
		[4044, 41],
		[4051, 12],
		[4058, 2],
		[4072, 1],
		[4079, 59],
		[4093, 59],
		[4100, 118],
		[4107, 65],
		[4114, 115],
		[4121, 27],
		[4128, 25]
	]
}
