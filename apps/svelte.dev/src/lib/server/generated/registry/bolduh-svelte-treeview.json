{
	"name": "@bolduh/svelte-treeview",
	"description": "Create simple tree view component for Svelte applications.",
	"repo_url": "https://github.com/b3b00/svelte-treeview",
	"authors": ["bolduh"],
	"homepage": "https://github.com/b3b00/svelte-treeview",
	"downloads": 15,
	"updated": "2024-02-06T15:59:30.682Z",
	"tags": ["ui"],
	"github_stars": 1,
	"typescript": true,
	"version": "0.1.3",
	"svelte_range": "^3.32.3",
	"last_rune_check_version": "0.1.3",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@bolduh/svelte-treeview",
				"version": "0.1.3",
				"size": 33832
			},
			{
				"name": "sirv-cli",
				"version": "2.0.2",
				"size": 18393
			},
			{
				"name": "sade",
				"version": "1.8.1",
				"size": 31545
			},
			{
				"name": "mri",
				"version": "1.2.0",
				"size": 13261
			},
			{
				"name": "sirv",
				"version": "2.0.4",
				"size": 20745
			},
			{
				"name": "mrmime",
				"version": "2.0.1",
				"size": 33008
			},
			{
				"name": "totalist",
				"version": "3.0.1",
				"size": 7459
			},
			{
				"name": "@polka/url",
				"version": "1.0.0-next.29",
				"size": 4815
			},
			{
				"name": "kleur",
				"version": "4.1.5",
				"size": 20250
			},
			{
				"name": "semiver",
				"version": "1.1.0",
				"size": 5444
			},
			{
				"name": "get-port",
				"version": "3.2.0"
			},
			{
				"name": "tinydate",
				"version": "1.3.0",
				"size": 7410
			},
			{
				"name": "local-access",
				"version": "1.1.0",
				"size": 4960
			},
			{
				"name": "console-clear",
				"version": "1.1.1",
				"size": 2457
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[1, 4],
			[4, 5],
			[4, 6],
			[4, 7],
			[1, 8],
			[1, 9],
			[1, 10],
			[1, 11],
			[1, 12],
			[1, 13]
		],
		"circular": []
	},
	"legacy_svelte": true,
	"readme": "\n\n## demo\n\n[svelte-treeview](https://sveltetreeview.pages.dev/)\n\n\n## installation\n\n`npm i @bolduh/svelte-treeview`\n\n## usage\n\n```js\n<TreeView emptyTreeMessage=\"nothing to show\" selectable root={root} childrenAccessor={accessor} nodeTemplate={Node} filter={nodefilter} ></TreeView>\n```\n\nThe treeview display a tree data structure that must inherit from TVNode\n```ts\nexport interface TVNode {\n    children : TVNode[]; // list of children (may be undefined if no children)\n    id:any; // unique identifier\n}\n```\n\nWe will assume that `NodeType` is the node type of our treeview for now on.\n\n### TreeView attributes:\n\n- root (`NodeType`): the full tree datastructure\n- emptyTreeMessage (`string`) : message to display when filter do not return any node\n- selectable (`boolean`, default is false) : if set add checkbox in front of every node/leaf\n- nodeTemplate : a svelte component used to render nodes and leafs. it must accept an attribute `data` of the node type (`NodeType`)\n- filter (`(node:NodeType, filter:string ) => boolean `): a function used to filter nodes on a simple text input. if not set no search widget is displayed. returns true if the `node` matches the `filter`.  \n- for custom filters. The TreeView can accept custom filters. A filter must be mapped to a typescript interface, there is no constraint on the type. for now on this class will be `customFilter` \n  - complexFilter(`(node:NodeType, filter:CustomFilter) => boolean`). A function that returns true if the `node` matches the `filter`\n  - filterTemplate : a svelte component displaying the custom filter. It must throw a `filterChanged` event whenever the filter change. the event payload must be an object of type `CustomFilter`\n\n\n### TreeView events: \n\nThe TreeView could raise a `selectionChanged` event whenever a node is selected / deselected (when node selection is enabled with `selectable` attribute). The event payload contains a list of `NodeType` : `NodeType[]`\n\n## styling a TreeView\n\n```html\n\nUse the following CSS template in your svelte app to customize tree icons (using emojis). \n\n\n<style>\n\n// hide the default triangle   \n:global(summary[ref=\"withStyle\"]) {\n  display: block;\n}\n\n// set ‚ûï as the closed node icon\n:global(.tv-node[ref=\"withStyle\"]::before) {\n  margin-left: 1ch;\n  display: inline-block;\n  content: '‚ûï';\n  transition: 0.2s;\n}\n\n// set ‚ûñ as the opened node icon\n:global(details[ref=\"withStyle\"][open] > .tv-node::before) {  \n  content: '‚ûñ';\n  transition: 0.2s;\n}\n\n// set ü¶∏üèª‚Äç‚ôÇÔ∏è as the leaf icon\n:global(.tv-leaf[ref=\"withStyle\"]::before) {\n\t\tcontent: 'ü¶∏üèª‚Äç‚ôÇÔ∏è'\n\t}\n</style>\n\n<TreeView \n  emptyTreeMessage=\"Mikey Mouse\" \n  ref=\"withStyle\" \n  {root} {childrenAccessor} \n  nodeTemplate={Node} \n  {filter}></TreeView>\n```",
	"downloads_history": [
		[3659, 240],
		[3666, 294],
		[3673, 189],
		[3680, 20],
		[3687, 204],
		[3694, 34],
		[3701, 25],
		[3708, 39],
		[3715, 25],
		[3722, 33],
		[3729, 37],
		[3736, 30],
		[3743, 50],
		[3750, 28],
		[3757, 22],
		[3764, 30],
		[3771, 11],
		[3778, 47],
		[3785, 33],
		[3792, 7],
		[3799, 6],
		[3806, 14],
		[3813, 25],
		[3820, 10],
		[3827, 6],
		[3834, 82],
		[3841, 21],
		[3848, 15],
		[3855, 6],
		[3862, 42],
		[3869, 28],
		[3876, 30],
		[3883, 4],
		[3890, 41],
		[3897, 10],
		[3904, 40],
		[3911, 19],
		[3918, 9],
		[3925, 10],
		[3932, 18],
		[3939, 14],
		[3946, 21],
		[3953, 19],
		[3960, 12],
		[3967, 17],
		[3974, 17],
		[3981, 27],
		[3988, 20],
		[3995, 22],
		[4002, 6],
		[4009, 14],
		[4023, 10],
		[4030, 30],
		[4037, 19],
		[4044, 43],
		[4051, 32],
		[4058, 14],
		[4065, 16],
		[4072, 8],
		[4079, 26],
		[4086, 72],
		[4093, 11],
		[4100, 45],
		[4107, 13],
		[4114, 15],
		[4121, 20],
		[4128, 13]
	],
	"esm": true,
	"cjs": false
}
