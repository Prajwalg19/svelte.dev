{
	"name": "svelte-subcomponent-preprocessor",
	"description": "Preprocesses Svelte files, enabling multiple components in one file.",
	"repo_url": "https://github.com/srmullen/svelte-subcomponent-preprocessor",
	"authors": ["srmullen"],
	"homepage": "https://github.com/srmullen/svelte-subcomponent-preprocessor#readme",
	"downloads": 5,
	"updated": "2021-11-02T21:07:29.485Z",
	"tags": ["tooling"],
	"github_stars": 44,
	"typescript": false,
	"version": "0.0.1",
	"last_rune_check_version": "0.0.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-subcomponent-preprocessor",
				"version": "0.0.1",
				"size": 15672
			},
			{
				"name": "fs-extra",
				"version": "10.1.0",
				"size": 63278
			},
			{
				"name": "jsonfile",
				"version": "6.1.0",
				"size": 19750
			},
			{
				"name": "universalify",
				"version": "2.0.1",
				"size": 4675
			},
			{
				"name": "graceful-fs",
				"version": "4.2.11",
				"size": 32535
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[1, 4],
			[1, 3]
		],
		"circular": []
	},
	"readme": "svelte-subcomponent-preprocessor\n================================\n\nThe `svelte-subcomponent-preprocessor` allows you to write more than one component within a svelte file. The subcomponents are written in a `{#component}` block and remain local to the svelte file. Here's an example\n\n```html\n<!-- List.svelte -->\n<script>\n  export let items = ['svelte', 'subcomponent', 'preprocessor'];\n</script>\n\n<ul>\n  {#each items as item}\n    <Item {item} />\n  {/each}\n</ul>\n\n{#component Item}\n  <script>\n    import { onMount } from 'svelte';\n    export let item;\n\n    onMount(() => {\n      console.log(item);\n    });\n  </script>\n\n  <li>{item}!!!</li>\n\n  <style>\n    li {\n      color: red;\n    }\n  </style>\n{/component}\n```\n\nInstallation and Configuration\n------------------------------\n\n`npm install --save-dev svelte-subcomponent-preprocessor`\n\nIn your svelte config import the preprocessor and add it to the preprocess array.\n\n```js\nimport subcomponentPreprocessor from 'svelte-subcomponent-preprocessor';\nimport sveltePreprocess from 'svelte-preprocess';\n\nsvelte({\n  preprocess: [\n    subcomponentPreprocessor(),\n    sveltePreprocess() // must come after subcomponentPreprocessor\n  ]\n})\n```\n\nIf you're using [svelte-preprocess](https://github.com/sveltejs/svelte-preprocess) it must run after `svelte-subcomponent-preprocessor`.\n\n`svelte-subcomponent-preprocessor` works by extracting the `{#component}` blocks from your svelte code and writing them to disk. By default they are written to `./node_modules/.svelte-subcomponent-preprocessor/`. This can be changed with a configuration object passed to the preprocessor.\n\n`subcomponentPreprocessor({ out: './subcomponents' });`\n\n### Config with Vite or SvelteKit\n\nIf you're using [Vite](https://github.com/vitejs/vite) or [SvelteKit](https://github.com/sveltejs/kit) you'll need a bit of extra configuration to get the subcomponents to work with the dev server. You need the following in your vite config.\n\n```js\n{\n  // ...\n  server: {\n    watch: {\n      ignored: ['!**/node_modules/.svelte-subcomponent-preprocessor/**']\n    }\n  },\n  optimizeDeps: {\n    exclude: ['.svelte-subcomponent-preprocessor']\n  },\n  // ...\n}\n```\n\nFull vite configuration.\n\n```js\nimport { defineConfig } from \"vite\";\nimport { svelte } from \"@sveltejs/vite-plugin-svelte\";\n\n// https://vitejs.dev/config/\nexport default defineConfig({\n  plugins: [svelte()],\n  server: {\n    watch: {\n      ignored: ['!**/node_modules/.svelte-subcomponent-preprocessor/**']\n    }\n  },\n  optimizeDeps: {\n    exclude: ['.svelte-subcomponent-preprocessor']\n  }\n});\n```\n\nOr in SvelteKit the `server` and `optimizeDeps` config would go inside the [`svelte.config.js` `vite` object](https://kit.svelte.dev/docs#configuration-vite).\n\n### Config with Snowpack\n\nWith [snowpack](https://github.com/snowpackjs/snowpack) the default out configuration will not work. Change the out location to someplace that will be watched by the snowpack dev server.\n\nUsage\n-----\n\nTo define a subcomponent put your component code inside a `#component` block. Pass the name of the subcomponent to the block, like so...\n\n```html\n{#component ComponentName}    \n  <h1>My Component</h1>\n{/component}\n\n<div>\n  <ComponentName />\n<div>\n```\n\nLimitations\n-----------\n\n- Does not currently work with [snowpack](https://github.com/snowpackjs/snowpack). It may be possible to change the snowpack config to get it to work, but I'm not sure how.\n- Subcomponents cannot have interdependencies. i.e. Only the default export component can use the subcomponents.",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 1],
		[3603, 5],
		[3610, 4],
		[3617, 2],
		[3631, 1],
		[3638, 17],
		[3645, 7],
		[3652, 6],
		[3659, 5],
		[3666, 7],
		[3673, 6],
		[3680, 5],
		[3687, 5],
		[3694, 4],
		[3701, 2],
		[3708, 5],
		[3715, 4],
		[3722, 1],
		[3729, 3],
		[3736, 2],
		[3743, 1],
		[3750, 1],
		[3757, 5],
		[3764, 3],
		[3771, 4],
		[3778, 3],
		[3785, 3],
		[3792, 3],
		[3799, 1],
		[3806, 6],
		[3813, 1],
		[3820, 2],
		[3827, 3],
		[3834, 3],
		[3841, 1],
		[3848, 2],
		[3855, 14],
		[3862, 2],
		[3869, 1],
		[3876, 1],
		[3883, 2],
		[3890, 4],
		[3897, 1],
		[3904, 1],
		[3911, 4],
		[3918, 1],
		[3925, 2],
		[3932, 2],
		[3939, 3],
		[3946, 1],
		[3953, 1],
		[3960, 2],
		[3967, 2],
		[3974, 2],
		[3981, 2],
		[3988, 1],
		[3995, 1],
		[4002, 1],
		[4009, 1],
		[4016, 3],
		[4023, 2],
		[4030, 3],
		[4037, 3],
		[4044, 7],
		[4051, 2],
		[4058, 2],
		[4065, 6],
		[4072, 1],
		[4079, 1],
		[4086, 3],
		[4093, 8],
		[4100, 5],
		[4107, 2],
		[4114, 5],
		[4121, 6],
		[4128, 3],
		[4135, 5]
	],
	"esm": false,
	"cjs": true
}
