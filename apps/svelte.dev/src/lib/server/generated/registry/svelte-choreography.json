{
	"name": "svelte-choreography",
	"description": "Create responsive layouts with SSR support in Svelte apps.",
	"repo_url": "https://github.com/captaincodeman/svelte-choreography",
	"authors": ["captaincodeman"],
	"homepage": "https://captaincodeman.github.io/svelte-choreography/",
	"downloads": 5,
	"updated": "2024-08-26T19:36:54.303Z",
	"tags": ["ui"],
	"typescript": true,
	"version": "0.0.6",
	"svelte_range": "^5.0.0",
	"kit_range": "^2.5.22",
	"last_rune_check_version": "0.0.6",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-choreography",
				"version": "0.0.6",
				"size": 9538
			},
			{
				"name": "esm-env",
				"version": "1.2.2",
				"size": 3784
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# svelte-choreography\n\nResponsive Layout with SSR support, content re-ordering for correct tab-order (for accessibility), and retained focus.\n\n![screenshot](https://captaincodeman.github.io/svelte-choreography/screenshot.png)\n\nSSR support prevents any flicker on load whatever the breakpoint. The content re-ordering on change of breakpoint allows\nfor layouts that cannot be achieved with CSS alone without breaking the tab-order. Click this then tab between inputs and\ntry resizing the browser ...\n\n## Usage\n\nInstall using your package manager of choice, e.g.\n\n    pnpm i -D svelte-choreography\n\nImport into a svelte component and define the beakpoints and layout (this is the layout used in the demo):\n\n```html\n<script lang=\"ts\">\n  import { createBreakpoints, Responsive } from 'svelte-choreography'\n\n  createBreakpoints({\n    xs: 0,\n    md: 768,\n  })\n</script>\n\n{#snippet filter()}\n  <div class=\"p-4 border border-blue-600 bg-blue-50 rounded-lg\">\n    <input class=\"p-2 border border-gray-400 w-full rounded-md\" type=\"text\" value=\"filter\" />\n  </div>\n{/snippet}\n\n{#snippet aside()}\n  <div class=\"p-4 h-36 border border-red-600 bg-red-50 rounded-lg\">\n    <input class=\"p-2 border border-gray-400 w-full rounded-md\" type=\"text\" value=\"aside\" />\n  </div>\n{/snippet}\n\n{#snippet main()}\n  <div class=\"p-4 h-48 border border-green-600 bg-green-50 rounded-lg\">\n    <input class=\"p-2 border border-gray-400 w-full rounded-md\" type=\"text\" value=\"main\" />\n  </div>\n{/snippet}\n\n{#snippet secondary()}\n  <div class=\"p-4 h-48 border border-indigo-600 bg-indigo-50 rounded-lg\">\n    <input class=\"p-2 border border-gray-400 w-full rounded-md\" type=\"text\" value=\"secondary\" />\n  </div>\n{/snippet}\n\n{#snippet additional()}\n  <div class=\"p-4 h-36 border border-orange-600 bg-orange-50 rounded-lg\">\n    <input class=\"p-2 border border-gray-400 w-full rounded-md\" type=\"text\" value=\"additional\" />\n  </div>\n{/snippet}\n\n<div class=\"mt-4 flex gap-4 flex-col md:flex-row\">\n  <div class=\"contents md:flex flex-col gap-4 flex-grow\">\n    <Responsive at={{ xs: filter, md: main }} />\n    <Responsive at={{ xs: main, md: secondary }} />\n  </div>\n  <div class=\"contents md:flex flex-col gap-4 w-64\">\n    <Responsive at={{ xs: aside, md: filter }} />\n    <Responsive at={{ xs: secondary, md: aside }} />\n    <Responsive at={{ xs: additional, md: additional }} />\n  </div>\n</div>\n```\n\nBe sure to add `node_modules/svelte-choreography/**/*.{html,js,svelte,ts}` to the TailwindCSS `content` configuration or, alternatively, add the following classes to the `safelist`:\n\n* `contents`, `sm:contents`, `md:contents`, `lg:contents`, `xl:contents`, `2xl:contents`\n* `hidden`, `sm:hidden`, `md:hidden`, `lg:hidden`, `xl:hidden`, `2xl:hidden`",
	"legacy_svelte": false,
	"downloads_history": [
		[3876, 254],
		[3883, 25],
		[3890, 99],
		[3897, 7],
		[3904, 29],
		[3911, 7],
		[3918, 1],
		[3925, 3],
		[3939, 7],
		[3946, 4],
		[3953, 1],
		[3960, 2],
		[3974, 4],
		[3988, 1],
		[4009, 1],
		[4023, 8],
		[4030, 2],
		[4037, 7],
		[4044, 9],
		[4051, 3],
		[4065, 1],
		[4079, 1],
		[4100, 6],
		[4107, 13],
		[4114, 5],
		[4121, 8],
		[4128, 5]
	],
	"esm": true,
	"cjs": false
}
