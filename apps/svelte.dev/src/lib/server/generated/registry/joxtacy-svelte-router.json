{
	"name": "@joxtacy/svelte-router",
	"description": "Simple routing solution for Svelte applications.",
	"repo_url": "https://github.com/Joxtacy/svelte-router",
	"authors": ["joxtacy"],
	"homepage": "https://github.com/Joxtacy/svelte-router#readme",
	"downloads": 4,
	"updated": "2019-11-11T22:39:33.315Z",
	"tags": ["router"],
	"github_stars": 1,
	"typescript": false,
	"version": "0.0.6",
	"svelte_range": "3.x",
	"last_rune_check_version": "0.0.6",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@joxtacy/svelte-router",
				"version": "0.0.6",
				"size": 7424
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-router\n\nThis is a very simple router for single page applications written in Svelte.\n\n## Install\n```bash\nnpm install @joxtacy/svelte-router\n```\n\n## Usage\n\nBelow is a short example on how to use the router.\n```js\n<script>\nimport { Link, Route, Router } from \"@joxtacy/svelte-router\";\n</script>\n\n<Router>\n    <Link to={\"/\"}>\n        <h2>Home</h2>\n    </Link>\n    <Link to={\"/foo\"}>\n        <h2>foo</h2>\n    </Link>\n    <Route exact path={\"/\"}>\n        <h2>This is home</h2>\n    </Route>\n    <Route path={\"/foo\"}>\n        <h2>Bar</h2>\n    </Route>\n</Router>\n```\n\n## API\n\n### Router\nThis component provides context based routing for the `Link` and `Route` component and must be used to wrap those components. It does not take any properties. \n\n### Route\nThis component is used to render a component or some markup when its path matches the url. It takes a prop called `path` which is the path that when matched the `Route` will render. \n\n| Prop      | Required | Default     | Description                                                                |\n| --------- |:--------:|:-----------:| -------------------------------------------------------------------------- |\n| path      | no       | `\"/\"`       | The path relative to the origin that the `Route` component will listen to. |\n| exact     | no       | `false`     | True if it should match on the exact path only.                            |\n| component | no       | `undefined` | The component to be rendered.                                              |\n\n#### Examples\n\nWith general markup:\n```js\n<Route path={\"/some-path\"}>\n    <!-- Markup goes here -->\n</Route>\n```\n\nWith a Svelte component:\n```js\n<script>\nimport SvelteComponent from \"./svelte-component.svelte\";\n</script>\n\n<Route path={\"/some-path\"} component={SvelteComponent}/>\n```\n\n### Link\nThis component is used to change the url. It takes one prop called `to` and is a relative path to your `window.location.origin`.\n\n| Prop      | Required | Default     | Description                                   |\n| --------- |:--------:|:-----------:| --------------------------------------------- |\n| to        | no       | `\"/\"`       | The path relative to `window.location.origin` |\n\n#### Example\n```js\n<Link to={\"/some-path\"}>\n    <!-- Markup goes here -->\n</Link>\n```\n\n## Know limitations\n\n* You need to specify the `Route` components with the most specific path on top, like in the example below. Otherwise the top most one would be rendered on all sub paths as well.\n\n#### Good example ✅\nThe most specific path is on top and will not be rendered on `/foo`.\n```js\n<script>\nimport { Link, Route, Router } from \"@joxtacy/svelte-router\";\n</script>\n\n<Router>\n    <Link to={\"/\"}>\n        <h2>Home</h2>\n    </Link>\n    <Link to={\"/foo\"}>\n        <h2>foo</h2>\n    </Link>\n    <Link to={\"/foo/bar\"}>\n        <h2>foobar</h2>\n    </Link>\n    <Route exact path={\"/\"}>\n        <h2>This is home</h2>\n    </Route>\n    <Route path={\"/foo/bar\"}>\n        <h2>Foobar</h2>\n    </Route>\n    <Route path={\"/foo\"}>\n        <h2>Foo</h2>\n    </Route>\n</Router>\n```\n\n#### Bad example ❌\nHere the `/foo` path would also be rendered when the url is `/foo/bar`.\n```js\n<script>\nimport { Link, Route, Router } from \"@joxtacy/svelte-router\";\n</script>\n\n<Router>\n    <Link to={\"/\"}>\n        <h2>Home</h2>\n    </Link>\n    <Link to={\"/foo\"}>\n        <h2>foo</h2>\n    </Link>\n    <Link to={\"/foo/bar\"}>\n        <h2>foobar</h2>\n    </Link>\n    <Route exact path={\"/\"}>\n        <h2>This is home</h2>\n    </Route>\n    <Route path={\"/foo\"}>\n        <h2>Foo</h2>\n    </Route>\n    <Route path={\"/foo/bar\"}>\n        <h2>Foobar</h2>\n    </Route>\n</Router>\n```\n\n* It does not handle variables in the path.\n\n* You can only have one `Router` in your app.\n\n## Feature requests\n\nIf you have any feature requests just hit me up or place an issue on the Github repo!\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 3],
		[3596, 12],
		[3603, 1],
		[3610, 1],
		[3617, 4],
		[3624, 2],
		[3638, 2],
		[3666, 9],
		[3673, 4],
		[3694, 1],
		[3708, 1],
		[3715, 2],
		[3722, 1],
		[3743, 2],
		[3764, 7],
		[3778, 1],
		[3792, 1],
		[3799, 1],
		[3806, 2],
		[3813, 1],
		[3827, 1],
		[3834, 1],
		[3841, 1],
		[3855, 3],
		[3862, 42],
		[3869, 1],
		[3876, 2],
		[3883, 7],
		[3890, 1],
		[3897, 1],
		[3904, 13],
		[3918, 1],
		[3925, 1],
		[3932, 8],
		[3939, 2],
		[3953, 1],
		[3960, 2],
		[3967, 3],
		[3974, 1],
		[3988, 1],
		[3995, 1],
		[4016, 4],
		[4023, 13],
		[4030, 1],
		[4037, 8],
		[4044, 6],
		[4051, 2],
		[4058, 2],
		[4079, 1],
		[4086, 1],
		[4093, 28],
		[4100, 2],
		[4107, 15],
		[4114, 4],
		[4121, 8],
		[4128, 8]
	]
}
