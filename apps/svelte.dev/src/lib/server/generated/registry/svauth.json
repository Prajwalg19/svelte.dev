{
	"name": "svauth",
	"description": "Provides authentication for SvelteKit applications.",
	"repo_url": "https://github.com/sshkeda/svauth",
	"authors": ["sshkeda"],
	"homepage": "https://github.com/sshkeda/svauth",
	"downloads": 5,
	"updated": "2023-04-18T00:56:09.353Z",
	"tags": ["auth"],
	"github_stars": 3,
	"typescript": true,
	"version": "0.2.1",
	"svelte_range": "^3.54.0",
	"kit_range": "^1.15.1",
	"last_rune_check_version": "0.2.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svauth",
				"version": "0.2.1",
				"size": 59869
			},
			{
				"name": "@paralleldrive/cuid2",
				"version": "2.2.2",
				"size": 35454
			},
			{
				"name": "@noble/hashes",
				"version": "1.8.0",
				"size": 1145416
			},
			{
				"name": "@prisma/client",
				"version": "4.16.2",
				"size": 3263984
			},
			{
				"name": "@prisma/engines-version",
				"version": "4.16.1-1.4bc8b6e1b66cb932731fb1bdbbc550d1e010de81",
				"size": 12690
			},
			{
				"name": "esm-env",
				"version": "1.2.2",
				"size": 3784
			},
			{
				"name": "jose",
				"version": "4.15.9",
				"size": 548521
			},
			{
				"name": "zod",
				"version": "3.24.3",
				"size": 697771
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[0, 3],
			[3, 4],
			[0, 5],
			[0, 6],
			[0, 7]
		],
		"circular": []
	},
	"readme": "<p align=\"center\">\n\t<img\n\tsrc=\"https://user-images.githubusercontent.com/129692066/232329591-2236ead0-21c8-43aa-a9de-c0a2659c6a9d.png\"\n\talt=\"svauth logo\"\n\talign=\"center\" />\n\t<h1 align=\"center\">svauth</h1>\n\t<p align=\"center\">\n\t\tAuthentication for SvelteKit\n\t\t<br />\n\t\tDeveloped by Stephen Shkeda\n\t\t<br />\n\t\tstephenshkeda@gmail.com\n\t</p>\t\n</p>\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Get Started](#get-started)\n- [Features](#features)\n- [Security](#security)\n- [Environment Variables](#environment-variables)\n- [Server API](#server-api)\n  - [Svauth](#svauth)\n  - [event.locals](#eventlocals)\n- [Client API](#client-api)\n  - [session](#session)\n  - [Session (Object)](#session-object)\n  - [User (Object)](#user-object)\n  - [signIn](#signin)\n  - [signOut](#signout)\n- [Providers](#providers)\n  - [Google](#google)\n  - [Discord](#discord)\n  - [GitHub](#github)\n- [Adapters](#adapters)\n  - [Prisma](#prisma)\n- [Components](#components)\n  - [SignInWithGoogleButton](#signinwithgooglebutton)\n- [License](#license)\n\n## Overview\n\n**svauth** is a complete open source authentication solution for [SvelteKit](https://kit.svelte.dev/) applications.\n\nDesigned from the ground up to support SvelteKit and serverless.\n\nHeavily inspired by [NextAuth.js](https://github.com/nextauthjs/next-auth).\n\nWritten for [Svelte Hack 2023](https://hack.sveltesociety.dev/).\n\nThis is a monorepo containing the following packages / projects:\n\n1. The primary `svauth` package\n2. A development test application\n\n## Get Started\n\n### Install svauth\n\n```\nnpm install svauth\nyarn add svauth\npnpm add svauth\n```\n\n### Add Svauth Handler\n\n```typescript\n// hooks.server.ts\nimport Svauth from 'svauth';\nimport { Google } from 'svauth/providers';\nimport { GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET } from '$env/static/private';\n\nexport const handle = Svauth({\n\tproviders: [\n\t\tGoogle({\n\t\t\tclientId: GOOGLE_CLIENT_ID,\n\t\t\tclientSecret: GOOGLE_CLIENT_SECRET\n\t\t})\n\t]\n});\n```\n\n### (Optional) Get Session During Load\n\n```typescript\n// routes/+page.server.ts\nimport type { PageServerLoad } from './$types';\n\nexport const load = (async (event) => {\n\treturn {\n\t\tsession: await event.locals.getSession()\n\t};\n}) satisfies PageServerLoad;\n```\n\n### Import Session\n\n```svelte\n<script lang=\"ts\">\n\t// routes/+page.svelte\n\timport { session, signIn, signOut } from 'svauth/client';\n</script>\n\n{#if $session}\n\t<button on:click={() => signOut()}> Sign out </button>\n\t<p>Logged in as {$session.user.email}</p>\n{:else}\n\t<button on:click={() => signIn('google')}> Sign in with Google </button>\n\t<p>Not signed in</p>\n{/if}\n```\n\n## Features\n\n- **OAuth Providers** - Seamless integration with Google, Discord, and GitHub.\n- **Serverless** - Designed to work with serverless environments.\n- **Session Management** - Built-in session management for server and client-side rendering.\n- **TypeScript** - Written in TypeScript and includes type definitions.\n- **Security** - Designed to be secure by default and encourage best practices for safeguarding user data.\n- **Customizable Components** - Pre-built, customizable components like the SignInWithGoogleButton for a smoother user authentication experience.\n\n## Security\n\n- **CSRF Protection** - SvelteKit's built-in CSRF protection is used to prevent CSRF attacks.\n- **JWT Encryption** - When JSON Web Tokens are enabled, they are encrypted by default (JWE) with A256GCM.\n- **Client Independence** - Doesn't rely on client-side JavaScript.\n- **Secure Cookie Management** - Signed, prefixed, server-only cookies.\n- **OWASP Compliance** - Attempts to implement the latest guidance published by [Open Web Application Security Project](https://owasp.org/).\n\nPlease contact me directly, stephenshkeda@gmail.com, to report serious issues that might impact the security of sites using svauth.\n\n## Environment Variables\n\n| Name                 | Description                             |\n| -------------------- | --------------------------------------- |\n| SVAUTH_SECRET        | The secret used to encrypt the session. |\n| SVAUTH_URL           | The URL of the application.             |\n| PUBLIC_SVAUTH_PREFIX | The prefix used for the svauth routes.  |\n\nFor production environments, if SVAUTH_URL is not set, VERCEL_URL will be used. For development environments, SVAUTH_URL defaults to localhost:5173.\n\nPUBLIC_SVAUTH_PREFIX is optional and defaults to /auth.\n\n## Server API\n\n### Svauth\n\nThe `Svauth` function is used to create the Svauth handler.\n\n#### Parameters\n\n| Name      | Type            | Description         |\n| --------- | --------------- | ------------------- |\n| `options` | `SvauthOptions` | The options object. |\n\n#### SvauthOptions\n\n| Name        | Type                 | Default | Description                                                                                                                                                                           |\n| ----------- | -------------------- | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `providers` | `Provider[]`         |         | An array of providers.                                                                                                                                                                |\n| `adapter`   | `Adapter`            |         | The adapter to link svauth with a database.                                                                                                                                           |\n| `expires`   | `number` \\| `string` | `30d`   | The expiration time of the session. When number is passed that is used as a value in seconds, when string is passed it is resolved to a time span and added to the current timestamp. |\n\n#### Example\n\n```typescript\n// hooks.server.ts\nimport Svauth from 'svauth';\n\nexport const handle = Svauth({\n\tproviders: [\n\t\tGoogle({\n\t\t\tclientId: GOOGLE_CLIENT_ID,\n\t\t\tclientSecret: GOOGLE_CLIENT_SECRET\n\t\t})\n\t],\n\texpires: '14d'\n});\n```\n\n### event.locals\n\nThe `event.locals` object contains the following properties:\n\n| Name           | Type    | Description                  |\n| -------------- | ------- | ---------------------------- |\n| `getSession()` | `async` | Returns the current session. |\n\n#### Example\n\n```typescript\n// routes/+page.server.ts\nimport type { PageServerLoad } from './$types';\n\nexport const load = (async (event) => {\n\treturn {\n\t\tsession: await event.locals.getSession()\n\t};\n}) satisfies PageServerLoad;\n```\n\n## Client API\n\n### session\n\nThe `session` store is the easiest way to obtain information on current session.\n\n`session` returns 4 possible values:\n\n- **Session** - The user's current session.\n- **null** - The credentials are wrong or the session has expired.\n- **undefined** - There is no session.\n- **false** - The session is loading.\n\nNote: If you are obtaining the session during load, `session` will not return `false`.\n\n#### Example\n\n```svelte\n<script lang=\"ts\">\n\timport { session } from 'svauth/client';\n</script>\n\n{#if $session}\n\t<p>Logged in as {$session.user.email}</p>\n{:else}\n\t<p>Not signed in</p>\n{/if}\n```\n\n### Session Object\n\nThe `Session` object is returned by the `session` store.\n\n#### Properties\n\n| Name       | Type   | Description                         |\n| ---------- | ------ | ----------------------------------- |\n| `User`     | `User` | The user object.                    |\n| `expires`  | `Date` | The expiration time of the session. |\n| `issuedAt` | `Date` | The time the session was issued.    |\n\n### User Object\n\nThe `User` object is found inside the `Session` object.\n\n#### Properties\n\n| Name    | Type     | Description                |\n| ------- | -------- | -------------------------- |\n| `id`    | `string` | The user's ID.             |\n| `email` | `string` | The user's email.          |\n| `name`  | `string` | The user's name.           |\n| `image` | `string` | A link to the user's image |\n\n### signIn\n\nThe `signIn` function is used to sign in a user.\n\n#### Parameters\n\n| Name       | Type     | Default                 | Description                                        |\n| ---------- | -------- | ----------------------- | -------------------------------------------------- |\n| `provider` | `string` |                         | The provider to sign in with.                      |\n| `redirect` | `string` | Current user's location | The URL to redirect the user to after signing out. |\n\n#### Example\n\n```svelte\n<script lang=\"ts\">\n\timport { signIn } from 'svauth/client';\n</script>\n\n<button on:click={() => signIn('google')}> Sign in with Google </button>\n```\n\n### signOut\n\nThe `signOut` function is used to sign out a user.\n\n#### Parameters\n\n| Name       | Type     | Default                 | Description                                        |\n| ---------- | -------- | ----------------------- | -------------------------------------------------- |\n| `redirect` | `string` | Current user's location | The URL to redirect the user to after signing out. |\n\n#### Example\n\n```svelte\n<script lang=\"ts\">\n\timport { signOut } from 'svauth/client';\n</script>\n\n<button on:click={() => signOut()}> Sign out </button>\n```\n\n## Providers\n\nCurrently, svauth has support for three OAuth providers:\n\n- [Google](#google)\n- [Discord](#discord)\n- [GitHub](#github)\n\nIn the future, I plan to add support for more providers.\n\n### Google\n\n#### Documentation\n\nhttps://developers.google.com/identity/protocols/oauth2\nhttps://developers.google.com/identity/openid-connect/openid-connect\n\n#### Configuration\n\nhttps://console.developers.google.com/apis/credentials\n\nThe \"Authorized redirect URIs\" used when creating the credentials must include your full domain and end in the callback path.\n\nFor example:\n\n- Production: https://{YOUR_DOMAIN}/auth/callback/google\n- Development: http://localhost:5173/auth/callback/google\n\n#### Example\n\n```typescript\n// hooks.server.ts\nimport Svauth from 'svauth';\nimport { Google } from 'svauth/providers';\nimport { GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET } from '$env/static/private';\n\nexport const handle = Svauth({\n\tproviders: [\n\t\tGoogle({\n\t\t\tclientId: GOOGLE_CLIENT_ID,\n\t\t\tclientSecret: GOOGLE_CLIENT_SECRET\n\t\t})\n\t]\n});\n```\n\n### Discord\n\n#### Documentation\n\nhttps://discord.com/developers/docs/topics/oauth2\n\n#### Configuration\n\nhttps://discord.com/developers/applications\n\nThe \"Redirects\" used when creating the credentials must include your full domain and end in the callback path.\n\nFor example:\n\n- Production: https://{YOUR_DOMAIN}/auth/callback/discord\n- Development: http://localhost:5173/auth/callback/discord\n\n#### Example\n\n```typescript\n// hooks.server.ts\nimport Svauth from 'svauth';\nimport { Discord } from 'svauth/providers';\nimport { DISCORD_CLIENT_ID, DISCORD_CLIENT_SECRET } from '$env/static/private';\n\nexport const handle = Svauth({\n\tproviders: [\n\t\tDiscord({\n\t\t\tclientId: DISCORD_CLIENT_ID,\n\t\t\tclientSecret: DISCORD_CLIENT_SECRET\n\t\t})\n\t]\n});\n```\n\n### GitHub\n\n#### Documentation\n\nhttps://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps\n\n#### Configuration\n\nhttps://github.com/settings/developers\n\nThe \"Authorization callback URL\" used when creating the credentials must include your full domain and end in the callback path.\n\nFor example:\n\n- Production: https://{YOUR_DOMAIN}/auth/callback/github\n- Development: http://localhost:5173/auth/callback/github\n\n#### Example\n\n```typescript\n// hooks.server.ts\nimport Svauth from 'svauth';\nimport { GitHub } from 'svauth/providers';\nimport { GITHUB_CLIENT_ID, GITHUB_CLIENT_SECRET } from '$env/static/private';\n\nexport const handle = Svauth({\n\tproviders: [\n\t\tGitHub({\n\t\t\tclientId: GITHUB_CLIENT_ID,\n\t\t\tclientSecret: GITHUB_CLIENT_SECRET\n\t\t})\n\t]\n});\n```\n\n## Adapters\n\n### Prisma\n\n#### Documentation\n\nhttps://www.prisma.io/\n\n#### Example\n\n```typescript\n// routes/hooks.server.ts\nimport Svauth from 'svauth';\nimport { Google } from 'svauth/providers';\nimport { Prisma } from 'svauth/adapters';\nimport prisma from './server/prisma';\nimport { GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET } from '$env/static/private';\n\nexport const handle = Svauth({\n\tproviders: [\n\t\tGoogle({\n\t\t\tclientId: GOOGLE_CLIENT_ID,\n\t\t\tclientSecret: GOOGLE_CLIENT_SECRET\n\t\t})\n\t],\n\tadapter: Prisma(prisma)\n});\n```\n\n#### Schema\n\n```prisma\n// prisma/schema.prisma\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider     = \"mysql\"\n  url          = env(\"DATABASE_URL\")\n  relationMode = \"prisma\"\n}\n\nmodel Account {\n  id                String @id @default(cuid())\n  userId            String\n  provider          String\n  providerAccountId String\n  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([provider, providerAccountId])\n  @@index([userId])\n}\n\nmodel Session {\n  id       String   @id @default(cuid())\n  userId   String\n  issuedAt DateTime @default(now())\n  expires  DateTime\n  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId])\n}\n\nmodel User {\n  id       String    @id @default(cuid())\n  name     String\n  email    String    @unique\n  picture  String\n  accounts Account[]\n  sessions Session[]\n}\n```\n\n## Components\n\n### SignInWithGoogleButton\n\nThe `SignInWithGoogleButton` component is a simple button that will sign the user in with Google.\n\n#### Documentation\n\nhttps://developers.google.com/identity/gsi/web/guides/overview\n\n#### Configuration\n\nhttps://console.developers.google.com/apis/credentials\n\nThe \"Authorized JavaScript origins\" used when creating the credentials must include your HTTP origins.\n\nFor example:\n\n- Production: https://{YOUR_DOMAIN}\n- Development: http://localhost:5173 and http://localhost\n\n#### Props\n\n| Name             | Type                                                          | Default       | Description                            |\n| ---------------- | ------------------------------------------------------------- | ------------- | -------------------------------------- |\n| `oneTap`         | `boolean`                                                     | `false`       | Whether to use Google One Tap sign in. |\n| `type`           | `standard` \\| `icon`                                          | `standard`    | The button type.button.                |\n| `theme`          | `outline` \\| `filled_blue` \\| `filled_black`                  | `outline`     | The button theme.                      |\n| `size`           | `large` \\| `medium` \\| `small`                                | `large`       | The button size.                       |\n| `text`           | `signin_with` \\| `signup_with` \\| `continue_with` \\| `signin` | `signin_with` | The button text.                       |\n| `shape`          | `rectangular` \\| `pill` \\| `circle` \\| `square`               | `rectangular` | The button shape.                      |\n| `logo_alignment` | `left` \\| `center`                                            | `left`        | The Google logo alignment.             |\n| `width`          | `number`                                                      |               | The button width, in pixels.           |\n| `locale`         | `string`                                                      |               | The button language.                   |\n\n#### Example\n\n```svelte\n<script lang=\"ts\">\n\t// routes/+page.svelte\n\timport { SignInWithGoogleButton } from 'svauth/components';\n</script>\n\n<SignInWithGoogleButton />\n```\n\n## License\n\nISC\n\nPortions of this page are reproduced from work created and [shared by Google](\"https://developers.google.com/readme/policies\") and used according to terms described in the [Creative Commons 4.0 Attribution License](https://creativecommons.org/licenses/by/4.0/).\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 4],
		[3596, 6],
		[3603, 5],
		[3610, 3],
		[3617, 1],
		[3624, 4],
		[3645, 2],
		[3666, 7],
		[3694, 1],
		[3715, 1],
		[3743, 1],
		[3757, 1],
		[3764, 1],
		[3771, 3],
		[3778, 1],
		[3792, 2],
		[3806, 1],
		[3820, 1],
		[3841, 16],
		[3848, 1],
		[3862, 1],
		[3869, 1],
		[3890, 4],
		[3904, 3],
		[3918, 2],
		[3932, 1],
		[3939, 2],
		[3946, 1],
		[3967, 1],
		[3995, 2],
		[4002, 1],
		[4016, 2],
		[4023, 2],
		[4030, 4],
		[4037, 9],
		[4044, 7],
		[4051, 1],
		[4065, 1],
		[4100, 10],
		[4114, 5],
		[4121, 6],
		[4128, 3]
	]
}
