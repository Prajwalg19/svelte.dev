{
	"name": "svelte-virtual-infinite-list",
	"description": "Render virtual, infinite lists in Svelte apps.",
	"repo_url": "https://github.com/koheing/svelte-virtual-infinite-list",
	"authors": ["koheing"],
	"homepage": "https://github.com/koheing/svelte-virtual-infinite-list#readme",
	"downloads": 31,
	"updated": "2023-01-09T10:15:14.604Z",
	"tags": ["ui"],
	"github_stars": 7,
	"typescript": true,
	"version": "1.7.12",
	"svelte_range": "^3.49.0",
	"last_rune_check_version": "1.7.12",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-virtual-infinite-list",
				"version": "1.7.12",
				"size": 135211
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "<div align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/55611095/113577028-91f6e800-965b-11eb-8081-4fb0f65fa07b.png\" title=\"svelte-virtual-infinite-list\">\n</div>\n\n# svelte-virtual-infinite-list([DEMO](https://svelte.dev/repl/b19db3b0de424d72a451e95b5655a57e?version=3.46.2))\n\n[![test](https://github.com/koheing/svelte-virtual-infinite-list/actions/workflows/ci.yaml/badge.svg)](https://github.com/koheing/svelte-virtual-infinite-list/actions/workflows/ci.yaml)\n\nA virtual list component for Svelte apps. Instead of rendering all your data, `<VirtuaInfinitelList>` just renders the bits that are visible, keeping your page nice and light.  \n\nThis library is forked and extends from [@sveltejs/svelte-virtual-list](https://github.com/sveltejs/svelte-virtual-list), and all the basic feature of [@sveltejs/svelte-virtual-list](https://github.com/sveltejs/svelte-virtual-list) are available except default slot.  \n\n\n## Installation\n\n```bash\nnpm i svelte-virtual-infinite-list\n```\n\n\n## Usage\n\n```html\n<script lang=\"ts\">\n  import VirtualInfiniteList from 'svelte-virtual-infinite-list'\n  import type { InfiniteEvent } from 'svelte-virtual-infinite-list'\n  import { find } from './find'\n\n  let things = [\n    // these can be any values you like\n    { name: 'one', number: 1 },\n    { name: 'two', number: 2 },\n    { name: 'three', number: 3 },\n    // ...\n    { name: 'six thousand and ninety-two', number: 6092 }\n  ]\n\n  let loading = true\n  let virtualInfiniteList: VirtualInfiniteList\n\n  async function onInitialize() {\n    await virtualInfiniteList.scrollToBottom()\n  }\n\n  async function onInfinite({ detail }: InfiniteEvent) {\n    if (detail.on === 'bottom') return\n    loading = true\n\n    const data = await find(30)\n    things = [...data, ...things]\n\n    loading = false\n  }\n\n  onMount(async () => {\n    const data = await find(30)\n    things = [...data]\n    loading = false\n  })\n\n  async function scrollToIndex(item) {\n    const index = things.findIndex((it) => it === item.number)\n    index && await virtualInfiniteList.scrollToIndex(index)\n  }\n</script>\n\n<VirtualInfiniteList\n  items={things}\n  {loading}\n  direction=\"top\"\n  persists={30}\n  uniqueKey={'number'}\n  on:initialize={onInitialize}\n  on:infinite={onInfinite}\n  bind:this={virtualInfiniteList}\n  let:item\n>\n  <!-- this will be rendered for each currently visible item -->\n  <div slot=\"item\">\n    <p>{item.number}: {item.name}</p>\n  </div>\n\n  <!-- option -->\n  <div slot=\"loader\">\n    Loading...\n  </div>\n\n  <!-- option -->\n  <div slot=\"empty\">\n    Empty\n  </div>\n</VirtualInfiniteList>\n```\n\n## Additional Props\n\n| No | Property Name | Type | Note |  \n| :--: | :-- | :-- | :-- |\n| 1 |  `loading` | boolean | - |\n| 2 |  `direction` | `'top'` or `'bottom'` or `'vertical'` | Loading direction. |\n| 3 |  `maxItemCountPerLoad` | number | **Deprecated. This valiable removed @2.0.0. Use `persists`, please.**  |\n| 4 |  `persists` | number | [**For direction-top infinite scroll user**] Maximum number of items loaded per load. The offset after loaded may be significantly shift if the number of items that exceeds this value is loaded. `Default value is 30.` |\n| 5 | `uniqueKey` | string | You need to set specify one unique property like `id` in the item object if you want to use the `scrollToIndex` method. `Default value is undefined.` |   \n\n## Additional Events\n\n| No | Property Name | Type | Note |  \n| :--: | :-- | :-- | :-- |\n| 1 |  `on:initialize` | () => any | Emit on change items count from 0 to more over.  |\n| 2 |  `on:infinite` | (event: InfiniteEvent) => any | Emit on scrollbar reached top or bottom. |\n\n## Additional Slots\n| No | Slot Name | Note |  \n| :--: | :--  | :-- |\n| 1 |  `item` | Displayed item   |\n| 2 |  `loader` | Displayed element if loading is `true` |\n| 3 |  `empty` | Displayed element if items is `[]` and loading is `false` |\n\n## Additional Methods\n\n| No | Method Name | Type | Note |  \n| :--: | :-- | :-- | :-- |\n| 1 |  `scrollTo` | `(offset: number) =>  Promise<void>` | This allows you to scroll to a specific offset.  |\n| 2 |  `scrollToIndex` | `(index: number, options?: { align: 'top' \\| 'bottom' \\| 'center' }) => Promise<boolean>` | This allows you to scroll to a specific item using the index. Returns `true` if this is done. |\n| 3 |  `scrollToTop` | `() =>  Promise<void>` | This allows you to scroll to top.  |\n| 4 |  `scrollToBottom` | `() =>  Promise<void>` | This allows you to scroll to bottom.  |\n| 5 |  `reset` | `() =>  Promise<void>` | This allows you to reset VirtualInfiniteList.  |\n| 6 |  `forceRefresh` | `() =>  Promise<void>` | This allows you to tick and render VirtualInfiniteList.  |\n\n## LICENSE\n\n[LIL (original)](https://github.com/sveltejs/svelte-virtual-list/blob/master/LICENSE)\n\n[LIL+MIT](https://github.com/koheing/svelte-virtual-infinite-list/blob/main/LICENSE)\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 77],
		[3603, 117],
		[3610, 91],
		[3617, 34],
		[3624, 61],
		[3631, 19],
		[3638, 38],
		[3645, 117],
		[3652, 49],
		[3659, 21],
		[3666, 91],
		[3673, 39],
		[3680, 36],
		[3687, 36],
		[3694, 42],
		[3701, 59],
		[3708, 39],
		[3715, 41],
		[3722, 32],
		[3729, 146],
		[3736, 93],
		[3743, 74],
		[3750, 52],
		[3757, 60],
		[3764, 68],
		[3771, 70],
		[3778, 56],
		[3785, 23],
		[3792, 36],
		[3799, 50],
		[3806, 48],
		[3813, 2],
		[3820, 44],
		[3827, 40],
		[3834, 83],
		[3841, 37],
		[3848, 23],
		[3855, 227],
		[3862, 144],
		[3869, 61],
		[3876, 20],
		[3883, 5],
		[3890, 96],
		[3897, 46],
		[3904, 41],
		[3911, 143],
		[3918, 29],
		[3925, 48],
		[3932, 53],
		[3939, 24],
		[3946, 19],
		[3953, 28],
		[3960, 64],
		[3967, 43],
		[3974, 42],
		[3981, 38],
		[3988, 69],
		[3995, 50],
		[4002, 36],
		[4009, 38],
		[4016, 3],
		[4023, 66],
		[4030, 61],
		[4037, 84],
		[4044, 61],
		[4051, 54],
		[4058, 43],
		[4065, 45],
		[4072, 42],
		[4079, 37],
		[4086, 52],
		[4093, 16],
		[4100, 143],
		[4107, 22],
		[4114, 31],
		[4121, 41],
		[4128, 42],
		[4135, 21]
	]
}
