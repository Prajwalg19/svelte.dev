{
	"name": "svelte-tiny-virtual-list",
	"description": "Create tiny, dependency-free virtual list components for Svelte.",
	"repo_url": "https://github.com/jonasgeiler/svelte-tiny-virtual-list",
	"authors": ["jonasgeiler"],
	"homepage": "https://github.com/jonasgeiler/svelte-tiny-virtual-list",
	"downloads": 7801,
	"updated": "2024-05-28T06:05:48.177Z",
	"tags": ["ui"],
	"github_stars": 515,
	"typescript": true,
	"version": "2.1.2",
	"svelte_range": "^3.31.0",
	"last_rune_check_version": "2.1.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-tiny-virtual-list",
				"version": "2.1.2",
				"size": 139716
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "<p align=\"center\"><img src=\"https://raw.githubusercontent.com/jonasgeiler/svelte-tiny-virtual-list/main/static/logo.svg\" alt=\"ListLogo\" width=\"225\"></p>\n<h2 align=\"center\">svelte-tiny-virtual-list</h2>\n<p align=\"center\">A tiny but mighty list virtualization library, with zero dependencies &#128170;</p>\n<p align=\"center\">\n  <a href=\"https://npmjs.com/package/svelte-tiny-virtual-list\"><img src=\"https://img.shields.io/npm/v/svelte-tiny-virtual-list?style=for-the-badge\" alt=\"NPM VERSION\"></a>\n  <a href=\"https://npmjs.com/package/svelte-tiny-virtual-list\"><img src=\"https://img.shields.io/npm/dt/svelte-tiny-virtual-list?style=for-the-badge\" alt=\"NPM DOWNLOADS\"></a>\n  <a href=\"https://npmjs.com/package/svelte-tiny-virtual-list\"><img src=\"https://img.shields.io/librariesio/release/npm/svelte-tiny-virtual-list?style=for-the-badge\" alt=\"DEPENDENCIES\"></a>\n</p>\n<p align=\"center\">\n  <a href=\"#about\">About</a> •\n  <a href=\"#features\">Features</a> •\n  <a href=\"#installation\">Installation</a> •\n  <a href=\"#usage\">Usage</a> •\n  <a href=\"#examples--demo\">Examples</a> •\n  <a href=\"#license\">License</a>\n</p>\n\n## About\n\nInstead of rendering all your data in a huge list, the virtual list component just renders the items that are visible, keeping your page nice and light.  \nThis is heavily inspired by [react-tiny-virtual-list](https://github.com/clauderic/react-tiny-virtual-list) and uses most of its code and functionality!\n\n### Features\n\n- **Tiny & dependency free** – Only ~5kb gzipped\n- **Render millions of items**, without breaking a sweat\n- **Scroll to index** or **set the initial scroll offset**\n- **Supports fixed** or **variable** heights/widths\n- **Vertical** or **Horizontal** lists\n- [`svelte-infinite-loading`](https://github.com/jonasgeiler/svelte-infinite-loading) compatibility\n\n## Installation\n\n> If you're using this component in a Sapper application, make sure to install the package to `devDependencies`!  \n> [More Details](https://github.com/sveltejs/sapper-template#using-external-components)\n\nWith npm:\n\n```shell\n$ npm install svelte-tiny-virtual-list\n```\n\nWith yarn:\n\n```shell\n$ yarn add svelte-tiny-virtual-list\n```\n\nWith [pnpm](https://pnpm.js.org/) (recommended):\n\n```shell\n$ npm i -g pnpm\n$ pnpm install svelte-tiny-virtual-list\n```\n\nFrom CDN (via [unpkg](https://unpkg.com/)):\n\n```html\n<!-- UMD -->\n<script src=\"https://unpkg.com/svelte-tiny-virtual-list@^1/dist/svelte-tiny-virtual-list.js\"></script>\n\n<!-- ES Module -->\n<script src=\"https://unpkg.com/svelte-tiny-virtual-list@^1/dist/svelte-tiny-virtual-list.mjs\"></script>\n```\n\n## Usage\n\n```svelte\n<script>\n  import VirtualList from 'svelte-tiny-virtual-list';\n\n  const data = ['A', 'B', 'C', 'D', 'E', 'F', /* ... */];\n</script>\n\n<VirtualList\n    width=\"100%\"\n    height={600}\n    itemCount={data.length}\n    itemSize={50}>\n  <div slot=\"item\" let:index let:style {style}>\n    Letter: {data[index]}, Row: #{index}\n  </div>\n</VirtualList>\n```\n\nAlso works pretty well with [`svelte-infinite-loading`](https://github.com/jonasgeiler/svelte-infinite-loading):\n\n```svelte\n<script>\n  import VirtualList from 'svelte-tiny-virtual-list';\n  import InfiniteLoading from 'svelte-infinite-loading';\n\n  let data = ['A', 'B', 'C', 'D', 'E', 'F', /* ... */];\n\n  function infiniteHandler({ detail: { complete, error } }) {\n    try {\n      // Normally you'd make an http request here...\n\n      const newData = ['G', 'H', 'I', 'J', 'K', 'L', /* ... */];\n      \n      data = [...data, ...newData];\n      complete();\n    } catch (e) {\n      error();\n    }\n  }\n</script>\n\n<VirtualList\n    width=\"100%\"\n    height={600}\n    itemCount={data.length}\n    itemSize={50}>\n  <div slot=\"item\" let:index let:style {style}>\n    Letter: {data[index]}, Row: #{index}\n  </div>\n\n  <div slot=\"footer\">\n    <InfiniteLoading on:infinite={infiniteHandler} />\n  </div>\n</VirtualList>\n```\n\n### Props\n\n| Property          | Type                                              | Required? | Description                                                                                                                                                                                                                                                                                                                                                                                                                           |\n| :---------------- | :------------------------------------------------ | :-------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| width             | `number \\| string`\\*                              | ✓         | Width of List. This property will determine the number of rendered items when scrollDirection is `'horizontal'`.                                                                                                                                                                                                                                                                                                                      |\n| height            | `number \\| string`\\*                              | ✓         | Height of List. This property will determine the number of rendered items when scrollDirection is `'vertical'`.                                                                                                                                                                                                                                                                                                                       |\n| itemCount         | `number`                                          | ✓         | The number of items you want to render                                                                                                                                                                                                                                                                                                                                                                                                |\n| itemSize          | `number \\| number[] \\| (index: number) => number` | ✓         | Either a fixed height/width (depending on the scrollDirection), an array containing the heights of all the items in your list, or a function that returns the height of an item given its index: `(index: number): number`                                                                                                                                                                                                            |\n| scrollDirection   | `string`                                          |           | Whether the list should scroll vertically or horizontally. One of `'vertical'` (default) or `'horizontal'`.                                                                                                                                                                                                                                                                                                                           |\n| scrollOffset      | `number`                                          |           | Can be used to control the scroll offset; Also useful for setting an initial scroll offset                                                                                                                                                                                                                                                                                                                                            |\n| scrollToIndex     | `number`                                          |           | Item index to scroll to (by forcefully scrolling if necessary)                                                                                                                                                                                                                                                                                                                                                                        |\n| scrollToAlignment | `string`                                          |           | Used in combination with `scrollToIndex`, this prop controls the alignment of the scrolled to item. One of: `'start'`, `'center'`, `'end'` or `'auto'`. Use `'start'` to always align items to the top of the container and `'end'` to align them bottom. Use `'center`' to align them in the middle of the container. `'auto'` scrolls the least amount possible to ensure that the specified `scrollToIndex` item is fully visible. |\n| scrollToBehaviour | `string`                                          |           | Used in combination with `scrollToIndex`, this prop controls the behaviour of the scrolling. One of: `'auto'`, `'smooth'` or `'instant'` (default).                                                                                                                                                                                                                                                                                   |\n| stickyIndices     | `number[]`                                        |           | An array of indexes (eg. `[0, 10, 25, 30]`) to make certain items in the list sticky (`position: sticky`)                                                                                                                                                                                                                                                                                                                             |\n| overscanCount     | `number`                                          |           | Number of extra buffer items to render above/below the visible items. Tweaking this can help reduce scroll flickering on certain browsers/devices.                                                                                                                                                                                                                                                                                    |\n| estimatedItemSize | `number`                                          |           | Used to estimate the total size of the list before all of its items have actually been measured. The estimated total height is progressively adjusted as items are rendered.                                                                                                                                                                                                                                                          |\n| getKey            | `(index: number) => any`                          |           | Function that returns the key of an item in the list, which is used to uniquely identify an item. This is useful for dynamic data coming from a database or similar. By default, it's using the item's index.                                                                                                                                                                                                                         |\n\n_\\* `height` must be a number when `scrollDirection` is `'vertical'`. Similarly, `width` must be a number if `scrollDirection` is `'horizontal'`_\n\n### Slots\n\n- `item` - Slot for each item\n  - Props:\n    - `index: number` - Item index\n    - `style: string` - Item style, must be applied to the slot (look above for example)\n- `header` - Slot for the elements that should appear at the top of the list\n- `footer` - Slot for the elements that should appear at the bottom of the list (e.g. `InfiniteLoading` component from `svelte-infinite-loading`)\n\n### Events\n\n- `afterScroll` - Fired after handling the scroll event\n  - `detail` Props:\n    - `event: ScrollEvent` - The original scroll event\n    - `offset: number` - Either the value of `wrapper.scrollTop` or `wrapper.scrollLeft`\n- `itemsUpdated` - Fired when the visible items are updated\n  - `detail` Props:\n    - `start: number` - Index of the first visible item\n    - `end: number` - Index of the last visible item\n  \n### Methods\n\n- `recomputeSizes(startIndex: number)` - This method force recomputes the item sizes after the specified index (these are normally cached).\n\n`VirtualList` has no way of knowing when its underlying data has changed, since it only receives a itemSize property. If the itemSize is a `number`, this isn't an issue, as it can compare before and after values and automatically call `recomputeSizes` internally.\nHowever, if you're passing a function to `itemSize`, that type of comparison is error prone. In that event, you'll need to call `recomputeSizes` manually to inform the `VirtualList` that the size of its items has changed.\n\n#### Use the methods like this:\n\n```svelte\n<script>\n  import { onMount } from 'svelte';\n  import VirtualList from 'svelte-tiny-virtual-list';\n\n  const data = ['A', 'B', 'C', 'D', 'E', 'F', /* ... */];\n  \n  let virtualList;\n  \n  function handleClick() {\n    virtualList.recomputeSizes(0);\n  }\n</script>\n\n<button on:click={handleClick}>Recompute Sizes</button>\n\n<VirtualList\n        bind:this={virtualList}\n        width=\"100%\"\n        height={600}\n        itemCount={data.length}\n        itemSize={50}>\n  <div slot=\"item\" let:index let:style {style}>\n    Letter: {data[index]}, Row: #{index}\n  </div>\n</VirtualList>\n```\n\n### Styling\n\nYou can style the elements of the virtual list like this:\n\n```svelte\n<script>\n  import VirtualList from 'svelte-tiny-virtual-list';\n\n  const data = ['A', 'B', 'C', 'D', 'E', 'F', /* ... */];\n</script>\n\n<div class=\"list\">\n  <VirtualList\n      width=\"100%\"\n      height={600}\n      itemCount={data.length}\n      itemSize={50}>\n    <div slot=\"item\" let:index let:style {style}>\n      Letter: {data[index]}, Row: #{index}\n    </div>\n  </VirtualList>\n</div>\n\n<style>\n  .list :global(.virtual-list-wrapper) {\n    background-color: #0f0;\n    /* ... */\n  }\n  \n  .list :global(.virtual-list-inner) {\n    background-color: #f00;\n    /* ... */\n  }\n</style>\n```\n\n## Examples / Demo\n\n- **Basic setup**\n    - [Elements of equal height](https://svelte.dev/repl/e3811b44f311461dbbc7c2df830cde68)\n    - [Variable heights](https://svelte.dev/repl/93795c812f8d4541b6b942535b2ed855)\n    - [Horizontal list](https://svelte.dev/repl/4cd8acdfc96843b68265a19451b1bf3d)\n- **Controlled props**\n    - [Scroll to index](https://svelte.dev/repl/bdf5ceb63f6e45f7bb14b90dbd2c11d9)\n    - [Controlled scroll offset](https://svelte.dev/repl/68576a3919c44033a74416d4bc4fde7e)\n- [Hacker News using svelte-infinite-loading](https://svelte.dev/repl/2239cc4c861c41d18abbc858248f5a0d)\n\n## License\n\n[MIT License](https://github.com/jonasgeiler/svelte-tiny-virtual-list/blob/master/LICENSE)\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 7038],
		[3603, 7939],
		[3610, 6912],
		[3617, 8499],
		[3624, 7250],
		[3631, 8189],
		[3638, 6953],
		[3645, 5216],
		[3652, 6132],
		[3659, 7881],
		[3666, 8607],
		[3673, 10465],
		[3680, 8922],
		[3687, 9262],
		[3694, 9008],
		[3701, 9746],
		[3708, 9541],
		[3715, 9987],
		[3722, 9625],
		[3729, 10593],
		[3736, 8135],
		[3743, 8162],
		[3750, 8668],
		[3757, 9190],
		[3764, 8110],
		[3771, 7411],
		[3778, 7886],
		[3785, 8578],
		[3792, 8436],
		[3799, 8773],
		[3806, 8714],
		[3813, 10040],
		[3820, 9413],
		[3827, 8770],
		[3834, 7575],
		[3841, 8173],
		[3848, 7772],
		[3855, 7624],
		[3862, 7687],
		[3869, 11001],
		[3876, 7417],
		[3883, 12427],
		[3890, 9210],
		[3897, 9825],
		[3904, 9221],
		[3911, 9574],
		[3918, 10330],
		[3925, 9948],
		[3932, 9993],
		[3939, 9574],
		[3946, 8981],
		[3953, 11299],
		[3960, 9215],
		[3967, 13990],
		[3974, 9729],
		[3981, 13664],
		[3988, 13543],
		[3995, 12345],
		[4002, 11405],
		[4009, 10880],
		[4016, 9377],
		[4023, 13731],
		[4030, 11071],
		[4037, 10866],
		[4044, 11259],
		[4051, 9289],
		[4058, 9435],
		[4065, 10538],
		[4072, 9637],
		[4079, 9887],
		[4086, 8721],
		[4093, 8018],
		[4100, 8335],
		[4107, 7560],
		[4114, 7801],
		[4121, 7630],
		[4128, 6787],
		[4135, 6772]
	]
}
