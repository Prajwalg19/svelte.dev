{
	"name": "@cafebazaar/async-actions",
	"description": "Handle async actions with loading states in Svelte.",
	"repo_url": "https://github.com/cafebazaar/async-actions",
	"authors": ["_mahdude", "amir_mousavi", "nainemom"],
	"homepage": "https://github.com/cafebazaar/async-actions#readme",
	"downloads": 7,
	"updated": "2021-01-01T12:03:11.456Z",
	"tags": ["miscellaneous"],
	"github_stars": 20,
	"typescript": false,
	"version": "0.4.4",
	"svelte_range": "^3.24.0",
	"last_rune_check_version": "0.4.4",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@cafebazaar/async-actions",
				"version": "0.4.4",
				"size": 337810
			}
		],
		"dependencies": [],
		"circular": []
	},
	"legacy_svelte": false,
	"readme": "<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/2771377/95751339-57fbe900-0cab-11eb-8eda-39d8e2807fca.png\" />\n</p>\n\n## Overview\n\nHandling async actions(like API calls) is so tedious. Showing loading state and handling options like debouncing needs a lot of code duplications.\n\nAsync-Actions proposes a more efficient way of handling those actions without code duplications.\n\n![Async Action Before/After Comparison](https://user-images.githubusercontent.com/2771377/96008074-0a6ab200-0e4c-11eb-8440-90026e4cf449.png)\n\n## How It Works\n\nActions are just simple functions. Async-Actions adds `state`, `error`, and `data` properties to your functions and dynamically updates these properties.\n\n#### Action lifecycle and possible values of the `state` property\n\n| Value        | Description                                                                                           |\n| ------------ | ----------------------------------------------------------------------------------------------------- |\n| notInitiated | Action has not been called yet.                                                                       |\n| pending      | Action has been called, but it has not been completed yet.                                            |\n| fulfilled    | Action has been completed successfully, and the result value is accessible using the `data` property. |\n| rejected     | Action has been rejected with an error which is accessible using `error` property.                    |\n\n## Installation\n\nYou can install Async-Actions with NPM or Yarn.\n\n```bash\nnpm install @cafebazaar/async-actions --save\n```\n\nor\n\n```bash\nyarn add @cafebazaar/async-actions\n```\n\n## Usage\n\nYou can use Async-Actions in [pure JS](#pure-js). Also there are built in extensions for [Vue.js](#vuejs) and [Svelte](#svelte).\n\n### Vue.js\n\n`Vue.observable` provided by default as the observable function in the Vue version, and you don't need to pass it. There are two ways to use Async-Actions in a Vue.js project.\n\n#### 1. Define actions in component options\n\nFor declaring async-actions in this way, you need to import the plugin and `use` it as a Vue plugin to enable the functionality globally on all components.\n\n```javascript\nimport Vue from 'vue';\nimport AsyncActions from '@cafebazaar/async-actions/vue';\n\nVue.use(AsyncActions);\n```\n\nThen, you can define async-actions in all components using `asyncActions` property.\n\n```javascript\n<template>\n  <div>\n    <div v-if=\"getUsers.state === 'pending'\">\n      Fetching Users List. Please Wait...\n    </div>\n    <div v-else-if=\"getUsers.error\">\n      Oops. Somthing Went Wrong :(\n    </div>\n    <div v-else>\n      <ul>\n        <li v-for=\"user in getUsers.data\" :key=\"user.id\">\n          {{ user.name }}\n        </li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'UsersList',\n  asyncActions: {\n    getUsers: {\n      handler() {\n        return someApiCall();\n      },\n      immediate: true,\n      initialData: [],\n      // other options...\n    },\n  },\n};\n</script>\n```\n\nThe List of all options is available [here](#options).\n\nIf an action does not need any options, you can define it as a function for the sake of simplicity.\n\n```javascript\n<script>\nimport { loginApi } from './api';\n\nexport default {\n  name: 'Login',\n  asyncActions: {\n    login() {\n      return loginApi();\n    }\n  },\n};\n</script>\n```\n\n#### Options\n\n| Property    | Description                                                             | type     | Required | Default |\n| ----------- | ----------------------------------------------------------------------- | -------- | -------- | ------- |\n| handler     | action's handler                                                        | function | true     |         |\n| immediate   | determines handler function should be called immediately after creation | boolean  | false    | false   |\n| debounce    | debounce time in miliseconds                                            | number   | false    | 0       |\n| initialData | initial value of `data` property of action                              | any      | false    | null    |\n\n#### 2. Create asyncActions outside of components\n\nIn this way, you can create asyncActions anywhere and use them as regular functions.\n\n```javascript\n// usersActions.js\n\nimport { asyncAction } from '@cafebazaar/async-actions/vue';\nimport { someApiCall } from './api';\n\nexport const getUsers = asyncAction(() => someApiCall(), {\n  initialData: [],\n});\n```\n\nAnd after that, you can import and use it inside Vue components:\n\n```javascript\n<template>\n  <div>\n    <div v-if=\"getUsersAction.state === 'pending'\">\n      Fetching Users List. Please Wait...\n    </div>\n    <div v-else-if=\"getUsersAction.error\">\n      Oops. Somthing Went Wrong :(\n    </div>\n    <div v-else>\n      <ul>\n        <li v-for=\"user in getUsersAction.data\" :key=\"user.id\">\n          {{ user.name }}\n        </li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getUsers } from './usersActions';\n\nexport default {\n  name: 'UsersList',\n  computed: {\n    getUsersAction(){\n      return getUsers;\n    }\n  },\n  created(){\n    getUsers();\n  }\n};\n```\n\n### Svelte\n\nIn the Svelte version, `Store.writable` is used for every observable prop(`state`, `data`, and `error`) and, you don't need to provide `observableFn`. You can simply do:\n\n```html\n<script>\n  import asyncAction from '@cafebazaar/async-actions/src/svelte';\n  let myPromise = asyncAction(function () {\n    return new Promise((resolve) => {\n      setTimeout(() => resolve('My Data!!'), 5000);\n    });\n  }, options);\n\n  let { state, data, error } = myPromise;\n\n  // execute async function\n  myPromise();\n</script>\n\n<main>\n  <ul>\n    <li>Status: {$state}</li>\n    <li>Data: {$data}</li>\n    <li>Error: {$error}</li>\n  </ul>\n</main>\n```\n\nThe List of all options is available [here](#options).\n\nYou can use asyncAction outside of svelte file and import it and use it directly inside DOM.\n\n### Pure JS\n\nYou can define an async-action using `asyncAction` method which gets a handler function and configuration options as its parameters. When using the pure version, you must provide an observable function which used for updating action properties.\n\n```javascript\nimport { asyncAction } from '@cafebazaar/async-actions/pure';\nimport customObservable from 'utils/observable';\n\nconst myAsyncAction = asyncAction(\n  Promise.resolve('Hello'),\n  options,\n  customObservable\n);\n```\n\nList of all options are available [here](#options).\n\n## License\n\n[MIT](https://github.com/cafebazaar/async-actions/blob/master/LICENSE)\n",
	"downloads_history": [
		[3589, 96],
		[3596, 153],
		[3603, 77],
		[3610, 122],
		[3617, 147],
		[3624, 96],
		[3631, 40],
		[3638, 81],
		[3645, 68],
		[3652, 59],
		[3659, 10],
		[3666, 17],
		[3673, 2],
		[3687, 1],
		[3694, 15],
		[3701, 7],
		[3708, 4],
		[3715, 8],
		[3722, 12],
		[3729, 6],
		[3736, 5],
		[3743, 2],
		[3750, 6],
		[3757, 3],
		[3764, 12],
		[3771, 3],
		[3778, 1],
		[3785, 4],
		[3792, 9],
		[3799, 6],
		[3806, 2],
		[3813, 9],
		[3820, 3],
		[3827, 2],
		[3834, 3],
		[3841, 3],
		[3848, 2],
		[3855, 10],
		[3862, 56],
		[3869, 2],
		[3876, 12],
		[3883, 1],
		[3890, 2],
		[3897, 2],
		[3904, 19],
		[3911, 4],
		[3918, 1],
		[3925, 1],
		[3932, 11],
		[3939, 20],
		[3946, 23],
		[3953, 3],
		[3960, 2],
		[3967, 3],
		[3974, 18],
		[3981, 5],
		[3988, 1],
		[3995, 1],
		[4002, 10],
		[4009, 15],
		[4016, 7],
		[4023, 4],
		[4030, 2],
		[4037, 6],
		[4044, 13],
		[4051, 10],
		[4058, 10],
		[4065, 2],
		[4072, 6],
		[4079, 5],
		[4086, 22],
		[4093, 1],
		[4100, 30],
		[4107, 20],
		[4114, 7],
		[4121, 13],
		[4128, 5]
	]
}
