{
	"name": "svelte-kbc",
	"description": "Configure keyboard inputs and events in Svelte apps.",
	"repo_url": "https://github.com/AlexWarnes/svelte-kbc",
	"authors": ["a_warnes"],
	"homepage": "https://github.com/AlexWarnes/svelte-kbc#readme",
	"downloads": 9,
	"updated": "2024-11-07T21:09:29.475Z",
	"tags": ["miscellaneous"],
	"github_stars": 22,
	"typescript": true,
	"version": "0.3.0",
	"svelte_range": "^5.0.0",
	"kit_range": "^2.0.0",
	"last_rune_check_version": "0.3.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-kbc",
				"version": "0.3.0",
				"size": 21104
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-kbc\n\nConfigure a rune for keyboard inputs and events in any Svelte app.\n\n[Example on StackBlitz](https://stackblitz.com/edit/example-svelte-kbc?file=README.md) \n\n# Getting Started\n\n1. Create an array of controls with a name and key(s) or events.\n\n```js\nconst config = [\n  // individual key presses\n  { name: 'forward', keys: ['ArrowUp', 'w', 'W'] },\n  { name: 'jump', keys: [' ', 'Space'] },\n  { name: 'click', events: ['click'] },\n]\n```\n**Note:**  _Only certain events are currently supported. See `KbcEvent` types below._\n\n2. Wrap your application (or a part of your application) in `<KeyboardControls />` to create a context from your config. Any child component can then access the control rune with the names you provided.\n\n```html\n<KeyboardControls {config}>\n  <!-- Anything in here can access the control rune with properties 'forward', 'jump', 'click' -->\n  <BrowserGame />\n</KeyboardControls>\n```\n\n3. In a child component, the `useKbc()` hook will return the controls rune, with the properties set in the config. From there, handle the events however you need to:\n\n```js\n  const kbc = useKbc();\n\n  $effect(() => {\n    if (kbc.forward) handleMoveForward()\n    if (kbc.forward && kbc.jump) handleForwardJump()\n    if (kbc.click) handleClickThings()\n  })\n ```\n\nAlternatively, you can destructure the control rune and maintain reactivity using $derived:\n```js\nconst { forward, jump, click } = $derived(useKbc());\n\n$effect(() => {\n  if (forward) handleMoveForward()\n  if (forward && jump) handleForwardJump()\n  if (click) handleClickThings()\n})\n\n```\n**Note:** The keys and events will \"emit\" their respective `event` objects when they occur, otherwise they will \"emit\" `false`\n\n# `<KeyboardControls />` Properties\n\n```ts\n// The keyboard input configuration. Default is []\nconfig: KeyboardControl[] = [];\n\n// The event property to listen for key events. Default is \"key\"\neventProperty: string = \"key\";\n\n// A boolean to help with debugging. This will log your input properties, and the value returned by event[eventProperty]\ndebug: boolean = false;\n```\n\n# Predefined Configs\nSome predefined key configurations are available out-of-the-box to speed up development. You can extend these or easily rename controls.\n\n```html\n<KeyboardControls config={wasdConfig()}>\n  <BrowserGame />\n</KeyboardControls>\n```\n\n<details>\n  <summary>wasdConfig</summary>\n\n```ts\n[\n  { name: 'w', keys: ['w', 'W', 'ArrowUp'] },\n  { name: 'a', keys: ['a', 'A', 'ArrowLeft'] },\n  { name: 's', keys: ['s', 'S', 'ArrowDown'] },\n  { name: 'd', keys: ['d', 'D', 'ArrowRight'] },\n  { name: 'shift', keys: ['Shift'] },\n  { name: 'space', keys: [' ', 'Space'] }\n]\n```\n</details>\n\n<details>\n  <summary>alphaConfig</summary>\n\n```ts\n[\n  { name: 'a', keys: ['a', 'A'] },\n  { name: 'b', keys: ['b', 'B'] },\n  { name: 'c', keys: ['c', 'C'] },\n  { name: 'd', keys: ['d', 'D'] },\n  { name: 'e', keys: ['e', 'E'] },\n  { name: 'f', keys: ['f', 'F'] },\n  { name: 'g', keys: ['g', 'G'] },\n  { name: 'h', keys: ['h', 'H'] },\n  { name: 'i', keys: ['i', 'I'] },\n  { name: 'j', keys: ['j', 'J'] },\n  { name: 'k', keys: ['k', 'K'] },\n  { name: 'l', keys: ['l', 'L'] },\n  { name: 'm', keys: ['m', 'M'] },\n  { name: 'n', keys: ['n', 'N'] },\n  { name: 'o', keys: ['o', 'O'] },\n  { name: 'p', keys: ['p', 'P'] },\n  { name: 'q', keys: ['q', 'Q'] },\n  { name: 'r', keys: ['r', 'R'] },\n  { name: 's', keys: ['s', 'S'] },\n  { name: 't', keys: ['t', 'T'] },\n  { name: 'u', keys: ['u', 'U'] },\n  { name: 'v', keys: ['v', 'V'] },\n  { name: 'w', keys: ['w', 'W'] },\n  { name: 'x', keys: ['x', 'X'] },\n  { name: 'y', keys: ['y', 'Y'] },\n  { name: 'z', keys: ['z', 'Z'] }\n]\n```\n\n</details>\n\n<details>\n  <summary>numericConfig</summary>\n\n```ts\n[\n  { name: 'key0', keys: ['0'] },\n  { name: 'key1', keys: ['1'] },\n  { name: 'key2', keys: ['2'] },\n  { name: 'key3', keys: ['3'] },\n  { name: 'key4', keys: ['4'] },\n  { name: 'key5', keys: ['5'] },\n  { name: 'key6', keys: ['6'] },\n  { name: 'key7', keys: ['7'] },\n  { name: 'key8', keys: ['8'] },\n  { name: 'key9', keys: ['9'] }\n]\n```\n</details>\n\n## Modifying Predefined Config Names\nUnderstandably you might want to rename some of these predefined controls. For example: you're using the `wasdConfig` but want to rename _space_ to be _jump_. \n\nJust pass in a name mapping object when you invoke the config:\n\n```ts\nwasdConfig({ space: 'jump' })\n```\n\nNow your control rune properties will be named `w, a, s, d, shift, jump`\n\n# Types\n\n### KeyboardControl\n```ts\n{\n  name: string;\n  keys?: KeyConfig[];\n  events?: KbcEvent[];\n}\n```\n\n### KeyConfig\n```ts\nstring | string[]\n```\n\n### KbcEvent\n```ts\n'click' | 'pointerdown' | 'pointerup' | 'touchstart' | 'touchend' | 'scroll'\n```",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 13],
		[3596, 8],
		[3603, 7],
		[3610, 9],
		[3617, 13],
		[3624, 32],
		[3631, 5],
		[3638, 2],
		[3645, 7],
		[3652, 12],
		[3659, 8],
		[3666, 14],
		[3673, 9],
		[3680, 12],
		[3687, 7],
		[3694, 23],
		[3701, 15],
		[3708, 12],
		[3715, 5],
		[3722, 4],
		[3729, 5],
		[3736, 3],
		[3743, 5],
		[3757, 8],
		[3764, 10],
		[3771, 13],
		[3778, 17],
		[3785, 6],
		[3792, 6],
		[3799, 9],
		[3806, 7],
		[3813, 11],
		[3820, 6],
		[3827, 4],
		[3834, 10],
		[3841, 53],
		[3848, 18],
		[3855, 12],
		[3862, 3],
		[3869, 6],
		[3876, 13],
		[3883, 5],
		[3890, 25],
		[3897, 12],
		[3904, 9],
		[3911, 5],
		[3918, 14],
		[3925, 3],
		[3932, 7],
		[3939, 4],
		[3946, 9],
		[3953, 4],
		[3960, 228],
		[3967, 28],
		[3974, 13],
		[3981, 8],
		[3988, 11],
		[3995, 3],
		[4002, 1],
		[4009, 3],
		[4016, 5],
		[4023, 14],
		[4030, 7],
		[4037, 20],
		[4044, 35],
		[4051, 23],
		[4058, 8],
		[4065, 4],
		[4072, 6],
		[4079, 26],
		[4086, 1],
		[4093, 14],
		[4100, 11],
		[4107, 33],
		[4114, 9],
		[4121, 14],
		[4128, 6]
	]
}
