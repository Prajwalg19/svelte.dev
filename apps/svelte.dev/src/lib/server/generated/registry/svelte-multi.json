{
	"name": "svelte-multi",
	"description": "Create multi-step forms with Svelte.",
	"repo_url": "https://github.com/MirrorBytes/phorm-utils",
	"authors": ["mirrorbytes"],
	"homepage": "https://github.com/MirrorBytes/phorm-utils/tree/main/packages/multi",
	"downloads": 13,
	"updated": "2021-01-19T04:03:21.161Z",
	"tags": ["ui"],
	"github_stars": 2,
	"typescript": true,
	"version": "0.6.2",
	"svelte_range": "^3.31.2",
	"last_rune_check_version": "0.6.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-multi",
				"version": "0.6.2",
				"size": 457013
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "<div align=\"center\">\n  <img src=\"https://github.com/MirrorBytes/phorm-utils/blob/main/packages/multi/Logo.png\" />\n</div>\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Concept](#concept)\n- [Components](#components)\n- [Props](#props)\n  - [Form](#form)\n  - [Step](#step)\n  - [Field](#field)\n  - [ToC (Table of Contents)](#toc-table-of-contents)\n- [Examples](#examples)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Concept\n\nAllow this library to contain all state management of forms whether they be\nsingle step, or multiple.\n\n## Components\n\nThere are four exposed components that can be used as of now:\n\n- [Form][form]\n- [Step][step]\n- [Field][field]\n- [ToC][toc]\n\n`Field` has several underlying components:\n\n- [Checkbox][checkbox]\n  - This contains checkbox groups\n- [Input][input]\n  - This contains [input field types][types]:\n    - Text\n    - Password\n    - Email\n    - Search\n    - Number\n    - Tel\n    - Range\n    - File\n    - Date\n    - Datetime Local\n- [Radio][radio]\n- [Select][select]\n- [Textarea][textarea]\n\nThere's an additional component that is used when giving `Form` a config: `Section`.\n\n## Props\n\nYou can pass any props into the exposed components and they'll be passed to the primary element. However, there are a few exceptions:\n\n### Form\n\n`Form` exposes several props which are related to the multi-step control:\n\n- `prev`, this is a function for form control\n- `next`, this is a function for form control\n- `controlsClass`, custom class passed to the controls container\n\n`Form` also has a `config` prop w/ optional content wrapper:\n\n- `config`, used for generating form (take a look at [examples](#examples))\n- `ContentWrap`, svelte component used to wrap sections\n\n`Form` passes two props back as well: `store` and `multi`. These can be accessed using the `let:` directive:\n\n```html\n<script lang=\"ts\">\n  import { Form } from 'svelte-multi';\n</script>\n\n<Form let:store let:multi>\n...\n</Form>\n```\n\n`store` can be passed into `Form` if there's a separate implentation of `IndexableJsonValue` you'd prefer:\n\n```html\n<script lang=\"ts\">\n  import { writable } from 'svelte/store';\n  import type { Writable } from 'svelte/store';\n  import { Form } from 'svelte-multi';\n  import type { IndexableJsonValue } from 'svelte-multi';\n\n  const store: Writable<IndexableJsonValue> = writable({});\n</script>\n\n<Form {store}>\n...\n</Form>\n```\n\n`Form` also controls a few built-in function directives with returned `CustomEvent`s:\n\n- `on:submit`, with preventDefault, to pass the store back to you (**THIS DOES PREVENT ACTION FROM BEING USED**):\n\n```html\n<script lang=\"ts\">\n  import { Form } from 'svelte-multi';\n  import type { SubmitType } from 'svelte-multi';\n\n  const onSubmit = (ev: CustomEvent<SubmitType>) => {\n    const {\n      e,      // Original submit event\n      store,  // Will either be form control store, or one you declared\n    } = ev.detail;\n\n    console.log(e, store);\n  };\n</script>\n\n<Form on:submit={onSubmit}>\n...\n</Form>\n```\n\n- `on:contextmenu`:\n\n```html\n<script lang=\"ts\">\n  import { Form } from 'svelte-multi';\n\n  const onContextMenu = (ev: CustomEvent) => {\n    const {\n      e,      // Original submit event\n    } = ev.detail;\n\n    console.log(e);\n  };\n</script>\n\n<Form on:contextmenu={onContextMenu}>\n...\n</Form>\n```\n\n- `on:click`:\n\n```html\n<script lang=\"ts\">\n  import { Form } from 'svelte-multi';\n\n  const onClick = (ev: CustomEvent) => {\n    const {\n      e,      // Original submit event\n    } = ev.detail;\n\n    console.log(e);\n  };\n</script>\n\n<Form on:click={onClick}>\n...\n</Form>\n```\n\nFinally, `Form` has a few named slots that can be used as controls, `prev`, `next`, and `submit`:\n\n```html\n<script lang=\"ts\">\n  import { Form } from 'svelte-multi';\n</script>\n\n<Form let:prev let:next>\n...\n\n  <button slot=\"prev\" on:click|preventDefault={prev}>Prev</button>\n  <button slot=\"next\" on:click|preventDefault={next}>Next</button>\n  <input slot=\"submit\" type=\"submit\" placeholder=\"Submit\" />\n</Form>\n```\n\n### Step\n\n`Step` is technically just a wrapper, and exposes only a single prop:\n\n- `name`, which is used as the overall header/label for the step.\n\n### Field\n\n`Field` is a bit more complex as it takes `field` (which are the field props) and `initial`.\n\n- `field` consists of the following information:\n\n```typescript\ntype FieldProps = {\n  id: string;\n  name: string;\n  type: FieldType;\n  disabled?: Maybe<boolean>;\n  readonly?: Maybe<boolean>;\n\n  required?: Maybe<boolean>;\n\n  /** For text, password, email, search, tel, textarea, or number fields */\n  placeholder?: Maybe<string>;\n  /** For text, password, email, search, tel, select, or textarea fields */\n  autocomplete?: Maybe<boolean>;\n  /** For number, range, date, and datetime-local fields */\n  step?: Maybe<number>;\n  /** For number, range, date, and datetime-local fields */\n  min?: Maybe<number>;\n  /** For number, range, date, and datetime-local fields */\n  max?: Maybe<number>;\n  /** For select and file fields */\n  multiple?: Maybe<boolean>;\n  /** For textarea fields */\n  rows?: Maybe<number>;\n  /** For textarea fields */\n  cols?: Maybe<number>;\n  /** For tel fields */\n  pattern?: Maybe<string>;\n  /** For file fields */\n  accept?: Maybe<string>;\n\n  /** Optional prop for any field */\n  label?: Maybe<LabelProps>;\n  /** Optional prop for any field */\n  classes?: string;\n\n  /** Optional path for nested values in store */\n  path?: Maybe<Path>;\n  /** For radio and checkbox fields */\n  items?: Maybe<Item[]>;\n};\n```\n\nThe only required props are `id`, `name`, and `type`.\n\nYou'll notice a few other types in here, which consist of `FieldType`, `LabelProps`, `Path`, and `Item`; here they are:\n\n- `FieldType`\n\n```typescript\nenum FieldType {\n  Text = 'text',\n  Password = 'password',\n  Email = 'email',\n  Search = 'search',\n  Number = 'number',\n  Textarea = 'textarea',\n  Date = 'date',\n  DatetimeLocal = 'datetime-local',\n  Tel = 'tel',\n  Range = 'range',\n  File = 'file',\n  Checkbox = 'checkbox',\n  Select = 'select',\n  Radio = 'radio',\n}\n```\n\n- `LabelProps`\n\n```typescript\ntype LabelProps = {\n  /** Printed text of label */\n  text: string;\n\n  /** Optional prop for label */\n  classes?: string;\n};\n```\n\n- `Path`\n\n```typescript\n/** Array of strings and numbers that allow access to deep nested values in form stores. */\ntype Path = Array<string | number>;\n```\n\n- `Item`\n\n```typescript\ntype Item = {\n  /** Unique ID of item */\n  id: string;\n\n  /** Internal value of item */\n  value: string;\n\n  /** Printed text of item */\n  text: string;\n\n  /** Classes used by item wrapper */\n  wrapperClasses?: string;\n\n  /** Classes used by item text */\n  textClasses?: string;\n};\n```\n\nThat's a bit much, but it's fairly straight forward.\n- `FieldType` are the types that are allowed without adverse effects.\n- `LabelProps` are the props passed to the optional label.\n- `Path` is used with the `store` to access nested values:\n\n```html\n<script lang=\"ts\">\n  import { writable } from 'svelte/store';\n  import { Form, Field, FieldType } from 'svelte-multi';\n\n  const store = writable({\n    test: {\n      testing: [\n        {\n          value: '',\n        },\n      ],\n    },\n  });\n</script>\n\n<Form {store}>\n  <Field\n    {store}\n    field={{ id: '1', name: '1', type: FieldType.Text, path: ['test', 'testing', 0, 'value'] }} />\n</Form>\n```\n\nThis allows for the value in store to be updated properly in the nest.\n\n- `Item` is used with radio and checkbox as these are group fields:\n\n```html\n<script lang=\"ts\">\n  import { Form, Field, FieldType } from 'svelte-multi';\n</script>\n\n<Form let:store>\n  <Field\n    {store}\n    field={{\n      id: '1',\n      name: '1',\n      type: FieldType.Radio,\n      items: [\n        { id: 'item1', value: 'item1', text: 'item1' },\n        { id: 'item2', value: 'item2', text: 'item2' }\n      ],\n    }} />\n</Form>\n```\n\nNote that radio will return a string value, and checkbox will return an array of string values.\n\n### ToC (Table of Contents)\n\nThis is a generic ToC that uses the form name, steps, and sections (generated by config).\nThere are several exposed props:\n\n- `formName`\n- `stepsWithSections`, of type `Step[]`\n- `stepsWithoutSections`, of type `Writable<IndexableJsonValue>`, this would be `multi` returned from `Form`\n- `sections`, of type `Section[]`\n- `stepClass`\n- `sectionsWrapperClass`\n- `sectionsClass`\n\nThe class props will be passed like this:\n\n```html\n<h1>{formName}</h1>\n\n<ul {...$$restProps}>\n  ...\n\n  {#each steps as step}\n    <li class={stepClass}>\n      ...\n\n      <ul class={sectionsWrapperClass}> <!-- Used only when passing generated sections -->\n        ...\n\n        {#each step.sections as section}\n          <li class={sectionsClass}>\n            ...\n          </li>\n        {/each}\n\n        ...\n      </ul>\n\n      ...\n    </li>\n  {/each}\n\n  ...\n</ul>\n```\n\n## Examples\n\n- [Manual][ex_manual]\n- [Config][ex_config]\n\n\n\n\n[form]: https://github.com/MirrorBytes/phorm-utils/blob/main/packages/multi/runtime/wrappers/Form.svelte\n[step]: https://github.com/MirrorBytes/phorm-utils/blob/main/packages/multi/runtime/wrappers/Step.svelte\n[field]: https://github.com/MirrorBytes/phorm-utils/blob/main/packages/multi/runtime/wrappers/Field.svelte\n[toc]: https://github.com/MirrorBytes/phorm-utils/blob/main/packages/multi/runtime/organization/ToC.svelte\n[types]: https://github.com/MirrorBytes/phorm-utils/blob/main/packages/multi/runtime/types.ts#L17\n[checkbox]: https://github.com/MirrorBytes/phorm-utils/blob/main/packages/multi/runtime/controls/Checkbox.svelte\n[input]: https://github.com/MirrorBytes/phorm-utils/blob/main/packages/multi/runtime/controls/Input.svelte\n[radio]: https://github.com/MirrorBytes/phorm-utils/blob/main/packages/multi/runtime/controls/Radio.svelte\n[select]: https://github.com/MirrorBytes/phorm-utils/blob/main/packages/multi/runtime/controls/Select.svelte\n[textarea]: https://github.com/MirrorBytes/phorm-utils/blob/main/packages/multi/runtime/controls/Textarea.svelte\n\n[ex_manual]: https://github.com/MirrorBytes/phorm-utils/blob/main/packages/multi/examples/manual\n[ex_config]: https://github.com/MirrorBytes/phorm-utils/blob/main/packages/multi/examples/config\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 1],
		[3603, 22],
		[3610, 30],
		[3617, 5],
		[3624, 2],
		[3631, 2],
		[3638, 12],
		[3645, 28],
		[3652, 2],
		[3659, 2],
		[3666, 25],
		[3680, 1],
		[3694, 1],
		[3701, 23],
		[3708, 1],
		[3715, 2],
		[3722, 2],
		[3729, 23],
		[3736, 15],
		[3750, 1],
		[3757, 2],
		[3764, 5],
		[3771, 18],
		[3778, 3],
		[3785, 2],
		[3792, 2],
		[3799, 1],
		[3806, 6],
		[3820, 1],
		[3827, 1],
		[3834, 9],
		[3848, 2],
		[3855, 112],
		[3862, 4],
		[3869, 1],
		[3883, 2],
		[3890, 22],
		[3897, 4],
		[3904, 3],
		[3911, 2],
		[3932, 2],
		[3939, 2],
		[3960, 1],
		[3967, 2],
		[3974, 2],
		[3981, 1],
		[3988, 22],
		[3995, 1],
		[4023, 2],
		[4030, 22],
		[4037, 27],
		[4044, 4],
		[4051, 2],
		[4058, 1],
		[4065, 2],
		[4072, 5],
		[4093, 11],
		[4100, 23],
		[4107, 14],
		[4114, 13],
		[4121, 14],
		[4128, 9]
	]
}
