{
	"name": "@centroculturadigital-mx/svelte-themer",
	"description": "Style Svelte apps with CSS variables, persisted.",
	"repo_url": "",
	"authors": ["furenku", "josecaos"],
	"downloads": 8,
	"updated": "2020-05-13T21:50:40.141Z",
	"tags": ["miscellaneous"],
	"typescript": false,
	"version": "0.0.37",
	"svelte_range": "^3.22.2",
	"last_rune_check_version": "0.0.37",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@centroculturadigital-mx/svelte-themer",
				"version": "0.0.37",
				"size": 58864
			}
		],
		"dependencies": [],
		"circular": []
	},
	"legacy_svelte": true,
	"readme": "# svelte-themer\n\nStyling your Svelte apps with CSS Variables, persisted.\n\n```html\n<script>\n  import { ThemeWrapper, ThemeToggle } from 'svelte-themer'\n</script>\n\n<ThemeWrapper>\n  <main>\n    <h1>svelte themer</h1>\n    <ThemeToggle />\n  </main>\n</ThemeWrapper>\n```\n\n## CSS Variables\n\nCSS variables are created for app-wide consumption using the nomenclature `--theme-[prefix]-[property!]`\n\nFor example:\n\n- `--theme-base-text` where `prefix = 'base'` and `property = 'text'`\n- `--theme-text` where `prefix = null || undefined` and `property = 'text'`\n\n## Getting Started\n\nUse the following as a base for your custom themes:\n\n```js\n// src/theme.js\nexport const themes = [\n  {\n    name: 'light',\n    colors: {\n      text: '#282230',\n      background: '#f1f1f1',\n    },\n  },\n  {\n    name: 'dark',\n    colors: {\n      text: '#f1f1f1',\n      background: '#27323a',\n    },\n  },\n]\n```\n\n### ThemeWrapper\n\nThen, provide the new themes to the `ThemeWrapper` component\n\n```html\n<!-- src/App.svelte -->\n<script>\n  import { ThemeWrapper } from 'svelte-themer'\n  import { themes } from './theme.js'\n</script>\n\n<ThemeWrapper themes=\"{themes}\">\n  <main>\n    <h1>My Svelte App</h1>\n  </main>\n</ThemeWrapper>\n```\n\nThis allows any components nested to access the theme [Context](https://svelte.dev/tutorial/context-api) which wraps a writeable `Theme` [store](https://svelte.dev/tutorial/writable-stores)\n\n#### Theme Persistence\n\nBy default svelte-themer persists the chosen theme with `localStorage`, and can be modified via the `storageKey` prop.\n\n```html\n<ThemeWrapper storageKey=\"my-svelte-app__theme\">\n  <!--  -->\n</ThemeWrapper>\n```\n\n### Accessing Theme Context\n\n```html\n<script>\n  import { getContext } from 'svelte'\n  let { toggle, theme } = getContext('theme')\n</script>\n\n<button on:click=\"{toggle}\">\n  {$theme.name}\n</button>\n```\n\n## Provided Theme Toggle\n\n```html\n<!-- src/App.svelte -->\n<script>\n  import { ThemeWrapper, ThemeToggle } from 'svelte-themer'\n  import { themes } from './theme.js'\n</script>\n\n<ThemeWrapper themes=\"{themes}\">\n  <main>\n    <h1>My Svelte App</h1>\n    <ThemeToggle />\n  </main>\n</ThemeWrapper>\n```\n",
	"downloads_history": [
		[3589, 3],
		[3596, 22],
		[3603, 2],
		[3610, 2],
		[3631, 1],
		[3638, 1],
		[3645, 3],
		[3652, 9],
		[3659, 4],
		[3666, 10],
		[3673, 20],
		[3680, 1],
		[3687, 1],
		[3694, 1],
		[3708, 9],
		[3715, 1],
		[3722, 1],
		[3729, 3],
		[3736, 2],
		[3743, 3],
		[3764, 13],
		[3771, 1],
		[3778, 10],
		[3785, 1],
		[3799, 2],
		[3806, 2],
		[3813, 1],
		[3827, 4],
		[3834, 8],
		[3841, 2],
		[3855, 2],
		[3862, 81],
		[3876, 12],
		[3890, 1],
		[3897, 3],
		[3904, 20],
		[3911, 2],
		[3932, 1],
		[3939, 1],
		[3960, 1],
		[3974, 1],
		[3981, 1],
		[3988, 1],
		[3995, 1],
		[4002, 10],
		[4009, 12],
		[4030, 4],
		[4037, 8],
		[4044, 3],
		[4051, 3],
		[4058, 11],
		[4072, 2],
		[4079, 1],
		[4086, 21],
		[4093, 41],
		[4100, 10],
		[4114, 8],
		[4121, 10],
		[4128, 11]
	]
}
