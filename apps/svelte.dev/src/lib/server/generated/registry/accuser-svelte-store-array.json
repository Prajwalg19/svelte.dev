{
	"name": "@accuser/svelte-store-array",
	"description": "Provide higher-order Svelte stores for array manipulations.",
	"repo_url": "https://github.com/accuser/svelte-store-array",
	"authors": ["accuser"],
	"homepage": "https://github.com/accuser/svelte-store-array/README.md",
	"downloads": 10,
	"updated": "2022-10-24T05:29:38.856Z",
	"tags": ["miscellaneous"],
	"github_stars": 10,
	"typescript": true,
	"version": "0.4.1",
	"svelte_range": "^3.52.0",
	"kit_range": "1.0.0-next.522",
	"last_rune_check_version": "0.4.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@accuser/svelte-store-array",
				"version": "0.4.1",
				"size": 12343
			}
		],
		"dependencies": [],
		"circular": []
	},
	"legacy_svelte": false,
	"readme": "# svelte-store-array\n\nA collection of higher-order store functions for array-based stores.\n\n## Installing\n\nInstall as a development dependency using your favourite package manager:\n\n```bash\nnpm install -D @accuser/svelte-store-array\n\npnpm add -D @accuser/svelte-store-array\n\nyarn add -D @accuser/svelte-store-array\n```\n\n## Usage\n\nAll of the higher-order store functions have parameters that are either a type (`<T>`) or a readable store of that type (`Readable<T>`). This means, for example, that you can lazily pass the array and predicate function arguments to the `filter` higher-order store function, and internally these will me transformed into readable stores:\n\n```js\nimport { readable } from 'svelte/store';\nimport { compact, filter } from '@accuser/svelte-store-array';\n\nconst list = [0, 1, 2, 3, 4, 5];\nconst even = (value) => value % 2 === 0;\n\nconst evenNumbers = filter(list, even);\n```\n\nUsing only stores:\n\n```js\nimport { readable } from 'svelte/store';\nimport { compact, filter } from '@accuser/svelte-store-array';\n\nconst list = readable([0, 1, 2, 3, 4, 5]);\nconst even = readable((value) => value % 2 === 0);\n\nconst evenNumbers = filter(list, even);\n```\n\nDerived stores are used in the implementation of the higher-order store functions, so passing stores will mean that the higher-order store function returns a store that is subscribed to the stores you provide as arguments.\n\n### Filter\n\nFilter the elements of the array store that meet the condition specified in the\ncallback function.\n\n```js\nimport { readable } from 'svelte/store';\nimport { compact, filter } from '@accuser/svelte-store-array';\n\nconst list = readable([0, 1, 2, 3, 4, 5]);\n\nconst evenNumbers = filter(list, (value) => value % 2 === 0); // get(eventNumbers) => [0, 2, 4]\nconst compactList = compact(list); // get(compactList) => [1, 2, 3, 4, 5]\n```\n\nThe `compact` higher-order store is a convenience that is equivalent to\n`filter(store, Boolean)`, i.e., filter truthy elements.\n\n### Find\n\nReturns the value of the first element in the array where predicate is `true`,\nand `undefined` otherwise.\n\n```js\nimport { readable } from 'svelte/store';\nimport { find } from '@accuser/svelte-store-array';\n\nconst list = readable([0, 1, 2, 3, 4, 5]);\n\nconst found = find(list, (value) => value === 4); // get(found) => 4\nconst notFound = find(list, (value) => value === 9); // get(notFound) => undefined\n```\n\n### Group\n\nGroups the elements of the calling array according to the string values\nreturned by a provided testing function.\n\n```js\nimport { readable } from 'svelte/store';\nimport { group } from '@accuser/svelte-store-array';\n\nconst list = readable([0, 1, 2, 3, 4, 5]);\n\nconst grouped = group(list, (value) => value % 2 ? 'odd' ? 'even'); // get(grouped) => { \"even\": [0, 2, 4, 6, 8], \"odd\": [1, 3, 5, 7, 9] }\n```\n\n### Map\n\nCalls a defined callback function on each element of an array, and returns an array that contains the results.\n\n```js\nimport { readable } from 'svelte/store';\nimport { map } from '@accuser/svelte-store-array';\n\nconst list = readable([0, 1, 2, 3, 4, 5]);\n\nconst stringList = map(list, (value) => value.toString()); // get(stringList) => [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\"]\n```\n\n### Reduce\n\nCalls the specified callback function for all the elements in an array. The\nreturn value of the callback function is the accumulated result, and is\nprovided as an argument in the next call to the callback function.\n\n```js\nimport { readable } from 'svelte/store';\nimport { reduce } from '@accuser/svelte-store-array';\n\nconst list = readable([0, 1, 2, 3, 4, 5]);\n\nconst sum = reduce(list, (prev, curr) => prev + curr, 0); // get(sum) => 15\n```\n\n### Reverse\n\nReverse an array. Unlike the `Array.prototype.reverse`, the array is not reversed in place.\n\n```js\nimport { readable } from 'svelte/store';\nimport { reverse } from '@accuser/svelte-store-array';\n\nconst list = readable([0, 1, 2, 3, 4, 5]);\n\nconst descending = reverse(list); // get(descending) => [5, 4, 3, 2, 1, 0]\n```\n\n### Sort\n\nSorts an array. Unlike the `Array.prototype.sort`, the array is not sorted in place.\n\n```js\nimport { readable } from 'svelte/store';\nimport { sort } from '@accuser/svelte-store-array';\n\nconst list = readable([0, 1, 2, 3, 4, 5]);\n\nconst descending = sort(list, (a, b) => b - a); // get(descending) => [5, 4, 3, 2, 1, 0]\n```\n\n## Composition\n\nAll the higher-order stores operate on array stores and can be composed:\n\n```js\nimport { readable } from 'svelte/store';\nimport { compact, filter, reverse } from '@accuser/svelte-store-array';\n\nconst list = readable([0, 1, 2, 3, 4, 5]);\n\nconst evenNumbersDescending = sort(\n\tfilter(compact(list), (value) => value % 2 === 0),\n\t(a, b) => b - a\n); // get(evenNumbersDescending) => [4, 2]\n```\n",
	"downloads_history": [
		[3589, 1],
		[3596, 15],
		[3603, 3],
		[3617, 22],
		[3631, 1],
		[3645, 1],
		[3659, 6],
		[3666, 8],
		[3694, 1],
		[3708, 7],
		[3715, 1],
		[3729, 4],
		[3743, 1],
		[3764, 3],
		[3771, 7],
		[3778, 3],
		[3792, 1],
		[3799, 3],
		[3806, 2],
		[3820, 1],
		[3827, 1],
		[3841, 37],
		[3855, 1],
		[3862, 14],
		[3869, 1],
		[3876, 16],
		[3883, 1],
		[3890, 1],
		[3904, 8],
		[3911, 2],
		[3918, 4],
		[3925, 2],
		[3932, 2],
		[3939, 1],
		[3946, 1],
		[3960, 6],
		[3967, 7],
		[3995, 9],
		[4002, 7],
		[4009, 6],
		[4016, 9],
		[4023, 9],
		[4030, 4],
		[4037, 3],
		[4044, 9],
		[4051, 8],
		[4058, 10],
		[4072, 1],
		[4086, 22],
		[4093, 12],
		[4100, 39],
		[4107, 1],
		[4114, 10],
		[4121, 12],
		[4128, 10]
	],
	"esm": true,
	"cjs": false
}
