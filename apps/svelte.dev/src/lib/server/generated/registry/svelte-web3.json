{
	"name": "svelte-web3",
	"description": "Integrate web3.js with Svelte for blockchain interactions.",
	"repo_url": "https://github.com/clbrge/svelte-web3",
	"authors": ["clbrge"],
	"homepage": "https://github.com/clbrge/svelte-web3#readme",
	"downloads": 93,
	"updated": "2023-07-17T10:12:41.599Z",
	"tags": ["integration"],
	"github_stars": 140,
	"typescript": true,
	"version": "4.3.1",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "4.3.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-web3",
				"version": "4.3.1",
				"size": 1526555
			},
			{
				"name": "@metamask/jazzicon",
				"version": "2.0.0",
				"size": 5867
			},
			{
				"name": "color",
				"version": "0.11.4"
			},
			{
				"name": "clone",
				"version": "1.0.4",
				"size": 11132
			},
			{
				"name": "color-string",
				"version": "0.3.0"
			},
			{
				"name": "color-name",
				"version": "1.1.4",
				"size": 6693
			},
			{
				"name": "color-convert",
				"version": "1.9.3",
				"size": 26964
			},
			{
				"name": "color-name",
				"version": "1.1.3"
			},
			{
				"name": "mersenne-twister",
				"version": "1.1.0"
			},
			{
				"name": "ethereum-blockies-base64",
				"version": "1.0.2",
				"size": 16593
			},
			{
				"name": "pnglib",
				"version": "0.0.1"
			},
			{
				"name": "svelte",
				"version": "3.59.2",
				"size": 10624206
			},
			{
				"name": "svelte-proxied-store",
				"version": "2.0.4",
				"size": 30004
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[2, 4],
			[4, 5],
			[2, 6],
			[6, 7],
			[1, 8],
			[0, 9],
			[9, 10],
			[0, 11],
			[0, 12]
		],
		"circular": []
	},
	"readme": "# svelte-web3\n\nUse the [web3.js library](https://web3js.readthedocs.io/) as a\ncollection of [readable Svelte stores](https://svelte.dev/tutorial/readable-stores)\nfor Svelte or SvelteKit.\n\nIf you prefer to use the [ethers.js\nlibrary](https://docs.ethers.io/v5/) to intereact with EVM, you may be\ninterested by our sister package\n[svelte-ethers-store](https://www.npmjs.com/package/svelte-ethers-store).\n\n## Community\n\nFor additional help or discussion, join us [in our\nDiscord](https://discord.gg/7yXuwDwaHF).\n\n## Installation\n\n1. add the `svelte-web3` package\n\n```bash\nnpm i svelte-web3\n```\n\n2. add the web3.js library in the main HTML page (`index.html` in Svelte, `src/template.html` in Sapper or `src/app.html` in SvelteKit)\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js\"></script>\n```\n\nThis step is necessary for now because the Web3.js library doesn't play well\nwith bundlers (Vite, Rollup, Webpack, Snowpack, etc), thus we cannot simply add\na dependency in package.json.\n\n## Basic usage (default stores connected to one chain)\n\n### Derived stores\n\nThis library creates a set of readable Svelte stores that are\nautomatically updated when a new connection happens, or when the chain\nor the selected account change. You can import them directly in any\nSvelte or JavaScript files :\n\n```js\nimport {\n  connected,\n  web3,\n  selectedAccount,\n  chainId,\n  chainData\n} from 'svelte-web3'\n```\n\n- connected: store value is true if a connection has been set up.\n- web3: store value is a Web3.js instance when connected.\n- selectedAccount: store value is the current selected account (when connected).\n- chainId: store value is the current chainId when connected.\n- chainData: store value is the current blockchain CAIP-2 data (when connected), see below.\n\nFor these stores to be useful in your Svelte application, a connection\nto an EVM blockchain first need to established . The abstract helper\n`defaultEvmStores` can be used to initiate the connection and\nautomatically instantiate all stores.\n\n```js\nimport { defaultEvmStores } from 'svelte-web3'\n```\n\n:exclamation: `defaultEvmStores` was named before `defaultChainStore`. The\nformer naming has been removed in later versions of\n`svelte-web3` package.\n\n### Connection with the browser provider (eg wallets like MetaMask)\n\nTo enable a connection with the current [EIP-1193\nprovider](https://eips.ethereum.org/EIPS/eip-1193#appendix-i-consumer-facing-api-documentation)\ninjected in the browser `window` context, simply call `setProvider` on\nthe library abstract helper with no argument:\n\n```js\ndefaultEvmStores.setProvider()\n```\n\nPlease note that `setProvider` can only to be called with no argument\nin a browser context. So you may want to use `onMount` when using\nSapper or SvelteKit. Similarly, you cannot use `setProvider` with no\nargument in SSR context.\n\n```js\nonMount(() => {\n  // add a test to return in SSR context\n  defaultEvmStores.setProvider()\n})\n```\n\n`svelte-web3` will automatically update the stores when the network or\naccounts change and remove listeners at disconnection.\n\n:exclamation: previous version of `svelte-web3` were using a special\nmethod `setBrowserProvider`. The former naming still works but will be\nremoved in later versions. Please update your code!\n\n### Connection with non injected EIP-1193 providers\n\nTo connect to non injected EIP-1193 providers like :\n\n- web3-onboard\n- buidler.dev\n- ethers.js\n- eth-provider\n- WalletConnect\n- Web3Modal\n\nCall `setProvider` on the library abstract helper with the JavaScript provider\ninstance object of the library. For example with Web3Modal :\n\n```js\nconst web3Modal = new Web3Modal(<your config>)\nconst provider = await web3Modal.connect()\ndefaultEvmStores.setProvider(provider)\n```\n\n`svelte-web3` will automatically update the stores when the network or\naccounts change and remove listeners at disconnection.\n\nPlease check\n`examples/svelte-app-template-web3/src/Web3Modal.svelte`(https://github.com/clbrge/svelte-web3/tree/master/examples/svelte-app-template-web3/src/Web3Modal.svelte).\nin github for a complete example.\n\n### Connection with other Web3 providers (ws, http, ipc, ...)\n\nAny provider supported by Web3.js can also be used with `setProvider`.\nA WS or HTTP RPC string URL or any providers returned by `new\nWeb3.providers`, for example :\n\n```js\ndefaultEvmStores.setProvider('https://rinkeby.infura.io/v3/your-api-key')\n// or\ndefaultEvmStores.setProvider(\n  'https://eth-mainnet.alchemyapi.io/v2/your-api-key'\n)\n// or\ndefaultEvmStores.setProvider('http://localhost:8545')\n// or\ndefaultEvmStores.setProvider(\n  new Web3.providers.WebsocketProvider('ws://localhost:8546')\n)\n// or\nvar net = require('net')\ndefaultEvmStores.setProvider(\n  new Web3.providers.IpcProvider('/Users/myuser/Library/Ethereum/geth.ipc', net)\n)\n// etc...\n```\n\n### Selecting a specific account\n\nYou can also pass `Index` as the second argument of `setProvider()` to\nselect another account than the default when possible.\n\n```js\ndefaultEvmStores.setProvider(<provider>, <Index>)\n```\n\n### Using the stores\n\nAfter a connection has been established, you may import the stores\nanywhere in your application. Most of the time, you should use the `$`\nprefix Svelte notation to access the stores values.\n\n```html\n<script>\n  import { connected, chainId } from 'svelte-web3'\n</script>\n\n{#if !$connected}\n\n<p>My application is not yet connected</p>\n\n{:else}\n\n<p>Connected to chain with id {$chainId}</p>\n\n{/if}\n```\n\n### Using the Web3 API\n\nLikewise use the `$` prefix Svelte notation to access its instance and\nuse the full Web3.js API. (beware, in the Web3.js library\ndocumentation, instances are always noted as `web3`, without `$`, but\nin the context of `svelte-web3`, `web3` is the Svelte store itself,\nnot it's value).\n\n```js\n  import { web3, selectedAccount } from 'svelte-web3'\n\n  // ...\n\n  const { name, chainId } = await $web3.eth.getChainId()\n\n  const balance = await $web3.eth.getBalance('0x0000000000000000000000000000000000000000') : ''\n\n```\n\n### Using the contracts store for reactive contract calls\n\nTo enjoy the same reactivity as using `$web3` but with a `web3.eth.Contract`\ncontract instance, you first need to declare its address and interface. To\ndifferentiate each `eth.Contract` instance, you also need to define a logical\nname. That's the function `attachContract`:\n\n```html\n<script>\n\n  import { defaultEvmStores as evm } from 'svelte-web3'\n\n  // ...\n\n  evm.attachContract('myContract',<address>, <abi>)\n</script>\n```\n\n`attachContract` only needs to be called once and can be called before\nconnection since `web3.eth.Contract` instances will only be created when\na connection becomes available. You may want to reattach new contract\ndefinition or abi for example when you the current network change. For\nthe old definition will be overwritten and instance updated in the\n`contracts` store, simply use the same logical name.\n\nAfter a contract as be declared, you can use its instance anywhere\nusing the `$` notation and the logical name :\n\n```html\n<script>\n  import { contracts } from 'svelte-web3'\n\n  // ...\n</script>\n\n{#await $contracts.myContract.methods.totalSupply().call()}\n\n<span>waiting...</span>\n\n{:then value}\n\n<span>result of contract call totalSupply on my contract : { value } </span>\n\n{/await}\n```\n\nBy default, `svelte-web3` build contract instances using the current connection\noptions. You may want to overwrite options by passing them as fourth argument.\n\n```js\n  defaultEvmStores.attachContract('myContract', <address>, <abi>, { from: <account>, ... })\n```\n\n### Reading stores outside of Svelte files\n\nThe `$` prefix Svelte notation to access store values is only\navailable inside Svelte files. To directly access the instantiated\nvalues in pure javascript library without subscribing to the store,\nyou can use a special getter on the library abstract helper:\n\n```js\n// this is not a Svelte file but a standard JavaScript file\nimport { defaultEvmStores } from 'svelte-web3'\n\nif (defaultEvmStores.$selectedAccount) {\n  // do something if store selectedAccount is non null\n}\n```\n\n### Forcing a disconnect (and removing all listeners)\n\nSimply call the function `disconnect` directly on the on the library\nabstract helper:\n\n```js\ndefaultEvmStores.disconnect()\n```\n\n## Human readable chain CAIP-2 information\n\n`chainData` is a store returning the current JavaScript [CAIP-2 representation](https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-2.md) object.\n\n### Example\n\nThe information returned by the `chainData` store depends (like all\nother web3 stores) on which chain the current provider is\nconnected. If the store has not yet been connected (with\n`setProvider`), the store value will be `undefined`.\n\nThis object is extremely useful to build components that reactively\nupdate all variables elements that depends on the current active chain\nor account.\n\nBelow is the CAIP-2 formatted information when the default store is\nconnected with the Ethereum Mainnet :\n\n```json\n{\n  \"name\": \"Ethereum Mainnet\",\n  \"chain\": \"ETH\",\n  \"icon\": \"ethereum\",\n  \"rpc\": [\n    \"https://mainnet.infura.io/v3/${INFURA_API_KEY}\",\n    \"https://api.mycryptoapi.com/eth\"\n  ],\n  \"faucets\": [],\n  \"nativeCurrency\": {\n    \"name\": \"Ether\",\n    \"symbol\": \"ETH\",\n    \"decimals\": 18\n  },\n  \"infoURL\": \"https://ethereum.org\",\n  \"shortName\": \"eth\",\n  \"chainId\": 1,\n  \"networkId\": 1,\n  \"slip44\": 60,\n  \"ens\": { \"registry\": \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\" },\n  \"explorers\": [\n    {\n      \"name\": \"etherscan\",\n      \"url\": \"https://etherscan.io\",\n      \"standard\": \"EIP3091\"\n    }\n  ]\n}\n```\n\nYou might want to access all chains CAIP-2 data directly without using the\n`chainData` store. In this case, use the getter `allChainsData`, it returns\nthe list of all CAIP-2 data available.\n\n```js\nimport { allChainsData } from 'svelte-web3'\n\nconsole.log(allChainsData)\n```\n\nAnother solution is to use the helper function `getChainDataByChainId`\nthat takes the chainId as argument and returns\nthe CAIP-2 data or an empty object if not found.\n\n```js\nimport { getChainDataByChainId } from 'svelte-web3'\n\nconsole.log(getChainDataByChainId(5))\n```\n\n## Web3 Svelte components\n\n`web3-svelte` includes several basic Svelte components designed to simplify\ncommon tasks when building Ethereum-based applications. These components\ndemonstrate how to use the `web3-svelte` library effectively and serve as\nreusable and composable best practices components. Currently, the library\nincludes `Balance`, `Identicon`, and `Jazzicon` components. We encourage\ncommunity members to contribute and help develop additional components by\njoining our discussions in our [Discord](https://discord.gg/7yXuwDwaHF).\n\nYou can find example usage of these components in the `components` route in the\nexamples/sveltekit-app-template-web3 directory.\n\n### Balance Component\n\nThe `Balance` component displays the balance of a specified Ethereum address. To\nuse the `Balance` component, import it and pass the address as a prop:\n\n```html\n<script>\n  import { Balance } from 'web3-svelte/components'\n</script>\n\n<p>Balance: <Balance address=\"0x0000000000000000000000000000000000000000\" /></p>\n```\n\n### Identicon Component\n\nThe `Identicon` component generates a unique identicon (a visual representation\nof an Ethereum address) using the `ethereum-blockies-base64` library. To use the\n`Identicon` component, import it and pass the address as a prop:\n\n```html\n<script>\n  import { Identicon } from 'web3-svelte/components'\n</script>\n\n<Identicon address=\"0x0000000000000000000000000000000000000000\" />\n```\n\n### Jazzicon Component\n\nThe `Jazzicon` component generates a unique and colorful identicon using the\n`@metamask/jazzicon` library. To use the `Jazzicon` component, import it and\npass the address and size (optional) as props:\n\n```html\n<script>\n  import { Jazzicon } from 'web3-svelte/components'\n</script>\n\n<Jazzicon address=\"0x0000000000000000000000000000000000000000\" size=\"{32}\" />\n```\n\nThese components serve as a starting point for building your Ethereum-based\napplications using `web3-svelte`. You can further customize them and create\nadditional components according to your application's requirements. By\nleveraging the reactivity and simplicity of Svelte along with the powerful\nfeatures of web3.js, you can create a seamless and efficient user experience\nfor your decentralized applications.\n\n## Simultaneous multi chain usage\n\nYou can also using the library to create several stores, each\nconnected to different providers. For example, you may want a\nconnection to the same chain througth the browser wallet and\nsimultaneously with Infura; or many stores each connected to a\ndifferent chains at the same time.\n\nIn this case, use the `makeEvmStores` factory function as below :\n\n```js\nimport { makeEvmStores } from 'svelte-web3'\n\nlet evmStores, web3, connected, selectedAccount, chainId, chainData\n;({ web3, connected, selectedAccount, chainId, chainData, ...evmStores } =\n  makeEvmStores('<id>'))\n\nevmStores.setProvider('https://rpc.slock.it/goerli')\n```\n\n`<id>` can be an arbitrary name to be able to retrieve the store with the function `getChainStore`\nwithout reinitializing the conection:\n\n```js\nimport { getChainStore } from 'svelte-web3'\n\nlet evmStores, web3, connected, selectedAccount, chainId, chainData\n;({ web3, connected, selectedAccount, chainId, chainData, ...evmStores } =\n  getChainStore('<id>'))\n```\n\nThe `web3` store and all other derived stores will work the same way as with the default store.\n\nIf you want to use the different chain stores in the same Svelte file\n(not advised, it's better to use subcomponents), you may renamed the\nstores this way :\n\n```js\nlet evmStores_A, web3_A, evmStores_B, web3_B\n;({ web3: web3_A, ...evmStores_A } = makeEvmStores('<id_A>'))(\n  ({ web3: web3_B, ...evmStores_B } = makeEvmStores('<id_B>'))\n)\n```\n\n## FAQ\n\n### _What would be the most basic scaffolding to get Svelte + web3 running_\n\nAssuming that you already have a working injected provider like MetaMask in your browser:\n\n1. npm create vite@latest myapp -- --template svelte\n2. cd myapp && npm install svelte-web3\n3. add `web3.js` script loading tag inside the `index.html` header (see above)\n4. add this minimal connection code in App.svelte:\n\n```js\nimport { onMount } from 'svelte'\nimport { defaultEvmStores as evm, selectedAccount, chainId } from 'svelte-web3'\nonMount(evm.setProvider)\n```\n\n5. use the stores in the HTML\n\n```html\n<p>account: {$selectedAccount} / chainId: {$chainId}</p>\n```\n\n6. `npm run dev`\n\n### _X doesn't work after `await defaultEvmStores.setProvider()`_\n\nIt's not sufficient to `await` for the `setProvider` to be certain that\nother derived stores have been populated. Instead you should subscribe\nto the needed store and put your code inside the handler.\n\nFor example:\n\non\n\n```js\nimport { defaultEvmStores as evm, web3, selectedAccount } from 'svelte-web3'\n\nselectedAccount.subscribe(async ($selectedAccount) => {\n  if (!$selectedAccount) return\n  // do stuff here\n  // ...\n})\n\nonMount(() => {\n  evm.setProvider()\n})\n```\n\n### _how to auto-connect on page load?_\n\nIt is out of scope of this package to implement this function but it\ngenerally depends on the type of provider you are using and a way to\nstore connection information between page loads (for example by using\nlocalStorage).\n\n## Examples\n\nIf you are using `svelte-web3` to build an open source Dapp, let us know\nif you want to be listed in this section.\n\n### Svelte basic example (using Vite)\n\nPlease check [examples/svelte-vite-template-web3 on github](https://github.com/clbrge/svelte-web3/tree/master/examples/svelte-vite-template-web3).\n\n### SvelteKit basic example\n\nPlease check [examples/sveltekit-app-template-web3 on github](https://github.com/clbrge/svelte-web3/tree/master/examples/sveltekit-app-template-web3).\n\n### Svelte basic example (based on rollup template)\n\n:exclamation: This is a legacy example and will be removed in future version of `svelte-web3`.\n\nPlease check [examples/svelte-app-template-web3 on github](https://github.com/clbrge/svelte-web3/tree/master/examples/svelte-app-template-web3).\n\nContains demos to use the default store and multi stores.\n\n### Sapper basic example (based on webpack template)\n\n:exclamation: This is a legacy example and will be removed in future version of `svelte-web3`.\n\nPlease check [examples/sapper-app-template-web3 on github](https://github.com/clbrge/svelte-web3/tree/master/examples/sapper-app-template-web3).\n\n### tradingstrategy.ai presented at EthLisbon 2021\n\nA website presented in EthLisbon 2021, used svelte-web3 (version 2) for building the frontend. :\n\n- Tutorial: https://tradingstrategy.ai/blog/building-cryptocurrency-website\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 179],
		[3603, 136],
		[3610, 177],
		[3617, 78],
		[3624, 64],
		[3631, 123],
		[3638, 57],
		[3645, 26],
		[3652, 76],
		[3659, 79],
		[3666, 112],
		[3673, 117],
		[3680, 129],
		[3687, 135],
		[3694, 129],
		[3701, 235],
		[3708, 179],
		[3715, 155],
		[3722, 156],
		[3729, 203],
		[3736, 163],
		[3743, 222],
		[3750, 282],
		[3757, 248],
		[3764, 292],
		[3771, 252],
		[3778, 272],
		[3785, 172],
		[3792, 270],
		[3799, 199],
		[3806, 232],
		[3813, 230],
		[3820, 111],
		[3827, 93],
		[3834, 119],
		[3841, 214],
		[3848, 149],
		[3855, 368],
		[3862, 126],
		[3869, 130],
		[3876, 164],
		[3883, 261],
		[3890, 297],
		[3897, 156],
		[3904, 106],
		[3911, 138],
		[3918, 150],
		[3925, 135],
		[3932, 105],
		[3939, 197],
		[3946, 162],
		[3953, 281],
		[3960, 252],
		[3967, 158],
		[3974, 120],
		[3981, 48],
		[3988, 123],
		[3995, 275],
		[4002, 241],
		[4009, 86],
		[4016, 246],
		[4023, 263],
		[4030, 191],
		[4037, 335],
		[4044, 282],
		[4051, 170],
		[4058, 229],
		[4065, 187],
		[4072, 262],
		[4079, 123],
		[4086, 189],
		[4093, 90],
		[4100, 313],
		[4107, 164],
		[4114, 93],
		[4121, 290],
		[4128, 130],
		[4135, 81]
	]
}
