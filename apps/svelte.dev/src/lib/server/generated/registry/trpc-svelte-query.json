{
	"name": "trpc-svelte-query",
	"description": "Use tRPC with SvelteKit and Tanstack Query.",
	"repo_url": "https://github.com/ottomated/trpc-svelte-query",
	"authors": ["ottomated"],
	"homepage": "https://github.com/ottomated/trpc-svelte-query#readme",
	"downloads": 542,
	"updated": "2025-03-28T16:40:00.825Z",
	"tags": ["server"],
	"github_stars": 71,
	"typescript": true,
	"version": "3.0.1",
	"svelte_range": ">=5 <6",
	"kit_range": ">=2.20.0 <3",
	"last_rune_check_version": "3.0.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "trpc-svelte-query",
				"version": "3.0.1",
				"size": 54390
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "<p align=\"center\">\n  <a href=\"https://trpc.io/\"><img src=\"https://assets.trpc.io/icons/svgs/blue-bg-rounded.svg\" alt=\"tRPC\" height=\"75\"/></a>\n</p>\n\n<h3 align=\"center\">trpc-svelte-query</h3>\n\n<p align=\"center\">\n  <strong>Type-safe svelte(kit) tRPC integration with <code>@tanstack/svelte-query</code></strong>\n</p>\n\n## Contents\n\n- [Installation](#installation)\n- [Basic Example](#basic-example)\n- [SSR Example](#ssr-with-sveltekit)\n- [Migrating from v2](#migrating-from-v2)\n\n## Installation\n\n```bash\npnpm i trpc-svelte-query @tanstack/svelte-query\n```\n\n## Basic Example\n\nSet up tRPC in `lib/trpc/index.ts`\n\n```ts\n// Import the router type from your server file\nimport type { AppRouter } from '$lib/server/routes/_app';\nimport { createTRPCSvelte, httpBatchLink } from 'trpc-svelte-query';\n\nexport const trpc = createTRPCSvelte<AppRouter>({\n\tlinks: [\n\t\thttpBatchLink({\n\t\t\turl: '/api/trpc',\n\t\t}),\n\t],\n});\n```\n\nSet up `@tanstack/svelte-query`'s provider in your root layout.\n\n```svelte\n<script lang=\"ts\">\n  import { QueryClientProvider } from '@tanstack/svelte-query';\n  import { trpc } from '$lib/trpc/client';\n\n\tconst { children } = $props();\n</script>\n\n<QueryClientProvider client={trpc.queryClient}>\n  {@render children?.()}\n</QueryClientProvider>\n```\n\nSet up your API handler in `routes/api/trpc/[...trpc]/+server.ts`\n\n```ts\nimport { appRouter } from '$lib/server/routes/_app';\nimport { createTRPCSvelteServer } from 'trpc-svelte-query/server';\n\nconst trpcServer = createTRPCSvelteServer({\n\tendpoint: '/api/trpc',\n\trouter: appRouter,\n});\n\nexport const GET = trpcServer.handler;\nexport const POST = trpcServer.handler;\n```\n\nNow in any component, you can query your API using the client you created.\n\n```svelte\n<script lang=\"ts\">\n  import { trpc } from '$lib/trpc/client';\n\n  const query = trpc.greeting.query({ name: 'tRPC' });\n</script>\n\n{#if $query.isSuccess}\n  <p>{$query.data.greeting}</p>\n{:else if $query.isError}\n  <p>{$query.error.message}</p>\n{:else}\n  <p>Loading...</p>\n{/if}\n```\n\n## SSR with SvelteKit\n\nExtract your `trpcServer` instance into its own file (i.e. `$lib/server/server`). You'll use this object to handle SSR.\n\n```ts\nimport { appRouter } from '$lib/server/routes/_app';\nimport { createTRPCSvelteServer } from 'trpc-svelte-query/server';\n\nexport const trpcServer = createTRPCSvelteServer({\n\tendpoint: '/api/trpc',\n\trouter: appRouter,\n});\n```\n\nUse that instance in your api endpoint:\n\n```ts\nimport { trpcServer } from '$lib/server/server';\n\nexport const GET = trpcServer.handler;\nexport const POST = trpcServer.handler;\n```\n\nAdd a root `+layout.server.ts` to pass SSR data from the server to the client.\n\n```ts\nimport { trpcServer } from '$lib/server/server';\n\nexport const load = async (event) => {\n\treturn {\n\t\ttrpc: trpcServer.hydrateToClient(event),\n\t};\n};\n```\n\nUpdate your root layout to hydrate that SSR data.\n\n```svelte\n<script lang=\"ts\">\n  import { trpc } from '$lib/trpc/client';\n\n\tconst { data, children } = $props();\n\n  trpc.hydrateFromServer(() => data.trpc);\n</script>\n\n{@render children?.()}\n```\n\nAdd a `+page.server.ts` file to preload specific queries.\n\n```ts\nimport { trpc } from '$lib/server/server';\n\nexport const load = async () => {\n\tawait trpcServer.greeting.ssr({ name: 'tRPC' });\n};\n```\n\n## Migrating from v2\n\n- Update tRPC to `v11` ([migration guide](https://trpc.io/docs/migrate-from-v10-to-v11))\n- Update SvelteKit to at least `2.20.0`\n- Remove QueryClientProvider if using SSR:\n\n```diff\n +layout.svelte:\n\n<script lang=\"ts\">\n-  import { QueryClientProvider } from '@tanstack/svelte-query';\n\n  import { trpc } from '$lib/trpc/client';\n\n  const { data, children } = $props();\n\n-  const queryClient = trpc.hydrateFromServer(data.trpc);\n+  trpc.hydrateFromServer(() => data.trpc);\n</script>\n\n- <QueryClientProvider client={queryClient}>\n{@render children?.()}\n- </QueryClientProvider>\n```\n\n- Don't pass `event` into SSR functions:\n\n```diff\nimport { trpc } from '$lib/server/server';\n\nexport const load = async () => {\n-  await trpcServer.greeting.ssr({ name: 'tRPC' }, event);\n+  await trpcServer.greeting.ssr({ name: 'tRPC' });\n};\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 301],
		[3603, 252],
		[3610, 234],
		[3617, 279],
		[3624, 167],
		[3631, 174],
		[3638, 222],
		[3645, 138],
		[3652, 229],
		[3659, 200],
		[3666, 245],
		[3673, 319],
		[3680, 307],
		[3687, 450],
		[3694, 333],
		[3701, 219],
		[3708, 263],
		[3715, 201],
		[3722, 241],
		[3729, 223],
		[3736, 260],
		[3743, 346],
		[3750, 228],
		[3757, 216],
		[3764, 251],
		[3771, 336],
		[3778, 344],
		[3785, 384],
		[3792, 208],
		[3799, 351],
		[3806, 497],
		[3813, 519],
		[3820, 800],
		[3827, 737],
		[3834, 479],
		[3841, 469],
		[3848, 402],
		[3855, 574],
		[3862, 488],
		[3869, 292],
		[3876, 399],
		[3883, 426],
		[3890, 497],
		[3897, 900],
		[3904, 479],
		[3911, 500],
		[3918, 422],
		[3925, 424],
		[3932, 461],
		[3939, 634],
		[3946, 369],
		[3953, 479],
		[3960, 503],
		[3967, 691],
		[3974, 430],
		[3981, 317],
		[3988, 359],
		[3995, 313],
		[4002, 428],
		[4009, 209],
		[4016, 174],
		[4023, 447],
		[4030, 680],
		[4037, 494],
		[4044, 686],
		[4051, 732],
		[4058, 431],
		[4065, 388],
		[4072, 304],
		[4079, 358],
		[4086, 432],
		[4093, 500],
		[4100, 802],
		[4107, 487],
		[4114, 542],
		[4121, 412],
		[4128, 593],
		[4135, 549]
	],
	"esm": true,
	"cjs": false
}
