{
	"name": "tweakpane-css",
	"description": "Detect and tweak CSS variables at runtime.",
	"repo_url": "https://github.com/kitschpatrol/tweakpane-css",
	"authors": ["kitschpatrol"],
	"homepage": "https://github.com/kitschpatrol/tweakpane-css",
	"downloads": 10,
	"updated": "2025-03-04T18:36:04.005Z",
	"tags": ["tooling"],
	"github_stars": 11,
	"typescript": false,
	"version": "2.2.4",
	"svelte_range": "^5.22.1",
	"last_rune_check_version": "2.2.4",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "tweakpane-css",
				"version": "2.2.4",
				"size": 431818
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "<!--+ Warning: Content inside HTML comment blocks was generated by mdat and may be overwritten. +-->\n\n<!-- title -->\n\n# tweakpane-css\n\n<!-- /title -->\n\n<!-- badges -->\n\n[![NPM Package tweakpane-css](https://img.shields.io/npm/v/tweakpane-css.svg)](https://npmjs.com/package/tweakpane-css)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n<!-- /badges -->\n\n<!-- description -->\n\n**Detect and tweak CSS variables at runtime.**\n\n<!-- /description -->\n\n## Overview\n\n_Tweakpane CSS_ is a script that automatically detects and exposes your `:root` CSS variables in a [Tweakpane](https://tweakpane.github.io/docs/) interface for realtime manipulation during development.\n\nFor example, given the CSS below:\n\n```css\n:root {\n  --grid-pad: 2rem;\n  --text-size: 1rem;\n  --line-height: 1.5;\n  --mobile-width: 600px;\n  --dark-background-color: #000000;\n  --dark-text-color: #ffffff;\n  --light-background-color: #ffffff;\n  --light-text-color: #000000;\n}\n```\n\nThe following Tweakpane will be automatically generated and displayed over your page:\n\n<img src=\"./example-screenshot.webp\" width=\"401px\" alt=\"Tweakpane CSS panel\" />\n\nChanges to variables are applied immediately, and then persisted to local storage. Any variable changes are automatically applied across page refreshes.\n\nThe tweaked set of variables can be copied to the clipboard as CSS via the \"Copy CSS\" button.\n\nThe \"Reset\" button restores the variables to the original values specified in the css file, clearing local storage in the process.\n\nThe Tweakpane window has been augmented a bit to allow drag-based resizing and repositioning, and may be collapsed in the \"window shade\" tradition via a double-click on its title bar.\n\n## Usage\n\nFor convenient integration and FOUC prevention, Tweakpane CSS is compiled down to a minified single-file IIFE. It's critical to use it as a classic script (no `defer`, no `module`).\n\nYou can add it to your project in three different ways:\n\n### Locally\n\n1. Install the package:\n\n```sh\nnpm install --save-dev tweakpane-css\n```\n\n2. Add the script tag to the `head` of your template. Most casually, if you're only using Tweakpane CSS in local development, you can link right to the file in `node_modules`:\n\n```html\n<script src=\"main.js\"></script>\n```\n\nMore robust integration will depend on your framework / build tools / bundler, but again ensure that it is invoked as a classic script.\n\nFor example, in an Astro project, you have to add an `is:raw` to the script tag to prevent modularization:\n\n```html\n<script is:raw src=\"/node_modules/tweakpane-css/dist/main.js\"></script>\n```\n\n### CDN\n\nAdd this script tag to the `head` of your template:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/tweakpane-css\"></script>\n```\n\n### Bookmarklet\n\nCreate a bookmark with the url below:\n\n```\njavascript:(function(){var script=document.createElement('script');script.src='https://cdn.jsdelivr.net/npm/tweakpane-css';document.head.appendChild(script);})()\n```\n\nNote that the bookmarklet might not work with certain sites depending on their CSP.\n\nThe bookmarklet also has the disadvantage of not automatically loading across page reloads (though CSS values should persist and be restored once the bookmarklet is re-invoked).\n\n### Component props\n\nThe underlying Svelte component that manages the Tweakpane CSS pane exposes properties for customization in advanced use cases:\n\n#### `exclude`\n\nAn array of CSS custom property names that you would like Tweakpane CSS to completely ignore. This can be useful if you have certain properties which are controlled by media queries, for example.\n\n```ts\nexport let exclude: string[]\n```\n\nThe property names are normalized and case-insensitive, so you may write them with or without the `--` prefix.\n\n#### `options`\n\nTweakpane CSS itself takes some configuration options:\n\n```ts\nexport let options: {\n  autoFolders?: boolean\n  includeCalculated?: boolean\n  prettyNames?: boolean\n  showUnits?: boolean\n  sortNames?: boolean\n}\n```\n\n##### autoFolders\n\nOrganize properties into folders based on common name prefixes. (For example, `--text-light` and `--text-dark` would appear under the `Text` folder as `Light` and `Dark`)\n\n##### includeCalculated\n\nWhether to include properties with `calc(...)` in their values in Tweakpane CSS.\n\n##### prettyNames\n\nWhether to massage the property names into something a bit easier on the eyes. `--row-gap`, for example, would become `Row Gap`.\n\n##### showUnits\n\nShow CSS value units in a parenthetical next to the label.\n\n##### sortNames\n\nSort the custom properties in alphabetic order, rather than the order they are found in the stylesheet.\n\n### Passing props\n\nTweakpane CSS is normally used through an IIFE-compiled script, which by nature does not have the affordances for passing properties that we enjoy on proper components.\n\nInstead, props may be passed via query parameters on the `src` url in the `<script>` tag where Tweakpane CSS is loaded.\n\nThe query parameters are parsed using [qs](https://github.com/ljharb/qs), which does its best to map human-friendly query strings to moderately complex property objects. The qs parser is configured with comma-separated arrays and dot notation for assigning object values, so a query string for the above properties might look like:\n\n```plaintext\n?exclude=some-unwanted-property&options.autoFolders=true&options.includeCalculated=true&options.sortNames=true\n```\n\nA simpler single-property exclusion, in the context of the IIFE `<script>` invocation, would look like:\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/tweakpane-css?exclude=some-unwanted-property\"></script>\n```\n\n## Dev Notes\n\nTweakpane CSS was written in [Svelte](https://svelte.dev) and leverages [svelte-tweakpane-ui](https://kitschpatrol.com/svelte-tweakpane-ui) for easy integration between Svelte and Tweakpane.\n\nI created Tweakpane CSS for my own purposes, and it might not generalize well to other use-cases. If you'd like to see additional features or compatibility measures, please [open an issue](https://github.com/kitschpatrol/tweakpane-css/issues).\n\n## Acknowledgments\n\nThanks to [Hiroki Kokubun](https://cocopon.me) for the excellent Tweakpane library.\n\n<!-- footer -->\n\n## Contributing\n\n[Issues](https://github.com/kitschpatrol/tweakpane-css/issues) and pull requests are welcome.\n\n## License\n\n[MIT](license.txt) Â© Eric Mika\n\n<!-- /footer -->\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 4],
		[3603, 3],
		[3610, 4],
		[3617, 1],
		[3624, 1],
		[3631, 127],
		[3638, 178],
		[3645, 103],
		[3652, 13],
		[3659, 40],
		[3666, 37],
		[3673, 9],
		[3687, 8],
		[3694, 15],
		[3701, 2],
		[3708, 2],
		[3715, 12],
		[3722, 12],
		[3729, 1],
		[3736, 1],
		[3743, 9],
		[3750, 3],
		[3757, 1],
		[3764, 2],
		[3771, 8],
		[3778, 11],
		[3785, 55],
		[3792, 60],
		[3799, 8],
		[3806, 38],
		[3813, 40],
		[3820, 10],
		[3827, 11],
		[3834, 35],
		[3841, 28],
		[3848, 2],
		[3855, 10],
		[3862, 7],
		[3869, 2],
		[3876, 7],
		[3883, 130],
		[3890, 23],
		[3897, 3],
		[3904, 68],
		[3911, 23],
		[3918, 10],
		[3925, 7],
		[3932, 13],
		[3939, 8],
		[3946, 96],
		[3953, 7],
		[3967, 9],
		[3974, 4],
		[3981, 7],
		[3988, 9],
		[3995, 24],
		[4002, 3],
		[4009, 4],
		[4016, 11],
		[4023, 18],
		[4030, 11],
		[4037, 14],
		[4044, 15],
		[4051, 10],
		[4058, 4],
		[4065, 3],
		[4072, 3],
		[4079, 139],
		[4086, 11],
		[4093, 7],
		[4100, 31],
		[4107, 4],
		[4114, 10],
		[4121, 15],
		[4128, 14],
		[4135, 12]
	]
}
