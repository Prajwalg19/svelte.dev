{
	"name": "peltejs",
	"description": "Shorten Svelte 5 runes syntax with preprocessor.",
	"repo_url": "https://github.com/98mux/pelte",
	"authors": ["filipot"],
	"homepage": "https://github.com/98mux/pelte#readme",
	"downloads": 5,
	"updated": "2024-03-06T20:11:12.822Z",
	"tags": ["tooling"],
	"github_stars": 0,
	"typescript": true,
	"version": "0.0.3",
	"svelte_range": "5.0.0-next.52",
	"last_rune_check_version": "0.0.3",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "peltejs",
				"version": "0.0.3",
				"size": 30478
			},
			{
				"name": "@babel/parser",
				"version": "7.27.1",
				"size": 1859876
			},
			{
				"name": "@babel/types",
				"version": "7.27.1",
				"size": 2597469
			},
			{
				"name": "@babel/helper-string-parser",
				"version": "7.27.1",
				"size": 31816
			},
			{
				"name": "@babel/helper-validator-identifier",
				"version": "7.27.1",
				"size": 48330
			},
			{
				"name": "recast",
				"version": "0.23.11",
				"size": 246250
			},
			{
				"name": "ast-types",
				"version": "0.16.1",
				"size": 673481
			},
			{
				"name": "tslib",
				"version": "2.8.1",
				"size": 90359
			},
			{
				"name": "esprima",
				"version": "4.0.1",
				"size": 314361
			},
			{
				"name": "source-map",
				"version": "0.6.1"
			},
			{
				"name": "tiny-invariant",
				"version": "1.3.3",
				"size": 14809
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[2, 4],
			[0, 5],
			[5, 6],
			[6, 7],
			[5, 8],
			[5, 9],
			[5, 10],
			[5, 7]
		],
		"circular": []
	},
	"readme": "# Brefer project for Svelte 5 preprocessing\n\n## What is it?\n\nBrefer is a preprocessor to shorten the new Svelte 5 syntax for handling reactivity (hence the name \"Brefer\", made from \"Bref\" which means \"Brief\" in French and the suffix \"er\", which means \"more\").\n\n## Installation\n\n```bash\nnpm install -D brefer@next\n```\n\nFor PNPM and YARN, just replace `npm install` with `pnpm add` or `yarn add` in the commands above.\n\n**Warning!** Brefer is not yet ready for production (well, Svelte 5 neither). Expect bugs and breaking changes, as the syntax is not yet entirely decided.\n\n## Usage\n\n### Basic usage\n\nTo avoid having Svelte's compiler shout at you for using \"illegal variable names\" (because Brefer uses `$` and `$$` variables), you have to add the preprocessor to your `svelte.config.js`, even if you want to use the Vite plugin alone:\n\n```js\n// svelte.config.js\nimport { vitePreprocess } from \"@sveltejs/vite-plugin-svelte\";\nimport { breferPreprocess } from \"brefer\";\n\nexport default {\n\tpreprocess: [vitePreprocess(), breferPreprocess()]\n};\n```\n\nIf you don't want to use a Vite plugin and rather use Svelte's preprocess API, you can stop your configuration here and [skip to the next paragraph](#why).\n\nThe Brefer's Vite plugin allows you to preprocess Svelte modules (`.svelte.js` files) as well as standard `.svelte` files.\n\n```js\n// vite.config.js\nimport { defineConfig } from \"vite\";\nimport { brefer } from \"brefer\";\n\nexport default defineConfig({\n\t// If you use other preprocessors, put brefer first\n\tplugins: [brefer()]\n});\n```\n\n### Options\n\nYou can pass options to the plugin. Those options contain 2 properties: `include` and `exclude`. You might already be familiar with them as a lot of other frameworks also use it.\n\nYou can check the [documentation](https://rollupjs.org/configuration-options/#watch-exclude) on Rollup's website.\n\n```js\n// vite.config.js\nimport { defineConfig } from \"vite\";\nimport { brefer } from \"brefer\";\n\nexport default defineConfig({\n\tplugins: [\n\t\tbrefer({\n\t\t\tinclude: [\n\t\t\t\t// Files to preprocess\n\t\t\t\t\"src/**/*.svelte\",\n\t\t\t\t\"src/**/*.svelte.js\"\n\t\t\t],\n\t\t\texclude: [\n\t\t\t\t// Files you don't want preprocessed\n\t\t\t\t\"tests/**/*.svelte\"\n\t\t\t]\n\t\t})\n\t]\n});\n```\n\n## Why?\n\nWhat was your reaction when Rich Harris announced that Svelte 4's reactivity, which was as concise as a JS framework reactivity syntax could be, would be abandoned in favor of ~~Vue~~ Runes syntax?\nIf you were delighted, Brefer is probably not for you. Personally, I didn't want to write `$state` and `$derived` everytime I defined a new reactive variable. That's the reason I started this project.\n\n## Ok but... What is the Brefer syntax?\n\nWith Brefer, I opted for a more straightforward syntax:\n\n> Variables defined with `let` are reactive by default\n\n> Using the rune `$(...)` creates `$derived` values\n\n> Using the rune `$$(() => {...})` creates `$effect` expressions\n\n> All subrunes for `$effect` (like `$effect.root` for example) are usable with `$$`\n\nThat is (almost) all you have to know.\n\n### Here are some examples\n\n<table>\n<tr>\n\t<td><b>With Svelte 5</b></td>\n\t<td><b>With Brefer</b></td>\n</tr>\n<tr>\n<td>\n\t\n```html\n<script>\n\tlet count = $state(0);\n\tlet double = $derived($count * 2);\n</script>\n\n<button onclick=\"{() => count++}\">\nclicks: {count} / double: {double}\n</button>\n\n````\n\n</td>\n<td>\n\n```html\n<script>\nlet count = 0;\nlet double = $(count * 2);\n</script>\n\n<button onclick=\"{() => count++}\">\n\tclicks: {count} / double: {double}\n</button>\n````\n\n</td>\n</tr>\n<tr>\n<td>\n\n```html\n<script>\n\tclass Counter {\n\t\tcount = $state(0);\n\t\tdouble = $derived(this.count * 2);\n\n\t\tincrement() {\n\t\t\tthis.count++;\n\t\t}\n\t}\n\n\tlet counter = new Counter();\n</script>\n\n<button onclick=\"{() => counter.increment()}\">\n\tclicks: {counter.count} / double: {counter.double}\n</button>\n```\n\n</td>\n<td>\n\n```html\n<script>\n\tclass Counter {\n\t\tcount = 0;\n\t\tdouble = $(this.count * 2);\n\n\t\tincrement() {\n\t\t\tthis.count++;\n\t\t}\n\t}\n\n\tlet counter = new Counter();\n</script>\n\n<button onclick=\"{() => counter.increment()}\">\n\tclicks: {counter.count} / double: {counter.double}\n</button>\n```\n\n</td>\n</tr>\n</table>\n\n## Typescript\n\nBrefer supports typescript out of the box as it uses [@babel/parser](https://babeljs.io/docs/babel-parser) to parse the script content of `.svelte` files and `.svelte.[js|ts]` modules.\n\n## Other features\n\n### Defining non-reactive variables\n\nTo define non-reactive variables, you have 2 choices:\n\n- Use the `var` or `const` keywords\n\n  > This choice is better for everyday use, e.g for temporary variables or loops\n\n  **NB:** if you use the `var` keyword, Brefer will preprocess it to use `let` instead\n\n- Use the `$static` rune\n\n  > This choice if better for when the first one can't be used, e.g for class properties, which are defined without any keyword\n\n### `$derived.by`\n\nBrefer takes care of figuring out if you're using a function or an expression inside the `$(...)` rune and will preprocess it to `$derived` or `$derived.by` depending on the result.\n\nFor very rare edges cases, this could cause bugs, especially with nested callbacks. As an example, if you do that:\n\n```js\nfunction foo() {\n\treturn () => \"bar\";\n}\n\nlet fizz = $(foo());\n```\n\nBrefer will think you're trying to use an expression and will preprocess it to `let fizz = $derived(foo())` even if `$derived.by` should be used.\n\nKeep that in mind if you don't want to waste hours trying to debug your non-working code.\n\nNB: This bug can also occure with the `$untrack` rune, so watch out.\n\n### The `$untrack` rune\n\nBrefer exposes an `$untrack` rune so you don't have to `import { untrack } from \"svelte\"` everytime. Brefer takes care of it all.\n\nMoreover, you can pass reactive variables to `$untrack` as a reference, no need to wrap it inside an arrow function. However, keep the problem mentionned in [the previous paragraph](#derivedby) about the potential bugs that it could cause.\n\n<table>\n<tr>\n<td><b>Svelte 5</b></td>\n<td><b>Brefer</b></td>\n</tr>\n<tr>\n<td>\n\n```js\nimport { untrack } from \"svelte\";\n\nlet count = $state(1);\nlet double = $derived(count * 2);\n\nconst cleanup = $effect.root(() => {\n\tconsole.log(\n\t\tcount,\n\t\tuntrack(() => double)\n\t);\n\n\treturn () => {\n\t\tconsole.log(\"cleanup\");\n\t};\n});\n```\n\n</td>\n<td>\n\n```js\nlet count = 1;\nlet double = $(count * 2);\n\nconst cleanup = $$.root(() => {\n\tconsole.log(count, $untrack(double));\n\n\treturn () => {\n\t\tconsole.log(\"cleanup\");\n\t};\n});\n```\n\n</td>\n</tr>\n</table>\n\n### The `$frozen` rune\n\nTo be able to define variables with `$state.frozen` given the shorten syntax for `$state`'s, Brefer exposes a `$frozen` rune.\n\nUse it just as you would use `$state.frozen`.\n\n## Pros and cons\n\n### Pros\n\n- More concise than Svelte 5's syntax\n- Works with Typescript\n- Easy to integrate\n- It's a preprocessor, so you can still use Svelte 5's syntax if you want to\n- Can preprocess svelte modules (`.svelte.[js|ts]`)\n\n### Cons\n\n- You have to use a preprocessor\n- Some rare edge cases might induce bugs, especially when deep nested functions are involved\n- Even if you want to use the Vite plugin alone, you still have to put `breferPreprocess` in your Svelte config for the linter to understand\n\n## Contribute\n\nIf you like the concept and want to contribute, feel free to open an issue or a pull request.\nAlso, if you have any idea to improve or extend the syntax, I'm all ears!\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 1],
		[3596, 3],
		[3603, 1],
		[3617, 1],
		[3624, 2],
		[3631, 1],
		[3645, 2],
		[3652, 2],
		[3659, 1],
		[3666, 4],
		[3673, 2],
		[3680, 1],
		[3694, 1],
		[3701, 1],
		[3708, 3],
		[3715, 96],
		[3722, 13],
		[3736, 6],
		[3743, 8],
		[3750, 2],
		[3764, 1],
		[3771, 2],
		[3778, 6],
		[3792, 3],
		[3799, 1],
		[3806, 1],
		[3813, 1],
		[3827, 1],
		[3834, 10],
		[3841, 7],
		[3862, 1],
		[3869, 1],
		[3890, 6],
		[3897, 1],
		[3904, 22],
		[3911, 22],
		[3918, 16],
		[3925, 28],
		[3932, 1],
		[3939, 15],
		[3946, 13],
		[3953, 26],
		[3960, 33],
		[3967, 21],
		[3974, 18],
		[3981, 17],
		[3988, 12],
		[3995, 14],
		[4002, 11],
		[4009, 1],
		[4016, 8],
		[4023, 8],
		[4030, 15],
		[4037, 19],
		[4044, 13],
		[4051, 1],
		[4058, 1],
		[4065, 1],
		[4072, 1],
		[4079, 1],
		[4093, 1],
		[4100, 9],
		[4107, 1],
		[4114, 5],
		[4121, 8],
		[4128, 3]
	],
	"esm": true,
	"cjs": false
}
