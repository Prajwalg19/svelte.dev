{
	"name": "svelte-html5-validators",
	"description": "Add HTML5 validator attributes to Svelte form elements.",
	"repo_url": "https://github.com/omirobarcelo/svelte-html5-validators",
	"authors": ["magna_shogun"],
	"homepage": "https://github.com/omirobarcelo/svelte-html5-validators#readme",
	"downloads": 9,
	"updated": "2019-12-10T15:22:24.026Z",
	"tags": ["miscellaneous"],
	"github_stars": 3,
	"typescript": true,
	"version": "1.0.0",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "1.0.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-html5-validators",
				"version": "1.0.0",
				"size": 16751
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Svelte HTML5 Validators\r\nSimple library that adds validator attributes --required, min, maxlength...-- to form elements using Svelte. By directly adding these attributes to the form elements, the native HTML5 validation controls can be used. That includes the pseudo-classed `valid` and `invalid` to style form elements according to its validity status.\r\n\r\n## Install\r\n`npm i svelte-html5-validators`  \r\nor  \r\n`yarn add svelte-html5-validators`\r\n\r\n## How to use\r\n```javascript\r\n<script>\r\n  import { buildForm } from \"svelte-html5-validators\";\r\n\r\n  const { form, applyValidators } = buildForm({ \r\n    \"name\": [\"required\", \"pattern:^[A-Z][a-zA-Z\\\\s]*$\"],\r\n  }, { initialValidation: true, validateOnChange: true });\r\n\r\n  let formData = {\r\n    name: \"world\"\r\n  };\r\n</script>\r\n\r\n<style type=\"text/scss\">\r\n  input {\r\n    &:invalid {\r\n      border: 2px dashed red;\r\n    }\r\n\r\n    &:valid {\r\n      border: 2px solid black;\r\n    }\r\n  }\r\n</style>\r\n\r\n<form use:applyValidators>\r\n  <input\r\n    type=\"text\"\r\n    name=\"name\"\r\n    bind:value={formData.name} />\r\n</form>\r\n```\r\n\r\n## API\r\n### `buildForm(validators: FieldValidators, config: Config = {}): { form: Form; applyValidators: SvelteAction }`\r\nReturns a [Form object](#form-object) and the `applyValidators` action, which uses the validators given as the first parameters.\r\n\r\nAs second parameter you can pass a configuration object. The possible options are as follow:  \r\n\r\n| **Property**   |      **Description**      |  **Default** |\r\n|----------|-------------|------|\r\n| initialValidation | Set to true if you want to perform an initial validation check  | true |\r\n| validateOnChange | Set to true if you want to perform a validation check after every input   | true |\r\n\r\n\r\n### `applyValidators: SvelteAction `\r\nA Svelte [action](https://svelte.dev/docs#use_action) to use on the form HTML element. Finds all the form elements (input, textarea, select) and adds the validators given to `buildForm`. \r\n\r\nIt is necessary to give to all the form elements, or at least to the ones where you want to apply validators, an `id` or `name` attribute. In either case, there exists a form element and a validator for it is not provided or a validator is defined for a not added form element, `applyValidators` will not error out.\r\n\r\n#### Field Validators Object\r\nObject to be provided to the `buildForm` function. The properties for this object are the form elements `id` or `name` attributes, and the assigned value to each property is a string array with the validators.  \r\nThe validators that require a value (e.g.: min) are on the form `min:6`.\r\n\r\n```\r\n{ \"name\": [\"required\", \"minlength:6\"], \"age\": [\"min:0\", \"max:99\"] }\r\n\r\n<input type=\"text\" name=\"name\" />\r\n<input type=\"number\" name=\"age\" />\r\n```\r\n\r\n#### Form Object\r\nSvelte [store](https://svelte.dev/docs#svelte_store) returned by the `buildForm` function. This store provides the object value, the `getControl` function, and the `validate` function.\r\n\r\n##### Value\r\n> ```javascript\r\n> {\r\n>   entries: {\r\n>     name: string;\r\n>     value: any;\r\n>     valid: boolean;\r\n>   }[];\r\n>   valid: boolean\r\n> }\r\n> ```\r\n\r\n`entries` is an array of objects. Each entry has `name`, the control name of the form element; value, the value of the form element; and valid, the validity of the form element.  \r\n`valid` indicates the entire form validity.\r\n\r\n##### `getControl: (formControlName: string) => { name: string; value: any; valid: boolean }`\r\nReturns the entry of the given `formControlName` of the form object.\r\n\r\n##### `validate: () => void`\r\nChecks the validity of the form and updates the form object with the current form data.\r\n\r\n##### `clear: () => void`\r\nClears the form object --undefines the values from each entry-- and invalidates each entry and the form. If you want to check if the form object is valid after clearing it, you will need to execute `validate`.\r\n\r\n## Validators\r\n### required\r\n> `{ \"control\": [\"required\"] }`  \r\n\r\nAdds the attribute `required` to the form element with `id` or `name` control.  \r\nValid when it has some value.\r\n\r\n### disabled\r\n> `{ \"control\": [\"disabled\"] }`  \r\n\r\nAdds the attribute `disabled` to the form element with `id` or `name` control.  \r\nBlocks editing of the form element.\r\n\r\n### pattern\r\n> `{ \"control\": [\"pattern:^[A-Z][a-zA-Z\\\\s]*$\"] }`  \r\n\r\nAdds the attribute `pattern` with the pattern given after the : to the form element with `id` or `name` control.  \r\nValid when the value matches the pattern.\r\n\r\n### min\r\n> `{ \"control\": [\"min:3\"] }`  \r\n\r\nAdds the attribute `min` with the given argument to the form element with `id` or `name` control.  \r\nValid for inputs of type `range`, `number`, `date`, `month`, `week`, `datetime`, `datetime-local`, and `time` when the value is higher than the given argument.\r\n\r\n### max\r\n> `{ \"control\": [\"max:30\"] }`  \r\n\r\nAdds the attribute `max` with the given argument to the form element with `id` or `name` control.  \r\nValid for inputs of type `range`, `number`, `date`, `month`, `week`, `datetime`, `datetime-local`, and `time` when the value is lower than the given argument.\r\n\r\n### minlength\r\n> `{ \"control\": [\"minlength:3\"] }`  \r\n\r\nAdds the attribute `minlength` with the given argument to the form element with `id` or `name` control.  \r\nValid for inputs of type `text`, `search`, `url`, `tel`, `email`, `password`, and also on textareas when the number of characters is larger than the given argument.\r\n\r\n### maxlength\r\n> `{ \"control\": [\"maxlength:30\"] }`  \r\n\r\nAdds the attribute `maxlength` with the given argument to the form element with `id` or `name` control.  \r\nValid for inputs of type `text`, `search`, `url`, `tel`, `email`, `password`, and also on textareas when the number of characters is smaller than the given argument.\r\n\r\n### datetime\r\n> `{ \"control\": [\"datetime\"] }`  \r\n\r\nSets the input's attribute `type` with `id` or `name` control to `datetime-local`.  \r\nValid when the value is a datetime.\r\n\r\n### datetime-local\r\n> `{ \"control\": [\"datetime-local\"] }`  \r\n\r\nSets the input's attribute `type` with `id` or `name` control to `datetime-local`.  \r\nValid when the value is a datetime.\r\n\r\n### date\r\n> `{ \"control\": [\"date\"] }`  \r\n\r\nSets the input's attribute `type` with `id` or `name` control to `date`.  \r\nValid when the value is a date.\r\n\r\n### time\r\n> `{ \"control\": [\"time\"] }`  \r\n\r\nSets the input's attribute `type` with `id` or `name` control to `time`.  \r\nValid when the value is a time.\r\n\r\n### month\r\n> `{ \"control\": [\"month\"] }`  \r\n\r\nSets the input's attribute `type` with `id` or `name` control to `month`.  \r\nValid when the value is a month.\r\n\r\n### week\r\n> `{ \"control\": [\"week\"] }`  \r\n\r\nSets the input's attribute `type` with `id` or `name` control to `week`.  \r\nValid when the value is a week.\r\n\r\n### email\r\n> `{ \"control\": [\"email\"] }`  \r\n\r\nSets the input's attribute `type` with `id` or `name` control to `email`.  \r\nValid when the value is an e-mail address.\r\n\r\n### tel\r\n> `{ \"control\": [\"tel\"] }`  \r\n\r\nSets the input's attribute `type` with `id` or `name` control to `tel`.  \r\nValid when the value is a telephone number.\r\n\r\n### url\r\n> `{ \"control\": [\"url\"] }`  \r\n\r\nSets the input's attribute `type` with `id` or `name` control to `url`.  \r\nValid when the value is an URL.\r\n\r\n### password\r\n> `{ \"control\": [\"password\"] }`  \r\n\r\nSets the input's attribute `type` with `id` or `name` control to `password`.  \r\nHides the value of the form element.\r\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 4],
		[3603, 4],
		[3610, 3],
		[3617, 1],
		[3624, 1],
		[3631, 1],
		[3638, 1],
		[3659, 1],
		[3666, 2],
		[3680, 1],
		[3687, 1],
		[3708, 2],
		[3729, 3],
		[3736, 1],
		[3757, 2],
		[3764, 2],
		[3778, 2],
		[3785, 1],
		[3792, 2],
		[3799, 1],
		[3806, 2],
		[3820, 1],
		[3834, 1],
		[3848, 1],
		[3855, 2],
		[3862, 11],
		[3869, 1],
		[3883, 1],
		[3890, 2],
		[3904, 1],
		[3932, 1],
		[3939, 1],
		[3946, 1],
		[3960, 2],
		[3981, 2],
		[3995, 1],
		[4002, 1],
		[4009, 3],
		[4016, 3],
		[4023, 2],
		[4030, 2],
		[4037, 7],
		[4044, 3],
		[4051, 2],
		[4058, 1],
		[4065, 3],
		[4072, 1],
		[4079, 2],
		[4093, 8],
		[4100, 5],
		[4107, 2],
		[4114, 9],
		[4121, 6],
		[4128, 3]
	],
	"esm": false,
	"cjs": true
}
