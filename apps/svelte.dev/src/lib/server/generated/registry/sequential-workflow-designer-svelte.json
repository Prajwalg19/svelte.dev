{
	"name": "sequential-workflow-designer-svelte",
	"description": "Provides Svelte wrapper for Sequential Workflow Designer component.",
	"repo_url": "",
	"authors": ["b4rtaz"],
	"downloads": 260,
	"updated": "2025-04-19T08:36:12.724Z",
	"tags": ["ui", "tooling"],
	"typescript": true,
	"version": "0.29.0",
	"svelte_range": "^4.0.0",
	"kit_range": "^1.20.4",
	"last_rune_check_version": "0.29.0",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "sequential-workflow-designer-svelte",
				"version": "0.29.0",
				"size": 14648
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "![Sequential Workflow Designer for Svelte](https://raw.githubusercontent.com/nocode-js/sequential-workflow-designer/main/.github/cover.png)\n\n# Sequential Workflow Designer for Svelte\n\n[![Build Status](https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2Fb4rtaz%2Fsequential-workflow-designer%2Fbadge%3Fref%3Dmain&style=flat-square)](https://actions-badge.atrox.dev/b4rtaz/sequential-workflow-designer/goto?ref=main) [![License: MIT](https://img.shields.io/badge/license-MIT-green?style=flat-square)](/LICENSE) [![View this project on NPM](https://img.shields.io/npm/v/sequential-workflow-designer-svelte.svg?style=flat-square)](https://npmjs.org/package/sequential-workflow-designer-svelte)\n\nSvelte wrapper for the [Sequential Workflow Designer](https://github.com/nocode-js/sequential-workflow-designer) component.\n\n## ðŸš€ Installation\n\nInstall the following packages by [NPM](https://www.npmjs.com/) command:\n\n`npm i sequential-workflow-designer sequential-workflow-designer-svelte`\n\nAdd CSS files to your global CSS file:\n\n```css\n@import 'sequential-workflow-designer/css/designer.css';\n@import 'sequential-workflow-designer/css/designer-light.css';\n@import 'sequential-workflow-designer/css/designer-dark.css';\n```\n\n## ðŸŽ¬ Usage\n\nImport the component:\n\n```tsx\nimport { SequentialWorkflowDesigner } from 'sequential-workflow-designer-svelte';\n```\n\nLoad or create a new definition:\n\n```ts\nimport type { Definition } from 'sequential-workflow-designer';\n\nlet definition: Definition = { ... };\n```\n\nIf you want to read the validation status create a new variable:\n\n```ts\nlet isValid: boolean | null = null;\n```\n\nTo receive definition changes create a new function:\n\n```ts\nfunction onDefinitionChanged({ detail }: { detail: { definition: Definition, isValid: boolean } }) {\n  definition = detail.definition;\n  isValid = detail.isValid;\n}\n```\n\nDefine your configuration:\n\n```ts\nimport type { StepsConfiguration, ToolboxConfiguration, ValidatorConfiguration } from 'sequential-workflow-designer';\n\nconst steps: StepsConfiguration = { /* ... */ };\nconst toolbox: ToolboxConfiguration = { /* ... */ };\nconst validator: ValidatorConfiguration = { /* ... */ };\n```\n\nNow you can use the component:\n\n```svelte\n<SequentialWorkflowDesigner\n  theme=\"light\"\n  definition={definition}\n  on:definitionChanged={onDefinitionChanged}\n  steps={steps}\n  toolbox={toolbox}\n  validator={validator} />\n```\n\nNext you may need to create editors for your definition. You need to create a new component for the root editor and the step editor. Each editor has predefined props.\n\nThe root editor:\n\n```svelte\n<script lang=\"ts\">\n  import type { RootEditorContext, Definition } from 'sequential-workflow-designer';\n\n  export let context: RootEditorContext;\n  export let definition: Definition;\n  export let isReadonly: boolean;\n  let velocity = definition.properties.velocity;\n\n  function onVelocityChanged(event: Event) {\n    velocity = parseInt((event.target as HTMLInputElement).value);\n    definition.properties.velocity = velocity;\n    context.notifyPropertiesChanged();\n  }\n</script>\n\n<input type=\"number\" value={String(velocity)} on:input={onVelocityChanged} />\n```\n\nThe step editor:\n\n```svelte\n<script lang=\"ts\">\n  import type { StepEditorContext, Definition, Step } from 'sequential-workflow-designer';\n\n  export let context: StepEditorContext;\n  export let definition: Definition;\n  export let step: Step;\n  export let isReadonly: boolean;\n\n  let name = step.name;\n\n  function onNameChanged(event: Event) {\n    name = (event.target as HTMLInputElement).value;\n    step.name = name;\n    context.notifyNameChanged();\n  }\n</script>\n\n<input value={name} on:input={onNameChanged} />\n```\n\nImport your components and set them to the designer:\n\n```svelte\n<script lang=\"ts\">\n  import StepEditor from './step-editor.svelte';\n  import RootEditor from './root-editor.svelte';\n</script>\n\n<SequentialWorkflowDesigner\n  ...\n  stepEditor={StepEditor}\n  rootEditor={RootEditor} />\n```\n\nThat's it! Now you can use the designer in your Svelte application.\n\nCheck the [demo project](https://github.com/nocode-js/sequential-workflow-designer/tree/main/demos/svelte-app).\n\n## ðŸ’¡ License\n\nThis project is released under the MIT license.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 1],
		[3596, 65],
		[3603, 16],
		[3610, 9],
		[3617, 10],
		[3624, 5],
		[3631, 70],
		[3638, 5],
		[3645, 8],
		[3652, 14],
		[3659, 70],
		[3666, 29],
		[3673, 3],
		[3680, 191],
		[3687, 49],
		[3694, 157],
		[3701, 170],
		[3708, 21],
		[3715, 23],
		[3722, 73],
		[3729, 5],
		[3736, 19],
		[3743, 9],
		[3750, 8],
		[3757, 7],
		[3764, 1],
		[3771, 125],
		[3778, 45],
		[3785, 114],
		[3792, 21],
		[3799, 12],
		[3806, 12],
		[3813, 61],
		[3820, 4],
		[3827, 6],
		[3834, 62],
		[3841, 145],
		[3848, 69],
		[3855, 15],
		[3862, 22],
		[3869, 28],
		[3876, 317],
		[3883, 179],
		[3890, 417],
		[3897, 368],
		[3904, 490],
		[3911, 576],
		[3918, 544],
		[3925, 285],
		[3932, 276],
		[3939, 380],
		[3946, 397],
		[3953, 499],
		[3960, 462],
		[3967, 398],
		[3974, 434],
		[3981, 179],
		[3988, 190],
		[3995, 404],
		[4002, 391],
		[4009, 58],
		[4016, 151],
		[4023, 122],
		[4030, 173],
		[4037, 246],
		[4044, 324],
		[4051, 451],
		[4058, 155],
		[4065, 280],
		[4072, 334],
		[4079, 370],
		[4086, 318],
		[4093, 357],
		[4100, 253],
		[4107, 115],
		[4114, 260],
		[4121, 298],
		[4128, 333]
	],
	"esm": true,
	"cjs": false
}
