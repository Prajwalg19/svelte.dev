{
	"name": "svelte-select-kit",
	"description": "Build WAI-ARIA compliant navigation/select menus.",
	"repo_url": "",
	"authors": ["snehalbaghel"],
	"downloads": 5,
	"updated": "2024-08-15T20:21:19.305Z",
	"tags": ["ui"],
	"typescript": true,
	"version": "0.1.1",
	"svelte_range": "^4.0.0",
	"kit_range": "^2.0.0",
	"last_rune_check_version": "0.1.1",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-select-kit",
				"version": "0.1.1",
				"size": 31887
			},
			{
				"name": "@smui/common",
				"version": "7.0.0",
				"size": 150564
			},
			{
				"name": "svelte2tsx",
				"version": "0.7.37",
				"size": 772627
			},
			{
				"name": "dedent-js",
				"version": "1.0.1"
			},
			{
				"name": "pascal-case",
				"version": "3.1.2",
				"size": 14764
			},
			{
				"name": "no-case",
				"version": "3.0.4",
				"size": 25128
			},
			{
				"name": "lower-case",
				"version": "2.0.2",
				"size": 17661
			},
			{
				"name": "tslib",
				"version": "2.8.1",
				"size": 90359
			},
			{
				"name": "@material/dom",
				"version": "14.0.0",
				"size": 112738
			},
			{
				"name": "@material/feature-targeting",
				"version": "14.0.0",
				"size": 15929
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[2, 4],
			[4, 5],
			[5, 6],
			[6, 7],
			[5, 7],
			[4, 7],
			[1, 8],
			[8, 7],
			[8, 9],
			[9, 7]
		],
		"circular": []
	},
	"readme": "# Select Kit\n\nThis library is a one-stop solution for building WAI-ARIA compliant navigation/command/select menus. The components provided are headless so they can be styled as per your requirement, they are also [composable](https://github.com/pacocoursey/cmdk/blob/main/ARCHITECTURE.md) in nature so its easy to use. Refer the various examples below to implement the variation you want to build.\n\n<p align=\"center\">\n    <img src=\"./static/images/example.png\"/>\n</p>\n\n## Installation\n\n```bash\nnpm install svelte-select-kit\n```\n\n## Basic Structure of a Combobox\n\n- `Select.Root`: The root component which sets up label, context and the store:\n  - `Select.Input`: Combobox's input, keeps track of query\n  - `Select.Select`: Use this if you're building a select only component\n  - `Select.ListBox`: Root component of the items\n    - `Select.Item`: A single selectable item, you will have multiple of these\n    - `Select.Separator`: Just a div with role='separator'\n    - `Select.NoResults`: Rendered when there are no results found\n- `Select.Button`: A button to toggle the list-box\n\n## Stable Release TODOS:\n\n- [ ] Multiselect Support\n- [ ] Type Ahead Support for 'Select Only' combobox\n- [ ] Some API improvements\n\n## Examples\n\nFor full examples refer the [examples](/src/examples) folder in this repo\n\n> **NOTE:** We use [@smui/common](https://www.npmjs.com/package/@smui/common) to forward events of our components, it works similarly to the the Svelte syntax apart from one important difference: for adding event modifiers the `|` should be replaced by `$` i.e. `on:click|preventDefault` becomes `on:click$preventDefault`. For information on this refer this [issue](https://github.com/sveltejs/svelte/issues/2837).\n\n### Basic Example\n\n```svelte\n<script lang=\"ts\">\n\timport Select from 'svelte-select-kit';\n</script>\n\n<Select.Root label=\"Numbers\">\n\t<Select.Input placeholder=\"Search something...\" class=\"input\" />\n\t<Select.ListBox let:open>\n\t\t{#if open}\n\t\t\t<Select.NoResults>No results found</Select.NoResults>\n\t\t\t<Select.Item onSelectItem={() => console.log('clicked one')} id=\"one\">One</Select.Item>\n\t\t\t<Select.Item onSelectItem={() => console.log('clicked two')} id=\"two\">Two</Select.Item>\n\t\t\t<Select.Item onSelectItem={() => console.log('clicked three')} id=\"three\">Three</Select.Item>\n\t\t\t<Select.Item onSelectItem={() => console.log('clicked four')} id=\"four\">Four</Select.Item>\n\t\t{/if}\n\t</Select.ListBox>\n</Select.Root>\n```\n\n### Disable Filtering\n\nListBox supports shouldFilter prop which will disable filtering, to access the input value to perform your own filtering you may bind to the input component's value prop.\n\n```svelte\n<script lang=\"ts\">\n\timport Select from 'svelte-select-kit';\n\n\tlet value = '';\n\t// Add your logic here for filtering..\n</script>\n\n<Select.Root label=\"Numbers\">\n\t<Select.Input bind:value placeholder=\"Search something...\" class=\"input\" />\n\t<Select.ListBox shouldFilter={false}>...</Select.ListBox>\n</Select.Root>\n...\n```\n\n### With Chevron Button\n\n```svelte\n<!-- \n\tBasic example with dropdown button\n -->\n<script lang=\"ts\">\n\timport Select from '$lib/index.js';\n</script>\n\n<Select.Root label=\"Numbers\">\n\t<Select.Input placeholder=\"Search something...\" class=\"input\" />\n\t<Select.Button let:open>{open ? '⌃' : '⌄'}</Select.Button>\n\t<Select.ListBox let:open>\n\t\t{#if open}\n\t\t\t<Select.NoResults>No results found</Select.NoResults>\n\t\t\t<Select.Item onSelectItem={() => console.log('clicked one')} id=\"one\">One</Select.Item>\n\t\t\t<Select.Item onSelectItem={() => console.log('clicked two')} id=\"two\">Two</Select.Item>\n\t\t\t<Select.Item onSelectItem={() => console.log('clicked three')} id=\"three\">Three</Select.Item>\n\t\t\t<Select.Item onSelectItem={() => console.log('clicked four')} id=\"four\">Four</Select.Item>\n\t\t{/if}\n\t</Select.ListBox>\n</Select.Root>\n```\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3876, 104],
		[3883, 9],
		[3890, 27],
		[3897, 19],
		[3904, 8],
		[3911, 4],
		[3918, 4],
		[3925, 5],
		[3932, 3],
		[3939, 5],
		[3946, 2],
		[3953, 51],
		[3960, 2],
		[3967, 16],
		[3974, 5],
		[3981, 10],
		[3988, 1],
		[3995, 8],
		[4002, 2],
		[4009, 3],
		[4016, 3],
		[4023, 6],
		[4030, 35],
		[4037, 11],
		[4044, 29],
		[4051, 13],
		[4058, 3],
		[4065, 4],
		[4072, 6],
		[4100, 4],
		[4107, 14],
		[4114, 5],
		[4121, 6],
		[4128, 4],
		[4135, 9]
	]
}
