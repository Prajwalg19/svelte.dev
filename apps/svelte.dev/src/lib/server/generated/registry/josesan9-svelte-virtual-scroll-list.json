{
	"name": "@josesan9/svelte-virtual-scroll-list",
	"description": "Implement virtualized scrolling for large lists in Svelte.",
	"repo_url": "https://github.com/josesan9/svelte-virtual-scroll-list",
	"authors": ["josesan9"],
	"homepage": "https://github.com/josesan9/svelte-virtual-scroll-list#readme",
	"downloads": 116,
	"updated": "2025-03-20T12:17:10.497Z",
	"tags": ["ui"],
	"typescript": true,
	"version": "1.0.1",
	"svelte_range": ">=3.5.0",
	"kit_range": "^1.20.4",
	"last_rune_check_version": "1.0.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@josesan9/svelte-virtual-scroll-list",
				"version": "1.0.1",
				"size": 26702
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-virtual-scroll-list\r\n\r\n[![npm](https://img.shields.io/npm/v/@josesan9/svelte-virtual-scroll-list?style=for-the-badge)](https://npmjs.com/package/@josesan9/svelte-virtual-scroll-list/)\r\n\r\nfork of same library by v1ack [svelte-virtual-scroll-list](https://github.com/v1ack/svelte-virtual-scroll-list)\r\n\r\nVirtualized scrolling for big lists. For now this does not support bi-directionality (unlike v1ach's implementation)\r\n\r\n# Getting started\r\n\r\n`npm i josesan9/svelte-virtual-scroll-list -D`\r\n\r\n\r\n## Usage\r\n\r\n```html\r\n\r\n<script>\r\n    import VirtualScroll from \"svelte-virtual-scroll-list\"\r\n\r\n    let items = [{id: 1, text: \"one\"}, ...]\r\n</script>\r\n<div class=\"vs\">\r\n    <VirtualScroll\r\n            data={items}\r\n            key=\"id\"\r\n            let:data\r\n    >\r\n        <div slot=\"header\">\r\n            This is a header set via slot\r\n        </div>\r\n        <div>\r\n            {data.text}\r\n        </div>\r\n        <div slot=\"footer\">\r\n            This is a footer set via slot\r\n        </div>\r\n    </VirtualScroll>\r\n</div>\r\n```\r\n\r\nMore examples available in `example` folder\r\n\r\n# Comparing to other virtualizing components\r\n\r\n|                           | svelte-virtual-scroll-list | svelte-virtual-list | svelte-tiny-virtual-list         |\r\n|---------------------------|----------------------------|---------------------|----------------------------------|\r\n| handle dynamic size data  | +                          | +                   | -                                |\r\n| scroll methods (to index) | +                          | -                   | +                                |\r\n| infinity scrolling        | +                          | -                   | one-directional with another lib |\r\n| initial scroll position   | +                          | -                   | +                                |\r\n| sticky items              | -                          | -                   | +                                |\r\n| top/bottom slots          | +                          | -                   | +                                |\r\n| reached top/bottom events | +                          | -                   | -                                |\r\n| document as a list        | +                          | -                   | -                                |\r\n\r\n# API\r\n\r\n## Props\r\n\r\n| prop            | type     | default        | description                                                        |\r\n|-----------------|----------|----------------|--------------------------------------------------------------------|\r\n| data            | object[] | `null`         | Source for list                                                    |\r\n| key             | string   | `id`           | Unique key for getting data from `data`                            |\r\n| keeps           | number   | `30`           | Count of rendered items                                            |\r\n| estimateSize    | number   | `estimateSize` | Estimate size of each item, needs for smooth scrollbar             |\r\n| isHorizontal    | boolean  | `false`        | Scroll direction                                                   |\r\n| pageMode        | boolean  | `false`        | Let virtual list using global document to scroll through the list  |\r\n| start           | number   | `0`            | scroll position start index                                        |\r\n| offset          | number   | `0`            | scroll position offset                                             |\r\n| topThreshold    | number   | `0`            | The threshold to emit `top` event, attention to multiple calls.    |\r\n| bottomThreshold | number   | `0`            | The threshold to emit `bottom` event, attention to multiple calls. |\r\n\r\n## Methods\r\n\r\nAccess to methods by component binding\r\n<details>\r\n<summary>Binding example</summary>\r\n\r\n```html\r\n\r\n<script>\r\n    let vs\r\n</script>\r\n\r\n<VirtualScroll bind:this={vs}></VirtualScroll>\r\n<button on:click={vs.scrollToBottom}>To bottom</button>\r\n```\r\n\r\n</details>\r\n\r\n| method              | arguments              | description                                                                                                           |\r\n|---------------------|------------------------|-----------------------------------------------------------------------------------------------------------------------|\r\n| scrollToBottom      | `none`                 | Scroll list to bottom                                                                                                 |\r\n| scrollToIndex       | `index: number`        | Set scroll position to a designated index                                                                             |\r\n| scrollToOffset      | `offset: number`       | Set scroll position to a designated offset                                                                            |\r\n| getSize             | `id: typeof props.key` | Get the designated item size                                                                                          |\r\n| getSizes            | `none`                 | Get the total number of stored (rendered) items                                                                       |\r\n| getOffset           | `none`                 | Get current scroll offset                                                                                             |\r\n| getClientSize       | `none`                 | Get wrapper element client viewport size (width or height)                                                            |\r\n| getScrollSize       | `none`                 | Get all scroll size (scrollHeight or scrollWidth)                                                                     |\r\n| updatePageModeFront | `none`                 | When using page mode and virtual list root element offsetTop or offsetLeft change, you need call this method manually |\r\n\r\n## Events\r\n\r\n| event  | description                |\r\n|--------|----------------------------|\r\n| scroll | Scroll event               |\r\n| top    | Top of the list reached    |\r\n| bottom | Bottom of the list reached |\r\n\r\n## Additional\r\n\r\n### Params passed down to each virtual list item\r\n\r\n| param      | description                                          |\r\n|------------|------------------------------------------------------|\r\n| data       | data item                                            |\r\n| index      | index of item (in relation to full list)             |\r\n| localIndex | index of item (in relation to rendered items only)   |\r\n\r\n```html\r\n\r\n<VirtualScroll\r\n        data={items}\r\n        key=\"id\"\r\n        let:data\r\n        let:index\r\n        let:localIndex\r\n>\r\n    <div>\r\n        {data.text} {index}\r\n    </div>\r\n</VirtualScroll>\r\n```",
	"legacy_svelte": true,
	"downloads_history": [
		[4086, 75],
		[4093, 68],
		[4100, 41],
		[4107, 59],
		[4114, 116],
		[4121, 31],
		[4128, 19]
	]
}
