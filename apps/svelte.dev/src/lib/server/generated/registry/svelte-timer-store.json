{
	"name": "svelte-timer-store",
	"description": "Create timer store with pause, resume, and lap functionality.",
	"repo_url": "https://github.com/kumpmati/svelte-timer-store",
	"authors": ["kumpmati"],
	"homepage": "https://github.com/kumpmati/svelte-timer-store",
	"downloads": 6,
	"updated": "2023-08-03T20:37:54.063Z",
	"tags": ["miscellaneous"],
	"github_stars": 0,
	"typescript": true,
	"version": "0.6.1",
	"svelte_range": ">=3.59.1",
	"kit_range": "^1.0.0",
	"last_rune_check_version": "0.6.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-timer-store",
				"version": "0.6.1",
				"size": 17899
			},
			{
				"name": "svelte-local-storage-store",
				"version": "0.4.0",
				"size": 16362
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# Svelte timer store\n\nSimple timer store with support for pausing and laps.\n\n## Installation\n\nThis is a simple library that utilises Svelte's [stores](https://svelte.dev/tutorial/writable-stores), therefore Svelte is required to use it.\n\nInstallation is done using your favourite package manager:\n\n```bash\n# npm\nnpm install svelte-timer-store\n\n# pnpm\npnpm install svelte-timer-store\n\n# yarn\nyarn add svelte-timer-store\n```\n\n## Features\n\n- Ability to pause and resume timer (sections)\n  - Ability to add labels to sections\n- Laps\n- Timer state is presented as a readable store\n- Functions to `start`, `stop`, `pause`, `resume`, `toggle`, `reset` and do a `lap`\n\n## Usage\n\nTo use the timer, import the `createTimer` function. The function can then be used to construct the timer store:\n\n```html\n<script>\n\timport { createTimer } from 'svelte-timer-store';\n\n\tconst timer = createTimer({ showMs: true, updateInterval: 100 });\n\n\tconst handleSave = () => {\n\t\tconst state = timer.save();\n\t\tsomeFunctionToPersistState(state);\n\t};\n\n\tonMount(async () => {\n\t\tconst savedState = await someFunctionToLoadState();\n\t\ttimer.load(savedState);\n\t});\n</script>\n\n<!-- Subscribing to the store allows you to read its current state -->\n<p>Status: {$timer.status}</p>\n<p>Duration: {$timer.durationString}</p>\n\n<!-- You can read the timer's sections in realtime -->\n<ul>\n\t{#each $timer.sections as section}\n\t<li>\n\t\t<p>Started: {new Date(section.from).toTimeString()}</p>\n\t\t<p>Duration: {section.duration / 1000}s</p>\n\t</li>\n\t{/each}\n</ul>\n\n<!-- And also the laps -->\n<ul>\n\t{#each $timer.laps as lap}\n\t<li>\n\t\t<p>Duration: {lap.durationSinceLastLap / 1000}s</p>\n\t</li>\n\t{/each}\n</ul>\n\n<!-- All available timer controls -->\n<button on:click=\"{timer.start}\">Start timer</button>\n<button on:click=\"{timer.stop}\">Stop timer</button>\n<button on:click=\"{timer.pause}\">Pause timer</button>\n<button on:click=\"{timer.resume}\">Resume timer</button>\n<button on:click=\"{timer.toggle}\">Toggle timer</button>\n<button on:click=\"{timer.reset}\">Reset timer</button>\n<button on:click=\"{timer.lap}\">New lap</button>\n```\n\n## Reference\n\n### `createTimer(opts?: TimerOptions)`\n\nConstructs the timer store.\n\nOptions:\n\n- `showMs`?: boolean - If true, milliseconds are included in the duration string\n- `updateInterval`?: number - How often in milliseconds to update the calculated duration\n\n### `timer.start(label?: string)`\n\nStarts the timer, starting a new section.\nYou can provide an optional label for the started section.\n\n### `timer.stop()`\n\nStops the timer while retaining all sections and laps. Only works if the timer is running.\n\n### `timer.pause()`\n\nPauses the timer, ending the current section. Only works if the timer is running.\n\n### `timer.resume(label?: string)`\n\nResumes the timer, starting a new section. Only works if the timer is paused.\n\n### `timer.toggle(label?: string)`\n\nConvenience function to start, pause or resume the timer based on the current state.\n\nYou can provide an optional label for when a new section is started.\n\n### `timer.lap()`\n\nAdds a new lap.\n\n### `timer.reset()`\n\nResets the timer to its initial state, clearing all sections and laps.\n\n```\n\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 13],
		[3603, 13],
		[3610, 10],
		[3624, 7],
		[3645, 1],
		[3652, 4],
		[3666, 26],
		[3673, 1],
		[3680, 1],
		[3694, 1],
		[3701, 1],
		[3722, 2],
		[3736, 7],
		[3750, 1],
		[3757, 1],
		[3771, 10],
		[3778, 2],
		[3785, 1],
		[3792, 1],
		[3799, 1],
		[3806, 1],
		[3820, 1],
		[3834, 1],
		[3841, 45],
		[3848, 2],
		[3855, 1],
		[3876, 4],
		[3890, 10],
		[3897, 1],
		[3904, 1],
		[3918, 1],
		[3925, 1],
		[3932, 5],
		[3939, 1],
		[3946, 1],
		[3953, 2],
		[3974, 1],
		[3981, 2],
		[3988, 1],
		[3995, 7],
		[4009, 2],
		[4016, 2],
		[4037, 17],
		[4044, 10],
		[4051, 2],
		[4058, 1],
		[4065, 1],
		[4100, 28],
		[4107, 1],
		[4114, 6],
		[4121, 10],
		[4128, 3],
		[4135, 5]
	],
	"esm": true,
	"cjs": false
}
