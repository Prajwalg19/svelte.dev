{
	"name": "svate",
	"description": "Offer state machines for Svelte applications.",
	"repo_url": "https://github.com/AlexxNB/svate",
	"authors": ["alexxnb"],
	"homepage": "https://github.com/AlexxNB/svate#readme",
	"downloads": 6,
	"updated": "2021-09-29T04:48:55.969Z",
	"tags": ["miscellaneous"],
	"github_stars": 14,
	"typescript": true,
	"version": "0.1.6",
	"svelte_range": "3.x",
	"last_rune_check_version": "0.1.6",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svate",
				"version": "0.1.6",
				"size": 106136
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svate\n\nSet of state machines for Svelte applications based on internal Svelte's store.\n\n## Content\n\nSet includes four types of state machines:\n\n* `machine` - simple state machine\n* `endlessMachine` - same as `machine` but can move through list's edges\n* `flag` - simple flag\n* `flagset` - set of flags\n\n## State machines\n\nYou can use one of `machine` or `endlessMachine`, which are very similar. They allows to choose state from the list of ones. Only the difference is that `machine` doesn't allow to move through edges of the list. For example, calling `myMachine.next()` when current state is last in list will do nothing. But in case of `endlessMachine` state will change to the one from start of the list.\n\n```html\n<script>\n    import {machine} from 'svate';\n    const pages = machine(['One','Two','Three']);\n    const {isLast} = pages;\n</script>\n\nThis is page {$pages}.\n\n{#if $isLast}It is last page!{/if}\n\n<button on:click={pages.back}>Previous</button>\n<button on:click={pages.next}>Next</button>\n\n```\n### machine initializing\n\n`machine(list,[initial]) | endlessMachine(list,[initial])` – parameter `list` is an array of states. Each element may be any type. The `initial` is a value from the list which will be used as initial state, default is first element of the list.\n\n### machine API\n\n* `subscribe()` – Svelte store subscription function. Returns current state in its callback.\n* `next()` – switch to the next state\n* `back()` – switch to the previous state\n* `first()` – switch to the first state\n* `last()` – switch to the last state\n* `set(state)` – switch to the state with name `state`\n* `index(num)` – switch to the state with index `num`. Index starts from 0.\n* `states` – array of the states, same as initial one.\n* `current` – returns current state.\n* `isFirst` – returns Svelte's store which will give `true` when state will be first in the list or `false` in other cases.\n* `isLast` – returns Svelte's store which will give `true` when state will be last in the list or `false` in other cases.\n\n## Flag\n\nSimple Svelte store which has a state `true` or `false`;\n\n```html\n<script>\n    const myflag = flag(0);\n</script>\n\nFlag is {$myflag ? 'on' : 'off'}!\n\n<button on:click={myflag.on}>On</button>\n<button on:click={myflag.off}>Off</button>\n<button on:click={myflag.toggle}>Toggle</button>\n```\n### flag initializing\n\n`flag(initial)` – parameter `initial` is set default state for the flag.\n\n### flag API\n\n* `subscribe()` – Svelte store subscription function. Returns current flag's state in its callback.\n* `on()` – set state to `true` value.\n* `off()` – set state to `false` value.\n* `toggle()` – toggle state value from `false` to `true` or vise versa.\n* `set(state)` – set state to the provided `state` value.\n* `lock()` – lock the flag. Any method will not be able to change the flag's state.\n* `unlock()` – unlock a locked flag.\n* `state` – returns current state of the flag.\n* `locked` – returns Svelte's store which will give `true` when flag is locked or `false` in other case.\n\n## Flagset\n\nSet of flags in one Svelte's store.\n\n```html\n<script>\n    const myflags = flagset({\n        x: 0,\n        y: 1,\n        z: false\n    })\n</script>\n\nFlag X is {$myflags.x ? 'on' : 'off'}\nFlag Y is {$myflags.y ? 'on' : 'off'}\nFlag Z is {$myflags.z ? 'on' : 'off'}\n\n<button on:click={myflags.x.on}>On flag X</button>\n<button on:click={myflags.z.off}>Off flag Z</button>\n<button on:click={myflags.$.toggle}>Toggle all flags</button>\n```\n\n### flagset initializing\n\n`flagset(initial)` – parameter `initial` is an object with names and initial states.\n\n### flagset API\n\n* `subscribe()` – Svelte store subscription function. Returns current state of all flags in its callback.\n* `[name]` – methods to manipulate with flag `name`:\n    - `on()` – set state of the flag to `true` value.\n    - `off()` – set state of the flag to `false` value.\n    - `toggle()` – toggle state value from `false` to `true` or vise versa.\n    - `set(state)` – set state to the provided `state` value.\n    - `state` – returns current state of the flag.\n* `set`|`$` – methods to use with whole flagset:\n    - `on()` – set state of all flags to `true` value.\n    - `off()` – set state of all flags to `false` value.\n    - `toggle()` – toggle state of all flags.\n    - `reset()` – set initial state for each flag.\n    - `set(state)` – set state of all flags to the provided `state` value.\n    - `lock()` – lock the flagset. Any method will not be able to change the any flag in the set.\n    - `unlock()` – unlock a locked flagset.\n    - `locked` – returns Svelte's store which will give `true` when flagset is locked or `false` in other case.\n    - `list` – returns array of flag's names.",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 36],
		[3603, 9],
		[3610, 10],
		[3617, 3],
		[3631, 2],
		[3638, 17],
		[3645, 7],
		[3652, 5],
		[3659, 5],
		[3666, 13],
		[3673, 4],
		[3680, 7],
		[3687, 5],
		[3694, 2],
		[3701, 2],
		[3708, 3],
		[3715, 1],
		[3722, 1],
		[3729, 16],
		[3736, 1],
		[3743, 1],
		[3750, 1],
		[3757, 3],
		[3764, 1],
		[3771, 1],
		[3778, 2],
		[3785, 7],
		[3792, 5],
		[3799, 9],
		[3806, 5],
		[3813, 1],
		[3820, 1],
		[3827, 2],
		[3834, 3],
		[3841, 1],
		[3848, 2],
		[3855, 37],
		[3862, 3],
		[3869, 1],
		[3876, 1],
		[3883, 3],
		[3890, 10],
		[3897, 1],
		[3904, 1],
		[3911, 9],
		[3918, 2],
		[3925, 1],
		[3932, 3],
		[3939, 2],
		[3946, 1],
		[3953, 1],
		[3960, 3],
		[3967, 2],
		[3974, 1],
		[3981, 5],
		[3988, 5],
		[3995, 5],
		[4002, 3],
		[4009, 3],
		[4016, 11],
		[4023, 4],
		[4030, 9],
		[4037, 10],
		[4044, 13],
		[4051, 3],
		[4058, 4],
		[4065, 4],
		[4072, 1],
		[4079, 1],
		[4086, 2],
		[4093, 12],
		[4100, 10],
		[4107, 2],
		[4114, 6],
		[4121, 9],
		[4128, 7]
	],
	"esm": false,
	"cjs": true
}
