{
	"name": "svelte-lightbox",
	"description": "Lightweight lightbox library for Svelte.",
	"repo_url": "https://github.com/Hejtmus/svelte-lightbox",
	"authors": ["filiph"],
	"homepage": "https://svelte-lightbox.js.org",
	"downloads": 747,
	"updated": "2025-04-26T14:27:52.015Z",
	"tags": ["media"],
	"github_stars": 53,
	"typescript": true,
	"version": "1.1.7",
	"svelte_range": "^3.25.0 || ^4.0.0 || ^5.0.0",
	"kit_range": "2.8.5",
	"last_rune_check_version": "1.1.7",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-lightbox",
				"version": "1.1.7",
				"size": 48169
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-lightbox\n\nLightweight lightbox library for Svelte\n\n![workflow status](https://img.shields.io/github/actions/workflow/status/Hejtmus/svelte-lightbox/nodejs.yml)\n![version](https://img.shields.io/npm/v/svelte-lightbox)\n![bundle size](https://img.shields.io/bundlephobia/minzip/svelte-lightbox)\n![MIT](https://img.shields.io/github/license/Hejtmus/svelte-lightbox)\n![issues count](https://img.shields.io/github/issues/Hejtmus/svelte-lightbox)\n![downloads](https://img.shields.io/npm/dw/svelte-lightbox)\n\nLightweight Lightbox, but very customizable Svelte component library. There is also support for\nmobile devices. Note that this first version of this library, if you notice any bug,\nplease report it to this library's GitHub repository to the 'Issues' section.\n\n## Instalation\n\n> ```bash\n> npm i svelte-lightbox -D\n> ```\n\n## How to use\n\n1. Make Svelte page\n\n### Standard lightbox\n\n2. Include `import { Lightbox } from 'svelte-lightbox';` into that file.\n\n3. Make `<Lightbox>` component and image you need to display put inside slot (as its child).\n\n### Lightbox with gallery\n\n2. Include `import { LightboxGallery, GalleryImage, GalleryThumbnail } from 'svelte-lightbox';` into that file.\n\n3. Make `<LightboxGallery>` component and append to it list of `<GalleryImage>`, which each `<GalleryImage>` contains \ndesired image (or it could be video).\n\n4. Prepend `<LightboxGallery>` with element or svelte:fragment with prop slot equal to `\"thumbnail\"`, under this element\nplace your thumbnail layout, which is basically layout with images wrapped inside `<GalleryThumbnail>`.\n\n\n### Common use cases\n\n```html\n<script>\n    import { \n        Lightbox,\n        LightboxGallery,\n        GalleryThumbnail,\n        GalleryImage\n    } from 'svelte-lightbox'\n    \n    let lightboxProgrammaticController\n</script>\n\n    <!-- Lightbox with image same as thumbnail -->\n    <Lightbox description=\"Simple lightbox\">\n        <img src=\"path\" alt=\"Simple lightbox\">\n    </Lightbox>\n\n    <!-- Lightbox with different image from thumbnail -->\n    <Lightbox description=\"Lightbox with thumbnail and image\">\n        <img slot=\"thumbnail\" src=\"path/thumbnail.png\" alt=\"Thumbnail\">\n        <img src=\"path/image.png\" alt=\"Lightbox image\">\n    </Lightbox>\n\n    <!-- Programmatically controlled lightbox without thumbnail -->\n    <Lightbox enableFallbackThumbnail={false} bind:programmaticController={lightboxProgrammaticController} \n              description=\"Simple lightbox\">\n        <img src=\"path\" alt=\"Simple lightbox\">\n    </Lightbox>\n\n    <LightboxGallery>\n        <!-- Layout-->\n        <svelte:fragment slot=\"thumbnail\">\n            <div class=\"sample-class-1\">\n                <GalleryThumbnail>\n                    <img src=\"./thumbnail-0.jpg\" alt=\"Simple lightbox\">\n                </GalleryThumbnail>\n                <div class=\"sample-class-2\">\n                    <div class=\"sample-class-3\">\n                        <img src=\"./thumbnail-0.jpg\" alt=\"Simple lightbox\">\n                    </div>\n                    <div class=\"sample-class-4\">\n                        <img src=\"./thumbnail-0.jpg\" alt=\"Simple lightbox\">\n                    </div>\n                </div>\n            </div>\n        </svelte:fragment>\n        \n        <GalleryImage>\n            <img src=\"./image-0.jpg\" alt=\"Simple lightbox\">\n        </GalleryImage>\n        <GalleryImage>\n            <img src=\"./image-1.jpg\" alt=\"Simple lightbox\">\n        </GalleryImage>\n        <GalleryImage>\n            <img src=\"./image-2.jpg\" alt=\"Simple lightbox\">\n        </GalleryImage>\n    </LightboxGallery>\n\n```\n\nIf you need more usage examples, you should see demo page code at this library GitHub repository.\n\n# API\n\nThis library mainly consists out of 2 components which are `<Lightbox>` and `<LightboxGallery>`, but their customization\nis significant part of using them.\n\n## `<Lightbox>`\n\nThis component is meant to be used to display image, which is clickable, that click will trigger action to open same or\ndifferent image in larger scale.\n\n### title `string/HTML`\n\nImage's title that is displayed below the image (in a lightbox), feel free to use HTML (eg, `<br>`, `<span>`). Everything\nin a lightbox footer is aligned to the left, but you can override it by putting it into `<span>` which would allow you to\napply a different style or a class of your choosing.\n\n### description `string/HTML`\n\nImage's description that is, similarly to the title, displayed under the image (in a lightbox). The difference between\nthose two are the title is wrapped in `<h2>` and description is wrapped in `<h5>`.\n\n### imagePreset `ImagePrest (string)`\n\nSelect between these 3 presets:\n\n- `''` - Default preset, doesn't make any drastic behavior changes, just displays image in its maximum size and fits into viewport.\n\n- `'fullscreen'` - Makes image fullscreen to cover at least one of axes.\n\n- `'scroll'` - Enables scrolling big image instead of making it smaller to fit into the screen.\n\n\n### customization `LightboxCustomization (object)/CSS`\n\n#### Using `LightboxCustomization` object\n\nCustomization object contains these props, which represent html props of their key (e.g. closeButtonProps = html props of\nclose button of).\n\n- closeButtonProps: `HTMLButtonElement`\n- lightboxFooterProps: `HTMLDivElement`\n- lightboxHeaderProps: `HTMLDivElement`\n- coverProps: `HTMLDivElement`\n- lightboxProps: `HTMLDivElement`\n- thumbnailProps: `HTMLDivElement`\n\n#### Using CSS\n\nIf you'd like to change global styles, feel free to override these global CSS classes instead: `.svelte-lightbox-main`, \n`.svelte-lightbox-body`, `.svelte-lightbox-overlay`, `.svelte-lightbox-header`, `.svelte-lightbox-footer` and `.svelte-lightbox-thumbnail`.\n\n### transitionDuration `number`\n\nDuration of lightbox toggle, in milliseconds. Based on this number are calculated transitions for lightbox cover. Default\n`300`.\n  \n### keepBodyScroll `boolean`\n\nKeeps body scroll while lightbox is open. Default `false`.\n\n### enableImageExpand `boolean`\n\nEnables image inside lightbox to resize above its resolution. Default `false`.\n\n### enableFallbackThumbnail `boolean`\n\nEnables inferring thumbnail from lightbox content, if thumbnail isn't specified. Default `true`.\n\n### enableEscapeToClose `boolean`\n\nEnables closing lightbox on keydown which is equal to escape button. Default `true`.\n\n### enableClickToClose `boolean`\n\nAnywhere user clicks when modal is opened, closes it. Default `false`.\n\n### showCloseButton `boolean`\n\nShows close button. Default `true`.\n\n### isVisible `boolean`\n\nAllows you to programmatically control lightbox visibility without programmaticController. Default varies on user activity.\n\n### programmaticController\n\nObject with these basic control functions:\n\n- toggle `() => void` - toggles lightbox (opened -> closed, vice versa)\n- open `() => void` - opens lightbox\n- close `() => void` - closes lightbox\n\n---\n\n## `<LightboxGallery>`\n\nLightbox component with explicitly defined thumbnail layout and multiple images, allows listing thorough all images within \ngallery. According to almost 2 years experience of using this component (in early versions), I found out, that gallery without \nthumbnail layout doesn't give any sense in most of the cases, so I decided to embed this feature in design of this component. \n\n\n### title `string/HTML`\n\nSame as in `<Lightbox>` title, but this is same in whole gallery. `<GalleryImage>` can override this title for specific image.\n\n### description `string/HTML`\n\nSame as in `<Lightbox>` description, but this is same in whole gallery. `<GalleryImage>` can override this description for \nspecific image.\n\n### imagePreset `ImagePrest (string)`\n\nSame as in `<Lightbox>`.\n\n### customization `LightboxCustomization (object)`\n\nSame as in `<Lightbox>`.\n\n### transitionDuration `number`\n\nSame as in `<Lightbox>`.\n\n### keepBodyScroll `boolean`\n\nSame as in `<Lightbox>`.\n\n### enableImageExpand `boolean`\n\nSame as in `<Lightbox>`.\n\n### enableEscapeToClose `boolean`\n\nSame as in `<Lightbox>`.\n\n### enableClickToClose `boolean`\n\nSame as in `<Lightbox>`.\n\n### showCloseButton `boolean`\n\nSame as in `<Lightbox>`.\n\n### isVisible `boolean`\n\nSame as in `<Lightbox>`.\n\n### activeImage `number`\n\nNumber which sets visibility of image with id equal to it. Also optional, this is used for programmatic selecting of \nvisible image when Lightbox is opened.\n\n### arrowsConfig `GalleryArrowsConfig (object)`\n\nAllows customizing gallery arrows.\n\n#### color `string`\n\nSets arrow color, valid value is any valid css color.\n\n#### character `GalleryArrowCharacter (string)`\n\nSets arrow charter in edge cases (0th and last item of gallery). Valid values:\n\n- `''` - Leaves arrow inactive and disables particular arrow on keyboard in edge case.\n\n- `'hide'` - Hides arrow and disables particular arrow on keyboard in edge case.\n\n- `'loop'` - Arrows are always active and keyboard arrows as well. For instance when user clicks left arrow on first image, last image\nwill be displayed.\n\n#### enableKeyboardControl `boolean`\n\nEnables navigation in gallery using keyboard arrows. Default `true`.\n\n### programmaticController\n\nObject with these basic control functions:\n\n- toggle `() => void` - toggles lightbox (opened -> closed, vice versa)\n- open `() => void` - opens lightbox\n- openImage `(imageId: number) => void` - opens lightbox at specific image\n- close `() => void` - closes lightbox\n\n---\n\n## `<GalleryThumbnail>`\n\n#### id `number`\n\nLink to gallery image, it can be set to any number within gallery images, starting with 0. Default is order of \n`<GalleryThumbnail>`, so let's say you have 3 thumbnails under `<LightboxGallery>`, the first thumbnails has id 0, next one\n1 and third 2.\n\n---\n\n## `<GalleryImage>`\n\n### title `string/HTML`\n\nSame as `<Lightbox>` title, but this is image specific, that means, it will be only shown for particular image.\n\n### description `string/HTML`\n\nSame as `<Lightbox>` description, but this is image specific, that means, it will be only shown for particular image.\n\n---\n\n## Custom lightbox\n\nThis library by design allows you to construct custom lightbox by providing you with basic building block of lightbox. \nIf you want to use this advanced functionality, you are supposed to read code (I recommend reading it from GitHub, code \nfrom NPM is already processed) of basic building blocks and examples of their usage (`<Lightbox>`, `<LightboxGallery>`) \nas well, this documentation is only brief overview. You can take available building blocks and lay them down in different \nway, or replace some of them by your own tweaked variants. Basic building blocks are:\n\n### Building blocks of lightbox modal\n\n#### `<LightboxThumbnail>`\n\nName says it all.\n\n#### `<BodyChild>`\n\nMakes content of slot direct child of `<body>`, this can be especially useful when using CSS frameworks, which can break\n`z-index` effect in some cases (element with higher index is lower than element with lower index).\n\n#### `<ModalCover>`\n\nCover behind lightbox modal, dimmed background.\n\n#### `<Modal>`\n\nName says it all.\n\n#### `<LightboxHeader>`\n\nHeader of lightbox modal, contains close button as well as window keypress binding.\n\n#### `<LightboxHeader>`\n\nBody of lightbox modal, contains lightbox image.\n\n#### `<LightboxFooter>`\n\nFooter of lightbox modal, contains title, description of image and gallery counter.\n\n#### `<GalleryController>`\n\nLayout with image space, left and right arrow, internal logic of gallery.\n\n#### `<PreviousImageButton>` and `<NextImageButton>`\n\nButtons which allow you to move within gallery.\n\n---\n\n## i18n\n\nThere is 1 thing that has to be localized and that is gallery counter, that what shows user where in gallery is located \n(e.g. Image 2 of 4). Gallery counter text can be customized by overriding its generator. That can be done by importing \ni18n from 'svelte-lightbox' and then setting `generateLocalizedGalleryCounter` to desired generator. \n\n### Default `generateLocalizedGalleryCounter`\n\n```ts\n    (activeImage: number, imageCount: number): string => {\n        return `Image ${activeImage + 1} of ${imageCount}`\n    }\n```\n\n# Contribution\n\nEvery issue or code contribution is welcome.\n\n# License\n\nIt's free, this component is under MIT license.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 501],
		[3596, 477],
		[3603, 673],
		[3610, 582],
		[3617, 445],
		[3624, 437],
		[3631, 496],
		[3638, 388],
		[3645, 223],
		[3652, 502],
		[3659, 627],
		[3666, 619],
		[3673, 574],
		[3680, 677],
		[3687, 718],
		[3694, 563],
		[3701, 709],
		[3708, 776],
		[3715, 797],
		[3722, 567],
		[3729, 664],
		[3736, 675],
		[3743, 740],
		[3750, 772],
		[3757, 873],
		[3764, 790],
		[3771, 624],
		[3778, 674],
		[3785, 719],
		[3792, 802],
		[3799, 1055],
		[3806, 642],
		[3813, 566],
		[3820, 700],
		[3827, 800],
		[3834, 556],
		[3841, 586],
		[3848, 615],
		[3855, 610],
		[3862, 671],
		[3869, 685],
		[3876, 712],
		[3883, 788],
		[3890, 691],
		[3897, 671],
		[3904, 711],
		[3911, 575],
		[3918, 531],
		[3925, 653],
		[3932, 728],
		[3939, 751],
		[3946, 720],
		[3953, 789],
		[3960, 832],
		[3967, 783],
		[3974, 835],
		[3981, 893],
		[3988, 710],
		[3995, 926],
		[4002, 735],
		[4009, 282],
		[4016, 427],
		[4023, 806],
		[4030, 801],
		[4037, 1336],
		[4044, 1879],
		[4051, 1192],
		[4058, 1193],
		[4065, 1096],
		[4072, 1073],
		[4079, 848],
		[4086, 714],
		[4093, 613],
		[4100, 624],
		[4107, 816],
		[4114, 747],
		[4121, 580],
		[4128, 563]
	],
	"esm": true,
	"cjs": true
}
