{
	"name": "super-svelte-router",
	"description": "Provides a powerful, easy-to-use router for Svelte.",
	"repo_url": "https://github.com/AliBasicCoder/super-svelte-router",
	"authors": ["ali_ahmed"],
	"homepage": "https://github.com/AliBasicCoder/super-svelte-router#readme",
	"downloads": 9,
	"updated": "2022-06-24T16:38:34.987Z",
	"tags": ["router"],
	"github_stars": 2,
	"typescript": true,
	"version": "1.6.1",
	"svelte_range": "^3.32.3",
	"last_rune_check_version": "1.6.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "super-svelte-router",
				"version": "1.6.1",
				"size": 129284
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# super-svelte-router\n\nthis project follows [semver](https://semver.org/)\n\na small, simple router for [svelte](https://github.com/sveltejs/svelte)\n\n# Table of contents\n\n- [Usage](#usage)\n- [API](#api)\n  - [routerStore](#routerstore)\n    - [redirect](#redirect-method)\n  - [noProps](#noprops)\n  - [Not found routes](#not-found-routes)\n  - [Static routes](#static-routes)\n  - [Dynamic routes](#dynamic-routes)\n  - [Lazy loaded routes](#Lazy-loaded-routes)\n    - [loading](#loading)\n  - [Protected routes](#protected-routes)\n    - [authRedirect](#authredirect)\n    - [authComponent](#authcomponent)\n  - [Metadata](#metadata)\n    - [defaultLoading](#defaultloading)\n    - [defaultAuthComponent](defaultauthcomponent)\n  - [Component](#component)\n  - [Layout](#layout)\n  - [isActive](#isactive)\n  - [redirect](#redirect)\n  - [link](#link)\n  - [linkHandler](#linkhandler)\n- [Notes](#notes)\n  - [lazy-loaded routes deprecated format](#lazy-loaded-routes-deprecated-format)\n- [Setting up rollup for code splitting](#setting-up-rollup-for-code-splitting)\n\n# Usage\n\n```html\n<script>\n  import { Router } from \"super-svelte-router\";\n\n  const routes = [\n    {\n      path: \"**\",\n      component: NotFound,\n    },\n    {\n      path: \"/\",\n      component: Main,\n    },\n    {\n      path: \"/about\",\n      component: Main,\n    },\n    {\n      path: \"/product/:id\",\n      component: Product,\n    },\n    {\n      path: \"/lazy\",\n      component: () => import(\"./Lazy.svelte\"),\n      loading: Loading,\n      lazyLoad: true,\n    },\n    {\n      path: \"/protected\",\n      authenticator: () => {\n        // some authentication logic\n        return true;\n        // or if fails\n        return false;\n      },\n      // or\n      authenticator: async () => {\n        // some async authentication logic\n        return true;\n        // or if fails\n        return false;\n      },\n      authComponent: authComponent,\n      component: Protected,\n    },\n  ];\n</script>\n\n<Router {routes}></Router>\n```\n\n# API\n\n## routerStore\n\nrouterStore is a custom svelte store that contain the status of the router\n\nAlso the Router will pass every property on $routerStore as props\n\nfor example you could do this:\n\n```html\n<script>\n  export let params;\n\n  console.log(params);\n</script>\n```\n\ninstead of:\n\n```html\n<script>\n  import { routerStore } from \"super-svelte-router\";\n\n  console.log($routerStore.params);\n</script>\n```\n\nTo prevent that pass noProp prop to the Router\n\n## noProps\n\n```html\n<script>\n  import { Router } from \"super-svelte-router\";\n\n  const routes = [...];\n</script>\n\n<Router {routes} noProps=\"{true}\"></Router>\n```\n\n### redirect method\n\nrouterStore.redirect is used for redirecting\n\nexample:\n\n```js\nimport { routerStore } from \"super-svelte-router\";\n\nrouterStore.redirect(\"/hello\");\n// to replace instead of push\nrouterStore.redirect(\"/hello\", true);\n```\n\n## Not found routes\n\nDO NOT put more than one 404 route in routes\n\nto use 404 route you set path to \\*\\* like below\n\n```js\n[\n  ...\n  {\n    path: \"**\",\n    component: NotFound\n  }\n  ...\n]\n```\n\nexample for 404 component\n\n```html\n<h1>404 Not Found</h1>\n```\n\n## Static routes\n\nDO NOT use `:` in static routes\n\nexample:\n\n```js\n[\n  ...\n  {\n    path: \"/static\",\n    component: Static\n  }\n  ...\n]\n```\n\nexample for static component\n\n```html\n<h1>I'm static</h1>\n```\n\n## Dynamic routes\n\nto use a dynamic route put : before the dynamic part(s) of url\nyou could have as many dynamic parts as you like\n\nfor example:\n\n`/foo/:id`\n\nin this example `:id` could be replaced with anything including `:id`\n\nexample for pathname(s) that matches this example\n\n`/foo/100`\n`/foo/random-id`\n`/foo/:id`\n`/foo/` <-- be careful with this one\n\nuse [routerStore](#routerstore) to access params\n\nexample:\n\n```js\n[\n  ...\n  {\n    path: \"/foo/:id\",\n    component: Params\n  }\n  ...\n]\n```\n\nexample for params component\n\n```html\n<script>\n  import { routerStore } from \"super-svelte-router\";\n\n  console.log($routerStore.params); // => { id: \"100\" }\n</script>\n\n<h1>id is {$routerStore.params.id}</h1>\n```\n\n## Lazy loaded routes\n\nto use a lazy route you set lazyLoad.component to a function that returns a dynamic import for component\n\nyou muse setup rollup first see [Setting up rollup for code splitting](#setting-up-rollup-for-code-splitting)\n\nif you use this module before v1.5.0 see [this note](#lazy-loaded-routes-deprecated-format)\n\nexample:\n\n```js\n[\n  ...\n  {\n    path: \"/lazy\",\n    // or lazy with params\n    path: \"/lazy/:id\",\n    component: () => import(\"./lazy.svelte\"),\n    lazyLoad: true\n  }\n  ...\n]\n```\n\n### loading\n\nloading is an option to display a component while the lazy-loaded component is loading\nor failed loading\n\nif you want to set a default loading component see [defaultLoading](#defaultloading)\n\n[routerStore](#routerstore) value will have these properties:\n\n- loadingStatus\n  a string that represents the status of loading\n  if `pending` component is still loading\n  if `error` loading failed\n- error (optional)\n  represents an error happened while loading component\n- params\n  Loading component have access to params\n\nexample:\n\n```js\n[\n  ...\n  {\n    path: \"/lazy\",\n    component: () => import(\"./lazy.svelte\"),\n    loading: Loading,\n    lazyLoad: true\n  }\n  ...\n]\n```\n\nexample for Loading component\n\n```html\n<script>\n  import { routerStore } from \"super-svelte-router\";\n</script>\n\n<h1>\n  {#if $routerStore.loadingStatus === \"pending\"} Loading... {:else if\n  $routerStore.loadingStatus === \"error\"} Error {/if}\n</h1>\n\n{#if $routerStore.loadingStatus === -1}\n<div>error {$routerStore.error}</div>\n{/if}\n```\n\n## Protected routes\n\nto use a protected route you set authenticator to a function that either returns a boolean\nor a promise that returns a boolean\n\nthe router will display the protected component only if:\n\n- authenticator returned a truthy value\n- authenticator returned a promise that returned a truthy value\n\notherwise authentication failed and it will hide the component\n\nexample:\n\n```js\n[\n  ...\n  {\n    path: \"/protected\",\n    // or protected with params\n    path: \"/protected/:id\"\n    authenticator: () => {\n      // some authentication logic...\n      return true;\n    },\n    // or\n    authenticator: async () => {\n      // some authentication logic...\n      return true;\n    },\n    component: Protected\n  }\n  ...\n]\n```\n\n### authRedirect\n\nauthRedirect is an option to redirect the user to a different route (/login for example) if authentication fails\n\nexample\n\n```js\n[\n  {\n    path: \"/login\",\n    component: Login,\n  },\n  {\n    path: \"/user-info\",\n    component: UserInfo,\n    authenticator: () => {\n      /* some authentication logic... */\n    },\n    // redirects the user to \"/login\" if he is not logged in\n    authRedirect: \"/login\",\n  },\n];\n```\n\n### authComponent\n\nauthComponent is an an option to display a component if authentication failed or pending\n\nif you want to set a default authComponent see [defaultAuthComponent](#defaultauthcomponent)\n\nthe router will pass the following props:\n\n- authStatus\n  a string that represents the status of authentication\n  if `pending` authenticator returned a promise and it's pending\n  if `fail` authentication failed\n  if `error` authenticator returned a promise and it reject\n- error (optional)\n  represents an error if authenticator returned a promise and it reject\n- params\n  Auth component have access to params\n\nexample\n\n```html\n<script>\n  import { routerStore } from \"super-svelte-router\";\n</script>\n\n<h1>\n  {#if $routerStore.authStatus === \"pending\"} Checking if you authenticated\n  {:else if $routerStore.authStatus === \"fail\"} Sorry, you are NOT authenticated\n  {:else if $routerStore.authStatus === \"error\"} Sorry, Unknown error happened\n  {/if}\n</h1>\n```\n\n## Layout routes\n\nlayout routes is to create a layouts that wraps some other routes\n\n### layout\n\nlayout could be a number or true if number that means the layout should be applied for the next layout value of routes\n\nif true that layout will be applied for the routes next it unless another layout overwrite it\n\nexample\n\n```js\n[\n  {\n    layout: 1,\n    component: Layout1\n  },\n  {\n    // Layout1 WILL be applied here\n    path: \"/example1\",\n    component: SomeComponent\n  },\n  {\n    // Layout1 WILL NOT be applied here\n    // 'cause it only convert it's 1 next item(s)\n    path: \"/example2\",\n    component: SomeComponent\n  },\n  {\n    layout: true,\n    component: Layout2\n  },\n  {\n    // Layout2 WILL be applied here\n    path: \"/example3\",\n    component: SomeComponent\n  },\n  {\n    // Layout2 WILL be applied here\n    // 'cause it will continue to convert routes until another layout overwrites it\n    path: \"/example4\",\n    component: SomeComponent\n  },\n  {\n    layout: true,\n    component: Layout3\n  }\n  {\n    // Layout3 WILL be applied here\n    // and Layout2 WILL NOT\n    // 'cause Layout3 overwrited Layout2\n    path: \"/example5\",\n    component: SomeComponent\n  },\n  {\n    layout: 1,\n    component: Layout4\n  },\n  {\n    // Layout3 WILL NOT be applied here\n    // 'cause Layout4 overwrited Layout3\n    path: \"/example6\",\n    component: SomeComponent\n  },\n]\n```\n\n### writing Layouts\n\nexample\n\n```html\n<script>\n  // all the other $routerStore properties is still accessible via props\n  export let params;\n</script>\n\n<h1>I'm Layout</h1>\n<div>\n  <slot />\n</div>\n\n<style>\n  div {\n    border: 2px solid black;\n    padding: 20px;\n  }\n</style>\n```\n\n## Metadata\n\nmetadata is an object that contains some metadata for the router\n\n```js\n[\n  {\n    metadata: true,\n    defaultLoading: loading,\n    defaultAuthComponent: Auth,\n  },\n];\n```\n\n### defaultLoading\n\nif [loading](#loading) is not set the routes will use it as a replacement\n\n### defaultAuthComponent\n\nif [authComponent](#authcomponent) is not set will use it as a replacement\n\n## Component\n\nif you want to have a component being in App.svelte instead of having a hole file for it use `Component`\n\n`Component` takes a prop called `name` to identify it\n\nto use a `Component` set `component` to the `Component`'s name\n\nyou could also set [authComponent](#authcomponent) and [loading](#loading) to the `Component`'s name\n\nyou could access every thing on [routerStore](#routerstore) via slot props\n\nexample:\n\n```html\n<script>\n  import { Router, Component } from \"super-svelte-router\";\n\n  const routes = [\n    {\n      path: \"/\",\n      component: \"main\",\n    },\n    {\n      path: \"/article/:id\",\n      component: \"article\",\n    },\n  ];\n</script>\n\n<Router {routes}>\n  <Component name=\"main\">\n    <h1>This is the main page</h1>\n  </Component>\n  <Component name=\"article\" let:params>\n    <h1>This is article {params.id}</h1>\n  </Component>\n</Router>\n```\n\n## isActive\n\nif you want to check if a route is use `isActive`\n\n`isActive` is a derived store the it's value is the function\n\nthat you pass the pathname of route you want to check if it's active\n\nexample:\n\n```html\n<script>\n  import { isActive } from \"super-svelte-router\";\n</script>\n\n<h1 class:red={$isActive(\"/\")}>I'm Red if route is /</h1>\n\n<style>\n  .red { color: red }\n</style>\n```\n\n## redirect\n\nuse [routerStore.redirect](#redirect-method) instead\n\nredirect is function to redirect programmatically\n\nNOTE: do not use full urls this function only works with pathname(s)\n\n```js\nimport { redirect } from \"super-svelte-router\";\n\nredirect(\"/endpoint\");\n// replace instead of push\nredirect(\"/endpoint\", true);\n```\n\n## link\n\nlink is an action for redirecting\n\n```html\n<script>\n  import { link } from \"super-svelte-router\";\n</script>\n\n<a href=\"/hello\" use:link>/hello</a>\n\n<!-- or (not recommended) -->\n\n<a use:link=\"/hello\">/hello</a>\n```\n\n## linkHandler\n\nuse [link](#link) instead\n\nlinkHandler is a function that handles clicking on a link (a tag)\n\n```html\n<script>\n  import { linkHandler } from \"super-svelte-router\";\n\n  function handler(e) {\n    linkHandler(e);\n    // your code...\n  }\n</script>\n\n<!-- if what you is only redirecting -->\n<a href=\"/hello\" on:click=\"{linkHandler}\">/hello</a>\n<!-- or -->\n<a href=\"/hello\" on:click=\"{handler}\">/hello</a>\n```\n\n# Notes\n\n## lazy-loaded routes deprecated format\n\nsince v1.5.0 lazy-loaded routes format changed and it will still be supported until v2.0.0\n\ndeprecated (old) format:\n\n```js\n// deprecated\n[\n  {\n    path: \"<path>\",\n    lazyLoad: {\n      component: () => import(\"<component-path>\"),\n      loading: LoadingComponent, // (optional)\n    },\n  },\n];\n```\n\ncurrent format:\n\n```js\n[\n  {\n    path: \"<path>\",\n    component: () => import(\"<component-path>\"),\n    loading: LoadingComponent, // (optional)\n    lazyLoad: true,\n  },\n];\n```\n\n# Setting up rollup for code splitting\n\nyou should set up code splitting if will use lazy loading\n\nin rollup.config.js\n\n```js\nexport default {\n  ...\n  output: {\n    sourcemap: true,\n    // change format from iffe to es\n    format: \"es\",\n    name: \"app\",\n    dir: \"public/build\",\n  },\n  ...\n}\n```\n\nin public/index.html\n\n```html\n<html>\n  <head>\n    ...\n    <!-- add type=\"module\" to script tag -->\n    <script src=\"build/main.js\" type=\"module\"></script>\n    ...\n  </head>\n  ...\n</html>\n```\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 1],
		[3596, 17],
		[3610, 16],
		[3617, 16],
		[3624, 3],
		[3631, 1],
		[3645, 4],
		[3666, 17],
		[3673, 1],
		[3694, 1],
		[3708, 1],
		[3715, 1],
		[3722, 15],
		[3729, 1],
		[3743, 1],
		[3757, 1],
		[3764, 11],
		[3771, 5],
		[3778, 16],
		[3785, 1],
		[3792, 3],
		[3799, 1],
		[3806, 2],
		[3813, 1],
		[3820, 1],
		[3827, 1],
		[3834, 1],
		[3841, 3],
		[3848, 5],
		[3855, 76],
		[3862, 1],
		[3869, 5],
		[3890, 17],
		[3897, 7],
		[3904, 7],
		[3911, 6],
		[3918, 3],
		[3925, 1],
		[3932, 1],
		[3939, 2],
		[3946, 2],
		[3960, 1],
		[3967, 3],
		[3981, 3],
		[3995, 6],
		[4002, 7],
		[4009, 4],
		[4016, 2],
		[4023, 8],
		[4030, 17],
		[4037, 10],
		[4044, 13],
		[4051, 4],
		[4058, 3],
		[4065, 1],
		[4079, 2],
		[4086, 2],
		[4093, 4],
		[4100, 50],
		[4107, 8],
		[4114, 9],
		[4121, 23],
		[4128, 4]
	]
}
