{
	"name": "crstore",
	"description": "Create conflict-free replicated stores for Svelte.",
	"repo_url": "https://github.com/Azarattum/CRStore",
	"authors": ["azarattum"],
	"homepage": "https://github.com/Azarattum/CRStore#readme",
	"downloads": 126,
	"updated": "2025-02-11T04:49:18.967Z",
	"tags": ["miscellaneous"],
	"github_stars": 102,
	"typescript": true,
	"version": "0.24.0",
	"svelte_range": "^5.19.9",
	"kit_range": "2.17.1",
	"last_rune_check_version": "0.24.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "crstore",
				"version": "0.24.0",
				"size": 61760
			},
			{
				"name": "@types/bun",
				"version": "1.2.12",
				"size": 4006
			},
			{
				"name": "bun-types",
				"version": "1.2.12",
				"size": 1651178
			},
			{
				"name": "@types/node",
				"version": "22.15.3",
				"size": 2350386
			},
			{
				"name": "undici-types",
				"version": "6.21.0",
				"size": 83680
			},
			{
				"name": "@vlcn.io/crsqlite",
				"version": "0.16.3",
				"size": 12175802
			},
			{
				"name": "@vlcn.io/crsqlite-wasm",
				"version": "0.16.0",
				"size": 2090673
			},
			{
				"name": "async-mutex",
				"version": "0.4.1",
				"size": 54722
			},
			{
				"name": "tslib",
				"version": "2.8.1",
				"size": 90359
			},
			{
				"name": "@vlcn.io/xplat-api",
				"version": "0.15.0",
				"size": 16301
			},
			{
				"name": "comlink",
				"version": "4.4.2",
				"size": 252242
			},
			{
				"name": "@vlcn.io/wa-sqlite",
				"version": "0.22.0",
				"size": 3088579
			},
			{
				"name": "better-sqlite3",
				"version": "11.9.1",
				"size": 10150236
			},
			{
				"name": "bindings",
				"version": "1.5.0",
				"size": 11230
			},
			{
				"name": "file-uri-to-path",
				"version": "1.0.0"
			},
			{
				"name": "prebuild-install",
				"version": "7.1.3",
				"size": 34180
			},
			{
				"name": "detect-libc",
				"version": "2.0.4",
				"size": 23652
			},
			{
				"name": "expand-template",
				"version": "2.0.3",
				"size": 5410
			},
			{
				"name": "github-from-package",
				"version": "0.0.0"
			},
			{
				"name": "minimist",
				"version": "1.2.8",
				"size": 54477
			},
			{
				"name": "mkdirp-classic",
				"version": "0.5.3",
				"size": 4498
			},
			{
				"name": "napi-build-utils",
				"version": "2.0.0",
				"size": 12670
			},
			{
				"name": "node-abi",
				"version": "3.75.0",
				"size": 16891
			},
			{
				"name": "semver",
				"version": "7.7.1",
				"size": 96674
			},
			{
				"name": "pump",
				"version": "3.0.2",
				"size": 8762
			},
			{
				"name": "once",
				"version": "1.4.0"
			},
			{
				"name": "wrappy",
				"version": "1.0.2"
			},
			{
				"name": "end-of-stream",
				"version": "1.4.4",
				"size": 6234
			},
			{
				"name": "rc",
				"version": "1.2.8",
				"size": 17255
			},
			{
				"name": "ini",
				"version": "1.3.8",
				"size": 9304
			},
			{
				"name": "deep-extend",
				"version": "0.6.0",
				"size": 9190
			},
			{
				"name": "strip-json-comments",
				"version": "2.0.1"
			},
			{
				"name": "simple-get",
				"version": "4.0.1",
				"size": 14971
			},
			{
				"name": "decompress-response",
				"version": "6.0.0",
				"size": 5472
			},
			{
				"name": "mimic-response",
				"version": "3.1.0",
				"size": 6003
			},
			{
				"name": "simple-concat",
				"version": "1.0.1",
				"size": 4624
			},
			{
				"name": "tar-fs",
				"version": "2.1.2",
				"size": 28201
			},
			{
				"name": "chownr",
				"version": "1.1.4",
				"size": 5709
			},
			{
				"name": "tar-stream",
				"version": "2.2.0",
				"size": 27671
			},
			{
				"name": "bl",
				"version": "4.1.0",
				"size": 64427
			},
			{
				"name": "buffer",
				"version": "5.7.1",
				"size": 82527
			},
			{
				"name": "base64-js",
				"version": "1.5.1",
				"size": 9624
			},
			{
				"name": "ieee754",
				"version": "1.2.1",
				"size": 6796
			},
			{
				"name": "inherits",
				"version": "2.0.4",
				"size": 3958
			},
			{
				"name": "readable-stream",
				"version": "3.6.2",
				"size": 123971
			},
			{
				"name": "string_decoder",
				"version": "1.3.0",
				"size": 14427
			},
			{
				"name": "safe-buffer",
				"version": "5.2.1",
				"size": 32101
			},
			{
				"name": "util-deprecate",
				"version": "1.0.2"
			},
			{
				"name": "fs-constants",
				"version": "1.0.0",
				"size": 2223
			},
			{
				"name": "tunnel-agent",
				"version": "0.6.0"
			},
			{
				"name": "kysely",
				"version": "0.27.6",
				"size": 2964117
			},
			{
				"name": "react",
				"version": "19.1.0",
				"size": 167000
			},
			{
				"name": "solid-js",
				"version": "1.9.6",
				"size": 1051358
			},
			{
				"name": "csstype",
				"version": "3.1.3",
				"size": 1246074
			},
			{
				"name": "seroval",
				"version": "1.2.1",
				"size": 1054416
			},
			{
				"name": "seroval-plugins",
				"version": "1.2.1",
				"size": 156221
			},
			{
				"name": "svelte",
				"version": "5.28.2",
				"size": 2426223
			},
			{
				"name": "@ampproject/remapping",
				"version": "2.3.0",
				"size": 78946
			},
			{
				"name": "@jridgewell/gen-mapping",
				"version": "0.3.8",
				"size": 81596
			},
			{
				"name": "@jridgewell/set-array",
				"version": "1.2.1",
				"size": 17945
			},
			{
				"name": "@jridgewell/sourcemap-codec",
				"version": "1.5.0",
				"size": 112815
			},
			{
				"name": "@jridgewell/trace-mapping",
				"version": "0.3.25",
				"size": 169330
			},
			{
				"name": "@jridgewell/resolve-uri",
				"version": "3.1.2",
				"size": 53153
			},
			{
				"name": "@types/estree",
				"version": "1.0.7",
				"size": 26147
			},
			{
				"name": "acorn",
				"version": "8.14.1",
				"size": 547473
			},
			{
				"name": "@sveltejs/acorn-typescript",
				"version": "1.0.5",
				"size": 197476
			},
			{
				"name": "aria-query",
				"version": "5.3.2",
				"size": 176114
			},
			{
				"name": "axobject-query",
				"version": "4.1.0",
				"size": 110878
			},
			{
				"name": "clsx",
				"version": "2.1.1",
				"size": 8555
			},
			{
				"name": "esm-env",
				"version": "1.2.2",
				"size": 3784
			},
			{
				"name": "esrap",
				"version": "1.4.6",
				"size": 50818
			},
			{
				"name": "is-reference",
				"version": "3.0.3",
				"size": 3953
			},
			{
				"name": "locate-character",
				"version": "3.0.0",
				"size": 5325
			},
			{
				"name": "magic-string",
				"version": "0.30.17",
				"size": 467464
			},
			{
				"name": "zimmerframe",
				"version": "1.1.2",
				"size": 12266
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[3, 4],
			[0, 5],
			[0, 6],
			[6, 7],
			[7, 8],
			[6, 9],
			[9, 10],
			[6, 11],
			[0, 12],
			[12, 13],
			[13, 14],
			[12, 15],
			[15, 16],
			[15, 17],
			[15, 18],
			[15, 19],
			[15, 20],
			[15, 21],
			[15, 22],
			[22, 23],
			[15, 24],
			[24, 25],
			[25, 26],
			[24, 27],
			[27, 25],
			[15, 28],
			[28, 29],
			[28, 19],
			[28, 30],
			[28, 31],
			[15, 32],
			[32, 33],
			[33, 34],
			[32, 25],
			[32, 35],
			[15, 36],
			[36, 24],
			[36, 37],
			[36, 38],
			[38, 39],
			[39, 40],
			[40, 41],
			[40, 42],
			[39, 43],
			[39, 44],
			[44, 43],
			[44, 45],
			[45, 46],
			[44, 47],
			[38, 27],
			[38, 48],
			[38, 43],
			[38, 44],
			[36, 20],
			[15, 49],
			[49, 46],
			[0, 50],
			[0, 51],
			[0, 52],
			[52, 53],
			[52, 54],
			[52, 55],
			[0, 56],
			[56, 57],
			[57, 58],
			[58, 59],
			[58, 60],
			[58, 61],
			[61, 62],
			[61, 60],
			[57, 61],
			[56, 60],
			[56, 63],
			[56, 64],
			[56, 65],
			[56, 66],
			[56, 67],
			[56, 68],
			[56, 69],
			[56, 70],
			[70, 60],
			[56, 71],
			[71, 63],
			[56, 72],
			[56, 73],
			[73, 60],
			[56, 74]
		],
		"circular": []
	},
	"legacy_svelte": false,
	"readme": "# CRStore\n\nConflict-free replicated store. \n\n> WARNING: Still in development! Expect breaking changes!\n>\n> BREAKING (v0.20.0): Added support for React & Solid. For Svelte import `database` from `crstore/svelte`. Renamed `store` to `replicated`.\n>\n> BREAKING (v0.19.0): Updated `cr-sqlite` from v13 to v16. See [changelog](https://github.com/vlcn-io/cr-sqlite/releases)\n> \n> BREAKING (v0.18.0): If you want to support [older browsers](https://caniuse.com/mdn-api_navigator_locks) consider adding [navigator.locks polyfill](https://www.npmjs.com/package/navigator.locks) to your project. CRStore does **not** ship it since `0.18.0`!\n\n- ✨ Elegance of [Svelte](https://svelte.dev/) / [SolidJS](https://www.solidjs.com/) / [React](https://react.dev/)\n- 💪 Power of [SQLite](https://www.sqlite.org/index.html)\n- 🛡️ Safety with [Kysely](https://github.com/koskimas/kysely)\n- ⚡ CRDTs powered by [cr-sqlite](https://github.com/vlcn-io/cr-sqlite)\n- 🔮 Automagical schema using [superstruct](https://github.com/ianstormtaylor/superstruct)\n- 🤝 First class [tRPC](https://github.com/trpc/trpc) support\n- 🐇 Supports [bun:sqlite](https://bun.sh/docs/api/sqlite) (experimental)\n\nInstall `crstore` and `superstruct` (for automatic schema):\n```sh\nnpm install crstore superstruct\n```\n\n## Using CRStore\n\nTo start using `CRStore` first you need to define a schema for your database. This is like a [Kysely schema](https://github.com/koskimas/kysely/blob/master/recipes/schemas.md), but defined with [superstruct](https://github.com/ianstormtaylor/superstruct), so we can have a runtime access to it. \n```ts\nimport { crr, primary } from \"crstore\";\n\n// Struct that represents the table\nconst todos = object({\n  id: string(),\n  title: string(),\n  text: string(),\n  completed: boolean(),\n});\ncrr(todos); // Register table with conflict-free replicated relations\nprimary(todos, \"id\"); // Define a primary key (can be multi-column)\n\nconst schema = object({ todos });\n```\n\nNow you can establish a database connection with your schema:\n```ts\nimport { database } from \"crstore/svelte\";\n\nconst { replicated } = database(schema);\n```\n> Note, that this example uses Svelte version (`replicated`). For React `database` function will return `useReplica` and `createReplica` for SolidJS. Learn more how to use `CRStore` with these frameworks [here](./src/demo/frameworks/).\n\nWith the `replicated` function we can create arbitrary views to our database which are valid svelte stores. For example let's create a store that will have our entire `todos` table:\n```ts\nconst todos = replicated((db) => db.selectFrom(\"todos\").selectAll());\n```\n\nTo mutate the data we can either call `.update` on the store or add built-in actions upon creation:\n```ts\nconst todos = replicated((db) => db.selectFrom(\"todos\").selectAll(), {\n  // Define actions for your store\n  toggle(db, id: string) {\n    return db\n      .updateTable(\"todos\")\n      .set({ completed: sql`NOT(completed)` })\n      .where(\"id\", \"=\", id)\n      .execute();\n  },\n  remove(db, id: string) {\n    return db.deleteFrom(\"todos\").where(\"id\", \"=\", id).execute();\n  },\n});\n\n// Call an update manually\ntodos.update((db) => db.insertInto(\"todos\").values({ ... }).execute());\n// Call an action\ntodos.toggle(\"id\");\n```\n\nWe can simple iterate the store to render the results:\n> Note that the database loads asynchronously, so the store will contain an empty array util it loads.\n```svelte\n{#each $todos as todo}\n  <h2>{todo.title}</h2>\n  <p>{todo.text}</p>\n{/each}\n```\n\nThis we dynamically react to all the changes in our database even if we make them from a different store. Each store we create reacts only to changes in tables we have selected from.\n\n## Connecting with tRPC\n\nYou can provide custom handlers for your network layer upon initialization. `push` method is called when you make changes locally that need to be synchronized. `pull` is called when `crstore` wants to subscribe to any changes coming from the network. Let's say you have a `push` [tRPC mutation](https://trpc.io/docs/quickstart) and a `pull` [tRPC subscription](https://trpc.io/docs/subscriptions) then you can use them like so when connection to a database:\n```ts\nconst { replicated } = database(schema, {\n  push: trpc.push.mutate,\n  pull: trpc.pull.subscribe,\n});\n```\n\nThen your server implementation would look something like this:\n```ts\nimport { database } from \"crstore\";\n\nconst { subscribe, merge } = database(schema);\nconst { router, procedure } = initTRPC.create();\n\nconst app = router({\n  push: procedure.input(any()).mutation(({ input }) => merge(input)),\n  pull: procedure\n    .input(object({ version: number(), client: string() }))\n    .subscription(({ input }) =>\n      observable(({ next }) => subscribe([\"*\"], next, input))\n    ),\n});\n```\n\n> If you are using `vite-node` to run your server, you should add `define: { \"import.meta.env.SSR\": false }` to your vite config file.\n\n## Advanced Usage\n\n### Depend on other stores\n\nWhen creating a `crstore` you might want it to subscribe to some other stores. For example you can have a writable `query` store and a `search` crstore. Where `search` updates every time `query` updates. To do so you can use `.with(...stores)` syntax when creating a store. All the resolved dependencies will be passed to your SELECT callback.\n```ts\nimport { database } from \"crstore/svelte\";\nimport { writable } from \"svelte/store\";\n\nconst { replicated } = database(schema);\n\nconst query = writable(\"hey\");\nconst search = replicated.with(query)((db, query) => \n  db.selectFrom(\"todos\").where(\"text\", \"=\", query).selectAll()\n);\n```\n\n### Specify custom paths\n\nIf needed you can specify custom paths to `better-sqlite3` binding, `crsqlite` extension and `crsqlite-wasm` binary. To do so, provide `path` option upon `database` initialization:\n```ts\nimport { database } from \"crstore/svelte\";\n\nconst { replicated } = database(schema, {\n  // These are the default values:\n  paths: {\n    wasm: \"/sqlite.wasm\",\n    extension: \"node_modules/@vlcn.io/crsqlite/build/Release/crsqlite.node\",\n    binding: undefined,\n  }\n});\n```\n\n### Specify database name\n\nIf you need to manage multiple databases you can specify `name` database option. This will be used as a filename on a server or a VFS path on a client.\n```ts\nimport { database } from \"crstore/svelte\";\n\nconst { replicated } = database(schema, {\n  name: \"data/example.db\"\n});\n```\n\n### Specify a custom online checker\n\n`push` and `pull` capabilities rely on checking current online status. When available `navigator.onLine` is used by default. You have an option to override it by providing a custom online function.\n```ts\nimport { database } from \"crstore/svelte\";\n\nconst { replicated } = database(schema, {\n  online: () => true // Always online\n});\n```\nNote that this is only really needed if you use `pull` and `push` helpers. If your [server implementation](#connecting-with-trpc) uses `subscribe` and `merge` methods instead, the online checker is unnecessary (defaults to `false`).\n\n### Apply updates without creating a store\n\nUse can apply any updates right after you have initialized your database connection by using the `update` function. If there are any stores initialized, they will also be updated if you change any tables they depend on.\n```ts\nimport { database } from \"crstore\";\n\nconst { update } = database(schema);\nupdate((db) => db.insertInto(\"todos\").values({ ... }));\n```\n\n### Access raw database connection\n\nUse can access the raw database connection. This can sometime be useful for debugging. Note that any mutations you do directly from the connection **will not trigger any reactive updates**! To mutate data safely please use [the `update` function](#apply-updates-without-creating-a-store) instead.\n\n```ts\nimport { database } from \"crstore\";\n\nconst { connection } = database(schema);\nconst db = await connection;\n\nconst data = await db.selectFrom(\"todos\").selectAll().execute()\nconsole.log(data);\n```\n\n### Nested JSON queries\n\n`crstore` provides support for nested JSON queries via it's own [JSON Kysely plugin](src/lib/database/json.ts). You can see how it's used in practice be looking at the [library demo](src/demo/library/library.ts).\n```ts\nimport { groupJSON } from \"crstore\";\n\nconst grouped = replicated((db) =>\n  db\n    .selectFrom(\"tracks\")\n    .leftJoin(\"artists\", \"tracks.artist\", \"artists.id\")\n    .leftJoin(\"albums\", \"tracks.album\", \"albums.id\")\n    .select([\n      \"albums.title as album\",\n      (qb) =>\n        // Here we aggregate all the tracks for the album\n        groupJSON(qb, {\n          id: \"tracks.id\",\n          title: \"tracks.title\",\n          artist: \"artists.title\",\n          album: \"albums.title\",\n        }).as(\"tracks\"),\n    ])\n    // `groupBy` is essential for the aggregation to work\n    .groupBy(\"album\")\n);\n\n$grouped[0] // ↓ The type is inferred from `json`\n// {\n//   album: string | null;\n//   tracks: {\n//     id: string;\n//     title: string;\n//     artist: string | null;\n//     album: string | null;\n//   }[]\n// }\n```\n\n### Specify indexes in the schema\nYou can specify one or more indexes for your tables.\n\n```ts\nimport { index } from \"crstore\";\n\nconst todos = object({\n  id: string(),\n  title: string(),\n  text: string(),\n  completed: boolean(),\n});\nindex(todos, \"title\");\nindex(todos, \"text\", \"completed\"); // Multi-column index\n```\n\n### Define a fractional index for a table\n`cr-sqlite` supports conflict free fractional indexing. To use them in `CRStore` first you should define table as ordered in your schema:\n\n```ts\nimport { ordered } from \"crstore\";\n\nconst todos = object({\n  id: string(),\n  text: string(),\n  completed: boolean(),\n  collection: string(),\n  order: string()\n});\n// Sort by 'order' column in each 'collection'\nordered(todos, \"order\", \"collection\");\n```\n\nThen you can append or prepend items by putting the exported constants as your order value.\n```ts\nimport { APPEND, PREPEND } from \"crstore\";\n\ndb.insertInto(\"todos\")\n  .values({\n    id: \"4321\",\n    text: \"Hello\",\n    completed: false,\n    collection: \"1234\",\n    order: APPEND,\n  })\n  .execute();\n```\n\nTo move an item you should update the `{you_table}_fractindex` virtual table with the `after_id` value.\n```ts\ndb\n  .updateTable(\"todos_fractindex\" as any)\n  .set({ after_id: \"2345\" })\n  .where(\"id\", \"=\", \"4321\")\n  .execute();\n```\n\nCheck out the [sortable example](src/demo/sortable) for more details.\n\n### Setup server side rendering\nWhen defining your database set `ssr` option to `true`:\n```ts\nconst { replicated, merge, subscribe } = database(schema, {\n  ssr: true,\n});\n```\n\nAdd `+page.server.ts` file to preload your data with SvelteKit. You can call `.then` on a store to get a promise with its latest state (the `await` keyword would achieve the same effect). Pass down the value of your store to your page like this:\n```ts\nimport type { PageServerLoad } from \"./$types\";\nimport { items } from \"./stores\";\n\nexport const load: PageServerLoad = async () => ({ ssr: await items });\n```\n\nIn your `+page.svelte` you render the server-side data until client database is ready.\n```svelte\n<script lang=\"ts\">\n  import type { PageData } from \"./$types\";\n  import { items } from \"./stores\";\n  import { ready } from \"$lib\";\n\n  export let data: PageData;\n</script>\n\n{#each ready($items) ? $items : data.ssr as item}\n  <li>{item.data}</li>\n{/each}\n```\n\nCheck out the [ssr example](src/demo/ssr/) for complete implementation.\n\n### Error handling\nYou can add an error handler to your database connection.\n```ts\nconst { replicated } = database(schema, {\n  error: (reason) => console.log(reason),\n});\n```\n\nIt will handle all the errors that happen during subscriber callbacks.\n",
	"downloads_history": [
		[3589, 86],
		[3596, 5],
		[3603, 11],
		[3610, 3],
		[3617, 3],
		[3624, 9],
		[3631, 3],
		[3638, 9],
		[3645, 41],
		[3652, 465],
		[3659, 167],
		[3666, 85],
		[3673, 282],
		[3680, 7],
		[3687, 69],
		[3694, 118],
		[3701, 1],
		[3708, 65],
		[3715, 28],
		[3722, 14],
		[3729, 3],
		[3736, 5],
		[3743, 3],
		[3750, 60],
		[3757, 20],
		[3764, 4],
		[3771, 77],
		[3778, 68],
		[3785, 5],
		[3792, 14],
		[3799, 1],
		[3806, 4],
		[3813, 14],
		[3820, 36],
		[3827, 161],
		[3834, 162],
		[3841, 441],
		[3848, 59],
		[3855, 33],
		[3862, 96],
		[3869, 19],
		[3876, 40],
		[3883, 77],
		[3890, 15],
		[3897, 82],
		[3904, 78],
		[3911, 91],
		[3918, 197],
		[3925, 264],
		[3932, 176],
		[3939, 157],
		[3946, 45],
		[3953, 47],
		[3960, 76],
		[3967, 76],
		[3974, 74],
		[3981, 36],
		[3988, 12],
		[3995, 61],
		[4002, 111],
		[4009, 10],
		[4016, 90],
		[4023, 112],
		[4030, 88],
		[4037, 124],
		[4044, 105],
		[4051, 49],
		[4058, 138],
		[4065, 34],
		[4072, 38],
		[4079, 117],
		[4086, 183],
		[4093, 346],
		[4100, 78],
		[4107, 68],
		[4114, 126],
		[4121, 79],
		[4128, 177]
	],
	"esm": true,
	"cjs": false
}
