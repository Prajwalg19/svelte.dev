{
	"name": "svelte-lock",
	"description": "Manage reactive locks for Svelte 5 applications.",
	"repo_url": "https://github.com/akeylimepie/svelte-lock",
	"authors": ["akeylimepie"],
	"homepage": "https://github.com/akeylimepie/svelte-lock#readme",
	"downloads": 56,
	"updated": "2025-04-03T03:30:57.227Z",
	"tags": ["miscellaneous"],
	"github_stars": 0,
	"typescript": true,
	"version": "1.1.0",
	"svelte_range": "^5.0.0",
	"kit_range": "^2.20.2",
	"last_rune_check_version": "1.1.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-lock",
				"version": "1.1.0",
				"size": 7697
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-lock\n\n[![version](https://badgen.now.sh/npm/v/svelte-lock)](https://www.npmjs.com/package/svelte-lock)\n[![downloads](https://badgen.now.sh/npm/dm/svelte-lock)](https://www.npmjs.com/package/svelte-lock)\n\nReactive lock manager for Svelte 5\n\n## Installation\n\n```bash\nnpm install svelte-lock\n```\n\n## Usage\n\nA lock key can be a string or a symbol. You can use one or multiple keys to manage independent or shared lock\nconditions.\n\n### 1. Initialize lock context\n\nCall `initLockContext()` once at the root of your Svelte app:\n\n```svelte\n<script>\n\timport { initLockContext } from 'svelte-lock';\n\n\tinitLockContext();\n</script>\n```\n\n### 2. Use `useLock()` inside a component\n\nUse `useLock()` to observe and control the lock state for one or more keys.\n\n#### Single key\n\n```svelte\n<script>\n\timport { useLock } from 'svelte-lock';\n\n\tconst task = useLock(Symbol());\n\n\tfunction run() {\n\t\ttask.lock();\n\n\t\tsetTimeout(() => {\n\t\t\ttask.release();\n\t\t}, 1000);\n\t}\n</script>\n\n<button on:click={run} disabled={task.isLocked}>\n\t{#if task.isLocked}\n\t\tRunning...\n\t{:else}\n\t\tRun\n\t{/if}\n</button>\n```\n\n#### Multiple keys\n\n```svelte\n<script>\n\tconst lock = useLock(['saving', 'submitting']);\n\n\tif (lock.isLocked) {\n\t\t// true if either key is locked\n\t}\n</script>\n```\n\n### 3. Use `getLocker()` for lower-level control\n\n```svelte\n<script>\n\timport { getLocker } from 'svelte-lock';\n\n\tconst locker = getLocker();\n\tconst release = locker.lock(['form', 'submit']);\n\n\t// Later\n\trelease();\n</script>\n```\n\n## API\n\n### `initLockContext(): void`\n\nInitializes the internal lock state.\nMust be called once in a root-level component.\n\n---\n\n### `useLock(keys?: LockKey | LockKey[]): { ... }`\n\nReturns an object for observing and controlling a specific lock or group of locks.\nIf no key is provided, a unique symbol will be used automatically.\n\n- `keys: LockKey[]` — the list of keys used for this lock\n- `isLocked: boolean` — reactive value; `true` if any of the provided keys are currently locked.\n- `lock(): void` — locks all provided keys. Already locked keys stay locked.\n- `release(): void` — removes the lock for all provided keys.\n\n---\n\n### `getLocker(): { ... }`\n\nReturns an object for low-level lock operations with the following methods:\n\n- **`lock(keys: LockKey[]): () => void`**  \n  Locks the given keys. Returns a function that releases them.\n\n- **`release(keys: LockKey[]): void`**  \n  Manually removes keys from the lock.\n\n- **`observe(keys: LockKey[]): { isLocked: boolean }`**  \n  Creates a reactive observer for the given keys.  \n  The `isLocked` property is `true` if any of the specified keys are currently locked.\n\n- **`isLocked(keys: LockKey[]): boolean`**  \n  Returns `true` if any of the given keys are currently locked.  \n  _This is a non-reactive snapshot and does not update automatically._\n\n---\n\n## License\n\nMIT\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 21],
		[3596, 20],
		[3603, 1],
		[3610, 5],
		[3617, 2],
		[3631, 1],
		[3638, 10],
		[3645, 1],
		[3652, 1],
		[3659, 2],
		[3666, 2],
		[3673, 1],
		[3687, 2],
		[3701, 63],
		[3708, 12],
		[3715, 13],
		[3722, 6],
		[3729, 8],
		[3736, 6],
		[3743, 290],
		[3750, 64],
		[3757, 9],
		[3764, 2],
		[3771, 9],
		[3778, 15],
		[3785, 85],
		[3792, 101],
		[3799, 12],
		[3806, 18],
		[3813, 2],
		[3827, 2],
		[3834, 33],
		[3841, 7],
		[3848, 3],
		[3855, 1],
		[3862, 3],
		[3869, 1],
		[3876, 2],
		[3890, 11],
		[3897, 10],
		[3918, 2],
		[3932, 2],
		[3939, 1],
		[3946, 1],
		[3953, 1],
		[3960, 1],
		[3967, 2],
		[3974, 1],
		[3988, 1],
		[3995, 3],
		[4002, 9],
		[4016, 12],
		[4030, 1],
		[4037, 7],
		[4044, 12],
		[4051, 3],
		[4065, 1],
		[4100, 9],
		[4107, 324],
		[4114, 56],
		[4121, 45],
		[4128, 13]
	],
	"esm": true,
	"cjs": false
}
