{
	"name": "@grottopress/kitty",
	"description": "Provides utilities for secure SvelteKit frontend apps.",
	"repo_url": "https://github.com/GrottoPress/kitty",
	"authors": ["akadusei"],
	"homepage": "https://github.com/GrottoPress/kitty#README",
	"downloads": 24,
	"updated": "2025-04-27T15:12:45.872Z",
	"tags": ["server", "auth"],
	"github_stars": 16,
	"typescript": true,
	"version": "0.14.2",
	"svelte_range": "^5.0.0",
	"kit_range": "^2.0.0",
	"last_rune_check_version": "0.14.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@grottopress/kitty",
				"version": "0.14.2",
				"size": 25753
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Kitty\n\n**Kitty** is a collection of utilities for *SvelteKit*. It includes libraries and handlers for developing secure frontend apps.\n\n*Kitty* features encrypted server-side sessions, and provides mitigations against CSRF attacks for forms submitted to the server.\n\n## Installing\n\n1. Install via NPM:\n\n   ```bash\n   npm i -D @grottopress/kitty\n   ```\n\n1. Set `compilerOptions.moduleResolution` to `bundler`, `node16`, or `nodenext` in `tsconfig.json`:\n\n   ```json\n   {\n     \"compilerOptions\": {\n       \"moduleResolution\": \"bundler\",\n     }\n   }\n   ```\n\n   This prevents the following error:\n\n   ```\n   Cannot find module '@grottopress/kitty' or its corresponding type declarations\n   ```\n\n   See <https://kit.svelte.dev/docs/packaging#typescript>.\n\n1. Set up `vite.config.js` as follows:\n\n   ```javascript\n   // ->> vite.config.js\n\n   // ...\n\n   /** @type {import('vite').UserConfig} */\n   const config = {\n     // ...\n     optimizeDeps: {\n       exclude: ['@grottopress/kitty'],\n     },\n     ssr: {\n       noExternal: ['@grottopress/kitty'],\n     },\n     // ...\n   }\n\n   export default config\n   ```\n\n## Using\n\n### Handlers\n\n*Kitty* provides the following handlers:\n\n- `decryptSession`: Decrypts session retrieved from the `Cookie` request header\n- `disableCache`: Sets `Cache-Control` and `Expires` headers to disable caching app-wide\n- `encryptSession`: Encrypts session and sends it via the `Set-Cookie` response header\n- `filterRequestMethods`: Forbids requests methods not listed in the `ALLOWED_REQUEST_METHODS` env var\n- `verifyCsrfToken`: Generates and verifies CSRF tokens for requests that require them\n\nThe `src/hooks.server.ts` file should look similar to this:\n\n```typescript\n// ->> src/hooks.server.ts\n\n// ...\n\nimport { sequence } from '@sveltejs/kit/hooks'\nimport {\n  decryptSession,\n  disableCache,\n  encryptSession,\n  filterRequestMethods,\n  verifyCsrfToken\n} from '@grottopress/kitty/server'\n\nexport const handle = sequence(\n  decryptSession,\n  filterRequestMethods,\n  verifyCsrfToken,\n  disableCache,\n  encryptSession\n)\n\n// ...\n```\n\nAdd the following to the `.env` file:\n\n```bash\n# ->> .env\n\n# ...\n\n# Client\n#\n\n# Server\n#\nALLOWED_REQUEST_METHODS=DELETE,GET,HEAD,PATCH,POST\nSECRET_KEY=J9oyuTDuGSQhwE3lOutjUgXe4yfpWQtI # 32 bytes/chars\nSESSION_KEY=_my-app-session\n\n# ...\n```\n\nUpdate the file with your own details. Use a **cryptographically-secure** value for the secret key. You may run `tr -cd '[:alnum:]' < /dev/random | fold -w32 | head -n1` to generate a key.\n\nRemember to set secure permissions for this file: `chmod 0600 .env`.\n\nAdd types to `src/app.d.ts`:\n\n```typescript\n\ndeclare namespace App {\n  // ...\n\n  interface Locals {\n    session: Session\n    // ...\n  }\n\n  interface PageData {\n    csrfHeaderKey?: string\n    csrfParamKey?: string\n    csrfToken?: string\n    // ...\n  }\n\n  interface Session {\n    csrfHeaderKey?: string\n    csrfParamKey?: string\n    csrfToken?: string\n    // ...\n  }\n\n  // ...\n}\n\n// ...\n```\n\nDisable SvelteKit's built-in CSRF protection in `svelte.config.js`:\n\n```javascript\n// ...\n\nconst config = {\n  kit: {\n    csrf: { checkOrigin: false }\n    // ...\n  },\n  // ...\n}\n\n// ...\n```\n\n#### Session\n\n*Kitty* features encrypted server-side sessions. Any value stored in the `event.locals.session` object is encrypted and persisted as cookies on the client via the `Set-Cookie` response header.\n\nSessions can be made available client-side via the session store by defining `.load()` in `src/routes/+layout.server.ts` as follows:\n\n```typescript\n// ->> src/routes/+layout.server.ts\n\n// ...\n\nimport type { ServerLoad } from '@sveltejs/kit'\n\nexport const load: ServerLoad = async ({ locals }) => {\n  const { csrfHeaderKey, csrfParamKey, csrfToken } = locals.session\n\n  return { csrfHeaderKey, csrfParamKey, csrfToken }\n}\n\n// ...\n```\n\n```typescript\n// ->> src/routes/+layout.ts\n\n// ...\n\nimport type { Load } from '@sveltejs/kit'\n\nexport const load: Load = async ({ data }) => {\n  const csrfHeaderKey = data?.csrfHeaderKey\n  const csrfParamKey = data?.csrfParamKey\n  const csrfToken = data?.csrfToken\n\n  return { csrfHeaderKey, csrfParamKey, csrfToken }\n}\n\n// ...\n```\n\nThis can then be accessed in routes (eg: `data.csrfToken`), or via the `page` store in components (eg: `$page.data.csrfToken`).\n\n#### CSRF\n\n*Kitty* provides support for generating and verifying CSRF tokens for forms submitted to the server, either via JSON or as form data.\n\nCSRF mitigations are enforced for all requests *except* those with the `GET`, `HEAD`, `OPTIONS`, and `TRACE` methods.\n\n**Examples**:\n\n```bash\n# ->> .env\n\n# ...\n\n# Skip CSRF protection for these routes (comma-separated `event.route.id`s).\n# Adding a route will include all its children.\nCSRF_SKIP_ROUTES=/about/team,/blog/[slug]\n\n# ...\n```\n\n- JSON:\n\n  ```typescript\n  // src/routes/some-path/+page.ts\n\n  // ...\n\n  import type { Load } from '@sveltejs/kit'\n\n  export const load: Load = async ({ fetch }) => {\n    return { fetch }\n  }\n\n  // ...\n  ```\n\n  ```html\n  <!-- src/routes/some-path/+page.svelte -->\n\n  <script lang=\"ts\">\n    interface Props {\n      data: App.PageData\n    }\n\n    let { data }: Props = $props()\n\n    let city = $state('')\n    let response: Response | undefined = $state()\n\n    const onSubmit = async (event: Event) => {\n      event.preventDefault()\n\n      if (!data.csrfHeaderKey || !data.csrfToken) return\n\n      const headers = new Headers\n      headers.set('Content-Type', 'application/json')\n      headers.set(data.csrfHeaderKey, data.csrfToken)\n\n      response = await data.fetch('/some-endpoint', {\n        method: 'POST',\n        headers,\n        body: JSON.stringify({ city })\n      })\n    }\n  </script>\n\n  <h1>City</h1>\n\n  <!-- ... -->\n\n  <form onsubmit={onSubmit}>\n    <input type=\"text\" name=\"city\" bind:value={city} />\n    <button type=\"submit\">Submit</button>\n  </form>\n\n  <!-- ... -->\n  ```\n\n- Form data:\n\n  ```html\n  <script lang=\"ts\">\n    interface Props {\n      data: App.PageData\n    }\n\n    let { data }: Props = $props()\n\n    let city = $state('')\n\n    // ...\n  </script>\n\n  <h1>City</h1>\n\n  <!-- ... -->\n\n  <form method=\"POST\" action=\"/some-endpoint\">\n    <input type=\"hidden\" name={data.csrfParamKey} value={data.csrfToken} />\n    <input type=\"text\" name=\"city\" bind:value={city} />\n    <button type=\"submit\">Submit</button>\n  </form>\n\n  <!-- ... -->\n  ```\n\n### Components\n\nThe following components are available:\n\n- `Connection`\n\n  ```html\n  <script lang=\"ts\">\n    import { Connection } from '@grottopress/kitty'\n  </script>\n\n  <Connection slowAfterMs={6000}>\n    {#snippet offline()}\n      <aside class=\"connection offline\">\n        <p>You are offline</p>\n      </aside>\n    {/snippet}\n\n    {#snippet slow()}\n      <aside class=\"connection slow\">\n        <p>Check your internet connection</p>\n      </aside>\n    {/snippet}\n\n    {#snippet online()}\n      <aside class=\"connection online\">\n        <p>Hurray!!!</p>\n      </aside>\n    {/snippet}\n  </Connection>\n  ```\n\n  The `slowAfterMs` prop sets the connection status to `slow` if a page is not loaded after the given period in milliseconds.\n\n- `ToggleButton`\n\n  ```html\n  <script lang=\"ts\">\n    import { ToggleButton } from '@grottopress/kitty'\n\n    let menu: HTMLElement | undefined = $state()\n    let showMenu = $state(false)\n  </script>\n\n  <div>\n    <ToggleButton bind:open={showMenu} clickOutside={menu}>\n      &equiv; Menu\n    </ToggleButton>\n\n    {#if showMenu}\n      <nav bind:this={menu}>\n        <a href=\"/link/a\">Link A</a>\n        <a href=\"/link/b\">Link B</a>\n        <a href=\"/link/c\">Link C</a>\n      </nav>\n    {/if}\n  </div>\n  ```\n\n  The `clickOutside` prop accepts the target HTML element, and enables closing that element by clicking anywhere outside it.\n\n### Actions\n\n*Kitty* comes with the following actions for `use` in components:\n\n- `clickOutside`\n\n  ```html\n  <script lang=\"ts\">\n    import { clickOutside } from '@grottopress/kitty'\n\n    interface Props {\n      open: boolean\n    }\n\n    let { open }: Props = $props()\n\n    const toggle = () => {\n      open = !open\n    }\n\n    const close = () => {\n      open = false\n    }\n  </script>\n\n  <button type=\"button\" use:clickOutside={close} onclick={toggle}>\n    <slot />\n  </button>\n  ```\n\n### Helpers\n\nThe following helpers are available:\n\n- `.isJson(context: Request | Response): boolean`\n\n  ```typescript\n  import { isJson } from '@grottopress/kitty'\n\n  isJson(requestOrResponseObject)\n  ```\n\n  `.isJson()` checks if the given request or response is JSON, based on its `Content-Type` header.\n\n## Developing\n\nAfter cloning this repository, copy `sample.env` to `.env`, and run `npm install`. You may start the development server with `npm run dev`, or run tests with `npm run test`.\n\n## Contributing\n\n1. [Fork it](https://github.com/GrottoPress/kitty/fork)\n1. Switch to the `master` branch: `git checkout master`\n1. Create your feature branch: `git checkout -b my-new-feature`\n1. Make your changes, updating changelog and documentation as appropriate.\n1. Commit your changes: `git commit`\n1. Push to the branch: `git push origin my-new-feature`\n1. Submit a new *Pull Request* against the `GrottoPress:master` branch.\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 4],
		[3596, 65],
		[3603, 27],
		[3610, 37],
		[3617, 1],
		[3624, 37],
		[3631, 22],
		[3638, 33],
		[3645, 40],
		[3652, 236],
		[3659, 93],
		[3666, 30],
		[3673, 8],
		[3680, 12],
		[3687, 3],
		[3694, 8],
		[3701, 1],
		[3708, 40],
		[3715, 35],
		[3722, 13],
		[3729, 47],
		[3736, 9],
		[3743, 5],
		[3750, 4],
		[3757, 36],
		[3771, 31],
		[3778, 132],
		[3785, 31],
		[3792, 2],
		[3799, 4],
		[3806, 34],
		[3813, 8],
		[3820, 40],
		[3827, 3],
		[3834, 17],
		[3841, 112],
		[3848, 2],
		[3855, 18],
		[3862, 45],
		[3876, 3],
		[3883, 41],
		[3890, 6],
		[3897, 26],
		[3904, 7],
		[3911, 5],
		[3918, 2],
		[3925, 1],
		[3932, 6],
		[3939, 4],
		[3946, 75],
		[3953, 147],
		[3960, 14],
		[3967, 15],
		[3974, 10],
		[3981, 5],
		[3988, 2],
		[3995, 7],
		[4002, 19],
		[4009, 14],
		[4016, 90],
		[4023, 69],
		[4030, 49],
		[4037, 49],
		[4044, 49],
		[4051, 38],
		[4058, 37],
		[4065, 44],
		[4072, 125],
		[4079, 35],
		[4086, 12],
		[4093, 36],
		[4100, 11],
		[4107, 41],
		[4114, 24],
		[4121, 115],
		[4128, 178]
	],
	"esm": true,
	"cjs": false
}
