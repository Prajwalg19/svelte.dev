{
	"name": "svelte-data-grid-ext",
	"description": "Display and edit large datasets with high-performance Svelte data table.",
	"repo_url": "https://github.com/bsssshhhhhhh/svelte-data-grid",
	"authors": ["eriknyk"],
	"homepage": "https://github.com/eriknyk/svelte-data-grid",
	"downloads": 6,
	"updated": "2020-03-24T20:18:03.734Z",
	"tags": ["ui"],
	"github_stars": 202,
	"typescript": false,
	"version": "3.0.1",
	"svelte_range": "^3.16.7",
	"last_rune_check_version": "3.0.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-data-grid-ext",
				"version": "3.0.1",
				"size": 150749
			},
			{
				"name": "debounce",
				"version": "1.2.1",
				"size": 11960
			},
			{
				"name": "deep-diff",
				"version": "1.0.2",
				"size": 542187
			},
			{
				"name": "detect-browser",
				"version": "4.8.0",
				"size": 15097
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2],
			[0, 3]
		],
		"circular": []
	},
	"readme": "[![npm](https://img.shields.io/npm/v/svelte-data-grid.svg?style=flat-square)](https://npmjs.org/package/svelte-data-grid)\n# Svelte Data Grid\n\n## [Demo](https://bsssshhhhhhh.github.io/svelte-data-grid-demo/)\n\n\nSvelte Data Grid is a svelte v3 component for displaying and editing any amount of data.\n\n## Features:\n - Excellent scrolling performance\n - ARIA attributes set on elements\n - Lightweight even when displaying a huge dataset due to implementation of a \"virtual list\" mechanism\n - Column headers remain fixed at the top of the grid\n - Custom components can be specified to control how individual table cells or column headers are displayed\n - Columns can be resized and reordered\n\n## Current Limitations:\n - Every row must have the same height and text cannot break onto the next line\n\n## Usage:\n\nIf using from inside a svelte component: \n```\nimport DataGrid from \"svelte-data-grid\";\n<DataGrid rows={myRows} allowColumnReordering={false} columns={myColumnDefinitions} on:columnOrderUpdated={saveNewColumnOrder}>\n```\n\nIf using from outside svelte:\n```\nimport DataGrid from \"svelte-data-grid\";\nconst grid = new DataGrid({\n  target: document.querySelector('#my-grid-wrapper'),\n  data: {\n    rows: [ ... ],\n    columns: [ ... ],\n    allowResizeFromTableCells: true\n  }\n});\n\ngrid.$on('columnOrderUpdated', () => {\n  const { columns } = grid.get();\n  // save new column  order\n});\n```\nTo learn more about using DataGrid outside of svelte, read [svelte's guide](https://svelte.dev/docs#Client-side_component_API) on how to interact with a svelte component. It is possible to integrate into any framework.\n\nDataGrid requires 2 properties to be passed in order to display data: `rows` and `columns`.\n\n`columns` is an array of objects containing at least 3 properties: `display`, `dataName`, and `width`. A svelte component can be specified in `headerComponent` and `cellComponent` if any custom cell behavior is required.\n\n```\n[\n  {\n    display: 'Fruit Name',  // What will be displayed as the column header\n    dataName: 'fruitName',  // The key of a row to get the column's data from\n    width: 300,             // Width, in pixels, of column\n    disallowResize: true    // Optional - disables resizing this column\n  },\n  {\n    display: 'Color',\n    dataName: 'fruitColor',\n    width: 600,\n    myExtraData: 12345\n  }\n]\n```\n\n\n`rows` is an array of objects containing the data for each table row. \n\n```\n[\n  {\n    fruitName: 'Apple',\n    fruitColor: 'Red'\n  },\n  {\n    fruitName: 'Blueberry',\n    fruitColor: 'Blue'\n  },\n  {\n    fruitName: 'Tomato',\n    fruitColor: 'Red'\n  }\n]\n\n```\n\n## Editing Data\n\nVersion 2 added early support for editing data. Due to the lack of using a keyed each block to render the rows, maintaining focus on controls as the user scrolls is a tad wonky. This will be resolved in a future version.\n\nImport the components:\n```\nimport TextboxCell from 'svelte-data-grid/src/textbox-cell.svelte';\nimport SelectCell from 'svelte-data-grid/src/select-cell.svelte';\nimport CheckboxCell from 'svelte-data-grid/src/checkbox-cell.svelte';\n```\n\n### Textbox Cell\nTextbox cell will debounce the user input, only recording changes after 400ms has elapsed since the user stops typing.\n```\n{\n  display: 'Name',\n  dataName: 'name',\n  width: 250,\n  cellComponent: TextboxCell\n}\n```\n\n### Select Cell\n\nSelectCell requires that you provide an `options` array in your cell definition:\n```\n{\n  display: 'Eye Color',\n  dataName: 'eyeColor',\n  width: 75,\n  cellComponent: SelectCell,\n  options: [\n    {\n      display: 'Green',\n      value: 'green'\n    },\n    {\n      display: 'Blue',\n      value: 'blue'\n    },\n    {\n      display: 'Brown',\n      value: 'brown'\n    }\n  ]\n}\n```\n\n### Checkbox Cell\nCheckboxCell will set the checked state of the checkbox depending on the boolean value of the row's data.\n```\n{\n  display: 'Active',\n  dataName: 'isActive',\n  width: 75,\n  cellComponent: CheckboxCell\n}\n```\n\n\n## Custom Cell Components\n\nNeed to customize how your data is displayed or build more complex functionality into your grid? Specify `cellComponent` in your definition in the `columns` property.\n\nComponents will be passed the following properties: \n- `rowNumber` - The index of the row within `rows`\n- `row` - The entire row object from `rows`\n- `column` - The entire column object from `columns`\n\n\nMyCustomCell.svelte\n```\n<script>\nexport let data = {\n  colors: {\n    Red: '#FF0000',\n    Blue: '#0000FF'\n  }\n};\n</script>\n\n<div style=\"color: {colors[row.data[column.dataName]] || 'black'};\">\n  {row.data[column.dataName]}\n</div>\n```\n\nImport the component\n```\nimport MyCustomCell from './MyCustomCell.svelte';\n```\n\n`columns` option:\n```\n[\n  {\n    display: 'Fruit Color'\n    dataName: 'fruitColor',\n    width: 300,\n    cellComponent: MyCustomCell\n  }\n]\n```\n\n## Custom Header Components\nHeader components can also be specified in `columns` entries as the `headerComponent` property. Header components are only passed `column`, the column object from `columns`.\n\n## Options:\n\nSvelte Data Grid provides a few options for controlling the grid and its interactions:\n\n- `rowHeight` - The row height in pixels *(Default: 24)*\n- `allowResizeFromTableCells` - Allow user to click and drag the right border of a table cell to resize the column *(Default: false)*\n- `allowResizeFromTableHeaders` - Allow user to click and drag the right border of a column header to resize the column *(Default: true)*\n- `allowColumnReordering` - Allow user to drag a column header to move that column to a new position *(Default: true)*\n- `allowColumnAffix` - Allow user to drag the double line to affix columns to the left side of the grid. See section below for caveats *(Default: true if the browser is chrome, false otherwise)*\n- `__extraRows` - If it is desired that the virtual list include more DOM rows than are visible, the number of extra rows can be specified in `__extraRows` *(Default: 0)*\n- `__columnHeaderResizeCaptureWidth` The width of the element, in pixels, placed at the right border of a column that triggers that column's resize. *(Default: 20)*\n\n\n## Events:\n - `columnOrderUpdated` - Fired when the user has dragged a column to a new position. The updated column order can be accessed from `component.get().columns`\n - `columnWidthUpdated` - Fired when a user has resized a column. The updated column width can be accessed from `event.width` and the column index can be accessed from `event.idx`\n\n## Column Affixing\n\nThis feature works well on Chrome because Chrome's scroll events are not fired asynchronously from the scroll action. Firefox, Edge, and IE all fire scroll events *after* the overflow container has scroll on screen. This causes a jittery effect that we cannot easily work around while providing a cross-browser solution. \n\nTo fix the jitteriness on Firefox, a setting in about:config can be changed to turn off APZ. Set `layers.async-pan-zoom.enabled` to `false`. Obviously this is not a solution we can reasonably ask users to try, so I'm looking for other solutions.\n\n## Bugs? Suggestions?\nFeedback is always appreciated. Feel free to open a GitHub issue if DataGrid doesn't work the way you expect or want it to.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 3],
		[3603, 2],
		[3610, 3],
		[3631, 1],
		[3645, 2],
		[3659, 2],
		[3666, 3],
		[3680, 2],
		[3708, 4],
		[3729, 4],
		[3750, 1],
		[3757, 3],
		[3764, 1],
		[3771, 2],
		[3778, 2],
		[3785, 1],
		[3792, 2],
		[3799, 1],
		[3806, 3],
		[3834, 1],
		[3841, 2],
		[3848, 2],
		[3855, 3],
		[3862, 10],
		[3883, 1],
		[3890, 5],
		[3904, 4],
		[3932, 1],
		[3960, 3],
		[3967, 1],
		[3981, 1],
		[3995, 1],
		[4009, 1],
		[4023, 1],
		[4030, 4],
		[4037, 6],
		[4044, 3],
		[4051, 3],
		[4065, 2],
		[4093, 8],
		[4100, 4],
		[4107, 2],
		[4114, 6],
		[4121, 5],
		[4128, 2]
	]
}
