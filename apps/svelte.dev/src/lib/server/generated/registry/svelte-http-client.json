{
	"name": "svelte-http-client",
	"description": "Provides an HTTP client returning Svelte stores.",
	"repo_url": "https://github.com/bibizio/svelte-http-client",
	"authors": ["bibizio"],
	"homepage": "https://bibizio.github.io/svelte-http-client/",
	"downloads": 6,
	"updated": "2023-01-24T19:32:15.485Z",
	"tags": ["server"],
	"github_stars": 0,
	"typescript": true,
	"version": "0.1.1",
	"svelte_range": "^3.54.0",
	"kit_range": "^1.0.0",
	"last_rune_check_version": "0.1.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-http-client",
				"version": "0.1.1",
				"size": 20134
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-http-client\n\nHTTP client returning svelte stores\n\n## Install\n\nYou can install via _npm_\n\n`npm i svelte-http-client`\n\n## Usage\n\n### fetch$\n\nThe main method exported is `fetch$`, a wrapper for the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) that returns a `Promisable`, a custom svelte store that mimics the _Promise_ pattern.\nOn subscription, it unwraps the _Promise_ so it can be used like this:\n\n```svelte\n<script>\n    import { fetch$ } from 'svelte-http-client';\n\n    let value$ = fetch$('https://www.my.api/myendpoint')\n        .then$((res) => {\n            if(!res.ok) throw new Error();\n            return res;\n        })\n        .then$((res) => res.json())\n        .catch$((err) => {\n            console.error(err);\n            return 'default value';\n        });\n</script>\n\n<p>{$value$}</p>\n```\n\n### HTTP verbs methods\n\nThe library exports also methods for the main HTTP verbs returning `Promisable` (ending with _$_) and _Promise_, each of them with a version that extract the json body:\n\n- `get$`, `getJson$`, `get` and `getJson`\n- `post$`, `postJson$`, `post` and `postJson`\n- `put$`, `putJson$`, `put` and `putJson`\n- `patch$`, `patchJson$` ,`patch` and `patchJson`\n- `del$`, `delJson$`, `del` and `delJson`\n\nThese methods are also designed to throw an `HttpError` if the fetch Response is not ok.\n\nThe previous example, using the verbs methods, can be written as:\n\n```svelte\n<script>\n    import { getJson$ } from 'svelte-http-client';\n\n    let value$ = getJson$('https://www.my.api/myendpoint')\n        .catch$((err) => {\n            console.error(err);\n            return 'default value';\n        });\n</script>\n\n<p>{$value$}</p>\n```\n\n### SvelteHttpClient\n\nThe library exports a class to create an api client with default base URL and `fetch` init options, having all the methods described before:\n\n```svelte\n<script>\n    import { SvelteHttpClient } from 'svelte-http-client';\n\n    const client = new SvelteHttpClient('https://www.my.api/', {\n        headers: { myheader: 'myHeaderValue' }\n    });\n\n    let value$ = client.getJson$('myendpoint')\n        .catch$((err) => {\n            console.error(err);\n            return 'default value';\n        });\n    let anotherValue$ = client.getJson$('myotherendpoint')\n        .catch$((err) => {\n            console.error(err);\n            return 'default value';\n        });\n</script>\n\n<p>{$value$}</p>\n<p>{$anotherValue$}</p>\n```\n\n### Promisable\n\nThe object returned by the library methods is a `Promisable`\n\n```ts\ninterface Promisable<T, U> extends Readable<T | U> {\n    then$<V>(onfulfilled?: ((value: U) => V | PromiseLike<V>) | undefined | null): Promisable<T, V>;\n    catch$<V>(\n        onrejected?: ((reason: any) => V | PromiseLike<V>) | undefined | null\n    ): Promisable<T, U | V>;\n    finally$(onfinally?: (() => void) | undefined | null): Promisable<T, U>;\n    startWith$<V>(initialValue: V): Promisable<V, U>;\n}\n```\n\n_T_ is the initial value of the `Readable`, while _U_ is the value returned by the _Promise_. The `fetch$` method returns a `Promisable<undefined, Response>`.\nYou can set the inital value chaining the `startWith$` method of `Promisable`.\n\n(note: contrary to the original _then_, the `then$` method accepts `onfulfilled` only to enforce the use of `catch$`)\n\nHere's an example using _typescript_:\n\n```svelte\n<script lang=\"ts\">\n    import { SvelteHttpClient } from 'svelte-http-client';\n\n    const client = new SvelteHttpClient('https://www.my.api/');\n\n    interface Post {\n        title: string;\n        body: string;\n    }\n\n    function refreshPosts() {\n        return client\n            .getJson$<Post[]>('posts')\n            .catch$<Post[]>((err) => {\n                console.error(err);\n                return [];\n            })\n            .startWith$<Post[]>([]);\n    }\n\n    let loading = false;\n    let post: Post = {\n        title: '',\n        body: '',\n    };\n    let posts$ = refreshPosts();\n\n    function add() {\n        loading = true;\n        client\n            .post$('posts', post)\n            .then$(() => {\n                posts$ = refreshPosts();\n            })\n            .catch$((err) => alert('error: ' + err.message))\n            .finally$(() => (loading = false));\n    }\n</script>\n\n{#if loading}\n    <div class=\"overlay\">loading</div>\n{/if}\n<label class=\"block\" for=\"title\"> Title</label>\n<input class=\"block\" id=\"title\" bind:value={post.title} />\n<label class=\"block\" for=\"body\"> Post</label>\n<textarea class=\"block\" id=\"body\" bind:value={post.body} />\n<button on:click={add}>post</button>\n\n<ul>\n    {#each $posts$ as { title, body }}\n        <li>\n            <h2>{title}</h2>\n            <p>{body}</p>\n        </li>\n    {/each}\n</ul>\n\n<style>\n    .overlay {\n        position: absolute;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        width: 100vw;\n        height: 100vh;\n        top: 0;\n        left: 0;\n        background-color: rgba(255, 255, 255, 0.8);\n    }\n\n    .block {\n        margin: 10px;\n        display: block;\n    }\n</style>\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 1],
		[3603, 3],
		[3610, 4],
		[3624, 3],
		[3631, 1],
		[3645, 4],
		[3659, 1],
		[3666, 4],
		[3680, 1],
		[3701, 1],
		[3708, 1],
		[3729, 1],
		[3757, 2],
		[3764, 1],
		[3771, 3],
		[3778, 1],
		[3785, 1],
		[3792, 1],
		[3806, 3],
		[3827, 1],
		[3834, 2],
		[3841, 17],
		[3848, 2],
		[3855, 1],
		[3883, 1],
		[3890, 3],
		[3897, 3],
		[3904, 1],
		[3911, 1],
		[3932, 1],
		[3960, 1],
		[3967, 1],
		[3981, 1],
		[4016, 1],
		[4023, 1],
		[4030, 3],
		[4037, 8],
		[4044, 4],
		[4051, 2],
		[4065, 2],
		[4100, 10],
		[4107, 2],
		[4114, 6],
		[4121, 5],
		[4128, 5]
	],
	"esm": true,
	"cjs": false
}
