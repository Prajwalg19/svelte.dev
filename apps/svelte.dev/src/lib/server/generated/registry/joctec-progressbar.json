{
	"name": "joctec-progressbar",
	"description": "Create multi-series SVG progress bars in Svelte.",
	"repo_url": "https://gitee.com/ruofeng945/joctec-ui",
	"authors": ["ruofeng945"],
	"downloads": 4,
	"updated": "2019-08-13T01:21:14.668Z",
	"tags": ["ui"],
	"typescript": false,
	"version": "0.0.2",
	"svelte_range": "^3.6.7",
	"last_rune_check_version": "0.0.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "joctec-progressbar",
				"version": "0.0.2",
				"size": 10852
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-progressbar\nA multi-series  SVG progress bar component made with Svelte 3.\nIt can be rendered both as a linear or radial progressbar. Progression bars and values are fully animated.\n\nIf rendered as a linear progressbar there are 2 styles supported:\n* Standard: uses svg masks to display inverted text color for the value.\n* Thin: the progression bars are rendered as thin bars and the values are placed externally\n\nNo dependencies, only 20kb when minified (6.5kb gzipped)!\n\n# Usage\n\n## From npm\n\n```\nnpm i @okrad/svelte-progressbar\n```\n\n### Using in a standard npm module\n\n```\nimport ProgressBar from '@okrad/svelte-progressbar';\n\nconst pb = new ProgressBar({\n        target: document.getElementById('demo'),\n        props: {\n                series: 20\n        }\n});\n\n```\n\n### Using in a Svelte app\n\n```\n//main.js\nimport App from './App.svelte';\n\nconst app = new App({\n        target: document.body,\n        props: {\n                series: [20, 42]\n        }\n});\n\nexport default app;\n```\n\n```\n//App.svelte\n<script>\n  import ProgressBar from \"@okrad/svelte-progressbar\";\n\n  export let series = [];\n\n  let bar;\n\n  const updateBar = values => {\n        values.forEach((v, i) => bar.updatePerc(v, i));\n  };\n\n  const resetBar = () => updateBar([0, 0]);\n\n</script>\n\n<ProgressBar {series} bind:this={bar} />\n\n<button on:click={() => updateBar([100, 100])}>update</button>\n<button on:click={resetBar}>reset</button>\n```\n\n## Building from source\n\n```\nnpm run build\n```\n\nCreates unminified index.js and index.css files.\n\nOr...\n\n```\nnpm run dist\n```\n\nCreates minified index.js and index.css files.\n\nEither way, include index.js/index.css in your html file, then instantiate the component:\n```\nconst pb = new ProgressBar({\n        target: document.getElementById('demo'),\n        props: {\n                series: 20\n        }\n});\n```\nThis creates a standard progressbar with 20% progression.\n\n```\nconst pb = new ProgressBar({\n        target: document.getElementById('demo'),\n        style: 'radial',\n        props: {\n                series: [20, 10]\n        }\n});\n```\nThis creates a radial progressbar with 2 series (20% + 10%).\n\nTake a look at some [working examples](https://okrad.github.io/svelte-progressbar)!\n\n# API\n**ProgressBar(options)**: The constructor. Available props are:\n* series (number | object | array): for single series progressbars, it can be a number indicating the progression percentage (0-100), or a json object with \"perc\" and \"color\" properties. For example:\n```\nseries: 42\n```\n```\nseries: [10, 32]\n```\n```\nseries: [\n        {\n                perc: 10,\n                color: '#5AB6DF'\n        },\n        {\n                perc: 32,\n                color: '#65CEA7'\n        }\n]\n```\n\n\n* style: can be \"standard\" (default), \"thin\" or \"radial\"\n* width: determines the width of the whole component\n* height: determines the height of the svg viewbox. If not specified, it defaults to the 14% of the viewbox width for standard progressbars, 1% of the viewbox width for thin progressbars, and to the 100% of the viewbox width for radial ones.\n* thickness: used only for radial progress bars. It determines the thickness of the bar as a unitless number between 0 and 50 (corresponding to the ray of the circle).\n* textSize: the size of the font (in percentage) for the progression value (default: 30 for thin progressbars, 70 for default progressbar, 150 for radial)\n\n**updatePerc(perc, seriesId = 0)**: update the specified series progress percentage\n\n# Changelog\n2019/08/07: Added *dist* task\n\n2019/08/06: Refactored thin progressbars\n\n2019/08/02: Added *textSize* parameter\n\n2019/08/01: Handled svg viewport (width/height) while keeping proportions",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 5],
		[3603, 1],
		[3617, 1],
		[3645, 3],
		[3659, 1],
		[3666, 1],
		[3673, 1],
		[3687, 1],
		[3694, 1],
		[3708, 2],
		[3722, 1],
		[3729, 1],
		[3736, 1],
		[3743, 2],
		[3757, 1],
		[3771, 2],
		[3778, 1],
		[3792, 2],
		[3806, 1],
		[3820, 1],
		[3841, 2],
		[3862, 5],
		[3869, 1],
		[3883, 1],
		[3890, 2],
		[3897, 1],
		[3904, 2],
		[3918, 1],
		[3925, 1],
		[3946, 2],
		[3967, 1],
		[3981, 1],
		[3995, 2],
		[4009, 1],
		[4016, 1],
		[4023, 1],
		[4030, 1],
		[4037, 2],
		[4044, 3],
		[4051, 3],
		[4058, 1],
		[4065, 2],
		[4093, 5],
		[4100, 5],
		[4114, 4],
		[4121, 4],
		[4128, 3]
	],
	"esm": true,
	"cjs": false
}
