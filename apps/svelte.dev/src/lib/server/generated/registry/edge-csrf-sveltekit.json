{
	"name": "@edge-csrf/sveltekit",
	"description": "Integrate Edge-CSRF protection into SvelteKit applications.",
	"repo_url": "https://github.com/kubetail-org/edge-csrf",
	"authors": ["amorey"],
	"homepage": "https://github.com/kubetail-org/edge-csrf#readme",
	"downloads": 14,
	"updated": "2024-11-21T11:28:53.893Z",
	"tags": ["tooling"],
	"github_stars": 170,
	"typescript": true,
	"version": "2.5.3-cloudflare-rc1",
	"kit_range": "^2.5.6",
	"last_rune_check_version": "2.5.3-cloudflare-rc1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@edge-csrf/sveltekit",
				"version": "2.5.3-cloudflare-rc1",
				"size": 17319
			}
		],
		"dependencies": [],
		"circular": []
	},
	"legacy_svelte": false,
	"readme": "# SvelteKit\n\nThis is the documentation for Edge-CSRF's SvelteKit integration.\n\n## Quickstart\n\nFirst, add the integration library as a dependency to your app:\n\n```console\nnpm install @edge-csrf/sveltekit\n# or\npnpm add @edge-csrf/sveltekit\n# or\nyarn add @edge-csrf/sveltekit\n```\n\nNext, create a server-side hooks file (`hooks.server.ts`) for your project and add the Edge-CSRF handle:\n\n```typescript\n// src/hooks.server.ts\n\nimport { createCsrfHandle } from '@edge-csrf/sveltekit';\n\n// initalize csrf protection handle\nconst csrfHandle = createCsrfHandle({\n  cookie: {\n    secure: process.env.NODE_ENV === 'production',\n  },\n});\n\nexport const handle = csrfHandle;\n```\n\nNow, all HTTP submission requests (e.g. POST, PUT, DELETE, PATCH) will be rejected if they do not include a valid CSRF token. To add the CSRF token to your forms, you can fetch it from the event's `locals` data object server-side. For example:\n\n```typescript\n// src/routes/+page.server.ts\n\nexport async function load({ locals }) {\n  return {\n    csrfToken: locals.csrfToken,\n  };\n}\n\nexport const actions = {\n  default: async () => {\n    return { success: true };\n  },\n};\n```\n\n```svelte\n<!-- src/routes/+page.svelte -->\n\n<script lang=\"ts\">\n  export let data;\n\n  export let form;\n</script>\n\n{#if form?.success}\n<span>success</span>\n{:else}\n<form method=\"post\">\n  <input type=\"hidden\" value={data.csrfToken}>\n  <input type=\"text\" name=\"my-input\">\n  <input type=\"submit\">\n</form>\n{/if}\n```\n\nFinally, to make typescript aware of the new `locals` attributes you can add Edge-CSRF types to your app's types:\n\n```typescript\n// src/app.d.ts\n\nimport type { CsrfLocals } from '@edge-csrf/sveltekit';\n\ndeclare global {\n  namespace App {\n    // ...\n    interface Locals extends CsrfLocals {}\n    // ...\n  }\n}\n\nexport {};\n```\n\n## Examples\n\nHere are some [examples](examples) in this repository:\n\n| Adapter    | Implementation                             |\n| ---------- | ------------------------------------------ |\n| vercel     | [HTML form](examples/sveltekit-vercel)     |\n| cloudflare | [HTML form](examples/sveltekit-cloudflare) |\n\n## Lower-level implementations\n\nIf you want lower-level control over the response or which routes CSRF protection will be applied to you can use the `createCsrfProtect()` method to create a function that you can use inside your own custom handle:\n\n```typescript\n// src/hooks.server.ts\n\nimport type { Handle } from '@sveltejs/kit';\nimport { CsrfError, createCsrfProtect } from '@edge-csrf/sveltekit';\n\n// initalize csrf protection method\nconst csrfProtect = createCsrfProtect({\n  cookie: {\n    secure: process.env.NODE_ENV === 'production',\n  },\n});\n\n// SvelteKit handle\nexport const handle: Handle = async ({ event, resolve }) => {\n  try {\n    await csrfProtect(event);\n  } catch (err) {\n    if (err instanceof CsrfError) return new Response('invalid csrf token', { status: 403 });\n    throw err;\n  }\n    \n  return resolve(event);\n};\n```\n\n## Configuration\n\n```javascript\n// default config\n\n{\n  cookie: {\n    name: '_csrfSecret',\n    path: '/',\n    maxAge: undefined,\n    domain: '',\n    secure: true,\n    httpOnly: true,\n    sameSite: 'strict'\n  },\n  excludePathPrefixes: [],\n  ignoreMethods: ['GET', 'HEAD', 'OPTIONS'],\n  saltByteLength: 8,\n  secretByteLength: 18,\n  token: {\n    fieldName: 'csrf_token',\n    value: undefined\n  }\n}\n```\n\n## API\n\nThe following are named exports in the the `@edge-csrf/sveltekit` module:\n\n### Types\n\n```\nSveltekitCsrfProtect - A function that implements CSRF protection for SvelteKit request events\n\n  * @param {RequestEvent} event - The SvelteKit request event instance\n  * @returns {Promise<void>} - The function completed successfully\n  * @throws {CsrfError} - The function encountered a CSRF error\n```\n\n### Classes\n\n```\nCsrfError - A class that inherits from Error and represents CSRF errors\n```\n\n### Methods\n\n```\ncreateCsrfHandle([, options]) - Create a new SvelteKit handle to be used in hooks.server.ts\n\n  * @param {object} [options] - The configuration options\n  * @returns {Handle} - The handle\n\ncreateCsrfProtect([, options]) - Create a lower-level function that can be used inside a SvelteKit handle\n                                 to implement CSRF protection for requests\n\n  * @param {object} [options] - The configuration options\n  * @returns {SveltekitCsrfProtect} - The CSRF protection function\n```\n",
	"downloads_history": [
		[3757, 243],
		[3764, 18],
		[3771, 4],
		[3778, 3],
		[3785, 3],
		[3792, 2],
		[3806, 42],
		[3813, 160],
		[3820, 10],
		[3827, 146],
		[3834, 13],
		[3841, 24],
		[3848, 4],
		[3855, 63],
		[3862, 20],
		[3869, 4],
		[3876, 15],
		[3883, 1],
		[3890, 50],
		[3897, 20],
		[3904, 11],
		[3911, 326],
		[3918, 32],
		[3925, 2],
		[3932, 11],
		[3939, 6],
		[3946, 158],
		[3953, 25],
		[3960, 16],
		[3967, 4],
		[3974, 111],
		[3981, 16],
		[3988, 6],
		[3995, 12],
		[4002, 16],
		[4009, 7],
		[4016, 11],
		[4023, 14],
		[4030, 18],
		[4037, 25],
		[4044, 11],
		[4051, 42],
		[4058, 51],
		[4065, 28],
		[4072, 36],
		[4079, 2],
		[4086, 18],
		[4093, 17],
		[4100, 18],
		[4107, 38],
		[4114, 14],
		[4121, 15],
		[4128, 2]
	],
	"esm": false,
	"cjs": true
}
