{
	"name": "svelte-routed",
	"description": "Implement routing in Svelte applications.",
	"repo_url": "https://github.com/andrusenn/RouterSvelteTemplate",
	"authors": ["andrusenn"],
	"homepage": "https://github.com/andrusenn/RouterSvelteTemplate/tree/master/package/svelte-routed#readme",
	"downloads": 7,
	"updated": "2021-03-13T16:10:46.530Z",
	"tags": ["router"],
	"github_stars": 0,
	"typescript": false,
	"version": "1.1.2",
	"svelte_range": "3.x",
	"last_rune_check_version": "1.1.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-routed",
				"version": "1.1.2",
				"size": 105846
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Svelte Routed\n\nThis is a personal solution for routing in svelte used in my projects.\n\n## Demo template\n\nClone demo template:\n\n1. `npx degit andrusenn/RouterSvelteTemplate/template template`\n2. `cd template`\n3. `npm install`\n4. `npm run dev` or `npm run start`\n\n### routes.js\n\nCreate a file to config Router and all routes.\n\n```js\n// routes.js\n\n// Import the components\nimport Home from \"./views/Home.svelte\";\nimport About from \"./views/About.svelte\";\nimport NotFound from \"./views/NotFound.svelte\";\n\n// Vars\nlet routes = {\n    paths: [\n        // Paths\n        {\n            path: \"/\", // required\n            name: \"home\", // required\n            component: Home, // required\n            title: \"Home\",\n        },\n        {\n            path: \"/about\", // required\n            name: \"about\", // required\n            do: function (data) {\n                // Do something\n                console.log(data);\n            },\n            // Support dynamic parameters\n            // if it's defined, return valid route -> /about/param1\n            params: {\n                param1: \"\",\n                // if a second param is defined, return valid route -> /about/param1/param2\n                param2: \"\",\n            },\n            // Add some meta data\n            meta: {\n                someparam: \"foo\",\n            },\n            component: About, // required\n            title: \"About\",\n        },\n        {\n            // Fallback not found\n            path: \"*\",\n            component: NotFound,\n            title: \"404\",\n        },\n    ],\n    // some configs an callbacks\n    fns: {\n        // Base url path\n        basePath: \"\",\n\n        // On update route\n        update: (component) => {\n            //\n        },\n\n        init: () => {\n            //\n        },\n\n        // middleware / before routing\n        before: (next) => {\n            //let to = setTimeout(() => {\n            next();\n            //clearTimeout(to);\n            //}, 500);\n        },\n\n        // After routing\n        after: () => {\n            //\n        },\n    },\n};\n// export\nexport default routes;\n```\n\n|     name | value                                                                                                         |\n| -------: | ------------------------------------------------------------------------------------------------------------- |\n|   `path` | _[required]_ is the path show in address bar                                                                  |\n|   `name` | _[required]_ name of the route                                                                                |\n|     `do` | function callback `do:function(data){}`                                                                       |\n| `params` | Dynamic parameters. Capture each part of defined parameter. `params:{param1:'',param2:''}` param1/param2/etc` |\n|   `meta` | Custom data `{foo:bar}`                                                                                       |\n|  `title` | page title `<title></title>`                                                                                  |\n\n|             configs | Description                                  |\n| ------------------: | -------------------------------------------- |\n|          `basePath` | Base root path                               |\n|            `init()` | First load                                   |\n| `update(component)` | Callback on update component                 |\n|          `before()` | Middleware function -> `next()` must be used |\n|           `after()` | Callback after routed                        |\n\n### App.svelte\n\n```html\n<script>\n    // Import components\n    import { RouterLink, RouterView } from \"svelte-routed\";\n    // Import my routes\n    import myroutes from \"./routes.js\";\n</script>\n\n<main>\n    <nav>\n        <RouterLink name=\"home\">Home</RouterLink>\n        <RouterLink name=\"about\">About</RouterLink>\n    </nav>\n    <hr />\n    <RouterView use=\"{myroutes}\" />\n</main>\n```\n\n### Availables props\n\n| Attr       | Desc                                                                 |\n| ---------- | -------------------------------------------------------------------- |\n| `name`     | The name of the route. The same one declared on `routes.js`          |\n| `part`     | If you use name, use `part` to pass search and hash `?x=0#hashvalue` |\n| `path`     | Ypu can use `path` instead of `name`                                 |\n| `title`    | The title attr of the \"a\" tag                                        |\n| `cssClass` | Add classes to \"a\" tag                                               |\n| `cssStyle` | Add styles to \"a\" tag                                                |\n\n```html\n<!-- Use path -->\n<RouterLink\n    path=\"/about?x=0#myhash\"\n    title=\"mytitle\"\n    cssClass=\"classes\"\n    cssStyle=\"styles\"\n    >About</RouterLink\n>\n<!-- Use name and use part for search and hash-->\n<RouterLink\n    name=\"about\"\n    part=\"?x=0#myhash\"\n    title=\"mytitle\"\n    cssClass=\"classes\"\n    cssStyle=\"styles\"\n    >About</RouterLink\n>\n```\n\n### Routing the components\n\nRouted components can fetch `RouterLink` and `Router`.\n\nExample:\n\n#### Home.svelte (routed)\n\n```html\n<script>\n    // fetch components\n    export let RouterLink, Router;\n\n    // Access to Router\n    console.log(Router.params, Router.meta, Router);\n</script>\n\n<div>\n    <RouterLink name=\"about\" part=\"?x=0#myhash\">About</RouterLink>\n</div>\n```\n\n### Programmatically route\n\n`Router.navigateTo('/path')`\n\n```html\n// AnyRoutedViewComponent.svelte\n<script>\n    export let Router;\n    Router.navigateTo(\"/about\");\n</script>\n```\n\nIMPORTANT: If you are outside of a routed component, use store \\$Router importing `Router`;\n\n```html\n<script>\n    // Import from global store\n    import { Router } from \"svelte-routed\";\n    // OnMount\n    import { onMount } from \"svelte\";\n\n    let somecondition = true;\n\n    onMount(() => {\n        // If some condition\n        if (somecondition) {\n            // Use $Router\n            $Router.navigateTo(\"/my_path\");\n        }\n    });\n</script>\n\n<div>Some content</div>\n```\n\n### Apache server SPA\n\nFor those who want to deploy on apache server add this to the .htaccess file.\n\n```text\n\n# In subfolder ------------\n\n<IfModule mod_rewrite.c>\n# replace delete basepath with yours.\n# Take care of path slashes\n\nRewriteEngine On\n\n# remove trail slash\nRewriteRule ^(.*)/$ basePath/$1 [L,R=301]\n\nRewriteBase /basepath/\nRewriteRule ^index\\.html$ - [L]\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule . /basePath/index.html [L]\n\n</IfModule>\n\n# In root -----------------\n\n<IfModule mod_rewrite.c>\nRewriteEngine On\n\n# remove trail slash\nRewriteRule ^(.*)/$ $1 [L,R=301]\n\nRewriteBase /\nRewriteRule ^index\\.html$ - [L]\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule . /index.html [L]\n\n</IfModule>\n```\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 2],
		[3603, 7],
		[3610, 9],
		[3631, 1],
		[3645, 8],
		[3659, 1],
		[3666, 10],
		[3680, 1],
		[3701, 1],
		[3708, 1],
		[3715, 1],
		[3729, 8],
		[3736, 1],
		[3757, 7],
		[3764, 3],
		[3771, 6],
		[3778, 1],
		[3785, 1],
		[3792, 3],
		[3799, 1],
		[3806, 3],
		[3834, 1],
		[3841, 2],
		[3848, 1],
		[3855, 16],
		[3862, 11],
		[3883, 1],
		[3890, 14],
		[3904, 2],
		[3911, 1],
		[3925, 1],
		[3932, 1],
		[3953, 1],
		[3960, 1],
		[3967, 1],
		[3974, 1],
		[3981, 1],
		[3995, 1],
		[4009, 1],
		[4023, 1],
		[4030, 4],
		[4037, 5],
		[4044, 18],
		[4051, 3],
		[4058, 1],
		[4065, 1],
		[4093, 12],
		[4100, 8],
		[4107, 6],
		[4114, 7],
		[4121, 6],
		[4128, 4],
		[4135, 11]
	]
}
