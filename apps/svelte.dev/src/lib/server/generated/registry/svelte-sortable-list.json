{
	"name": "svelte-sortable-list",
	"description": "Implements sortable list with drag-n-drop functionality.",
	"repo_url": "https://github.com/brunomolteni/svelte-sortable-list",
	"authors": ["brunomolteni"],
	"homepage": "https://github.com/brunomolteni/svelte-sortable-list#readme",
	"downloads": 324,
	"updated": "2019-07-05T19:48:52.084Z",
	"tags": ["ui", "miscellaneous"],
	"github_stars": 124,
	"typescript": false,
	"version": "1.1.0",
	"svelte_range": "^3.4.1",
	"last_rune_check_version": "1.1.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-sortable-list",
				"version": "1.1.0",
				"size": 5869
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# üîÉ SortableList\n\nThis component renders a list of items which can be reordered by draggin and dropping and implements FLIP animation for adding/removing/reordering items in the list.\n\nTo make the component work you need two thing at least: setting the `list` prop and responding to `on:reorder` event.\n\n### Basic Example ( [Open in REPL](https://svelte.dev/repl/413e33b7f34049f08e443a31d51f5367?version=3.6.4) )\n\n```jsx\n<script>\nimport SortableList from 'svelte-sortable-list';\n\nlet list = [\"First Item\", \"Second Item\", \"Third Item\"];\nconst sortList = ev => {list = ev.detail};\n</script>\n\n<SortableList \n    {list} \n    on:sort={sortList}\n/>\n```\n\n## ‚§µÔ∏è Props and Slot\n\n| name   | type      | required | default                           |\n| ------ | --------- | -------- | --------------------------------- |\n| `list` | Array     | ‚úîÔ∏è       | ‚úñÔ∏è                                |\n| `key`  | String    | ‚ùå       | ‚úñÔ∏è                                |\n| `slot` | Component | ‚ùå       | `<p>{key ? item[key] : item}</p>` |\n\nThe way this works is that you are required to pass a `list` prop to the component, which could be an array with anything inside, but if the array contains objects or arrays you must pass the `key` prop to specify what property is going to be used as key (needs to be unique to each object in the array).\n\nYou can customize what element is used as the list item passing any element as the child. If you do this you can access the item data by setting `let:item` on `<SortableList>` and `{item}` on your element ( you can also access the index in `let:index`).\n\n## ‚§¥Ô∏è Events\n\nThe component handles all the internal functionality but since you are passing the list as a prop, it can't actually change the data you pass to it, so you need to respond to an event that gets triggered any time you sort items.\nThis is done using the `on:sort` event handler, which gets passed an `event` object that contains the list inside the `details` property ( this is the default way of handling event data in svelte).\n\n\n### Complete Example ( [Open in REPL](https://svelte.dev/repl/0b4fd50a87a94efd81b533229b43d941?version=3.6.4) )\n\n```jsx\n<script>\nimport SortableList from 'svelte-sortable-list';\nimport Component from './Component.svelte';\n\nlet list = [\n\t{id: 1, name: 'First Item'},\n\t{id: 2, name: 'Second Item'},\n\t{id: 3, name: 'Third Item'}\n];\nconst sortList = ev => {list = ev.detail};\n</script>\n\n<SortableList \n    {list} \n    key=\"id\" \n    on:sort={sortList}\n    let:item \n>\n    <Component {item} />\n</SortableList>\n```",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 839],
		[3603, 704],
		[3610, 596],
		[3617, 605],
		[3624, 510],
		[3631, 449],
		[3638, 500],
		[3645, 270],
		[3652, 419],
		[3659, 554],
		[3666, 484],
		[3673, 525],
		[3680, 666],
		[3687, 636],
		[3694, 610],
		[3701, 749],
		[3708, 765],
		[3715, 621],
		[3722, 559],
		[3729, 713],
		[3736, 593],
		[3743, 499],
		[3750, 512],
		[3757, 627],
		[3764, 688],
		[3771, 689],
		[3778, 640],
		[3785, 661],
		[3792, 574],
		[3799, 496],
		[3806, 683],
		[3813, 723],
		[3820, 717],
		[3827, 512],
		[3834, 724],
		[3841, 864],
		[3848, 807],
		[3855, 842],
		[3862, 841],
		[3869, 1005],
		[3876, 822],
		[3883, 1005],
		[3890, 889],
		[3897, 957],
		[3904, 768],
		[3911, 1075],
		[3918, 951],
		[3925, 569],
		[3932, 716],
		[3939, 655],
		[3946, 869],
		[3953, 863],
		[3960, 805],
		[3967, 759],
		[3974, 567],
		[3981, 558],
		[3988, 811],
		[3995, 808],
		[4002, 527],
		[4009, 235],
		[4016, 266],
		[4023, 440],
		[4030, 328],
		[4037, 415],
		[4044, 230],
		[4051, 425],
		[4058, 425],
		[4065, 384],
		[4072, 424],
		[4079, 427],
		[4086, 303],
		[4093, 378],
		[4100, 313],
		[4107, 298],
		[4114, 324],
		[4121, 380],
		[4128, 252],
		[4135, 252]
	],
	"esm": false,
	"cjs": true
}
