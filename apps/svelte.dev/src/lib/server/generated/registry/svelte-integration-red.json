{
	"name": "svelte-integration-red",
	"description": "Integrate Svelte into Node-RED for editor development.",
	"repo_url": "https://gitlab.com/2WeltenChris/svelte-integration-red",
	"authors": ["2weltenchris", "meijey"],
	"homepage": "https://gitlab.com/2WeltenChris/svelte-integration-red#readme",
	"downloads": 4632,
	"updated": "2025-05-05T09:45:59.353Z",
	"tags": ["tooling"],
	"typescript": false,
	"version": "2.8.8",
	"svelte_range": "^4.2.19",
	"last_rune_check_version": "2.8.8",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-integration-red",
				"version": "2.8.7",
				"size": 252519
			},
			{
				"name": "@rollup/plugin-commonjs",
				"version": "28.0.3",
				"size": 263273
			},
			{
				"name": "@rollup/pluginutils",
				"version": "5.1.4",
				"size": 58354
			},
			{
				"name": "@types/estree",
				"version": "1.0.7",
				"size": 26147
			},
			{
				"name": "estree-walker",
				"version": "2.0.2",
				"size": 50243
			},
			{
				"name": "picomatch",
				"version": "4.0.2",
				"size": 85237
			},
			{
				"name": "commondir",
				"version": "1.0.1"
			},
			{
				"name": "fdir",
				"version": "6.4.4",
				"size": 45593
			},
			{
				"name": "is-reference",
				"version": "1.2.1",
				"size": 6374
			},
			{
				"name": "magic-string",
				"version": "0.30.17",
				"size": 467464
			},
			{
				"name": "@jridgewell/sourcemap-codec",
				"version": "1.5.0",
				"size": 112815
			},
			{
				"name": "@rollup/plugin-node-resolve",
				"version": "15.3.1",
				"size": 154449
			},
			{
				"name": "resolve",
				"version": "1.22.10",
				"size": 145619
			},
			{
				"name": "is-core-module",
				"version": "2.16.1",
				"size": 33475
			},
			{
				"name": "hasown",
				"version": "2.0.2",
				"size": 8765
			},
			{
				"name": "function-bind",
				"version": "1.1.2",
				"size": 31427
			},
			{
				"name": "path-parse",
				"version": "1.0.7",
				"size": 4511
			},
			{
				"name": "supports-preserve-symlinks-flag",
				"version": "1.0.0",
				"size": 9178
			},
			{
				"name": "deepmerge",
				"version": "4.3.1",
				"size": 31157
			},
			{
				"name": "is-module",
				"version": "1.0.0"
			},
			{
				"name": "@types/resolve",
				"version": "1.20.2",
				"size": 9885
			},
			{
				"name": "html-minifier-terser",
				"version": "7.2.0",
				"size": 4597603
			},
			{
				"name": "camel-case",
				"version": "4.1.2",
				"size": 14251
			},
			{
				"name": "pascal-case",
				"version": "3.1.2",
				"size": 14764
			},
			{
				"name": "no-case",
				"version": "3.0.4",
				"size": 25128
			},
			{
				"name": "lower-case",
				"version": "2.0.2",
				"size": 17661
			},
			{
				"name": "tslib",
				"version": "2.8.1",
				"size": 90359
			},
			{
				"name": "clean-css",
				"version": "5.3.3",
				"size": 492787
			},
			{
				"name": "source-map",
				"version": "0.6.1"
			},
			{
				"name": "commander",
				"version": "10.0.1",
				"size": 174283
			},
			{
				"name": "entities",
				"version": "4.5.0",
				"size": 412892
			},
			{
				"name": "param-case",
				"version": "3.0.4",
				"size": 10221
			},
			{
				"name": "dot-case",
				"version": "3.0.4",
				"size": 10481
			},
			{
				"name": "relateurl",
				"version": "0.2.7"
			},
			{
				"name": "terser",
				"version": "5.39.0",
				"size": 2221569
			},
			{
				"name": "@jridgewell/source-map",
				"version": "0.3.6",
				"size": 177363
			},
			{
				"name": "@jridgewell/gen-mapping",
				"version": "0.3.8",
				"size": 81596
			},
			{
				"name": "@jridgewell/set-array",
				"version": "1.2.1",
				"size": 17945
			},
			{
				"name": "@jridgewell/trace-mapping",
				"version": "0.3.25",
				"size": 169330
			},
			{
				"name": "@jridgewell/resolve-uri",
				"version": "3.1.2",
				"size": 53153
			},
			{
				"name": "acorn",
				"version": "8.14.1",
				"size": 547473
			},
			{
				"name": "commander",
				"version": "2.20.3",
				"size": 62442
			},
			{
				"name": "source-map-support",
				"version": "0.5.21",
				"size": 85177
			},
			{
				"name": "buffer-from",
				"version": "1.1.2",
				"size": 5047
			},
			{
				"name": "rollup",
				"version": "4.40.1",
				"size": 2727114
			},
			{
				"name": "rollup-plugin-svelte",
				"version": "7.2.2",
				"size": 15322
			},
			{
				"name": "@rollup/pluginutils",
				"version": "4.2.1",
				"size": 50858
			},
			{
				"name": "picomatch",
				"version": "2.3.1",
				"size": 89952
			},
			{
				"name": "resolve.exports",
				"version": "2.0.3",
				"size": 24050
			},
			{
				"name": "svelte",
				"version": "4.2.19",
				"size": 2633608
			},
			{
				"name": "code-red",
				"version": "1.0.4",
				"size": 55185
			},
			{
				"name": "estree-walker",
				"version": "3.0.3",
				"size": 17599
			},
			{
				"name": "periscopic",
				"version": "3.1.0",
				"size": 11219
			},
			{
				"name": "is-reference",
				"version": "3.0.3",
				"size": 3953
			},
			{
				"name": "css-tree",
				"version": "2.3.1",
				"size": 1190591
			},
			{
				"name": "mdn-data",
				"version": "2.0.30",
				"size": 602138
			},
			{
				"name": "source-map-js",
				"version": "1.2.1",
				"size": 139872
			},
			{
				"name": "aria-query",
				"version": "5.3.2",
				"size": 176114
			},
			{
				"name": "axobject-query",
				"version": "4.1.0",
				"size": 110878
			},
			{
				"name": "locate-character",
				"version": "3.0.0",
				"size": 5325
			},
			{
				"name": "@ampproject/remapping",
				"version": "2.3.0",
				"size": 78946
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[2, 3],
			[2, 4],
			[2, 5],
			[1, 6],
			[1, 4],
			[1, 7],
			[1, 8],
			[8, 3],
			[1, 9],
			[9, 10],
			[1, 5],
			[0, 11],
			[11, 12],
			[12, 13],
			[13, 14],
			[14, 15],
			[12, 16],
			[12, 17],
			[11, 18],
			[11, 19],
			[11, 20],
			[11, 2],
			[0, 21],
			[21, 22],
			[22, 23],
			[23, 24],
			[24, 25],
			[25, 26],
			[24, 26],
			[23, 26],
			[22, 26],
			[21, 27],
			[27, 28],
			[21, 29],
			[21, 30],
			[21, 31],
			[31, 32],
			[32, 24],
			[32, 26],
			[31, 26],
			[21, 33],
			[21, 34],
			[34, 35],
			[35, 36],
			[36, 37],
			[36, 10],
			[36, 38],
			[38, 39],
			[38, 10],
			[35, 38],
			[34, 40],
			[34, 41],
			[34, 42],
			[42, 43],
			[42, 28],
			[0, 44],
			[44, 3],
			[0, 45],
			[45, 46],
			[46, 47],
			[46, 4],
			[45, 48],
			[0, 49],
			[49, 40],
			[49, 50],
			[50, 10],
			[50, 3],
			[50, 40],
			[50, 51],
			[51, 3],
			[50, 52],
			[52, 3],
			[52, 51],
			[52, 53],
			[53, 3],
			[49, 54],
			[54, 55],
			[54, 56],
			[49, 57],
			[49, 52],
			[49, 53],
			[49, 9],
			[49, 3],
			[49, 51],
			[49, 58],
			[49, 59],
			[49, 60],
			[60, 36],
			[60, 38],
			[49, 38],
			[49, 10]
		],
		"circular": []
	},
	"readme": "# Svelte-Integration-RED (SIR)\n\nSIR integrates [Svelte](https://svelte.dev) into Node-RED and allows to write the editor-part of your node using Svelte templates.\n\nSvelte itself is only needed during development. Anyone using your node will use the generated HTML file. This file may be a bit bigger than a hand-written version. Anyway, the development of node editors gets way easier and neat. Especially if your editor is quite complex or has dynamic parts. And furthermore you can easily write editor components and reuse them.\n\n## Install\n\nInstall SIR global with \n\n```npm install -g svelte-integration-red```\n\nThen you can run the build-process with the command ```sir``` in your project's main directory. SIR will analyze your ```package.json``` and check if it finds a ```.svelte``` template and a ```.doc.html``` for any node mentioned within. It then compiles these to HTML files that comply with [Node-RED's HTML file format](https://nodered.org/docs/creating-nodes/node-html). If your node is not in the same directory than your package.json you can also submit the path to it's folder as a command line parameter (like the test-node example below).\n\nCompile single files with ```sir myNodeName.svelte```\n\nThe html file will automatically be minified. If you need a more readable version for debugging purposes use ```sir -m=false```.\n\n## Usage\n\n### Create your first node\n\nCreating a Node-RED node with SIR is mostly similiar to a normal Node-RED node.\n\nRegister your node in the package.json\n```\n{\n  \"name\": \"my-node\",\n  \"version\": \"0.0.1\",\n  \"description\": \"My awesome node\",\n  \"node-red\": {\n    \"nodes\": {\n      \"my-node-name\": \"my-node-name.js\",\n    }\n  }\n}\n```\n\nCreate a .js file with the following code:\n```\nmodule.exports = function (RED) {\n  function MyNodeName (config) {\n    RED.nodes.createNode(this, config)\n    const node = this\n    node.name = config.name\n  }\n  RED.nodes.registerType('my-node-name', MyNodeName)\n}\n```\n\nAnd instead of the .html file, which will be created later by SIR you need a .svelte file.\n\nAttention: The Node-RED part must be stated in `<script context=\"module\">` and you must state the three functions render, update, revert.\nIf you want to set your node to a minimum width, you can add that in the render option object => e.g. render(this, { minWidth: \"600px\" }).\n\n```\n<script context=\"module\">\n  /* This is mostly identical to a standard Node-RED node. Important: It must be stated in script context=\"module\"! */\n  RED.nodes.registerType(\"my-node-name\", {\n    category: \"common\",\n    defaults: {\n      name: { value: \"\", label: \"Name\", placeholder: \"Enter a name for this node\" },\n      _version: { value: \"\"}\n    },\n    inputs: 0,\n    outputs: 1,\n    color: \"#CEC0DE\",\n    icon: \"font-awesome/fa-tag\",\n    label: function() {\n      if (this.name) return this.name;\n      return \"No name set\";\n    },\n    oneditprepare: function () {\n      render(this)\n    },\n    oneditsave: function () { \n      update(this)\n    }, \n    oneditcancel: function () {\n      revert(this)\n    },\n    onadd: function () { \n      addCurrentNodeVersion(this) \n    }\n  });\n</script>\n\n<script>\n  // get your node variable from extern and import the needed components from SIR\n  export let node\n  import { Input, Button } from 'svelte-integration-red/components'\n  // then add your javascript functions\n  const myButtonFunc = () => alert('The button was pressed')\n</script>\n\n<!-- Now enter your svelte code -->\n<!-- just bind node and set the property name which you have stated above in the defaults variable -->\n<Input bind:node prop=\"name\" />\n<Button icon=\"plus\" label=\"Click me\" on:click={myButtonFunc}/>\n```\n\nThis will be the result:\n\n![Screenshot of a sample-node.](https://gitlab.com/2WeltenChris/svelte-integration-red/raw/master/examples/myNode.png?raw=true \"Sample node\")\n\n### Create your node documentation\n\nDocumentation and your node code are separated. Just create a my-node-name.doc.html for a html or a my-node-name.doc.md for a markdown documentation file and SIR will merge it later.\nFurther examples can be found [here](https://nodered.org/docs/creating-nodes/help-style-guide). \n\n```\n<p>This is a documentation for my node in html.</p>\n\n<h3>Inputs</h3>\n  <dl class=\"message-properties\">\n      <dt>payload\n          <span class=\"property-type\">string | buffer</span>\n      </dt>\n      <dd> the payload of the message to publish. </dd>\n      <dt class=\"optional\">topic\n          <span class=\"property-type\">string</span>\n      </dt>\n      <dd> the MQTT topic to publish to.</dd>\n  </dl>\n\n<h3>Details</h3>\n    <p>Documentation is very important!</p>\n```\n```\nThis is a markdown documentation.\n\n### Inputs\n\n: payload (string | buffer) :  the payload of the message to publish.\n: *topic* (string)          :  the MQTT topic to publish to.\n\n\n### Details\nDocumentation is very important!\n```\n\n### Components\n\nWith SIR you can easily use the following components to create your awesome Node-RED Node. \n\n**You can also find more and complexer examples in the test-node.svelte file.** There are also detailed comments for each component: [source code](https://gitlab.com/2WeltenChris/svelte-integration-red/-/blob/master/test-node/test-node.svelte).\n\n\n#### Button\n\nThis component creates buttons. Just set the needed properties:\n\n- clazz: Add a class to this component.\n- disabled (boolean): Disable the button.\n- fading (boolean | number): Fades the component when hiding or showing (not on opening).\n- icon: Set a Font-Awesome icon for your label. Just enter the icon name, without \"fa fa-\".\n- i18n: This property can be used to either deactivate translation (set to `false`) or to set the path to a specific translation file.\n- id: Set a custom id for your Button. If no id is stated SIR will create an uuid.\n- indented (boolean):  Shift your button to the same position as it would have a label. (See example picture)\n- inline (boolean): Use this option if you want to put multiple items in one row. (Disables sir-Row class)\n- label: Set a name to show what that button will do.\n- maximize (boolean): Set the button to highest available width within your Row.\n- node: Bind your node property to get access to most features.\n- primary (boolean): Set the primary color of your theme (e.g. standard Node-Red would be a red button).\n- small (boolean): Will reduce the size of the button.\n- tooltip: Shows a tooltip when hovering the button.\n- tooltipOptions: See details under Tooltip component.\n\nEvents: \n- on:click (function): Triggers a function stated in `<script>` or directly like the example below.\n\n```\n<Button small icon='edit' on:click={() => alert('You clicked edit.')} />\n```\n\n![Button example](https://gitlab.com/2WeltenChris/svelte-integration-red/raw/master/examples/sir-Button.png?raw=true \"Button example\")\n\n#### Button Group\n\nThis component creates a button group similar to a toggle group. Main difference is that we place the button directly inside the button group and have therefor full control over the styling. A button is also not selected after clicking.\n\n```\n<ButtonGroup label=\"A button group\">\n  <Button inline icon=\"truck\" label=\"We are also indented\" />\n  <Button inline icon=\"globe\" label=\"I am number 2\" />\n  <Button inline icon=\"trash\" label=\"I am the third button\" />\n</ButtonGroup>\n```\n\n#### Callout\n\nCallouts are info boxes which will highlight important information.\n\n```\n<Callout type=\"info\">\n  <span slot=\"header\">I am a callout infobox</span>\n  You can use <b>html</b> <u>styling</u> and fill me with useful tips!'\n</Callout>\n```\n\n![Callout example](https://gitlab.com/2WeltenChris/svelte-integration-red/raw/master/examples/sir-Callout.png?raw=true \"Callout example\")\n\nCallout properties: \n\n- closeable (boolean): Adds a close button.\n- clazz: Add a class to this component.\n- icon: Set a custom icon for your callout box.\n- indented (boolean): Shift the callout to the right (like it would have a label). \n- fading (boolean | number): Fades the component when hiding or showing (not on opening).\n- small (boolean): Creates a small callout box.\n- show (boolean): Show / Hide the callout.\n- type: Set the type for different styling: info, warning, error, success.\n\n#### Collapsible\n\nThe Collapsible component is great if you want to hide content that is seldomly needed or in case you want to define a kind of tree editor. \nFor the latter case you should set the indented flag.\n\n```\n<Collapsible collapsed label=\"Click me\">\n  <Input maximize value=\"Some content.\"/>\n  <Collapsible indented label=\"More content with extra long label\">\n    <Input maximize value=\"More content. :)\" />\n    <Input maximize value=\"And even more! :o\" />\n  </Collapsible>\n</Collapsible>\n```\n\n![Collapsible example](https://gitlab.com/2WeltenChris/svelte-integration-red/raw/master/examples/sir-Collapsible.png?raw=true \"Collapsible example\")\n\n\n- border (boolean): Set a border around your collapsible box.\n- clazz: Add a class to this component.\n- collapsed (boolean): Show or hide the content when opening the node.\n- fading (boolean | number): Fades the component when hiding or showing (not on opening).\n- i18n: This property can be used to either deactivate translation (set to `false`) or to set the path to a specific translation file.\n- icon: Set a Font-Awesome icon for your label. Just enter the icon name, without \"fa fa-\".\n- indented (boolean): Shift the component a bit to the right. Useful if stated within another component (example below)\n- inline (boolean): Use this option if you want to put multiple items in one row. (Disables sir-Row class)\n- label: Set the name for your label, which will show/hide the content if clicked.\n- maximize (boolean): Set the collapsible to full width.\n- node: If your label has a translation you must set the node property or set the path via i18n.\n- tooltip: Shows a tooltip on label / label icon.\n- tooltipOptions: See details under Tooltip component.\n\n\n#### ConfigNode \n\nThe config node is a special `<Input>` component. Just set in the defaults in type the name of your config node and in the Input component the type \"config\".\nHow to create custom nodes can be found [here:](https://nodered.org/docs/creating-nodes/config-nodes).\n\nIf you are editing a node which is using the config node input and you want to react directly after changing the config node, you can use the Node-RED filter function. Please note that SIR uses two properties to enable changing the active node values (see example below).\n\nThe following properties are valid and are identical to the normal `<Input>` component: node, prop, icon, label, id, disabled, maximize, i18n.\n\n```\ndefaults: {\n  // mqtt-broker is a standard Node-RED config node\n  broker: { type: 'mqtt-broker', label: 'Broker', filter: function (configNode, node) {\n    // a function to react after changing the config node in your node\n    console.log(configNode, node)\n  }}, \n}\n<Input type='config' {node} prop=\"broker\"/>\n```\n\n![Input config example](https://gitlab.com/2WeltenChris/svelte-integration-red/raw/master/examples/sir-Input-config.png?raw=true \"Input config example\")\n\n\n#### EditableList\n\nThe editable list component helps you to visualize and to edit array variables. Unlike most components we use 'default' only to save the value of the array.\nNote: This component won't use jQuery since version 1.0.4 which leads to a different sorting animation as the standard Node-Red EditableList.\n\n```\ndefaults: {\n  values: { value: [\"Hello\", \"world\", \"here\", \"I\", \"am.\"] },\n}\n\n<EditableList {node} label=\"Values\" icon=\"list\" bind:elements={node.values} let:element={value} let:index sortable removable addButton >\n    <Input inline maximize {value} on:change={(e) => node.values[index] = e.detail.value} placeholder=\"Value name\" disabled={node.disableInput}></Input>\n</EditableList>\n``` \n\n![Editable list example](https://gitlab.com/2WeltenChris/svelte-integration-red/raw/master/examples/sir-EditableList.png?raw=true \"Editable list example\")\n\nEditable list properties:\n\n- addButton (boolean or string): Set an add button to create a new value. If set as string you can change the button label.\n- clazz: Add a class to this component.\n- disabled (boolean): Disable editing.\n- i18n: This property can be used to either deactivate translation (set to `false`) or to set the path to a specific translation file.\n- icon: Set an icon for your label.\n- indented (boolean): Shift your list a bit to the right. Useful if stated within another component.\n- elements: Bind your array variable. Then create a element and index variable to work with (see description below).\n- fading (boolean | number): Fades the component when hiding or showing (not on opening).\nndex.\n- filter (function): Filter elements from your list. If returns true it will be shown.\n- height (number | string): Set a fix height to your list. Default is auto.\n- label: Set a headline for your list.\n- maxHeight (number | string): Set a maximum height to your list. Default is 300px.\n- maximize (boolean): Set the list to full width. \n- minHeight (number | string): Set a minimum height to your list. Default is 100px.\n- node: If your label has a translation you must set the node property or set the path via i18n.\n- popupKeyboard (object): Set keyboard keys for the deletion popup (default = { enter: removeComponent, escape: () => closePopup(popupId) })\n- removable (boolean): Allows to delete the value.\n- sortable (boolean): Allows to change the value i\n- tooltip: Shows a tooltip on label / label icon.\n- tooltipOptions: See details under Tooltip component.\n\nEvents\n\n- on:add (function): Set a function that will be triggered when adding new values.\n-\ton:remove (function): Set a function that will be triggered when removing values.\n- on:sort (function): Set a function that will be triggered when sorting values.\n\nSlots\n\n- header: Set a header above the editable list.\n- headerTable: Set a table header.\n\nAttention: The bound elements are automatically iterated using their index as id. This may lead to unexpected behaviour when removing elements from the\nlist. To prevent this, your elements may define an id property that is used as an alternative to the index.\n\nTo render an element, assign the element to a variable (here: value). You can then render them in any way you like within the EditableList's\nHTML content. Keep in mind that you may not bind to the node from within here as your elements are not direct children of your node.\nUse the value property and the change event instead.\n\n\n#### Group\n\nGroups allow to render a border around other components.\n\n```\n<Group label=\"Just grouped content\" icon=\"minus\">\n  <Input maximize label=\"First\" value=\"First input\" disabled={node.disableInput}/>\n  <Input maximize label = \"Second\" value=\"Second input\" disabled={node.disableInput}/>\n</Group>\n```\n![Group example](https://gitlab.com/2WeltenChris/svelte-integration-red/raw/master/examples/sir-Group.png?raw=true \"Group example\")\n\nGroup properties: \n\n- clazz: Add a class to this component.\n- i18n: This property can be used to either deactivate translation (set to `false`) or to set the path to a specific translation file.\n- icon: Set the icon for your label.\n- fading (boolean | number): Fades the component when hiding or showing (not on opening).\n- label: Set the name for your headline.\n- maximize (boolean): Set the group to full width.\n- node: If your label has a translation you must set the node property or set the path via i18n.\n- tooltip: Shows a tooltip on label / label icon.\n- tooltipOptions: See details under Tooltip component.\n\n\n#### Input\n\nCreates a Input field. If you want to refer to one of your 'default' properties like name in this example\n\n```\nRED.nodes.registerType(\"my-node-name\", {\n  category: \"common\",\n  defaults: {\n    name: { value: \"\", label: \"Name\" }\n  },...\n```\n\nyou can create your Input field simply with:\n\n```\n  <Input bind:node prop=\"name\"/>}\n```\n\n![Input example](https://gitlab.com/2WeltenChris/svelte-integration-red/raw/master/examples/sir-Input.png?raw=true \"Input example\")\n\nInput has the following properties. Properties markes with '*' can be stated in 'default':\n\n- checked (boolean): Only available for checkboxes. Will be intern handled like the value property.\n- clazz: Add a class to this component.\n- credentials: If your input is a credential set this to true.\n- disabled (boolean): Deactivate the input field.\n- error (boolean): Bind a variable which will mark the input field as invald. Warning: This is only visible on the UI and for not node bound input fields.\n- fading (boolean | number): Fades the component when hiding or showing (not on opening).\n- i18n: This property can be used to either deactivate translation (set to `false`) or to set the path to a specific translation file.\n- icon*: Set a Font-Awesome icon for your label. Just enter the icon name, without \"fa fa-\".\n- id: Set a custom id for your input field. The id will always have the prefix 'node-input-'. If no id is stated it will take the key name or create an uuid.\n- indented (boolean): Only neccessary if you don't have a label. Will shift your input field to the same position as it would have a label.\n- inline (boolean): Use this option if you want to put multiple items in one row. (Disables sir-Row class)\n- label*: Enter your label name, if empty it will state the key name. Set to `false` if you don't want a label.\n- maximize (boolean): Set your input field to the highest available width within your Row.\n- node: Bind your node property to get access to most features.\n- placeholder*: Enter a placeholder text if no value is stated.\n- prop: The key name of your property within 'default'.\n- tooltip: Shows a tooltip on label / label icon.\n- tooltipOptions: See details under Tooltip component.\n- type*: Enter one of these types to create a specific input field: text, number, password, email, url, checkbox, color or search for a simple Node-RED like search field\n- value*: Set the value of the input field. If you use a custom variable it must be bound (bind:value=myVariable). This variable must be created within the svelte `<script>` tag.\n\n#### Credentials Input\n\nPrepare your credenctials like in the [credentials readme](https://nodered.org/docs/creating-nodes/credentials).\n\nUse instead of the Node-RED html input this code.\n\n```\n  <Input bind:node prop=\"username\" credentials />\n  <Input bind:node prop=\"password\" credentials type=\"password\" />\n```\n\n\n#### MenuEntry\n\nCreates a Menu Entry. Together with Popover you can create a context menu like element (which have to be open with the left mouse button).\n\n```\n  <MenuEntry on:click={ () => alert('you clicked entry 1') }>Entry 1</MenuEntry>\n  <MenuEntry on:click={ () => alert('you clicked entry 2') }>Entry 2</MenuEntry>\n  <MenuEntry expandable title=\"Header 1\">\n    <MenuEntry on:click={ () => alert('you clicked entry 3') }>Entry 3</MenuEntry>\n    <MenuEntry on:click={ () => alert('you clicked entry 4') }>Entry 4</MenuEntry>\n  </MenuEntry>    \n```\n\n![MenuEntry Example](https://gitlab.com/2WeltenChris/svelte-integration-red/raw/master/examples/sir-MenuEntry.png?raw=true \"MenuEntry Example\")\n\nMenuEntry properties:\n - clazz: Add a class to this component.\n - closeOtherPopovers: Opening an popover closes other popovers.\n - expandable (boolean): Set to create a new Menu child component (Header 1 in the picture). Default: false.\n - id: Set a custom id for your component. If no id is stated SIR will create a uuid.\n - maxHeight: Set a maximal height for your component. Default is window.height.\n - title: Only if expandable -> Set a title for your header.\n\n\n#### Panel\n\nA Panel is a Component with 2 boxes which are resizable. Just enter your content in either the top or bottom slot.\n\n```\n<Panel label=\"Resizable Panel\" height=\"300\" topHeight=\"180\" border>\n  <div slot=\"top\" style=\"padding: 5px;\">\n    <Input label=\"Top input\" placeholder=\"I am the top input\"/>\n    <Callout type=\"info\">\n      Hello world!\n    </Callout>\n  </div>\n  <div slot=\"bottom\" style=\"padding: 5px;\">\n    <Input label=\"Bottom input\" placeholder=\"I am the bottom input\"/>\n    <Callout type=\"warning\">\n      Goodbye world!\n    </Callout>\n  </div>   \n</Panel>\n```\n\n![Panel Example](https://gitlab.com/2WeltenChris/svelte-integration-red/raw/master/examples/sir-Panel.png?raw=true \"Panel Example\")\n\nPanel properties:\n\n - border (boolean): Set a border around your collapsible box. Default (false)\n - clazz: Add a class to this component.\n - fading (boolean | number): Fades the component when hiding or showing (not on opening).\n - height (Number) Sets the height of the panel. Default \"500\".\n - i18n: This property can be used to either deactivate translation (set to `false`) or to set the path to a specific translation file.\n - icon: Set an icon next to the label.\n - id: Set a custom id for your component. If no id is stated SIR will create a uuid.\n - label: Enter a name which will be shown above the panel.\n - node: Bind your node property to get access to most features.\n - topHeight (text | number): Define the default height of the top panel. Default: \"70%\".\n\n#### Experimental: Popover\n\nCreates a popup element at it's button position. If used with modal, it will close if clicked outside the popover element.\n\n```\n<Popover label={showPopover ? \"Close Menu\" : \"Open Menu\"} bind:showPopover={showPopover}>\n  <Input inline placeholder=\"I am a dummy input field\"/>\n  <Button inline on:click={() => showPopover = false} label=\"Close Popover Menu\"/>\n</Popover>\n```\n\n![Popover Example](https://gitlab.com/2WeltenChris/svelte-integration-red/raw/master/examples/sir-Popover.png?raw=true \"Popover Example\")\n\nPopover properties:\n\n - button (boolean): Create a button to open the popover. Default: true.\n - clazz: Add a class to this component.\n - disabled (boolean): Disable the popover Button. Default: false.\n - icon: Set a Font-Awesome icon for your label. Just enter the icon name, without \"fa fa-\".\n - id: Set a custom id for your component. If no id is stated SIR will create a uuid.\n - label: Label for the Button.\n - modal (boolean): Creates a modal background. If clicked outside the popover, the popover will close. Default: true.\n - showPopover (boolean): Show / Hide the popover. Default: false.\n - small (boolean): Create a small button. Default: false.\n\n\n#### Popup\n\nCreate easy but complex Node-RED popups.\nYou just need something to trigger the popup, like a button. If the popup is fixed you must import the closePopup function to close the popup again :).\n\nSimple warning/error popups are also possible, but those are propably more easy to create with the RED.notify()\n\nTranslations within a Popup should be made with the RED._() function instead of data-i18n!\n```\n<script>\nimport Popup, { closePopup } from 'svelte-integration-red/components/Popup.svelte' // <-- neccessary import to close popups if fixed\n\nlet showRiddlePopup = false\nlet keysPopup = {\n  enter: () => {\n    if (node.insidePopup === 'friend') {\n      closePopup(\"riddlePopup\")\n    } else {\n      alert('think again Gandalf!')\n    } \n  },\n  escape: () => {\n    alert('You pressed escape. The popup will close now')\n    closePopup(\"riddlePopup\")\n  },\n  a: () => {\n    alert('There is no a in friend!')\n  }\n}\n</script>\n\n<Button label='Show riddle popup' on:click={ () => showRiddlePopup = true }></Button>\n\n<Popup id=\"riddlePopup\" modal fixed bind:showPopup={showRiddlePopup} focus=\"insidePopup\" keyboard={keysPopup}>\n  <h2>Speak \"friend\" and enter!</h2>\n  <!-- use RED._(...) instead of <span data-i18n=\"...\" /> for translating texts -->\n  <span>{RED._('my-node/my-node:popup.text')}</span>\n  <Input bind:node type='text' prop='insidePopup'></Input>\n  <!-- use svelte:fragment to remove unneccessary slot DOM -->\n  <svelte:fragment slot=\"buttons\">\n    <Button label='Okay' primary disabled={node.insidePopup !== 'friend'} on:click={() => closePopup(\"riddlePopup\")} />\n    <Button label='Cancel' on:click={cancelPopup} />\n    <Button label='Give me a hint' on:click={ () => alert(\"It's literal 'friend' Gandalf! And don't speak it out, but type it in the field...\") } />\n  </svelte:fragment>\n</Popup>\n```\n![Popup example](https://gitlab.com/2WeltenChris/svelte-integration-red/raw/master/examples/sir-Popup.png?raw=true \"Popup example\")\n\nPopup properties:\n- fixed (boolean): If set, the popup will stay till closed by closePopup\n- focus: If you have an input field you can focus on it by stating the input field id.\n- id: If you want to close the popup by a function, set a unique id which you can later use with closePopup(id).\n- keyboard: Object where the key is the keyboard key and the value is a function. Only available for fixed popups.\n- modal (boolean): Prevents changing something in Node-RED while the popup shows.\n- showPopup: Bound variable to trigger the popup.\n- timeout (number): If not fixed you can set a timeout to close the popup (default: 5000 ms)\n- type: Sets the styling of the popup: 'info', 'warning', 'error'\n\n\n#### Row\n\nThis is just a simple row. Usually components use this component automatically to keep the same distance.\n\nIf you want to combine input elements within one row you must state the row component and set the input elements inside.\nWithin your Row some elements like the input field must set to 'inline'.\n\n```\n<Row>\n  <Input type='text' inline maximize {node} prop=\"myVariable\" />   \n  <Button icon=\"trash\" on:click={() => alert('You clicked on the trash can button')} />\n  <Button icon=\"plus\" on:click={() => alert('You clicked on the plus button')} />\n  <Button icon=\"close\" on:click={() => alert('You clicked on the close button')} />\n</Row>\n```\n\n![Row example](https://gitlab.com/2WeltenChris/svelte-integration-red/raw/master/examples/sir-Row.png?raw=true \"Row example\")\n\nRow properties: \n\n- clazz: If you want to state a css class (setting class property is prohibited by svelte).\n- fading (boolean | number): Fades the component when hiding or showing (not on opening).\n- id: Set a custom id for your component. If no id is stated SIR will create an uuid.\n- inline: Set the row to inline instead of flex.\n- indented (boolean): Shift your components to the right. Useful if stated within another component. Default: false.\n- maximize: Set the row to full width.\n\nEvents: click, dblclick, mouseenter, mouseleave\n\n\n#### Select\n\nSelect let the user choose from a dropdown list. The options can also be created by svelte #each.\n\n```\ndefaults: {\n  selectionTwo: { value: \"hello\", label: \"Selection two\" }\n}\n\n<Select bind:node prop=\"selectionTwo\">\n  <option value=\"hello\">Hello</option>\n  <option value=\"world\">World</option>\n</Select>\n```\n\n![Select example](https://gitlab.com/2WeltenChris/svelte-integration-red/raw/master/examples/sir-Select.png?raw=true \"Select example\")\n\nSelect properties (Properties with '*' can be stated in 'default'):\n\n- clazz: Add a class to this component.\n- disabled (boolean): Disable selecting.\n- error (boolean): Bind a variable which will mark the input field as invald. Warning: This is only visible on the UI and for not node bound input fields.\n- fading (boolean | number): Fades the component when hiding or showing (not on opening).\n- i18n: This property can be used to either deactivate translation (set to `false`) or to set the path to a specific translation file.\n- icon: Set a Font-Awesome icon for your label. Just enter the icon name, without \"fa fa-\".\n- id: Set a custom id for your Select component. If no id is stated SIR will create from the default key name or an uuid.\n- inline (boolean): Use this option if you want to put multiple items in one row. (Disables sir-Row class)\n- label*: Enter your label name, if empty it will state the key name. Set to `false` if you don't want a label.\n- maximize (boolean): Set the disable component to full width.\n- node: Bind your node property to get access to most features.\n- prop: The key name of your property within 'default'.\n- tooltip: Shows a tooltip on label / label icon.\n- tooltipOptions: See details under Tooltip component.\n- value*: Set the value of the input field. If you use a custom variable it must be bound (bind:value=myVariable). This variable must be created within the svelte `<script>` tag.\n\n\n#### TabbedPane + TabContent\n\nWith the help of those two components you can create tabs for your node. TabbedPane is the outer box of your Tabs. TabContent will hold the components that will be shown, if the tab is active.\n\nDefine Tabs by using an object where the key is the tabs name. The tab object key is the identifing name for the TabContent, the value can either be a string (label) or an object to show a label and an icon.\n\nIf you do not want to prevent rendering non active tabs use the \"active\" property at the TabContent component.\nThis should only be necessary if your node has a tab with a complex structure (reduce loading times) or special stuff like recreate on opening.\n\n```\n<script>\nlet tabs = { \"props\": \"Properties\", \"buttons\": { name: \"Buttons\", icon: \"truck\" }, \"list\": \"List\", \"groups\": \"Groups\", \"callouts\": \"Callouts\", \"popups\": \"Popups\", \"table\": \"Table\" }\nlet activeTab\n</script>\n\n<TabbedPane bind:tabs bind:active={activeTab}>\n\t<TabContent tab=\"props\" active={activeTab}>\n  ... <-- here is your content that will be shown if the tab is active\n  </TabContent>\n  \n  <TabContent tab=\"buttons\" active={activeTab}>\n  ...\n  </TabContent>\n  ...\n</TabbedPane>\n```\n\n![Tabs example](https://gitlab.com/2WeltenChris/svelte-integration-red/raw/master/examples/sir-Tab.png?raw=true \"Tabs example\")\n\nTabbedPane properties:\n\n- active: Bind this property to get the currently active tab name\n- clazz: Add a class to this component.\n- fixed: Fix the TabbedPane element and make the content scrollable.\n- i18n: This property can be used to either deactivate translation (set to `false`) or to set the path to a specific translation file.\n- id: Set a custom id for your component. If no id is stated SIR will create from the default key name or an uuid.\n- node: If your label has a translation you must set the node property or set the path via i18n.\n- tabs: An object with the key as the name for the tab and the value as the label (string) or an object with name and icon.\n\nTabbedContent properties:\n\n- active: Set to true or the tab name to render this tabbedContent slot. If not set, the content will always be rendered.\n- clazz: Add a class to this component.\n- tab: The name / id of the tab.\n\n#### Table\n\nCreate a table which can also edit its values.\n      \n```\ndefaults: {\n  myTable: { \n    value: {\n      header: ['col1', 'col2', 'col3', 'col4'],\n      rows: [\n        ['hello', 'world', 'this is', 'my first row'], \n        ['hello', 'world', 'this is', 'my second row'], \n        ['hello', 'world', 'this is', 'my third row'], \n        ['hello', 'world', 'this is', 'my fourth row']\n      ]\n    }\n  },\n}\n\n<Table bind:node prop='myTable' editable={true} on:afterAddRow={(event) => console.log(event.detail)/>\n```\n\n![Table example](https://gitlab.com/2WeltenChris/svelte-integration-red/raw/master/examples/sir-Table.png?raw=true \"Table example\")\n\nTable properties:\n\n- clazz: Add a class to this component.\n- editable (boolean): Allows editing of the table. Default: false.\n- editColumns (boolean): Allows editing of the columns/header. Default: true.\n- fading (boolean | number): Fades the component when hiding or showing (not on opening).\n- header: Can be used instead of the header from the value object.\n- i18n: This property can be used to either deactivate translation of the header (set to `false`) or to set the path to a specific translation file.\n- id: Set a custom id for your component. If no id is stated SIR will create from the default key name or an uuid.\n- node: Bind your node property to get access to most features.\n- prop: The key name of your property within 'default'.\n- rows: Can be used instead of the rows from the value object.\n- value: Set the value for the table. Must be an Object with header: [] and rows: [].\n\nTable has the following events:\n- beforeEditTable\n- afterEditTable\n- afterCancelEditTable\n- afterEditColumns\n- afterEditRow\n- beforeAddRow\n- afterAddRow\n- afterAddColumn\n- afterDelete\n\n\n#### MultilineText / Textarea\n\nCreates a multiline input field.\n\n```\ndefaults:  {\n  textarea: {value: 'This is a multiline input field', label: 'Textarea', placeholder: 'Please enter something'},\n}\n\n<Textarea bind:node prop='textarea' />\n\n```\n\n![Textarea example](https://gitlab.com/2WeltenChris/svelte-integration-red/raw/master/examples/sir-Textarea.png?raw=true \"Textarea example\")\n\nTextarea properties. (Properties markes with '*' can be stated in 'default'):\n\n- clazz: Add a class to this component.\n- cols (number): Default html textara property. Changes the width.\n- disabled (boolean): Disables the input.\n- error (boolean): Bind a variable which will mark the input field as invald. Warning: This is only visible on the UI and for not node bound input fields.\n- fading (boolean | number): Fades the component when hiding or showing (not on opening).\n- i18n: This property can be used to either deactivate translation (set to `false`) or to set the path to a specific translation file.\n- icon*: Set a Font-Awesome icon for your label. Just enter the icon name, without \"fa fa-\".\n- id: Set a custom id for your input field. The id will always have the prefix 'node-input-'. If no id is stated it will take the key name or create an uuid.\n- inline (boolean): Use this option if you want to put multiple items in one row. (Disables sir-Row class)\n- label*: Enter your label name, if empty it will state the key name. Set to `false` if you don't want a label.\n- maximize (boolean):  Set the textarea component to full width.\n- maxlength (number): Limits the amount of entering symbols.\n- node: Bind your node property to get access to most features.\n- placeholder*: Enter a placeholder text if no value is stated.\n- prop: The key name of your property within 'default'.\n- rows (number): Default html textara property. Changes the height. Default value: 5.\n- value*: Set the value of the input field. If you use a custom variable it must be bound (bind:value=myVariable). This variable must be created within the svelte `<script>` tag.\n- tooltip: Shows a tooltip on label / label icon.\n- tooltipOptions: See details under Tooltip component.\n\n\n#### ToggleGroup\n\nWith ToggleGroup you can select one or multiple related options.\nYou can choose between buttons (standard), checkbox or radio input fields. With radio input can only choose one option!\n\nImportant: If multiple options are possible the result will always be stated in an array.\n\n```\ndefaults: {\n  toggleSingle: { value: 'left', label:\"Select one\", icon:\"check\"},\n  toggleMulti: { value: ['you', 'more', 'one'], label:\"Select multiple\", icon:\"list-ol\"},\n}\n\n<script>\n  const groupedInputOptions = [\n    { icon: 'align-left', label: 'label.left', value: 'left' },\n    { icon: 'align-center', label: 'label.center', value: 'center' },\n    { icon: 'align-right', label: 'label.right', value: 'right' },\n    { icon: 'align-justify', label: 'label.justify', value: 'justify' }\n  ]\n  const groupedInputOptionsMulti = [ 'you', 'can', 'select', 'more', 'than', 'one']\n</script>\n\n<ToggleGroup bind:node prop=\"toggleSingle\" options={groupedInputOptions}/>\n<ToggleGroup bind:node prop=\"toggleMulti\" options={groupedInputOptionsMulti} gap={false} multiselect={true} />\n```\n\n![ToggleGroup example](https://gitlab.com/2WeltenChris/svelte-integration-red/raw/master/examples/sir-Toggle-group.png?raw=true \"ToggleGroup example\")\n\n\nToggleGroup properties (Properties with '*' can be stated in 'default'):\n\n- clazz: Add a class to this component.\n- disabled (boolean): Disable selecting.\n- fading (boolean | number): Fades the component when hiding or showing (not on opening).\n- gap (boolean): Only for button type. Creates a gap between the selecting values. Default: true\n- i18n: This property can be used to either deactivate translation (set to `false`) or to set the path to a specific translation file.\n- icon*: Set a Font-Awesome icon for your label. Just enter the icon name, without \"fa fa-\".\n- id: Set a custom id for your component. If no id is stated SIR will create from the default key name or an uuid.\n- indented (boolean): Only neccessary if you don't have a label. Will shift your input field to the same position as it would have a label.\n- inline (boolean): Set the option in one row or set one row for each option. Radio button is always false. Default: true\n- label*: Enter your label name, if empty it will state the key name. Set to `false` if you don't want a label.\n- multiselect (boolean): Select more than one option.\n- node: Bind your node property to get access to most features.\n- options: Set an Array with possible selecting options. Each value can either be a string or an object with the keys: icon, label, value.\n- prop: The key name of your property within 'default'.\n- tooltip: Shows a tooltip on label / label icon.\n- tooltipOptions: See details under Tooltip component.\n- type: Select the styling: button (default), checkbox or radio (only for single selection)\n- value*: Set the value for the group. If you use a custom variable it must be bound (bind:value=myVariable). This variable must be created within the svelte `<script>` tag.\n\n#### Tooltip\n\nAdd a tooltip to a custom component. Most Sir-Components have this component included and only needs the property \"tooltip\" and optional \"tooltipOptions\".\n\nTooltip properties:\n- tooltip: A string with the content for the tooltip. Can contain markdown.\n- tooltipOptions: A object with the following keys:\n    - target: DOM id of target\n    - direction: Direction of the tooltip. Can be \"top\", \"bottom\", \"left\" or \"right\". (default \"right\")\n    - trigger: Decides when the tooltip will be shown: \"hover\" or \"click\". (default \"hover\")\n    - delay: Object with the keys show and hide. Sets the delay in ms to show/hide the tooltip. (default { show: 750, hide: 150 })\n    - autoClose (number): Close the tooltip after x milliseconds after opening. (default 0)\n    - width: Set a fix tooltip width. (default \"auto\")\n    - maxWidth: Set a fix max width. (default \"700px\")\n    - size: Set the tooltip font size: \"small\", \"default\" or \"large\". (default \"default\")\n    - offset (number): Set the distance to target id in px. (default 0)\n    - closeOnClick (boolean): Closing tooltip on click (default true).\n    - class: Add a additional tooltip class.\n    - interactive: If hover, tooltip won't hide on mouseover. (default true)\n\n#### TreeNode\n\nA tree node is a hoverable and selectable component which is often used to show a hierarchical or repitite structure.\nA tree node can be the root element, a branch or the leaf.\nBind selected and hovered to a variable. The hovering and selection of the row works for the tree headers automatically.\nAs the structure of the tree childs is unknown you must set the id of the child row to the selected / hovered variable.\nMost of the times this can be done by get the closest \".sir-Row\".\n\n```\n<script>\n  const myTree = [\n    { label: \"tree 1\", icon: \"search\"},\n    { label: \"tree 2\", icon: \"truck\"},\n    { label: \"tree 3\", icon: \"bullhorn\"},\n    { label: \"tree 4\", icon: \"camera\"}\n  ]\n\n  let treeSelect\n  let treeHover\n  const getRow = (e) => e.target?.closest(\".sir-Row\")?.id\n</script>\n\n<style>\n  .myRow { padding: 2px 0; }\n  .myButton { margin-right: 6px; }\n</style>\n\n{#each myTree as { label, icon }, i}\n  <TreeNode {label} bind:selected={treeSelect} bind:hovered={treeHover}>\n    <Row clazz=\"myRow\" maximize on:mouseenter={(e) => treeHover = getRow(e)} on:click={(e) => treeSelect = getRow(e)} >\n      <Button {icon} small inline clazz=\"myButton\" on:click={(e) => treeSelect = getRow(e)} />\n      Welcome to {label}\n    </Row>\n    <TreeNode label=\"{label} subtree\" bind:selected={treeSelect} bind:hovered={treeHover}>\n      <Input label=\"{label} input\" />\n    </TreeNode>\n  </TreeNode>\n{/each}\n```\n\n![TreeNode example](https://gitlab.com/2WeltenChris/svelte-integration-red/raw/master/examples/sir-TreeNode.png?raw=true \"TreeNode example\")\n\n\nToggleGroup has the following properties. Properties markes with '*' can be stated in 'default':\n\n- clazz: Add a class to this component.\n- collapsible: Is the TreeNode a collapsible or a simple row (default = true)\n- collapsed (boolean): Show or hide the content when opening the node. Default = false\n- hoverable (boolean): Makes the tree hoverable. Default: true\n- hovered:  Bind a variable in which the id of the hovered component is saved.\n- id: Set a custom id for your component. If no id is stated SIR will create from the default key name or an uuid.\n- icon: Set a Font-Awesome icon for your label. Just enter the icon name, without \"fa fa-\".\n- indented (number): Set the indented width. Default: 12 (px)\n- label: Set the name for your label, which will show/hide the content if clicked and is a collapsible.\n- selectable (boolean): Makes the tree selectable. Default: true\n- selected: Bind a variable in which the id of the selected component is saved.\n\n\n#### TypedInput\n\n[TypedInputs](https://nodered.org/docs/api/ui/typedInput/) are Node-RED specific fields which combine a selection field and an input field.\n\n```\ndefaults: {\n  content: { value: '', label: 'Content',  validate: RED.validators.typedInput(\"contentType\") },\n  contentType: { value: 'str', types: [\"str\", \"bool\", \"num\"] },\n}\n\n<TypedInput {node} prop=\"content\" typeProp=\"contentType\" bind:types={contentTypes} disabled={node.disableInput}/>\n```\n\n![TypedInput example](https://gitlab.com/2WeltenChris/svelte-integration-red/raw/master/examples/sir-TypedInput.png?raw=true \"TypedInput example\")\n\nTypedInput has the following properties. Properties markes with '*' can be stated in 'default':\n\n\n- clazz: Add a class to this component.\n- disabled (boolean): Deactivate the in\n\n- i18n: This property can be used to either deactivate translation (set to `false`) or to set the path to a specific translation file.\n- icon*: Set a Font-Awesome icon for your label. Just enter the icon name, without \"fa fa-\".\n- label*: Enter your label name, if empty it will state the key name. Set to `false` if you don't want a label.\n- fading (boolean | number): Fades the component when hiding or showing (not on opening).\n- id: Set a custom id for your input field. The id will always have the prefix 'node-input-'. If no id is stated it will take the key name or create an uuid.\n- inline (boolean): Use this option if you want to put multiple items in one row. (Disables sir-Row class)\n- indented (boolean): Will shift your input field to the same position as it would have a label.\nput field.\n- maximize (boolean): Set your input field to the highest available width within your Row.\n- node: Bind your node property to get access to most features.\n- prop: The key name of your property within 'default'.\n- tooltip: Shows a tooltip on label / label icon.\n- tooltipOptions: See details under Tooltip component.\n- typeProp: Set the value of the (left) selection field.\n- type: Instead of typeProp: bind the value of the (left) selection field.\n- types: Instead of typeProp: bind the selectable values of the (left) selection field.\n- value*: Set the value of the (right) input field. If you use a custom variable it must be bound (bind:value=myVariable). This variable must be created within the svelte `<script>` tag.\n\n### Update your Node\nYou can use SIR to automatically update your nodes if critical changes were made. This is useful if you changed a variable name, the type of a variable or the variable needs a (new) default value which must be set in all existing nodes. Just follow these steps:\n- You have to add \"_version\" to your node default with an empty string value. (Check example at the beginning)\n- Add the method \"onadd\" to your node. (Check example at the beginning)\n- Create a \"my-node-name-update.js\" file with the following code. This function will be started automatically after Node-RED is ready.\n- Handling legacy properties: If you remove a value from the node default object and need the value from the existing nodes, add them via the addLegacyProperties function. With a version check you get one last time access to the value to add them to another property. After the first deploy the legacy property will be deleted from the Node-RED json file.\n  ```\n\n  // update existing node values => version === currrent node version\n  const clientUpdate = (version, node) => {\n    // version = {major: 1, minor: 2, patch: 3, tag: 'beta-1', string: '1.2.3-beta-1', aggregated: 1002003, parse = function('string') }\n    // version below 1.2.0\n      if (version.aggregated < version.parse('1.2').aggregated) {\n      // overwrite all node names\n      node.name = \"my new name\"\n    }\n    \n    // lower than 2.1.3\n    if (version.aggregated < version.parse('2.1.3').aggregated) {\n      // node.myProp is depreceated and is now node.anotherProp\n      node.anotherProp = node.myProp // Attention: Add my prop in the addLegacyProperties function to enable getting the value a last time. \n    }\n    return node\n  }\n\n  // add temporarily node default keys\n  // this function is handy if you rename or split old values\n  const addLegacyProperties = () => {\n    const legacyProps = []\n    legacyProps.push('myProp')\n    return legacyProps\n  }\n\n  module.exports = { \n    clientUpdate,\n    legacyProps\n  }\n  ```\n  - Server side updating will be added... But theoretically you can add a serverUpdate function in the update.js and import it. You just have to check the version for yourself...\n  ```\n  // my-node-name-update.js\n  const serverUpdate = (config) => {\n    // TODO find a good way to put the version parse automatically here...\n    // const currentVersion = config._version\n    return config\n  }\n\n  // my-node-name.js\n  config = require('./test-node-update').serverUpdate(config)\n  ```\n\n## Trying SIR with Gitpod\n\nIf you want to test SIR you may run this project within [Gitpod](https://gitpod.io/) which is integrated into GitLab and just a click away. After your workspace is up and running, you need to run the following commands in order to compile the test-node's svelte template and run node-red:\n\n```shell\ngitpod /workspace/svelte-integration-red $ sir test-node\nFound svelte-file test-node/test-node.svelte for node test-node.\nCreated HTML version of test-node/test-node.svelte\ngitpod /workspace/svelte-integration-red $ node-red\n```\n\nYou will see a message that a new port has been opened. Just click on \"Open Browser\" and Node-RED will open in a new browser tab where you can try the test node's behaviour. Feel free to change the template, recompile it and re-run Node-RED to get a feeling for SIR.\n\n\n## License\nThis repository and the code inside it is licensed under the MIT License. Read LICENSE for more information.\n\n## Not yet implemented\n\nThe following components / features have will be implemented\n\n- [ ] Add event forwarding for all events (waiting for svelte to implement...)\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 105],
		[3596, 532],
		[3603, 439],
		[3610, 129],
		[3617, 29],
		[3624, 65],
		[3631, 290],
		[3638, 90],
		[3645, 24],
		[3652, 49],
		[3659, 119],
		[3666, 270],
		[3673, 711],
		[3680, 682],
		[3687, 433],
		[3694, 70],
		[3701, 125],
		[3708, 52],
		[3715, 56],
		[3722, 180],
		[3729, 612],
		[3736, 299],
		[3743, 199],
		[3750, 273],
		[3757, 391],
		[3764, 358],
		[3771, 382],
		[3778, 219],
		[3785, 250],
		[3792, 262],
		[3799, 308],
		[3806, 2178],
		[3813, 186],
		[3820, 321],
		[3827, 264],
		[3834, 263],
		[3841, 607],
		[3848, 108],
		[3855, 661],
		[3862, 54],
		[3869, 333],
		[3876, 6311],
		[3883, 1074],
		[3890, 547],
		[3897, 298],
		[3904, 430],
		[3911, 415],
		[3918, 425],
		[3925, 653],
		[3932, 2378],
		[3939, 680],
		[3946, 124],
		[3953, 109],
		[3960, 412],
		[3967, 691],
		[3974, 201],
		[3981, 280],
		[3988, 249],
		[3995, 296],
		[4002, 360],
		[4009, 77],
		[4016, 127],
		[4023, 295],
		[4030, 544],
		[4037, 480],
		[4044, 904],
		[4051, 559],
		[4058, 431],
		[4065, 377],
		[4072, 333],
		[4079, 558],
		[4086, 259],
		[4093, 184],
		[4100, 575],
		[4107, 325],
		[4114, 4632],
		[4121, 4146],
		[4128, 208]
	],
	"esm": false,
	"cjs": true
}
