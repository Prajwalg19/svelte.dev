{
	"name": "svelte-signals",
	"description": "Create reactive state and derived values in Svelte.",
	"repo_url": "https://github.com/abdel-17/svelte-signals",
	"authors": ["abdel-17"],
	"homepage": "https://github.com/abdel-17/svelte-signals#readme",
	"downloads": 7,
	"updated": "2025-03-12T10:44:43.305Z",
	"tags": ["miscellaneous"],
	"github_stars": 2,
	"typescript": true,
	"version": "0.0.2",
	"svelte_range": "^5.0.0",
	"kit_range": "^2.16.0",
	"last_rune_check_version": "0.0.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-signals",
				"version": "0.0.2",
				"size": 5585
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Svelte Signals\n\nSvelte Signals is a simple library that wraps Svelte runes with functions.\n\n```svelte\n<script>\n    import { createState } from \"svelte-signals\";\n\n    const [count, setCount] = createState(0);\n\n    function increment() {\n        setCount(count() + 1);\n    }\n</script>\n\n<button onclick={increment}>\n    You clicked {count()} times\n</button>\n```\n\nThe advantage to this approach is that you can pass the values around without\nworrying about losing reactivity, but it does force everything to go through\na function call, rather than treating reactive values as normal variables.\n\n## Installation\n\n```bash\nnpm install svelte-signals\n```\n\n## Usage\n\n### `createState`\n\nCreates deeply reactive state.\n\n```ts\nimport { createState } from \"svelte-signals\";\n\nconst [items, setItems] = createState<string[]>([]);\n\nfunction addItem(item: string) {\n    items().push(item);\n}\n\nfunction clearItems() {\n    setItems([]);\n}\n```\n\n### `createRawState`\n\nCreates state that is _not_ made deeply reactive â€” instead of mutating it,\nyou must set it.\n\n```ts\nimport { createRawState } from \"svelte-signals\";\n\nconst [items, setItems] = createRawState<string[]>([]);\n\nfunction addItem(item: string) {\n    setItems([...items(), item]);\n}\n```\n\n### `createDerived`\n\nCreates derived state, i.e. one that depends on other state variables.\nThe given function should be free of side-effects.\n\n```ts\nimport { createDerived } from \"svelte-signals\";\n\nconst [count, setCount] = createState(0);\nconst double = createDerived(() => count() * 2);\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[4086, 133],
		[4093, 47],
		[4100, 26],
		[4107, 17],
		[4114, 7],
		[4121, 7],
		[4128, 3],
		[4135, 7]
	],
	"esm": true,
	"cjs": false
}
