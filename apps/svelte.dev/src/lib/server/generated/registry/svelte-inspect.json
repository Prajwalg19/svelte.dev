{
	"name": "svelte-inspect",
	"description": "Inspects Svelte objects within development environments.",
	"repo_url": "https://github.com/trbrc/svelte-inspect",
	"authors": ["trbrc"],
	"homepage": "https://github.com/trbrc/svelte-inspect",
	"downloads": 8,
	"updated": "2022-01-20T17:11:35.757Z",
	"tags": ["tooling"],
	"github_stars": 35,
	"typescript": false,
	"version": "0.1.3",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "0.1.3",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-inspect",
				"version": "0.1.3",
				"size": 42587
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Svelte Inspect\n\nLive & interactive object inspector for [Svelte](https://svelte.dev), inspired by DevTools.\n\n```console\nnpm install --save svelte-inspect\n```\n\nTry the example in the [svelte.dev REPL](https://svelte.dev/repl/eb3b3ae5639544d78d7363e126b29896). Use mouse and keyboard to inspect the todos.\n\n```html\n<script>\n  import Todos from './Todos.svelte';\n\n  // You have some data you want to inspect\n  let todos = [\n    {done: false, text: 'Import svelte-inspect'},\n    {done: false, text: 'Pass any number of values to it'},\n    {done: false, text: 'See them update live'}\n  ];\n\n  // Simply import svelte-inspect…\n  import Inspect from 'svelte-inspect';\n</script>\n\n<!-- …and add an inspector anywhere on your page -->\n<Inspect {todos} />\n\n<Todos bind:todos={todos} />\n```\n\n## Types\n\nSee [REPL demo of most of the types](https://svelte.dev/repl/06f3a93da3454c6982aa5a38c541a5b0). These types have special formatting:\n\n- Arrays (including TypedArrays)\n- Objects\n- Functions (including async functions)\n- Classes\n- Map and Set\n- RegExps\n- Dates\n- Booleans\n- undefined and null\n- Numbers (including BigInt)\n- Strings\n- Symbols\n- Errors\n- HTML elements\n\nThere's support for enumerable and non-enumerable properties, symbol keys, `__proto__`, and getters (click to evaluate). It does not yet have any special support for e.g. iterators, promises.\n\n## Keyboard navigation\n\nYou can use your keyboard to move around in the object hierarchy.\n\nKeys | | Action\n:--- | :--- | :---\n<kbd>A</kbd>…<kbd>Z</kbd> <kbd>0</kbd>…<kbd>9</kbd> | Type anything | Jump using fuzzy matching\n<kbd>⇥</kbd> | Tab | Focus next\n<kbd>⇧</kbd><kbd>⇥</kbd> | Shift + Tab | Focus previous\n<kbd>⯇</kbd> | Left | Close or step out\n<kbd>⯈</kbd> | Right | Open or step in\n<kbd>⯅</kbd> | Up | Focus previous\n<kbd>⯆</kbd> | Down | Focus next\n<kbd>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</kbd> | Space | Toggle\n<kbd>↵</kbd> | Enter | Open & step in\n<kbd>esc</kbd> | Escape | Step out\n\n## API\n\n### `Inspect`\n\nCreate one inspector for every value passed in as a prop, with default colors.\n\n```html\n<script>\n  import Inspect from 'svelte-inspect';\n</script>\n\n<Inspect value={'foo'} {value2} {...etc} />\n```\n\n### `Inspect.Value`\n\nInspect a single `value`, without showing the name of the prop. Also takes an optional `depth` directly as a prop.\n\n```html\n<script>\n  import Inspect from 'svelte-inspect';\n\n  /* Or as a named import:\n  import {Value} from 'svelte-inspect';\n  */\n</script>\n\n<Inspect.Value value={'foo'} depth={2} />\n```\n\n### `Inspect.Inverted`\n\nInspector with color palette suitable for dark backgrounds.\n\n```html\n<script>\n  import Inspect from 'svelte-inspect';\n\n  /* Or as a named import:\n  import {Inverted} from 'svelte-inspect';\n  */\n</script>\n\n<Inspect.Inverted value={'foo'} {value2} {...etc} />\n```\n\n### `Inspect[0-10]`\n\nInspectors pre-configured with `{depth: 0-10}`.\n\n```html\n<script>\n  import Inspect from 'svelte-inspect';\n</script>\n\n<Inspect[2] {document} />\n```\n\n### `Inspect.configure(configuration)`\n\nCreate an inspect component with custom configuration.\n\n```html\n<script context=\"module\">\n  import Inspect from 'svelte-inspect';\n  const CustomInspect = Inspect.configure({/* configuration */});\n\n  /* Or as a named import:\n  import {configure} from 'svelte-inspect';\n  const CustomInspect = configure({/* configuration */});\n  */\n</script>\n\n<CustomInspect value={'foo'} />\n```\n\nNote the use of [`context=\"module\"`](https://svelte.dev/docs#script_context_module), which is required for the Svelte compiler to understand that `CustomInspector` can be used in the template.\n\nThe config is WIP. There are currently two options:\n\n#### `{depth: number}`\n\nSet how many levels of the object hierarchy should start in the open state. Defaults to `1`.\n\n```html\n<script context=\"module\">\n  import Inspect from 'svelte-inspect';\n  const CustomInspect = Inspect.configure({depth: 2});\n  const object = {\n    foo: {\n      array: [1, 2, 3]\n    }\n  };\n</script>\n\n<!-- 2 levels deep – will show `foo` and `array` but not `[1, 2, 3]` -->\n<CustomInspect {object} />\n```\n\nNon-enumerable properties will not be opened.\n\n#### `{palette: {...colors}}`\n\nCreate a component with a customized color palette. Values are any valid CSS color, keys are `red`, `blue`, `green`, `purple`, `orange`, `yellow`, `brown`, `pink`, `gray`, `black`, `white` and `selection` (note that not all of these colors are currently used).\n\n*(work in progress; expect to change)*\n\n```html\n<script context=\"module\">\n  import Inspect from 'svelte-inspect';\n  const CustomInspect = Inspect.configure({\n    palette: {\n      selection: 'hotpink',\n      blue: 'dodgerblue'\n    }\n  });\n</script>\n```\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 147],
		[3596, 188],
		[3603, 85],
		[3610, 156],
		[3617, 431],
		[3624, 391],
		[3631, 276],
		[3638, 186],
		[3645, 223],
		[3652, 187],
		[3659, 41],
		[3666, 129],
		[3673, 191],
		[3680, 426],
		[3687, 283],
		[3694, 252],
		[3701, 162],
		[3708, 351],
		[3715, 163],
		[3722, 159],
		[3729, 99],
		[3736, 128],
		[3743, 193],
		[3750, 229],
		[3757, 252],
		[3764, 226],
		[3771, 229],
		[3778, 158],
		[3785, 162],
		[3792, 214],
		[3799, 187],
		[3806, 187],
		[3813, 155],
		[3820, 423],
		[3827, 339],
		[3834, 387],
		[3841, 219],
		[3848, 221],
		[3855, 130],
		[3862, 241],
		[3869, 162],
		[3876, 155],
		[3883, 251],
		[3890, 773],
		[3897, 344],
		[3904, 227],
		[3911, 345],
		[3918, 244],
		[3925, 408],
		[3932, 223],
		[3939, 385],
		[3946, 35],
		[3953, 3],
		[3960, 19],
		[3967, 48],
		[3974, 5],
		[3981, 2],
		[3988, 3],
		[3995, 56],
		[4002, 17],
		[4009, 33],
		[4023, 15],
		[4030, 37],
		[4037, 23],
		[4044, 10],
		[4051, 9],
		[4058, 8],
		[4065, 39],
		[4072, 5],
		[4079, 34],
		[4086, 1],
		[4093, 42],
		[4100, 8],
		[4107, 6],
		[4114, 8],
		[4121, 10],
		[4128, 6]
	],
	"esm": false,
	"cjs": true
}
