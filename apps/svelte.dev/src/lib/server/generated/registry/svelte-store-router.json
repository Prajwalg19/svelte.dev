{
	"name": "svelte-store-router",
	"description": "Provides store-based routing for Svelte applications.",
	"repo_url": "https://github.com/zyxd/svelte-store-router",
	"authors": ["zyxd"],
	"homepage": "https://github.com/zyxd/svelte-store-router#readme",
	"downloads": 63,
	"updated": "2021-12-13T15:08:08.723Z",
	"tags": ["router"],
	"github_stars": 91,
	"typescript": true,
	"version": "2.0.10",
	"svelte_range": "^3.0.0",
	"last_rune_check_version": "2.0.10",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-store-router",
				"version": "2.0.10",
				"size": 18941
			},
			{
				"name": "rambda",
				"version": "6.9.0",
				"size": 793831
			},
			{
				"name": "regexparam",
				"version": "2.0.2",
				"size": 13840
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2]
		],
		"circular": []
	},
	"readme": "# Store-based router for Svelte | [Demo](https://svelte-store-router-demo.vercel.app)\n\n#### Inspired by the [svelte-pathfinder](https://github.com/PaulMaly/svelte-pathfinder) by [PaulMaly](https://github.com/PaulMaly)\n\nA completely different approach of routing. State-based router suggests that routing is just another global state and History API changes are just an optional side-effects of this state.\n\n#### [How it works](https://www.youtube.com/watch?v=kf5zccSyEso) (russian language)\n\n## Features\n\n- Just another global state;\n- It doesn't impose any restrictions on how to apply this state to the application;\n- Manipulate different parts of a state (`path` / `query` / `fragment`) separately;\n- Automatic parsing of the `query` and `fragment` parameters;\n- Components for `path` matching and parameters extracting (using [regexparam](https://github.com/lukeed/regexparam));\n- Configurable delay of `History` changing;\n- Converting `query` and `fragment` string values to JavaScript types;\n- Cleaning `query` and `fragment` from empty values like a `null` / `undefined` / `''`;\n- Automatically handling `<a>` navigation what allow updating the route state without reloading the page;\n- Works fine with SSR.\n\n## Install\n\n```bash\nnpm i svelte-store-router --save-dev\n```\n\n## Usage\n\nCreate a route store in your `stores.js`:\n```javascript\nimport { createRouteStore } from 'svelte-store-router'\n\nexport const route = createRouteStore({\n  delay: 300,\n  queryClean: true,\n  fragmentClean: true\n})\n```\n\nNow you can access it as usual store.\n```svelte\n<script>\n  import { route } from './stores.js'\n</script>\n\nFull route:   {$route}\nPath:         {$route.path}\nQuery:        {$route.query}\nFragment:     {$route.fragment}\n```\n\nYou can change it.\n```svelte\n<button on:click={() => $route.path = '/'}>home page</button>\n<button on:click={() => $route.path = '/users'}>user list</button>\n\n<button on:click={() => $route.query.sort = 'name'}>sort by name</button>\n<button on:click={() => $route.query.team = 'svelte'}>filter by team</button>\n\n<button on:click={() => $route.fragment.modal = true}>open modal window</button>\n<button on:click={() => $route.fragment.scroll = 5}>skip first 50 users</button>\n```\n\nYou can bind store values.\n```svelte\n<textarea placeholder=\"fragment.search\" bind:value={$route.fragment.search}/>\n```\n\nYou can navigate to the full path you want by assigning a string value to the store or by calling the store's `goto` function (without $). Don't forget that the route must be relative to the base path. So calling `goto('https://google.com')` with `base: '/test'` redirects you to `/test/https://google.com`.\n```svelte\n<button on:click={() => $route = '/users?orderBy=karma&limit=10'}>show top 10 users</button>\n<button on:click={() => route.goto('/users?orderBy=karma&limit=10')}>show top 10 users</button>\n```\n\nYou can match path pattern and parametrize it ([regexparam](https://github.com/lukeed/regexparam)).\n```svelte\n<script>\n  import { Match } from 'svelte-store-router'\n  import { route } from './stores.js'\n</script>\n\n<Match route={$route} pattern=\"/users\">\n  User list\n</Match>\n<Match route={$route} pattern=\"/users/:id\" let:params={{ id }}>\n  User {id} profile\n</Match>\n```\n\nYou can show only first matching path.\n```svelte\n<script>\n  import { Match, Matcher } from 'svelte-store-router'\n  import { route } from './stores.js'\n</script>\n\n<Matcher>\n  <Match route={$route} pattern=\"/users\">\n    User list\n  </Match>\n  <Match route={$route} pattern=\"/users/:id\" let:params={{ id }}>\n    User {id} profile\n  </Match>\n  <Match route={$route}>\n    Page not found\n  </Match>\n  <Match route={$route}>\n    This content will never be displayed, because\n    the previous <Match> handle all possible routes\n  </Match>\n</Matcher>\n```\n\nYou can use nested match components using the `loose` parameter.\n```svelte\n<script>\n  import { Match, Matcher } from 'svelte-store-router'\n  import { route } from './stores.js'\n</script>\n\n<Matcher>\n  <Match route={$route} pattern=\"/users\" loose>\n    Begin of users template\n    <Matcher>\n      <Match route={$route} pattern=\"/users\">\n        Users list\n      </Match>\n      <Match route={$route} pattern=\"/users/:id\" let:params={{ id }}>\n        User {id} profile\n      </Match>\n    </Matcher>\n    End of users template\n  </Match>\n  <Match route={$route}>\n    Page not found\n  </Match>\n</Matcher>\n```\n\nOr you can do it all above manually using `match` function instead of components.\n```svelte\n<script>\n  import { match } from 'svelte-store-router'\n  import { route } from './stores'\n\n  let params\n</script>\n\n<!--\n  It is recommended to first check if the route matches the base path of application by \n  calling `match($route)`. Not necessary if the application will always be in the root path.\n-->\n{#if match($route)}\n  {#if match($route, '/users', true)}\n    Begin of users template\n    \n    {#if params = match($route, '/users/:id')}\n      User {params.id}\n    {:else if params = match($route, '/users/:id/friends')}\n      User {params.id} friends\n    {/if}\n\n    End of users template\n  {:else}\n    Page not found\n  {/if}\n{/if}\n```\n\n## Options\n\n#### base [String]\nBase path of application. Routes and links which not match under this path will not be handled. `''` by default.\n\n#### delay [Number]\nSets delay in milliseconds before `history.pushstate` was called. This prevents a large number of items from appearing in History state. For example, it could be useful when the parameter of `query` or `fragment` is binded with the `search` input field. `0` by default.\n\n#### queryParse, fragmentParse [Boolean]\nEnables `query` and `fragment` string to objects conversion. `true` by default.\n\n#### queryTyped, fragmentTyped [Boolean]\nConverts query and fragment string values to JavaScript types. `true` by default. For example strings will be converted from -> to:\n```\n\"1\"         -> 1\n\"0.123\"     -> 0.123\n\"true\"      -> true\n\"null\"      -> null\n\"undefined\" -> undefined\n\"01234\"     -> 1234\n\"a1234\"     -> \"a1234\"\n```\n\n#### queryClean, fragmentClean [Boolean]\nClean query and fragment from empty (`null` / `undefined` / `\"\"`) values. Might be useful to avoid `/path?page=undefined&search=`. `false` by default.\n\n#### queryShortBoolean, fragmentShortBoolean [Boolean]\nAutomatically shortens the parameter string for boolean values, e.g. `a=true&b=false&c=true` into `a&c`. So for parameters with `true` only the parameter name will be shown, and with `false` they will be hidden completely. `false` by default.\n\n#### sideEffect [Boolean]\nControls side effect of route changing which push items to History. `true` by default in browser, always `false` on server side.\n\n#### handleNavigation [Boolean / String]\nToggles a navigation handler that automatically intercepts `<a>` clicks, updating the route state without reloading the page. Adding a `rel=\"external\"` attribute to a `<a>` will trigger a usual browser navigation when the link is clicked. In addition to boolean, can contain a string with CSS selectors (e.g. `\".foo, #bar, form\"`) for elements only within which `<a>` clicks should be handled. `true` by default.\n\n#### autoClearParams [Boolean]\nThis option toggles automatically clear the `query` and `fragment` when the `path` is changed. `false` by default.",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 122],
		[3603, 122],
		[3610, 50],
		[3617, 65],
		[3624, 53],
		[3631, 29],
		[3638, 23],
		[3645, 20],
		[3652, 17],
		[3659, 31],
		[3666, 67],
		[3673, 29],
		[3680, 40],
		[3687, 79],
		[3694, 130],
		[3701, 54],
		[3708, 44],
		[3715, 53],
		[3722, 31],
		[3729, 43],
		[3736, 2],
		[3743, 3],
		[3750, 7],
		[3757, 18],
		[3764, 8],
		[3771, 32],
		[3778, 21],
		[3785, 25],
		[3792, 3],
		[3799, 3],
		[3806, 2],
		[3813, 4],
		[3820, 2],
		[3827, 5],
		[3834, 43],
		[3841, 6],
		[3848, 4],
		[3855, 199],
		[3862, 40],
		[3869, 4],
		[3876, 6],
		[3883, 13],
		[3890, 90],
		[3897, 43],
		[3904, 2],
		[3911, 60],
		[3918, 8],
		[3925, 15],
		[3932, 9],
		[3939, 7],
		[3946, 9],
		[3953, 12],
		[3960, 7],
		[3967, 17],
		[3974, 6],
		[3981, 12],
		[3988, 7],
		[3995, 26],
		[4002, 9],
		[4009, 6],
		[4016, 5],
		[4023, 3],
		[4030, 44],
		[4037, 45],
		[4044, 25],
		[4051, 3],
		[4058, 53],
		[4065, 2],
		[4072, 2],
		[4093, 10],
		[4100, 44],
		[4107, 20],
		[4114, 63],
		[4121, 116],
		[4128, 17],
		[4135, 12]
	],
	"esm": true,
	"cjs": false
}
