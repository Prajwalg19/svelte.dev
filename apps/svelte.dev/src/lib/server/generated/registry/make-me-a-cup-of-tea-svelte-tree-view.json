{
	"name": "@make-me-a-cup-of-tea/svelte-tree-view",
	"description": "Display JSON objects in customizable tree-view.",
	"repo_url": "https://github.com/TeemuKoivisto/svelte-tree-view",
	"authors": ["tekk"],
	"homepage": "https://github.com/TeemuKoivisto/svelte-tree-view",
	"downloads": 8,
	"updated": "2022-09-12T16:13:37.249Z",
	"tags": ["ui"],
	"github_stars": 24,
	"typescript": true,
	"version": "1.4.2",
	"svelte_range": "^3.50.1",
	"kit_range": "^1.0.0-next.480",
	"last_rune_check_version": "1.4.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@make-me-a-cup-of-tea/svelte-tree-view",
				"version": "1.4.2",
				"size": 408132
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# [svelte-tree-view](https://github.com/TeemuKoivisto/svelte-tree-view) [![version](https://img.shields.io/npm/v/svelte-tree-view?style=flat-square)](https://www.npmjs.com/package/svelte-tree-view) [![package minified size](https://img.shields.io/bundlephobia/min/svelte-tree-view?style=flat-square&color=important)](https://bundlephobia.com/result?p=svelte-tree-view) [![package size](https://img.shields.io/bundlephobia/minzip/svelte-tree-view?style=flat-square)](https://bundlephobia.com/result?p=svelte-tree-view)\n\nLibrary to show Javascript objects in a nice tree layout. It's written in Svelte but since it compiles to pure JS it can be used anywhere (although to customize the rendered nodes you must Svelte).\n\n`npm i svelte-tree-view`\n\n### [Demo site](https://teemukoivisto.github.io/svelte-tree-view/)\n\n### [Svelte REPL](https://svelte.dev/repl/4f8c82da5eac4e868ff40193ee84e84a?version=3.44.1)\n\n## How to use\n\nAt one point there were some issues packaging this library with SvelteKit, partly because it's written in TypeScript. Now the only extra config that I'm aware you must add is for ensuring you import the library using \"svelte\" entry point, not \"main\" or \"module\" eg:\n\n```ts\nimport nodeResolve from 'rollup-plugin-node-resolve'\n...\n\nexport default {\n  ...\n  plugins: [\n    nodeResolve({\n      browser: true,\n      mainFields: ['svelte', 'module', 'browser', 'main'],\n      dedupe: ['svelte']\n    }),\n  ],\n  ...\n}\n\n```\n\nTo use it:\n\n```tsx\nimport TreeView from 'svelte-tree-view'\n\n...\n\n<TreeView\n  data={selectedEntry.contentDiff}\n  showLogButton\n  showCopyButton\n  valueComponent={DiffValue}\n  recursionOpts={{\n    maxDepth: 16,\n    mapChildren: mapDocDeltaChildren,\n    shouldExpandNode: () => true\n  }}\n/>\n```\n\nOr if you are not using Svelte (NOTE: if you're using TS you must install svelte as a devDependency for the types):\n\n```ts\nimport { TreeView } from 'svelte-tree-view'\nimport 'svelte-tree-view/dist/index.css'\n\nconst treeView = new TreeView({\n  target: document.querySelector('#mount-point') as HTMLElement,\n  props: {\n    data: {\n      a: [1, 2, 3],\n      b: new Map([\n        ['c', { d: null }],\n        ['e', { f: [9, 8, 7] }],\n      ]),\n    },\n    recursionOpts: {\n      maxDepth: 4,\n    },\n  },\n})\n```\n\nTo override default styles I suggest using child or element selector to get enough specificity:\n\n```svelte\n<div class=\"wrapper\">\n  <TreeView />\n</div>\n\n<style>\n  .wrapper > :global(.svelte-tree-view) {\n    ...;\n  }\n  /* OR */\n  :global(ul.svelte-tree-view) {\n    ...;\n  }\n</style>\n```\n\n## API\n\nThe full typings as copied from the source are:\n\n```ts\nexport type ValueType =\n  | 'array'\n  | 'map'\n  | 'set'\n  | 'date'\n  | 'object'\n  | 'function'\n  | 'string'\n  | 'number'\n  | 'bigint'\n  | 'boolean'\n  | 'symbol'\n  | 'null'\n  | 'undefined'\n\nexport interface TreeNode<T = any> {\n  id: string // ID generated from the path to this node eg \"[0,1,2]\"\n  index: number // Index of this node in the parent object as its values are iterated\n  key: string // Key of this node eg \"1\" for an array key or \"foo\" for an object\n  value: T // The value mapped to this key\n  depth: number\n  collapsed: boolean\n  type: ValueType\n  path: number[]\n  parentId: string | null\n  // Circularity is checked by object identity to prevent recursing the same values again\n  circularOfId: string | null\n  children: TreeNode[]\n}\n\nexport interface Base16Theme {\n  scheme?: string\n  author?: string\n  base00: string // Default Background\n  base01: string // Lighter Background (Used for status bars, line number and folding marks)\n  base02: string // Selection Background\n  base03: string // Comments, Invisibles, Line Highlighting\n  base04: string // Dark Foreground (Used for status bars)\n  base05: string // Default Foreground, Caret, Delimiters, Operators\n  base06: string // Light Foreground (Not often used)\n  base07: string // Light Background (Not often used)\n  base08: string // Variables, XML Tags, Markup Link Text, Markup Lists, Diff Deleted\n  base09: string // Integers, Boolean, Constants, XML Attributes, Markup Link Url\n  base0A: string // Classes, Markup Bold, Search Text Background\n  base0B: string // Strings, Inherited Class, Markup Code, Diff Inserted\n  base0C: string // Support, Regular Expressions, Escape Characters, Markup Quotes\n  base0D: string // Functions, Methods, Attribute IDs, Headings\n  base0E: string // Keywords, Storage, Selector, Markup Italic, Diff Changed\n  base0F: string // Deprecated, Opening/Closing Embedded Language Tags, e.g. <?php ?>\n}\n\n// As described in https://stackoverflow.com/questions/67697298/svelte-components-as-object-properties/67737182#67737182\nexport type ValueComponent = new (...args: any) => SvelteComponentTyped<{\n  node: TreeNode\n  defaultFormatter?: (val: any) => string | undefined\n}>\n\nexport interface TreeViewProps {\n  data: unknown // Data can be basically any non-primitive value\n  class?: string // Top node has 'svelte-tree-view' class by default\n  theme?: Base16Theme\n  showLogButton?: boolean\n  showCopyButton?: boolean\n  valueComponent?: ValueComponent // The Svelte component to replace the default value-as-string presentation\n  recursionOpts?: TreeRecursionOpts\n  // For custom formatting of the value string. Returning undefined will pass the value to the default formatter\n  valueFormatter?: (val: any, n: TreeNode) => string | undefined\n}\n\nexport interface TreeRecursionOpts {\n  maxDepth?: number // The default maxDepth is 16\n  // Quick and dirty way to prevent recursing certain object keys instead of overriding shouldExpandNode\n  omitKeys?: string[]\n  stopCircularRecursion?: boolean // Stops recursing objects already recursed\n  isCircularNode?: (n: TreeNode, iteratedValues: Map<any, TreeNode>) => boolean // For custom circularity detection magic\n  shouldExpandNode?: (n: TreeNode) => boolean // Will auto-expand or collapse values as data is provided\n  mapChildren?: (val: any, type: ValueType, parent: TreeNode) => [string, any][] | undefined // For customizing the created key-value pairs\n}\n\nexport class TreeView extends SvelteComponentTyped<TreeViewProps> {}\nexport default TreeView\n```\n\n## Theming\n\nThis library uses base16 theming, similar to react-json-tree. So basically instead of theming each type (string, number, undefined etc) separately, you use the same color for all similar values. Here's a repo that might explain it better https://github.com/chriskempson/base16\n\nThe example theme is the monokai theme from react-json-tree with changed background color. You can define your own theme or use one from for example here https://github.com/reduxjs/redux-devtools/tree/75322b15ee7ba03fddf10ac3399881e302848874/src/react/themes\n\nTo use a theme, you can either provide an object or set CSS variables (recommended).\n\nSo either\n\n```tsx\nconst theme = {\n  scheme: 'google',\n  author: 'seth wright (http://sethawright.com)',\n  base00: '#1d1f21',\n  base01: '#282a2e',\n  base02: '#373b41',\n  base03: '#969896',\n  base04: '#b4b7b4',\n  base05: '#c5c8c6',\n  base06: '#e0e0e0',\n  base07: '#ffffff',\n  base08: '#CC342B',\n  base09: '#F96A38',\n  base0A: '#FBA922',\n  base0B: '#198844',\n  base0C: '#3971ED',\n  base0D: '#3971ED',\n  base0E: '#A36AC7',\n  base0F: '#3971ED'\n}\n\n<div class=\"wrapper\">\n  <TreeView theme={theme} />\n</div>\n```\n\nor\n\n```css\n/* This is the example monokai theme */\n.wrapper {\n  --tree-view-base00: #363755;\n  --tree-view-base01: #604d49;\n  --tree-view-base02: #6d5a55;\n  --tree-view-base03: #d1929b;\n  --tree-view-base04: #b79f8d;\n  --tree-view-base05: #f9f8f2;\n  --tree-view-base06: #f7f4f1;\n  --tree-view-base07: #faf8f5;\n  --tree-view-base08: #fa3e7e;\n  --tree-view-base09: #fd993c;\n  --tree-view-base0A: #f6bf81;\n  --tree-view-base0B: #b8e248;\n  --tree-view-base0C: #b4efe4;\n  --tree-view-base0D: #85d9ef;\n  --tree-view-base0E: #be87ff;\n  --tree-view-base0F: #d6724c;\n}\n```\n\nworks.\n\n## Other\n\n[A little explanation](https://github.com/TeemuKoivisto/svelte-tree-view/blob/master/HOW.md) on the internal logic.\n\n## Caveats\n\nRendering very large trees is not fast. The same happens with say react-json-tree but I assume that by using some clever hacks you _could_ make it faster. Like VSCode fast. In general, it seems the use of recursive components is non-optimal regardless of the framework.\n\n## How to develop locally\n\nYou must have yarn installed globally.\n\n1. `yarn`\n2. `yarn start`\n\nThis should start the example-app at http://localhost:3000 that hot-reloads changes to the library inside `core`.\n\nNOTE: Since I'm using `svelte-kit package` command to build the library it uses the `\"exports\"` of `package.json` to make importing the package from Svelte app as efficient as possible. However, in development I'm doing this trick of manually setting the exports to `\".\": \"./src/lib/index.ts\"` which enables the example-app to auto-import the changes without having to constantly package the app. It's a bit hackish but hey, it works really well and avoids having to use `package` in development completely!\n\n## Similar libraries\n\nWhile this library was basically written from scratch, its UI and API borrows from some existing libraries.\n\n- [react-json-tree](https://github.com/reduxjs/redux-devtools/tree/master/packages/react-json-tree)\n- [react-json-view](https://github.com/mac-s-g/react-json-view)\n- [svelte-json-tree](https://github.com/tanhauhau/svelte-json-tree)\n\n## Contributing\n\nPRs & issues are welcome!\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 7],
		[3603, 3],
		[3624, 1],
		[3631, 2],
		[3638, 1],
		[3645, 1],
		[3652, 1],
		[3659, 1],
		[3666, 3],
		[3673, 1],
		[3701, 1],
		[3722, 1],
		[3750, 1],
		[3771, 5],
		[3778, 1],
		[3799, 9],
		[3806, 2],
		[3820, 1],
		[3834, 1],
		[3841, 15],
		[3848, 1],
		[3855, 2],
		[3862, 8],
		[3876, 2],
		[3883, 2],
		[3890, 3],
		[3897, 4],
		[3918, 4],
		[3925, 1],
		[3932, 3],
		[3939, 1],
		[3946, 2],
		[3974, 1],
		[3995, 2],
		[4002, 1],
		[4016, 5],
		[4023, 2],
		[4030, 6],
		[4037, 2],
		[4044, 9],
		[4051, 2],
		[4058, 1],
		[4072, 1],
		[4093, 4],
		[4100, 7],
		[4114, 8],
		[4121, 13],
		[4128, 2]
	],
	"esm": true,
	"cjs": true
}
