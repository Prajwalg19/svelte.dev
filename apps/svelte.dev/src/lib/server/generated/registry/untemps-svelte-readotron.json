{
	"name": "@untemps/svelte-readotron",
	"description": "Displays estimated reading time for Svelte content, with scroll support.",
	"repo_url": "https://github.com/untemps/svelte-readotron",
	"authors": ["untemps"],
	"homepage": "https://svelte-readotron.vercel.app",
	"downloads": 20,
	"updated": "2023-10-03T20:32:49.401Z",
	"tags": ["miscellaneous"],
	"github_stars": 41,
	"typescript": true,
	"version": "2.0.0",
	"svelte_range": "^4.0.0",
	"kit_range": "^1.20.4",
	"last_rune_check_version": "2.0.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@untemps/svelte-readotron",
				"version": "2.0.0",
				"size": 25578
			},
			{
				"name": "@untemps/read-per-minute",
				"version": "2.1.0",
				"size": 7489
			},
			{
				"name": "@untemps/svelte-use-drop-outside",
				"version": "1.6.0",
				"size": 224216
			},
			{
				"name": "@untemps/dom-observer",
				"version": "2.0.0",
				"size": 76324
			},
			{
				"name": "@untemps/utils",
				"version": "2.6.0",
				"size": 20540
			},
			{
				"name": "@babel/runtime",
				"version": "7.27.1",
				"size": 246647
			},
			{
				"name": "svelte",
				"version": "3.49.0",
				"size": 7247697
			},
			{
				"name": "@untemps/svelte-use-tooltip",
				"version": "2.8.0",
				"size": 246967
			},
			{
				"name": "@untemps/utils",
				"version": "3.0.0",
				"size": 15728
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2],
			[2, 3],
			[2, 4],
			[4, 5],
			[2, 6],
			[0, 7],
			[7, 6],
			[7, 4],
			[7, 3],
			[0, 8]
		],
		"circular": []
	},
	"readme": "<p align=\"center\">\n    <img src=\"assets/svelte-readotron.png\" alt=\"svelte-readotron\" height=\"200\"/>\n</p>\n<p align=\"center\">\n    Svelte component to display an estimated reading time\n</p>\n\n---\n\n[![npm](https://img.shields.io/npm/v/@untemps/svelte-readotron?style=for-the-badge)](https://www.npmjs.com/package/@untemps/svelte-readotron)\n[![GitHub Workflow Status](https://img.shields.io/github/actions/workflow/status/untemps/svelte-readotron/index.yml?style=for-the-badge)](https://github.com/untemps/svelte-readotron/actions)\n[![Codecov](https://img.shields.io/codecov/c/github/untemps/svelte-readotron?style=for-the-badge)](https://codecov.io/gh/untemps/svelte-readotron)\n\n## Demo\n\n<p align=\"center\">\n    :red_circle:&nbsp;&nbsp;<big><a href=\"https://svelte-readotron.vercel.app\" target=\"_blank\" rel=\"noopener\">LIVE\n    DEMO</a></big>&nbsp;:red_circle:\n    <br/><br/>\n    <img src=\"assets/example.png\" alt=\"Example\" style=\"max-width: 100%\"/>\n</p>\n\n## Installation\n\n```bash\nyarn add @untemps/svelte-readotron\n```\n\n## Usage\n\n### Basic usage\n\n```html\n<script>\n\timport Readotron from '@untemps/svelte-readotron'\n</script>\n\n<main>\n\t<Readotron selector=\".text\" />\n\t<section class=\"text\">...</section>\n</main>\n```\n\n`selector` prop is mandatory as it points to which element contains the text content to parse.\nYou can utilize any selector supported by the Web API [querySelector](https://developer.mozilla.org/fr/docs/Web/API/Document/querySelector) function.  \nIf several elements match the selector, it only parses the text of the first element in the array.\n\nThe component will wait for the element to be present in the DOM before parsing its content. If the element is not found after 1000ms, an error is raised and displayed.  \nThis is achieved with the [@untemps/dom-observer](https://github.com/untemps/dom-observer) package.\n\n### Lang\n\n'lang' is an optional prop that designates the language of the text to parse. The component implements the [@untemps/read-per-minute](https://github.com/untemps/read-per-minute) underhand package which returns an estimation based on the _lang_ (language).  \nReading rates by _lang_ come from [\"How many words do we read per minute? A review and meta-analysis of reading rate\"](https://osf.io/4nv9f/) by Marc Brysbaert - Department of Experimental Psychology Ghent University\n\n| Lang    | Rate |\n| ------- | ---- |\n| default | 200  |\n| ar      | 181  |\n| zh      | 260  |\n| nl      | 228  |\n| en      | 236  |\n| fi      | 195  |\n| fr      | 214  |\n| de      | 260  |\n| he      | 224  |\n| it      | 285  |\n| ko      | 226  |\n| es      | 278  |\n| sv      | 218  |\n\nIf a lang is not defined or the provided lang is not listed, the **default** value (200) will be applied.\n\n#### Example\n\n```html\n<script>\n\timport Readotron from '@untemps/svelte-readotron'\n</script>\n\n<main>\n\t<Readotron selector=\".text\" lang=\"en\" />\n\t<section class=\"text\">...</section>\n</main>\n```\n\n### Template\n\nYou can customize the Readotron display by using the `template` prop.\n\n-   A template can be a string with one or more tokens delimited with `%`\n\n#### Example\n\n```html\n<script>\n\timport Readotron from '@untemps/svelte-readotron'\n</script>\n\n<main>\n\t<Readotron selector=\".text\" template=\"Reading Time: %time% minutes (%words% words)\" />\n\t<section class=\"text\">...</section>\n</main>\n```\n\n-   A template can be a function with `time` and `words` as arguments.  \n    The function should return a template literal with the markup to display using optionally arguments as placeholders. But it may return any displayable type as well.\n\n> :warning: The string will be parsed with the `{@html}` expression: **Be very careful with the content you pass or allow to pass in to this prop!**\n\n#### Example\n\n```html\n<script>\n    import Readotron from '@untemps/svelte-readotron'\n</script>\n\n<main>\n    <Readotron selector=\".text\" template={(time, words) => `<Icon name='clock'> <strong>Reading Time: ${time} minutes</strong> (${words} words)`}/>\n    <section class=\"text\">\n        ...\n    </section>\n</main>\n```\n\n#### Avalaible tokens/arguments\n\n| Token   | Description                         |\n| ------- | ----------------------------------- |\n| `time`  | Estimated reading time (in minutes) |\n| `words` | Number of words                     |\n\n### Scroll Support\n\nYou are able to track and update component values by opting in the `withScroll` flag.\nThis will change the `time` (remaining time to read) and `words` (number of remaining words) as the user scroll the document.\n\n> Note: There is no support for `element` scrolling so far, `document` only.\n\nThe component uses the [scrollProgress](https://github.com/jeremenichelli/scrollProgress) underhand package to track document scrolling.\n\n#### Example\n\n```html\n<script>\n\timport Readotron from '@untemps/svelte-readotron'\n</script>\n\n<main>\n\t<Readotron selector=\".text\" withScroll />\n\t<section class=\"text\">...</section>\n</main>\n```\n\n### Change Event\n\nIf you need to be notified whenever values change, you may attach a listener to the `change` event emitted by the component.\n\n---\n\n_Note: The change event will be dispatched only if the `withScroll` prop is set to `true` since this is the only use case that triggers the change event so far_\n\n---\n\nThe handler will be triggered for the first time during the mounting phase with the initial values.\n\n#### Handler Signature\n\nHere are the properties available inside the `event.detail` sent with the event:\n\n| Props      | Type   | Description                                   |\n| ---------- | ------ | --------------------------------------------- |\n| `time`     | number | Estimated remaining reading time (in minutes) |\n| `words`    | number | Number of remaining words                     |\n| `progress` | number | Ratio of progression (between 0 and 1)        |\n\n#### Example\n\n```html\n<script>\n    import Readotron from '@untemps/svelte-readotron'\n</script>\n\n<main>\n    <Readotron selector=\".text\" withScroll on:change={(event) => {\n        const {detail: {time, words, progress}} = event\n        console.log('Time:', time + ' minutes')\n        console.log('Words:', words + ' remaining words')\n        console.log('Progress:', progress * 100 + '%')\n    }}/>\n    <section class=\"text\">\n        ...\n    </section>\n</main>\n```\n\n#### Recipe\n\nThe event dispatching allows to animate a progress bar in sync with the reading status:\n\n```html\n<script>\n    import Readotron from '@untemps/svelte-readotron'\n\n    let readingProgress = 0\n</script>\n\n<main>\n    <Readotron selector=\".text\" withScroll on:change={(event) => {\n        readingProgress = event.detail.progress\n    }}/>\n    <section class=\"text\">\n        ...\n    </section>\n    <div class=\"progress-bar\" style=\"width: {readingProgress * 100}%\"></div>\n</main>\n\n<style>\n    .progress-bar {\n        background-color: #0075ff;\n        height: 20px;\n        position: fixed;\n        left: 0;\n        bottom: 0;\n    }\n</style>\n```\n\n### Slot\n\nAnother way to customize the display is to use the `<slot>` element.  \nIf a `<slot>` is passed in as Readotron child and correctly set (see Constraints below), it will be rendered instead of the default layout. This has precedence over the `template` prop.  \nThis allows to set a specific tag as parent if needed.\n\n#### Constraints:\n\nThe `<slot>` element has to be set with the prop `slot=\"content\"`\n\n#### Avalaible tokens\n\nLike `template`, tokens are passed back to the component to display dynamic values (see [Svelte API documentation](https://svelte.dev/docs#slot_let)):\n\n| Token   | Description                         |\n| ------- | ----------------------------------- |\n| `time`  | Estimated reading time (in minutes) |\n| `words` | Number of words                     |\n\n#### Example\n\n```html\n<script>\n\timport Readotron from '@untemps/svelte-readotron'\n</script>\n\n<main>\n\t<Readotron selector=\".text\">\n\t\t<span slot=\"content\" let:time let:words>{time} min ({words} words)</span>\n\t</Readotron>\n\t<section class=\"text\">...</section>\n</main>\n```\n\nPlease see the [Svelte API documentation](https://svelte.dev/docs#slot) to know more about the `<slot>` element.\n\n### Styles\n\nAll HTML attributes are automatically passed to the parent element of the component (`span`).  \nThat means you can query the `class` attribute to customize the style of the component.\n\n#### Example\n\n```html\n<script>\n\timport Readotron from '@untemps/svelte-readotron'\n</script>\n\n<main>\n\t<Readotron selector=\".text\" class=\"readotron\" />\n\t<section class=\"text\">...</section>\n</main>\n\n<style>\n\t.readotron {\n\t\tcolor: #0075ff;\n\t\tfont-weight: 600;\n\t}\n</style>\n```\n\nIf you use a `<slot>` element, as it will replace the original layout, you have to switch the class name from the `<Readotron>` element to the `<slot>` element.\n\n```html\n<script>\n\timport Readotron from '@untemps/svelte-readotron'\n</script>\n\n<main>\n\t<Readotron selector=\".text\">\n\t\t<span class=\"readotron\" slot=\"content\" let:time>{time} min</span>\n\t</Readotron>\n\t<section class=\"text\">...</section>\n</main>\n```\n\n### Error\n\nIf an error occurs during the parsing phase, the component catches and exposes it through an `error` variable which is displayed as is it by default. That means the error message uses the exact same styles as time value.\n\n<p align=\"center\">\n    <img src=\"assets/error-default.png\" alt=\"Default error display\" style=\"max-width: 100%\"/>\n</p>\n\nYou may want to customize this error message, so the component provides a `slot`, named `error`, which replaces the default display if passed in.\n\n<p align=\"center\">\n    <img src=\"assets/error-slot.png\" alt=\"Slot error display\" style=\"max-width: 100%\"/>\n</p>\n\n#### Example\n\n```html\n<script>\n\timport Readotron from '@untemps/svelte-readotron'\n</script>\n\n<main>\n\t<Readotron selector=\".text\">\n\t\t<span class=\"readotron\" slot=\"content\" let:time>{time} min</span>\n\t\t<span class=\"error\" slot=\"error\" let:error>Oops!</span>\n\t</Readotron>\n\t<section class=\"text\">...</section>\n</main>\n\n<style>\n\t.readotron {\n\t\tcolor: #0075ff;\n\t\tfont-weight: 600;\n\t}\n\n\t.error {\n\t\tcolor: #ff0000;\n\t\tfont-weight: 600;\n\t}\n</style>\n```\n\n#### Constraints:\n\nThe `<slot>` element has to be set with the prop `slot=\"error\"`\n\n#### Avalaible tokens\n\nError message is passed back to the component for display purpose if needed (see [Svelte API documentation](https://svelte.dev/docs#slot_let)):\n\n| Token   | Description            |\n| ------- | ---------------------- |\n| `error` | Original error message |\n\n### API\n\n| Props        | Type               | Default           | Description                                                                                                                                                     |\n| ------------ | ------------------ | ----------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `selector`   | string             | (required)        | Selector of the element which contains the content to parse. See [document.querySelector](https://developer.mozilla.org/fr/docs/Web/API/Document/querySelector) |\n| `lang`       | string             | 'en'              | Lang of the content [\"\"ar', 'zh', 'nl', 'en', 'fi', 'fr', 'de', 'he', 'it', 'ko', 'es', 'sv']                                                                   |\n| `template`   | string or function | '%time% min read' | Display template which contains dynamic tokens to be replaced by the parsed values. See [Template](#template)                                                   |\n| `withScroll` | boolean            | false             | Enable updates on scroll. If true, `time` and `words` values will reflect the document scroll position                                                          |\n\n### Events\n\n| Props    | Arguments  | Type   | Description                                                                                 |\n| -------- | ---------- | ------ | ------------------------------------------------------------------------------------------- |\n| `change` |            |        | **Dispatches whenever time and words have changed**                                         |\n|          | `time`     | number | Estimated remaining reading time (in minutes) Estimated remaining reading time (in minutes) |\n|          | `words`    | number | Number of remaining words                                                                   |\n|          | `progress` | number | Ratio of progression (between 0 and 1)                                                      |\n\n## Development\n\nThe component can be served for development purpose on `http://localhost:10001/` running:\n\n```\nyarn dev\n```\n\n## Contributing\n\nContributions are warmly welcomed:\n\n-   Fork the repository\n-   Create a feature branch\n-   Develop the feature AND write the tests (or write the tests AND develop the feature)\n-   Commit your changes\n    using [Angular Git Commit Guidelines](https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines)\n-   Submit a Pull Request\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 21],
		[3603, 55],
		[3610, 3],
		[3617, 6],
		[3624, 5],
		[3631, 11],
		[3638, 23],
		[3645, 8],
		[3652, 5],
		[3659, 8],
		[3666, 47],
		[3673, 2],
		[3680, 4],
		[3687, 9],
		[3694, 4],
		[3701, 5],
		[3708, 4],
		[3715, 25],
		[3722, 10],
		[3736, 4],
		[3743, 7],
		[3750, 7],
		[3757, 6],
		[3764, 12],
		[3771, 12],
		[3778, 7],
		[3785, 7],
		[3792, 1],
		[3799, 5],
		[3806, 18],
		[3813, 7],
		[3820, 5],
		[3827, 2],
		[3834, 7],
		[3841, 16],
		[3848, 8],
		[3855, 80],
		[3862, 80],
		[3869, 4],
		[3876, 3],
		[3883, 12],
		[3890, 8],
		[3897, 17],
		[3904, 7],
		[3911, 4],
		[3918, 5],
		[3925, 2],
		[3932, 5],
		[3939, 4],
		[3946, 1],
		[3953, 3],
		[3960, 4],
		[3967, 4],
		[3974, 4],
		[3981, 6],
		[3988, 5],
		[3995, 4],
		[4002, 5],
		[4016, 21],
		[4023, 6],
		[4030, 8],
		[4037, 31],
		[4044, 19],
		[4051, 25],
		[4058, 26],
		[4065, 3],
		[4072, 4],
		[4079, 3],
		[4086, 6],
		[4093, 30],
		[4100, 37],
		[4107, 3],
		[4114, 20],
		[4121, 16],
		[4128, 25],
		[4135, 11]
	]
}
