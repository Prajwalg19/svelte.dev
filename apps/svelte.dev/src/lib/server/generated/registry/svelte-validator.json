{
	"name": "svelte-validator",
	"description": "Offer form validation library for Svelte applications.",
	"repo_url": "https://github.com/Joe-noh/svelte-validator",
	"authors": ["joe-noh"],
	"homepage": "https://github.com/Joe-noh/svelte-validator#readme",
	"downloads": 10,
	"updated": "2020-01-26T14:24:28.336Z",
	"tags": ["miscellaneous"],
	"github_stars": 2,
	"typescript": false,
	"version": "0.3.0",
	"svelte_range": ">= 3.0.0",
	"last_rune_check_version": "0.3.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-validator",
				"version": "0.3.0",
				"size": 12238
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-validator\n\n## Install\n\nThis is WIP project. Use at your own responsibility!\n\n```\nnpm i -S svelte-validator\n```\n\n## Usage\n\n```html\n<script>\n  import svelteValidator, { required, minLength, equal, not } from 'svelte-validator'\n\n  const [valueStore, errorStore] = svelteValidator.create({\n    initial: '',\n    rules: [\n      required({ message: 'Cannot be blank!' }),\n      minLength(3, { message: 'Should be longer than 3.' }),\n      not(equal(10, { message: 'Should not equal to 10.' })),\n    ]\n  })\n\n  const errors = svelteValidator.deriveErrors([errorStores])\n\n  async function submit(event) {\n    await svelteValidator.validateAll([valueStore]) // activate all value stores and call `tick()`\n\n    if ($errors.length === 0) {\n      // do submit!\n    }\n  }\n</script>\n\n<form>\n  <input bind:value=\"{$valueStore}\">\n  {#if 'required' in $errorStore}\n    <span>{$errorStore.required.message}</span>\n  {/if}\n  {#if 'minLength' in $errorStore}\n    <span>{$errorStore.minLength.message}</span>\n  {/if}\n  {#if 'notEqual' in $errorStore}\n    <span>{$errorStore.notEqual.message}</span>\n  {/if}\n\n  <button type=\"submit\" disabled=\"{$errors.length > 0}\" on:click=\"{submit}\">Submit</button>\n</form>\n```\n\n### `svelteValidator.create` Options\n\n#### `rules`\n\nAn array of validators.\n\n#### `initial`\n\nInitial value of `valueStore`.\n\n#### `immediate`\n\nIf `false`, validation does not run until calling `valueStore.activate()`. Default `true`.\nFor example this can be used to prevent from displaying errors until first blur event occurs.\n\n```html\n<input type=\"text\" on:blur=\"{valueStore.activate}\">\n```\n\n### Builtin Validators\n\n- `required(error)`\n- `equal(value, error)`\n- `minValue(min, error)`\n- `maxValue(max, error)`\n- `betweenValue([min, max], error)`\n- `minLength(length, error)`\n- `maxLength(length, error)`\n- `betweenLength([min, max], error)`\n- `format(regex, error)`\n- `not(validator)`\n\n#### `error` argument\n\nArbitrary error value.\n\n```javascript\nconst [valueStore, errorStore] = svelteValidator.create({\n  initial: '',\n  rules: [\n    required({ foo: 'bar' }),\n  ]\n})\n\n$errorStore.required.foo // === 'bar'\n```\n\n### Custom Rule\n\nYou can implement your own validation rule. It should be an object which has `name`, `isValid` and `error` properties.\n\n```javascript\nconst myRule = {\n  name: 'myRule',\n  isValid: (value) => {\n    // true or false\n  },\n  error: { message: '...', color: 'red' }\n}\n\nconst [valueStore, errorStore] = svelteValidator.create({ rules: [myRule] })\n// $errorStore.myRule appears when value violates the rule.\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 22],
		[3603, 49],
		[3610, 33],
		[3617, 20],
		[3624, 7],
		[3631, 7],
		[3638, 5],
		[3645, 24],
		[3652, 11],
		[3659, 31],
		[3666, 29],
		[3673, 33],
		[3680, 11],
		[3687, 22],
		[3694, 25],
		[3701, 18],
		[3708, 28],
		[3715, 26],
		[3722, 25],
		[3729, 51],
		[3736, 24],
		[3743, 17],
		[3750, 16],
		[3757, 12],
		[3764, 37],
		[3771, 28],
		[3778, 14],
		[3785, 36],
		[3792, 16],
		[3799, 7],
		[3806, 6],
		[3813, 28],
		[3820, 32],
		[3827, 41],
		[3834, 52],
		[3841, 20],
		[3848, 36],
		[3855, 18],
		[3862, 42],
		[3869, 18],
		[3876, 21],
		[3883, 9],
		[3890, 17],
		[3897, 26],
		[3904, 42],
		[3911, 27],
		[3918, 11],
		[3925, 17],
		[3932, 7],
		[3939, 6],
		[3946, 12],
		[3953, 11],
		[3960, 15],
		[3967, 4],
		[3974, 5],
		[3981, 13],
		[3988, 4],
		[3995, 4],
		[4009, 1],
		[4016, 6],
		[4023, 3],
		[4030, 9],
		[4037, 14],
		[4044, 5],
		[4051, 5],
		[4058, 4],
		[4065, 2],
		[4093, 11],
		[4100, 7],
		[4107, 2],
		[4114, 10],
		[4121, 20],
		[4128, 7],
		[4135, 5]
	],
	"esm": false,
	"cjs": true
}
