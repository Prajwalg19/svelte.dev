{
	"name": "svelte-grid-extended",
	"description": "Create draggable and resizable grid layouts for Svelte.",
	"repo_url": "https://github.com/cuire/svelte-grid-extended",
	"authors": ["cuire"],
	"homepage": "https://github.com/cuire/svelte-grid-extended#readme",
	"downloads": 793,
	"updated": "2024-06-01T06:55:58.810Z",
	"tags": ["ui"],
	"github_stars": 103,
	"typescript": true,
	"version": "1.2.1",
	"svelte_range": "^4.0.0",
	"kit_range": "^2.0.0",
	"last_rune_check_version": "1.2.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-grid-extended",
				"version": "1.2.1",
				"size": 57934
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-grid-extended üçæ\n\n[![npm version](https://badge.fury.io/js/svelte-grid-extended.svg)](https://badge.fury.io/js/svelte-grid-extended)\n\n<!-- image at .github/images/santa.gif -->\n<img src=\".github/images/santa.gif\" width=\"100%\" />\n\n## Description\n\nSvelte-Grid-Extended is a draggable, resizable ~~and responsive~~ grid layout. The package is created as extended verison of [svelte-grid](https://github.com/vaheqelyan/svelte-grid).\n\n## Installation\n\nWith NPM:\n\n```sh\nnpm install svelte-grid-extended\n```\n\nWith Yarn:\n\n```shPackage currently in alpha, please consider that it **will** be changed in the future\nyarn add svelte-grid-extended\n```\n\nWith pnpm:\n\n```sh\npnpm add svelte-grid-extended\n```\n\n### Table of Contents\n\n- [Description](#description)\n- [Installation](#installation)\n- [Table of Contents](#table-of-contents)\n- [Usage](#usage)\n- [Basic](#basic)\n- [Static grid](#static-grid)\n- [Grid without bounds](#grid-without-bounds)\n- [Styling](#styling)\n- [Disable interactions](#disable-interactions)\n- [Collision Behavior](#collision-behavior)\n  - [None](#none)\n  - [Push](#push)\n  - [Compress](#compress)\n- [Custom move/resize handle](#custom-moveresize-handle)\n- [Two way binding](#two-way-binding)\n- [API Documentation](#api-documentation)\n- [Grid props](#grid-props)\n- [GridItem props](#griditem-props)\n- [Style related props:](#style-related-props)\n- [Events](#events)\n- [Grid Controller](#grid-controller)\n- [Methods](#methods)\n  - [getFirstAvailablePosition(w, h)](#getfirstavailablepositionw-h)\n  - [Example](#example)\n- [üìú License](#-license)\n\n## Usage\n\n### Basic\n\n‚ú® [repl](https://svelte.dev/repl/effd88614c0c4372864ebeb582415a21?version=4.1.1)\n\n```svelte\n<script lang=\"ts\">\n\timport Grid, { GridItem } from 'svelte-grid-extended';\n</script>\n\n<Grid cols={10} rows={10}>\n\t<GridItem x={1} y={0} class=\"item\">Hey</GridItem>\n\t<GridItem x={3} y={3} w={4} class=\"item\">Hoy</GridItem>\n</Grid>\n```\n\n### Static grid\n\nWhen `cols` or `rows` and `itemsSize` are set, grid becomes static and ignores the size of the container.\n\nIt can be set to both dimensions or just one.\n\nBoth:\n‚ú® [repl](https://svelte.dev/repl/7d431c0884d343529e5e98fcbe74afbd?version=4.1.1)\n\n```svelte\n<script lang=\"ts\">\n\timport Grid, { GridItem } from 'svelte-grid-extended';\n\n\tconst itemSize = { width: 100, height: 40 };\n</script>\n\n<Grid {itemSize} cols={10} rows={10}>\n\t<GridItem x={1} y={0} class=\"item\">Hey</GridItem>\n\t<GridItem x={3} y={3} w={4} class=\"item\">Hoy</GridItem>\n</Grid>\n```\n\nOnly rows:\n‚ú® [repl](https://svelte.dev/repl/53994707c9f84d2cad2f9eac5a9f9ea6?version=4.1.1)\n\n```svelte\n<script lang=\"ts\">\n\timport Grid, { GridItem } from 'svelte-grid-extended';\n\n\tconst itemSize = { height: 40 };\n</script>\n\n<Grid {itemSize} cols={10} rows={10}>\n\t<GridItem x={1} y={0} class=\"item\">Hey</GridItem>\n\t<GridItem x={3} y={3} w={4} class=\"item\">Hoy</GridItem>\n</Grid>\n```\n\n### Grid without bounds\n\nWhen `cols` or/and `rows` set to 0, grid grows infinitly. The grid container adapts its width and height to fit all elements.\n\nIt can be set to both dimensions or just one.\n\n‚ú® [repl](https://svelte.dev/repl/ade95bbc3a7445518df6a51c3fd9be2e?version=4.1.1)\n\n```svelte\n<script lang=\"ts\">\n\timport Grid, { GridItem } from 'svelte-grid-extended';\n\n\tconst itemSize = { width: 100, height: 40 };\n</script>\n\n<Grid {itemSize} cols={0} rows={0}>\n\t<GridItem x={1} y={0} class=\"item\">Hey</GridItem>\n\t<GridItem x={3} y={3} w={4} class=\"item\">Hoy</GridItem>\n</Grid>\n```\n\n### Styling\n\nGrid can be styled with classes passed to various props. Check [Style related props](#style-related-props) section for more info.\n\n‚ú® [repl](https://svelte.dev/repl/97243bc1472d42ff944e47c30b72d73d?version=4.1.1)\n\n```svelte\n<script lang=\"ts\">\n\timport Grid, { GridItem } from 'svelte-grid-extended';\n</script>\n\n<Grid class=\"grid-container\" cols={10} rows={10}>\n\t<GridItem\n\t\tx={0}\n\t\ty={0}\n\t\tclass=\"grid-item\"\n\t\tactiveClass=\"grid-item-active\"\n\t\tpreviewClass=\"bg-green-500 rounded\"\n\t\tresizerClass=\"\"\n\t>\n\t\t<div class=\"item\">{item.id}</div>\n\t</GridItem>\n</Grid>\n\n<style>\n\t:global(.grid-container) {\n\t\topacity: 0.7;\n\t}\n\n\t:global(.grid-item) {\n\t\ttransition:\n\t\t\twidth 4s,\n\t\t\theight 4s;\n\t\ttransition:\n\t\t\ttransform 4s,\n\t\t\topacity 4s;\n\t}\n\n\t:global(.grid-item-active) {\n\t\topacity: 0.1;\n\t}\n\n\t/* tailwind classes */\n\t:global(.bg-red-500) {\n\t\tbackground-color: rgb(202, 33, 33);\n\t}\n\n\t:global(.rounded) {\n\t\tborder-radius: 0.25rem;\n\t}\n</style>\n```\n\n### Disable interactions\n\nTo disable interactions, set `readOnly` prop to `true`. Or set `movable` and/or `resizable` to `false` on specific item.\n\nRead Only grid: ‚ú® [repl](https://svelte.dev/repl/e7183ff3136c47fe94fcd5398573aef5?version=4.1.1)\n\n```svelte\n<script lang=\"ts\">\n\timport Grid, { GridItem } from 'svelte-grid-extended';\n</script>\n\n<Grid cols={10} rows={10} readOnly>\n\t<GridItem x={1} y={0} class=\"item\">Hey</GridItem>\n\t<GridItem x={3} y={3} w={4} class=\"item\">Hoy</GridItem>\n</Grid>\n```\n\nMake item non-interactive: ‚ú® [repl](https://svelte.dev/repl/50f1acb8be5b426896cb6d9b6c10e9f8?version=4.1.1)\n\n```svelte\n<script lang=\"ts\">\n\timport Grid, { GridItem } from 'svelte-grid-extended';\n</script>\n\n<Grid cols={10} rows={10}>\n\t<GridItem x={1} y={0} class=\"item\" movable={false}>Hey</GridItem>\n\t<GridItem x={3} y={3} w={4} class=\"item\" resizable={false}>Hoy</GridItem>\n</Grid>\n```\n\n### Collision Behavior\n\nThe `collision` prop controls how the grid handles collisions. There are three available options: `none`, `push`, and `compress`.\n\n#### None\n\nSetting `collision` prop to `none` will ignore any collisions. This is the default behavior.\n\n‚ú® [repl](https://svelte.dev/repl/c549a05c30b84793b2bab156f49bedd3?version=4.1.1)\n\n```svelte\n<script lang=\"ts\">\n\timport Grid, { GridItem } from 'svelte-grid-extended';\n\n\tconst items = [\n\t\t{ id: '0', x: 0, y: 0, w: 2, h: 5 },\n\t\t{ id: '1', x: 2, y: 2, w: 2, h: 2 },\n\t\t{ id: '2', x: 2, y: 0, w: 1, h: 2 },\n\t\t{ id: '3', x: 3, y: 0, w: 2, h: 2 },\n\t\t{ id: '4', x: 4, y: 2, w: 1, h: 3 },\n\t\t{ id: '5', x: 8, y: 0, w: 2, h: 8 }\n\t];\n\n\tconst itemSize = { height: 40 };\n</script>\n\n<Grid {itemSize} cols={10} collision=\"none\">\n\t{#each items as item}\n\t\t<GridItem x={item.x} y={item.y} w={item.w} h={item.h}>\n\t\t\t<div class=\"item\">{item.id}</div>\n\t\t</GridItem>\n\t{/each}\n</Grid>\n```\n\n#### Push\n\nSetting `collision` prop to `push` will cause grid items to move to the first available space when colliding. The grid will grow vertically as needed to accommodate all items.\n\n‚ú® [repl](https://svelte.dev/repl/36abb5e5be6f4b0ebe637b2676ccf606?version=4.1.1)\n\n```svelte\n<script lang=\"ts\">\n\timport Grid, { GridItem } from 'svelte-grid-extended';\n\n\tconst items = [\n\t\t{ id: '0', x: 0, y: 0, w: 2, h: 5 },\n\t\t{ id: '1', x: 2, y: 2, w: 2, h: 2 },\n\t\t{ id: '2', x: 2, y: 0, w: 1, h: 2 },\n\t\t{ id: '3', x: 3, y: 0, w: 2, h: 2 },\n\t\t{ id: '4', x: 4, y: 2, w: 1, h: 3 },\n\t\t{ id: '5', x: 8, y: 0, w: 2, h: 8 }\n\t];\n\n\tconst itemSize = { height: 40 };\n</script>\n\n<Grid {itemSize} cols={10} collision=\"push\">\n\t{#each items as item}\n\t\t<GridItem x={item.x} y={item.y} w={item.w} h={item.h}>\n\t\t\t<div class=\"item\">{item.id}</div>\n\t\t</GridItem>\n\t{/each}\n</Grid>\n```\n\n#### Compress\n\nSetting `collision` prop to `compress` will compress items vertically towards the top into any available space when colliding. The grid will grow vertically as needed to accommodate all items.\n\n‚ú® [repl](https://svelte.dev/repl/86cff54f2efa437285c3245ecb713702?version=4.1.1)\n\n```svelte\n<script lang=\"ts\">\n\timport Grid, { GridItem } from 'svelte-grid-extended';\n\n\tconst items = [\n\t\t{ id: '0', x: 0, y: 0, w: 2, h: 5 },\n\t\t{ id: '1', x: 2, y: 2, w: 2, h: 2 },\n\t\t{ id: '2', x: 2, y: 0, w: 1, h: 2 },\n\t\t{ id: '3', x: 3, y: 0, w: 2, h: 2 },\n\t\t{ id: '4', x: 4, y: 2, w: 1, h: 3 },\n\t\t{ id: '5', x: 8, y: 0, w: 2, h: 8 }\n\t];\n\n\tconst itemSize = { height: 40 };\n</script>\n\n<Grid {itemSize} cols={10} collision=\"compress\">\n\t{#each items as item}\n\t\t<GridItem x={item.x} y={item.y} w={item.w} h={item.h}>\n\t\t\t<div class=\"item\">{item.id}</div>\n\t\t</GridItem>\n\t{/each}\n</Grid>\n```\n\n> ‚ö†Ô∏è Setting `collision` to `push` or `compress` will set `rows` to `0` so `ItemSize.height` must be setted.\n\n### Custom move/resize handle\n\n‚ú® [repl](https://svelte.dev/repl/5f9dbbd845cc40f6a222734856fc9b1d?version=4.1.1)\n\n```svelte\n<script lang=\"ts\">\n\timport Grid, { GridItem } from 'svelte-grid-extended';\n</script>\n\n<Grid cols={10} rows={10}>\n\t<GridItem x={0} y={0}>\n\t\t<div slot=\"moveHandle\" let:moveStart>\n\t\t\t<div on:pointerdown={moveStart}>MOVE</div>\n\t\t</div>\n\n\t\t<div slot=\"resizeHandle\" let:resizeStart>\n\t\t\t<div on:pointerdown={resizeStart}>Resize</div>\n\t\t</div>\n\n\t\t<!-- content -->\n\t</GridItem>\n</Grid>\n```\n\n### Two way binding\n\n‚ú® [repl](https://svelte.dev/repl/ef5d5716505642b7a9212c3d0c7b6803?version=4.1.1)\n\n```svelte\n<script lang=\"ts\">\n\timport Grid, { GridItem } from 'svelte-grid-extended';\n\n\tlet items = [\n\t\t{ x: 6, y: 0, w: 2, h: 2, data: { text: 'üéÖ' } },\n\t\t{ x: 6, y: 2, w: 2, h: 2, data: { text: 'ü§∂' } }\n\t];\n\n\tconst itemsBackup = structuredClone(items);\n\n\tfunction resetGrid() {\n\t\titems = structuredClone(itemsBackup);\n\t}\n</script>\n\n<button on:click={resetGrid}> RESET </button>\n\n<Grid cols={10} {itemSize}>\n\t{#each items as item}\n\t\t<GridItem bind:x={item.x} bind:y={item.y} bind:w={item.w} bind:h={item.h}>\n\t\t\t{item.data.text}\n\t\t</GridItem>\n\t{/each}\n</Grid>\n```\n\n## API Documentation\n\n### Grid props\n\n| prop         | description                                                                                                            | type                                | default |\n| ------------ | ---------------------------------------------------------------------------------------------------------------------- | ----------------------------------- | ------- |\n| cols         | Grid columns count. If set to 0, grid will grow infinitly. Must be >= 0.                                               | number                              | 0       |\n| rows         | Grid rows count. If set to 0, grid will grow infinitly. Must be >= 0.                                                  | number                              | 0       |\n| itemSize     | Size of the grid item. If not set, grid will calculate it based on container size.                                     | { width?: number, height?: number } | {}      |\n| gap          | Gap between grid items.                                                                                                | number                              | 10      |\n| bounds       | Should grid items be bounded by the grid container.                                                                    | boolean                             | false   |\n| readonly     | If true disables interaction with grid items.                                                                          | boolean                             | false   |\n| collision    | Collision behavior of grid items. [About](#collision-behavior)                                                         | none \\| push \\| compress            | none    |\n| autoCompress | Auto compress the grid items when programmatically changing grid items. Only works with 'compress' collision strategy. | boolean                             | true    |\n\n> ‚ö†Ô∏è if `cols` or/and `rows` are set to 0, `itemSize.width` or/and `itemSize.height` must be setted.\n\n> ‚ö†Ô∏è Setting `collision` to `push` or `compress` will set `rows` to `0` so `ItemSize.height` must be setted.\n\n### GridItem props\n\n| prop      | description                                                                                        | type                                  | default        |\n| --------- | -------------------------------------------------------------------------------------------------- | ------------------------------------- | -------------- |\n| id        | Unique id of the item. Used to compare items during collision tests                                | string                                | uuid.v4        |\n| x         | X position of the item in grid units.                                                              | number                                | required       |\n| y         | Y position of the item in grid units.                                                              | number                                | required       |\n| w         | Width of the item in grid units.                                                                   | number                                | 1              |\n| h         | Height of the item in grid units.                                                                  | number                                | 1              |\n| min       | Minimum size of the item in Grid Units.                                                            | { w: number, h: number }              | { w: 1, h: 1 } |\n| max       | Maximum size of the item in Grid Units. If not provided, the item will be able to grow infinitely. | { w: number, h: number } \\| undefined | undefined      |\n| movable   | If true, item can be moved by user.                                                                | boolean                               | true           |\n| resizable | If true, item can be resized by user.                                                              | boolean                               | true           |\n\n### Style related props:\n\nComponent can be styled with css framework of your choice or with global classes. To do so, you can use the following props:\n\n- `<Grid class=\"...\" />` - class name for grid container.\n- `<GridItem class=\"...\" />` - class name for grid item.\n- `<GridItem activeClass=\"...\" />` - class name that applies when item is currently being dragged or resized. By default, it is used to make active grid item transparent.\n- `<GridItem previewClass=\"...\" />` - class name for preview where item will be placed after interaction.\n- `<GridItem resizerClass=\"...\" />` - class name for item's resize handle.\n\nTo understand how to use these props, look at `<Grid />` component simplified structure.\n\n> üìÑ `active` is variable that indicates if grid item is currently being dragged or resized:\n\n```svelte\n<!-- Grid -->\n<div class={class}>\n\t<!-- GridItem -->\n\t<div class={itemClass} class:activeClass={active}>\n\t\t<slot />\n\t\t<!-- Resizer -->\n\t\t<div class={resizerClass} />\n\t\t<!-- Resizer -->\n\t</div>\n\n\t{#if active}\n\t\t<!-- GridItemGhost -->\n\t\t<div class={previewClass} />\n\t{/if}\n\n\t<!-- /GridItem -->\n</div>\n<!-- /Grid -->\n```\n\n## Events\n\nGrid emits the following events:\n\n| event name | description                          | payload            |\n| ---------- | ------------------------------------ | ------------------ |\n| change     | Emitted when grid items are changed. | {item: LayoutItem} |\n\n```svelte\n<script lang=\"ts\">\n\timport Grid, { GridItem, type LayoutChangeDetail } from 'svelte-grid-extended';\n\n\tfunction logItem(event: CustomEvent<LayoutChangeDetail>) {\n\t\tconsole.log(event.detail.item);\n\t}\n</script>\n\n<Grid cols={10} rows={10} on:change={logItem}>\n\t<GridItem x={1} y={0} class=\"item\" on:change={logItem}>Hey</GridItem>\n\t<GridItem x={3} y={3} w={4} class=\"item\" on:previewchange={logItem}>Hoy</GridItem>\n</Grid>\n```\n\n## Grid Controller\n\nThe Grid Controller provides utility functions that allow for more advanced control and customization of the grid. It's obtained from the Grid component using the `bind:controller` attribute, offering a way to interact with the grid in a programmatic and flexible manner.\n\n### Methods\n\n#### getFirstAvailablePosition(w, h)\n\nFinds the first available position within the grid that can accommodate an item of the specified width (w) and height (h). This method is useful when dynamically adding new items to the grid, ensuring that they fit into the first available space that can hold them.\n\n**Parameters:**\n\n- `w` (number): Width of the item.\n- `h` (number): Height of the item.\n\n**Returns:**\n\n- An object containing the `x` and `y` coordinates of the first available position, or `null` if no position is available.\n\n##### Example\n\n‚ú® [repl](https://svelte.dev/repl/6af014e1f754458dbc15c1823dbdca3c?version=4.1.2)\n\n```svelte\n<script lang=\"ts\">\n\timport Grid, { GridItem, type GridController } from 'svelte-grid-extended';\n\n\tlet items = [\n\t\t{ id: '1', x: 0, y: 0, w: 2, h: 5 },\n\t\t{ id: '2', x: 2, y: 2, w: 2, h: 2 }\n\t];\n\n\tlet gridController: GridController;\n\n\tfunction addNewItem() {\n\t\tconst w = Math.floor(Math.random() * 2) + 1;\n\t\tconst h = Math.floor(Math.random() * 5) + 1;\n\t\tconst newPosition = gridController.getFirstAvailablePosition(w, h);\n\t\titems = newPosition\n\t\t\t? [...items, { id: crypto.randomUUID(), x: newPosition.x, y: newPosition.y, w, h }]\n\t\t\t: items;\n\t}\n\n\tconst itemSize = { height: 40 };\n</script>\n\n<button on:click={addNewItem}>Add New Item</button>\n\n<Grid {itemSize} cols={10} collision=\"push\" bind:controller={gridController}>\n\t{#each items as { id, x, y, w, h } (id)}\n\t\t<div transition:fade={{ duration: 300 }}>\n\t\t\t<GridItem {id} bind:x bind:y bind:w bind:h>\n\t\t\t\t<div>{id}</div>\n\t\t\t</GridItem>\n\t\t</div>\n\t{/each}\n</Grid>\n```\n\n#### compress()\n\nCompresses all items vertically towards the top into any available space.\n\n##### Example\n\n‚ú® [repl](https://svelte.dev/repl/79bcc70f11944d9e9b03970de731b3e2?version=4.2.11)\n\n```svelte\n<script lang=\"ts\">\n\timport Grid, { GridItem, type GridController } from 'svelte-grid-extended';\n\n\tlet items = [\n\t\t{ id: '1', x: 0, y: 0, w: 2, h: 5 },\n\t\t{ id: '2', x: 2, y: 2, w: 2, h: 2 }\n\t];\n\n\tlet gridController: GridController;\n\n\tfunction compressItems() {\n\t\tgridController.compress();\n\t}\n\n\tconst itemSize = { height: 40 };\n</script>\n\n<button class=\"btn\" on:click={compressItems}>Compress Items</button>\n\n<Grid {itemSize} cols={10} collision=\"push\" bind:controller={gridController}>\n\t{#each items as item (item.id)}\n\t\t<GridItem id={item.id} bind:x={item.x} bind:y={item.y} bind:w={item.w} bind:h={item.h}>\n\t\t\t<div class=\"item\">{item.id.slice(0, 5)}</div>\n\t\t</GridItem>\n\t{/each}\n</Grid>\n```\n\n## üìú License\n\nMIT\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 150],
		[3596, 254],
		[3603, 152],
		[3610, 281],
		[3617, 261],
		[3624, 334],
		[3631, 212],
		[3638, 171],
		[3645, 90],
		[3652, 238],
		[3659, 208],
		[3666, 273],
		[3673, 395],
		[3680, 358],
		[3687, 443],
		[3694, 423],
		[3701, 528],
		[3708, 572],
		[3715, 413],
		[3722, 499],
		[3729, 453],
		[3736, 374],
		[3743, 605],
		[3750, 611],
		[3757, 563],
		[3764, 781],
		[3771, 562],
		[3778, 527],
		[3785, 361],
		[3792, 345],
		[3799, 703],
		[3806, 436],
		[3813, 542],
		[3820, 622],
		[3827, 659],
		[3834, 484],
		[3841, 624],
		[3848, 662],
		[3855, 760],
		[3862, 685],
		[3869, 978],
		[3876, 741],
		[3883, 823],
		[3890, 924],
		[3897, 858],
		[3904, 954],
		[3911, 717],
		[3918, 775],
		[3925, 498],
		[3932, 578],
		[3939, 684],
		[3946, 1039],
		[3953, 628],
		[3960, 594],
		[3967, 894],
		[3974, 931],
		[3981, 1188],
		[3988, 1127],
		[3995, 1131],
		[4002, 1018],
		[4009, 279],
		[4016, 197],
		[4023, 573],
		[4030, 548],
		[4037, 830],
		[4044, 675],
		[4051, 852],
		[4058, 765],
		[4065, 729],
		[4072, 651],
		[4079, 973],
		[4086, 784],
		[4093, 783],
		[4100, 650],
		[4107, 825],
		[4114, 793],
		[4121, 667],
		[4128, 505]
	]
}
