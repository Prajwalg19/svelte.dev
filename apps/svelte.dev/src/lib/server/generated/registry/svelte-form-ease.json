{
	"name": "svelte-form-ease",
	"description": "Manage Svelte forms, handle state, and validate inputs easily.",
	"repo_url": "https://github.com/FernandoAcTr/svelte-form-ease",
	"authors": ["fernando_acosta"],
	"homepage": "https://github.com/FernandoAcTr/svelte-form-ease#readme",
	"downloads": 5,
	"updated": "2024-02-20T23:31:41.349Z",
	"tags": ["miscellaneous"],
	"github_stars": 0,
	"typescript": true,
	"version": "1.0.1",
	"svelte_range": "^4.0.0",
	"kit_range": "^2.0.0",
	"last_rune_check_version": "1.0.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-form-ease",
				"version": "1.0.1",
				"size": 63589
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Svelte Form Ease\n\nSvelte Form Ease is the simplest form manager that will help you maintain a clean and tidy state of your forms and their validations.\n\n## Examples\n\nCheck the usage examples in [Svelte Form Ease Examples](https://github.com/FernandoAcTr/svelte-form-ease/tree/main/src/routes/examples)\n\n## Basic Usage  \n\nAll you have to do is call the `createForm()` function, give it some initial data, which will correspond to the fields of your form, and get a bunch of writables that you can use to manage the state of your inputs.\n\n```TSX\nimport { createForm } from 'svelte-form-ease';\nimport { get } from 'svelte/store';\n\nlet { formData, validateForm, errors, resetForm, loading } = createForm({\n    data: {\n      email: '',\n      password: '',\n      name: '',\n      check: false,\n    },\n})\n<form>\n  <div>\n    <label>Name</label>\n    <input type='text' bind:value={$formData.name} />\n  </div>\n  <div>\n    <label>Email address</label>\n    <input type='email' bind:value={$formData.email} />\n  </div>\n  <div>\n    <label>Password</label>\n    <input type='password' bind:value={$formData.password}/>\n  </div>\n  <div>\n    <input type='checkbox' bind:checked={$formData.check} />\n    <label>I accept the Privacy Policy</label>\n  </div>\n  <button type='submit' disabled={isLoading}>\n    Submit\n  </button>\n</form>\n```\n\n## Validations\n\nTo create validations, pass a second argument to `createForm()` called validations.\nA validator function must be passed for each property that you want to validate, which may or may not return an error message. If an error message is returned, it will be taken as a failed validation and the errors can be recovered in the errors object provided by the hook.\nTo execute the validations you must call the `validateForm()` function, also provided by the hook, for example in the submit handler.\n\n```TSX\nimport { createForm } from 'svelte-form-ease';\nimport { get } from 'svelte/store';\n\nlet { formData, validateForm, errors, resetForm, loading } = createForm({\n    data: {\n        email: '',\n        password: '',\n        name: '',\n        check: false\n    },\n    validations: {\n        email: (value) => {\n            if (!value) return 'Please enter an email';\n            if (!/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/.test(value))\n                return 'Please enter a valid email';\n        },\n        name: (value) => {\n            if (!value) return 'Please enter your name';\n        },\n        password: (value) => {\n            if (!value) return 'Please enter a password';\n        },\n        check: (value) => {\n            if (!value) return 'Please accept the privacy policies';\n        }\n    }\n});\n\nconst onSubmit = (e: Event) => {\n  e.preventDefault()\n  if (!validateForm()) return\n\n  //Here formData contains valid data\n}\n\n<form on:submit={onSubmit} novalidate>\n\t<div class=\"mb-3\">\n\t\t<label for=\"exampleInputEmail1\" class=\"form-label\">Name</label>\n\t\t<input type=\"text\" class=\"form-control\" id=\"exampleInputEmail1\" bind:value={$formData.name} />\n\t\t{#if $errors?.name}\n\t\t\t<p class=\"invalid-feedback d-block\">\n\t\t\t\t{$errors.name}\n\t\t\t</p>\n\t\t{/if}\n\t</div>\n\t<div class=\"mb-3\">\n\t\t<label for=\"exampleInputEmail1\" class=\"form-label\">Email address</label>\n\t\t<input type=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" bind:value={$formData.email} />\n\t\t{#if $errors?.email}\n\t\t\t<p class=\"invalid-feedback d-block\">\n\t\t\t\t{$errors.email}\n\t\t\t</p>\n\t\t{/if}\n\t</div>\n\t<div class=\"mb-3\">\n\t\t<label for=\"exampleInputPassword1\" class=\"form-label\">Password</label>\n\t\t<input\n\t\t\ttype=\"password\"\n\t\t\tclass=\"form-control\"\n\t\t\tid=\"exampleInputPassword1\"\n\t\t\tbind:value={$formData.password}\n\t\t/>\n\t\t{#if $errors?.password}\n\t\t\t<p class=\"invalid-feedback d-block\">\n\t\t\t\t{$errors.password}\n\t\t\t</p>\n\t\t{/if}\n\t</div>\n\t<div class=\"mb-3 form-check\">\n\t\t<input\n\t\t\ttype=\"checkbox\"\n\t\t\tclass=\"form-check-input\"\n\t\t\tid=\"exampleCheck1\"\n\t\t\tbind:checked={$formData.check}\n\t\t/>\n\t\t<label class=\"form-check-label\" for=\"exampleCheck1\">I accept the Privacy Policy</label>\n\t\t{#if $errors?.check}\n\t\t\t<p class=\"invalid-feedback d-block\">\n\t\t\t\t{$errors.check}\n\t\t\t</p>\n\t\t{/if}\n\t</div>\n\t<button type=\"submit\" class=\"btn btn-primary\" disabled={$loading}> Submit </button>\n</form>\n\n```\n\n## Async validations\n\nSometimes you will need asynchronous validations, for example to check in the backend if an email is already registered or not.\nFor this type of case you can use the property called `asyncValidations` of the `createForm()` hook, which works exactly the same as validations but they must return a string promise instead of a string, since they must be async functions.\nThere is also its counterpart `validateFormAsync`, a function that will execute all asynchronous validators and update the error messages corresponding to their validator function.\n\n```TSX\nimport { createForm } from 'svelte-form-ease';\nimport { get } from 'svelte/store';\n\nlet {\n    formData,\n    validateForm,\n    validateFormAsync,\n    errors,\n    resetForm,\n    loading,\n    validateInput,\n    validateInputAsync\n} = createForm({\n    data: {\n        email: '',\n        password: '',\n        name: '',\n        check: false\n    },\n    validations: {\n        email: (value: string) => {\n            if (!value) return 'Please enter an email';\n            if (!/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{3,}$/.test(value))\n                return 'Please enter a valid email';\n        },\n        name: (value: string) => {\n            if (!value) return 'Please enter your name';\n        },\n        password: (value: string) => {\n            if (!value) return 'Please enter a password';\n        },\n        check: (value: boolean) => {\n            if (!value) return 'Please enter accept the privacy policies';\n        }\n    },\n    asyncValidations: {\n        email: async (_value: string) => {\n            // Checking in backend if email already exists\n            await sleep(1000);\n            if (Math.random() < 0.5) return 'This email is already taken';\n        }\n    }\n});\n\nconst onSubmit = async (e: Event) => {\n  e.preventDefault()\n  if (!validateForm()) return\n  if (!(await validateFormAsync())) return //<- Check here the async validation after sync validation\n\n  //Here formData contains valid data\n}\n```\n\n## Hot validations\n\nAll validations are executed manually (usually before processing the data in the submit method), but it can also be executed on the fly, once the user has left an input.\nFor this we use the `validateInput()` or `validateInputAsync()` functions, in case there is an asynchronous validation for that field.\n\n```TSX\nimport { createForm } from 'svelte-form-ease';\nimport { get } from 'svelte/store';\n\nlet { formData, validateForm, errors, resetForm, loading, validateInput } = createForm({\n    data: {\n        email: '',\n        password: '',\n        name: '',\n        check: false\n    },\n    validations: {\n        email: (value) => {\n            if (!value) return 'Please enter an email';\n            if (!/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/.test(value))\n                return 'Please enter a valid email';\n        },\n        name: (value) => {\n            if (!value) return 'Please enter your name';\n        },\n        password: (value) => {\n            if (!value) return 'Please enter a password';\n        },\n        check: (value) => {\n            if (!value) return 'Please accept the privacy policies';\n        }\n    }\n});\n  \n<form on:submit={onSubmit} novalidate>\n\t<div class=\"mb-3\">\n\t\t<label for=\"exampleInputEmail2\" class=\"form-label\">Name</label>\n\t\t<input\n\t\t\ttype=\"text\"\n\t\t\tclass=\"form-control\"\n\t\t\tid=\"exampleInputEmail2\"\n\t\t\tbind:value={$formData.name}\n\t\t\ton:blur={() => validateInput('name')}\n\t\t/>\n\t\t{#if $errors?.name}\n\t\t\t<p class=\"invalid-feedback d-block\">\n\t\t\t\t{$errors.name}\n\t\t\t</p>\n\t\t{/if}\n\t</div>\n\t<div class=\"mb-3\">\n\t\t<label for=\"exampleInputEmail2\" class=\"form-label\">Email address</label>\n\t\t<input\n\t\t\ttype=\"email\"\n\t\t\tclass=\"form-control\"\n\t\t\tid=\"exampleInputEmail2\"\n\t\t\tbind:value={$formData.email}\n\t\t\ton:blur={() => validateInput('email')}\n\t\t/>\n\t\t{#if $errors?.email}\n\t\t\t<p class=\"invalid-feedback d-block\">\n\t\t\t\t{$errors.email}\n\t\t\t</p>\n\t\t{/if}\n\t</div>\n\t<div class=\"mb-3\">\n\t\t<label for=\"exampleInputPassword2\" class=\"form-label\">Password</label>\n\t\t<input\n\t\t\ttype=\"password\"\n\t\t\tclass=\"form-control\"\n\t\t\tid=\"exampleInputPassword2\"\n\t\t\tbind:value={$formData.password}\n\t\t\ton:blur={() => validateInput('password')}\n\t\t/>\n\t\t{#if $errors?.password}\n\t\t\t<p class=\"invalid-feedback d-block\">\n\t\t\t\t{$errors.password}\n\t\t\t</p>\n\t\t{/if}\n\t</div>\n\t<div class=\"mb-3 form-check\">\n\t\t<input\n\t\t\ttype=\"checkbox\"\n\t\t\tclass=\"form-check-input\"\n\t\t\tid=\"exampleCheck2\"\n\t\t\tbind:checked={$formData.check}\n\t\t\ton:blur={() => validateInput('check')}\n\t\t/>\n\t\t<label class=\"form-check-label\" for=\"exampleCheck2\"> I accept the Privacy Policy </label>\n\t\t{#if $errors?.check}\n\t\t\t<p class=\"invalid-feedback d-block\">\n\t\t\t\t{$errors.check}\n\t\t\t</p>\n\t\t{/if}\n\t</div>\n\t<button type=\"submit\" class=\"btn btn-primary\" disabled={$loading}> Submit </button>\n</form>\n```\n\n## Reset form state\n\nYou can reset the form via the `resetForm()` method provided by the `createForm()` hook. Only run it once you have used the entered data.\nAll your inputs will need to be controlled by their value property.\n\n```TSX\nimport { createForm } from 'svelte-form-ease';\nimport { get } from 'svelte/store';\n\nlet { formData, validateForm, errors, resetForm, loading, validateInput } = createForm({\n  ...\n})\n\nconst onSubmit = async (e: Event) => {\n  e.preventDefault()\n  if (!validateForm()) return\n  if (!(await validateFormAsync())) return\n\n  //Process data ...\n\n  resetForm()\n}\n```\n\n## Loading state\n\nThe function provides a writable called `loading` which you can subscribe or use it directly in you template with autosubsrcribe ($).\nThese are useful in case you want to make an asynchronous process, for example an ajax call with the form data and you need to reflect the wait in the UI, for example disable the submit button or show a spinner.\n\n```TSX\nimport { createForm } from 'svelte-form-ease';\nimport { get } from 'svelte/store';\n\nconst { \n    formData,\n    validateForm,\n    validateFormAsync,\n    errors,\n    resetForm,\n    loading,\n    validateInput,\n    validateInputAsync\n} = createForm({\n   ...\n})\n\nlet onSubmit = (event: Event) => {\n    event.preventDefault();\n\n    if (!validateForm()) return;\n\n    loading.set(true); //<- Start loading\n\n    setTimeout(() => {\n        alert(JSON.stringify(get(formData)));\n        loading.set(true); //<- Stop loading\n        resetForm();\n    }, 1000);\n};\n<form>\n   {/* ...inputs */}\n\n   <button type='submit' disabled={$loading}>\n        Submit\n   </button>\n</form>\n```\n\n## Form component\n\nSvelte Form Ease provides an optional component called Form, which receives an asynchronous `onSubmit` callback and will perform validations automatically before the callback, as well as set the loading state to true until the callback has been resolved. you need to pass the rest of the hook properties that you don't use where you are using the form. If you use Form component, you don't need to call e.preventDefault().\nIf you want to reset the form after submitting it, you can use resetAfterSubmit prop of Form component.  \n\nThis is completely optional, but it can save you a few lines of code.\n\n```TSX\nimport { createForm, Form } from 'svelte-form-ease';\nimport { get } from 'svelte/store';\n\n//Check how to extract all other properties inside ...form\nlet { formData, errors, validateInput, validateInputAsync, loading, ...form } = createForm({\n  ...\n})\n\n//Check how to relate a Form component with the function createForm with \"form\" prop\n<Form {onSubmit} form={{ ...form, loading }} resetAfterSubmit>\n\t<div class=\"mb-3\">\n\t\t<label for=\"exampleInputEmail2\" class=\"form-label\">Name</label>\n\t\t<input\n\t\t\ttype=\"text\"\n\t\t\tclass=\"form-control\"\n\t\t\tid=\"exampleInputEmail2\"\n\t\t\tbind:value={$formData.name}\n\t\t\ton:blur={() => validateInput('name')}\n\t\t/>\n\t\t{#if $errors?.name}\n\t\t\t<p class=\"invalid-feedback d-block\">\n\t\t\t\t{$errors.name}\n\t\t\t</p>\n\t\t{/if}\n\t</div>\n\t[...]\n\t<button type=\"submit\" class=\"btn btn-primary\" disabled={$loading}> Submit </button>\n</Form>\n```\n\n## Built in validators\n\nSvelte Form Ease comes with pre-built validators with which you can validate common use cases for:\n- strings\n- numbers\n- booleans\n- dates \n- objects\n- arrays \n  \nFor example you can rewrite this:\n```TS\nimport { createForm } from 'svelte-form-ease';\nimport { get } from 'svelte/store';\n\nlet { formData, validateForm, errors, resetForm, loading } = createForm({\n    data: {\n        email: '',\n        password: '',\n        name: '',\n        check: false\n    },\n    validations: {\n        email: (value) => {\n            if (!value) return 'Please enter an email';\n            if (!/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/.test(value))\n                return 'Please enter a valid email';\n        },\n        name: (value) => {\n            if (!value) return 'Please enter your name';\n        },\n        password: (value) => {\n            if (!value) return 'Please enter a password';\n        },\n        check: (value) => {\n            if (!value) return 'Please accept the privacy policies';\n        }\n    }\n});\n```\nlike this\n\n```TS\nimport { createForm, string, boolean } from 'svelte-form-ease'\n\nlet { formData, validateForm, errors, resetForm, loading } = createForm({\n    data: {\n        email: '',\n        password: '',\n        name: '',\n        check: false\n    },\n    validations: {\n        email: (value) => string(value).required('Please enter an email').email().validate(),\n        name: (value) => string(value).required().name().validate(),\n        password: (value) => string(value).required().min(4).max(8).validate(),\n        check: (value) =>\n            boolean(value).required().isTrue('Please accept the privacy policies').validate()\n    }\n});\n```\n\nAll you have to do is start a validation string with the data type you need to validate, for example string(), number(), boolean(), object() or date() and pass the validated value as an argument.\n\n```TS\nvalidations: {\n   email: (value) => string(value)...,\n},\n```\n\nYou can then continue the chain with as many validations as you require. At the end you must finalize the chain by calling the validate() method.\n\n```TS\nvalidations: {\n   email: (value) => string(value).required().email().min(5).max(20).validate(),\n},\n```\n\nEach validator has a predefined error message, but you can pass a custom message as the last argument to each validator.\n\n```TS\nvalidations: {\n   email: (value) => string(value).required(\"Please enter an email\").email(\"Please enter a valid email\").min(5, \"Al least 5 chars\").max(20, \"Less than 20 chars\").validate(),\n},\n```\n\n### Combine built in validators and custom validations\n\nYou can use the predefined validators and still do more specific validations, for example.\n\n```TS\nvalidations: {\n      email: (value) => string(value).required('Please enter an email').email().validate(),\n      name: (value) => string(value).required().name().validate(),\n      password: (value) => {\n        const error = string(value).required().min(4).max(8).validate()\n        if (error) return error\n        if(value.includes('.')) return '. is forbidden'\n      },\n      check: (value) => boolean(value).required().isTrue('Please accept the privacy policies').validate(),\n}\n```\n\n## Related packages\n\nCheck the related package for React [React Form Ease](https://www.npmjs.com/package/react-form-ease)",
	"legacy_svelte": true,
	"downloads_history": [
		[3687, 62],
		[3694, 4],
		[3701, 55],
		[3708, 2],
		[3715, 2],
		[3722, 4],
		[3729, 3],
		[3736, 3],
		[3750, 1],
		[3757, 4],
		[3771, 2],
		[3778, 3],
		[3792, 2],
		[3799, 1],
		[3806, 1],
		[3827, 1],
		[3834, 10],
		[3848, 3],
		[3876, 4],
		[3883, 1],
		[3890, 2],
		[3897, 1],
		[3925, 1],
		[3946, 1],
		[3953, 1],
		[3974, 1],
		[3995, 2],
		[4002, 3],
		[4016, 1],
		[4030, 3],
		[4037, 7],
		[4044, 6],
		[4051, 1],
		[4065, 1],
		[4093, 1],
		[4100, 6],
		[4107, 1],
		[4114, 5],
		[4121, 8],
		[4128, 3]
	],
	"esm": true,
	"cjs": false
}
