{
	"name": "svelte-tabular-table",
	"description": "Create fully-featured, lightweight table component for Svelte.",
	"repo_url": "https://github.com/autr/svelte-tabular-table",
	"authors": ["autr"],
	"homepage": "https://autr.github.io/svelte-tabular-table",
	"downloads": 12,
	"updated": "2021-05-06T16:01:02.357Z",
	"tags": ["ui"],
	"typescript": false,
	"version": "1.0.6",
	"svelte_range": "^3.37.0",
	"last_rune_check_version": "1.0.6",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-tabular-table",
				"version": "1.0.6",
				"size": 280994
			},
			{
				"name": "query-string",
				"version": "7.1.3",
				"size": 46243
			},
			{
				"name": "filter-obj",
				"version": "1.1.0"
			},
			{
				"name": "split-on-first",
				"version": "1.1.0",
				"size": 3820
			},
			{
				"name": "strict-uri-encode",
				"version": "2.0.0"
			},
			{
				"name": "decode-uri-component",
				"version": "0.2.2",
				"size": 6093
			},
			{
				"name": "svelte-native-drag-drop",
				"version": "1.0.5",
				"size": 290672
			}
		],
		"dependencies": [
			[0, 1],
			[1, 2],
			[1, 3],
			[1, 4],
			[1, 5],
			[0, 6]
		],
		"circular": []
	},
	"readme": "Svelte Tabular Table\n====================\n\nFully-featured, no-BS, lightweight table component for Svelte.\n\n    pnpm i svelte-tabular-table\n\n*   [Live Examples](https://autr.github.io/svelte-tabular-table)\n*   [Example 1 - Basic](#example-1---basic)\n*   [Example 2 - Dimensions](#example-2---dimensions)\n*   [Example 3 - Sortable](#example-3---sortable)\n*   [Example 4 - Checkable](#example-4---checkable)\n*   [Example 5 - Rearrangeable](#example-5---rearrangeable)\n*   [Example 6 - Autohide (1)](#example-6---autohide-1)\n*   [Example 7 - Autohide (2)](#example-7---autohide-2)\n*   [Example 8 - Callbacks](#example-8---callbacks)\n*   [Example 9 - Components](#example-9---components)\n*   [Example 10 - Classes](#example-10---classes)\n*   [API Documentation](#api-documentation)\n\n### [Example 1 - Basic](https://autr.github.io/svelte-tabular-table#basic)\n\nBasic configuration:\n\n*   `init.data` - an array of objects comprising the rows\n*   `init.keys` - an array of keys to define columns\n*   `init.index` - the key used for indexing each row \\*\n*   `init.nohead` - a boolean to remove thead\n*   `init.nodiv` - a boolean to render without div \\*\\*\n\n\\* If no valid `init.index` is set, or if there are duplicate values inside data, the table will attempt to generate unique keys.  \n\\*\\* Enabling this means `dimensions` and `features.autohide` will not work.\n\n    <script>\n    import { Table } from 'svelte-tabular-table'\n    const config = {\n        init: {\n            keys: ['name', 'balance', 'address', 'company'],\n            index: '_id',\n            name: 'basic-example',\n            nohead: false,\n            nodiv: false,\n            data\n        }\n    }\n    </script>\n    <Table {...config} />\n\n### [Example 2 - Dimensions](https://autr.github.io/svelte-tabular-table#dimensions)\n\nDimensions control the formatting of the table:\n\n*   `dimensions.row` - sets row height and cuts overflowing cells with an ellipsis (`...`)\n*   `dimensions.padding` - sets cell padding\n*   `dimensions.widths` - sets an array of widths for each column (can be int or string \"10em\", \"50%\", etc)\n*   `dimensions.minwidth` - minimum width of table (int or string)\n\nWhen using `features.autohide` it is important to set dimensions, so that each row is a consistent height.\n\n    <script>\n    import { Table } from 'svelte-tabular-table'\n    const config = {\n        init: {\n            keys: ['age', 'latitude', 'longitude', 'name', 'about'],\n            index: '_id',\n            data\n        },\n        dimensions: {\n            name: 'dimensions-example',\n            row: 16,\n            padding: 10,\n            widths: [50,100,100,150],\n            minwidth: 400\n        }\n    }\n    </script>\n    <Table {...config} />\n\n### [Example 3 - Sortable](https://autr.github.io/svelte-tabular-table#sortable)\n\nSortable headers can be initialised by setting `features.sortable.key` to an initial value and `features.sortable.direction` to `true (ascending)` or `false (descending)`.\n\n    <script>\n    import { Table } from 'svelte-tabular-table'\n    const config = {\n        init: {\n            name: 'sortable-example',\n            keys: ['name', 'balance', 'company', 'latitude', 'longitude', 'tags'],\n            index: '_id',\n            data\n        },\n        features: {\n            sortable: {\n                key: 'name'\n            }\n        }\n    }\n    </script>\n    <Table {...config} />\n\n### [Example 4 - Checkable](https://autr.github.io/svelte-tabular-table#checkable)\n\nCheckable rows are initialised by passing a blank `{}` object to `features.checkable`, which will be set via `init.index`.\n\n    <script>\n    import { Table } from 'svelte-tabular-table'\n    const config = {\n        init: {\n            name: 'checkable-example',\n            keys,\n            index: '_id',\n            data\n        },\n        dimensions: {\n            widths: [ 100 ]\n        },\n        features: {\n            checkable: {}\n        }\n    }\n    </script>\n    <Table {...config} />\n\n### [Example 5 - Rearrangeable](https://autr.github.io/svelte-tabular-table#rearrangeable)\n\nRearrangeable rows are initialised by passing a callback function to `features.rearrangeable`, which will return the _from_ and _to_ indexes as an integer: `( from, to ) => ...`\n\n    <script>\n    import { Table } from 'svelte-tabular-table'\n    const config = {\n        init: {\n            name: 'rearrangeable-example',\n            keys: ['name', 'balance', 'company'],\n            index: '_id',\n            data\n        },\n        features: {\n            rearrangeable: (from, to) => alert(`from ${from} to ${to}`)\n        }\n    }\n    </script>\n    <Table {...config} />\n\n### [Example 6 - Autohide (1)](https://autr.github.io/svelte-tabular-table#autohide-1)\n\nAutohide will stop rows that are currently not in view from rendering - increasing performance on tables with large datasets or images and video. It can be used inside a container, or with the window element - and must be manually triggered via `features.autohide.position`:\n\n*   `features.autohide.container` - sets the scrolling parent element and enables autohide\n*   `features.autohide.position` - is the current scrollTop / scrollY position, and must be manually updated from your own `on:scroll` event\n*   `features.autohide.buffer` - sets extra space before rows are hidden as a multiple of `container.offsetHeight` (ie. 0.5 \\* 400 = 200px buffer)\n\nExample is using `window` as container with **`buffer` set to minus `-0.1` to illustrate limits of hidden row edges**:\n\n    <script>\n    import { Table } from 'svelte-tabular-table'\n    const config = {\n        init: {\n            name: 'autohide-1-example',\n            keys,\n            index: '_id',\n            data: many,\n            nohead: true\n        },\n        dimensions: {\n            row: 16\n        },\n        features: {\n            autohide: {\n                container: window,\n                position: scrollY, // <svelte:window on:scroll={ e => scrollY = window.scrollY } />\n                buffer: -0.1\n            }\n        }\n    }\n    </script>\n    <Table {...config} />\n\n### [Example 7 - Autohide (2)](https://autr.github.io/svelte-tabular-table#autohide-2)\n\nExample using a _container_, see [Autohide (1)](#autohide-1):\n\n    <script>\n    import { Table } from 'svelte-tabular-table'\n    const config = {\n        init: {\n            name: 'autohide-2-example',\n            keys,\n            index: '_id',\n            data: many,\n            nohead: true\n        },\n        dimensions: {\n            row: 16\n        },\n        features: {\n            autohide: {\n                container: container, // bind:this={ container }\n                position: scrollY, // on:scroll={ e => scrollY = window.scrollY }\n                buffer: 2\n            }\n        }\n    }\n    </script>\n    <Table {...config} />\n\n### [Example 8 - Callbacks](https://autr.github.io/svelte-tabular-table#callbacks)\n\nCallbacks can be defined for:\n\n*   `callbacks.render.cell` or `callbacks.render.key` - returning with `{id, item, key, value, rowIndex, cellIndex}` argument \\*\n*   `callbacks.click.cell` or `callbacks.click.key` - returning with `{id, item, key, value, rowIndex, cellIndex, _event_}` argument\n\n\\* Render callback can also be a component reference (see [Example 9 - Components](#components)):\n\n    <script>\n    import { Table } from 'svelte-tabular-table'\n    const config = {\n        init: {\n            name: 'callbacks-example',\n            keys: ['name', 'balance', 'company', 'latitude', 'longitude'],\n            index: '_id',\n            data\n        },\n        callbacks: {\n            render: {\n                cell: o => ['üå±','‚òòÔ∏è','ü•¨','üåø','ü•í'][o.cellIndex] ,\n                key: o => ['üå¥','üå≤','üå≥','üèî','ü•¶'][o.cellIndex],\n            },\n            click: {\n                cell: o => alert( ['üå¥','üå≤','üå≥','üèî','ü•¶'][o.cellIndex] ) ,\n                key: o => alert( ['üå±','‚òòÔ∏è','ü•¨','üåø','ü•í'][o.cellIndex] ),\n            }\n        }\n    }\n    </script>\n    <Table {...config} />\n\n### [Example 9 - Components](https://autr.github.io/svelte-tabular-table#components)\n\nIn place of a callback render function, a `svelte:component` can be used with the properties `{id, item, key, value, index}`:\n\n    <script>\n    import Auto from './Auto.svelte'\n    import { Table } from 'svelte-tabular-table'\n    const config = {\n        init: {\n            name: 'components-example',\n            keys: ['picture', 'name', 'latitude', 'longitude', 'registered', 'about'],\n            index: '_id',\n            data\n        },\n        callbacks: {\n            render: {\n                cell: Auto,\n                key: Auto,\n            }\n        },\n    }\n    </script>\n    <Table {...config} />\n    \n    // --- Auto.svelte ---\n    \n    <script>\n        export let id\n        export let item\n        export let key\n        export let value\n        export let index\n        export let type\n    </script>\n    \n    {#if type == 'key'}\n        <b style=\"letter-spacing: 0.2em\">{value}</b>\n    {:else if (key == 'picture')}\n        <img src={ value } />\n    {:else if (key == 'registered')}\n        <em>{ ( new Date( value ) ).toDateString() }</em>\n    {:else if (key == 'about')}\n        <marquee>{value}</marquee>\n    {:else if (key == 'name')}\n        <blink style=\"color:rgb(255,62,0)\">{value}</blink>\n    {:else if (key == 'latitude' || key =='longitude' )}\n        <code>{value}</code>\n    {:else}\n        {value}\n    {/if}\n\n### [Example 10 - Classes](https://autr.github.io/svelte-tabular-table#classes)\n\nThe classes object is a list of classes that are applied to a row based on it's `id`.  \nIn this example we are setting an orange and yellow background class when a cell item is clicked:\n\n    <script>\n    import Auto from './Auto.svelte'\n    import { Table } from 'svelte-tabular-table'\n    const config = {\n        init: {\n            name: 'classes-example',\n            keys: ['name', 'balance', 'company', 'latitude', 'longitude', 'tags'],\n            index: '_id',\n            data\n        },\n        classes: {\n            orange_background: [ selected ],\n            yellow_background: clicked\n    \n        },\n        callbacks: {\n            click: {\n                cell: o => {\n                selected = o.id\n                clicked.push( o.id )\n                }\n            }\n        }\n            \n    }\n    </script>\n    <Table {...config} />\n    \n    // --- Auto.svelte ---\n    \n    <script>\n        export let id\n        export let item\n        export let key\n        export let value\n        export let index\n        export let type\n    </script>\n    \n    {#if type == 'key'}\n        <b style=\"letter-spacing: 0.2em\">{value}</b>\n    {:else if (key == 'picture')}\n        <img src={ value } />\n    {:else if (key == 'registered')}\n        <em>{ ( new Date( value ) ).toDateString() }</em>\n    {:else if (key == 'about')}\n        <marquee>{value}</marquee>\n    {:else if (key == 'name')}\n        <blink style=\"color:rgb(255,62,0)\">{value}</blink>\n    {:else if (key == 'latitude' || key =='longitude' )}\n        <code>{value}</code>\n    {:else}\n        {value}\n    {/if}\n\nAPI Documentation\n=================\n\nProperties are categorised:\n\n*   `init` - for data and setup\n*   `dimensions` - formatting sizes, widths, heights\n*   `features` - sortable, checkable, rearrangeable, autohide\n*   `callbacks` - cell rendering and events\n\n    import { Table } from 'svelte-tabular-table'\n    <Table {init} {dimensions} {features} {callbacks} {id} {class} {style} {debug} />\n\n| Name | Description | Types | Default | Example |\n| --- | --- | --- | --- | --- |\n| init.data | list of rows | Array:Object | null | \\[{ color: 'blue', id: '001' }\\] |\n| init.keys | list of columns | Array:String | null | \\[ 'color', 'id' \\] |\n| init.index | unique index | String | null | id |\n| init.nohead | dont render thead | Boolean | false | true |\n| init.nodiv | dont render div | Boolean | false | true |\n| dimensions.row | height of each row | Integer,String | null | 10, \"2em\" |\n| dimensions.padding | padding of each row | Integer,String | 10 | 10, \"1em\" |\n| dimensions.widths | width of each column | Array:Integer,Array:String | \\[\\] | \\[ 100, \"20%\", \"40px\", 10\\] |\n| dimensions.minwidth | mininum width of table | Array:Integer,Array:String | null | 100, \"20%\", \"40px\", 10 |\n| features.sortable.key | initial sorting key (enables sortable) | String | null | \"color\" |\n| features.sortable.direction | ascending or descending | Boolean | false | true |\n| features.checkable | blank object (enables checkable) | Object | null | {} |\n| features.rearrangeable | callback (enables rearrangeable) | Function | null | (a,b) => alert(\\`from ${a} to ${b}\\`) |\n| features.autohide.container | DOM element (enables autohide) | Element | null | bind:this={domElement},window |\n| features.autohide.position | current scroll position (set externally) | Integer | 0 | on:scroll=>{setPosition} |\n| features.autohide.buffer | extend area (multiple of container height) | Float | 0 | 2 |\n| callbacks.render.key|cell | rendering callback or SvelteComponent | Function,SvelteComponent | o => o.value | o => 'hello world' |\n| callbacks.click.key|cell | cell or key click callback | Function | null | o => alert(\\`${o.id} clicked!\\`) |\n| id | id attribute of table | String | table | table-1 |\n| class | class attribute of table | String |  | table |\n| id | style attribute of table | String |  | background:red |\n| debug | debugging console log | Boolean | false | true |",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 2],
		[3603, 8],
		[3610, 8],
		[3617, 2],
		[3624, 1],
		[3631, 1],
		[3638, 1],
		[3645, 7],
		[3652, 1],
		[3659, 1],
		[3666, 8],
		[3680, 1],
		[3694, 2],
		[3708, 3],
		[3715, 1],
		[3722, 2],
		[3729, 8],
		[3736, 1],
		[3750, 2],
		[3757, 4],
		[3764, 5],
		[3771, 7],
		[3778, 2],
		[3785, 4],
		[3792, 3],
		[3799, 1],
		[3806, 9],
		[3813, 1],
		[3820, 1],
		[3827, 3],
		[3834, 4],
		[3841, 2],
		[3848, 8],
		[3855, 37],
		[3862, 1],
		[3869, 1],
		[3876, 6],
		[3883, 16],
		[3890, 25],
		[3897, 6],
		[3904, 4],
		[3911, 2],
		[3918, 3],
		[3925, 4],
		[3932, 2],
		[3939, 1],
		[3946, 3],
		[3953, 2],
		[3960, 4],
		[3967, 8],
		[3974, 5],
		[3981, 3],
		[3988, 1],
		[3995, 1],
		[4002, 1],
		[4009, 1],
		[4016, 10],
		[4023, 1],
		[4030, 7],
		[4037, 7],
		[4044, 14],
		[4051, 1],
		[4058, 1],
		[4065, 1],
		[4072, 6],
		[4093, 12],
		[4100, 8],
		[4107, 9],
		[4114, 12],
		[4121, 14],
		[4128, 4],
		[4135, 8]
	],
	"esm": true,
	"cjs": false
}
