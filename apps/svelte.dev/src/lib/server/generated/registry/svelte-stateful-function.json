{
	"name": "svelte-stateful-function",
	"description": "Wrap functions with reactive status, debounce, cancellation.",
	"repo_url": "https://github.com/akeylimepie/svelte-stateful-function",
	"authors": ["akeylimepie"],
	"homepage": "https://github.com/akeylimepie/svelte-stateful-function#readme",
	"downloads": 75,
	"updated": "2025-04-08T00:12:58.872Z",
	"tags": ["miscellaneous"],
	"github_stars": 0,
	"typescript": true,
	"version": "1.0.0",
	"svelte_range": "^5.0.0",
	"kit_range": "^2.20.2",
	"last_rune_check_version": "1.0.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-stateful-function",
				"version": "1.0.0",
				"size": 8601
			},
			{
				"name": "svelte-lock",
				"version": "1.1.0",
				"size": 7697
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# svelte-stateful-function\n\n[![Version](https://img.shields.io/npm/v/svelte-stateful-function)](https://www.npmjs.com/package/svelte-stateful-function)\n[![Downloads](https://img.shields.io/npm/dm/svelte-stateful-function)](https://www.npmjs.com/package/svelte-stateful-function)\n\nA lightweight utility to wrap functions with reactive status, debounce, and cancellation for Svelte 5.\n\n---\n\n## Installation\n\n```bash\nnpm install svelte-stateful-function\n```\n\n---\n\n## Usage\n\n```svelte\n<script lang=\"ts\">\n    import { stateful } from 'svelte-stateful-function';\n    \n    let query = $state('')\n    let results = $state([])\n\n    const search = stateful(async (query: string) => {\n        results = await fetch(`/api/search?q=${encodeURIComponent(query)}`).then(res => res.json());\n    }, { debounce: 300 });\n</script>\n\n<input bind:value={query} oninput={() => search(query)} />\n\n{#if search.isIdle}\n  <p>Type to search</p>\n{:else}\n  <p>Searching...</p>\n{/if}\n\n<ul>\n    {#each results as result}\n        <li>{result}</li>\n    {/each}\n</ul>\n```\n\n---\n\n## Reactive State\n\nEach `stateful()` call returns a function with these **reactive properties**:\n\n```ts\nsearch.status;        // $state<'idle' | 'scheduled' | 'executing'>\nsearch.isIdle;        // $derived<boolean>\nsearch.isScheduled;   // $derived<boolean>\nsearch.isExecuting;   // $derived<boolean>\nsearch.isActive;      // $derived<boolean>\n```\n\nYou can react to changes in your component logic:\n\n```ts\n$effect(() => {\n  if (search.status === 'scheduled') {\n    console.log('Waiting to search...');\n  }\n});\n```\n\nOr in markup:\n\n```svelte\n{#if search.isExecuting}\n  <p>Searching in progress...</p>\n{/if}\n```\n\n---\n\n## Options\n\n| Option             | Type      | Default | Description                                              |\n|--------------------|-----------|---------|----------------------------------------------------------|\n| `debounce`         | `number`  | `—`     | Debounce delay in ms before executing                   |\n| `allowConcurrent`  | `boolean` | `false` | Allow concurrent executions if already running          |\n\n---\n\n## API\n\n### `stateful(fn, options?)`\n\nThe wrapped function can be either synchronous or asynchronous — both `fn()` and `async fn()` are supported.\n\nReturns a callable function with attached metadata:\n\n```ts\ntype Status = 'idle' | 'scheduled' | 'executing';\n\ninterface StatefulFunction {\n  status: Status;\n  cancelScheduled(): void;\n  isIdle: boolean;\n  isScheduled: boolean;\n  isExecuting: boolean;\n  isActive: boolean;\n}\n```\n\n---\n\n## Cancellation\n\nYou can cancel a scheduled (when using debounce) call with:\n\n```ts\nsearch.cancelScheduled();\n```\n\nIf the status is `'scheduled'`, it resets back to `'idle'`.\n\n> If `debounce` is not enabled, calling `cancelScheduled()` has no effect — since nothing is scheduled to run later.\n\nTo prevent scheduled calls from executing after a component is destroyed, you should also manually call `cancelScheduled()` inside `onDestroy()`:\n\n```ts \nonDestroy(() => {\n    search.cancelScheduled();\n});\n```\n\n---\n\n## License\n\nMIT",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 28],
		[3603, 8],
		[3610, 19],
		[3617, 8],
		[3624, 1],
		[3631, 8],
		[3638, 9],
		[3645, 1],
		[3652, 5],
		[3659, 1],
		[3666, 10],
		[3673, 9],
		[3687, 3],
		[3694, 5],
		[3701, 57],
		[3708, 11],
		[3715, 17],
		[3722, 10],
		[3729, 7],
		[3736, 6],
		[3743, 139],
		[3750, 30],
		[3757, 5],
		[3764, 2],
		[3771, 9],
		[3778, 29],
		[3785, 146],
		[3792, 231],
		[3799, 22],
		[3806, 18],
		[3813, 3],
		[3820, 1],
		[3827, 7],
		[3834, 16],
		[3841, 46],
		[3848, 10],
		[3855, 1],
		[3862, 6],
		[3869, 6],
		[3890, 22],
		[3897, 8],
		[3904, 1],
		[3911, 2],
		[3918, 3],
		[3925, 2],
		[3932, 9],
		[3939, 1],
		[3946, 1],
		[3953, 2],
		[3967, 1],
		[3995, 1],
		[4002, 19],
		[4009, 3],
		[4016, 16],
		[4023, 4],
		[4030, 1],
		[4037, 7],
		[4044, 14],
		[4051, 10],
		[4065, 1],
		[4079, 8],
		[4093, 9],
		[4100, 18],
		[4107, 37],
		[4114, 75],
		[4121, 43],
		[4128, 32],
		[4135, 7]
	]
}
