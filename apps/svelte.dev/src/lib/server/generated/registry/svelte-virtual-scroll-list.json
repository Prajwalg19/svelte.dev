{
	"name": "svelte-virtual-scroll-list",
	"description": "Virtualize large lists in Svelte applications.",
	"repo_url": "https://github.com/v1ack/svelte-virtual-scroll-list",
	"authors": ["v1ack"],
	"homepage": "https://github.com/v1ack/svelte-virtual-scroll-list#readme",
	"downloads": 904,
	"updated": "2023-07-16T18:48:44.768Z",
	"tags": ["ui"],
	"github_stars": 120,
	"typescript": true,
	"version": "1.3.0",
	"svelte_range": ">=3.5.0",
	"kit_range": "^1.20.4",
	"last_rune_check_version": "1.3.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-virtual-scroll-list",
				"version": "1.3.0",
				"size": 33385
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# svelte-virtual-scroll-list\n\n[![npm](https://img.shields.io/npm/v/svelte-virtual-scroll-list?style=for-the-badge)](https://npmjs.com/package/svelte-virtual-scroll-list/)\n\nSvelte implementation of vue library [vue-virtual-scroll-list](https://github.com/tangbc/vue-virtual-scroll-list)\n\nVirtualized scrolling for big lists\n\n---\n**Support dynamic both-directional lists** (see example)\n\n---\n\nOnline demo: [https://v1ack.github.io/svelte-virtual-scroll-list/](https://v1ack.github.io/svelte-virtual-scroll-list/)\n\n[Simple example in Svelte REPL](https://ru.svelte.dev/repl/eae82aab17b04420885851d58de50a2e?version=3.38.2)\n\n# Getting started\n\n## Installing from npm\n\n`npm i svelte-virtual-scroll-list -D`\n\nor\n\n`yarn add svelte-virtual-scroll-list -D`\n\n## Using\n\n```html\n\n<script>\n    import VirtualScroll from \"svelte-virtual-scroll-list\"\n\n    let items = [{id: 1, text: \"one\"}, ...]\n</script>\n<div class=\"vs\">\n    <VirtualScroll\n            data={items}\n            key=\"id\"\n            let:data\n    >\n        <div slot=\"header\">\n            This is a header set via slot\n        </div>\n        <div>\n            {data.text}\n        </div>\n        <div slot=\"footer\">\n            This is a footer set via slot\n        </div>\n    </VirtualScroll>\n</div>\n```\n\nMore examples available in `example` folder\n\n# Comparing to other virtualizing components\n\n|                           | svelte-virtual-scroll-list | svelte-virtual-list | svelte-tiny-virtual-list         |\n|---------------------------|----------------------------|---------------------|----------------------------------|\n| handle dynamic size data  | +                          | +                   | -                                |\n| scroll methods (to index) | +                          | -                   | +                                |\n| infinity scrolling        | two-directional            | -                   | one-directional with another lib |\n| initial scroll position   | +                          | -                   | +                                |\n| sticky items              | -                          | -                   | +                                |\n| top/bottom slots          | +                          | -                   | +                                |\n| reached top/bottom events | +                          | -                   | -                                |\n| document as a list        | +                          | -                   | -                                |\n\n# API\n\n## Props\n\n| prop            | type     | default        | description                                                        |\n|-----------------|----------|----------------|--------------------------------------------------------------------|\n| data            | object[] | `null`         | Source for list                                                    |\n| key             | string   | `id`           | Unique key for getting data from `data`                            |\n| keeps           | number   | `30`           | Count of rendered items                                            |\n| estimateSize    | number   | `estimateSize` | Estimate size of each item, needs for smooth scrollbar             |\n| isHorizontal    | boolean  | `false`        | Scroll direction                                                   |\n| pageMode        | boolean  | `false`        | Let virtual list using global document to scroll through the list  |\n| start           | number   | `0`            | scroll position start index                                        |\n| offset          | number   | `0`            | scroll position offset                                             |\n| topThreshold    | number   | `0`            | The threshold to emit `top` event, attention to multiple calls.    |\n| bottomThreshold | number   | `0`            | The threshold to emit `bottom` event, attention to multiple calls. |\n\n## Methods\n\nAccess to methods by component binding\n<details>\n<summary>Binding example</summary>\n\n```html\n\n<script>\n    let vs\n</script>\n\n<VirtualScroll bind:this={vs}></VirtualScroll>\n<button on:click={vs.scrollToBottom}>To bottom</button>\n```\n\n</details>\n\n| method              | arguments              | description                                                                                                           |\n|---------------------|------------------------|-----------------------------------------------------------------------------------------------------------------------|\n| scrollToBottom      | `none`                 | Scroll list to bottom                                                                                                 |\n| scrollToIndex       | `index: number`        | Set scroll position to a designated index                                                                             |\n| scrollToOffset      | `offset: number`       | Set scroll position to a designated offset                                                                            |\n| getSize             | `id: typeof props.key` | Get the designated item size                                                                                          |\n| getSizes            | `none`                 | Get the total number of stored (rendered) items                                                                       |\n| getOffset           | `none`                 | Get current scroll offset                                                                                             |\n| getClientSize       | `none`                 | Get wrapper element client viewport size (width or height)                                                            |\n| getScrollSize       | `none`                 | Get all scroll size (scrollHeight or scrollWidth)                                                                     |\n| updatePageModeFront | `none`                 | When using page mode and virtual list root element offsetTop or offsetLeft change, you need call this method manually |\n\n## Events\n\n| event  | description                |\n|--------|----------------------------|\n| scroll | Scroll event               |\n| top    | Top of the list reached    |\n| bottom | Bottom of the list reached |\n\n## Additional\n\n### Get index of current rendering items\n\n```html\n\n<VirtualScroll\n        data={items}\n        key=\"id\"\n        let:data\n        let:index\n>\n    <div>\n        {data.text} {index}\n    </div>\n</VirtualScroll>\n```",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 555],
		[3603, 486],
		[3610, 385],
		[3617, 370],
		[3624, 363],
		[3631, 348],
		[3638, 283],
		[3645, 223],
		[3652, 287],
		[3659, 346],
		[3666, 416],
		[3673, 412],
		[3680, 430],
		[3687, 518],
		[3694, 410],
		[3701, 559],
		[3708, 610],
		[3715, 647],
		[3722, 608],
		[3729, 607],
		[3736, 492],
		[3743, 486],
		[3750, 517],
		[3757, 503],
		[3764, 673],
		[3771, 935],
		[3778, 595],
		[3785, 627],
		[3792, 536],
		[3799, 561],
		[3806, 675],
		[3813, 485],
		[3820, 593],
		[3827, 768],
		[3834, 488],
		[3841, 446],
		[3848, 572],
		[3855, 844],
		[3862, 546],
		[3869, 764],
		[3876, 706],
		[3883, 1153],
		[3890, 889],
		[3897, 982],
		[3904, 1059],
		[3911, 782],
		[3918, 1114],
		[3925, 1246],
		[3932, 1108],
		[3939, 1004],
		[3946, 1029],
		[3953, 967],
		[3960, 666],
		[3967, 580],
		[3974, 664],
		[3981, 699],
		[3988, 755],
		[3995, 845],
		[4002, 737],
		[4009, 456],
		[4016, 661],
		[4023, 1229],
		[4030, 1192],
		[4037, 1145],
		[4044, 1179],
		[4051, 880],
		[4058, 867],
		[4065, 1049],
		[4072, 1096],
		[4079, 791],
		[4086, 847],
		[4093, 833],
		[4100, 1024],
		[4107, 1005],
		[4114, 904],
		[4121, 960],
		[4128, 690],
		[4135, 888]
	]
}
