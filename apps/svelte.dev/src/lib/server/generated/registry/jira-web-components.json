{
	"name": "jira-web-components",
	"description": "Create web components for Jira, using Svelte.",
	"repo_url": "https://github.com/zsotyooo/jira-web-components",
	"authors": ["zsotyooo"],
	"homepage": "https://github.com/zsotyooo/jira-web-components#readme",
	"downloads": 7,
	"updated": "2019-08-13T11:35:37.008Z",
	"tags": ["integration", "ui"],
	"github_stars": 0,
	"typescript": false,
	"version": "0.9.0",
	"svelte_range": "^3.5.4",
	"last_rune_check_version": "0.9.0",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "jira-web-components",
				"version": "0.9.0",
				"size": 4717872
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Jira web component library\n\nWeb component library for JIRA.\n\nCurrently under development. Please keep in mind that it will change later.\n\n## Teaser\n![Screen capture](https://raw.githubusercontent.com/zsotyooo/jira-web-components/master/public/screencapture.png)\n\n## Getting started\n\nInstall package...\n\n```bash\nnpm install jira-web-components --save\n```\n\n```js\nimport \"jira-web-components\";\n```\n\nOr use a `script` tag...\n\n```html\n<script src=\"https://unpkg.com/jira-web-components@0.8.0/public/bundle.js\"></script>\n```\n\nIn order to be able to communicate with JIRA you need a CORS proxy server.\nPlease go to [cors-anywhere](https://www.npmjs.com/package/cors-anywhere) for more information.\n\nExample server (optimised for hosting on heroku):\n\n```js\n// server.js\nconst host = process.env.HOST || '127.0.0.1';\nconst port = process.env.PORT || 4444;\nconst originBlacklist = parseEnvList(process.env.CORSANYWHERE_BLACKLIST);\nconst originWhitelist = parseEnvList(process.env.CORSANYWHERE_WHITELIST);\n\nfunction parseEnvList(env) {\n  if (!env) {\n    return [];\n  }\n  return env.split(',');\n}\n\nconst corsAnywhere = require('cors-anywhere');\ncorsAnywhere.createServer({\n  originBlacklist,\n  originWhitelist,\n  removeHeaders: [\n    'cookie',\n    'cookie2',\n    // Strip Heroku-specific headers\n    'x-heroku-queue-wait-time',\n    'x-heroku-queue-depth',\n    'x-heroku-dynos-in-use',\n    'x-request-start',\n  ],\n  redirectSameOrigin: true,\n  httpProxyOptions: {\n    xfwd: false,\n  },\n}).listen(port, host, function() {\n  console.log('Running CORS proxy on ' + host + ':' + port);\n});\n```\n\nOr clone this repo, and look for the `server.js` in the project root.\n\nOnce you have the server script:\n\n```bash\n#!/bin/bash\nexport HOST=cors.my-website.com\nexport PORT=8080\nexport CORSANYWHERE_WHITELIST=https://my-website.com,http://my-website.com,http://test.my-website.com\nnode server.js\n```\n\nFor testing only you can also use: `https://cors-anywhere.herokuapp.com`\n\n## Using the Components\n\n### Config\n\nYou have to have it somewhere on the top of the HTML code.\n\n```html\n<jira-global-config cors=\"http://localhost:4444\" safe=\"true\"></jira-global-config>\n```\n\nParameters:\n\n* `cors`: the cors server URL (see details above)\n* `safe`: If `false` it saves the email, api key, and url in the local storage. It's only recommended to use it if you have only one user. A safer way is to set it true and store this information on a server. You can use the `<jira-auth>` components public methods to authenticate.\n\n### Visual Components\n\nThese components render actual content (see functional components later).\n\n#### Authentication form\n\n```html\n<jira-auth-form></jira-auth-form>\n```\n\n#### Auth user card\n\n```html\n<jira-auth-user-card></jira-auth-user-card>\n```\n\n#### Inline issue tag\n\n```html\n<jira-issue-tag key=\"EX-123\"></jira-issue-tag>\n```\n\n#### Project Card\n\n```html\n<jira-project-card key=\"EX\"></jira-project-card>\n```\n\n#### Project Dropdown\n\n```html\n<jira-project-select key=\"EX\"></jira-project-select>\n```\n\nMethods:\n\n* `getProject` = () => `object`;\n\nEvents:\n\n* `'jira-project-selected'`: {detail: `object`}\n\n#### Project Board Dropdown\n\n```html\n<jira-board-select project=\"EX\" selected=\"123\"></jira-board-select>\n```\n\nMethods:\n\n* `getBoard` = () => `object`;\n\nEvents:\n\n* `'jira-board-selected'`: {detail: `object`}\n\n#### Project Board Panel\n\nShows board info with the given board id, and columns. (Recommended to use it in combination with the board select component)\n\n```html\n<jira-board-panel bid=\"123\"></jira-board-panel>\n```\n\n#### Text wrapper\n\nReplaces the `[JIRA:EX-123]` issue ticket codes with `<jira-issue>` components.\n```html\n<jira-text-wrapper>\n    <p>Lorem ipsum [JIRA:EX-123] dolor sit [JIRA:EX-456] amet.</p>\n    Lorem ipsum [JIRA:EX-123] dolor sit [JIRA:EX-456] amet.\n    <p>Lorem ipsum [JIRA:EX-123] dolor sit [JIRA:EX-456] amet.</p>\n</jira-text-wrapper>\n```\n\n### Combining Components\n\nSome of the components can be combined. You can see a full example of these combinations here.\n\n```html\n<jira-project-select>\n    <hr>\n    <jira-project-card></jira-project-card> <!-- the project card will always show the selected project -->\n    <hr>\n    <jira-board-select>  <!-- the board select will always list the boards for the selected project -->\n        <hr>\n        <jira-board-panel></jira-board-panel> <!-- the board panel will always show the details for the selected board -->\n    </jira-board-select>\n</jira-project-select>\n```\n\n### Functional Components\n\nThese components only serve functional purpose by exposing public methods and emitting events. You can use them for you own componment implementations.\n\nExample:\n```html\n<!-- index.html -->\n<jira-auth id=\"jira-auth\"></jira-auth>\n<!-- ... -->\n<script>\n  var auth = document.getElementById('jira-auth');\n  addEventListener('DOMContentLoaded', function() {\n    auth.$on('jira-auth-status-changed', function(e){\n      console.log(e.detail === true ? 'You are logged in.' : 'You are logged out');\n    });\n    auth.setEmail('me@my-company.com');\n    auth.setApiKey('[MY_API_KEY_FOR_JIRA]');\n    auth.setUrl('https://my-company.atlassian.net');\n    auth.authenticate();\n  });\n</script>\n```\n\n#### Auth\n\nYou can handle the authentication using this component.\n\n```html\n<jira-auth></jira-auth>\n```\n\nMethods:\n\n* `setEmail` = (v: `string`) => `void`;\n* `setApiKey` = (v: `string`) => `void`;\n* `setUrl` = (v: `string`) => `void`;\n* `getUserData` = () => `object`;\n* `getEmail` = () => `string`;\n* `getApiKey` = () => `string`;\n* `getUrl` = () => `string`;\n* `authenticate` = async () => `void`;\n* `isAuthenticated` = () => `boolean`;\n* `reset` = () => `void`;\n\nEvents:\n\n* `'jira-auth-user-changed'`: {detail: `object`}\n* `'jira-auth-user-fetching-changed'`: {detail: `boolean`} - It's true when the data is being fetched from the API.\n* `'jira-auth-status-changed'`: {detail: `boolean`}\n* `'jira-auth-email-changed'`: {detail: `string`}\n* `'jira-auth-apikey-changed'`: {detail: `string`}\n* `'jira-auth-url-changed'`: {detail: `string`}\n\n#### Issue\n\nYou can get info about an issue by using this component.\n\n```html\n<jira-issue key=\"EX-123\"></jira-issue>\n```\n\nMethods:\n\n* `getIssue` = () => `object`;\n\nEvents:\n\n* `'jira-issue-loaded'`: {detail: `boolean`}\n\n#### Projects\n\nYou can get the all available projects.\n\n```html\n<jira-projects></jira-projects>\n```\n\nMethods:\n\n* `fetchProjects` = async () => Promise<`array`>;\n* `getProjects` = () => `array`;\n\nEvents:\n\n* `'jira-projects-loaded'`: {detail: `boolean`}\n* `'jira-projects-fetching-changed'`: {detail: `boolean`}\n\n#### Project Boards\n\nYou can get the all available boards for a project.\n\n```html\n<jira-boards project=\"EX\"></jira-projects>\n```\n\nMethods:\n\n* `serProject` = () => void;\n* `fetchBoards` = async () => Promise<`array`>;\n* `getBoards` = () => `array`;\n\nEvents:\n\n* `'jira-boards-loaded'`: {detail: `boolean`}\n* `'jira-boards-fetching-changed'`: {detail: `boolean`}\n\n## Styleguide, examples and detailed documentation:\n\nClick here for the [documentation and examples](https://zsotyooo.github.io/jira-web-components/)!\n\n---\n\nMade with :heart: and [![svelte](https://raw.githubusercontent.com/zsotyooo/jira-web-components/master/public/favicon.png)](https://svelte.dev/).\n\n## License\n\n[MIT](https://opensource.org/licenses/MIT)\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 1],
		[3596, 18],
		[3603, 1],
		[3610, 1],
		[3617, 3],
		[3624, 4],
		[3645, 23],
		[3652, 4],
		[3659, 2],
		[3666, 17],
		[3694, 2],
		[3701, 2],
		[3708, 13],
		[3722, 1],
		[3736, 3],
		[3743, 2],
		[3757, 4],
		[3764, 8],
		[3771, 14],
		[3778, 1],
		[3792, 2],
		[3799, 1],
		[3806, 2],
		[3820, 2],
		[3834, 1],
		[3841, 2],
		[3855, 2],
		[3862, 65],
		[3869, 1],
		[3876, 2],
		[3883, 2],
		[3890, 16],
		[3897, 1],
		[3904, 3],
		[3918, 3],
		[3925, 1],
		[3932, 2],
		[3939, 1],
		[3946, 2],
		[3967, 1],
		[3995, 1],
		[4016, 1],
		[4023, 13],
		[4030, 13],
		[4037, 6],
		[4044, 11],
		[4051, 9],
		[4058, 2],
		[4065, 1],
		[4079, 1],
		[4086, 1],
		[4093, 10],
		[4100, 23],
		[4107, 1],
		[4114, 7],
		[4121, 9],
		[4128, 22]
	]
}
