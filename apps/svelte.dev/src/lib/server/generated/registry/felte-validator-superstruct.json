{
	"name": "@felte/validator-superstruct",
	"description": "Validate Felte forms using Superstruct in Svelte.",
	"repo_url": "https://github.com/pablo-abc/felte",
	"authors": ["pberganza"],
	"homepage": "https://github.com/pablo-abc/felte/tree/main/packages/validator-superstruct",
	"downloads": 71,
	"updated": "2024-10-29T20:36:26.472Z",
	"tags": ["miscellaneous"],
	"github_stars": 1050,
	"typescript": true,
	"version": "1.0.16",
	"svelte_range": "^3.46.4",
	"last_rune_check_version": "1.0.16",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@felte/validator-superstruct",
				"version": "1.0.16",
				"size": 17599
			},
			{
				"name": "@felte/common",
				"version": "1.1.9",
				"size": 285201
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# @felte/validator-superstruct\n\n[![Tests](https://github.com/pablo-abc/felte/workflows/Tests/badge.svg)](https://github.com/pablo-abc/felte/actions/workflows/test.yml)\n[![Bundle size](https://img.shields.io/bundlephobia/min/@felte/validator-superstruct)](https://bundlephobia.com/result?p=@felte/validator-superstruct)\n[![NPM Version](https://img.shields.io/npm/v/@felte/validator-superstruct)](https://www.npmjs.com/package/@felte/validator-superstruct)\n[![codecov](https://codecov.io/gh/pablo-abc/felte/branch/main/graph/badge.svg?token=T73OJZ50LC)](https://codecov.io/gh/pablo-abc/felte)\n\nA package to help you handle validation with Superstruct in Felte.\n\n## Installation\n\n```sh\nnpm install --save @felte/validator-superstruct superstruct\n\n# Or, if you use yarn\n\nyarn add @felte/validator-superstruct superstruct\n```\n\n## Usage\n\nThis package exports a `validator` function that returns an `extender`. Call it with your struct in the `struct` property of its configuration and assign it to the `extend` property of `createForm`:\n\n```javascript\nimport { validator } from '@felte/validator-superstruct';\nimport { object, string, size } from 'superstruct';\n\nconst struct = object({\n  email: size(string(), 1, Infinity),\n  password: size(string(), 1, Infinity),\n});\n\nconst { form } = createForm({\n  // ...\n  extend: validator({ struct }), // or `extend: [validator({ struct })],`\n  // ...\n});\n```\n\nOR use the `validateStruct` function directly in the `validate` option of `createForm`. (No need to extend Felte).\n\n```javascript\nimport { validateStruct } from '@felte/validator-superstruct';\nimport { object, string, size } from 'superstruct';\n\nconst struct = object({\n  email: size(string(), 1, Infinity),\n  password: size(string(), 1, Infinity),\n});\n\nconst { form } = createForm({\n  // ...\n  validate: validateStruct(struct),\n  // ...\n});\n```\n\n## Custom error messages\n\n`Superstruct` does not provide a way to add a custom error message to its built-in types, for this reason `validator` also accepts a `transform` function that will receive each [`failure`](https://docs.superstructjs.org/api-reference/errors) from Superstruct, you can check the failure there and return an appropriate error message.\n\n> This function can be also passed to `validateStruct` as its second argument\n\n```javascript\nimport { validator } from '@felte/validator-superstruct';\n\nconst struct = object({ /* ... */ });\n\nconst extender = validator({\n  struct,\n  transform: (value) => value.type === 'string' ? 'Must not be empty' : 'Not valid'\n});\n```\n\n## Warnings\n\nOptionally, you can tell this package to assign the results of your validations to your `warnings` store by setting the `level` property of the validator function to `warning`. It's `error` by default:\n\n```javascript\nimport { validator } from '@felte/validator-superstruct';\nimport { object, string, size, optional } from 'superstruct';\n\nconst validateStruct = object({\n  email: size(string(), 1, Infinity),\n  password: size(string(), 1, Infinity),\n});\n\n// We only show the warning if the user has started to type a value\nconst Secure = refine(string(), 'secure', (value) =>\n  value ? value.length > 8 : true\n);\n\nconst warnStruct =  object({\n  password: Secure,\n});\n\nconst { form } = createForm({\n  // ...\n  extend: [\n    validator({ struct: validateStruct }),\n    validator({\n      struct: warnStruct,\n      level: 'warning',\n    }),\n  ],\n  // ...\n});\n```\n\n## Typescript\n\nSuperstruct allows you to infer the type of your schema using `Infer`. This can be used so you don't need to create a type for your form's data:\n\n```typescript\nimport type { Infer } from 'superstruct';\n\nconst struct = object({\n  email: size(string(), 1, Infinity),\n  password: size(string(), 1, Infinity),\n});\n\nconst { form } = createForm<Infer<typeof struct>>(/* ... */);\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3589, 4],
		[3596, 64],
		[3603, 54],
		[3610, 1],
		[3617, 2],
		[3624, 12],
		[3631, 3],
		[3638, 3],
		[3645, 2],
		[3652, 4],
		[3659, 8],
		[3666, 56],
		[3673, 2],
		[3680, 4],
		[3687, 1],
		[3694, 6],
		[3701, 1],
		[3708, 5],
		[3715, 57],
		[3722, 1],
		[3736, 4],
		[3743, 5],
		[3750, 6],
		[3757, 9],
		[3764, 21],
		[3771, 64],
		[3778, 36],
		[3785, 24],
		[3792, 68],
		[3799, 17],
		[3806, 35],
		[3813, 82],
		[3820, 15],
		[3827, 30],
		[3834, 29],
		[3841, 47],
		[3848, 39],
		[3855, 153],
		[3862, 174],
		[3869, 20],
		[3876, 21],
		[3883, 66],
		[3890, 84],
		[3897, 15],
		[3904, 36],
		[3911, 16],
		[3918, 73],
		[3925, 49],
		[3932, 17],
		[3939, 42],
		[3946, 33],
		[3953, 125],
		[3960, 75],
		[3967, 250],
		[3974, 65],
		[3981, 47],
		[3988, 24],
		[3995, 16],
		[4002, 2],
		[4009, 4],
		[4016, 66],
		[4023, 30],
		[4030, 9],
		[4037, 39],
		[4044, 176],
		[4051, 107],
		[4058, 17],
		[4065, 44],
		[4072, 61],
		[4079, 24],
		[4086, 85],
		[4093, 112],
		[4100, 18],
		[4107, 230],
		[4114, 71],
		[4121, 29],
		[4128, 21]
	]
}
