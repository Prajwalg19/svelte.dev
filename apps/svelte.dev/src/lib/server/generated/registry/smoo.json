{
	"name": "smoo",
	"description": "Create simple modal or outlet components.",
	"repo_url": "https://github.com/pateketrueke/smoo",
	"authors": ["pateketrueke"],
	"homepage": "https://github.com/pateketrueke/smoo#readme",
	"downloads": 19,
	"updated": "2022-08-12T20:20:28.814Z",
	"tags": ["ui"],
	"github_stars": 2,
	"typescript": false,
	"version": "0.0.17",
	"svelte_range": "3.x",
	"last_rune_check_version": "0.0.17",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "smoo",
				"version": "0.0.17",
				"size": 91315
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "> Hold your horses!\n>\n> ![Build status](https://github.com/pateketrueke/smoo/workflows/build/badge.svg)\n> [![NPM version](https://badge.fury.io/js/smoo.svg)](http://badge.fury.io/js/smoo)\n> [![Known Vulnerabilities](https://snyk.io/test/npm/smoo/badge.svg)](https://snyk.io/test/npm/smoo)\n\n```html\n<script>\n  import { Fence, Search } from 'smoo';\n\n  let users = [\n    { id: 1, name: 'Juanito Hace', value: 'j@do.e' },\n    { id: 2, name: 'Carlangas Marca', value: 'cmrx@so.co' },\n  ];\n\n  let members = [];\n  let visible = false;\n\n  function open() {\n    visible = true;\n  }\n  function close() {\n    visible = false;\n  }\n</script>\n\n<Fence modal bind:visible on:cancel={close}>\n  <h1>It works.</h1>\n  <Search multiple data={users} bind:value={members} />\n  <pre>Got: {JSON.stringify(members)}</pre>\n</Fence>\n\n<button on:click={open}>Open modal</button>\n```\n\n## How it works?\n\n`smoo` lets you place any kind of markup or components inside a `<div role=\"dialog\">...</div>`,\nit also brings to you many other useful components, you'll see below.\n\n## Components\n\nWe have a `Fence` component, i.e. a thing you need to guard your cows...\n\n### `<Fence {id} {class} {loading} {modal} {visible} {autofocus} on:submit on:cancel />`\n\nThis is a `<form />` wrapper that handle various effects:\n\n- Allows you to subscribe to any connection status and block its content while loading...\n- All focusable inputs found during `onMount(...)` will be traped an cycled back and forth\n- When rendered as a modal-overlay, it can be canceled with the <kbd>ESC</kbd> key or clicking outside\n- It can setup `autofocus` on the first input-element found inside the inner `<form />` wrapper (js only)\n\n> Before submitting HTML5 validation will run, if it's valid a `submit` event will be triggered.\n> The `cancel` event is fired when you click outside the modal, or press the <kbd>ESC</kbd> key to close the modal.\n\nAvailable props:\n\n- `{id}` &mdash; Used `id` for the inner `<form />` element\n- `{class}` &mdash; Used `class` for the inner `<form />` element\n- `{loading}` &mdash; Its presence will protect the UI with `pointer-events:none`\n- `{modal}` &mdash; Its presence will render the inner `<form />` in a modal-overlay\n- `{noform}` &mdash; It disables the `<form />` render, use the `main` slot instead\n- `{visible}` &mdash; Its value is used to toggle the render of the entire custom-element\n- `{autofocus}` &mdash; Its presence enables `focus()` on the first input-element found\n\nAvailable slots:\n\n- `before` &mdash; Renders before the `<form />` tag\n- `after` &mdash; Renders after the `<form />` tag\n\n> Add the `nofocus` or `data-nofocus` attribute to any element to skip autofocus on it (useful for close-icons, etc.).\n\n### `<Search {id} {pk} {keys} {data} {value} {class} {label} {disabled} {multiple} {autoclose} {placeholder} on:change />`\n\nThis is an `<input type=\"search\" />` wrapper that handle various effects:\n\n- It is fully accessible through the keyboard, e.g.\n  - you can press <kbd>ESC</kbd> to clear search\n  - on items, press <kbd>ESC</kbd> to focus back to the input\n- It allows you to customize the data-source used and the render options\n- The search input fires their `input`, `focus` and `blur` events, while the dropdown fires `open` and `close` events.\n\n> It uses _checkboxes_ or _radios_ to enable selection through the keyboard,\n> once values are choosen a `change` event is fired with the current selection.\n> You can use CSS to hide those inputs and render the items by using `:focus` and `:checked` selectors.\n\nAvailable props:\n\n- `{id}` &mdash; Used `id` for the inner `<input />` element\n- `{pk}` &mdash; Property to identify each item from `data` list, default is `id`\n- `{keys}` &mdash; Properties to filter-out when searching for values, default are `['name', 'value']`\n- `{data}` &mdash; Used data-source to retrieve items when searching, it must be an `Array`\n- `{value}` &mdash; This is an `Array` of selected ids from the data-source, can be bound\n- `{class}` &mdash; Used `class` for the inner `<input />` element\n- `{label}` &mdash; Property used to print a human-readable value from each rendered item\n- `{nofilter}` &mdash; its presence will disable the filtering over the passed data-source\n- `{disabled}` &mdash; It just disables the `<input />` field, while disabled options are hidden\n- `{multiple}` &mdash; Enable multiple selection of values (`checkbox` vs `radio`), disabled by default\n- `{autoclose}` &mdash; Close the dropdown on click-selection, it should not work with `multiple` options, disabled by default\n- `{fallback}` &mdash; This message is shown when no results are found while searching\n- `{placeholder}` &mdash; Custom `placeholder` for the `<input />` field\n\nAvailable slots:\n\n- `before` &mdash; Renders before the `<input />` tag\n- `after` &mdash; Renders before the `<input />` tag\n- `item` &mdash; Renders each value, use `let:item` to access its props\n- `empty` &mdash; Renders when no values where found in the data-source\n\n> If you like, place an icon like `<svg slot=\"before\">...</svg>` and it will be positioned inside the `<input />` on its left.\n> Later you can use CSS to customize this through the `[role=search]` selector.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 73],
		[3596, 43],
		[3603, 15],
		[3610, 63],
		[3617, 22],
		[3624, 22],
		[3631, 31],
		[3638, 7],
		[3645, 12],
		[3652, 15],
		[3659, 17],
		[3666, 33],
		[3673, 6],
		[3680, 8],
		[3687, 5],
		[3694, 37],
		[3701, 20],
		[3708, 39],
		[3715, 10],
		[3722, 26],
		[3729, 16],
		[3736, 13],
		[3743, 23],
		[3750, 13],
		[3757, 11],
		[3764, 39],
		[3771, 46],
		[3778, 89],
		[3785, 12],
		[3792, 23],
		[3799, 14],
		[3806, 11],
		[3813, 43],
		[3820, 35],
		[3827, 21],
		[3834, 16],
		[3841, 19],
		[3848, 8],
		[3855, 105],
		[3862, 14],
		[3869, 18],
		[3876, 25],
		[3883, 16],
		[3890, 60],
		[3897, 38],
		[3904, 29],
		[3911, 10],
		[3918, 10],
		[3925, 12],
		[3932, 12],
		[3939, 17],
		[3946, 87],
		[3953, 21],
		[3960, 43],
		[3967, 10],
		[3974, 9],
		[3981, 11],
		[3988, 8],
		[3995, 21],
		[4002, 11],
		[4009, 13],
		[4016, 12],
		[4023, 8],
		[4030, 23],
		[4037, 15],
		[4044, 66],
		[4051, 24],
		[4058, 27],
		[4065, 42],
		[4072, 65],
		[4079, 19],
		[4086, 29],
		[4093, 17],
		[4100, 79],
		[4107, 19],
		[4114, 19],
		[4121, 33],
		[4128, 10]
	],
	"esm": false,
	"cjs": true
}
