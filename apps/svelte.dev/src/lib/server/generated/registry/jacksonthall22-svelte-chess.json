{
	"name": "@jacksonthall22/svelte-chess",
	"description": "Create fully playable chess components for Svelte.",
	"repo_url": "",
	"authors": ["jacksonthall22"],
	"homepage": "https://github.com/gtim/svelte-chess#readme",
	"downloads": 12,
	"updated": "2024-06-10T16:30:20.418Z",
	"tags": ["ui", "miscellaneous"],
	"typescript": true,
	"version": "0.1.0",
	"svelte_range": "^4.2.12",
	"kit_range": "^2.5.5",
	"last_rune_check_version": "0.1.0",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@jacksonthall22/svelte-chess",
				"version": "0.1.0",
				"size": 39900
			},
			{
				"name": "@jacksonthall22/chess.ts",
				"version": "0.1.12",
				"size": 691597
			},
			{
				"name": "@jacksonthall22/svelte-chessground",
				"version": "0.0.2",
				"size": 95839
			},
			{
				"name": "chessground",
				"version": "8.4.0",
				"size": 333656
			},
			{
				"name": "@sveltejs/vite-plugin-svelte",
				"version": "3.1.2",
				"size": 126232
			},
			{
				"name": "debug",
				"version": "4.4.0",
				"size": 42798
			},
			{
				"name": "ms",
				"version": "2.1.3",
				"size": 6721
			},
			{
				"name": "kleur",
				"version": "4.1.5",
				"size": 20250
			},
			{
				"name": "vitefu",
				"version": "0.2.5",
				"size": 19174
			},
			{
				"name": "deepmerge",
				"version": "4.3.1",
				"size": 31157
			},
			{
				"name": "svelte-hmr",
				"version": "0.16.0",
				"size": 75417
			},
			{
				"name": "magic-string",
				"version": "0.30.17",
				"size": 467464
			},
			{
				"name": "@jridgewell/sourcemap-codec",
				"version": "1.5.0",
				"size": 112815
			},
			{
				"name": "@sveltejs/vite-plugin-svelte-inspector",
				"version": "2.1.0",
				"size": 25824
			}
		],
		"dependencies": [
			[0, 1],
			[0, 2],
			[2, 3],
			[0, 4],
			[4, 5],
			[5, 6],
			[4, 7],
			[4, 8],
			[4, 9],
			[4, 10],
			[4, 11],
			[11, 12],
			[4, 13],
			[13, 5]
		],
		"circular": []
	},
	"readme": "# Svelte-chess: Playable chess component \r\n\r\nFully playable chess component for Svelte.\r\nPowered by\r\n[@jacksonthall22/chess.ts](https://www.npmjs.com/package/@jacksonthall22/chess.ts) logic,\r\n[Chessground](https://github.com/lichess-org/chessground) chessboard\r\nand optionally [Stockfish](https://github.com/official-stockfish/Stockfish) chess AI.\r\n\r\n![Svelte-chess screenshots](https://github.com/gtim/svelte-chess/blob/main/static/screenshot.png?raw=true)\r\n\r\n## Features\r\n\r\n* Track game state via props or detailed events\r\n* Bind to a [`chess.ts`](https://www.npmjs.com/package/@jacksonthall22/chess.ts) `Board` object\r\n* Play against Stockfish\r\n* Undo moves\r\n* Pawn promotion dialog\r\n* Fully restylable\r\n* Typed\r\n\r\n## Usage \r\n\r\nInstallation:\r\n\r\n```sh\r\nnpm install @jacksonthall22/svelte-chess\r\n```\r\n\r\nBasic playable chessboard ([REPL](https://svelte.dev/repl/b1a489538165489aa2720a65b476a58b?version=3.59.1)):\r\n\r\n```svelte\r\n<script>\r\n  import { Chess } from '@jacksonthall22/svelte-chess'\r\n</script>    \r\n<Chess />\r\n```\r\n\r\nInteract with the game via [props](#props), [methods](#methods) or [events](#events).\r\n\r\n### Props\r\n\r\nGame state can be observed by binding to props. \r\n\r\n| Prop               | Bindable and readable | Writable | Value                                                                                    |\r\n| ------------------ | :-------------------: | :------: | -----------------------------------------------------------------------------------------|\r\n| `board`            |           ✓           |    ✓     | Current position in [FEN](https://www.chessprogramming.org/Forsyth-Edwards_Notation)    |\r\n| `orientation`      |           ✓           |    ✓     | Orientation of the board (`true` = w, `false` = b).                                     |\r\n| `animationEnabled` |           ✓           |    ✓     | Animate when updating position. Can also be passed manually to `setBoard()`/`setFen()`. |\r\n| `engine`           |                       |    ✓     | Options for the Stockfish chess AI. See [Engine](#engine--stockfish).                   |\r\n| `class`            |                       |    ✓     | CSS class applied to children instead of default (see [Styling](#styling)).             |\r\n\r\nAll readable props are bindable and updated whenever the game state changes.\r\nWritable props are only used when the component is created.\r\n\r\nExample using bindable props to monitor state ([REPL](https://svelte.dev/repl/d0ec69dde1f84390ac8b4d5746db9505?version=3.59.1)):\r\n\r\n```svelte\r\n<script lang='ts'>\r\n  import { Chess } from '@jacksonthall22/svelte-chess'\r\n  import * as chess from '@jacksonthall22/chess.ts'\r\n\r\n  let board = new chess.Board()\r\n\r\n  let sanHistory: string[] = []\r\n  $: {\r\n    board = board\r\n    const tempBoard = new Board()\r\n    sanHistory = board.moveStack.map(move => tempBoard.sanAndPush(move))\r\n  }\r\n</script>\r\n<Chess bind:board />\r\n<p>\r\n  It's move {board.fullmoveNumber} with {chess.COLOR_NAMES[chess.colorIdx(board.turn)]} to move.\r\n  Moves played: {sanHistory.join(' ')}\r\n</p>\r\n```\r\n\r\nStarting from a specific FEN ([REPL](https://svelte.dev/repl/ebce18a71d774b2db987abc71f45648a?version=3.59.1)):\r\n\r\n```svelte\r\n<script lang='ts'>\r\n  import { Board } from '@jacksonthall22/chess.ts'\r\n  import { Chess } from '@jacksonthall22/svelte-chess'\r\n\r\n  let board = new Board(\"rnbqkb1r/1p2pppp/p2p1n2/8/3NP3/2N5/PPP2PPP/R1BQKB1R w KQkq - 0 6\")\r\n</script>\r\n<Chess board={board} />\r\n```\r\n\r\n### Methods\r\n\r\nThe board state can be read and manipulated via method calls to the Chess component itself. \r\n\r\n\r\nMethods for manipulating game/board state:\r\n\r\n* `push( move: chess.Move )`: Make a move programmatically. Argument is a move object, e.g. `chess.Move.fromUci('e2e4')`. Throws an error if the move is illegal or malformed.\r\n* `pushUci( uci: string )`: Make a move programmatically from the UCI, e.g. `'e2e4'`.\r\n* `pushSan( san: string )`: Make a move programmatically from the SAN, e.g. `'e4'`.\r\n* `setBoard( board: chess.Board )`: Loads a position from a new `chess.Board` object.\r\n* `setFen( fen: string )`: Loads a position from a FEN. Throws an error if the FEN could not be parsed.\r\n* `reset()`: Loads the starting position.\r\n* `pop()`: Pops and returns the last `chess.Move` from the board's move stack.\r\n* `toggleOrientation()`: Flips the board.\r\n* `makeEngineMove()`: Make the best move according to the engine. See [Engine / Stockfish](#engine--stockfish) for loading the engine.\r\n\r\nExample implementing undo/reset buttons ([REPL](https://svelte.dev/repl/7dd7b6454b12466e90ac78a842151311?version=3.59.1)):\r\n\r\n```svelte\r\n<script>\r\n  import { Chess } from '@jacksonthall22/svelte-chess'\r\n  let chess;\r\n</script>    \r\n<Chess bind:this={chess}/>\r\n<button on:click={()=>chess?.reset()}>Reset</button>\r\n<button on:click={()=>chess?.pop()}>Undo</button>\r\n```\r\n\r\n### Events\r\n\r\nA `ready` event is dispatched when the Chess component is ready for interaction,\r\nwhich is generally immediately on mount. If an [engine](#engine--stockfish) was\r\nspecified, the event is dispatched after engine initialisation, which might take\r\na second.\r\n\r\nA `move` event is dispatched after every move, containing the corresponding [Move object](#move).\r\n\r\nA `gameOver` event is emitted after a move that ends the game. The GameOver object has two keys:\r\n* `reason`: `checkmate`, `stalemate`, `repetition`, `insufficient material` or `fifty-move rule`.\r\n* `result`: 1 for White win, 0 for Black win, or 0.5 for a draw.\r\n\r\nA `uci` event is emitted when Stockfish, if enabled, sends a UCI message.\r\n\r\nExample listening for `move` and `gameOver` events ([REPL](https://svelte.dev/repl/6fc2874d1a594d76aede4834722e4f83?version=3.59.1)):\r\n\r\n```svelte\r\n<script>\r\n  import { Chess } from '@jacksonthall22/svelte-chess'\r\n  import { Board } from '@jacksonthall22/chess.ts'\r\n  \r\n  let board = new Board();\r\n\r\n  function moveListener(event) {\r\n    const move = event.detail;\r\n    console.log(`${board.turn} played ${board.san(move)}`);\r\n  }\r\n\r\n  function gameOverListener(event) {\r\n    console.log(`The game ended due to ${event.detail.reason}`);\r\n  }\r\n</script>\r\n<Chess bind:board on:move={moveListener} on:gameOver={gameOverListener} />\r\n```\r\n\r\nSvelte-chess exports the `MoveEvent`, `GameOverEvent`, `ReadyEvent` and `UciEvent` types.\r\n\r\n### Engine / Stockfish\r\n\r\nSvelte-chess can be used to play against the chess AI Stockfish 14. You need to download the Stockfish web worker script separately: [stockfish.js web worker (1.6MB)](https://raw.githubusercontent.com/gtim/svelte-chess/stockfish/static/stockfish.js) and serve it at `/stockfish.js`. If you're using SvelteKit, do this by putting it in the static folder.\r\n\r\nExample playing Black versus Stockfish ([live](https://gtim.github.io/svelte-chess/stockfish)):\r\n\r\n```svelte\r\n<script>\r\n  import Chess, { Engine } from '@jacksonthall22/svelte-chess';\r\n  // Note: stockfish.js must be manually downloaded (see Readme)\r\n</script>\r\n<Chess engine={new Engine({depth: 20, moveTime: 1500, color: 'w'})} />\r\n```\r\n\r\nThe `engine` prop is an object with the following keys, all optional:\r\n\r\n| Key         | Default | Description                                                                 |\r\n| ----------- | ------- | --------------------------------------------------------------------------- |\r\n| `color`     | `b`     | Color the engine plays: `w` or `b`, or `both` for an engine-vs-engine game, or `none` if the engine should only make a move when `makeEngineMove()` is called. | \r\n| `moveTime`  | 2000    | Max time in milliseconds for the engine to spend on a move.                 |\r\n| `depth`     | 40      | Max depth in ply for the engine to search.                                  |\r\n\r\nTo inspect Stockfish's current evaluation and other engine details, you can listen to `uci` events from the Chess component to read all [UCI](https://www.chessprogramming.org/UCI) messages sent by Stockfish.\r\n\r\n### Styling\r\n\r\nThe stylesheet shipped with Chessground is used by default. To restyle the \r\nboard, pass the `class` prop and import a stylesheet.\r\n\r\nExample with custom stylesheet:\r\n\r\n```svelte\r\n<script>\r\n  import { Chess } from '@jacksonthall22/svelte-chess'\r\n</script>\r\n<link rel=\"stylesheet\" href=\"/my-style.css\" />\r\n<Chess class=\"my-class\" />\r\n```\r\n\r\nA sample stylesheet can be found in [/static/style-paper.css](https://github.com/gtim/svelte-chess/blob/main/static/style-paper.css).\r\n\r\n## Future\r\n\r\n* Programmatically draw arrows/circles on the board\r\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3771, 2],
		[3778, 2],
		[3785, 1],
		[3792, 1],
		[3799, 8],
		[3806, 14],
		[3813, 139],
		[3820, 9],
		[3827, 6],
		[3834, 21],
		[3841, 4],
		[3848, 7],
		[3855, 9],
		[3862, 11],
		[3876, 1],
		[3883, 4],
		[3890, 5],
		[3897, 3],
		[3904, 2],
		[3911, 1],
		[3918, 6],
		[3925, 1],
		[3932, 4],
		[3939, 2],
		[3946, 1],
		[3953, 1],
		[3960, 1],
		[3967, 1],
		[3974, 2],
		[3988, 5],
		[3995, 2],
		[4002, 3],
		[4009, 1],
		[4016, 7],
		[4023, 9],
		[4037, 8],
		[4044, 11],
		[4051, 1],
		[4058, 1],
		[4072, 1],
		[4079, 6],
		[4086, 4],
		[4093, 7],
		[4100, 3],
		[4107, 15],
		[4114, 12],
		[4121, 6],
		[4128, 1]
	]
}
