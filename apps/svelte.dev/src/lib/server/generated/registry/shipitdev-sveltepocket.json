{
	"name": "@shipitdev/sveltepocket",
	"description": "Query data from PocketBase instance into Svelte apps.",
	"repo_url": "https://github.com/brennerm/sveltepocket",
	"authors": ["shipitdev"],
	"homepage": "https://github.com/brennerm/sveltepocket#readme",
	"downloads": 35,
	"updated": "2025-04-29T08:25:32.648Z",
	"tags": ["integration"],
	"github_stars": 13,
	"typescript": true,
	"version": "1.0.11",
	"svelte_range": "^5.0.0",
	"kit_range": "^2.16.0",
	"last_rune_check_version": "1.0.11",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@shipitdev/sveltepocket",
				"version": "1.0.11",
				"size": 23885
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# SveltePocket\n\n![The Svelte and Pocketbase logo shaking hands](https://github.com/brennerm/sveltepocket/blob/main/logo.png?raw=true)\n\nSvelte 5-ready stores and components to bring data from any Pocketbase instance into your Svelte application (even with realtime updates ðŸ¤«).\n\n## Installation\n\n```bash\nnpm install @shipitdev/sveltepocket\n```\n\n## Setup\n\nCall the init method to pass your Pocketbase client SDK instance. This will be used by all stores and components so make sure it's authenticated according to your needs.\n\n```svelte\n<script>\n  import { init } from '@shipitdev/sveltepocket';\n  import Pocketbase from 'pocketbase';\n\n  const pb = new Pocketbase(POCKETBASE_URL);\n  init(pb);\n</script>\n```\n\n## Stores\n\nThe stores provide an low level API to query data from your Pocketbase instance and are the best choice when you need to pre/postprocess the data instead of just rendering it onto the page.\n\n### auth\n\nA readable store that holds the current user's authentication status and user record.\n\n```svelte\n<script>\n  import { auth } from '@shipitdev/sveltepocket';\n</script>\n\n{#if $auth.isAuthenticated}\n  <p>Welcome, {$auth.user.email}!</p>\n{/if}\n```\n\n### createRecordStore\n\nCreates a readable store that fetches a single record identified by id or filter from a Pocketbase collection.\n\n```svelte\n<script>\n  import { createRecordStore } from '@shipitdev/sveltepocket';\n\n  const post = createRecordStore('posts', { id: 'YOUR_RECORD_ID' });\n</script>\n\n{#if $post.record}\n  <h1>{$post.record.title}</h1>\n{/if}\n```\n\n### createRecordsStore\n\nCreates a readable store that fetches multiple records from a Pocketbase collection.\n\n```svelte\n<script>\n  import { createRecordsStore } from '@shipitdev/sveltepocket';\n\n  const posts = createRecordsStore('posts');\n</script>\n\n{#if $posts.records}\n  <ul>\n    {#each $posts.records as post}\n      <li>{post.title}</li>\n    {/each}\n  </ul>\n{/if}\n```\n\n## Components\n\nIf you only care about rendering the queried data, these components are the way to go.\n\nYou can pass snippets that will be rendered during different states, e.g. when loading the data, when data is not found or when an error occurs.\n\n### \\<Record>\n\nA component that fetches a single record either by ID or filter from a Pocketbase collection and renders it.\n\n```svelte\n<!-- by ID -->\n<Record collection=\"posts\" id=\"YOUR_RECORD_ID\" expand=\"author\">\n  {#snippet render(post)}\n    <h1>{post.title}</h1>\n    <span> by {post.expand.author.name}</span>\n  {/snippet}\n</Record>\n\n<!-- by filter -->\n<Record collection=\"posts\" filter=\"published = true\">\n  {#snippet render(post)}\n    <h1>{post.title}</h1>\n  {/snippet}\n</Record>\n```\n\n### \\<Records>\n\nA component that fetches multiple records from a Pocketbase collection and renders them.\n\n```svelte\n<Records collection=\"posts\" expand=\"author\" sort=\"-publishedAt\" filter=\"published = true\">\n  {#snippet render(posts)}\n    <ul>\n      {#each posts as post}\n        <li>{post.title} by {post.expand.author.name}</li>\n      {/each}\n    </ul>\n  {/snippet}\n</Records>\n```\n\n## Realtime Updates\n\nAll stores and components support the `realtime` parameter. If set to `true`, SveltePocket will setup a subscription to PocketBase's realtime updates and keep the data up to date.\n\nCombined with Svelte's reactivity, your app will rerender automatically when the data changes.\n\n```svelte\n<!-- this will always show the latest data -->\n<Records collection=\"posts\" realtime>\n  {#snippet render(posts)}\n    <ul>\n      {#each posts as post}\n        <li>{post.title}</li>\n      {/each}\n    </ul>\n  {/snippet}\n</Records>\n```\n\n## Type Safety\n\nAll stores and components take an optional record type, e.g. generated by [pocketbase-typegen](https://github.com/patmood/pocketbase-typegen).\nThis gives you full type safety on the returned records.\n\n### Store\n\n```svelte\n<script>\n  import { createRecordsStore } from '@shipitdev/sveltepocket';\n  import type { PostRecord } from './pocketbase-types.d.ts';\n\n  const posts = createRecordsStore<PostRecord>('posts');\n</script>\n```\n\n### Components\n\n```svelte\n<Records collection=\"posts\">\n  {#snippet render(records: PostRecord[])}\n    ...\n  {/snippet}\n</Records>\n```\n",
	"legacy_svelte": false,
	"downloads_history": [
		[4065, 51],
		[4072, 429],
		[4079, 91],
		[4086, 113],
		[4093, 53],
		[4100, 47],
		[4107, 90],
		[4114, 35],
		[4121, 8],
		[4128, 7]
	],
	"esm": true,
	"cjs": false
}
