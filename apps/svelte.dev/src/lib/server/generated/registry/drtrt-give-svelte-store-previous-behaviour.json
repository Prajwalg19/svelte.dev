{
	"name": "@drtrt/give-svelte-store-previous-behaviour",
	"description": "Give Svelte stores access to previous values.",
	"repo_url": "https://github.com/drtrt-org/give-svelte-store-previous-behaviour",
	"authors": ["drtrt-admin"],
	"homepage": "https://github.com/drtrt-org/give-svelte-store-previous-behaviour#readme",
	"downloads": 18,
	"updated": "2024-09-16T09:36:54.285Z",
	"tags": ["miscellaneous"],
	"github_stars": 0,
	"typescript": true,
	"version": "1.2.1",
	"svelte_range": "3 || 4",
	"last_rune_check_version": "1.2.1",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@drtrt/give-svelte-store-previous-behaviour",
				"version": "1.2.1",
				"size": 21161
			}
		],
		"dependencies": [],
		"circular": []
	},
	"legacy_svelte": false,
	"readme": "# give-svelte-store-previous-behaviour\n\n[![CI status](https://img.shields.io/badge/ci-passing-green)](https://github.com/drtrt-org/give-svelte-store-previous-behaviour/actions/workflows/CI.yml)\n[![NPM version](https://img.shields.io/npm/v/@drtrt/give-svelte-store-previous-behaviour)](https://www.npmjs.com/package/@drtrt/give-svelte-store-previous-behaviour)\n[![License](https://img.shields.io/npm/l/@drtrt/give-svelte-store-previous-behaviour)](./LICENSE)\n[![NPM bundle size analysis](https://img.shields.io/bundlephobia/minzip/@drtrt/give-svelte-store-previous-behaviour)](https://bundlephobia.com/package/@drtrt/give-svelte-store-previous-behaviour)\n\nA wrapper for any Svelte Store instance that gives access to the previously set value, using a style that follows familiar Svelte Store semantics.\n\n| _`@drtrt/give-svelte-store-previous-behaviour` is used to log state changes in [Fluent API Generator](https://www.fluentapigen.com)_ |\n| :----------------------------------------------------------------------------------------------------------------------------------- |\n\n<br/>\n\n## It's a wrap\n\n`@drtrt/give-svelte-store-previous-behaviour` does not instantiate a Store. Rather, **_it wraps an existing Store_**, leaving you with full control over how your Store is instantiated. This is important because:\n\n-   You are not prevented from further adding your own augmentations to the Store, either _before_ it has been given Previous Behaviour or _after_.\n\n-   It allows you to apply other wrappers, too, such as [@drtrt/give-svelte-store-persistence-behaviour](https://www.npmjs.com/package/@drtrt/give-svelte-store-persistence-behaviour).\n\nThis philosophy allows for a flexible, compositional approach, as is used in the [core Svelte Store code](https://github.com/sveltejs/svelte/blob/master/packages/svelte/src/runtime/store/index.js) that creates `readable` and `derived` Stores.\n\n## Examples\n\nOnce wrapped with Previous Behaviour, a Store gains three extra pieces of functionality:\n\n### `getPrevious`\n\nUse of `getPrevious` follows the same pattern as Svelte's native Store `get` function:\n\n```JavaScript\nimport { writable, set, get } from \"svelte/store\";\n\nimport {\n    giveSvelteStorePreviousBehaviour,\n    getPrevious\n} from \"@drtrt/give-svelte-store-previous-behaviour\";\n\n// Initialise a `writable` store and then wrap it:\nconst storeWithPrevious =\n    giveSvelteStorePreviousBehaviour(\n        writable(\"firstValue\")\n    );\n\n// Set the store to a new value:\nstoreWithPrevious.set(\"secondValue\");\n\n// Use `get` to get the current value:\nconsole.log(get(storeWithPrevious));\n// Output: secondValue\n\n// Use `getPrevious` to get the previous value:\nconsole.log(getPrevious(storeWithPrevious));\n// Output: firstValue\n```\n\nAdditional points to consider for `getPrevious`:\n\n-   Until the Store's value has changed at least once after initialisation, `getPrevious` will return `undefined`.\n-   As [per the Svelte guidance](https://svelte.dev/docs/svelte-store#get) for using `get`, one would usually read the Previous Value by subscribing to the Store rather than using `getPrevious`.\n\n### Extra `subscribe` parameter\n\nThe Store's `subscribe` function will, in addition to its existing `value` parameter, gain an extra `previousValue` parameter:\n\n```JavaScript\nimport { writable } from \"svelte/store\";\n\nimport {\n    giveSvelteStorePreviousBehaviour\n} from \"@drtrt/give-svelte-store-previous-behaviour\";\n\n// Example function imported from a logging utility\nimport { logStateChange } from \"./logging\";\n\n// Initialise a `writable` store, and then wrap it:\nconst storeWithPrevious =\n    giveSvelteStorePreviousBehaviour(\n        writable(\"firstValue\")\n    );\n\n// Use `subscribe` to log changes to state:\nstoreWithPrevious.subscribe((value, previousValue) =>\n    logStateChange({\n        storeName: \"storeWithPrevious\",\n        from: value,\n        to: previousValue\n    }));\n```\n\n`subscribe` can still be used as normal:\n\n```JavaScript\nstoreWithPrevious.subscribe((value) =>\n    console.info(`Store value changed to ${value}`));\n```\n\nConsiderations for using `subscribe`:\n\n-   Until the Store's value has changed at least once after initialisation, the `previousValue` parameter passed to `subscribe` will be `undefined`.\n\n### `previousValueStore`\n\nThe Store will have an additional `previousValueStore` property that yields a `Readable` store containing the previous value. This is so you can use Reactive Bindings for the previous value, too:\n\n```HTML\n<script>\n    import { writable } from \"svelte/store\";\n\n    import {\n        giveSvelteStorePreviousBehaviour\n    } from \"@drtrt/give-svelte-store-previous-behaviour\";\n\n    // Initialise a `writable` store, and then wrap it:\n    const booleanStore =\n        giveSvelteStorePreviousBehaviour(\n            writable(true)\n        );\n\n    function flipBoolean() {\n        booleanStore.update(x => !x);\n    }\n\n    // Get `previousValueStore`\n    const { previousValueStore } = booleanStore;\n</script>\n\n<div>\n    Current Boolean Value is: {$booleanStore}\n</div>\n\n<div>\n    Previous Boolean Value was: {$previousValueStore}\n</div>\n\n<button on:click={flipBoolean}>\n    Flip Boolean\n</button>\n```\n\nFurther considerations for using `previousValueStore`:\n\n-   Until the Store's value has changed at least once after initialisation, the value of `previousValueStore` will be `undefined`.\n-   `previousValueStore` instantiation is optimized such that it is created when accessed, and not before.\n-   `previousValueStore` can be retrieved before or after a store change; it will still hold the correct Previous Value at the time it is accessed.\n\n## Installation\n\n#### NPM\n\n```sh\nnpm install @drtrt/give-svelte-store-previous-behaviour\n```\n\n#### Yarn\n\n```sh\nyarn add @drtrt/give-svelte-store-previous-behaviour\n```\n\nAnd then `giveSvelteStorePreviousBehaviour` can be used thusly:\n\n#### ECMAScript Modules (ESM)\n\n```javascript\nimport { giveSvelteStorePreviousBehaviour } from \"@drtrt/give-svelte-store-previous-behaviour\";\n```\n\n#### CommonJS (CJS)\n\n```javascript\nconst { giveSvelteStorePreviousBehaviour } = require(\"@drtrt/give-svelte-store-previous-behaviour\");\n```\n\n## Types\n\nA full set of types is available for TypeScript consumers.\n\nFull detail is available in the [dedicated Types documentation](https://github.com/drtrt-org/give-svelte-store-previous-behaviour/blob/main/docs/README.md).\n\n## Questions\n\n### Why did you spell 'behaviour' wrongly?\n\n#### **Answer:** I didn't. ðŸ˜‰\n\n## Release History\n\nThe Change Log for this package is available in the GitHub Repo, [here](https://github.com/drtrt-org/give-svelte-store-previous-behaviour/blob/main/CHANGELOG.md).\n",
	"downloads_history": [
		[3589, 128],
		[3596, 255],
		[3603, 27],
		[3610, 10],
		[3617, 125],
		[3624, 11],
		[3631, 3],
		[3638, 5],
		[3645, 2],
		[3652, 14],
		[3659, 9],
		[3666, 38],
		[3673, 4],
		[3687, 1],
		[3694, 1],
		[3708, 10],
		[3715, 2],
		[3722, 7],
		[3729, 1],
		[3736, 2],
		[3743, 2],
		[3750, 1],
		[3764, 4],
		[3771, 4],
		[3778, 6],
		[3785, 9],
		[3792, 1],
		[3806, 2],
		[3813, 6],
		[3820, 1],
		[3827, 1],
		[3834, 18],
		[3841, 1],
		[3848, 19],
		[3855, 25],
		[3862, 33],
		[3869, 17],
		[3876, 31],
		[3883, 315],
		[3890, 188],
		[3897, 88],
		[3904, 76],
		[3911, 162],
		[3918, 3],
		[3925, 10],
		[3932, 27],
		[3939, 38],
		[3946, 16],
		[3953, 26],
		[3960, 6],
		[3967, 3],
		[3974, 3],
		[3981, 3],
		[3995, 2],
		[4002, 13],
		[4009, 2],
		[4016, 3],
		[4023, 12],
		[4030, 4],
		[4037, 4],
		[4044, 19],
		[4051, 7],
		[4058, 1],
		[4065, 3],
		[4072, 1],
		[4086, 21],
		[4093, 19],
		[4100, 19],
		[4107, 62],
		[4114, 18],
		[4121, 26],
		[4128, 7]
	],
	"esm": true,
	"cjs": true
}
