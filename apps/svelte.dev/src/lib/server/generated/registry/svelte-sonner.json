{
	"name": "svelte-sonner",
	"description": "Create toast notifications in Svelte apps.",
	"repo_url": "",
	"authors": ["wobsoriano"],
	"downloads": 64795,
	"updated": "2024-09-12T19:45:04.149Z",
	"tags": ["ui", "miscellaneous"],
	"typescript": true,
	"version": "0.3.28",
	"svelte_range": "^3.0.0 || ^4.0.0 || ^5.0.0-next.1",
	"kit_range": "^2.0.0",
	"last_rune_check_version": "0.3.28",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-sonner",
				"version": "0.3.28",
				"size": 71425
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "https://github.com/wobsoriano/svelte-sonner/assets/13049130/4b9c250f-1431-4130-9c5b-5a4f8b0210c5\n\n# svelte-sonner\n\n[![pnpm](https://img.shields.io/badge/maintained%20with-pnpm-cc00ff.svg?style=for-the-badge&logo=pnpm)](https://pnpm.io/)\n\nAn opinionated toast component for Svelte.\n\nBased on [emilkowalski](https://github.com/emilkowalski)'s React [implementation](https://sonner.emilkowal.ski/).\n\n## Quick start\n\nInstall it:\n\n```bash\nnpm i svelte-sonner\n# or\nyarn add svelte-sonner\n# or\npnpm add svelte-sonner\n```\n\nAdd `<Toaster />` to your app, it will be the place where all your toasts will be rendered. After that, you can use `toast()` from anywhere in your app.\n\n```svelte\n<script>\n\timport { Toaster, toast } from 'svelte-sonner';\n</script>\n\n<Toaster />\n<button on:click={() => toast('My first toast')}>Give me a toast</button>\n```\n\n## Types\n\n### Default\n\nMost basic toast. You can customize it (and any other type) by passing an options object as the second argument.\n\n```js\ntoast('Event has been created');\n```\n\nWith custom icon and description:\n\n```js\nimport Icon from './Icon.svelte';\n\ntoast('Event has been created', {\n\tdescription: 'Monday, January 3rd at 6:00pm',\n\ticon: Icon\n});\n```\n\n### Success\n\nRenders a checkmark icon in front of the message.\n\n```js\ntoast.success('Event has been created');\n```\n\n### Info\n\nRenders a question mark icon in front of the message.\n\n```js\ntoast.info('Event has new information');\n```\n\n### Warning\n\nRenders a warning icon in front of the message.\n\n```js\ntoast.warning('Event has warning');\n```\n\n### Error\n\nRenders an error icon in front of the message.\n\n```js\ntoast.error('Event has not been created');\n```\n\n### Action\n\nRenders a button.\n\n```js\ntoast('Event has been created', {\n\taction: {\n\t\tlabel: 'Undo',\n\t\tonClick: () => console.log('Undo')\n\t}\n});\n```\n\n### Promise\n\nStarts in a loading state and will update automatically after the promise resolves or fails.\n\n```js\ntoast.promise(() => new Promise((resolve) => setTimeout(resolve, 2000)), {\n\tloading: 'Loading',\n\tsuccess: 'Success',\n\terror: 'Error'\n});\n```\n\nYou can pass a function to the success/error messages to incorporate the result/error of the promise.\n\n```js\ntoast.promise(promise, {\n\tloading: 'Loading...',\n\tsuccess: (data) => {\n\t\treturn `${data.name} has been added!`;\n\t},\n\terror: 'Error'\n});\n```\n\n### Custom Component\n\nYou can pass a component as the first argument instead of a string to render custom component while maintaining default styling. You can use the headless version below for a custom, unstyled toast.\n\n```js\ntoast(CustomComponent);\n```\n\n### Updating a toast\n\nYou can update a toast by using the `toast` function and passing it the id of the toast you want to update, the rest stays the same.\n\n```js\nconst toastId = toast('Sonner');\n\ntoast.success('Toast has been updated', {\n\tid: toastId\n});\n```\n\n## Customization\n\n### Headless\n\nYou can use `toast.custom` to render an unstyled toast with custom component while maintaining the functionality.\n\n```svelte\n<script>\n\timport { createEventDispatcher } from 'svelte';\n\n\tconst dispatch = createEventDispatcher();\n</script>\n\n<div>\n\tThis is a custom component <button on:click={() => dispatch('closeToast')}>close</button>\n</div>\n```\n\n```js\nimport HeadlessToast from './HeadlessToast.svelte';\n\ntoast.custom(HeadlessToast);\n```\n\n### Theme\n\nYou can change the theme using the `theme` prop. Default theme is light.\n\n```svelte\n<Toaster theme=\"dark\" />\n```\n\n### Position\n\nYou can change the position through the `position` prop on the `<Toaster />` component. Default is `bottom-right`.\n\n```svelte\n<!-- Available positions -->\n<!-- top-left, top-center, top-right, bottom-left, bottom-center, bottom-right -->\n\n<Toaster position=\"top-center\" />\n```\n\n### Expanded\n\nToasts can also be expanded by default through the `expand` prop. You can also change the amount of visible toasts which is 3 by default.\n\n```svelte\n<Toaster expand visibleToasts={9} />\n```\n\n### Styling\n\nStyling can be done globally via `toastOptions`, this way every toast will have the same styling.\n\n```svelte\n<Toaster\n\ttoastOptions={{\n\t\tstyle: 'background: red;',\n\t\tclass: 'my-toast',\n\t\tdescriptionClass: 'my-toast-description'\n\t}}\n/>\n```\n\nYou can also use the same props when calling `toast` to style a specific toast.\n\n```js\ntoast('Event has been created', {\n\tstyle: 'background: red;',\n\tclass: 'my-toast',\n\tdescriptionClass: 'my-toast-description'\n});\n```\n\n### Tailwind CSS\n\nThe preferred way to style the toasts with tailwind is by using the `unstyled` prop. That will give you an unstyled toast which you can then style with tailwind.\n\n```svelte\n<Toaster\n\ttoastOptions={{\n\t\tunstyled: true,\n\t\tclasses: {\n\t\t\ttoast: 'bg-blue-400',\n\t\t\ttitle: 'text-red-400',\n\t\t\tdescription: 'text-red-400',\n\t\t\tactionButton: 'bg-zinc-400',\n\t\t\tcancelButton: 'bg-orange-400',\n\t\t\tcloseButton: 'bg-lime-400'\n\t\t}\n\t}}\n/>\n```\n\nYou can do the same when calling `toast()`.\n\n```js\ntoast('Hello World', {\n\tunstyled: true,\n\tclasses: {\n\t\ttoast: 'bg-blue-400',\n\t\ttitle: 'text-red-400 text-2xl',\n\t\tdescription: 'text-red-400',\n\t\tactionButton: 'bg-zinc-400',\n\t\tcancelButton: 'bg-orange-400',\n\t\tcloseButton: 'bg-lime-400'\n\t}\n});\n```\n\nStyling per toast type is also possible.\n\n```svelte\n<Toaster\n\ttoastOptions={{\n\t\tunstyled: true,\n\t\tclasses: {\n\t\t\terror: 'bg-red-400',\n\t\t\tsuccess: 'text-green-400',\n\t\t\twarning: 'text-yellow-400',\n\t\t\tinfo: 'bg-blue-400'\n\t\t}\n\t}}\n/>\n```\n\n### Changing Icon\n\nYou can change the default icons using slots:\n\n```svelte\n<Toaster>\n\t<LoadingIcon slot=\"loading-icon\" />\n\t<SuccessIcon slot=\"success-icon\" />\n\t<ErrorIcon slot=\"error-icon\" />\n\t<InfoIcon slot=\"info-icon\" />\n\t<WarningIcon slot=\"warning-icon\" />\n</Toaster>\n```\n\n### Close button\n\nAdd a close button to all toasts that shows on hover by adding the `closeButton` prop.\n\n```svelte\n<Toaster closeButton />\n```\n\n### Rich colors\n\nYou can make error and success state more colorful by adding the `richColors` prop.\n\n```svelte\n<Toaster richColors />\n```\n\n### Custom offset\n\nOffset from the edges of the screen.\n\n```svelte\n<Toaster offset=\"80px\" />\n```\n\n### Programmatically remove toast\n\nTo remove a toast programmatically use `toast.dismiss(id)`.\n\n```js\nconst toastId = toast('Event has been created');\n\ntoast.dismiss(toastId);\n```\n\nTo remove a toast from inside a custom component, dispatch `closeToast`:\n\n```js\nimport { createEventDispatcher } from 'svelte';\n\nconst dispatch = createEventDispatcher();\n\ndispatch('closeToast');\n```\n\nYou can also dismiss all toasts at once by calling `toast.dismiss()` without an id.\n\n```js\ntoast.dismiss();\n```\n\n### Duration\n\nYou can change the duration of each toast by using the `duration` property, or change the duration of all toasts like this:\n\n```svelte\n<Toaster duration={10000} />\n```\n\n```js\ntoast('Event has been created', {\n\tduration: 10000\n});\n\n// Persisent toast\ntoast('Event has been created', {\n\tduration: Number.POSITIVE_INFINITY\n});\n```\n\n### On Close Callback\n\nYou can pass `onDismiss` and `onAutoClose` callbacks. `onDismiss` gets fired when either the close button gets clicked or the toast is swiped. `onAutoClose` fires when the toast disappears automatically after it's timeout (`duration` prop).\n\n```js\ntoast('Event has been created', {\n\tonDismiss: (t) => console.log(`Toast with id ${t.id} has been dismissed`),\n\tonAutoClose: (t) => console.log(`Toast with id ${t.id} has been closed automatically`)\n});\n```\n\n## Keyboard focus\n\nYou can focus on the toast area by pressing ‚å•/alt + T. You can override it by providing an array of `event.code` values for each key.\n\n```svelte\n<Toaster hotkey={['KeyC']} />\n```\n\n## License\n\nMIT\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 984],
		[3603, 878],
		[3610, 1002],
		[3617, 1305],
		[3624, 1238],
		[3631, 1526],
		[3638, 1284],
		[3645, 1531],
		[3652, 2332],
		[3659, 3329],
		[3666, 3869],
		[3673, 5292],
		[3680, 5226],
		[3687, 6283],
		[3694, 7247],
		[3701, 8225],
		[3708, 9690],
		[3715, 11487],
		[3722, 12294],
		[3729, 11797],
		[3736, 11956],
		[3743, 15002],
		[3750, 16627],
		[3757, 20989],
		[3764, 23915],
		[3771, 21520],
		[3778, 22393],
		[3785, 22196],
		[3792, 23114],
		[3799, 21556],
		[3806, 25713],
		[3813, 26357],
		[3820, 24065],
		[3827, 25100],
		[3834, 23908],
		[3841, 25355],
		[3848, 26279],
		[3855, 26320],
		[3862, 28319],
		[3869, 28647],
		[3876, 29963],
		[3883, 31501],
		[3890, 33500],
		[3897, 33588],
		[3904, 33631],
		[3911, 34616],
		[3918, 38345],
		[3925, 36335],
		[3932, 39395],
		[3939, 41154],
		[3946, 42361],
		[3953, 41914],
		[3960, 37504],
		[3967, 37567],
		[3974, 40502],
		[3981, 41399],
		[3988, 42009],
		[3995, 40764],
		[4002, 39151],
		[4009, 24853],
		[4016, 30481],
		[4023, 43785],
		[4030, 48038],
		[4037, 49786],
		[4044, 57829],
		[4051, 60349],
		[4058, 64747],
		[4065, 63389],
		[4072, 63339],
		[4079, 63083],
		[4086, 61550],
		[4093, 61569],
		[4100, 62608],
		[4107, 63967],
		[4114, 64795],
		[4121, 58414],
		[4128, 56804],
		[4135, 54008]
	],
	"esm": true,
	"cjs": false
}
