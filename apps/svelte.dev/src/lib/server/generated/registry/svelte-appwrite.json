{
	"name": "svelte-appwrite",
	"description": "Integrate Appwrite services into Svelte applications.",
	"repo_url": "",
	"authors": ["eldadfux"],
	"downloads": 6,
	"updated": "2021-05-13T07:39:47.827Z",
	"tags": ["integration"],
	"typescript": true,
	"version": "0.2.3-beta",
	"svelte_range": "^3.32.0",
	"last_rune_check_version": "0.2.3-beta",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-appwrite",
				"version": "0.2.3-beta",
				"size": 58288
			},
			{
				"name": "appwrite",
				"version": "2.0.0",
				"size": 170064
			}
		],
		"dependencies": [[0, 1]],
		"circular": []
	},
	"readme": "# svelte-appwrite (Beta)\n\nEasy to use [Appwrite](https://appwrite.io/) components for Svelte. Install it:\n\n```bash\nnpm install svelte-appwrite\n# or \nyarn svelte-appwrite\n```\n\n# Table of contents\n\n- [Usage](#usage)\n  - [Initialize](#initialize)\n  - [Create user](#create-user)\n  - [Login via Email](#login-via-email)\n  - [Login via OAuth2](#login-via-oauth2)\n  - [Get user](#get-user)\n  - [Get Collection](#get-collection)\n  - [Get Document](#get-document)\n- [API](#api)\n  - [Account](#account)\n    - [`<User />`](#user-)\n    - [`<Create />`](#create-)\n    - [`<Delete />`](#delete-)\n    - [`<Preferences />`](#preferences-)\n    - [`<RecoverPassword />`](#recoverpassword-)\n    - [`<Update />`](#update-)\n  - [Auth](#auth)\n    - [`<AuthEmail />`](#authemail-)\n    - [`<AuthOAuth2 />`](#authoauth2-)\n  - [Avatars](#avatars)\n    - [`<Browser />`](#browser-)\n    - [`<CreditCard />`](#creditcard-)\n    - [`<Favicon />`](#favicon-)\n    - [`<Flag />`](#flag-)\n    - [`<Image />`](#image-)\n    - [`<QR />`](#qr-)\n  - [Database](#database)\n    - [`<Collection />`](#collection-)\n    - [`<Document />`](#document-)\n  - [Storage](#storage)\n    - [`<Storage />`](#storage-)\n    - [`<FileList />`](#filelist-)\n    - [`<File />`](#file-)\n  - [Locale](#locale)\n    - [`<Continents />`](#continents-)\n    - [`<Countries />`](#countries-)\n    - [`<Currencies />`](#currencies-)\n    - [`<Locale />`](#locale-)\n    - [`<PhoneCodes />`](#phonecodes-)\n\n# Usage\n\n> You need a running instance of Appwrite to use this library. Go to https://appwrite.io/docs/installation for more instructions.\n\n**Psuedo Example**\n\nHandle multiple levels of async relational data (and their loading & fallback states) entirely from the Svelte HTML. \n\n\n```svelte\n<!-- 1. ðŸ’ª Appwrite App -->\n<Appwrite {...config}>\n\n    <!-- 2. ðŸ˜€ Get the current user -->\n    <User let:user>\n\n        <h1>Hello {user.name}!</h1>\n\n        <!-- 3. ðŸ“š Get all the documents from a collection -->\n        <Collection collection=\"5f56a3035a01f\" let:documents>\n            You have {documents.length} documents.\n            \n            {#each documents as document}\n\n                <!-- 4. ðŸ“œ Get a document -->\n                <Document {document}>\n                    Title: {document.title}\n                    Text: {document.text}\n...\n```\n\n## Initialize\n\nMust be initialised and wrap every `svelte-appwrite` component.\n\n```svelte\n<script>\n  import { Appwrite } from \"svelte-appwrite\";\n\n  const config = {\n    endpoint: \"http://localhost/v1\",\n    project: \"5f4938898667e\",\n    locale: \"de\",\n  };\n</script>\n\n<Appwrite {...config}>\n  ...\n</Appwrite>\n```\n\n### Properties\n| Name | Description |\n| --- | --- |\n| `endpoint` | Your Appwrite endpoint |\n| `project` | Your project ID |\n| `locale` | _Optional_ The users locale |\n\n## Create user\n\nRegisters a new account.\n\n```svelte\n<script>\n  import { Create } from \"svelte-appwrite\";\n\n  let email = \"\";\n  let password = \"\";\n  let name = \"\";\n\n  const success = e => {\n    //success callback\n    // `e` contains the user object\n  };\n\n  const failure = e => {\n    //failure callback\n  }\n</script>\n\n<Create let:actions on:success on:failure>\n  <input type=\"text\" bind:value={email}>\n  <input type=\"password\" bind:value={password}>\n  <input type=\"text\" bind:value={name}>\n  <button on:click={actions.create(email,password, name)}>Register</button>\n</Create>\n```\n\n### Directives\n\n**let:actions** `object`\n\nObject with function.\n\n#### Arguments\n| Name | Description |\n| --- | --- |\n| `create(email, password, name)` | Registers a new user. |\n\n### Events\n\n**on:success**\n\nTriggers on successful register.\n\n#### Arguments\n| Name | Description |\n| --- | --- |\n| `response` | Response |\n\n**on:failure**\n\nTriggers on failed register.\n\n#### Arguments\n| Name | Description |\n| --- | --- |\n| `response` | Response |\n\n## Login via Email\n\nLogin via email and password.\n\n```svelte\n<script>\n  import { AuthEmail } from \"svelte-appwrite\";\n\n  let email = \"\";\n  let password = \"\";\n\n  const success = e => {\n    //success callback\n    // `e` contains the user object\n  };\n\n  const failure = e => {\n    //failure callback\n  }\n</script>\n\n<AuthEmail let:authorize on:success on:failure>\n  <input type=\"text\" bind:value={email}>\n  <input type=\"text\" bind:value={password}>\n  <button on:click={authorize(email,password)}>Login</button>\n</AuthEmail>\n```\n\n### Directives\n\n**let:authorize** `function`\n\nInitiates login.\n\n#### Arguments\n| Name | Description |\n| --- | --- |\n| `email` | E-Mail |\n| `password` | Password |\n\n### Events\n\n**on:success**\n\nTriggers on successful login.\n\n#### Arguments\n| Name | Description |\n| --- | --- |\n| `email` | E-Mail |\n\n**on:failure**\n\nTriggers on failed login.\n\n#### Arguments\n| Name | Description |\n| --- | --- |\n| `error` | Error object. |\n\n## Login via OAuth2\n\nLogin via an OAuth2 provider.\n\n```svelte\n<script>\n  import { AuthOAuth2 } from \"svelte-appwrite\";\n</script>\n\n<AuthOAuth2\n  provider=\"google\"\n  success=\"http://localhost:5000?success\"\n  failure=\"http://localhost:5000?failure\"\n  let:authorize>\n  <button on:click={authorize}>Login Google</button>\n</AuthOAuth2>\n```\n\n### Properties\n| Name | Description |\n| --- | --- |\n| `provider` | OAuth2 provider |\n| `success` | Success url |\n| `failure` | Failure url |\n\n### Directives\n\n**let:authorize** `function`\n\n## Get user\n\nRequests current user to check if logged in.\n\n```svelte\n<script>\n  import { User } from \"svelte-appwrite\";\n</script>\n\n<User let:user>\n  <h1>Hello {user.name}!</h1>\n  <div>{user.email}</div>\n\n  <div slot=\"error\">\n    You are not logged in!\n  </div>\n</User>\n```\n\n### Directives\n\n**let:user** `object`\n\nGet currently logged in user data.\n\n## Get Collection\n\nGet a list of all the documents from a collection.\n\n```svelte\n<script>\n  import { Collection } from \"svelte-appwrite\";\n</script>\n\n<Collection collection=\"5f56a3035a01f\" let:documents>\n  You have {documents.length} documents.\n</Collection>\n```\n\n### Properties\n| Name | Description |\n| --- | --- |\n| `collection` | Collection unique ID. |\n| _additional_ | same as [here](https://appwrite.io/docs/client/database#listDocuments) |\n\n### Directives\n\n**let:documents** `array`\n\nArray of documents.\n\n**let:actions** `object`\n\nObject with function.\n\n#### Arguments\n| Name | Description |\n| --- | --- |\n| `reload()` | Re-fetch collection. |\n| `create(data, read, write)` | Create a new Document in the collection. `read`/`write` is optional and current user by default. |\n\n## Get Document\n\nGet a document. If you pass the `document` property with data from <Collection />, there wont be any data requested.\n\n```svelte\n<script>\n  import { Document } from \"svelte-appwrite\";\n</script>\n\n<Document id=\"5f56a3asda01f\" let:document>\n  Title: {document.title}\n  Text: {document.text}\n</Document>\n```\n### Properties\n| Name | Description |\n| --- | --- |\n| `id` | Document unique ID |\n| `collection` | Collection unique ID |\n| or |\n| `document` | Document passed from `<Collection />` |\n\n### Directives\n\n**let:document** `object`\n\nA JSON object with the document data.\n\n**let:actions** `object`\n\nObject with function.\n\n#### Arguments\n| Name | Description |\n| --- | --- |\n| `update(data)` | Update the document. |\n| `remove()` | Deletes the document. |\n| `reload()` | Re-fetch document. |\n\n### Events\n\n**on:change**\n\nTriggers on update or remove login.\n\n# API\n\n## Account\nThe Account components allow you to manage a user account.\n\n### `<User />`\n\n#### Slots\n\n- **loading**\n- **error**\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `reload()` | Reload. |\n| `logout()` | Logout current session. |\n| `logoutAll()` | Logout from all session. |\n| `logoutFrom(session)` | Logout from specific session. |\n\n- **let:user** \n- **let:error**\n\n#### Events\n\n- **on:success** On user fetch success.\n- **on:failure** On user fetch failure.\n- **on:successLogout** On `logout` success.\n- **on:failureLogout** On `logout` failure.\n- **on:successLogoutFrom** On `logoutFrom` success.\n- **on:failureLogoutFrom** On `logoutFrom` failure.\n- **on:successLogoutAll** On `logoutAll` success.\n- **on:failureLogoutAll** On `logoutAll` failure.\n\n### `<Create />`\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `create(email, password, name)` | Creates a user. |\n\n#### Events\n\n- **on:success** On `create` success.\n- **on:failure** On `create` failure.\n\n### `<Delete />`\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `delete()` | Deletes currently logged in user. |\n\n#### Events\n\n- **on:success** On `delete` success.\n- **on:failure** On `delete` failure.\n\n### `<Preferences />`\n\n#### Slots\n\n- **loading**\n- **error**\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `reload()` | Reloads preferences. |\n| `update(prefs)` | Update preferences. |\n\n#### Events\n\n- **on:success** On init and `reload` success.\n- **on:failure** On init and `reload` failure.\n- **on:successUpdate** On `update` success.\n- **on:failureUpdate** On `update` failure.\n\n### `<RecoverPassword />`\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `recover(email, url)` | Recover password. |\n| `complete(user, secret, password, passwordAgain)` | Complete password recovery. |\n\n#### Events\n\n- **on:successRecover** On init and `reload` success.\n- **on:failureRecover** On init and `reload` failure.\n- **on:successComplete** On `update` success.\n- **on:failureComplete** On `update` failure.\n\n### `<Update />`\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `name(name)` | Update name. |\n| `email(email, password)` | Update email. |\n| `password(password, oldPassword)` | Update password. |\n\n#### Events\n\n- **on:successName** On `name` success.\n- **on:failureName** On `name` failure.\n- **on:successEmail** On `email` success.\n- **on:failureEmail** On `email` failure.\n- **on:successPassword** On `password` success.\n- **on:failurePassword** On `password` failure.\n\n### `<Verification />`\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `create(url)` | Create Verification. |\n| `complete(user, secret)` | Complete Verification. |\n\n#### Events\n\n- **on:successCreate** On `create` success.\n- **on:failureCreate** On `create` failure.\n- **on:successComplete** On `complete` success.\n- **on:failureComplete** On `complete` failure.\n\n## Auth\nThe Auth components allow you to authenticate a user account.\n\n### `<AuthEmail />`\n\n#### Slots\n\n- **loading**\n- **success**\n- **error**\n\n#### Directives\n\n- **let:authorize(email, password)**\n- **let:user** \n- **let:error**\n\n#### Events\n\n- **on:success** On `authorize` success.\n- **on:failure** On `authorize` failure.\n\n### `<AuthOAuth2 />`\n\n#### Properties\n| Name | Description |\n| --- | --- |\n| `provider` | OAuth2 provider |\n| `success` | Success url |\n| `failure` | Failure url |\n#### Directives\n\n**let:authorize()**\n\n## Avatars\nThe Avatar components aim to help you complete everyday tasks related to your app image, icons, and avatars.\n\n### `<Browser />`\n\n#### Arguments\n\n- code\n- width\n- height\n- quality\n\n#### Directives\n\n- **let:src** Image link\n\n### `<CreditCard />`\n\n#### Arguments\n\n- code\n- width\n- height\n- quality\n\n#### Directives\n\n- **let:src** Image link\n\n### `<Favicon />`\n\n#### Arguments\n\n- url\n\n#### Directives\n\n- **let:src** Image link\n\n### `<Flag />`\n\n#### Arguments\n\n- code\n- width\n- height\n- quality\n\n#### Directives\n\n- **let:src** Image link\n\n### `<Image />`\n\n#### Arguments\n\n- url\n- width\n- height\n\n#### Directives\n\n- **let:src** Image link\n\n### `<QR />`\n\n#### Arguments\n\n- text\n- size\n- margin\n- download\n\n#### Directives\n\n- **let:src** Image link\n\n## Database\nThe Database components allow you to create structured collections of documents, query and filter lists of documents, and manage an advanced set of read and write access permissions.\n\n### `<Collection />`\n\n#### Arguments\n\n- id\n- filters\n- offset\n- limit\n- orderField\n- orderType\n- orderCast\n- search\n- first\n- last\n\n#### Slots\n\n- **loading**\n- **error**\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `reload()` | Reload. |\n| `create(data, read, write)` | Creates a Document. |\n\n- **let:documents**\n- **let:error**\n\n### `<Document />`\n\n#### Arguments\n\n- id\n- collection\n- document\n\n#### Slots\n\n- **loading**\n- **error**\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `reload()` | Reload. |\n| `update(data)` | Updates a Document. |\n| `remove()` | Removes a Document. |\n\n- **let:document**\n- **let:error**\n\n## Storage\nThe Storage components allow you to manage your project files. You can upload, view, download, and query all your project files.\n\n### `<Storage />`\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `create(file, read, write)` | Uploads a file. |\n\n- **let:files**\n\n### `<FileList />`\n\n#### Arguments\n\n- search\n- limit\n- offset\n- orderType\n\n#### Slots\n\n- **loading**\n- **error**\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `reload()` | Reload. |\n\n- **let:files**\n- **let:error**\n\n### `<File />`\n\n#### Arguments\n\n- file\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `download()` | Downloads file. |\n| `view(as)` | Get file for View. |\n| `preview(width, height, quality, background, output)` | Get file for preview. |\n| `update(read, write)` | Updates a file. |\n| `delete()` | Deletes a file. |\n\n## Locale\nThe Locale components allow you to customize your app based on your users' location.\n\n### `<Continents />`\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `reload()` | Reload. |\n\n- **let:continents**\n\n#### Slots\n\n- **loading**\n- **error**\n\n### `<Countries />`\n\n#### Arguments\n\n- eu\n\n#### Slots\n\n- **loading**\n- **error**\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `reload()` | Reload. |\n\n- **let:countries**\n\n### `<Currencies />`\n\n#### Slots\n\n- **loading**\n- **error**\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `reload()` | Reload. |\n\n- **let:currencies**\n\n### `<Locale />`\n\n#### Slots\n\n- **loading**\n- **error**\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `reload()` | Reload. |\n\n- **let:code**\n\n### `<PhoneCodes />`\n\n#### Slots\n\n- **loading**\n- **error**\n\n#### Directives\n\n**let:actions**\n| Name | Description |\n| --- | --- |\n| `reload()` | Reload. |\n\n- **let:codes**\n\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3589, 1],
		[3596, 36],
		[3603, 11],
		[3610, 9],
		[3617, 4],
		[3631, 4],
		[3638, 16],
		[3645, 7],
		[3652, 5],
		[3659, 5],
		[3666, 12],
		[3673, 5],
		[3680, 5],
		[3687, 3],
		[3694, 2],
		[3701, 3],
		[3708, 3],
		[3715, 1],
		[3722, 4],
		[3729, 11],
		[3736, 1],
		[3743, 39],
		[3750, 2],
		[3757, 4],
		[3764, 5],
		[3771, 4],
		[3778, 3],
		[3785, 5],
		[3792, 3],
		[3799, 3],
		[3806, 7],
		[3813, 2],
		[3820, 1],
		[3827, 2],
		[3834, 6],
		[3841, 3],
		[3848, 5],
		[3855, 3],
		[3862, 2],
		[3869, 3],
		[3876, 3],
		[3883, 4],
		[3890, 9],
		[3897, 8],
		[3904, 3],
		[3911, 5],
		[3918, 1],
		[3925, 2],
		[3932, 2],
		[3939, 2],
		[3946, 1],
		[3953, 2],
		[3960, 2],
		[3967, 1],
		[3974, 1],
		[3981, 2],
		[3988, 1],
		[3995, 2],
		[4002, 1],
		[4009, 1],
		[4016, 1],
		[4023, 7],
		[4030, 2],
		[4037, 11],
		[4044, 14],
		[4051, 5],
		[4058, 1],
		[4065, 3],
		[4072, 2],
		[4079, 5],
		[4086, 1],
		[4093, 14],
		[4100, 9],
		[4107, 5],
		[4114, 6],
		[4121, 9],
		[4128, 8]
	],
	"esm": false,
	"cjs": true
}
