{
	"name": "tsurih",
	"description": "Svelte form validation library with type safety and custom validators.",
	"repo_url": "",
	"authors": ["hardwayder"],
	"downloads": 144,
	"updated": "2024-04-15T16:53:49.639Z",
	"tags": ["miscellaneous"],
	"typescript": true,
	"version": "3.0.6",
	"svelte_range": "^4.0.5",
	"last_rune_check_version": "3.0.6",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "tsurih",
				"version": "3.0.6",
				"size": 15789
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Tsurih\n\nSvelte form validation library\n\n- Minimalistic üöê\n- Type safe üõü\n- Small size üì¶\n- Ability to use custom validators ‚òòÔ∏è\n- Strategies üéñÔ∏è\n- Helper functions üí™\n- Focused on DX ‚ù§Ô∏è\n\nExample üëá\n\n```jsx\n<script lang=\"ts\">\n  import { get } from \"svelte/store\";\n  import { tsurih, debounce, validators } from \"tsurih\";\n  import type { TConfig, TContext } from \"tsurih\";\n\n  const debounced = debounce(() => {\n    return new Promise<boolean>((res) =>\n      setTimeout(() => {\n        console.log(\"üöÇ\");\n        res(true);\n      })\n    );\n  }, 2000);\n\n  const customValidators = {\n    debounce: (message?: string) => {\n      return async (ctx: TContext<any, any, TConfig<any, any>>) => {\n        const result = await debounced();\n\n        const values = get(ctx.config.values);\n\n        if (!result) {\n          // ‚ùå Error\n          return message || \"Field is not valid\";\n        }\n\n        // ‚úÖ Success\n        return \"\";\n      };\n    },\n  };\n\n  const form = tsurih({\n      field1: true,\n      field2: \"\",\n    })\n  .setSchema({\n    field1: [validators.required()],\n    field2: [\n      validators.required(),\n      (ctx) => {\n        const values = get(ctx.config.values);\n\n        if (!values.field1) {\n          // ‚ùå Error\n          return \"Field is not valid\";\n        }\n\n        // ‚úÖ Success\n        return \"\";\n      },\n      customValidators.debounce(),\n    ],\n  })\n  .setStrategy(\"blur\");\n\n  $: watchOnlyField1 = $values.field1;\n\n  $: {\n    watchOnlyField1;\n    form.revalidate(\"field2\");\n  }\n\n  const { errors, isSubmitting, values } = form;\n</script>\n\n<form\n  use:form.reg\n  on:submit=\"{form.onSubmit((values) => {\n    console.log(values);\n  })}\"\n>\n  <input\n    type=\"checkbox\"\n    bind:checked=\"{$values.field1}\"\n    name=\"{form.fields.field1}\"\n  />\n\n  {#if $errors.field1}\n    <span>{$errors.field1}</span>\n  {/if}\n\n  <input bind:value=\"{$values.field2}\" name=\"{form.fields.field2}\" />\n\n  {#if $errors.field2}\n    <span>{$errors.field2}</span>\n  {/if}\n\n  {#if $isSubmitting}\n    Submitting...\n  {/if}\n\n  <button type=\"submit\">Submit</button>\n</form>\n```\n\n‚òòÔ∏è tsurih also provides validators, isString, isNumber, isArray, isObject, debounce utilities\n\n‚òòÔ∏è \"validators\" utility which has standard min, max, required, regexp, optionalMin, optionalRegexp.\n\n‚òòÔ∏è An additional validator \"optional\" is not needed as all default fields are optional. But if you, for example, want min or regexp to be checked only if a value is present, use optionMin or optionalRegexp . If you are writing your own validator which should be optional, then it should have an if(!ctx.value) return \"\" condition\n\n## Author\n\n[Vladislav Yemelyanov](https://twitter.com/@hardwayder)\n\nReleased under the MIT License.\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 344],
		[3603, 631],
		[3610, 789],
		[3617, 424],
		[3624, 241],
		[3631, 814],
		[3638, 81],
		[3645, 22],
		[3652, 6],
		[3659, 21],
		[3666, 327],
		[3673, 57],
		[3680, 28],
		[3687, 24],
		[3694, 32],
		[3708, 103],
		[3715, 69],
		[3722, 66],
		[3729, 350],
		[3736, 161],
		[3743, 194],
		[3750, 75],
		[3757, 335],
		[3764, 55],
		[3771, 151],
		[3778, 136],
		[3785, 60],
		[3792, 197],
		[3799, 61],
		[3806, 65],
		[3813, 139],
		[3820, 496],
		[3827, 48],
		[3834, 795],
		[3841, 916],
		[3848, 247],
		[3855, 194],
		[3862, 121],
		[3869, 136],
		[3876, 200],
		[3883, 277],
		[3890, 425],
		[3897, 397],
		[3904, 299],
		[3911, 80],
		[3918, 146],
		[3925, 171],
		[3932, 632],
		[3939, 303],
		[3946, 239],
		[3953, 288],
		[3960, 445],
		[3967, 816],
		[3974, 91],
		[3981, 189],
		[3988, 407],
		[3995, 404],
		[4002, 143],
		[4009, 69],
		[4016, 73],
		[4023, 131],
		[4030, 400],
		[4037, 197],
		[4044, 285],
		[4051, 337],
		[4058, 475],
		[4065, 363],
		[4072, 369],
		[4079, 429],
		[4086, 151],
		[4093, 312],
		[4100, 579],
		[4107, 393],
		[4114, 144],
		[4121, 199],
		[4128, 123],
		[4135, 234]
	]
}
