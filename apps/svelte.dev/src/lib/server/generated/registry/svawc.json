{
	"name": "svawc",
	"description": "Enables A-Frame component development using Svelte.",
	"repo_url": "https://github.com/immers-space/svawc",
	"authors": ["datatitian"],
	"homepage": "https://github.com/immers-space/svawc#readme",
	"downloads": 4,
	"updated": "2023-02-20T15:43:51.065Z",
	"tags": ["integration"],
	"github_stars": 11,
	"typescript": false,
	"version": "0.0.2",
	"svelte_range": "^3.55.1",
	"last_rune_check_version": "0.0.2",
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svawc",
				"version": "0.0.2",
				"size": 101990
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "![logo - cartoon seagul with a wide open beak and the letters S V A W C](./readme_files/svawc%20logo.png)\n\n# SVAWC\n\n**Sv**elte **A**-Frame **W**eb **C**omponents\n\nSVAWC brings modern reactive development and HTML templating to A-Frame component development without compromising on speed, usability, or bundle size. \n\n## How it works\n\n1. Write reactive template code using Svelte\n1. Svelte compiles that down to efficient `createElement`, `setAttibute`, et c. calls (no virtual DOM or unecessary entity recreation)\n2. SVAWC packages it into Web Components for distribution\n3. Link the packaged script and then use the Web Component in any A-Frame scene, works with bundled apps and vanilla JS & HTML\n\n## What it looks like\n\n**Svelte reactive template source:**\n\n```Svelte\n<!-- APerson.svelte -->\n<script>\n  // props, converted to dash case on WebComponent, e.g. shirt-color\n  export let skinColor = 'burlywood'\n  export let shirtColor = 'seagreen'\n  export let pantsColor = 'slateblue'\n  // computed variables\n  $: skinMaterial = { color: skinColor, roughness: 0.9 }\n  $: shirtMaterial = { color: shirtColor }\n  $: pantsMaterial = { color: pantsColor }\n  const limbs = [-1, 1]\n</script>\n\n<a-entity\n  class=\"head\" \n  position={{ x: 0, y: 1.6, z: 0 }}\n  geometry={{ primitive: 'sphere', radius: 0.2 }}\n  material={skinMaterial}\n  shadow\n/>\n<a-entity\n  class=\"body\"\n  position={{ x: 0, y: 1.05, z: 0 }}\n  geometry={{primitive: 'cylinder', radius: 0.25, height: 0.7 }}\n  material={shirtMaterial}\n  shadow\n>\n  <!-- loops -->\n  {#each limbs as side (side)}\n    <a-entity\n      class=\"arm\"\n      position={{ x: side *  0.3, y: 0.05, z: 0 }}\n      rotation={{ x: 0, y: 0, z: side * 30 }}\n      geometry={{ primitive: 'cylinder', radius: 0.1, height: 0.7 }}\n      material={shirtMaterial}\n      shadow\n      />\n  {/each}\n</a-entity>\n{#each limbs as side (side)}\n  <a-entity\n    class=\"leg\"\n    position={{ x: side * 0.1, y: 0.35, z: 0 }}\n    rotation={{ x: 0, y: 0, z: side * 10 }}\n    geometry={{ primitive: 'cylinder', radius: 0.15, height: 0.7 }}\n    material={pantsMaterial}\n    shadow\n    />\n{/each}\n```\n\nThe above is just standard Svelte code.\n[Check out their guide](https://svelte.dev/tutorial/basics) if you're not already familiar.\n\n**SVAWC Wrapper:**\n\n```js\nimport { registerWebComponent } from 'svawc'\nimport APerson from \"./APerson.svelte\"\nregisterWebComponent({Component: APerson, tagname: \"a-person\", props: [\"skinColor\", \"shirtColor\", \"pantsColor\"] })\n```\n\n\nUsage in A-Frame Scene:\n\n```html\n<head>\n  <script src=\"https://aframe.io/releases/1.4.1/aframe.js\"></script>\n  <script src='https://cdn.jsdelivr.net/npm/svawc-template'></script>\n</head>\n<body>\n  <a-scene>\n    <a-person position=\"0 0 -3\"></a-person>\n    <a-person position=\"1 0 -3\" skin-color=\"peachpuff\" shirt-color=\"grey\" pants-color=\"darkgrey\"></a-person>\n    <a-person position=\"-1 0 -3\" skin-color=\"sienna\" shirt-color=\"pink\" pants-color=\"white\"></a-person>\n  </a-scene>\n</body>\n```\n\n[Try it out](https://momentous-jelly-secure.glitch.me/)\n\n## Why it's useful\n\nI love A-Frame, but the recurring pain points for me in large apps are handling complex reactive state\nand making nested entity structures re-usable.\n\nSolutions for the reactive state generally involve meta-components\nlike `event-set` or the creation of one-off 'components' that just handle business logic.\nThese tend to spread your logic around and make a large codebase harder to maintain.\nFor re-usable structures, you're either stuck with HTML templates, which are awkward to use, bloat your index.html,\nand again serve to keep your structure far from your logic, or you've got to write tons of tedious\n`createElement` and `setAttribute` calls.\n\nSVAWC lets you write the organized, concise code we're accustomed to from modern\nreactive frameworks and integrate it seamlessly in any A-Frame project. SVAWC is\nthe A-Frame answer to React Three Fiber, which is a lovely and powerful framework,\nbut never feels quite right to me due the lack of ECS.\n\n## API documentation\n\nView the full API documentation at\n[https://immers-space.github.io/svawc](https://immers-space.github.io/svawc)\n\n## Get Started\n\nThe [svawc-template repo](https://github.com/immers-space/svawc-template/generate) has everything you need to start building and publishing SVAWCs.\n[Click here to create a copy of it](https://github.com/immers-space/svawc-template/generate).\n\n## Feature status\n\nThis library is fully functional, but some of the features still need some polish\n\n<dl>\n  <dt>ðŸ™‚ Svelte props as HTML Attributes</dt>\n  <dd>\n    Svelte props become attributes on the custom element, converting camelCase to dash-case\n    automatically. For now, the props must be explicitly listed in the `props` option, but\n    I'd like to be able to infer them automatically in the future.\n  </dd>\n  <dt>ðŸ˜€ Light DOM</dt>\n  <dd>\n    All component output is rendered to the light DOM as children of the custom element.\n    Shadow DOM is not available as the boundary breaks A-Frame's scene graph logic,\n    and the benefits of Shadow DOM are primarily CSS encapsulation which isn't relevant here.\n  </dd>\n  <dt>ðŸ˜€ Slots</dt>\n  <dd>\n    Full slot functionality is available including default and named slots with the small caveat\n    that the slot content must be wrapped in a <code>template</code> tag.\n    See <a href=\"https://immers-space.github.io/svawc/tutorial-slots.html\">slots tutorial</a> for details.\n  </dd>\n  <dt>ðŸ˜¦ Dependency Injection</dt>\n  <dd>\n    Not available yet, but I'd like to have it work where dependencies on A-Frame components can be\n    re-used from the consuming app if already installed or injected via CDN if not so that we don't\n    have bundle extra code in our SVAWCs nor worry about duplicate component registration.\n  </dd>\n  <dt>ðŸ˜¦ Loading order gotcha</dt>\n  <dd>\n    SVAWC scripts mustn't be loaded as type=\"module\", async, or defer as this puts it in\n    conflict with the A-Frame loading order. Instead, load it as a normal script in your HEAD\n    and it will work.\n    (<a href=\"https://github.com/aframevr/aframe/issues/5228\">issue status</a>)\n  </dd>\n</dl>\n\nKey: ðŸ˜€ complete, ðŸ™‚ fully functional but could be improved, ðŸ˜¦ missing or has issues\n\n## Acknowledgements\n\nBig thanks to @dmarcos for undertaking the massive task of porting A-Frame over to\nnative Custom Elements for v1.4.0; this would not be possible otherwise.\n\nCode adapted from [svelte-tag](https://github.com/crisward/svelte-tag) by Chris Ward.\n\nLogo is CC-BY-NC-SA, adapted from a photo by Leonard J Matthews. \n",
	"legacy_svelte": false,
	"downloads_history": [
		[3596, 1],
		[3603, 2],
		[3610, 3],
		[3624, 2],
		[3631, 1],
		[3645, 3],
		[3652, 2],
		[3659, 1],
		[3666, 3],
		[3687, 1],
		[3701, 2],
		[3708, 1],
		[3743, 1],
		[3757, 2],
		[3771, 2],
		[3778, 1],
		[3785, 1],
		[3792, 1],
		[3806, 3],
		[3813, 2],
		[3834, 2],
		[3841, 10],
		[3848, 2],
		[3855, 6],
		[3862, 1],
		[3883, 1],
		[3890, 3],
		[3904, 2],
		[3911, 3],
		[3932, 1],
		[3939, 2],
		[3946, 1],
		[3953, 1],
		[3960, 1],
		[3967, 1],
		[3981, 6],
		[3988, 2],
		[4016, 5],
		[4023, 6],
		[4037, 7],
		[4044, 7],
		[4051, 1],
		[4058, 1],
		[4065, 3],
		[4072, 1],
		[4079, 4],
		[4093, 1],
		[4100, 6],
		[4114, 4],
		[4121, 8],
		[4128, 1]
	],
	"esm": false,
	"cjs": true
}
