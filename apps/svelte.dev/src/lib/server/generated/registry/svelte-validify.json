{
	"name": "svelte-validify",
	"description": "Flexible form validation library for Svelte.",
	"repo_url": "",
	"authors": ["zackify"],
	"downloads": 6,
	"updated": "2021-03-15T21:15:46.922Z",
	"tags": ["miscellaneous"],
	"typescript": true,
	"version": "0.0.1",
	"svelte_range": "^3.24.0",
	"last_rune_check_version": "0.0.1",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svelte-validify",
				"version": "0.0.1",
				"size": 35934
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "# Svelte Validify\n\nAn attempt to bring [react-validify](https://github.com/zackify/validify) over to Svelte.\n\nThe goal with this library is to be the most flexible form library while also having the smallest API.\n\nTodo: Test coverage\n\n## Get started\n\n- Install it\n- Make a custom Input component\n- The end\n\n## Install\n\n```\nnpm install svelte-validify\n```\n\n## Making an Input Component\n\nYour input component must implement `handleChange` `handleBlur` `errors` and `value` to function properly.\n\nOnce you add these methods to your component, form validation will be taken care of for you. \n\nWhen a user has an invalid field, the error will not be shown until blurring the field, or someone submits the form.\n\nAfter this happens, validation runs onChange for the best UX possible.\n\n```svelte\n<script type=\"ts\">\n  import { useField } from \"svelte-validify\";\n  import type { RuleFn } from \"svelte-validify\";\n\n  export let name: string;\n  export let rules: RuleFn[] = [];\n\n  let field = useField({ name, rules });\n</script>\n\n<div>\n  {#if $field.errors.length}\n    <div>{$field.errors[0]}</div>\n  {/if}\n  <input\n    type=\"text\"\n    {name}\n    value={$field.value}\n    on:blur={$field.handleBlur}\n    on:keyup={(e) => $field.handleChange(e.currentTarget.value)}\n  />\n</div>\n\n```\n\n## Using a Form\n\nImport the Form component, and createForm method from the library.\n\nInitialize the form with a few values if you'd like.\n\nRender inputs, and set custom rules. You can see this in action by running the example folder :)\n```svelte\n<script lang=\"ts\">\n  import { Form, createForm } from \"svelte-validify\";\n  import Input from \"./Input.svelte\";\n\n  //Always create a form, and add some optional values\n  let form = createForm({ name: \"Bob\", email: \"test\" });\n\n  //Dummy rulee\n  let isRequired = (value) => (!value ? \"Field is required\" : \"\");\n</script>\n\n<Form {form} onSubmit={() => console.log($form.values)}>\n  <Input name=\"name\" rules={[ isRequired]} />\n  <Input name=\"email\" rules={[isRequired]} />\n  <button type=\"submit\" disabled={$form.disabled}>Hello!</button>\n</Form>\n```\n\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 1],
		[3603, 1],
		[3610, 2],
		[3631, 1],
		[3645, 1],
		[3659, 1],
		[3666, 2],
		[3673, 1],
		[3680, 1],
		[3708, 2],
		[3715, 1],
		[3729, 2],
		[3750, 1],
		[3757, 2],
		[3771, 1],
		[3778, 2],
		[3785, 1],
		[3792, 2],
		[3806, 3],
		[3834, 1],
		[3848, 1],
		[3855, 6],
		[3869, 7],
		[3876, 1],
		[3883, 2],
		[3890, 2],
		[3897, 1],
		[3904, 3],
		[3932, 1],
		[3939, 1],
		[3946, 1],
		[3960, 2],
		[3981, 1],
		[4016, 4],
		[4030, 1],
		[4037, 3],
		[4044, 5],
		[4051, 1],
		[4065, 1],
		[4072, 1],
		[4093, 7],
		[4100, 2],
		[4107, 1],
		[4114, 6],
		[4121, 6],
		[4128, 2],
		[4135, 4]
	],
	"esm": true,
	"cjs": false
}
