{
	"name": "svouter",
	"description": "Declarative Svelte routing library with SSR support.",
	"repo_url": "",
	"authors": ["pixelmund"],
	"downloads": 4,
	"updated": "2023-11-23T15:28:51.780Z",
	"tags": ["router"],
	"typescript": true,
	"version": "0.2.3",
	"svelte_range": "^4.0.0||^5.0.0-next.7",
	"kit_range": "^1.27.4",
	"last_rune_check_version": "0.2.3",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "svouter",
				"version": "0.2.3",
				"size": 75078
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "[![npm][npm]][npm-url]\n\n# Svelte Routing\n\nA declarative Svelte routing library with SSR support.\n\n[[CHANGELOG][changelog-url]]\n\n## Install\n\n```bash\nnpm i -D svelte-routing\n```\n\n## Usage\n\n```html\n<!-- App.svelte -->\n<script>\n  import { Router, Link, Route } from \"svelte-routing\";\n  import Home from \"./routes/Home.svelte\";\n  import About from \"./routes/About.svelte\";\n  import Blog from \"./routes/Blog.svelte\";\n\n  export let url = \"\";\n</script>\n\n<Router {url}>\n  <nav>\n    <Link to=\"/\">Home</Link>\n    <Link to=\"/about\">About</Link>\n    <Link to=\"/blog\">Blog</Link>\n  </nav>\n  <div>\n    <Route path=\"/blog/:id\" component={BlogPost} />\n    <Route path=\"/blog\" component={Blog} />\n    <Route path=\"/about\" component={About} />\n    <Route path=\"/\"><Home /></Route>\n  </div>\n</Router>\n```\n\n```javascript\n// main.js\nimport App from \"./App.svelte\";\n\nconst app = new App({\n    target: document.getElementById(\"app\"),\n});\n```\n\n## API\n\n#### `Router`\n\nThe `Router` component supplies the `Link` and `Route` descendant components\nwith routing information through context, so you need at least one `Router` at\nthe top of your application. It assigns a score to all its `Route` descendants\nand picks the best match to render.\n\n`Router` components can also be nested to allow for seamless merging of many\nsmaller apps.\n\n###### Properties\n\n|     Property     | Required | Default Value | Description                                                                                                                                                                                                                                                                                                 |\n| :--------------: | :------: | :-----------: | :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n|    `basepath`    |          |     `\"/\"`     | The `basepath` property will be added to all the `to` properties of `Link` descendants and to all `path` properties of `Route` descendants. This property can be ignored in most cases, but if you host your application on e.g. `https://example.com/my-site`, the `basepath` should be set to `/my-site`. |\n|      `url`       |          |     `\"\"`      | The `url` property is used in SSR to force the current URL of the application and will be used by all `Link` and `Route` descendants. A falsy value will be ignored by the `Router`, so it's enough to declare `export let url = \"\";` for your topmost component and only give it a value in SSR.           |\n| `viewtransition` |          |    `null`     | View Transition (Experimental)                                                                                                                                                                                                                                                                              |\n\n#### `Link`\n\nA component used to navigate around the application.\n\n###### Properties\n\n|     Property     | Required | Default Value | Description                                                                                                                                                                                                                           |\n| :--------------: | :------: | :-----------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n|       `to`       |   ✔ ️   |     `\"#\"`     | URL the component should link to.                                                                                                                                                                                                     |\n|    `replace`     |          |    `false`    | When `true`, clicking the `Link` will replace the current entry in the history stack instead of adding a new one.                                                                                                                     |\n|     `state`      |          |     `{}`      | An object that will be pushed to the history stack when the `Link` is clicked.                                                                                                                                                        |\n|    `getProps`    |          | `() => ({})`  | A function that returns an object that will be spread on the underlying anchor element's attributes. The first argument given to the function is an object with the properties `location`, `href`, `isPartiallyCurrent`, `isCurrent`. |\n| `preserveScroll` |          |    `false`    | When `true`, clicking the `Link` will not scroll the page to the top.                                                                                                                                                                 |\n\n#### `Route`\n\nA component that will render its `component` property or children when its\nancestor `Router` component decides it is the best match.\n\nAll properties other than `path` and `component` given to the `Route` will be\npassed to the rendered `component`.\n\nPotential path parameters will be passed to the rendered `component` as\nproperties. A wildcard `*` can be given a name with `*wildcardName` to pass the\nwildcard string as the `wildcardName` property instead of as the `*` property.\n\nPotential path parameters are passed back to the parent using props, so they can\nbe exposed to the slot template using `let:params`.\n\n```html\n<Route path=\"/blog/:id\" let:params>\n    <BlogPost id=\"{params.id}\" />\n</Route>\n```\n\nThe active status of link can be exposed to the slot template using\n`let:active`.\n\n```html\n<Link to=\"/browser\" let:active>\n  <MenuItem active={active}>Browser</MenuItem>\n</Link>\n```\n\n###### Properties\n\n|  Property   | Required | Default Value | Description                                                                                                                                                              |\n| :---------: | :------: | :------------ | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n|   `path`    |          | `\"\"`          | The path for when this component should be rendered. If no `path` is given the `Route` will act as the default that matches if no other `Route` in the `Router` matches. |\n| `component` |          | `null`        | The component constructor that will be used for rendering when the `Route` matches. If `component` is not set, the children of `Route` will be rendered instead.         |\n\n#### `navigate`\n\nA function that allows you to imperatively navigate around the application for\nthose use cases where a `Link` component is not suitable, e.g. after submitting\na form.\n\nThe first argument is a string denoting where to navigate to, and the second\nargument is an object with a `replace`, `state` and `preserveScroll` properties equivalent to those\nin the `Link` component.\n\n```html\n<script>\n    import { navigate } from \"svelte-routing\";\n\n    function onSubmit() {\n        login().then(() => {\n            navigate(\"/success\", { replace: true });\n        });\n    }\n</script>\n```\n\n#### `link`\n\nAn action used on anchor tags to navigate around the application. You can add an\nattribute `replace` to replace the current entry in the history stack instead of\nadding a new one and `preserveScroll` to not scroll the page to the top when clicked.\n\n```html\n<script>\n    import { link } from \"svelte-routing\";\n</script>\n\n<Router>\n    <a href=\"/\" use:link>Home</a>\n    <a href=\"/replace\" use:link replace>Replace this URL</a>\n    <!-- ... -->\n</Router>\n```\n\n#### `links`\n\nAn action used on a root element to make all relative anchor elements navigate\naround the application. You can add an attribute `replace` on any anchor to\nreplace the current entry in the history stack instead of adding a new one.\nYou can add an attribute `preserveScroll` on any anchor to not to scroll the page to the top when clicked. You\ncan add an attribute `noroute` for this action to skip over the anchor and allow\nit to use the native browser action.\n\n```html\n<!-- App.svelte -->\n<script>\n    import { links } from \"svelte-routing\";\n</script>\n\n<div use:links>\n    <Router>\n        <a href=\"/\">Home</a>\n        <a href=\"/replace\" replace>Replace this URL</a>\n        <a href=\"/native\" noroute>Use the native action</a>\n        <!-- ... -->\n    </Router>\n</div>\n```\n\n#### `viewtransition`\n\nViewtransition for navigation (Experimental).\n\n_`builtin transition`_\n\n```html\n<script>\n    import { fade } from \"svelte/transition\";\n    // ...\n</script>\n\n<Router viewtransition=\"{() => { fn: fade, duration: 500 }}\">\n    <Route path=\"/\" component=\"{Home}\" />\n    <Route path=\"/contact\" component=\"{Contact}\" />\n</Router>\n```\n\n_`custom transition`_\n\n```html\n<script>\n    import { cubicin } from \"svelte/easing\";\n    // ...\n</script>\n\n<Router\n    viewtransition=\"{() => { duration: 500, easing: cubicin, css: (t) => `scale:${t};transform-origin:center center;` }}\"\n>\n    <Route path=\"/\" component=\"{Home}\" />\n    <Route path=\"/contact\" component=\"{Contact}\" />\n</Router>\n```\n\n# License\n\nThis project is licensed under the [**MIT**](LICENSE).\n\n# Contribution\n\nUnless you explicitly state otherwise, any contribution intentionally submitted\nfor this project by you, shall be licensed as **MIT**, without any additional\nterms or conditions. [**Code of Conduct**](CODE_OF_CONDUCT.md).\n\n[npm]: https://img.shields.io/npm/v/svelte-routing.svg\n[npm-url]: https://npmjs.com/package/svelte-routing\n[changelog-url]: https://github.com/EmilTholin/svelte-routing/blob/master/CHANGELOG.md\n",
	"legacy_svelte": false,
	"downloads_history": [
		[3610, 315],
		[3617, 12],
		[3624, 5],
		[3631, 1],
		[3638, 2],
		[3645, 8],
		[3652, 13],
		[3659, 1],
		[3666, 14],
		[3673, 10],
		[3687, 1],
		[3694, 5],
		[3708, 3],
		[3715, 2],
		[3729, 1],
		[3736, 1],
		[3757, 5],
		[3771, 3],
		[3778, 9],
		[3785, 1],
		[3792, 2],
		[3806, 1],
		[3813, 2],
		[3834, 31],
		[3848, 3],
		[3862, 3],
		[3869, 1],
		[3883, 6],
		[3890, 6],
		[3904, 7],
		[3911, 1],
		[3918, 1],
		[3932, 2],
		[3946, 3],
		[3953, 1],
		[3960, 2],
		[3967, 3],
		[3981, 1],
		[3988, 6],
		[4016, 2],
		[4023, 4],
		[4037, 17],
		[4044, 11],
		[4051, 1],
		[4065, 1],
		[4093, 1],
		[4100, 15],
		[4107, 2],
		[4114, 4],
		[4121, 7],
		[4128, 3],
		[4135, 5]
	],
	"esm": true,
	"cjs": false
}
