{
	"name": "@tnthung/svelte-component",
	"description": "Provide Svelte actions, functions, and components.",
	"repo_url": "",
	"authors": ["tnthung"],
	"downloads": 3,
	"updated": "2023-05-29T01:13:31.829Z",
	"tags": ["miscellaneous"],
	"typescript": true,
	"version": "0.0.4",
	"svelte_range": "^3.54.0",
	"kit_range": "^1.5.0",
	"last_rune_check_version": "0.0.4",
	"github_stars": 0,
	"dependency_tree": {
		"rootIndex": 0,
		"packages": [
			{
				"name": "@tnthung/svelte-component",
				"version": "0.0.4",
				"size": 14069
			}
		],
		"dependencies": [],
		"circular": []
	},
	"readme": "This library is built for the purpose of reducing code duplication in the\nmultiple projects that I work on. The components are written as generic as\npossible, so that they can be used in different projects.\n\n\n# Action\n\n1. [clickOut](#clickOut)\n\n\n## clickOut\n\nThis action is used to detect if a click event is happened outside of the\nelement. To use this action, simply add `use:clickOut={callback}` to the\nDOM element. The callback function takes no arguments and will be called\nwhen a click event is detected outside of the element.\n\n```svelte\n<script>\n  import { clickOut } from 'svelte-components'\n  let show = false\n</script>\n\n<button on:click={() => show = true}>Show</button>\n\n{#if show}\n  <div use:clickOut={() => show = false}>\n    <p>Click outside of this element to close it</p>\n  </div>\n{/if}\n```\n\n\n# Function\n\n1. [normalizeClass](#normalizeClass)\n1. [normalizeStyle](#normalizeStyle)\n1. [stylable](#stylable)\n\n\n## normalizeClass\n\nThis function is used to normalize the `HTML` class attribute. It takes\nin a string and remove all extra spaces and new lines.\n\n| Name           | Type     | Default | Description                   |\n| ---            | ---      | ---     | ---                           |\n| `classes`      | string   |         | The classes to be normalized. |\n\n```typescript\nimport { normalizeClass } from 'svelte-components'\n\nconst class = normalizeClass(`\n  class1 class2\n  class3\n`); // class = 'class1 class2 class3'\n```\n\n\n## normalizeStyle\n\nThis function is used to normalize the `HTML` style attribute. It takes\nin a string and remove all extra spaces, new lines and the comments.\n\n| Name           | Type     | Default | Description                   |\n| ---            | ---      | ---     | ---                           |\n| `styles`       | string   |         | The styles to be normalized.  |\n\n```typescript\nimport { normalizeStyle } from 'svelte-components'\n\nconst style = normalizeStyle(`\n  color: red;\n  /* This is a comment */\n  background-color: blue;\n`); // style = 'color: red; background-color: blue;'\n```\n\n\n## stylable\n\nThis function is mainly be used for building the `svelte` component by\ngiving them the ability to be styled externally. It takes 4 arguments, and\nexposes 4 props to the component. By the given name, if name is `\"\"`, then\n\n1. `class`\n1. `style`\n1. `class-extra`\n1. `style-extra`\n\nwill be exposed to the component. If name is non-empty string, then\n\n1. `class-${name}`\n1. `style-${name}`\n1. `class-${name}-extra`\n1. `style-${name}-extra`\n\nwill be exposed to the component.\n\nThe props with no `-extra` suffix will fully replace the default classes\nor styles. The props with `-extra` suffix will be appended to the default\nclasses or styles.\n\nThe `defaultClass` and `defaultStyle` arguments will be normalized first\nbefore being applied to the component.\n\nNotice that, for classes to take effect, they have to be defined in the\nglobal scope (using `:global` or `<style global>`).\n\n\n| Name           | Type     | Default | Description                                                  |\n| ---            | ---      | ---     | ---                                                          |\n| `props`        | Object   |         | Pass the svelte `$$props` magic variable to this argument.   |\n| `name`         | string   |         | The name of the part to be styled. (`\"\"` for main partition) |\n| `defaultClass` | string   |         | The default classes to be applied to the part.               |\n| `defaultStyle` | string   |         | The default styles to be applied to the part.                |\n\n```svelte\n<!-- Defining Component.svelte -->\n<script>\n  import { stylable } from 'svelte-components'\n</script>\n\n<div {...stylable($$props, \"\", \"\", \"\")}>          <!-- Exposing `class`,      `style`,      `class-extra`,      `style-extra`      props -->\n  <span {...stylable($$props, \"span\", \"\", \"\")}/>  <!-- Exposing `class-span`, `style-span`, `class-span-extra`, `style-span-extra` props -->\n</div>\n```\n\n```svelte\n<!-- Using the component -->\n<script>\n  import Component from './Component.svelte'\n</script>\n\n<Component\n  class=\"class1 class2\"\n  style-extra=\"color: red;\"\n  class-span-extra=\"class3\"/>\n```\n\n\n# Component\n\n1. [Divisor](#divisor)\n1. [Labeled](#labeled)\n\n\n## Divisor\n\nThis component is used to create a simple divisor line with rounded edge.\n\n### Props\n\n| Name         | Type     | Default      | Description                                                  |\n| ---          | ---      | ---          | ---                                                          |\n| `gap?`       | `number` | `5` (in px)  | The gap between the line and the text                        |\n| `color?`     | `string` | `#888`       | The color of the line                                        |\n| `thickness?` | `number` | `3` (in px)  | The thickness of the line                                    |\n| `direction?` | `string` | `horizontal` | The direction of the line. Can be `horizontal` or `vertical` |\n\n```svelte\n<script>\n  import { Divisor } from 'svelte-components'\n</script>\n\n<Divisor />\n```\n\n\n## Labeled\n\nThis component added a label to the element. The label can be positioned\non the top, bottom, left, or right of the element. Like regular `label`\ntag, by clicking on the label, the element will be focused.\n\n### Props\n\n| Name         | Type     | Default      | Description                                                           |\n| ---          | ---      | ---          | ---                                                                   |\n| `gap?`       | `number` | `5` (in px)  | The gap between the element and the label                             |\n| `label?`     | `string` | `''`         | The text of the label                                                 |\n| `position?`  | `string` | `top`        | The position of the label. Can be `top`, `bottom`, `left`, or `right` |\n\n```svelte\n<script>\n  import { Labeled } from 'svelte-components'\n</script>\n\n<Labeled label=\"Label\">\n  <input type=\"text\" />\n</Labeled>\n```\n",
	"legacy_svelte": true,
	"downloads_history": [
		[3596, 7],
		[3603, 6],
		[3610, 1],
		[3631, 1],
		[3652, 1],
		[3659, 3],
		[3666, 4],
		[3680, 1],
		[3708, 1],
		[3729, 1],
		[3743, 3],
		[3757, 1],
		[3764, 1],
		[3778, 2],
		[3785, 1],
		[3806, 2],
		[3827, 7],
		[3834, 6],
		[3841, 24],
		[3855, 1],
		[3862, 4],
		[3883, 4],
		[3890, 1],
		[3897, 1],
		[3904, 1],
		[3932, 1],
		[3939, 1],
		[3960, 1],
		[3974, 1],
		[3981, 1],
		[4016, 1],
		[4023, 2],
		[4037, 13],
		[4044, 10],
		[4051, 3],
		[4058, 3],
		[4065, 2],
		[4072, 1],
		[4093, 4],
		[4100, 8],
		[4114, 3],
		[4121, 10],
		[4128, 4],
		[4135, 4]
	]
}
